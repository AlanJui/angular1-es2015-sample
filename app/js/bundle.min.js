"use strict";function checkString(e,t,n){var r="",i=!1,o=0,a=fs.createReadStream(e,{encoding:"utf8"});a.on("close",n),a.on("error",n),a.on("readable",function(){for(;i!==!0&&null!==(r=a.read(1));)r===t.charAt(o)?o+=1:o=0,o===t.length&&(i=!0);assert.equal(!0,i),this.close()})}function runTests(){var e=dirs.dist;describe('Test if the files from the "'+e+'" directory have the expected content',function(){it('".htaccess" should have the "ErrorDocument..." line uncommented',function(t){var n="\n\nErrorDocument 404 /404.html\n\n";checkString(path.resolve(e,".htaccess"),n,t)}),it('"index.html" should contain the correct jQuery version in the CDN URL',function(t){var n="ajax.googleapis.com/ajax/libs/jquery/"+pkg.devDependencies.jquery+"/jquery.min.js";checkString(path.resolve(e,"index.html"),n,t)}),it('"index.html" should contain the correct jQuery version in the local URL',function(t){var n="js/vendor/jquery-"+pkg.devDependencies.jquery+".min.js";checkString(path.resolve(e,"index.html"),n,t)}),it('"main.css" should contain a custom banner',function(t){var n="/*! HTML5 Boilerplate v"+pkg.version+" | "+pkg.license.type+" License | "+pkg.homepage+" */\n\n/*\n";checkString(path.resolve(e,"css/main.css"),n,t)})})}function checkFiles(e,t){var n=require("glob").sync("**/*",{cwd:e,dot:!0,mark:!0});t.forEach(function(t){var r=!1,i="/"!==t.slice(-1)?"regular file":"directory";-1!==n.indexOf(t)&&(r="/"!==t.slice(-1)?fs.statSync(path.resolve(e,t)).isFile():"/"===n[n.indexOf(t)].slice(-1)),it('"'+t+'" should be present and it should be a '+i,function(){assert.equal(!0,r)})}),n.filter(function(e){return-1===t.indexOf(e)}).forEach(function(e){it('"'+e+'" should NOT be present',function(){assert(!1)})})}function runTests(){describe("Test if all the expected files, and only them, are present in the build directories",function(){describe(dirs.archive,function(){checkFiles(dirs.archive,expectedFilesInArchiveDir)}),describe(dirs.dist,function(){checkFiles(dirs.dist,expectedFilesInDistDir)})})}angular.module("myApp",["ngRoute","myApp.view1","myApp.view2","myApp.version"]).config(["$routeProvider",function(e){e.otherwise({redirectTo:"/view1"})}]),angular.module("myApp.view1",["ngRoute"]).config(["$routeProvider",function(e){e.when("/view1",{templateUrl:"view1/view1.html",controller:"View1Ctrl"})}]).controller("View1Ctrl",[function(){}]),describe("myApp.view1 module",function(){beforeEach(module("myApp.view1")),describe("view1 controller",function(){it("should ....",inject(function(e){var t=e("View1Ctrl");expect(t).toBeDefined()}))})}),angular.module("myApp.view2",["ngRoute"]).config(["$routeProvider",function(e){e.when("/view2",{templateUrl:"view2/view2.html",controller:"View2Ctrl",controllerAs:"vm"})}]).controller("View2Ctrl",[function(){var e=this;e.pageTitle="測試"}]),describe("myApp.view2 module",function(){beforeEach(module("myApp.view2")),describe("view2 controller",function(){it("should ....",inject(function(e){var t=e("View2Ctrl");expect(t).toBeDefined()}))})}),angular.module("myApp.version.interpolate-filter",[]).filter("interpolate",["version",function(e){return function(t){return String(t).replace(/\%VERSION\%/gm,e)}}]),describe("myApp.version module",function(){beforeEach(module("myApp.version")),describe("interpolate filter",function(){beforeEach(module(function(e){e.value("version","TEST_VER")})),it("should replace VERSION",inject(function(e){expect(e("before %VERSION% after")).toEqual("before TEST_VER after")}))})}),angular.module("myApp.version.version-directive",[]).directive("appVersion",["version",function(e){return function(t,n,r){n.text(e)}}]),describe("myApp.version module",function(){beforeEach(module("myApp.version")),describe("app-version directive",function(){it("should print current version",function(){module(function(e){e.value("version","TEST_VER")}),inject(function(e,t){var n=e("<span app-version></span>")(t);expect(n.text()).toEqual("TEST_VER")})})})}),angular.module("myApp.version",["myApp.version.interpolate-filter","myApp.version.version-directive"]).value("version","0.1"),describe("myApp.version module",function(){beforeEach(module("myApp.version")),describe("version service",function(){it("should return current version",inject(function(e){expect(e).toEqual("0.1")}))})}),function(e,t,n){function r(e,t){return t=t||Error,function(){var n,r,i=2,o=arguments,a=o[0],s="["+(e?e+":":"")+a+"] ",u=o[1];for(s+=u.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1),n=t+i;return n<o.length?ye(o[n]):e}),s+="\nhttp://errors.angularjs.org/1.4.9/"+(e?e+"/":"")+a,r=i,n="?";r<o.length;r++,n="&")s+=n+"p"+(r-i)+"="+encodeURIComponent(ye(o[r]));return new t(s)}}function i(e){if(null==e||A(e))return!1;if(Ur(e)||S(e)||jr&&e instanceof jr)return!0;var t="length"in Object(e)&&e.length;return E(t)&&(t>=0&&(t-1 in e||e instanceof Array)||"function"==typeof e.item)}function o(e,t,n){var r,a;if(e)if(k(e))for(r in e)"prototype"==r||"length"==r||"name"==r||e.hasOwnProperty&&!e.hasOwnProperty(r)||t.call(n,e[r],r,e);else if(Ur(e)||i(e)){var s="object"!=typeof e;for(r=0,a=e.length;a>r;r++)(s||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==o)e.forEach(t,n,e);else if(w(e))for(r in e)t.call(n,e[r],r,e);else if("function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else for(r in e)kr.call(e,r)&&t.call(n,e[r],r,e);return e}function a(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function s(e){return function(t,n){e(n,t)}}function u(){return++Hr}function c(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function l(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;o>i;++i){var a=t[i];if(x(a)||k(a))for(var s=Object.keys(a),u=0,f=s.length;f>u;u++){var p=s[u],d=a[p];n&&x(d)?C(d)?e[p]=new Date(d.valueOf()):T(d)?e[p]=new RegExp(d):d.nodeName?e[p]=d.cloneNode(!0):q(d)?e[p]=d.clone():(x(e[p])||(e[p]=Ur(d)?[]:{}),l(e[p],[d],!0)):e[p]=d}}return c(e,r),e}function f(e){return l(e,Pr.call(arguments,1),!1)}function p(e){return l(e,Pr.call(arguments,1),!0)}function d(e){return parseInt(e,10)}function h(e,t){return f(Object.create(e),t)}function m(){}function $(e){return e}function v(e){return function(){return e}}function g(e){return k(e.toString)&&e.toString!==Rr}function y(e){return"undefined"==typeof e}function b(e){return"undefined"!=typeof e}function x(e){return null!==e&&"object"==typeof e}function w(e){return null!==e&&"object"==typeof e&&!Fr(e)}function S(e){return"string"==typeof e}function E(e){return"number"==typeof e}function C(e){return"[object Date]"===Rr.call(e)}function k(e){return"function"==typeof e}function T(e){return"[object RegExp]"===Rr.call(e)}function A(e){return e&&e.window===e}function N(e){return e&&e.$evalAsync&&e.$watch}function O(e){return"[object File]"===Rr.call(e)}function j(e){return"[object FormData]"===Rr.call(e)}function M(e){return"[object Blob]"===Rr.call(e)}function D(e){return"boolean"==typeof e}function P(e){return e&&k(e.then)}function V(e){return e&&E(e.length)&&Br.test(Rr.call(e))}function q(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function R(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function F(e){return Cr(e.nodeName||e[0]&&e[0].nodeName)}function I(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n}function _(e,t){function n(e,t){var n,i=t.$$hashKey;if(Ur(e))for(var o=0,a=e.length;a>o;o++)t.push(r(e[o]));else if(w(e))for(n in e)t[n]=r(e[n]);else if(e&&"function"==typeof e.hasOwnProperty)for(n in e)e.hasOwnProperty(n)&&(t[n]=r(e[n]));else for(n in e)kr.call(e,n)&&(t[n]=r(e[n]));return c(t,i),t}function r(e){if(!x(e))return e;var t=i.indexOf(e);if(-1!==t)return a[t];if(A(e)||N(e))throw Ir("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r,o=!1;return Ur(e)?(r=[],o=!0):V(e)?r=new e.constructor(e):C(e)?r=new Date(e.getTime()):T(e)?(r=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]),r.lastIndex=e.lastIndex):k(e.cloneNode)?r=e.cloneNode(!0):(r=Object.create(Fr(e)),o=!0),i.push(e),a.push(r),o?n(e,r):r}var i=[],a=[];if(t){if(V(t))throw Ir("cpta","Can't copy! TypedArray destination cannot be mutated.");if(e===t)throw Ir("cpi","Can't copy! Source and destination are identical.");return Ur(t)?t.length=0:o(t,function(e,n){"$$hashKey"!==n&&delete t[n]}),i.push(e),a.push(t),n(e,t)}return r(e)}function H(e,t){if(Ur(e)){t=t||[];for(var n=0,r=e.length;r>n;n++)t[n]=e[n]}else if(x(e)){t=t||{};for(var i in e)"$"===i.charAt(0)&&"$"===i.charAt(1)||(t[i]=e[i])}return t||e}function L(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var n,r,i,o=typeof e,a=typeof t;if(o==a&&"object"==o){if(!Ur(e)){if(C(e))return C(t)?L(e.getTime(),t.getTime()):!1;if(T(e))return T(t)?e.toString()==t.toString():!1;if(N(e)||N(t)||A(e)||A(t)||Ur(t)||C(t)||T(t))return!1;i=$e();for(r in e)if("$"!==r.charAt(0)&&!k(e[r])){if(!L(e[r],t[r]))return!1;i[r]=!0}for(r in t)if(!(r in i)&&"$"!==r.charAt(0)&&b(t[r])&&!k(t[r]))return!1;return!0}if(!Ur(t))return!1;if((n=e.length)==t.length){for(r=0;n>r;r++)if(!L(e[r],t[r]))return!1;return!0}}return!1}function U(e,t,n){return e.concat(Pr.call(t,n))}function B(e,t){return Pr.call(e,t||0)}function z(e,t){var n=arguments.length>2?B(arguments,2):[];return!k(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,U(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function W(e,r){var i=r;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?i=n:A(r)?i="$WINDOW":r&&t===r?i="$DOCUMENT":N(r)&&(i="$SCOPE"),i}function G(e,t){return"undefined"==typeof e?n:(E(t)||(t=t?2:null),JSON.stringify(e,W,t))}function J(e){return S(e)?JSON.parse(e):e}function Y(e,t){var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function X(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function K(e,t,n){n=n?-1:1;var r=Y(t,e.getTimezoneOffset());return X(e,n*(r-e.getTimezoneOffset()))}function Z(e){e=jr(e).clone();try{e.empty()}catch(t){}var n=jr("<div>").append(e).html();try{return e[0].nodeType===ei?Cr(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Cr(t)})}catch(t){return Cr(n)}}function Q(e){try{return decodeURIComponent(e)}catch(t){}}function ee(e){var t={};return o((e||"").split("&"),function(e){var n,r,i;e&&(r=e=e.replace(/\+/g,"%20"),n=e.indexOf("="),-1!==n&&(r=e.substring(0,n),i=e.substring(n+1)),r=Q(r),b(r)&&(i=b(i)?Q(i):!0,kr.call(t,r)?Ur(t[r])?t[r].push(i):t[r]=[t[r],i]:t[r]=i))}),t}function te(e){var t=[];return o(e,function(e,n){Ur(e)?o(e,function(e){t.push(re(n,!0)+(e===!0?"":"="+re(e,!0)))}):t.push(re(n,!0)+(e===!0?"":"="+re(e,!0)))}),t.length?t.join("&"):""}function ne(e){return re(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function re(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function ie(e,t){var n,r,i=Yr.length;for(r=0;i>r;++r)if(n=Yr[r]+t,S(n=e.getAttribute(n)))return n;return null}function oe(e,t){var n,r,i={};o(Yr,function(t){var i=t+"app";!n&&e.hasAttribute&&e.hasAttribute(i)&&(n=e,r=e.getAttribute(i))}),o(Yr,function(t){var i,o=t+"app";!n&&(i=e.querySelector("["+o.replace(":","\\:")+"]"))&&(n=i,r=i.getAttribute(o))}),n&&(i.strictDi=null!==ie(n,"strict-di"),t(n,r?[r]:[],i))}function ae(n,r,i){x(i)||(i={});var a={strictDi:!1};i=f(a,i);var s=function(){if(n=jr(n),n.injector()){var e=n[0]===t?"document":Z(n);throw Ir("btstrpd","App Already Bootstrapped with this Element '{0}'",e.replace(/</,"&lt;").replace(/>/,"&gt;"))}r=r||[],r.unshift(["$provide",function(e){e.value("$rootElement",n)}]),i.debugInfoEnabled&&r.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),r.unshift("ng");var o=et(r,i.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),o},u=/^NG_ENABLE_DEBUG_INFO!/,c=/^NG_DEFER_BOOTSTRAP!/;return e&&u.test(e.name)&&(i.debugInfoEnabled=!0,e.name=e.name.replace(u,"")),e&&!c.test(e.name)?s():(e.name=e.name.replace(c,""),_r.resumeBootstrap=function(e){return o(e,function(e){r.push(e)}),s()},void(k(_r.resumeDeferredBootstrap)&&_r.resumeDeferredBootstrap()))}function se(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function ue(e){var t=_r.element(e).injector();if(!t)throw Ir("test","no injector found for element argument to getTestability");return t.get("$$testability")}function ce(e,t){return t=t||"_",e.replace(Xr,function(e,n){return(n?t:"")+e.toLowerCase()})}function le(){var t;if(!Kr){var r=Jr();Mr=y(r)?e.jQuery:r?e[r]:n,Mr&&Mr.fn.on?(jr=Mr,f(Mr.fn,{scope:yi.scope,isolateScope:yi.isolateScope,controller:yi.controller,injector:yi.injector,inheritedData:yi.inheritedData}),t=Mr.cleanData,Mr.cleanData=function(e){var n;if(Lr)Lr=!1;else for(var r,i=0;null!=(r=e[i]);i++)n=Mr._data(r,"events"),n&&n.$destroy&&Mr(r).triggerHandler("$destroy");t(e)}):jr=Ae,_r.element=jr,Kr=!0}}function fe(e,t,n){if(!e)throw Ir("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function pe(e,t,n){return n&&Ur(e)&&(e=e[e.length-1]),fe(k(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function de(e,t){if("hasOwnProperty"===e)throw Ir("badname","hasOwnProperty is not a valid {0} name",t)}function he(e,t,n){if(!t)return e;for(var r,i=t.split("."),o=e,a=i.length,s=0;a>s;s++)r=i[s],e&&(e=(o=e)[r]);return!n&&k(e)?z(o,e):e}function me(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=jr(Pr.call(e,0,i))),t.push(n));return t||e}function $e(){return Object.create(null)}function ve(e){function t(e,t,n){return e[t]||(e[t]=n())}var n=r("$injector"),i=r("ng"),o=t(e,"angular",Object);return o.$$minErr=o.$$minErr||r,t(o,"module",function(){var e={};return function(r,o,a){var s=function(e,t){if("hasOwnProperty"===e)throw i("badname","hasOwnProperty is not a valid {0} name",t)};return s(r,"module"),o&&e.hasOwnProperty(r)&&(e[r]=null),t(e,r,function(){function e(e,t,n,r){return r||(r=i),function(){return r[n||"push"]([e,t,arguments]),l}}function t(e,t){return function(n,o){return o&&k(o)&&(o.$$moduleName=r),i.push([e,t,arguments]),l}}if(!o)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var i=[],s=[],u=[],c=e("$injector","invoke","push",s),l={_invokeQueue:i,_configBlocks:s,_runBlocks:u,requires:o,name:r,provider:t("$provide","provider"),factory:t("$provide","factory"),service:t("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:t("$provide","decorator"),animation:t("$animateProvider","register"),filter:t("$filterProvider","register"),controller:t("$controllerProvider","register"),directive:t("$compileProvider","directive"),config:c,run:function(e){return u.push(e),this}};return a&&c(a),l})}})}function ge(e){var t=[];return JSON.stringify(e,function(e,n){if(n=W(e,n),x(n)){if(t.indexOf(n)>=0)return"...";t.push(n)}return n})}function ye(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):y(e)?"undefined":"string"!=typeof e?ge(e):e}function be(t){f(t,{bootstrap:ae,copy:_,extend:f,merge:p,equals:L,element:jr,forEach:o,injector:et,noop:m,bind:z,toJson:G,fromJson:J,identity:$,isUndefined:y,isDefined:b,isString:S,isFunction:k,isObject:x,isNumber:E,isElement:q,isArray:Ur,version:ii,isDate:C,lowercase:Cr,uppercase:Tr,callbacks:{counter:0},getTestability:ue,$$minErr:r,$$csp:Gr,reloadWithDebugInfo:se}),(Dr=ve(e))("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:yn}),e.provider("$compile",lt).directive({a:Eo,input:Ho,textarea:Ho,form:No,script:Da,select:qa,style:Fa,option:Ra,ngBind:Bo,ngBindHtml:Wo,ngBindTemplate:zo,ngClass:Jo,ngClassEven:Xo,ngClassOdd:Yo,ngCloak:Ko,ngController:Zo,ngForm:Oo,ngHide:Ta,ngIf:ta,ngInclude:na,ngInit:ia,ngNonBindable:ga,ngPluralize:wa,ngRepeat:Sa,ngShow:ka,ngStyle:Aa,ngSwitch:Na,ngSwitchWhen:Oa,ngSwitchDefault:ja,ngOptions:xa,ngTransclude:Ma,ngModel:ma,ngList:oa,ngChange:Go,pattern:_a,ngPattern:_a,required:Ia,ngRequired:Ia,minlength:La,ngMinlength:La,maxlength:Ha,ngMaxlength:Ha,ngValue:Uo,ngModelOptions:va}).directive({ngInclude:ra}).directive(Co).directive(Qo),e.provider({$anchorScroll:tt,$animate:Pi,$animateCss:Ri,$$animateJs:Mi,$$animateQueue:Di,$$AnimateRunner:qi,$$animateAsyncRun:Vi,$browser:st,$cacheFactory:ut,$controller:mt,$document:$t,$exceptionHandler:vt,$filter:Dn,$$forceReflow:Li,$interpolate:jt,$interval:Mt,$http:Tt,$httpParamSerializer:yt,$httpParamSerializerJQLike:bt,$httpBackend:Nt,$xhrFactory:At,$location:Wt,$log:Gt,$parse:dn,$rootScope:gn,$q:hn,$$q:mn,$sce:Sn,$sceDelegate:wn,$sniffer:En,$templateCache:ct,$templateRequest:Cn,$$testability:kn,$timeout:Tn,$window:On,$$rAF:vn,$$jqLite:Ye,$$HashMap:Si,$$cookieReader:Mn})}])}function xe(){return++ai}function we(e){return e.replace(ci,function(e,t,n,r){return r?n.toUpperCase():n}).replace(li,"Moz$1")}function Se(e){return!hi.test(e)}function Ee(e){var t=e.nodeType;return t===Zr||!t||t===ni}function Ce(e){for(var t in oi[e.ng339])return!0;return!1}function ke(e,t){var n,r,i,a,s=t.createDocumentFragment(),u=[];if(Se(e))u.push(t.createTextNode(e));else{for(n=n||s.appendChild(t.createElement("div")),r=(mi.exec(e)||["",""])[1].toLowerCase(),i=vi[r]||vi._default,n.innerHTML=i[1]+e.replace($i,"<$1></$2>")+i[2],a=i[0];a--;)n=n.lastChild;u=U(u,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",o(u,function(e){s.appendChild(e)}),s}function Te(e,n){n=n||t;var r;return(r=di.exec(e))?[n.createElement(r[1])]:(r=ke(e,n))?r.childNodes:[]}function Ae(e){if(e instanceof Ae)return e;var t;if(S(e)&&(e=zr(e),t=!0),!(this instanceof Ae)){if(t&&"<"!=e.charAt(0))throw pi("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new Ae(e)}t?Fe(this,Te(e)):Fe(this,e)}function Ne(e){return e.cloneNode(!0)}function Oe(e,t){if(t||Me(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,i=n.length;i>r;r++)Me(n[r])}function je(e,t,n,r){if(b(r))throw pi("offargs","jqLite#off() does not support the `selector` argument");var i=De(e),a=i&&i.events,s=i&&i.handle;if(s)if(t){var u=function(t){var r=a[t];b(n)&&I(r||[],n),b(n)&&r&&r.length>0||(ui(e,t,s),delete a[t])};o(t.split(" "),function(e){u(e),fi[e]&&u(fi[e])})}else for(t in a)"$destroy"!==t&&ui(e,t,s),delete a[t]}function Me(e,t){var r=e.ng339,i=r&&oi[r];if(i){if(t)return void delete i.data[t];i.handle&&(i.events.$destroy&&i.handle({},"$destroy"),je(e)),delete oi[r],e.ng339=n}}function De(e,t){var r=e.ng339,i=r&&oi[r];return t&&!i&&(e.ng339=r=xe(),i=oi[r]={events:{},data:{},handle:n}),i}function Pe(e,t,n){if(Ee(e)){var r=b(n),i=!r&&t&&!x(t),o=!t,a=De(e,!i),s=a&&a.data;if(r)s[t]=n;else{if(o)return s;if(i)return s&&s[t];f(s,t)}}}function Ve(e,t){return e.getAttribute?(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1:!1}function qe(e,t){t&&e.setAttribute&&o(t.split(" "),function(t){e.setAttribute("class",zr((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+zr(t)+" "," ")))})}function Re(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(t.split(" "),function(e){e=zr(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",zr(n))}}function Fe(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;n>r;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Ie(e,t){return _e(e,"$"+(t||"ngController")+"Controller")}function _e(e,t,n){e.nodeType==ni&&(e=e.documentElement);for(var r=Ur(t)?t:[t];e;){for(var i=0,o=r.length;o>i;i++)if(b(n=jr.data(e,r[i])))return n;e=e.parentNode||e.nodeType===ri&&e.host}}function He(e){for(Oe(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Le(e,t){t||Oe(e);var n=e.parentNode;n&&n.removeChild(e)}function Ue(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):jr(n).on("load",t)}function Be(e,t){var n=bi[t.toLowerCase()];return n&&xi[F(e)]&&n}function ze(e){return wi[e]}function We(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(y(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0};var s=i.specialHandlerWrapper||Ge;o>1&&(i=H(i));for(var u=0;o>u;u++)n.isImmediatePropagationStopped()||s(e,n,i[u])}};return n.elem=e,n}function Ge(e,t,n){n.call(e,t)}function Je(e,t,n){var r=t.relatedTarget;r&&(r===e||gi.call(e,r))||n.call(e,t)}function Ye(){this.$get=function(){return f(Ae,{hasClass:function(e,t){return e.attr&&(e=e[0]),Ve(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Re(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),qe(e,t)}})}}function Xe(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"==r||"object"==r&&null!==e?e.$$hashKey=r+":"+(t||u)():r+":"+e}function Ke(e,t){if(t){var n=0;this.nextUid=function(){return++n}}o(e,this.put,this)}function Ze(e){var t=e.toString().replace(Ti,""),n=t.match(Ei);return n?"function("+(n[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Qe(e,t,n){var r,i,a,s;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw S(n)&&n||(n=e.name||Ze(e)),Ai("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=e.toString().replace(Ti,""),a=i.match(Ei),o(a[1].split(Ci),function(e){e.replace(ki,function(e,t,n){r.push(n)})})}e.$inject=r}}else Ur(e)?(s=e.length-1,pe(e[s],"fn"),r=e.slice(0,s)):pe(e,"fn",!0);return r}function et(e,t){function r(e){return function(t,n){return x(t)?void o(t,s(e)):e(t,n)}}function i(e,t){if(de(e,"service"),(k(t)||Ur(t))&&(t=E.instantiate(t)),!t.$get)throw Ai("pget","Provider '{0}' must define $get factory method.",e);return w[e+$]=t}function a(e,t){return function(){var n=T.invoke(t,this);if(y(n))throw Ai("undef","Provider '{0}' must return a value from $get factory method.",e);return n}}function u(e,t,n){return i(e,{$get:n!==!1?a(e,t):t})}function c(e,t){return u(e,["$injector",function(e){return e.instantiate(t)}])}function l(e,t){return u(e,v(t),!1)}function f(e,t){de(e,"constant"),w[e]=t,C[e]=t}function p(e,t){var n=E.get(e+$),r=n.$get;n.$get=function(){var e=T.invoke(r,n);return T.invoke(t,null,{$delegate:e})}}function d(e){fe(y(e)||Ur(e),"modulesToLoad","not an array");var t,n=[];return o(e,function(e){function r(e){var t,n;for(t=0,n=e.length;n>t;t++){var r=e[t],i=E.get(r[0]);i[r[1]].apply(i,r[2])}}if(!b.get(e)){b.put(e,!0);try{S(e)?(t=Dr(e),n=n.concat(d(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):k(e)?n.push(E.invoke(e)):Ur(e)?n.push(E.invoke(e)):pe(e,"module")}catch(i){throw Ur(e)&&(e=e[e.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Ai("modulerr","Failed to instantiate module {0} due to:\n{1}",e,i.stack||i.message||i)}}}),n}function h(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===m)throw Ai("cdep","Circular dependency found: {0}",t+" <- "+g.join(" <- "));return e[t]}try{return g.unshift(t),e[t]=m,e[t]=n(t,r)}catch(i){throw e[t]===m&&delete e[t],i}finally{g.shift()}}function i(e,n,i,o){"string"==typeof i&&(o=i,i=null);var a,s,u,c=[],l=et.$$annotate(e,t,o);for(s=0,a=l.length;a>s;s++){if(u=l[s],"string"!=typeof u)throw Ai("itkn","Incorrect injection token! Expected service name as string, got {0}",u);c.push(i&&i.hasOwnProperty(u)?i[u]:r(u,o))}return Ur(e)&&(e=e[a]),e.apply(n,c)}function o(e,t,n){var r=Object.create((Ur(e)?e[e.length-1]:e).prototype||null),o=i(e,r,t,n);return x(o)||k(o)?o:r}return{invoke:i,instantiate:o,get:r,annotate:et.$$annotate,has:function(t){return w.hasOwnProperty(t+$)||e.hasOwnProperty(t)}}}t=t===!0;var m={},$="Provider",g=[],b=new Ke([],!0),w={$provide:{provider:r(i),factory:r(u),service:r(c),value:r(l),constant:r(f),decorator:p}},E=w.$injector=h(w,function(e,t){throw _r.isString(t)&&g.push(t),Ai("unpr","Unknown provider: {0}",g.join(" <- "))}),C={},T=C.$injector=h(C,function(e,t){var r=E.get(e+$,t);return T.invoke(r.$get,r,n,e)});return o(d(e),function(e){e&&T.invoke(e)}),T}function tt(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){return"a"===F(e)?(t=e,!0):void 0}),t}function o(){var e=s.yOffset;if(k(e))e=e();else if(q(e)){var n=e[0],r=t.getComputedStyle(n);e="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else E(e)||(e=0);return e}function a(e){if(e){e.scrollIntoView();var n=o();if(n){var r=e.getBoundingClientRect().top;t.scrollBy(0,r-n)}}else t.scrollTo(0,0)}function s(e){e=S(e)?e:n.hash();var t;e?(t=u.getElementById(e))?a(t):(t=i(u.getElementsByName(e)))?a(t):"top"===e&&a(null):a(null)}var u=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){e===t&&""===e||Ue(function(){r.$evalAsync(s)})}),s}]}function nt(e,t){return e||t?e?t?(Ur(e)&&(e=e.join(" ")),Ur(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function rt(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===Oi)return n}}function it(e){S(e)&&(e=e.split(" "));var t=$e();return o(e,function(e){e.length&&(t[e]=!0)}),t}function ot(e){return x(e)?e:{}}function at(e,t,n,r){function i(e){try{e.apply(null,B(arguments,1))}finally{if(g--,0===g)for(;b.length;)try{b.pop()()}catch(t){n.error(t)}}}function a(e){var t=e.indexOf("#");return-1===t?"":e.substr(t)}function s(){C=null,c(),l()}function u(){try{return d.state}catch(e){}}function c(){x=u(),x=y(x)?null:x,L(x,A)&&(x=A),A=x}function l(){S===f.url()&&w===x||(S=f.url(),w=x,o(k,function(e){e(f.url(),x)}))}var f=this,p=(t[0],e.location),d=e.history,h=e.setTimeout,$=e.clearTimeout,v={};f.isMock=!1;var g=0,b=[];f.$$completeOutstandingRequest=i,f.$$incOutstandingRequestCount=function(){g++},f.notifyWhenNoOutstandingRequests=function(e){0===g?e():b.push(e)};var x,w,S=p.href,E=t.find("base"),C=null;c(),w=x,f.url=function(t,n,i){if(y(i)&&(i=null),p!==e.location&&(p=e.location),d!==e.history&&(d=e.history),t){var o=w===i;if(S===t&&(!r.history||o))return f;var s=S&&Rt(S)===Rt(t);return S=t,w=i,!r.history||s&&o?(s&&!C||(C=t),n?p.replace(t):s?p.hash=a(t):p.href=t,p.href!==t&&(C=t)):(d[n?"replaceState":"pushState"](i,"",t),c(),w=x),f}return C||p.href.replace(/%27/g,"'")},f.state=function(){return x};var k=[],T=!1,A=null;f.onUrlChange=function(t){return T||(r.history&&jr(e).on("popstate",s),jr(e).on("hashchange",s),T=!0),k.push(t),t},f.$$applicationDestroyed=function(){jr(e).off("hashchange popstate",s)},f.$$checkUrlChange=l,f.baseHref=function(){var e=E.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""},f.defer=function(e,t){var n;return g++,n=h(function(){delete v[n],i(e)},t||0),v[n]=!0,n},f.defer.cancel=function(e){return v[e]?(delete v[e],$(e),i(m),!0):!1}}function st(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new at(e,r,t,n)}]}function ut(){this.$get=function(){function e(e,n){function i(e){e!=p&&(d?d==e&&(d=e.n):d=e,o(e.n,e.p),o(e,p),p=e,p.n=null)}function o(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in t)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var a=0,s=f({},n,{id:e}),u=$e(),c=n&&n.capacity||Number.MAX_VALUE,l=$e(),p=null,d=null;return t[e]={put:function(e,t){if(!y(t)){if(c<Number.MAX_VALUE){var n=l[e]||(l[e]={key:e});i(n)}return e in u||a++,u[e]=t,a>c&&this.remove(d.key),t}},get:function(e){if(c<Number.MAX_VALUE){var t=l[e];if(!t)return;i(t)}return u[e]},remove:function(e){if(c<Number.MAX_VALUE){var t=l[e];if(!t)return;t==p&&(p=t.p),t==d&&(d=t.n),o(t.n,t.p),delete l[e]}e in u&&(delete u[e],a--)},removeAll:function(){u=$e(),a=0,l=$e(),p=d=null},destroy:function(){u=null,s=null,l=null,delete t[e]},info:function(){return f({},s,{size:a})}}}var t={};return e.info=function(){var e={};return o(t,function(t,n){e[n]=t.info()}),e},e.get=function(e){return t[e]},e}}function ct(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function lt(e,r){function i(e,t,n){var r=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,i={};return o(e,function(e,o){var a=e.match(r);if(!a)throw Fi("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,o,e,n?"controller bindings definition":"isolate scope definition");i[o]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||o}}),i}function a(e,t){var n={isolateScope:null,bindToController:null};if(x(e.scope)&&(e.bindToController===!0?(n.bindToController=i(e.scope,t,!0),n.isolateScope={}):n.isolateScope=i(e.scope,t,!1)),x(e.bindToController)&&(n.bindToController=i(e.bindToController,t,!0)),x(n.bindToController)){var r=e.controller,o=e.controllerAs;if(!r)throw Fi("noctrl","Cannot bind to controller without directive '{0}'s controller.",t);if(!ht(r,o))throw Fi("noident","Cannot bind to controller without identifier for directive '{0}'.",t)}return n}function u(e){var t=e.charAt(0);if(!t||t!==Cr(t))throw Fi("baddir","Directive name '{0}' is invalid. The first character must be a lowercase letter",e);if(e!==e.trim())throw Fi("baddir","Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",e)}var c={},l="Directive",p=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,d=/(([\w\-]+)(?:\:([^;]+))?;?)/,g=R("ngSrc,ngSrcset,src,srcset"),w=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,E=/^(on[a-z]+|formaction)$/;this.directive=function T(t,n){return de(t,"directive"),S(t)?(u(t),fe(n,"directiveFactory"),c.hasOwnProperty(t)||(c[t]=[],e.factory(t+l,["$injector","$exceptionHandler",function(e,n){var r=[];return o(c[t],function(i,o){try{var s=e.invoke(i);k(s)?s={compile:v(s)}:!s.compile&&s.link&&(s.compile=v(s.link)),s.priority=s.priority||0,s.index=o,s.name=s.name||t,s.require=s.require||s.controller&&s.name,s.restrict=s.restrict||"EA";var u=s.$$bindings=a(s,s.name);x(u.isolateScope)&&(s.$$isolateBindings=u.isolateScope),s.$$moduleName=i.$$moduleName,r.push(s)}catch(c){n(c)}}),r}])),c[t].push(n)):o(t,s(T)),this},this.aHrefSanitizationWhitelist=function(e){return b(e)?(r.aHrefSanitizationWhitelist(e),this):r.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return b(e)?(r.imgSrcSanitizationWhitelist(e),this):r.imgSrcSanitizationWhitelist()};var C=!0;this.debugInfoEnabled=function(e){return b(e)?(C=e,this):C},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(e,r,i,a,s,u,v,b,T,A){function O(e,t){try{e.addClass(t)}catch(n){}}function j(e,t,n,r,i){e instanceof jr||(e=jr(e)),o(e,function(t,n){t.nodeType==ei&&t.nodeValue.match(/\S+/)&&(e[n]=jr(t).wrap("<span></span>").parent()[0])});var a=D(e,t,e,n,r,i);j.$$addScopeClass(e);var s=null;return function(t,n,r){fe(t,"scope"),i&&i.needsNewScope&&(t=t.$parent.$new()),r=r||{};var o=r.parentBoundTranscludeFn,u=r.transcludeControllers,c=r.futureParentElement;o&&o.$$boundTransclude&&(o=o.$$boundTransclude),s||(s=M(c));var l;if(l="html"!==s?jr(K(s,jr("<div>").append(e).html())):n?yi.clone.call(e):e,u)for(var f in u)l.data("$"+f+"Controller",u[f].instance);return j.$$addScopeInfo(l,t),n&&n(l,t),a&&a(t,l,l,o),l}}function M(e){var t=e&&e[0];return t&&"foreignobject"!==F(t)&&t.toString().match(/SVG/)?"svg":"html"}function D(e,t,r,i,o,a){function s(e,r,i,o){var a,s,u,c,l,f,p,d,$;if(h){var v=r.length;for($=new Array(v),l=0;l<m.length;l+=3)p=m[l],$[p]=r[p]}else $=r;for(l=0,f=m.length;f>l;)u=$[m[l++]],a=m[l++],s=m[l++],a?(a.scope?(c=e.$new(),j.$$addScopeInfo(jr(u),c)):c=e,d=a.transcludeOnThisElement?P(e,a.transclude,o):!a.templateOnThisElement&&o?o:!o&&t?P(e,t):null,a(s,c,u,i,d)):s&&s(e,u.childNodes,n,o)}for(var u,c,l,f,p,d,h,m=[],$=0;$<e.length;$++)u=new oe,
c=V(e[$],[],u,0===$?i:n,o),l=c.length?_(c,e[$],u,t,r,null,[],[],a):null,l&&l.scope&&j.$$addScopeClass(u.$$element),p=l&&l.terminal||!(f=e[$].childNodes)||!f.length?null:D(f,l?(l.transcludeOnThisElement||!l.templateOnThisElement)&&l.transclude:t),(l||p)&&(m.push($,l,p),d=!0,h=h||l),a=null;return d?s:null}function P(e,t,n){var r=function(r,i,o,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})};return r}function V(e,t,n,r,i){var o,a,s=e.nodeType,u=n.$attr;switch(s){case Zr:U(t,ft(F(e)),"E",r,i);for(var c,l,f,h,m,$,v=e.attributes,g=0,y=v&&v.length;y>g;g++){var b=!1,w=!1;c=v[g],l=c.name,m=zr(c.value),h=ft(l),($=le.test(h))&&(l=l.replace(Ii,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()}));var E=h.match(pe);E&&z(E[1])&&(b=l,w=l.substr(0,l.length-5)+"end",l=l.substr(0,l.length-6)),f=ft(l.toLowerCase()),u[f]=l,!$&&n.hasOwnProperty(f)||(n[f]=m,Be(e,f)&&(n[f]=!0)),ee(e,t,m,f,$),U(t,f,"A",r,i,b,w)}if(a=e.className,x(a)&&(a=a.animVal),S(a)&&""!==a)for(;o=d.exec(a);)f=ft(o[2]),U(t,f,"C",r,i)&&(n[f]=zr(o[3])),a=a.substr(o.index+o[0].length);break;case ei:if(11===Or)for(;e.parentNode&&e.nextSibling&&e.nextSibling.nodeType===ei;)e.nodeValue=e.nodeValue+e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);X(t,e.nodeValue);break;case ti:try{o=p.exec(e.nodeValue),o&&(f=ft(o[1]),U(t,f,"M",r,i)&&(n[f]=zr(o[2])))}catch(C){}}return t.sort(J),t}function q(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw Fi("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType==Zr&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0)}else r.push(e);return jr(r)}function R(e,t,n){return function(r,i,o,a,s){return i=q(i[0],t,n),e(r,i,o,a,s)}}function _(e,r,o,a,s,c,l,f,p){function d(e,t,n,r){e&&(n&&(e=R(e,n,r)),e.require=v.require,e.directiveName=g,(O===v||v.$$isolateScope)&&(e=ne(e,{isolateScope:!0})),l.push(e)),t&&(n&&(t=R(t,n,r)),t.require=v.require,t.directiveName=g,(O===v||v.$$isolateScope)&&(t=ne(t,{isolateScope:!0})),f.push(t))}function h(e,t,n,r){var i;if(S(t)){var o=t.match(w),a=t.substring(o[0].length),s=o[1]||o[3],u="?"===o[2];if("^^"===s?n=n.parent():(i=r&&r[a],i=i&&i.instance),!i){var c="$"+a+"Controller";i=s?n.inheritedData(c):n.data(c)}if(!i&&!u)throw Fi("ctreq","Controller '{0}', required by directive '{1}', can't be found!",a,e)}else if(Ur(t)){i=[];for(var l=0,f=t.length;f>l;l++)i[l]=h(e,t[l],n,r)}return i||null}function m(e,t,n,r,i,o){var a=$e();for(var s in r){var c=r[s],l={$scope:c===O||c.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},f=c.controller;"@"==f&&(f=t[c.name]);var p=u(f,l,!0,c.controllerAs);a[c.name]=p,I||e.data("$"+c.name+"Controller",p.instance)}return a}function $(e,t,i,a,s){function u(e,t,r){var i;return N(e)||(r=t,t=e,e=n),I&&(i=$),r||(r=I?g.parent():g),s(e,t,i,r,D)}var c,p,d,$,v,g,y,b,x;r===i?(y=o,g=o.$$element):(g=jr(i),y=new oe(g,o)),d=t,O?p=t.$new(!0):T&&(d=t.$parent),s&&(v=u,v.$$boundTransclude=s),A&&($=m(g,y,v,A,p,t)),O&&(j.$$addScopeInfo(g,p,!0,!(M&&(M===O||M===O.$$originalDirective))),j.$$addScopeClass(g,!0),p.$$isolateBindings=O.$$isolateBindings,b=ie(t,y,p,p.$$isolateBindings,O),b&&p.$on("$destroy",b));for(var w in $){var S=A[w],E=$[w],C=S.$$bindings.bindToController;E.identifier&&C&&(x=ie(d,y,E.instance,C,S));var k=E();k!==E.instance&&(E.instance=k,g.data("$"+S.name+"Controller",k),x&&x(),x=ie(d,y,E.instance,C,S))}for(z=0,J=l.length;J>z;z++)c=l[z],re(c,c.isolateScope?p:t,g,y,c.require&&h(c.directiveName,c.require,g,$),v);var D=t;for(O&&(O.template||null===O.templateUrl)&&(D=p),e&&e(D,i.childNodes,n,s),z=f.length-1;z>=0;z--)c=f[z],re(c,c.isolateScope?p:t,g,y,c.require&&h(c.directiveName,c.require,g,$),v)}p=p||{};for(var v,g,y,b,E,C=-Number.MAX_VALUE,T=p.newScopeDirective,A=p.controllerDirectives,O=p.newIsolateScopeDirective,M=p.templateDirective,D=p.nonTlbTranscludeDirective,P=!1,F=!1,I=p.hasElementTranscludeDirective,_=o.$$element=jr(r),L=c,U=a,z=0,J=e.length;J>z;z++){v=e[z];var X=v.$$start,Q=v.$$end;if(X&&(_=q(r,X,Q)),y=n,C>v.priority)break;if((E=v.scope)&&(v.templateUrl||(x(E)?(Y("new/isolated scope",O||T,v,_),O=v):Y("new/isolated scope",O,v,_)),T=T||v),g=v.name,!v.templateUrl&&v.controller&&(E=v.controller,A=A||$e(),Y("'"+g+"' controller",A[g],v,_),A[g]=v),(E=v.transclude)&&(P=!0,v.$$tlb||(Y("transclusion",D,v,_),D=v),"element"==E?(I=!0,C=v.priority,y=_,_=o.$$element=jr(t.createComment(" "+g+": "+o[g]+" ")),r=_[0],te(s,B(y),r),U=j(y,a,C,L&&L.name,{nonTlbTranscludeDirective:D})):(y=jr(Ne(r)).contents(),_.empty(),U=j(y,a,n,n,{needsNewScope:v.$$isolateScope||v.$$newScope}))),v.template)if(F=!0,Y("template",M,v,_),M=v,E=k(v.template)?v.template(_,o):v.template,E=ue(E),v.replace){if(L=v,y=Se(E)?[]:dt(K(v.templateNamespace,zr(E))),r=y[0],1!=y.length||r.nodeType!==Zr)throw Fi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",g,"");te(s,_,r);var ee={$attr:{}},ae=V(r,[],ee),se=e.splice(z+1,e.length-(z+1));(O||T)&&H(ae,O,T),e=e.concat(ae).concat(se),W(o,ee),J=e.length}else _.html(E);if(v.templateUrl)F=!0,Y("template",M,v,_),M=v,v.replace&&(L=v),$=G(e.splice(z,e.length-z),_,o,s,P&&U,l,f,{controllerDirectives:A,newScopeDirective:T!==v&&T,newIsolateScopeDirective:O,templateDirective:M,nonTlbTranscludeDirective:D}),J=e.length;else if(v.compile)try{b=v.compile(_,o,U),k(b)?d(null,b,X,Q):b&&d(b.pre,b.post,X,Q)}catch(ce){i(ce,Z(_))}v.terminal&&($.terminal=!0,C=Math.max(C,v.priority))}return $.scope=T&&T.scope===!0,$.transcludeOnThisElement=P,$.templateOnThisElement=F,$.transclude=U,p.hasElementTranscludeDirective=I,$}function H(e,t,n){for(var r=0,i=e.length;i>r;r++)e[r]=h(e[r],{$$isolateScope:t,$$newScope:n})}function U(t,n,r,o,a,s,u){if(n===a)return null;var f=null;if(c.hasOwnProperty(n))for(var p,d=e.get(n+l),m=0,$=d.length;$>m;m++)try{p=d[m],(y(o)||o>p.priority)&&-1!=p.restrict.indexOf(r)&&(s&&(p=h(p,{$$start:s,$$end:u})),t.push(p),f=p)}catch(v){i(v)}return f}function z(t){if(c.hasOwnProperty(t))for(var n,r=e.get(t+l),i=0,o=r.length;o>i;i++)if(n=r[i],n.multiElement)return!0;return!1}function W(e,t){var n=t.$attr,r=e.$attr,i=e.$$element;o(e,function(r,i){"$"!=i.charAt(0)&&(t[i]&&t[i]!==r&&(r+=("style"===i?";":" ")+t[i]),e.$set(i,r,!0,n[i]))}),o(t,function(t,o){"class"==o?(O(i,t),e["class"]=(e["class"]?e["class"]+" ":"")+t):"style"==o?(i.attr("style",i.attr("style")+";"+t),e.style=(e.style?e.style+";":"")+t):"$"==o.charAt(0)||e.hasOwnProperty(o)||(e[o]=t,r[o]=n[o])})}function G(e,t,n,r,i,s,u,c){var l,f,p=[],d=t[0],m=e.shift(),$=h(m,{templateUrl:null,transclude:null,replace:null,$$originalDirective:m}),v=k(m.templateUrl)?m.templateUrl(t,n):m.templateUrl,g=m.templateNamespace;return t.empty(),a(v).then(function(a){var h,y,b,w;if(a=ue(a),m.replace){if(b=Se(a)?[]:dt(K(g,zr(a))),h=b[0],1!=b.length||h.nodeType!==Zr)throw Fi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",m.name,v);y={$attr:{}},te(r,t,h);var S=V(h,[],y);x(m.scope)&&H(S,!0),e=S.concat(e),W(n,y)}else h=d,t.html(a);for(e.unshift($),l=_(e,h,n,i,t,m,s,u,c),o(r,function(e,n){e==h&&(r[n]=t[0])}),f=D(t[0].childNodes,i);p.length;){var E=p.shift(),C=p.shift(),k=p.shift(),T=p.shift(),A=t[0];if(!E.$$destroyed){if(C!==d){var N=C.className;c.hasElementTranscludeDirective&&m.replace||(A=Ne(h)),te(k,jr(C),A),O(jr(A),N)}w=l.transcludeOnThisElement?P(E,l.transclude,T):T,l(f,E,A,r,w)}}p=null}),function(e,t,n,r,i){var o=i;t.$$destroyed||(p?p.push(t,n,r,o):(l.transcludeOnThisElement&&(o=P(t,l.transclude,i)),l(f,t,n,r,o)))}}function J(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function Y(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw Fi("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,Z(r))}function X(e,t){var n=r(t,!0);n&&e.push({priority:0,compile:function(e){var t=e.parent(),r=!!t.length;return r&&j.$$addBindingClass(t),function(e,t){var i=t.parent();r||j.$$addBindingClass(i),j.$$addBindingInfo(i,n.expressions),e.$watch(n,function(e){t[0].nodeValue=e})}}})}function K(e,n){switch(e=Cr(e||"html")){case"svg":case"math":var r=t.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function Q(e,t){if("srcdoc"==t)return b.HTML;var n=F(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?b.RESOURCE_URL:void 0}function ee(e,t,n,i,o){var a=Q(e,i);o=g[i]||o;var s=r(n,!0,a,o);if(s){if("multiple"===i&&"select"===F(e))throw Fi("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",Z(e));t.push({priority:100,compile:function(){return{pre:function(e,t,u){var c=u.$$observers||(u.$$observers=$e());if(E.test(i))throw Fi("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var l=u[i];l!==n&&(s=l&&r(l,!0,a,o),n=l),s&&(u[i]=s(e),(c[i]||(c[i]=[])).$$inter=!0,(u.$$observers&&u.$$observers[i].$$scope||e).$watch(s,function(e,t){"class"===i&&e!=t?u.$updateClass(e,t):u.$set(i,e)}))}}}})}}function te(e,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(e)for(i=0,o=e.length;o>i;i++)if(e[i]==a){e[i++]=r;for(var c=i,l=c+s-1,f=e.length;f>c;c++,l++)f>l?e[c]=e[l]:delete e[c];e.length-=s-1,e.context===a&&(e.context=r);break}u&&u.replaceChild(r,a);var p=t.createDocumentFragment();p.appendChild(a),jr.hasData(a)&&(jr.data(r,jr.data(a)),Mr?(Lr=!0,Mr.cleanData([a])):delete jr.cache[a[jr.expando]]);for(var d=1,h=n.length;h>d;d++){var m=n[d];jr(m).remove(),p.appendChild(m),delete n[d]}n[0]=r,n.length=1}function ne(e,t){return f(function(){return e.apply(null,arguments)},e,t)}function re(e,t,n,r,o,a){try{e(t,n,r,o,a)}catch(s){i(s,Z(n))}}function ie(e,t,n,i,a){var u=[];return o(i,function(i,o){var c,l,f,p,d=i.attrName,h=i.optional,$=i.mode;switch($){case"@":h||kr.call(t,d)||(n[o]=t[d]=void 0),t.$observe(d,function(e){S(e)&&(n[o]=e)}),t.$$observers[d].$$scope=e,S(t[d])&&(n[o]=r(t[d])(e));break;case"=":if(!kr.call(t,d)){if(h)break;t[d]=void 0}if(h&&!t[d])break;l=s(t[d]),p=l.literal?L:function(e,t){return e===t||e!==e&&t!==t},f=l.assign||function(){throw c=n[o]=l(e),Fi("nonassign","Expression '{0}' used with directive '{1}' is non-assignable!",t[d],a.name)},c=n[o]=l(e);var v=function(t){return p(t,n[o])||(p(t,c)?f(e,t=n[o]):n[o]=t),c=t};v.$stateful=!0;var g;g=i.collection?e.$watchCollection(t[d],v):e.$watch(s(t[d],v),null,l.literal),u.push(g);break;case"&":if(l=t.hasOwnProperty(d)?s(t[d]):m,l===m&&h)break;n[o]=function(t){return l(e,t)}}}),u.length&&function(){for(var e=0,t=u.length;t>e;++e)u[e]()}}var oe=function(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e};oe.prototype={$normalize:ft,$addClass:function(e){e&&e.length>0&&T.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&T.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=pt(e,t);n&&n.length&&T.addClass(this.$$element,n);var r=pt(t,e);r&&r.length&&T.removeClass(this.$$element,r)},$set:function(e,t,n,r){var a,s=this.$$element[0],u=Be(s,e),c=ze(e),l=e;if(u?(this.$$element.prop(e,t),r=u):c&&(this[c]=t,l=c),this[e]=t,r?this.$attr[e]=r:(r=this.$attr[e],r||(this.$attr[e]=r=ce(e,"-"))),a=F(this.$$element),"a"===a&&"href"===e||"img"===a&&"src"===e)this[e]=t=A(t,"src"===e);else if("img"===a&&"srcset"===e){for(var f="",p=zr(t),d=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,h=/\s/.test(p)?d:/(,)/,m=p.split(h),$=Math.floor(m.length/2),v=0;$>v;v++){var g=2*v;f+=A(zr(m[g]),!0),f+=" "+zr(m[g+1])}var b=zr(m[2*v]).split(/\s/);f+=A(zr(b[0]),!0),2===b.length&&(f+=" "+zr(b[1])),this[e]=t=f}n!==!1&&(null===t||y(t)?this.$$element.removeAttr(r):this.$$element.attr(r,t));var x=this.$$observers;x&&o(x[l],function(e){try{e(t)}catch(n){i(n)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=$e()),i=r[e]||(r[e]=[]);return i.push(t),v.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||y(n[e])||t(n[e])}),function(){I(i,t)}}};var ae=r.startSymbol(),se=r.endSymbol(),ue="{{"==ae||"}}"==se?$:function(e){return e.replace(/\{\{/g,ae).replace(/}}/g,se)},le=/^ngAttr[A-Z]/,pe=/^(.+)Start$/;return j.$$addBindingInfo=C?function(e,t){var n=e.data("$binding")||[];Ur(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:m,j.$$addBindingClass=C?function(e){O(e,"ng-binding")}:m,j.$$addScopeInfo=C?function(e,t,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(i,t)}:m,j.$$addScopeClass=C?function(e,t){O(e,t?"ng-isolate-scope":"ng-scope")}:m,j}]}function ft(e){return we(e.replace(Ii,""))}function pt(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/);e:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue e;n+=(n.length>0?" ":"")+a}return n}function dt(e){e=jr(e);var t=e.length;if(1>=t)return e;for(;t--;){var n=e[t];n.nodeType===ti&&Vr.call(e,t,1)}return e}function ht(e,t){if(t&&S(t))return t;if(S(e)){var n=Hi.exec(e);if(n)return n[3]}}function mt(){var e={},t=!1;this.register=function(t,n){de(t,"controller"),x(t)?f(e,t):e[t]=n},this.allowGlobals=function(){t=!0},this.$get=["$injector","$window",function(i,o){function a(e,t,n,i){if(!e||!x(e.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,t);e.$scope[t]=n}return function(r,s,u,c){var l,p,d,h;if(u=u===!0,c&&S(c)&&(h=c),S(r)){if(p=r.match(Hi),!p)throw _i("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",r);d=p[1],h=h||p[3],r=e.hasOwnProperty(d)?e[d]:he(s.$scope,d,!0)||(t?he(o,d,!0):n),pe(r,d,!0)}if(u){var m=(Ur(r)?r[r.length-1]:r).prototype;l=Object.create(m||null),h&&a(s,h,l,d||r.name);var $;return $=f(function(){var e=i.invoke(r,l,s,d);return e!==l&&(x(e)||k(e))&&(l=e,h&&a(s,h,l,d||r.name)),l},{instance:l,identifier:h})}return l=i.instantiate(r,s,d),h&&a(s,h,l,d||r.name),l}}]}function $t(){this.$get=["$window",function(e){return jr(e.document)}]}function vt(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function gt(e){return x(e)?C(e)?e.toISOString():G(e):e}function yt(){this.$get=function(){return function(e){if(!e)return"";var t=[];return a(e,function(e,n){null===e||y(e)||(Ur(e)?o(e,function(e,r){t.push(re(n)+"="+re(gt(e)))}):t.push(re(n)+"="+re(gt(e))))}),t.join("&")}}}function bt(){this.$get=function(){return function(e){function t(e,r,i){null===e||y(e)||(Ur(e)?o(e,function(e,n){t(e,r+"["+(x(e)?n:"")+"]")}):x(e)&&!C(e)?a(e,function(e,n){t(e,r+(i?"":"[")+n+(i?"":"]"))}):n.push(re(r)+"="+re(gt(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function xt(e,t){if(S(e)){var n=e.replace(Gi,"").trim();if(n){var r=t("Content-Type");(r&&0===r.indexOf(Ui)||wt(n))&&(e=J(n))}}return e}function wt(e){var t=e.match(zi);return t&&Wi[t[0]].test(e)}function St(e){function t(e,t){e&&(r[e]=r[e]?r[e]+", "+t:t)}var n,r=$e();return S(e)?o(e.split("\n"),function(e){n=e.indexOf(":"),t(Cr(zr(e.substr(0,n))),zr(e.substr(n+1)))}):x(e)&&o(e,function(e,n){t(Cr(n),zr(e))}),r}function Et(e){var t;return function(n){if(t||(t=St(e)),n){var r=t[Cr(n)];return void 0===r&&(r=null),r}return t}}function Ct(e,t,n,r){return k(r)?r(e,t,n):(o(r,function(r){e=r(e,t,n)}),e)}function kt(e){return e>=200&&300>e}function Tt(){var e=this.defaults={transformResponse:[xt],transformRequest:[function(e){return!x(e)||O(e)||M(e)||j(e)?e:G(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:H(Bi),put:H(Bi),patch:H(Bi)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},t=!1;this.useApplyAsync=function(e){return b(e)?(t=!!e,this):t};var i=!0;this.useLegacyPromiseExtensions=function(e){return b(e)?(i=!!e,this):i};var a=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(s,u,c,l,p,d){function h(t){function a(e){var t=f({},e);return t.data=Ct(e.data,e.headers,e.status,c.transformResponse),kt(e.status)?t:p.reject(t)}function s(e,t){var n,r={};return o(e,function(e,i){k(e)?(n=e(t),null!=n&&(r[i]=n)):r[i]=e}),r}function u(t){var n,r,i,o=e.headers,a=f({},t.headers);o=f({},o.common,o[Cr(t.method)]);e:for(n in o){r=Cr(n);for(i in a)if(Cr(i)===r)continue e;a[n]=o[n]}return s(a,H(t))}if(!_r.isObject(t))throw r("$http")("badreq","Http request configuration must be an object.  Received: {0}",t);if(!S(t.url))throw r("$http")("badreq","Http request configuration url must be a string.  Received: {0}",t.url);var c=f({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer},t);c.headers=u(t),c.method=Tr(c.method),c.paramSerializer=S(c.paramSerializer)?d.get(c.paramSerializer):c.paramSerializer;var l=function(t){var r=t.headers,i=Ct(t.data,Et(r),n,t.transformRequest);return y(i)&&o(r,function(e,t){"content-type"===Cr(t)&&delete r[t]}),y(t.withCredentials)&&!y(e.withCredentials)&&(t.withCredentials=e.withCredentials),v(t,i).then(a,a)},h=[l,n],m=p.when(c);for(o(E,function(e){(e.request||e.requestError)&&h.unshift(e.request,e.requestError),(e.response||e.responseError)&&h.push(e.response,e.responseError)});h.length;){var $=h.shift(),g=h.shift();m=m.then($,g)}return i?(m.success=function(e){return pe(e,"fn"),m.then(function(t){e(t.data,t.status,t.headers,c)}),m},m.error=function(e){return pe(e,"fn"),m.then(null,function(t){e(t.data,t.status,t.headers,c)}),m}):(m.success=Yi("success"),m.error=Yi("error")),m}function m(e){o(arguments,function(e){h[e]=function(t,n){return h(f({},n||{},{method:e,url:t}))}})}function $(e){o(arguments,function(e){h[e]=function(t,n,r){return h(f({},r||{},{method:e,url:t,data:n}))}})}function v(r,i){function o(e,n,r,i){function o(){a(n,e,r,i)}d&&(kt(e)?d.put(E,[e,n,St(r),i]):d.remove(E)),t?l.$applyAsync(o):(o(),l.$$phase||l.$apply())}function a(e,t,n,i){t=t>=-1?t:0,(kt(t)?$.resolve:$.reject)({data:e,status:t,headers:Et(n),config:r,statusText:i})}function c(e){a(e.data,e.status,H(e.headers()),e.statusText)}function f(){var e=h.pendingRequests.indexOf(r);-1!==e&&h.pendingRequests.splice(e,1)}var d,m,$=p.defer(),v=$.promise,S=r.headers,E=g(r.url,r.paramSerializer(r.params));if(h.pendingRequests.push(r),v.then(f,f),!r.cache&&!e.cache||r.cache===!1||"GET"!==r.method&&"JSONP"!==r.method||(d=x(r.cache)?r.cache:x(e.cache)?e.cache:w),d&&(m=d.get(E),b(m)?P(m)?m.then(c,c):Ur(m)?a(m[1],m[0],H(m[2]),m[3]):a(m,200,{},"OK"):d.put(E,v)),y(m)){var C=Nn(r.url)?u()[r.xsrfCookieName||e.xsrfCookieName]:n;C&&(S[r.xsrfHeaderName||e.xsrfHeaderName]=C),s(r.method,E,i,o,S,r.timeout,r.withCredentials,r.responseType)}return v}function g(e,t){return t.length>0&&(e+=(-1==e.indexOf("?")?"?":"&")+t),e}var w=c("$http");e.paramSerializer=S(e.paramSerializer)?d.get(e.paramSerializer):e.paramSerializer;var E=[];return o(a,function(e){E.unshift(S(e)?d.get(e):d.invoke(e))}),h.pendingRequests=[],m("get","delete","head","jsonp"),$("post","put","patch"),h.defaults=e,h}]}function At(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function Nt(){this.$get=["$browser","$window","$document","$xhrFactory",function(e,t,n,r){return Ot(e,r,e.defer,t.angular.callbacks,n[0])}]}function Ot(e,t,n,r,i){function a(e,t,n){var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=e,o.async=!0,a=function(e){ui(o,"load",a),ui(o,"error",a),i.body.removeChild(o),o=null;var s=-1,u="unknown";e&&("load"!==e.type||r[t].called||(e={type:"error"}),u=e.type,s="error"===e.type?404:200),n&&n(s,u)},si(o,"load",a),si(o,"error",a),i.body.appendChild(o),a}return function(i,s,u,c,l,f,p,d){function h(){g&&g(),x&&x.abort()}function $(t,r,i,o,a){b(E)&&n.cancel(E),g=x=null,t(r,i,o,a),e.$$completeOutstandingRequest(m)}if(e.$$incOutstandingRequestCount(),s=s||e.url(),"jsonp"==Cr(i)){var v="_"+(r.counter++).toString(36);r[v]=function(e){r[v].data=e,r[v].called=!0};var g=a(s.replace("JSON_CALLBACK","angular.callbacks."+v),v,function(e,t){$(c,e,r[v].data,"",t),r[v]=m})}else{var x=t(i,s);x.open(i,s,!0),o(l,function(e,t){b(e)&&x.setRequestHeader(t,e)}),x.onload=function(){var e=x.statusText||"",t="response"in x?x.response:x.responseText,n=1223===x.status?204:x.status;0===n&&(n=t?200:"file"==An(s).protocol?404:0),$(c,n,t,x.getAllResponseHeaders(),e)};var w=function(){$(c,-1,null,null,"")};if(x.onerror=w,x.onabort=w,p&&(x.withCredentials=!0),d)try{x.responseType=d}catch(S){if("json"!==d)throw S}x.send(y(u)?null:u)}if(f>0)var E=n(h,f);else P(f)&&f.then(h)}}function jt(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(n){return n.replace(p,e).replace(d,t)}function s(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=G(e)}return e}function u(o,u,p,d){function h(e){try{return e=A(e),d&&!b(e)?e:s(e)}catch(t){r(Xi.interr(o,t))}}d=!!d;for(var m,$,v,g=0,x=[],w=[],S=o.length,E=[],C=[];S>g;){if(-1==(m=o.indexOf(e,g))||-1==($=o.indexOf(t,m+c))){g!==S&&E.push(a(o.substring(g)));break}g!==m&&E.push(a(o.substring(g,m))),v=o.substring(m+c,$),x.push(v),w.push(n(v,h)),g=$+l,C.push(E.length),E.push("")}if(p&&E.length>1&&Xi.throwNoconcat(o),!u||x.length){var T=function(e){for(var t=0,n=x.length;n>t;t++){if(d&&y(e[t]))return;E[C[t]]=e[t]}return E.join("")},A=function(e){return p?i.getTrusted(p,e):i.valueOf(e)};return f(function(e){var t=0,n=x.length,i=new Array(n);try{for(;n>t;t++)i[t]=w[t](e);return T(i)}catch(a){r(Xi.interr(o,a))}},{exp:o,expressions:x,$$watchDelegate:function(e,t){var n;return e.$watchGroup(w,function(r,i){var o=T(r);k(t)&&t.call(this,o,r!==i?n:o,e),n=o})}})}}var c=e.length,l=t.length,p=new RegExp(e.replace(/./g,o),"g"),d=new RegExp(t.replace(/./g,o),"g");return u.startSymbol=function(){return e},u.endSymbol=function(){return t},u}]}function Mt(){this.$get=["$rootScope","$window","$q","$$q",function(e,t,n,r){function i(i,a,s,u){var c=arguments.length>4,l=c?B(arguments,4):[],f=t.setInterval,p=t.clearInterval,d=0,h=b(u)&&!u,m=(h?r:n).defer(),$=m.promise;return s=b(s)?s:0,$.then(null,null,c?function(){i.apply(null,l)}:i),$.$$intervalId=f(function(){m.notify(d++),s>0&&d>=s&&(m.resolve(d),p($.$$intervalId),delete o[$.$$intervalId]),h||e.$apply()},a),o[$.$$intervalId]=m,$}var o={};return i.cancel=function(e){return e&&e.$$intervalId in o?(o[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete o[e.$$intervalId],!0):!1},i}]}function Dt(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=ne(t[n]);return t.join("/")}function Pt(e,t){var n=An(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=d(n.port)||Zi[n.protocol]||null}function Vt(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=An(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=ee(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function qt(e,t){return 0===t.indexOf(e)?t.substr(e.length):void 0}function Rt(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function Ft(e){return e.replace(/(#.+)|#$/,"$1")}function It(e){return e.substr(0,Rt(e).lastIndexOf("/")+1)}function _t(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function Ht(e,t,n){this.$$html5=!0,n=n||"",Pt(e,this),this.$$parse=function(e){var n=qt(t,e);if(!S(n))throw Qi("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,t);Vt(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=te(this.$$search),n=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Dt(this.$$path)+(e?"?"+e:"")+n,this.$$absUrl=t+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return b(o=qt(e,r))?(a=o,s=b(o=qt(n,o))?t+(qt("/",o)||o):e+a):b(o=qt(t,r))?s=t+o:t==r+"/"&&(s=t),s&&this.$$parse(s),!!s}}function Lt(e,t,n){Pt(e,this),this.$$parse=function(r){function i(e,t,n){var r,i=/^\/[A-Z]:(\/.*)/;return 0===t.indexOf(n)&&(t=t.replace(n,"")),i.exec(t)?e:(r=i.exec(e),r?r[1]:e)}var o,a=qt(e,r)||qt(t,r);y(a)||"#"!==a.charAt(0)?this.$$html5?o=a:(o="",y(a)&&(e=r,this.replace())):(o=qt(n,a),y(o)&&(o=a)),Vt(o,this),this.$$path=i(this.$$path,o,e),this.$$compose()},this.$$compose=function(){var t=te(this.$$search),r=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Dt(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(t,n){return Rt(e)==Rt(t)?(this.$$parse(t),!0):!1}}function Ut(e,t,n){this.$$html5=!0,Lt.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e==Rt(r)?o=r:(a=qt(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o},this.$$compose=function(){var t=te(this.$$search),r=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Dt(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+n+this.$$url}}function Bt(e){return function(){return this[e]}}function zt(e,t){return function(n){return y(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function Wt(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return b(t)?(e=t,this):e},this.html5Mode=function(e){return D(e)?(t.enabled=e,this):x(e)?(D(e.enabled)&&(t.enabled=e.enabled),D(e.requireBase)&&(t.requireBase=e.requireBase),D(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(e,t,n){var i=c.url(),o=c.$$state;try{r.url(e,t,n),c.$$state=r.state()}catch(a){throw c.url(i),c.$$state=o,a}}function u(e,t){n.$broadcast("$locationChangeSuccess",c.absUrl(),e,c.$$state,t)}var c,l,f,p=r.baseHref(),d=r.url();if(t.enabled){if(!p&&t.requireBase)throw Qi("nobase","$location in HTML5 mode requires a <base> tag to be present!");f=_t(d)+(p||"/"),l=i.history?Ht:Ut}else f=Rt(d),l=Lt;var h=It(f);c=new l(f,h,"#"+e),c.$$parseLinkUrl(d,d),c.$$state=r.state();var m=/^\s*(javascript|mailto):/i;o.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var i=jr(e.target);"a"!==F(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),u=i.attr("href")||i.attr("xlink:href");x(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=An(s.animVal).href),m.test(s)||!s||i.attr("target")||e.isDefaultPrevented()||c.$$parseLinkUrl(s,u)&&(e.preventDefault(),c.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),Ft(c.absUrl())!=Ft(d)&&r.url(c.absUrl(),!0);var $=!0;return r.onUrlChange(function(e,t){return y(qt(h,e))?void(a.location.href=e):(n.$evalAsync(function(){var r,i=c.absUrl(),o=c.$$state;e=Ft(e),c.$$parse(e),c.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,c.absUrl()===e&&(r?(c.$$parse(i),c.$$state=o,s(i,!1,o)):($=!1,u(i,o)))}),void(n.$$phase||n.$digest()))}),n.$watch(function(){var e=Ft(r.url()),t=Ft(c.absUrl()),o=r.state(),a=c.$$replace,l=e!==t||c.$$html5&&i.history&&o!==c.$$state;($||l)&&($=!1,n.$evalAsync(function(){var t=c.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,c.$$state,o).defaultPrevented;c.absUrl()===t&&(r?(c.$$parse(e),c.$$state=o):(l&&s(t,a,o===c.$$state?null:c.$$state),u(e,o)))})),c.$$replace=!1}),c}]}function Gt(){var e=!0,t=this;this.debugEnabled=function(t){return b(t)?(e=t,this):e},this.$get=["$window",function(n){function r(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function i(e){var t=n.console||{},i=t[e]||t.log||m,a=!1;try{a=!!i.apply}catch(s){}return a?function(){var e=[];return o(arguments,function(t){e.push(r(t))}),i.apply(t,e)}:function(e,t){i(e,null==t?"":t)}}return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function Jt(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw to("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",t);return e}function Yt(e,t){if(e+="",!S(e))throw to("iseccst","Cannot convert object to primitive value! Expression: {0}",t);return e}function Xt(e,t){if(e){if(e.constructor===e)throw to("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e.window===e)throw to("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw to("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",t);if(e===Object)throw to("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",t)}return e}function Kt(e,t){if(e){if(e.constructor===e)throw to("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e===no||e===ro||e===io)throw to("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",t)}}function Zt(e,t){if(e&&(e===0..constructor||e===(!1).constructor||e==="".constructor||e==={}.constructor||e===[].constructor||e===Function.constructor))throw to("isecaf","Assigning to a constructor is disallowed! Expression: {0}",t)}function Qt(e,t){return"undefined"!=typeof e?e:t}function en(e,t){return"undefined"==typeof e?t:"undefined"==typeof t?e:e+t}function tn(e,t){var n=e(t);return!n.$stateful}function nn(e,t){var n,r;switch(e.type){case uo.Program:n=!0,o(e.body,function(e){nn(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case uo.Literal:e.constant=!0,e.toWatch=[];break;case uo.UnaryExpression:nn(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case uo.BinaryExpression:nn(e.left,t),nn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case uo.LogicalExpression:nn(e.left,t),nn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case uo.ConditionalExpression:nn(e.test,t),nn(e.alternate,t),nn(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case uo.Identifier:e.constant=!1,e.toWatch=[e];break;case uo.MemberExpression:nn(e.object,t),e.computed&&nn(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case uo.CallExpression:n=e.filter?tn(t,e.callee.name):!1,r=[],o(e.arguments,function(e){nn(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=e.filter&&tn(t,e.callee.name)?r:[e];break;case uo.AssignmentExpression:nn(e.left,t),nn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case uo.ArrayExpression:n=!0,r=[],o(e.elements,function(e){nn(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=r;break;case uo.ObjectExpression:n=!0,r=[],o(e.properties,function(e){nn(e.value,t),n=n&&e.value.constant,e.value.constant||r.push.apply(r,e.value.toWatch)}),e.constant=n,e.toWatch=r;break;case uo.ThisExpression:e.constant=!1,e.toWatch=[]}}function rn(e){if(1==e.length){var t=e[0].expression,r=t.toWatch;return 1!==r.length?r:r[0]!==t?r:n}}function on(e){return e.type===uo.Identifier||e.type===uo.MemberExpression}function an(e){return 1===e.body.length&&on(e.body[0].expression)?{type:uo.AssignmentExpression,left:e.body[0].expression,right:{type:uo.NGValueParameter},operator:"="}:void 0}function sn(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===uo.Literal||e.body[0].expression.type===uo.ArrayExpression||e.body[0].expression.type===uo.ObjectExpression)}function un(e){return e.constant}function cn(e,t){this.astBuilder=e,this.$filter=t}function ln(e,t){this.astBuilder=e,this.$filter=t}function fn(e){return"constructor"==e;
}function pn(e){return k(e.valueOf)?e.valueOf():lo.call(e)}function dn(){var e=$e(),t=$e();this.$get=["$filter",function(r){function i(e,t){return null==e||null==t?e===t:"object"==typeof e&&(e=pn(e),"object"==typeof e)?!1:e===t||e!==e&&t!==t}function a(e,t,r,o,a){var s,u=o.inputs;if(1===u.length){var c=i;return u=u[0],e.$watch(function(e){var t=u(e);return i(t,c)||(s=o(e,n,n,[t]),c=t&&pn(t)),s},t,r,a)}for(var l=[],f=[],p=0,d=u.length;d>p;p++)l[p]=i,f[p]=null;return e.$watch(function(e){for(var t=!1,r=0,a=u.length;a>r;r++){var c=u[r](e);(t||(t=!i(c,l[r])))&&(f[r]=c,l[r]=c&&pn(c))}return t&&(s=o(e,n,n,f)),s},t,r,a)}function s(e,t,n,r){var i,o;return i=e.$watch(function(e){return r(e)},function(e,n,r){o=e,k(t)&&t.apply(this,arguments),b(e)&&r.$$postDigest(function(){b(o)&&i()})},n)}function u(e,t,n,r){function i(e){var t=!0;return o(e,function(e){b(e)||(t=!1)}),t}var a,s;return a=e.$watch(function(e){return r(e)},function(e,n,r){s=e,k(t)&&t.call(this,e,n,r),i(e)&&r.$$postDigest(function(){i(s)&&a()})},n)}function c(e,t,n,r){var i;return i=e.$watch(function(e){return r(e)},function(e,n,r){k(t)&&t.apply(this,arguments),i()},n)}function l(e,t){if(!t)return e;var n=e.$$watchDelegate,r=!1,i=n!==u&&n!==s,o=i?function(n,i,o,a){var s=r&&a?a[0]:e(n,i,o,a);return t(s,n,i)}:function(n,r,i,o){var a=e(n,r,i,o),s=t(a,n,r);return b(a)?s:a};return e.$$watchDelegate&&e.$$watchDelegate!==a?o.$$watchDelegate=e.$$watchDelegate:t.$stateful||(o.$$watchDelegate=a,r=!e.inputs,o.inputs=e.inputs?e.inputs:[e]),o}var f=Gr().noUnsafeEval,p={csp:f,expensiveChecks:!1},d={csp:f,expensiveChecks:!0};return function(n,i,o){var f,h,$;switch(typeof n){case"string":n=n.trim(),$=n;var v=o?t:e;if(f=v[$],!f){":"===n.charAt(0)&&":"===n.charAt(1)&&(h=!0,n=n.substring(2));var g=o?d:p,y=new so(g),b=new co(y,r,g);f=b.parse(n),f.constant?f.$$watchDelegate=c:h?f.$$watchDelegate=f.literal?u:s:f.inputs&&(f.$$watchDelegate=a),v[$]=f}return l(f,i);case"function":return l(n,i);default:return l(m,i)}}}]}function hn(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return $n(function(t){e.$evalAsync(t)},t)}]}function mn(){this.$get=["$browser","$exceptionHandler",function(e,t){return $n(function(t){e.defer(t)},t)}]}function $n(e,t){function i(e,t,n){function r(t){return function(n){i||(i=!0,t.call(e,n))}}var i=!1;return[r(t),r(n)]}function a(){this.$$state={status:0}}function s(e,t){return function(n){t.call(e,n)}}function u(e){var r,i,o;o=e.pending,e.processScheduled=!1,e.pending=n;for(var a=0,s=o.length;s>a;++a){i=o[a][0],r=o[a][e.status];try{k(r)?i.resolve(r(e.value)):1===e.status?i.resolve(e.value):i.reject(e.value)}catch(u){i.reject(u),t(u)}}}function c(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){u(t)}))}function l(){this.promise=new a,this.resolve=s(this,this.resolve),this.reject=s(this,this.reject),this.notify=s(this,this.notify)}function p(e){var t=new l,n=0,r=Ur(e)?[]:{};return o(e,function(e,i){n++,g(e).then(function(e){r.hasOwnProperty(i)||(r[i]=e,--n||t.resolve(r))},function(e){r.hasOwnProperty(i)||t.reject(e)})}),0===n&&t.resolve(r),t.promise}var d=r("$q",TypeError),h=function(){return new l};f(a.prototype,{then:function(e,t,n){if(y(e)&&y(t)&&y(n))return this;var r=new l;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&c(this.$$state),r.promise},"catch":function(e){return this.then(null,e)},"finally":function(e,t){return this.then(function(t){return v(t,!0,e)},function(t){return v(t,!1,e)},t)}}),f(l.prototype,{resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(d("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):this.$$resolve(e))},$$resolve:function(e){var n,r;r=i(this,this.$$resolve,this.$$reject);try{(x(e)||k(e))&&(n=e&&e.then),k(n)?(this.promise.$$state.status=-1,n.call(e,r[0],r[1],this.notify)):(this.promise.$$state.value=e,this.promise.$$state.status=1,c(this.promise.$$state))}catch(o){r[1](o),t(o)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,c(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&e(function(){for(var e,i,o=0,a=r.length;a>o;o++){i=r[o][0],e=r[o][3];try{i.notify(k(e)?e(n):n)}catch(s){t(s)}}})}});var m=function(e){var t=new l;return t.reject(e),t.promise},$=function(e,t){var n=new l;return t?n.resolve(e):n.reject(e),n.promise},v=function(e,t,n){var r=null;try{k(n)&&(r=n())}catch(i){return $(i,!1)}return P(r)?r.then(function(){return $(e,t)},function(e){return $(e,!1)}):$(e,t)},g=function(e,t,n,r){var i=new l;return i.resolve(e),i.promise.then(t,n,r)},b=g,w=function S(e){function t(e){r.resolve(e)}function n(e){r.reject(e)}if(!k(e))throw d("norslvr","Expected resolverFn, got '{0}'",e);if(!(this instanceof S))return new S(e);var r=new l;return e(t,n),r.promise};return w.defer=h,w.reject=m,w.when=g,w.resolve=b,w.all=p,w}function vn(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function gn(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=u(),this.$$ChildScope=null}return t.prototype=e,t}var t=10,n=r("$rootScope"),a=null,s=null;this.digestTtl=function(e){return arguments.length&&(t=e),t},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(r,c,l,f){function p(e){e.currentScope.$$destroyed=!0}function d(e){9===Or&&(e.$$childHead&&d(e.$$childHead),e.$$nextSibling&&d(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}function h(){this.$id=u(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function $(e){if(C.$$phase)throw n("inprog","{0} already in progress",C.$$phase);C.$$phase=e}function v(){C.$$phase=null}function g(e,t){do e.$$watchersCount+=t;while(e=e.$parent)}function b(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function w(){}function S(){for(;N.length;)try{N.shift()()}catch(e){c(e)}s=null}function E(){null===s&&(s=f.defer(function(){C.$apply(S)}))}h.prototype={constructor:h,$new:function(t,n){var r;return n=n||this,t?(r=new h,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!=this)&&r.$on("$destroy",p),r},$watch:function(e,t,n,r){var i=l(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,n,i,e);var o=this,s=o.$$watchers,u={fn:t,last:w,get:i,exp:r||e,eq:!!n};return a=null,k(t)||(u.fn=m),s||(s=o.$$watchers=[]),s.unshift(u),g(this,1),function(){I(s,u)>=0&&g(o,-1),a=null}},$watchGroup:function(e,t){function n(){u=!1,c?(c=!1,t(i,i,s)):t(i,r,s)}var r=new Array(e.length),i=new Array(e.length),a=[],s=this,u=!1,c=!0;if(!e.length){var l=!0;return s.$evalAsync(function(){l&&t(i,i,s)}),function(){l=!1}}return 1===e.length?this.$watch(e[0],function(e,n,o){i[0]=e,r[0]=n,t(i,e===n?i:r,o)}):(o(e,function(e,t){var o=s.$watch(e,function(e,o){i[t]=e,r[t]=o,u||(u=!0,s.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function n(e){o=e;var t,n,r,s,u;if(!y(o)){if(x(o))if(i(o)){a!==d&&(a=d,$=a.length=0,f++),t=o.length,$!==t&&(f++,a.length=$=t);for(var c=0;t>c;c++)u=a[c],s=o[c],r=u!==u&&s!==s,r||u===s||(f++,a[c]=s)}else{a!==h&&(a=h={},$=0,f++),t=0;for(n in o)kr.call(o,n)&&(t++,s=o[n],u=a[n],n in a?(r=u!==u&&s!==s,r||u===s||(f++,a[n]=s)):($++,a[n]=s,f++));if($>t){f++;for(n in a)kr.call(o,n)||($--,delete a[n])}}else a!==o&&(a=o,f++);return f}}function r(){if(m?(m=!1,t(o,o,u)):t(o,s,u),c)if(x(o))if(i(o)){s=new Array(o.length);for(var e=0;e<o.length;e++)s[e]=o[e]}else{s={};for(var n in o)kr.call(o,n)&&(s[n]=o[n])}else s=o}n.$stateful=!0;var o,a,s,u=this,c=t.length>1,f=0,p=l(e,n),d=[],h={},m=!0,$=0;return this.$watch(p,r)},$digest:function(){var e,r,i,o,u,l,p,d,h,m,g=t,y=this,b=[];$("$digest"),f.$$checkUrlChange(),this===C&&null!==s&&(f.defer.cancel(s),S()),a=null;do{for(l=!1,d=y;T.length;){try{m=T.shift(),m.scope.$eval(m.expression,m.locals)}catch(x){c(x)}a=null}e:do{if(o=d.$$watchers)for(u=o.length;u--;)try{if(e=o[u])if((r=e.get(d))===(i=e.last)||(e.eq?L(r,i):"number"==typeof r&&"number"==typeof i&&isNaN(r)&&isNaN(i))){if(e===a){l=!1;break e}}else l=!0,a=e,e.last=e.eq?_(r,null):r,e.fn(r,i===w?r:i,d),5>g&&(h=4-g,b[h]||(b[h]=[]),b[h].push({msg:k(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:r,oldVal:i}))}catch(x){c(x)}if(!(p=d.$$watchersCount&&d.$$childHead||d!==y&&d.$$nextSibling))for(;d!==y&&!(p=d.$$nextSibling);)d=d.$parent}while(d=p);if((l||T.length)&&!g--)throw v(),n("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",t,b)}while(l||T.length);for(v();A.length;)try{A.shift()()}catch(x){c(x)}},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===C&&f.$$applicationDestroyed(),g(this,-this.$$watchersCount);for(var t in this.$$listenerCount)b(this,this.$$listenerCount[t],t);e&&e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=m,this.$on=this.$watch=this.$watchGroup=function(){return m},this.$$listeners={},this.$$nextSibling=null,d(this)}},$eval:function(e,t){return l(e)(this,t)},$evalAsync:function(e,t){C.$$phase||T.length||f.defer(function(){T.length&&C.$digest()}),T.push({scope:this,expression:e,locals:t})},$$postDigest:function(e){A.push(e)},$apply:function(e){try{$("$apply");try{return this.$eval(e)}finally{v()}}catch(t){c(t)}finally{try{C.$digest()}catch(t){throw c(t),t}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&N.push(t),E()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,b(i,1,e))}},$emit:function(e,t){var n,r,i,o=[],a=this,s=!1,u={name:e,targetScope:a,stopPropagation:function(){s=!0},preventDefault:function(){u.defaultPrevented=!0},defaultPrevented:!1},l=U([u],arguments,1);do{for(n=a.$$listeners[e]||o,u.currentScope=a,r=0,i=n.length;i>r;r++)if(n[r])try{n[r].apply(null,l)}catch(f){c(f)}else n.splice(r,1),r--,i--;if(s)return u.currentScope=null,u;a=a.$parent}while(a);return u.currentScope=null,u},$broadcast:function(e,t){var n=this,r=n,i=n,o={name:e,targetScope:n,preventDefault:function(){o.defaultPrevented=!0},defaultPrevented:!1};if(!n.$$listenerCount[e])return o;for(var a,s,u,l=U([o],arguments,1);r=i;){for(o.currentScope=r,a=r.$$listeners[e]||[],s=0,u=a.length;u>s;s++)if(a[s])try{a[s].apply(null,l)}catch(f){c(f)}else a.splice(s,1),s--,u--;if(!(i=r.$$listenerCount[e]&&r.$$childHead||r!==n&&r.$$nextSibling))for(;r!==n&&!(i=r.$$nextSibling);)r=r.$parent}return o.currentScope=null,o}};var C=new h,T=C.$$asyncQueue=[],A=C.$$postDigestQueue=[],N=C.$$applyAsyncQueue=[];return C}]}function yn(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return b(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return b(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=An(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function bn(e){if("self"===e)return e;if(S(e)){if(e.indexOf("***")>-1)throw fo("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=Wr(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(T(e))return new RegExp("^"+e.source+"$");throw fo("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function xn(e){var t=[];return b(e)&&o(e,function(e){t.push(bn(e))}),t}function wn(){this.SCE_CONTEXTS=po;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=xn(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=xn(e)),t},this.$get=["$injector",function(n){function r(e,t){return"self"===e?Nn(t):!!e.exec(t.href)}function i(n){var i,o,a=An(n.toString()),s=!1;for(i=0,o=e.length;o>i;i++)if(r(e[i],a)){s=!0;break}if(s)for(i=0,o=t.length;o>i;i++)if(r(t[i],a)){s=!1;break}return s}function o(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function a(e,t){var n=f.hasOwnProperty(e)?f[e]:null;if(!n)throw fo("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||y(t)||""===t)return t;if("string"!=typeof t)throw fo("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new n(t)}function s(e){return e instanceof l?e.$$unwrapTrustedValue():e}function u(e,t){if(null===t||y(t)||""===t)return t;var n=f.hasOwnProperty(e)?f[e]:null;if(n&&t instanceof n)return t.$$unwrapTrustedValue();if(e===po.RESOURCE_URL){if(i(t))return t;throw fo("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===po.HTML)return c(t);throw fo("unsafe","Attempting to use an unsafe value in a safe context.")}var c=function(e){throw fo("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(c=n.get("$sanitize"));var l=o(),f={};return f[po.HTML]=o(l),f[po.CSS]=o(l),f[po.URL]=o(l),f[po.JS]=o(l),f[po.RESOURCE_URL]=o(f[po.URL]),{trustAs:a,getTrusted:u,valueOf:s}}]}function Sn(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>Or)throw fo("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=H(po);r.isEnabled=function(){return e},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,e||(r.trustAs=r.getTrusted=function(e,t){return t},r.valueOf=$),r.parseAs=function(e,n){var i=t(n);return i.literal&&i.constant?i:t(n,function(t){return r.getTrusted(e,t)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(po,function(e,t){var n=Cr(t);r[we("parse_as_"+n)]=function(t){return i(e,t)},r[we("get_trusted_"+n)]=function(t){return a(e,t)},r[we("trust_as_"+n)]=function(t){return s(e,t)}}),r}]}function En(){this.$get=["$window","$document",function(e,t){var n,r,i={},o=d((/android (\d+)/.exec(Cr((e.navigator||{}).userAgent))||[])[1]),a=/Boxee/i.test((e.navigator||{}).userAgent),s=t[0]||{},u=/^(Moz|webkit|ms)(?=[A-Z])/,c=s.body&&s.body.style,l=!1,f=!1;if(c){for(var p in c)if(r=u.exec(p)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in c&&"webkit"),l=!!("transition"in c||n+"Transition"in c),f=!!("animation"in c||n+"Animation"in c),!o||l&&f||(l=S(c.webkitTransition),f=S(c.webkitAnimation))}return{history:!(!e.history||!e.history.pushState||4>o||a),hasEvent:function(e){if("input"===e&&11>=Or)return!1;if(y(i[e])){var t=s.createElement("div");i[e]="on"+e in t}return i[e]},csp:Gr(),vendorPrefix:n,transitions:l,animations:f,android:o}}]}function Cn(){this.$get=["$templateCache","$http","$q","$sce",function(e,t,n,r){function i(o,a){function s(e){if(!a)throw Fi("tpload","Failed to load template: {0} (HTTP status: {1} {2})",o,e.status,e.statusText);return n.reject(e)}i.totalPendingRequests++,S(o)&&e.get(o)||(o=r.getTrustedResourceUrl(o));var u=t.defaults&&t.defaults.transformResponse;Ur(u)?u=u.filter(function(e){return e!==xt}):u===xt&&(u=null);var c={cache:e,transformResponse:u};return t.get(o,c)["finally"](function(){i.totalPendingRequests--}).then(function(t){return e.put(o,t.data),t.data},s)}return i.totalPendingRequests=0,i}]}function kn(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var r={};return r.findBindings=function(e,t,n){var r=e.getElementsByClassName("ng-binding"),i=[];return o(r,function(e){var r=_r.element(e).data("$binding");r&&o(r,function(r){if(n){var o=new RegExp("(^|\\s)"+Wr(t)+"(\\s|\\||$)");o.test(r)&&i.push(e)}else-1!=r.indexOf(t)&&i.push(e)})}),i},r.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+t+'"]',s=e.querySelectorAll(a);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},r.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},r}]}function Tn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,u){k(o)||(u=s,s=o,o=m);var c,l=B(arguments,3),f=b(u)&&!u,p=(f?r:n).defer(),d=p.promise;return c=t.defer(function(){try{p.resolve(o.apply(null,l))}catch(t){p.reject(t),i(t)}finally{delete a[d.$$timeoutId]}f||e.$apply()},s),d.$$timeoutId=c,a[c]=p,d}var a={};return o.cancel=function(e){return e&&e.$$timeoutId in a?(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId)):!1},o}]}function An(e){var t=e;return Or&&(ho.setAttribute("href",t),t=ho.href),ho.setAttribute("href",t),{href:ho.href,protocol:ho.protocol?ho.protocol.replace(/:$/,""):"",host:ho.host,search:ho.search?ho.search.replace(/^\?/,""):"",hash:ho.hash?ho.hash.replace(/^#/,""):"",hostname:ho.hostname,port:ho.port,pathname:"/"===ho.pathname.charAt(0)?ho.pathname:"/"+ho.pathname}}function Nn(e){var t=S(e)?An(e):e;return t.protocol===mo.protocol&&t.host===mo.host}function On(){this.$get=v(e)}function jn(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var n=e[0]||{},r={},i="";return function(){var e,o,a,s,u,c=n.cookie||"";if(c!==i)for(i=c,e=i.split("; "),r={},a=0;a<e.length;a++)o=e[a],s=o.indexOf("="),s>0&&(u=t(o.substring(0,s)),y(r[u])&&(r[u]=t(o.substring(s+1))));return r}}function Mn(){this.$get=jn}function Dn(e){function t(r,i){if(x(r)){var a={};return o(r,function(e,n){a[n]=t(n,e)}),a}return e.factory(r+n,i)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",Fn),t("date",Qn),t("filter",Pn),t("json",er),t("limitTo",tr),t("lowercase",wo),t("number",In),t("orderBy",nr),t("uppercase",So)}function Pn(){return function(e,t,n){if(!i(e)){if(null==e)return e;throw r("filter")("notarray","Expected array but received: {0}",e)}var o,a,s=Rn(t);switch(s){case"function":o=t;break;case"boolean":case"null":case"number":case"string":a=!0;case"object":o=Vn(t,n,a);break;default:return e}return Array.prototype.filter.call(e,o)}}function Vn(e,t,n){var r,i=x(e)&&"$"in e;return t===!0?t=L:k(t)||(t=function(e,t){return y(e)?!1:null===e||null===t?e===t:x(t)||x(e)&&!g(e)?!1:(e=Cr(""+e),t=Cr(""+t),-1!==e.indexOf(t))}),r=function(r){return i&&!x(r)?qn(r,e.$,t,!1):qn(r,e,t,n)}}function qn(e,t,n,r,i){var o=Rn(e),a=Rn(t);if("string"===a&&"!"===t.charAt(0))return!qn(e,t.substring(1),n,r);if(Ur(e))return e.some(function(e){return qn(e,t,n,r)});switch(o){case"object":var s;if(r){for(s in e)if("$"!==s.charAt(0)&&qn(e[s],t,n,!0))return!0;return i?!1:qn(e,t,n,!1)}if("object"===a){for(s in t){var u=t[s];if(!k(u)&&!y(u)){var c="$"===s,l=c?e:e[s];if(!qn(l,u,n,c,c))return!1}}return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function Rn(e){return null===e?"null":typeof e}function Fn(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return y(n)&&(n=t.CURRENCY_SYM),y(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:Ln(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function In(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:Ln(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function _n(e){var t,n,r,i,o,a=0;for((n=e.indexOf(vo))>-1&&(e=e.replace(vo,"")),(r=e.search(/e/i))>0?(0>n&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):0>n&&(n=e.length),r=0;e.charAt(r)==go;r++);if(r==(o=e.length))t=[0],n=1;else{for(o--;e.charAt(o)==go;)o--;for(n-=r,t=[],i=0;o>=r;r++,i++)t[i]=+e.charAt(r)}return n>$o&&(t=t.splice(0,$o-1),a=n-1,n=1),{d:t,e:a,i:n}}function Hn(e,t,n,r){var i=e.d,o=i.length-e.i;t=y(t)?Math.min(Math.max(n,o),r):+t;var a=t+e.i,s=i[a];if(a>0)i.splice(a);else{e.i=1,i.length=a=t+1;for(var u=0;a>u;u++)i[u]=0}for(s>=5&&i[a-1]++;t>o;o++)i.push(0);var c=i.reduceRight(function(e,t,n,r){return t+=e,r[n]=t%10,Math.floor(t/10)},0);c&&(i.unshift(c),e.i++)}function Ln(e,t,n,r,i){if(!S(e)&&!E(e)||isNaN(e))return"";var o,a=!isFinite(e),s=!1,u=Math.abs(e)+"",c="";if(a)c="∞";else{o=_n(u),Hn(o,i,t.minFrac,t.maxFrac);var l=o.d,f=o.i,p=o.e,d=[];for(s=l.reduce(function(e,t){return e&&!t},!0);0>f;)l.unshift(0),f++;f>0?d=l.splice(f):(d=l,l=[0]);var h=[];for(l.length>t.lgSize&&h.unshift(l.splice(-t.lgSize).join(""));l.length>t.gSize;)h.unshift(l.splice(-t.gSize).join(""));l.length&&h.unshift(l.join("")),c=h.join(n),d.length&&(c+=r+d.join("")),p&&(c+="e+"+p)}return 0>e&&!s?t.negPre+c+t.negSuf:t.posPre+c+t.posSuf}function Un(e,t,n){var r="";for(0>e&&(r="-",e=-e),e=""+e;e.length<t;)e=go+e;return n&&(e=e.substr(e.length-t)),r+e}function Bn(e,t,n,r){return n=n||0,function(i){var o=i["get"+e]();return(n>0||o>-n)&&(o+=n),0===o&&-12==n&&(o=12),Un(o,t,r)}}function zn(e,t){return function(n,r){var i=n["get"+e](),o=Tr(t?"SHORT"+e:e);return r[o][i]}}function Wn(e,t,n){var r=-1*n,i=r>=0?"+":"";return i+=Un(Math[r>0?"floor":"ceil"](r/60),2)+Un(Math.abs(r%60),2)}function Gn(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function Jn(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function Yn(e){return function(t){var n=Gn(t.getFullYear()),r=Jn(t),i=+r-+n,o=1+Math.round(i/6048e5);return Un(o,e)}}function Xn(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function Kn(e,t){return e.getFullYear()<=0?t.ERAS[0]:t.ERAS[1]}function Zn(e,t){return e.getFullYear()<=0?t.ERANAMES[0]:t.ERANAMES[1]}function Qn(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),i=0,o=0,a=t[8]?r.setUTCFullYear:r.setFullYear,s=t[8]?r.setUTCHours:r.setHours;t[9]&&(i=d(t[9]+t[10]),o=d(t[9]+t[11])),a.call(r,d(t[1]),d(t[2])-1,d(t[3]));var u=d(t[4]||0)-i,c=d(t[5]||0)-o,l=d(t[6]||0),f=Math.round(1e3*parseFloat("0."+(t[7]||0)));return s.call(r,u,c,l,f),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,u="",c=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,S(n)&&(n=xo.test(n)?d(n):t(n)),E(n)&&(n=new Date(n)),!C(n)||!isFinite(n.getTime()))return n;for(;r;)s=bo.exec(r),s?(c=U(c,s,1),r=c.pop()):(c.push(r),r=null);var l=n.getTimezoneOffset();return i&&(l=Y(i,n.getTimezoneOffset()),n=K(n,i,!0)),o(c,function(t){a=yo[t],u+=a?a(n,e.DATETIME_FORMATS,l):t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function er(){return function(e,t){return y(t)&&(t=2),G(e,t)}}function tr(){return function(e,t,n){return t=Math.abs(Number(t))===1/0?Number(t):d(t),isNaN(t)?e:(E(e)&&(e=e.toString()),Ur(e)||S(e)?(n=!n||isNaN(n)?0:d(n),n=0>n?Math.max(0,e.length+n):n,t>=0?e.slice(n,n+t):0===n?e.slice(t,e.length):e.slice(Math.max(0,n+t),n)):e)}}function nr(e){function t(t,n){return n=n?-1:1,t.map(function(t){var r=1,i=$;if(k(t))i=t;else if(S(t)&&("+"!=t.charAt(0)&&"-"!=t.charAt(0)||(r="-"==t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(i=e(t),i.constant))){var o=i();i=function(e){return e[o]}}return{get:i,descending:r*n}})}function n(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function r(e,t){return"function"==typeof e.valueOf&&(e=e.valueOf(),n(e))?e:g(e)&&(e=e.toString(),n(e))?e:t}function o(e,t){var n=typeof e;return null===e?(n="string",e="null"):"string"===n?e=e.toLowerCase():"object"===n&&(e=r(e,t)),{value:e,type:n}}function a(e,t){var n=0;return e.type===t.type?e.value!==t.value&&(n=e.value<t.value?-1:1):n=e.type<t.type?-1:1,n}return function(e,n,r){function s(e,t){return{value:e,predicateValues:c.map(function(n){return o(n.get(e),t)})}}function u(e,t){for(var n=0,r=0,i=c.length;i>r&&!(n=a(e.predicateValues[r],t.predicateValues[r])*c[r].descending);++r);return n}if(!i(e))return e;Ur(n)||(n=[n]),0===n.length&&(n=["+"]);var c=t(n,r);c.push({get:function(){return{}},descending:r?-1:1});var l=Array.prototype.map.call(e,s);return l.sort(u),e=l.map(function(e){return e.value})}}function rr(e){return k(e)&&(e={link:e}),e.restrict=e.restrict||"AC",v(e)}function ir(e,t){e.$name=t}function or(e,t,r,i,a){var s=this,u=[];s.$error={},s.$$success={},s.$pending=n,s.$name=a(t.name||t.ngForm||"")(r),s.$dirty=!1,s.$pristine=!0,s.$valid=!0,s.$invalid=!1,s.$submitted=!1,s.$$parentForm=ko,s.$rollbackViewValue=function(){o(u,function(e){e.$rollbackViewValue()})},s.$commitViewValue=function(){o(u,function(e){e.$commitViewValue()})},s.$addControl=function(e){de(e.$name,"input"),u.push(e),e.$name&&(s[e.$name]=e),e.$$parentForm=s},s.$$renameControl=function(e,t){var n=e.$name;s[n]===e&&delete s[n],s[t]=e,e.$name=t},s.$removeControl=function(e){e.$name&&s[e.$name]===e&&delete s[e.$name],o(s.$pending,function(t,n){s.$setValidity(n,null,e)}),o(s.$error,function(t,n){s.$setValidity(n,null,e)}),o(s.$$success,function(t,n){s.$setValidity(n,null,e)}),I(u,e),e.$$parentForm=ko},br({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];if(r){var i=r.indexOf(n);-1===i&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(I(r,n),0===r.length&&delete e[t])},$animate:i}),s.$setDirty=function(){i.removeClass(e,ua),i.addClass(e,ca),s.$dirty=!0,s.$pristine=!1,s.$$parentForm.$setDirty()},s.$setPristine=function(){i.setClass(e,ua,ca+" "+To),s.$dirty=!1,s.$pristine=!0,s.$submitted=!1,o(u,function(e){e.$setPristine()})},s.$setUntouched=function(){o(u,function(e){e.$setUntouched()})},s.$setSubmitted=function(){i.addClass(e,To),s.$submitted=!0,s.$$parentForm.$setSubmitted()}}function ar(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function sr(e,t,n,r,i,o){ur(e,t,n,r,i,o),ar(r)}function ur(e,t,n,r,i,o){var a=Cr(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(e){s=!0}),t.on("compositionend",function(){s=!1,u()})}var u=function(e){if(c&&(o.defer.cancel(c),c=null),!s){var i=t.val(),u=e&&e.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=zr(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,u)}};if(i.hasEvent("input"))t.on("input",u);else{var c,l=function(e,t,n){c||(c=o.defer(function(){c=null,t&&t.value===n||u(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||t>15&&19>t||t>=37&&40>=t||l(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",l)}t.on("change",u),r.$render=function(){var e=r.$isEmpty(r.$viewValue)?"":r.$viewValue;t.val()!==e&&t.val(e)}}function cr(e,t){if(C(e))return e;if(S(e)){Ro.lastIndex=0;var n=Ro.exec(e);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,u=0,c=Gn(r),l=7*(i-1);return t&&(o=t.getHours(),a=t.getMinutes(),s=t.getSeconds(),u=t.getMilliseconds()),new Date(r,0,c.getDate()+l,o,a,s,u)}}return NaN}function lr(e,t){return function(n,r){var i,a;if(C(n))return n;if(S(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),jo.test(n))return new Date(n);if(e.lastIndex=0,i=e.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function fr(e,t,r,i){return function(o,a,s,u,c,l,f){function p(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function d(e){return b(e)&&!C(e)?r(e)||n:e}pr(o,a,s,u),ur(o,a,s,u,c,l);var h,m=u&&u.$options&&u.$options.timezone;if(u.$$parserName=e,u.$parsers.push(function(e){if(u.$isEmpty(e))return null;if(t.test(e)){var i=r(e,h);return m&&(i=K(i,m)),i}return n}),u.$formatters.push(function(e){if(e&&!C(e))throw da("datefmt","Expected `{0}` to be a date",e);return p(e)?(h=e,h&&m&&(h=K(h,m,!0)),f("date")(e,i,m)):(h=null,"")}),b(s.min)||s.ngMin){var $;u.$validators.min=function(e){return!p(e)||y($)||r(e)>=$},s.$observe("min",function(e){$=d(e),u.$validate()})}if(b(s.max)||s.ngMax){var v;u.$validators.max=function(e){return!p(e)||y(v)||r(e)<=v},s.$observe("max",function(e){v=d(e),u.$validate()})}}}function pr(e,t,r,i){var o=t[0],a=i.$$hasNativeValidators=x(o.validity);a&&i.$parsers.push(function(e){var r=t.prop(Er)||{};return r.badInput&&!r.typeMismatch?n:e})}function dr(e,t,r,i,o,a){if(pr(e,t,r,i),ur(e,t,r,i,o,a),i.$$parserName="number",i.$parsers.push(function(e){return i.$isEmpty(e)?null:Po.test(e)?parseFloat(e):n}),i.$formatters.push(function(e){if(!i.$isEmpty(e)){if(!E(e))throw da("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e}),b(r.min)||r.ngMin){var s;i.$validators.min=function(e){return i.$isEmpty(e)||y(s)||e>=s},r.$observe("min",function(e){b(e)&&!E(e)&&(e=parseFloat(e,10)),s=E(e)&&!isNaN(e)?e:n,i.$validate()})}if(b(r.max)||r.ngMax){var u;i.$validators.max=function(e){return i.$isEmpty(e)||y(u)||u>=e},r.$observe("max",function(e){b(e)&&!E(e)&&(e=parseFloat(e,10)),u=E(e)&&!isNaN(e)?e:n,i.$validate()})}}function hr(e,t,n,r,i,o){ur(e,t,n,r,i,o),ar(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||Mo.test(n)}}function mr(e,t,n,r,i,o){ur(e,t,n,r,i,o),ar(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||Do.test(n)}}function $r(e,t,n,r){y(n.name)&&t.attr("name",u());var i=function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)};t.on("click",i),r.$render=function(){var e=n.value;t[0].checked=e==r.$viewValue},n.$observe("value",r.$render)}function vr(e,t,n,r,i){var o;if(b(r)){if(o=e(r),!o.constant)throw da("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(t)}return i}function gr(e,t,n,r,i,o,a,s){var u=vr(s,e,"ngTrueValue",n.ngTrueValue,!0),c=vr(s,e,"ngFalseValue",n.ngFalseValue,!1),l=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",l),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return e===!1},r.$formatters.push(function(e){return L(e,u)}),r.$parsers.push(function(e){return e?u:c})}function yr(e,t){return e="ngClass"+e,["$animate",function(n){function r(e,t){var n=[];e:for(var r=0;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i==t[o])continue e;n.push(i)}return n}function i(e){var t=[];return Ur(e)?(o(e,function(e){t=t.concat(i(e))}),t):S(e)?e.split(" "):x(e)?(o(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t):e}return{restrict:"AC",link:function(a,s,u){function c(e){var t=f(e,1);u.$addClass(t)}function l(e){var t=f(e,-1);u.$removeClass(t)}function f(e,t){var n=s.data("$classCounts")||$e(),r=[];return o(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&r.push(e))}),s.data("$classCounts",n),r.join(" ")}function p(e,t){var i=r(t,e),o=r(e,t);i=f(i,1),o=f(o,-1),i&&i.length&&n.addClass(s,i),o&&o.length&&n.removeClass(s,o)}function d(e){if(t===!0||a.$index%2===t){var n=i(e||[]);if(h){if(!L(e,h)){var r=i(h);p(r,n)}}else c(n)}h=H(e)}var h;a.$watch(u[e],d,!0),
u.$observe("class",function(t){d(a.$eval(u[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var o=1&n;if(o!==(1&r)){var s=i(a.$eval(u[e]));o===t?c(s):l(s)}})}}}]}function br(e){function t(e,t,u){y(t)?r("$pending",e,u):i("$pending",e,u),D(t)?t?(f(s.$error,e,u),l(s.$$success,e,u)):(l(s.$error,e,u),f(s.$$success,e,u)):(f(s.$error,e,u),f(s.$$success,e,u)),s.$pending?(o(pa,!0),s.$valid=s.$invalid=n,a("",null)):(o(pa,!1),s.$valid=xr(s.$error),s.$invalid=!s.$valid,a("",s.$valid));var c;c=s.$pending&&s.$pending[e]?n:s.$error[e]?!1:s.$$success[e]?!0:null,a(e,c),s.$$parentForm.$setValidity(e,c,s)}function r(e,t,n){s[e]||(s[e]={}),l(s[e],t,n)}function i(e,t,r){s[e]&&f(s[e],t,r),xr(s[e])&&(s[e]=n)}function o(e,t){t&&!c[e]?(p.addClass(u,e),c[e]=!0):!t&&c[e]&&(p.removeClass(u,e),c[e]=!1)}function a(e,t){e=e?"-"+ce(e,"-"):"",o(aa+e,t===!0),o(sa+e,t===!1)}var s=e.ctrl,u=e.$element,c={},l=e.set,f=e.unset,p=e.$animate;c[sa]=!(c[aa]=u.hasClass(aa)),s.$setValidity=t}function xr(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function wr(e){e[0].hasAttribute("selected")&&(e[0].selected=!0)}var Sr=/^\/(.+)\/([a-z]*)$/,Er="validity",Cr=function(e){return S(e)?e.toLowerCase():e},kr=Object.prototype.hasOwnProperty,Tr=function(e){return S(e)?e.toUpperCase():e},Ar=function(e){return S(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},Nr=function(e){return S(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(-33&e.charCodeAt(0))}):e};"i"!=="I".toLowerCase()&&(Cr=Ar,Tr=Nr);var Or,jr,Mr,Dr,Pr=[].slice,Vr=[].splice,qr=[].push,Rr=Object.prototype.toString,Fr=Object.getPrototypeOf,Ir=r("ng"),_r=e.angular||(e.angular={}),Hr=0;Or=t.documentMode,m.$inject=[],$.$inject=[];var Lr,Ur=Array.isArray,Br=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,zr=function(e){return S(e)?e.trim():e},Wr=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Gr=function(){function e(){try{return new Function(""),!1}catch(e){return!0}}if(!b(Gr.rules)){var n=t.querySelector("[ng-csp]")||t.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");Gr.rules={noUnsafeEval:!r||-1!==r.indexOf("no-unsafe-eval"),noInlineStyle:!r||-1!==r.indexOf("no-inline-style")}}else Gr.rules={noUnsafeEval:e(),noInlineStyle:!1}}return Gr.rules},Jr=function(){if(b(Jr.name_))return Jr.name_;var e,n,r,i,o=Yr.length;for(n=0;o>n;++n)if(r=Yr[n],e=t.querySelector("["+r.replace(":","\\:")+"jq]")){i=e.getAttribute(r+"jq");break}return Jr.name_=i},Yr=["ng-","data-ng-","ng:","x-ng-"],Xr=/[A-Z]/g,Kr=!1,Zr=1,Qr=2,ei=3,ti=8,ni=9,ri=11,ii={full:"1.4.9",major:1,minor:4,dot:9,codeName:"implicit-superannuation"};Ae.expando="ng339";var oi=Ae.cache={},ai=1,si=function(e,t,n){e.addEventListener(t,n,!1)},ui=function(e,t,n){e.removeEventListener(t,n,!1)};Ae._data=function(e){return this.cache[e[this.expando]]||{}};var ci=/([\:\-\_]+(.))/g,li=/^moz([A-Z])/,fi={mouseleave:"mouseout",mouseenter:"mouseover"},pi=r("jqLite"),di=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,hi=/<|&#?\w+;/,mi=/<([\w:-]+)/,$i=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,vi={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};vi.optgroup=vi.option,vi.tbody=vi.tfoot=vi.colgroup=vi.caption=vi.thead,vi.th=vi.td;var gi=Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},yi=Ae.prototype={ready:function(n){function r(){i||(i=!0,n())}var i=!1;"complete"===t.readyState?setTimeout(r):(this.on("DOMContentLoaded",r),Ae(e).on("load",r))},toString:function(){var e=[];return o(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return jr(e>=0?this[e]:this[this.length+e])},length:0,push:qr,sort:[].sort,splice:[].splice},bi={};o("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){bi[Cr(e)]=e});var xi={};o("input,select,option,textarea,button,form,details".split(","),function(e){xi[e]=!0});var wi={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};o({data:Pe,removeData:Me,hasData:Ce},function(e,t){Ae[t]=e}),o({data:Pe,inheritedData:_e,scope:function(e){return jr.data(e,"$scope")||_e(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return jr.data(e,"$isolateScope")||jr.data(e,"$isolateScopeNoTemplate")},controller:Ie,injector:function(e){return _e(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:Ve,css:function(e,t,n){return t=we(t),b(n)?void(e.style[t]=n):e.style[t]},attr:function(e,t,r){var i=e.nodeType;if(i!==ei&&i!==Qr&&i!==ti){var o=Cr(t);if(bi[o]){if(!b(r))return e[t]||(e.attributes.getNamedItem(t)||m).specified?o:n;r?(e[t]=!0,e.setAttribute(t,o)):(e[t]=!1,e.removeAttribute(o))}else if(b(r))e.setAttribute(t,r);else if(e.getAttribute){var a=e.getAttribute(t,2);return null===a?n:a}}},prop:function(e,t,n){return b(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(y(t)){var n=e.nodeType;return n===Zr||n===ei?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(y(t)){if(e.multiple&&"select"===F(e)){var n=[];return o(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return y(t)?e.innerHTML:(Oe(e,!0),void(e.innerHTML=t))},empty:He},function(e,t){Ae.prototype[t]=function(t,n){var r,i,o=this.length;if(e!==He&&y(2==e.length&&e!==Ve&&e!==Ie?t:n)){if(x(t)){for(r=0;o>r;r++)if(e===Pe)e(this[r],t);else for(i in t)e(this[r],i,t[i]);return this}for(var a=e.$dv,s=y(a)?Math.min(o,1):o,u=0;s>u;u++){var c=e(this[u],t,n);a=a?a+c:c}return a}for(r=0;o>r;r++)e(this[r],t,n);return this}}),o({removeData:Me,on:function(e,t,r,i){if(b(i))throw pi("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Ee(e)){var o=De(e,!0),a=o.events,s=o.handle;s||(s=o.handle=We(e,a));for(var u=t.indexOf(" ")>=0?t.split(" "):[t],c=u.length,l=function(t,n,i){var o=a[t];o||(o=a[t]=[],o.specialHandlerWrapper=n,"$destroy"===t||i||si(e,t,s)),o.push(r)};c--;)t=u[c],fi[t]?(l(fi[t],Je),l(t,n,!0)):l(t)}},off:je,one:function(e,t,n){e=jr(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,r=e.parentNode;Oe(e),o(new Ae(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(e){var t=[];return o(e.childNodes,function(e){e.nodeType===Zr&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===Zr||n===ri){t=new Ae(t);for(var r=0,i=t.length;i>r;r++){var o=t[r];e.appendChild(o)}}},prepend:function(e,t){if(e.nodeType===Zr){var n=e.firstChild;o(new Ae(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){t=jr(t).eq(0).clone()[0];var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)},remove:Le,detach:function(e){Le(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new Ae(t);for(var i=0,o=t.length;o>i;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Re,removeClass:qe,toggleClass:function(e,t,n){t&&o(t.split(" "),function(t){var r=n;y(r)&&(r=!Ve(e,t)),(r?Re:qe)(e,t)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==ri?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:Ne,triggerHandler:function(e,t,n){var r,i,a,s=t.type||t,u=De(e),c=u&&u.events,l=c&&c[s];l&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:m,type:s,target:e},t.type&&(r=f(r,t)),i=H(l),a=n?[r].concat(n):[r],o(i,function(t){r.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){Ae.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;a>o;o++)y(i)?(i=e(this[o],t,n,r),b(i)&&(i=jr(i))):Fe(i,e(this[o],t,n,r));return b(i)?i:this},Ae.prototype.bind=Ae.prototype.on,Ae.prototype.unbind=Ae.prototype.off}),Ke.prototype={put:function(e,t){this[Xe(e,this.nextUid)]=t},get:function(e){return this[Xe(e,this.nextUid)]},remove:function(e){var t=this[e=Xe(e,this.nextUid)];return delete this[e],t}};var Si=[function(){this.$get=[function(){return Ke}]}],Ei=/^[^\(]*\(\s*([^\)]*)\)/m,Ci=/,/,ki=/^\s*(_?)(\S+?)\1\s*$/,Ti=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Ai=r("$injector");et.$$annotate=Qe;var Ni=r("$animate"),Oi=1,ji="ng-animate",Mi=function(){this.$get=function(){}},Di=function(){var e=new Ke,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(e,t,n){var r=!1;return t&&(t=S(t)?t.split(" "):Ur(t)?t:[],o(t,function(t){t&&(r=!0,e[t]=n)})),r}function a(){o(t,function(t){var n=e.get(t);if(n){var r=it(t.attr("class")),i="",a="";o(n,function(e,t){var n=!!r[t];e!==n&&(e?i+=(i.length?" ":"")+t:a+=(a.length?" ":"")+t)}),o(t,function(e){i&&Re(e,i),a&&qe(e,a)}),e.remove(t)}}),t.length=0}function s(n,o,s){var u=e.get(n)||{},c=i(u,o,!0),l=i(u,s,!1);(c||l)&&(e.put(n,u),t.push(n),1===t.length&&r.$$postDigest(a))}return{enabled:m,on:m,off:m,pin:m,push:function(e,t,r,i){i&&i(),r=r||{},r.from&&e.css(r.from),r.to&&e.css(r.to),(r.addClass||r.removeClass)&&s(e,r.addClass,r.removeClass);var o=new n;return o.complete(),o}}}]},Pi=["$provide",function(e){var t=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Ni("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";t.$$registeredAnimations[n.substr(1)]=i,e.factory(i,r)},this.classNameFilter=function(e){if(1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null,this.$$classNameFilter)){var t=new RegExp("(\\s+|\\/)"+ji+"(\\s+|\\/)");if(t.test(this.$$classNameFilter.toString()))throw Ni("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',ji)}return this.$$classNameFilter},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r=rt(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,i,o){return r=r&&jr(r),i=i&&jr(i),r=r||i.parent(),t(n,r,i),e.push(n,"enter",ot(o))},move:function(n,r,i,o){return r=r&&jr(r),i=i&&jr(i),r=r||i.parent(),t(n,r,i),e.push(n,"move",ot(o))},leave:function(t,n){return e.push(t,"leave",ot(n),function(){t.remove()})},addClass:function(t,n,r){return r=ot(r),r.addClass=nt(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=ot(r),r.removeClass=nt(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,i){return i=ot(i),i.addClass=nt(i.addClass,n),i.removeClass=nt(i.removeClass,r),e.push(t,"setClass",i)},animate:function(t,n,r,i,o){return o=ot(o),o.from=o.from?f(o.from,n):n,o.to=o.to?f(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=nt(o.tempClasses,i),e.push(t,"animate",o)}}}]}],Vi=function(){this.$get=["$$rAF",function(e){function t(t){n.push(t),n.length>1||e(function(){for(var e=0;e<n.length;e++)n[e]();n=[]})}var n=[];return function(){var e=!1;return t(function(){e=!0}),function(n){e?n():t(n)}}}]},qi=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(e,t,n,r,i){function a(e){this.setHost(e);var t=n(),o=function(e){i(e,0,!1)};this._doneCallbacks=[],this._tick=function(e){var n=r[0];n&&n.hidden?o(e):t(e)},this._state=0}var s=0,u=1,c=2;return a.chain=function(e,t){function n(){return r===e.length?void t(!0):void e[r](function(e){return e===!1?void t(!1):(r++,void n())})}var r=0;n()},a.all=function(e,t){function n(n){i=i&&n,++r===e.length&&t(i)}var r=0,i=!0;o(e,function(e){e.done(n)})},a.prototype={setHost:function(e){this.host=e||{}},done:function(e){this._state===c?e():this._doneCallbacks.push(e)},progress:m,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){t===!1?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},"catch":function(e){return this.getPromise()["catch"](e)},"finally":function(e){return this.getPromise()["finally"](e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;t._state===s&&(t._state=u,t._tick(function(){t._resolve(e)}))},_resolve:function(e){this._state!==c&&(o(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=c)}},a}]},Ri=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(e,t,n){return function(t,r){function i(){return e(function(){o(),s||u.complete(),s=!0}),u}function o(){a.addClass&&(t.addClass(a.addClass),a.addClass=null),a.removeClass&&(t.removeClass(a.removeClass),a.removeClass=null),a.to&&(t.css(a.to),a.to=null)}var a=r||{};a.$$prepared||(a=_(a)),a.cleanupStyles&&(a.from=a.to=null),a.from&&(t.css(a.from),a.from=null);var s,u=new n;return{start:i,end:i}}}]},Fi=r("$compile");lt.$inject=["$provide","$$sanitizeUriProvider"];var Ii=/^((?:x|data)[\:\-_])/i,_i=r("$controller"),Hi=/^(\S+)(\s+as\s+([\w$]+))?$/,Li=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof jr&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},Ui="application/json",Bi={"Content-Type":Ui+";charset=utf-8"},zi=/^\[|^\{(?!\{)/,Wi={"[":/]$/,"{":/}$/},Gi=/^\)\]\}',?\n/,Ji=r("$http"),Yi=function(e){return function(){throw Ji("legacy","The method `{0}` on the promise returned from `$http` has been disabled.",e)}},Xi=_r.$interpolateMinErr=r("$interpolate");Xi.throwNoconcat=function(e){throw Xi("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",e)},Xi.interr=function(e,t){return Xi("interr","Can't interpolate: {0}\n{1}",e,t.toString())};var Ki=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,Zi={http:80,https:443,ftp:21},Qi=r("$location"),eo={$$html5:!1,$$replace:!1,absUrl:Bt("$$absUrl"),url:function(e){if(y(e))return this.$$url;var t=Ki.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:Bt("$$protocol"),host:Bt("$$host"),port:Bt("$$port"),path:zt("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(S(e)||E(e))e=e.toString(),this.$$search=ee(e);else{if(!x(e))throw Qi("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");e=_(e,{}),o(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:y(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:zt("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};o([Ut,Lt,Ht],function(e){e.prototype=Object.create(eo),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==Ht||!this.$$html5)throw Qi("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=y(t)?null:t,this}});var to=r("$parse"),no=Function.prototype.call,ro=Function.prototype.apply,io=Function.prototype.bind,oo=$e();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){oo[e]=!0});var ao={n:"\n",f:"\f",r:"\r",t:"	",v:"\x0B","'":"'",'"':'"'},so=function(e){this.options=e};so.prototype={constructor:so,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(t))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),i=oo[t],o=oo[n],a=oo[r];if(i||o||a){var s=a?r:o?n:t;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){var t=e||1;return this.index+t<this.text.length?this.text.charAt(this.index+t):!1},isNumber:function(e){return e>="0"&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"	"===e||"\n"===e||"\x0B"===e||" "===e},isIdent:function(e){return e>="a"&&"z">=e||e>="A"&&"Z">=e||"_"===e||"$"===e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=b(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw to("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Cr(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){for(var e=this.index;this.index<this.text.length;){var t=this.text.charAt(this.index);if(!this.isIdent(t)&&!this.isNumber(t))break;this.index++}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=ao[o];n+=s||o}i=!1}else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var uo=function(e,t){this.lexer=e,this.options=t};uo.Program="Program",uo.ExpressionStatement="ExpressionStatement",uo.AssignmentExpression="AssignmentExpression",uo.ConditionalExpression="ConditionalExpression",uo.LogicalExpression="LogicalExpression",uo.BinaryExpression="BinaryExpression",uo.UnaryExpression="UnaryExpression",uo.CallExpression="CallExpression",uo.MemberExpression="MemberExpression",uo.Identifier="Identifier",uo.Literal="Literal",uo.ArrayExpression="ArrayExpression",uo.Property="Property",uo.ObjectExpression="ObjectExpression",uo.ThisExpression="ThisExpression",uo.NGValueParameter="NGValueParameter",uo.prototype={ast:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t},program:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:uo.Program,body:e}},expressionStatement:function(){return{type:uo.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e,t=this.expression();e=this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();return this.expect("=")&&(e={type:uo.AssignmentExpression,left:e,right:this.assignment(),operator:"="}),e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:uo.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:uo.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:uo.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:uo.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:uo.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:uo.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:uo.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:uo.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.constants.hasOwnProperty(this.peek().text)?e=_(this.constants[this.consume().text]):this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:uo.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:uo.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:uo.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){for(var t=[e],n={type:uo.CallExpression,callee:this.identifier(),arguments:t,filter:!0};this.expect(":");)t.push(this.expression());return n},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do e.push(this.expression());while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:uo.Identifier,name:e.text}},constant:function(){return{type:uo.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:uo.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:uo.Property,kind:"init"},this.peek().constant?e.key=this.constant():this.peek().identifier?e.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),e.value=this.expression(),t.push(e)}while(this.expect(","));return this.consume("}"),{type:uo.ObjectExpression,properties:t}},throwError:function(e,t){throw to("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw to("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw to("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){var o=this.tokens[e],a=o.text;if(a===t||a===n||a===r||a===i||!t&&!n&&!r&&!i)return o}return!1},expect:function(e,t,n,r){var i=this.peek(e,t,n,r);return i?(this.tokens.shift(),i):!1},constants:{"true":{type:uo.Literal,value:!0},"false":{type:uo.Literal,value:!1},"null":{type:uo.Literal,value:null},undefined:{type:uo.Literal,value:n},"this":{type:uo.ThisExpression}}},cn.prototype={compile:function(e,t){var r=this,i=this.astBuilder.ast(e);this.state={nextId:0,filters:{},expensiveChecks:t,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},nn(i,r.$filter);var a,s="";if(this.stage="assign",a=an(i)){this.state.computing="assign";var u=this.nextId();this.recurse(a,u),this.return_(u),s="fn.assign="+this.generateFunction("assign","s,v,l")}var c=rn(i.body);r.stage="inputs",o(c,function(e,t){var n="fn"+t;r.state[n]={vars:[],body:[],own:{}},r.state.computing=n;var i=r.nextId();r.recurse(e,i),r.return_(i),r.state.inputs.push(n),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(i);var l='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+s+this.watchFns()+"return fn;",f=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",l)(this.$filter,Jt,Xt,Kt,Yt,Zt,Qt,en,e);return this.state=this.stage=n,f.literal=sn(i),f.constant=un(i),f},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return o(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return o(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,r,i,a,s){var u,c,l,f,p=this;if(i=i||m,!s&&b(e.watchId))return t=t||this.nextId(),void this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,r,i,a,!0));switch(e.type){case uo.Program:o(e.body,function(t,r){p.recurse(t.expression,n,n,function(e){c=e}),r!==e.body.length-1?p.current().body.push(c,";"):p.return_(c)});break;case uo.Literal:f=this.escape(e.value),this.assign(t,f),i(f);break;case uo.UnaryExpression:this.recurse(e.argument,n,n,function(e){c=e}),f=e.operator+"("+this.ifDefined(c,0)+")",this.assign(t,f),i(f);break;case uo.BinaryExpression:this.recurse(e.left,n,n,function(e){u=e}),this.recurse(e.right,n,n,function(e){c=e}),f="+"===e.operator?this.plus(u,c):"-"===e.operator?this.ifDefined(u,0)+e.operator+this.ifDefined(c,0):"("+u+")"+e.operator+"("+c+")",this.assign(t,f),i(f);break;case uo.LogicalExpression:t=t||this.nextId(),p.recurse(e.left,t),p.if_("&&"===e.operator?t:p.not(t),p.lazyRecurse(e.right,t)),i(t);break;case uo.ConditionalExpression:t=t||this.nextId(),p.recurse(e.test,t),p.if_(t,p.lazyRecurse(e.alternate,t),p.lazyRecurse(e.consequent,t)),i(t);break;case uo.Identifier:t=t||this.nextId(),r&&(r.context="inputs"===p.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),r.computed=!1,r.name=e.name),Jt(e.name),p.if_("inputs"===p.stage||p.not(p.getHasOwnProperty("l",e.name)),function(){p.if_("inputs"===p.stage||"s",function(){a&&1!==a&&p.if_(p.not(p.nonComputedMember("s",e.name)),p.lazyAssign(p.nonComputedMember("s",e.name),"{}")),p.assign(t,p.nonComputedMember("s",e.name))})},t&&p.lazyAssign(t,p.nonComputedMember("l",e.name))),(p.state.expensiveChecks||fn(e.name))&&p.addEnsureSafeObject(t),i(t);break;case uo.MemberExpression:u=r&&(r.context=this.nextId())||this.nextId(),t=t||this.nextId(),p.recurse(e.object,u,n,function(){p.if_(p.notNull(u),function(){e.computed?(c=p.nextId(),p.recurse(e.property,c),p.getStringValue(c),p.addEnsureSafeMemberName(c),a&&1!==a&&p.if_(p.not(p.computedMember(u,c)),p.lazyAssign(p.computedMember(u,c),"{}")),f=p.ensureSafeObject(p.computedMember(u,c)),p.assign(t,f),r&&(r.computed=!0,r.name=c)):(Jt(e.property.name),a&&1!==a&&p.if_(p.not(p.nonComputedMember(u,e.property.name)),p.lazyAssign(p.nonComputedMember(u,e.property.name),"{}")),f=p.nonComputedMember(u,e.property.name),(p.state.expensiveChecks||fn(e.property.name))&&(f=p.ensureSafeObject(f)),p.assign(t,f),r&&(r.computed=!1,r.name=e.property.name))},function(){p.assign(t,"undefined")}),i(t)},!!a);break;case uo.CallExpression:t=t||this.nextId(),e.filter?(c=p.filter(e.callee.name),l=[],o(e.arguments,function(e){var t=p.nextId();p.recurse(e,t),l.push(t)}),f=c+"("+l.join(",")+")",p.assign(t,f),i(t)):(c=p.nextId(),u={},l=[],p.recurse(e.callee,c,u,function(){p.if_(p.notNull(c),function(){p.addEnsureSafeFunction(c),o(e.arguments,function(e){p.recurse(e,p.nextId(),n,function(e){l.push(p.ensureSafeObject(e))})}),u.name?(p.state.expensiveChecks||p.addEnsureSafeObject(u.context),f=p.member(u.context,u.name,u.computed)+"("+l.join(",")+")"):f=c+"("+l.join(",")+")",f=p.ensureSafeObject(f),p.assign(t,f)},function(){p.assign(t,"undefined")}),i(t)}));break;case uo.AssignmentExpression:if(c=this.nextId(),u={},!on(e.left))throw to("lval","Trying to assign a value to a non l-value");this.recurse(e.left,n,u,function(){p.if_(p.notNull(u.context),function(){p.recurse(e.right,c),p.addEnsureSafeObject(p.member(u.context,u.name,u.computed)),p.addEnsureSafeAssignContext(u.context),f=p.member(u.context,u.name,u.computed)+e.operator+c,p.assign(t,f),i(t||f)})},1);break;case uo.ArrayExpression:l=[],o(e.elements,function(e){p.recurse(e,p.nextId(),n,function(e){l.push(e)})}),f="["+l.join(",")+"]",this.assign(t,f),i(f);break;case uo.ObjectExpression:l=[],o(e.properties,function(e){p.recurse(e.value,p.nextId(),n,function(t){l.push(p.escape(e.key.type===uo.Identifier?e.key.name:""+e.key.value)+":"+t)})}),f="{"+l.join(",")+"}",this.assign(t,f),i(f);break;case uo.ThisExpression:this.assign(t,"s"),i("s");break;case uo.NGValueParameter:this.assign(t,"v"),i("v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){return e?(this.current().body.push(e,"=",t,";"),e):void 0},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(e===!0)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){return e+"."+t},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},addEnsureSafeObject:function(e){this.current().body.push(this.ensureSafeObject(e),";")},addEnsureSafeMemberName:function(e){this.current().body.push(this.ensureSafeMemberName(e),";")},addEnsureSafeFunction:function(e){this.current().body.push(this.ensureSafeFunction(e),";")},addEnsureSafeAssignContext:function(e){this.current().body.push(this.ensureSafeAssignContext(e),";")},ensureSafeObject:function(e){return"ensureSafeObject("+e+",text)"},ensureSafeMemberName:function(e){return"ensureSafeMemberName("+e+",text)"},ensureSafeFunction:function(e){return"ensureSafeFunction("+e+",text)"},getStringValue:function(e){this.assign(e,"getStringValue("+e+",text)")},ensureSafeAssignContext:function(e){return"ensureSafeAssignContext("+e+",text)"},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(S(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";
if(E(e))return e.toString();if(e===!0)return"true";if(e===!1)return"false";if(null===e)return"null";if("undefined"==typeof e)return"undefined";throw to("esc","IMPOSSIBLE")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},ln.prototype={compile:function(e,t){var n=this,r=this.astBuilder.ast(e);this.expression=e,this.expensiveChecks=t,nn(r,n.$filter);var i,a;(i=an(r))&&(a=this.recurse(i));var s,u=rn(r.body);u&&(s=[],o(u,function(e,t){var r=n.recurse(e);e.input=r,s.push(r),e.watchId=t}));var c=[];o(r.body,function(e){c.push(n.recurse(e.expression))});var l=0===r.body.length?function(){}:1===r.body.length?c[0]:function(e,t){var n;return o(c,function(r){n=r(e,t)}),n};return a&&(l.assign=function(e,t,n){return a(e,n,t)}),s&&(l.inputs=s),l.literal=sn(r),l.constant=un(r),l},recurse:function(e,t,r){var i,a,s,u=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case uo.Literal:return this.value(e.value,t);case uo.UnaryExpression:return a=this.recurse(e.argument),this["unary"+e.operator](a,t);case uo.BinaryExpression:return i=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](i,a,t);case uo.LogicalExpression:return i=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](i,a,t);case uo.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case uo.Identifier:return Jt(e.name,u.expression),u.identifier(e.name,u.expensiveChecks||fn(e.name),t,r,u.expression);case uo.MemberExpression:return i=this.recurse(e.object,!1,!!r),e.computed||(Jt(e.property.name,u.expression),a=e.property.name),e.computed&&(a=this.recurse(e.property)),e.computed?this.computedMember(i,a,t,r,u.expression):this.nonComputedMember(i,a,u.expensiveChecks,t,r,u.expression);case uo.CallExpression:return s=[],o(e.arguments,function(e){s.push(u.recurse(e))}),e.filter&&(a=this.$filter(e.callee.name)),e.filter||(a=this.recurse(e.callee,!0)),e.filter?function(e,r,i,o){for(var u=[],c=0;c<s.length;++c)u.push(s[c](e,r,i,o));var l=a.apply(n,u,o);return t?{context:n,name:n,value:l}:l}:function(e,n,r,i){var o,c=a(e,n,r,i);if(null!=c.value){Xt(c.context,u.expression),Kt(c.value,u.expression);for(var l=[],f=0;f<s.length;++f)l.push(Xt(s[f](e,n,r,i),u.expression));o=Xt(c.value.apply(c.context,l),u.expression)}return t?{value:o}:o};case uo.AssignmentExpression:return i=this.recurse(e.left,!0,1),a=this.recurse(e.right),function(e,n,r,o){var s=i(e,n,r,o),c=a(e,n,r,o);return Xt(s.value,u.expression),Zt(s.context),s.context[s.name]=c,t?{value:c}:c};case uo.ArrayExpression:return s=[],o(e.elements,function(e){s.push(u.recurse(e))}),function(e,n,r,i){for(var o=[],a=0;a<s.length;++a)o.push(s[a](e,n,r,i));return t?{value:o}:o};case uo.ObjectExpression:return s=[],o(e.properties,function(e){s.push({key:e.key.type===uo.Identifier?e.key.name:""+e.key.value,value:u.recurse(e.value)})}),function(e,n,r,i){for(var o={},a=0;a<s.length;++a)o[s[a].key]=s[a].value(e,n,r,i);return t?{value:o}:o};case uo.ThisExpression:return function(e){return t?{value:e}:e};case uo.NGValueParameter:return function(e,n,r,i){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=b(a)?+a:0,t?{value:a}:a}},"unary-":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=b(a)?-a:0,t?{value:a}:a}},"unary!":function(e,t){return function(n,r,i,o){var a=!e(n,r,i,o);return t?{value:a}:a}},"binary+":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),u=t(r,i,o,a),c=en(s,u);return n?{value:c}:c}},"binary-":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),u=t(r,i,o,a),c=(b(s)?s:0)-(b(u)?u:0);return n?{value:c}:c}},"binary*":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)*t(r,i,o,a);return n?{value:s}:s}},"binary/":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)/t(r,i,o,a);return n?{value:s}:s}},"binary%":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)%t(r,i,o,a);return n?{value:s}:s}},"binary===":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)===t(r,i,o,a);return n?{value:s}:s}},"binary!==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!==t(r,i,o,a);return n?{value:s}:s}},"binary==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)==t(r,i,o,a);return n?{value:s}:s}},"binary!=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!=t(r,i,o,a);return n?{value:s}:s}},"binary<":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<t(r,i,o,a);return n?{value:s}:s}},"binary>":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>t(r,i,o,a);return n?{value:s}:s}},"binary<=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<=t(r,i,o,a);return n?{value:s}:s}},"binary>=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>=t(r,i,o,a);return n?{value:s}:s}},"binary&&":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)&&t(r,i,o,a);return n?{value:s}:s}},"binary||":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)||t(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(e,t,n,r){return function(i,o,a,s){var u=e(i,o,a,s)?t(i,o,a,s):n(i,o,a,s);return r?{value:u}:u}},value:function(e,t){return function(){return t?{context:n,name:n,value:e}:e}},identifier:function(e,t,r,i,o){return function(a,s,u,c){var l=s&&e in s?s:a;i&&1!==i&&l&&!l[e]&&(l[e]={});var f=l?l[e]:n;return t&&Xt(f,o),r?{context:l,name:e,value:f}:f}},computedMember:function(e,t,n,r,i){return function(o,a,s,u){var c,l,f=e(o,a,s,u);return null!=f&&(c=t(o,a,s,u),c=Yt(c),Jt(c,i),r&&1!==r&&f&&!f[c]&&(f[c]={}),l=f[c],Xt(l,i)),n?{context:f,name:c,value:l}:l}},nonComputedMember:function(e,t,r,i,o,a){return function(s,u,c,l){var f=e(s,u,c,l);o&&1!==o&&f&&!f[t]&&(f[t]={});var p=null!=f?f[t]:n;return(r||fn(t))&&Xt(p,a),i?{context:f,name:t,value:p}:p}},inputs:function(e,t){return function(n,r,i,o){return o?o[t]:e(n,r,i)}}};var co=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n,this.ast=new uo(this.lexer),this.astCompiler=n.csp?new ln(this.ast,t):new cn(this.ast,t)};co.prototype={constructor:co,parse:function(e){return this.astCompiler.compile(e,this.options.expensiveChecks)}};var lo=Object.prototype.valueOf,fo=r("$sce"),po={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Fi=r("$compile"),ho=t.createElement("a"),mo=An(e.location.href);jn.$inject=["$document"],Dn.$inject=["$provide"];var $o=22,vo=".",go="0";Fn.$inject=["$locale"],In.$inject=["$locale"];var yo={yyyy:Bn("FullYear",4),yy:Bn("FullYear",2,0,!0),y:Bn("FullYear",1),MMMM:zn("Month"),MMM:zn("Month",!0),MM:Bn("Month",2,1),M:Bn("Month",1,1),dd:Bn("Date",2),d:Bn("Date",1),HH:Bn("Hours",2),H:Bn("Hours",1),hh:Bn("Hours",2,-12),h:Bn("Hours",1,-12),mm:Bn("Minutes",2),m:Bn("Minutes",1),ss:Bn("Seconds",2),s:Bn("Seconds",1),sss:Bn("Milliseconds",3),EEEE:zn("Day"),EEE:zn("Day",!0),a:Xn,Z:Wn,ww:Yn(2),w:Yn(1),G:Kn,GG:Kn,GGG:Kn,GGGG:Zn},bo=/((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,xo=/^\-?\d+$/;Qn.$inject=["$locale"];var wo=v(Cr),So=v(Tr);nr.$inject=["$parse"];var Eo=v({restrict:"E",compile:function(e,t){return t.href||t.xlinkHref?void 0:function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Rr.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),Co={};o(bi,function(e,t){function n(e,n,i){e.$watch(i[r],function(e){i.$set(t,!!e)})}if("multiple"!=e){var r=ft("ng-"+t),i=n;"checked"===e&&(i=function(e,t,i){i.ngModel!==i[r]&&n(e,t,i)}),Co[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(wi,function(e,t){Co[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(Sr);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),o(["src","srcset","href"],function(e){var t=ft("ng-"+e);Co[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===Rr.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){return t?(i.$set(a,t),void(Or&&o&&r.prop(o,i[a]))):void("href"===e&&i.$set(a,null))})}}}});var ko={$addControl:m,$$renameControl:ir,$removeControl:m,$setValidity:m,$setDirty:m,$setPristine:m,$setSubmitted:m},To="ng-submitted";or.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Ao=function(e){return["$timeout","$parse",function(t,r){function i(e){return""===e?r('this[""]').assign:r(e).assign||m}var o={name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:or,compile:function(r,o){r.addClass(ua).addClass(aa);var a=o.name?"name":e&&o.ngForm?"ngForm":!1;return{pre:function(e,r,o,s){var u=s[0];if(!("action"in o)){var c=function(t){e.$apply(function(){u.$commitViewValue(),u.$setSubmitted()}),t.preventDefault()};si(r[0],"submit",c),r.on("$destroy",function(){t(function(){ui(r[0],"submit",c)},0,!1)})}var l=s[1]||u.$$parentForm;l.$addControl(u);var p=a?i(u.$name):m;a&&(p(e,u),o.$observe(a,function(t){u.$name!==t&&(p(e,n),u.$$parentForm.$$renameControl(u,t),(p=i(u.$name))(e,u))})),r.on("$destroy",function(){u.$$parentForm.$removeControl(u),p(e,n),f(u,ko)})}}}};return o}]},No=Ao(),Oo=Ao(!0),jo=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,Mo=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,Do=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Po=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Vo=/^(\d{4})-(\d{2})-(\d{2})$/,qo=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Ro=/^(\d{4})-W(\d\d)$/,Fo=/^(\d{4})-(\d\d)$/,Io=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,_o={text:sr,date:fr("date",Vo,lr(Vo,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":fr("datetimelocal",qo,lr(qo,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:fr("time",Io,lr(Io,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:fr("week",Ro,cr,"yyyy-Www"),month:fr("month",Fo,lr(Fo,["yyyy","MM"]),"yyyy-MM"),number:dr,url:hr,email:mr,radio:$r,checkbox:gr,hidden:m,button:m,submit:m,reset:m,file:m},Ho=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(_o[Cr(a.type)]||_o.text)(i,o,a,s[0],t,e,n,r)}}}}],Lo=/^(true|false|\d+)$/,Uo=function(){return{restrict:"A",priority:100,compile:function(e,t){return Lo.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},Bo=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,n,r){e.$$addBindingInfo(n,r.ngBind),n=n[0],t.$watch(r.ngBind,function(e){n.textContent=y(e)?"":e})}}}}],zo=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){var o=e(r.attr(i.$attr.ngBindTemplate));t.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(e){r.textContent=y(e)?"":e})}}}}],Wo=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(e){return(e||"").toString()});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){r.html(e.getTrustedHtml(o(t))||"")})}}}}],Go=v({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),Jo=yr("",!0),Yo=yr("Odd",0),Xo=yr("Even",1),Ko=rr({compile:function(e,t){t.$set("ngCloak",n),e.removeClass("ng-cloak")}}),Zo=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Qo={},ea={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=ft("ng-"+e);Qo[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t],null,!0);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};ea[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var ta=["$animate",function(e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,c;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=t.createComment(" end ngIf: "+i.ngIf+" "),s={clone:n},e.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),u&&(u.$destroy(),u=null),s&&(c=me(s.clone),e.leave(c).then(function(){c=null}),s=null))})}}}],na=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:_r.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,c,l){var f,p,d,h=0,m=function(){p&&(p.remove(),p=null),f&&(f.$destroy(),f=null),d&&(n.leave(d).then(function(){p=null}),p=d,d=null)};r.$watch(o,function(o){var u=function(){!b(s)||s&&!r.$eval(s)||t()},p=++h;o?(e(o,!0).then(function(e){if(!r.$$destroyed&&p===h){var t=r.$new();c.template=e;var s=l(t,function(e){m(),n.enter(e,null,i).then(u)});f=t,d=s,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||p===h&&(m(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(m(),c.template=null)})}}}}],ra=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return/SVG/.test(r[0].toString())?(r.empty(),void e(ke(o.template,t).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(o.template),void e(r.contents())(n))}}}],ia=rr({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),oa=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,r,i){var a=t.attr(r.$attr.ngList)||", ",s="false"!==r.ngTrim,u=s?zr(a):a,c=function(e){if(!y(e)){var t=[];return e&&o(e.split(u),function(e){e&&t.push(s?zr(e):e)}),t}};i.$parsers.push(c),i.$formatters.push(function(e){return Ur(e)?e.join(a):n}),i.$isEmpty=function(e){return!e||!e.length}}}},aa="ng-valid",sa="ng-invalid",ua="ng-pristine",ca="ng-dirty",la="ng-untouched",fa="ng-touched",pa="ng-pending",da=r("ngModel"),ha=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,r,i,a,s,u,c,l,f){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=n,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=n,this.$name=f(r.name||"",!1)(e),this.$$parentForm=ko;var p,d=a(r.ngModel),h=d.assign,$=d,v=h,g=null,x=this;this.$$setOptions=function(e){if(x.$options=e,e&&e.getterSetter){var t=a(r.ngModel+"()"),n=a(r.ngModel+"($$$p)");$=function(e){var n=d(e);return k(n)&&(n=t(e)),n},v=function(e,t){k(d(e))?n(e,{$$$p:x.$modelValue}):h(e,x.$modelValue)}}else if(!d.assign)throw da("nonassign","Expression '{0}' is non-assignable. Element: {1}",r.ngModel,Z(i))},this.$render=m,this.$isEmpty=function(e){return y(e)||""===e||null===e||e!==e};var w=0;br({ctrl:this,$element:i,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},$animate:s}),this.$setPristine=function(){x.$dirty=!1,x.$pristine=!0,s.removeClass(i,ca),s.addClass(i,ua)},this.$setDirty=function(){x.$dirty=!0,x.$pristine=!1,s.removeClass(i,ua),s.addClass(i,ca),x.$$parentForm.$setDirty()},this.$setUntouched=function(){x.$touched=!1,x.$untouched=!0,s.setClass(i,la,fa)},this.$setTouched=function(){x.$touched=!0,x.$untouched=!1,s.setClass(i,fa,la)},this.$rollbackViewValue=function(){u.cancel(g),x.$viewValue=x.$$lastCommittedViewValue,x.$render()},this.$validate=function(){if(!E(x.$modelValue)||!isNaN(x.$modelValue)){var e=x.$$lastCommittedViewValue,t=x.$$rawModelValue,r=x.$valid,i=x.$modelValue,o=x.$options&&x.$options.allowInvalid;x.$$runValidators(t,e,function(e){o||r===e||(x.$modelValue=e?t:n,x.$modelValue!==i&&x.$$writeModelToScope())})}},this.$$runValidators=function(e,t,r){function i(){var e=x.$$parserName||"parse";return y(p)?(u(e,null),!0):(p||(o(x.$validators,function(e,t){u(t,null)}),o(x.$asyncValidators,function(e,t){u(t,null)})),u(e,p),p)}function a(){var n=!0;return o(x.$validators,function(r,i){var o=r(e,t);n=n&&o,u(i,o)}),n?!0:(o(x.$asyncValidators,function(e,t){u(t,null)}),!1)}function s(){var r=[],i=!0;o(x.$asyncValidators,function(o,a){var s=o(e,t);if(!P(s))throw da("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",s);u(a,n),r.push(s.then(function(){u(a,!0)},function(e){i=!1,u(a,!1)}))}),r.length?l.all(r).then(function(){c(i)},m):c(!0)}function u(e,t){f===w&&x.$setValidity(e,t)}function c(e){f===w&&r(e)}w++;var f=w;return i()&&a()?void s():void c(!1)},this.$commitViewValue=function(){var e=x.$viewValue;u.cancel(g),(x.$$lastCommittedViewValue!==e||""===e&&x.$$hasNativeValidators)&&(x.$$lastCommittedViewValue=e,x.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function t(){x.$modelValue!==a&&x.$$writeModelToScope()}var r=x.$$lastCommittedViewValue,i=r;if(p=y(i)?n:!0)for(var o=0;o<x.$parsers.length;o++)if(i=x.$parsers[o](i),y(i)){p=!1;break}E(x.$modelValue)&&isNaN(x.$modelValue)&&(x.$modelValue=$(e));var a=x.$modelValue,s=x.$options&&x.$options.allowInvalid;x.$$rawModelValue=i,s&&(x.$modelValue=i,t()),x.$$runValidators(i,x.$$lastCommittedViewValue,function(e){s||(x.$modelValue=e?i:n,t())})},this.$$writeModelToScope=function(){v(e,x.$modelValue),o(x.$viewChangeListeners,function(e){try{e()}catch(n){t(n)}})},this.$setViewValue=function(e,t){x.$viewValue=e,x.$options&&!x.$options.updateOnDefault||x.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n,r=0,i=x.$options;i&&b(i.debounce)&&(n=i.debounce,E(n)?r=n:E(n[t])?r=n[t]:E(n["default"])&&(r=n["default"])),u.cancel(g),r?g=u(function(){x.$commitViewValue()},r):c.$$phase?x.$commitViewValue():e.$apply(function(){x.$commitViewValue()})},e.$watch(function(){var t=$(e);if(t!==x.$modelValue&&(x.$modelValue===x.$modelValue||t===t)){x.$modelValue=x.$$rawModelValue=t,p=n;for(var r=x.$formatters,i=r.length,o=t;i--;)o=r[i](o);x.$viewValue!==o&&(x.$viewValue=x.$$lastCommittedViewValue=o,x.$render(),x.$$runValidators(t,o,m))}return t})}],ma=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:ha,priority:1,compile:function(t){return t.addClass(ua).addClass(la).addClass(aa),{pre:function(e,t,n,r){var i=r[0],o=r[1]||i.$$parentForm;i.$$setOptions(r[2]&&r[2].$options),o.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(t,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(e){o.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(n){o.$touched||(e.$$phase?t.$evalAsync(o.$setTouched):t.$apply(o.$setTouched))})}}}}}],$a=/(\s+|^)default(\s+|$)/,va=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var n=this;this.$options=_(e.$eval(t.ngModelOptions)),b(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=zr(this.$options.updateOn.replace($a,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},ga=rr({terminal:!0,priority:1e3}),ya=r("ngOptions"),ba=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,xa=["$compile","$parse",function(e,n){function r(e,t,r){function o(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function a(e){var t;if(!c&&i(e))t=e;else{t=[];for(var n in e)e.hasOwnProperty(n)&&"$"!==n.charAt(0)&&t.push(n)}return t}var s=e.match(ba);if(!s)throw ya("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",e,Z(t));var u=s[5]||s[7],c=s[6],l=/ as /.test(s[0])&&s[1],f=s[9],p=n(s[2]?s[1]:u),d=l&&n(l),h=d||p,m=f&&n(f),$=f?function(e,t){return m(r,t)}:function(e){return Xe(e)},v=function(e,t){return $(e,S(e,t))},g=n(s[2]||s[1]),y=n(s[3]||""),b=n(s[4]||""),x=n(s[8]),w={},S=c?function(e,t){return w[c]=t,w[u]=e,w}:function(e){return w[u]=e,w};return{trackBy:f,getTrackByValue:v,getWatchables:n(x,function(e){var t=[];e=e||[];for(var n=a(e),i=n.length,o=0;i>o;o++){var u=e===n?o:n[o],c=(e[u],S(e[u],u)),l=$(e[u],c);if(t.push(l),s[2]||s[1]){var f=g(r,c);t.push(f)}if(s[4]){var p=b(r,c);t.push(p)}}return t}),getOptions:function(){for(var e=[],t={},n=x(r)||[],i=a(n),s=i.length,u=0;s>u;u++){var c=n===i?u:i[u],l=n[c],p=S(l,c),d=h(r,p),m=$(d,p),w=g(r,p),E=y(r,p),C=b(r,p),k=new o(m,d,w,E,C);e.push(k),t[m]=k}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[v(e)]},getViewValueFromOption:function(e){return f?_r.copy(e.viewValue):e.viewValue}}}}}function a(t,n,i,a){function c(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),e.value!==t.value&&(t.value=e.selectValue)}function l(e,t,n,r){var i;return t&&Cr(t.nodeName)===n?i=t:(i=r.cloneNode(!1),t?e.insertBefore(i,t):e.appendChild(i)),i}function f(e){for(var t;e;)t=e.nextSibling,Le(e),e=t}function p(e){var t=m&&m[0],n=w&&w[0];if(t||n)for(;e&&(e===t||e===n||e.nodeType===ti||"option"===F(e)&&""===e.value);)e=e.nextSibling;return e}function d(){var e=S&&$.readValue();S=E.getOptions();var t={},r=n[0].firstChild;if(x&&n.prepend(m),r=p(r),S.items.forEach(function(e){var i,o,a;e.group?(i=t[e.group],i||(o=l(n[0],r,"optgroup",u),r=o.nextSibling,o.label=e.group,i=t[e.group]={groupElement:o,currentOptionElement:o.firstChild}),a=l(i.groupElement,i.currentOptionElement,"option",s),c(e,a),i.currentOptionElement=a.nextSibling):(a=l(n[0],r,"option",s),c(e,a),r=a.nextSibling)}),Object.keys(t).forEach(function(e){f(t[e].currentOptionElement)}),f(r),h.$render(),!h.$isEmpty(e)){var i=$.readValue(),o=E.trackBy||v;(o?L(e,i):e===i)||(h.$setViewValue(i),h.$render())}}var h=a[1];if(h){for(var m,$=a[0],v=i.multiple,g=0,y=n.children(),b=y.length;b>g;g++)if(""===y[g].value){m=y.eq(g);break}var x=!!m,w=jr(s.cloneNode(!1));w.val("?");var S,E=r(i.ngOptions,n,t),C=function(){x||n.prepend(m),n.val(""),m.prop("selected",!0),m.attr("selected",!0)},k=function(){x||m.remove()},T=function(){n.prepend(w),n.val("?"),w.prop("selected",!0),w.attr("selected",!0)},A=function(){w.remove()};v?(h.$isEmpty=function(e){return!e||0===e.length},$.writeValue=function(e){S.items.forEach(function(e){e.element.selected=!1}),e&&e.forEach(function(e){var t=S.getOptionFromViewValue(e);t&&!t.disabled&&(t.element.selected=!0)})},$.readValue=function(){var e=n.val()||[],t=[];return o(e,function(e){var n=S.selectValueMap[e];n&&!n.disabled&&t.push(S.getViewValueFromOption(n))}),t},E.trackBy&&t.$watchCollection(function(){return Ur(h.$viewValue)?h.$viewValue.map(function(e){return E.getTrackByValue(e)}):void 0},function(){h.$render()})):($.writeValue=function(e){var t=S.getOptionFromViewValue(e);t&&!t.disabled?n[0].value!==t.selectValue&&(A(),k(),n[0].value=t.selectValue,t.element.selected=!0,t.element.setAttribute("selected","selected")):null===e||x?(A(),C()):(k(),T())},$.readValue=function(){var e=S.selectValueMap[n.val()];return e&&!e.disabled?(k(),A(),S.getViewValueFromOption(e)):null},E.trackBy&&t.$watch(function(){return E.getTrackByValue(h.$viewValue)},function(){h.$render()})),x?(m.remove(),e(m)(t),m.removeClass("ng-scope")):m=jr(s.cloneNode(!1)),d(),t.$watchCollection(E.getWatchables,d)}}var s=t.createElement("option"),u=t.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","?ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=m},post:a}}}],wa=["$locale","$interpolate","$log",function(e,t,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(a,s,u){function c(e){s.text(e||"")}var l,f=u.count,p=u.$attr.when&&s.attr(u.$attr.when),d=u.offset||0,h=a.$eval(p)||{},$={},v=t.startSymbol(),g=t.endSymbol(),b=v+f+"-"+d+g,x=_r.noop;o(u,function(e,t){var n=i.exec(t);if(n){var r=(n[1]?"-":"")+Cr(n[2]);h[r]=s.attr(u.$attr[t])}}),o(h,function(e,n){$[n]=t(e.replace(r,b))}),a.$watch(f,function(t){var r=parseFloat(t),i=isNaN(r);if(i||r in h||(r=e.pluralCat(r-d)),r!==l&&!(i&&E(l)&&isNaN(l))){x();var o=$[r];y(o)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+p),x=m,c()):x=a.$watch(o,c),l=r}})}}}],Sa=["$parse","$animate",function(e,a){var s="$$NG_REMOVED",u=r("ngRepeat"),c=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))},l=function(e){return e.clone[0]},f=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,p){var d=p.ngRepeat,h=t.createComment(" end ngRepeat: "+d+" "),m=d.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!m)throw u("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",d);var $=m[1],v=m[2],g=m[3],y=m[4];if(m=$.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!m)throw u("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",$);var b=m[3]||m[1],x=m[2];if(g&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(g)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(g)))throw u("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",g);var w,S,E,C,k={$id:Xe};return y?w=e(y):(E=function(e,t){return Xe(t)},C=function(e){return e}),function(e,t,r,p,m){w&&(S=function(t,n,r){return x&&(k[x]=t),k[b]=n,k.$index=r,w(e,k)});var $=$e();e.$watchCollection(v,function(r){var p,v,y,w,k,T,A,N,O,j,M,D,P=t[0],V=$e();if(g&&(e[g]=r),i(r))O=r,N=S||E;else{N=S||C,O=[];for(var q in r)kr.call(r,q)&&"$"!==q.charAt(0)&&O.push(q)}for(w=O.length,M=new Array(w),p=0;w>p;p++)if(k=r===O?p:O[p],T=r[k],A=N(k,T,p),$[A])j=$[A],delete $[A],V[A]=j,M[p]=j;else{if(V[A])throw o(M,function(e){e&&e.scope&&($[e.id]=e)}),u("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",d,A,T);M[p]={id:A,scope:n,clone:n},V[A]=!0}for(var R in $){if(j=$[R],D=me(j.clone),a.leave(D),D[0].parentNode)for(p=0,v=D.length;v>p;p++)D[p][s]=!0;j.scope.$destroy()}for(p=0;w>p;p++)if(k=r===O?p:O[p],T=r[k],j=M[p],j.scope){y=P;do y=y.nextSibling;while(y&&y[s]);l(j)!=y&&a.move(me(j.clone),null,jr(P)),P=f(j),c(j.scope,p,b,T,x,k,w)}else m(function(e,t){j.scope=t;var n=h.cloneNode(!1);e[e.length++]=n,a.enter(e,null,jr(P)),P=n,j.clone=e,V[j.id]=j,c(j.scope,p,b,T,x,k,w)});$=V})}}}}],Ea="ng-hide",Ca="ng-hide-animate",ka=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,Ea,{tempClasses:Ca})})}}}],Ta=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,Ea,{tempClasses:Ca})})}}}],Aa=rr(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&o(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),Na=["$animate",function(e){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=i.ngSwitch||i.on,u=[],c=[],l=[],f=[],p=function(e,t){return function(){e.splice(t,1)}};n.$watch(s,function(n){var r,i;for(r=0,i=l.length;i>r;++r)e.cancel(l[r]);for(l.length=0,r=0,i=f.length;i>r;++r){var s=me(c[r].clone);f[r].$destroy();var d=l[r]=e.leave(s);d.then(p(l,r))}c.length=0,f.length=0,(u=a.cases["!"+n]||a.cases["?"])&&o(u,function(n){n.transclude(function(r,i){f.push(i);var o=n.element;r[r.length++]=t.createComment(" end ngSwitchWhen: ");var a={clone:r};c.push(a),e.enter(r,o.parent(),o)})})})}}}],Oa=rr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:t})}}),ja=rr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Ma=rr({restrict:"EAC",link:function(e,t,n,i,o){if(!o)throw r("ngTransclude")("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",Z(t));o(function(e){t.empty(),t.append(e)})}}),Da=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"==n.type){var r=n.id,i=t[0].text;e.put(r,i)}}}}],Pa={$setViewValue:m,$render:m},Va=["$element","$scope","$attrs",function(e,r,i){var o=this,a=new Ke;o.ngModelCtrl=Pa,o.unknownOption=jr(t.createElement("option")),o.renderUnknownOption=function(t){var n="? "+Xe(t)+" ?";o.unknownOption.val(n),e.prepend(o.unknownOption),e.val(n)},r.$on("$destroy",function(){o.renderUnknownOption=m}),o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.readValue=function(){return o.removeUnknownOption(),e.val()},o.writeValue=function(t){o.hasOption(t)?(o.removeUnknownOption(),e.val(t),""===t&&o.emptyOption.prop("selected",!0)):null==t&&o.emptyOption?(o.removeUnknownOption(),e.val("")):o.renderUnknownOption(t)},o.addOption=function(e,t){de(e,'"option value"'),""===e&&(o.emptyOption=t);var n=a.get(e)||0;a.put(e,n+1),o.ngModelCtrl.$render(),wr(t)},o.removeOption=function(e){var t=a.get(e);t&&(1===t?(a.remove(e),""===e&&(o.emptyOption=n)):a.put(e,t-1))},o.hasOption=function(e){return!!a.get(e)},o.registerOption=function(e,t,n,r,i){if(r){var a;n.$observe("value",function(e){b(a)&&o.removeOption(a),a=e,o.addOption(e,t)})}else i?e.$watch(i,function(e,r){n.$set("value",e),r!==e&&o.removeOption(r),o.addOption(e,t)}):o.addOption(n.value,t);t.on("$destroy",function(){o.removeOption(n.value),o.ngModelCtrl.$render()})}}],qa=function(){function e(e,t,n,r){var i=r[1];if(i){var a=r[0];if(a.ngModelCtrl=i,t.on("change",function(){e.$apply(function(){i.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var e=[];return o(t.find("option"),function(t){t.selected&&e.push(t.value)}),e},a.writeValue=function(e){var n=new Ke(e);o(t.find("option"),function(e){e.selected=b(n.get(e.value))})};var s,u=NaN;e.$watch(function(){u!==i.$viewValue||L(s,i.$viewValue)||(s=H(i.$viewValue),i.$render()),u=i.$viewValue}),i.$isEmpty=function(e){return!e||0===e.length}}}}function t(e,t,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}return{restrict:"E",require:["select","?ngModel"],controller:Va,priority:1,link:{pre:e,post:t}}},Ra=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,n){if(b(n.value))var r=e(n.value,!0);else{var i=e(t.text(),!0);i||n.$set("value",t.text())}return function(e,t,n){var o="$selectController",a=t.parent(),s=a.data(o)||a.parent().data(o);s&&s.registerOption(e,t,n,r,i)}}}}],Fa=v({restrict:"E",terminal:!1}),Ia=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},_a=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,i,o){if(o){var a,s=i.ngPattern||i.pattern;i.$observe("pattern",function(e){if(S(e)&&e.length>0&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",s,e,Z(t));
a=e||n,o.$validate()}),o.$validators.pattern=function(e,t){return o.$isEmpty(t)||y(a)||a.test(t)}}}}},Ha=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){var t=d(e);i=isNaN(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(e,t){return 0>i||r.$isEmpty(t)||t.length<=i}}}}},La=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=d(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};return e.angular.bootstrap?void console.log("WARNING: Tried to load angular more than once."):(le(),be(_r),_r.module("ngLocale",[],["$provide",function(e){function t(e){e+="";var t=e.indexOf(".");return-1==t?0:e.length-t-1}function r(e,r){var i=r;n===i&&(i=Math.min(t(e),3));var o=Math.pow(10,i),a=(e*o|0)%o;return{v:i,f:a}}var i={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",pluralCat:function(e,t){var n=0|e,o=r(e,t);return 1==n&&0==o.v?i.ONE:i.OTHER}})}]),void jr(t).ready(function(){oe(t,ae)}))}(window,document),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),function(e,t,n){function r(e){return function(){var t,n=arguments[0];for(t="["+(e?e+":":"")+n+"] http://errors.angularjs.org/1.4.9/"+(e?e+"/":"")+n,n=1;n<arguments.length;n++){t=t+(1==n?"?":"&")+"p"+(n-1)+"=";var r,i=encodeURIComponent;r=arguments[n],r="function"==typeof r?r.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof r?"undefined":"string"!=typeof r?JSON.stringify(r):r,t+=i(r)}return Error(t)}}function i(e){if(null==e||T(e))return!1;if(ir(e)||w(e)||Ln&&e instanceof Ln)return!0;var t="length"in Object(e)&&e.length;return S(t)&&(t>=0&&(t-1 in e||e instanceof Array)||"function"==typeof e.item)}function o(e,t,n){var r,a;if(e)if(C(e))for(r in e)"prototype"==r||"length"==r||"name"==r||e.hasOwnProperty&&!e.hasOwnProperty(r)||t.call(n,e[r],r,e);else if(ir(e)||i(e)){var s="object"!=typeof e;for(r=0,a=e.length;a>r;r++)(s||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==o)e.forEach(t,n,e);else if(x(e))for(r in e)t.call(n,e[r],r,e);else if("function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else for(r in e)Gn.call(e,r)&&t.call(n,e[r],r,e);return e}function a(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function s(e){return function(t,n){e(n,t)}}function u(){return++nr}function c(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;o>i;++i){var a=t[i];if(b(a)||C(a))for(var s=Object.keys(a),u=0,l=s.length;l>u;u++){var f=s[u],p=a[f];n&&b(p)?E(p)?e[f]=new Date(p.valueOf()):k(p)?e[f]=new RegExp(p):p.nodeName?e[f]=p.cloneNode(!0):j(p)?e[f]=p.clone():(b(e[f])||(e[f]=ir(p)?[]:{}),c(e[f],[p],!0)):e[f]=p}}return r?e.$$hashKey=r:delete e.$$hashKey,e}function l(e){return c(e,Yn.call(arguments,1),!1)}function f(e){return c(e,Yn.call(arguments,1),!0)}function p(e){return parseInt(e,10)}function d(e,t){return l(Object.create(e),t)}function h(){}function m(e){return e}function $(e){return function(){return e}}function v(e){return C(e.toString)&&e.toString!==Zn}function g(e){return"undefined"==typeof e}function y(e){return"undefined"!=typeof e}function b(e){return null!==e&&"object"==typeof e}function x(e){return null!==e&&"object"==typeof e&&!Qn(e)}function w(e){return"string"==typeof e}function S(e){return"number"==typeof e}function E(e){return"[object Date]"===Zn.call(e)}function C(e){return"function"==typeof e}function k(e){return"[object RegExp]"===Zn.call(e)}function T(e){return e&&e.window===e}function A(e){return e&&e.$evalAsync&&e.$watch}function N(e){return"boolean"==typeof e}function O(e){return e&&S(e.length)&&or.test(Zn.call(e))}function j(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function M(e){var t={};e=e.split(",");var n;for(n=0;n<e.length;n++)t[e[n]]=!0;return t}function D(e){return Wn(e.nodeName||e[0]&&e[0].nodeName)}function P(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n}function V(e,t){function n(e,t){var n,i=t.$$hashKey;if(ir(e)){n=0;for(var o=e.length;o>n;n++)t.push(r(e[n]))}else if(x(e))for(n in e)t[n]=r(e[n]);else if(e&&"function"==typeof e.hasOwnProperty)for(n in e)e.hasOwnProperty(n)&&(t[n]=r(e[n]));else for(n in e)Gn.call(e,n)&&(t[n]=r(e[n]));return i?t.$$hashKey=i:delete t.$$hashKey,t}function r(e){if(!b(e))return e;var t=i.indexOf(e);if(-1!==t)return a[t];if(T(e)||A(e))throw er("cpws");var r,t=!1;return ir(e)?(r=[],t=!0):O(e)?r=new e.constructor(e):E(e)?r=new Date(e.getTime()):k(e)?(r=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]),r.lastIndex=e.lastIndex):C(e.cloneNode)?r=e.cloneNode(!0):(r=Object.create(Qn(e)),t=!0),i.push(e),a.push(r),t?n(e,r):r}var i=[],a=[];if(t){if(O(t))throw er("cpta");if(e===t)throw er("cpi");return ir(t)?t.length=0:o(t,function(e,n){"$$hashKey"!==n&&delete t[n]}),i.push(e),a.push(t),n(e,t)}return r(e)}function q(e,t){if(ir(e)){t=t||[];for(var n=0,r=e.length;r>n;n++)t[n]=e[n]}else if(b(e))for(n in t=t||{},e)"$"===n.charAt(0)&&"$"===n.charAt(1)||(t[n]=e[n]);return t||e}function R(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var n,r=typeof e;if(r==typeof t&&"object"==r){if(!ir(e)){if(E(e))return E(t)?R(e.getTime(),t.getTime()):!1;if(k(e))return k(t)?e.toString()==t.toString():!1;if(A(e)||A(t)||T(e)||T(t)||ir(t)||E(t)||k(t))return!1;r=ce();for(n in e)if("$"!==n.charAt(0)&&!C(e[n])){if(!R(e[n],t[n]))return!1;r[n]=!0}for(n in t)if(!(n in r)&&"$"!==n.charAt(0)&&y(t[n])&&!C(t[n]))return!1;return!0}if(!ir(t))return!1;if((r=e.length)==t.length){for(n=0;r>n;n++)if(!R(e[n],t[n]))return!1;return!0}}return!1}function F(e,t,n){return e.concat(Yn.call(t,n))}function I(e,t){var n=2<arguments.length?Yn.call(arguments,2):[];return!C(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,F(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function _(e,r){var i=r;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?i=n:T(r)?i="$WINDOW":r&&t===r?i="$DOCUMENT":A(r)&&(i="$SCOPE"),i}function H(e,t){return"undefined"==typeof e?n:(S(t)||(t=t?2:null),JSON.stringify(e,_,t))}function L(e){return w(e)?JSON.parse(e):e}function U(e,t){var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function B(e,t,n){n=n?-1:1;var r=U(t,e.getTimezoneOffset());return t=e,e=n*(r-e.getTimezoneOffset()),t=new Date(t.getTime()),t.setMinutes(t.getMinutes()+e),t}function z(e){e=Ln(e).clone();try{e.empty()}catch(t){}var n=Ln("<div>").append(e).html();try{return e[0].nodeType===dr?Wn(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Wn(t)})}catch(r){return Wn(n)}}function W(e){try{return decodeURIComponent(e)}catch(t){}}function G(e){var t={};return o((e||"").split("&"),function(e){var n,r,i;e&&(r=e=e.replace(/\+/g,"%20"),n=e.indexOf("="),-1!==n&&(r=e.substring(0,n),i=e.substring(n+1)),r=W(r),y(r)&&(i=y(i)?W(i):!0,Gn.call(t,r)?ir(t[r])?t[r].push(i):t[r]=[t[r],i]:t[r]=i))}),t}function J(e){var t=[];return o(e,function(e,n){ir(e)?o(e,function(e){t.push(X(n,!0)+(!0===e?"":"="+X(e,!0)))}):t.push(X(n,!0)+(!0===e?"":"="+X(e,!0)))}),t.length?t.join("&"):""}function Y(e){return X(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function X(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function K(e,t){var n,r,i=lr.length;for(r=0;i>r;++r)if(n=lr[r]+t,w(n=e.getAttribute(n)))return n;return null}function Z(e,t){var n,r,i={};o(lr,function(t){t+="app",!n&&e.hasAttribute&&e.hasAttribute(t)&&(n=e,r=e.getAttribute(t))}),o(lr,function(t){t+="app";var i;!n&&(i=e.querySelector("["+t.replace(":","\\:")+"]"))&&(n=i,r=i.getAttribute(t))}),n&&(i.strictDi=null!==K(n,"strict-di"),t(n,r?[r]:[],i))}function Q(n,r,i){b(i)||(i={}),i=l({strictDi:!1},i);var a=function(){if(n=Ln(n),n.injector()){var e=n[0]===t?"document":z(n);throw er("btstrpd",e.replace(/</,"&lt;").replace(/>/,"&gt;"))}return r=r||[],r.unshift(["$provide",function(e){e.value("$rootElement",n)}]),i.debugInfoEnabled&&r.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),r.unshift("ng"),e=Ie(r,i.strictDi),e.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),e},s=/^NG_ENABLE_DEBUG_INFO!/,u=/^NG_DEFER_BOOTSTRAP!/;return e&&s.test(e.name)&&(i.debugInfoEnabled=!0,e.name=e.name.replace(s,"")),e&&!u.test(e.name)?a():(e.name=e.name.replace(u,""),tr.resumeBootstrap=function(e){return o(e,function(e){r.push(e)}),a()},void(C(tr.resumeDeferredBootstrap)&&tr.resumeDeferredBootstrap()))}function ee(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function te(e){if(e=tr.element(e).injector(),!e)throw er("test");return e.get("$$testability")}function ne(e,t){return t=t||"_",e.replace(fr,function(e,n){return(n?t:"")+e.toLowerCase()})}function re(){var t;if(!pr){var r=cr();(Un=g(r)?e.jQuery:r?e[r]:n)&&Un.fn.on?(Ln=Un,l(Un.fn,{scope:Tr.scope,isolateScope:Tr.isolateScope,controller:Tr.controller,injector:Tr.injector,inheritedData:Tr.inheritedData}),t=Un.cleanData,Un.cleanData=function(e){var n;if(rr)rr=!1;else for(var r,i=0;null!=(r=e[i]);i++)(n=Un._data(r,"events"))&&n.$destroy&&Un(r).triggerHandler("$destroy");t(e)}):Ln=me,tr.element=Ln,pr=!0}}function ie(e,t,n){if(!e)throw er("areq",t||"?",n||"required");return e}function oe(e,t,n){return n&&ir(e)&&(e=e[e.length-1]),ie(C(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function ae(e,t){if("hasOwnProperty"===e)throw er("badname",t)}function se(e,t,n){if(!t)return e;t=t.split(".");for(var r,i=e,o=t.length,a=0;o>a;a++)r=t[a],e&&(e=(i=e)[r]);return!n&&C(e)?I(i,e):e}function ue(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=Ln(Yn.call(e,0,i))),t.push(n));return t||e}function ce(){return Object.create(null)}function le(e){function t(e,t,n){return e[t]||(e[t]=n())}var n=r("$injector"),i=r("ng");return e=t(e,"angular",Object),e.$$minErr=e.$$minErr||r,t(e,"module",function(){var e={};return function(r,o,a){if("hasOwnProperty"===r)throw i("badname","module");return o&&e.hasOwnProperty(r)&&(e[r]=null),t(e,r,function(){function e(e,t,n,r){return r||(r=i),function(){return r[n||"push"]([e,t,arguments]),l}}function t(e,t){return function(n,o){return o&&C(o)&&(o.$$moduleName=r),i.push([e,t,arguments]),l}}if(!o)throw n("nomod",r);var i=[],s=[],u=[],c=e("$injector","invoke","push",s),l={_invokeQueue:i,_configBlocks:s,_runBlocks:u,requires:o,name:r,provider:t("$provide","provider"),factory:t("$provide","factory"),service:t("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:t("$provide","decorator"),animation:t("$animateProvider","register"),filter:t("$filterProvider","register"),controller:t("$controllerProvider","register"),directive:t("$compileProvider","directive"),config:c,run:function(e){return u.push(e),this}};return a&&c(a),l})}})}function fe(t){l(t,{bootstrap:Q,copy:V,extend:l,merge:f,equals:R,element:Ln,forEach:o,injector:Ie,noop:h,bind:I,toJson:H,fromJson:L,identity:m,isUndefined:g,isDefined:y,isString:w,isFunction:C,isObject:b,isNumber:S,isElement:j,isArray:ir,version:hr,isDate:E,lowercase:Wn,uppercase:Jn,callbacks:{counter:0},getTestability:te,$$minErr:r,$$csp:ur,reloadWithDebugInfo:ee}),(Bn=le(e))("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:Yt}),e.provider("$compile",Je).directive({a:Ni,input:zi,textarea:zi,form:Di,script:Po,select:Ro,style:Io,option:Fo,ngBind:Ji,ngBindHtml:Xi,ngBindTemplate:Yi,ngClass:Zi,ngClassEven:eo,ngClassOdd:Qi,ngCloak:to,ngController:no,ngForm:Pi,ngHide:Ao,ngIf:oo,ngInclude:ao,ngInit:uo,ngNonBindable:xo,ngPluralize:Co,ngRepeat:ko,ngShow:To,ngStyle:No,ngSwitch:Oo,ngSwitchWhen:jo,ngSwitchDefault:Mo,ngOptions:Eo,ngTransclude:Do,ngModel:go,ngList:co,ngChange:Ki,pattern:Ho,ngPattern:Ho,required:_o,ngRequired:_o,minlength:Uo,ngMinlength:Uo,maxlength:Lo,ngMaxlength:Lo,ngValue:Gi,ngModelOptions:bo}).directive({ngInclude:so}).directive(Oi).directive(ro),e.provider({$anchorScroll:_e,$animate:_r,$animateCss:Ur,$$animateJs:Fr,$$animateQueue:Ir,$$AnimateRunner:Lr,$$animateAsyncRun:Hr,$browser:ze,$cacheFactory:We,$controller:Ze,$document:Qe,$exceptionHandler:et,$filter:ln,$$forceReflow:Jr,$interpolate:pt,$interval:dt,$http:ut,$httpParamSerializer:nt,$httpParamSerializerJQLike:rt,$httpBackend:lt,$xhrFactory:ct,$location:Ct,$log:kt,$parse:Ut,$rootScope:Jt,$q:Bt,$$q:zt,$sce:Qt,$sceDelegate:Zt,$sniffer:en,$templateCache:Ge,$templateRequest:tn,$$testability:nn,$timeout:rn,$window:sn,$$rAF:Gt,$$jqLite:Ve,$$HashMap:jr,$$cookieReader:cn})}])}function pe(e){return e.replace(vr,function(e,t,n,r){return r?n.toUpperCase():n}).replace(gr,"Moz$1")}function de(e){return e=e.nodeType,1===e||!e||9===e}function he(e,t){var n,r,i=t.createDocumentFragment(),a=[];if(wr.test(e)){for(n=n||i.appendChild(t.createElement("div")),r=(Sr.exec(e)||["",""])[1].toLowerCase(),r=Cr[r]||Cr._default,n.innerHTML=r[1]+e.replace(Er,"<$1></$2>")+r[2],r=r[0];r--;)n=n.lastChild;a=F(a,n.childNodes),n=i.firstChild,n.textContent=""}else a.push(t.createTextNode(e));return i.textContent="",i.innerHTML="",o(a,function(e){i.appendChild(e)}),i}function me(e){if(e instanceof me)return e;var n;if(w(e)&&(e=ar(e),n=!0),!(this instanceof me)){if(n&&"<"!=e.charAt(0))throw br("nosel");return new me(e)}if(n){n=t;var r;e=(r=xr.exec(e))?[n.createElement(r[1])]:(r=he(e,n))?r.childNodes:[]}Ce(this,e)}function $e(e){return e.cloneNode(!0)}function ve(e,t){if(t||ye(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,i=n.length;i>r;r++)ye(n[r])}function ge(e,t,n,r){if(y(r))throw br("offargs");var i=(r=be(e))&&r.events,a=r&&r.handle;if(a)if(t){var s=function(t){var r=i[t];y(n)&&P(r||[],n),y(n)&&r&&0<r.length||(e.removeEventListener(t,a,!1),delete i[t])};o(t.split(" "),function(e){s(e),yr[e]&&s(yr[e])})}else for(t in i)"$destroy"!==t&&e.removeEventListener(t,a,!1),delete i[t]}function ye(e,t){var r=e.ng339,i=r&&mr[r];i&&(t?delete i.data[t]:(i.handle&&(i.events.$destroy&&i.handle({},"$destroy"),ge(e)),delete mr[r],e.ng339=n))}function be(e,t){var r=e.ng339,r=r&&mr[r];return t&&!r&&(e.ng339=r=++$r,r=mr[r]={events:{},data:{},handle:n}),r}function xe(e,t,n){if(de(e)){var r=y(n),i=!r&&t&&!b(t),o=!t;if(e=(e=be(e,!i))&&e.data,r)e[t]=n;else{if(o)return e;if(i)return e&&e[t];l(e,t)}}}function we(e,t){return e.getAttribute?-1<(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" "):!1}function Se(e,t){t&&e.setAttribute&&o(t.split(" "),function(t){e.setAttribute("class",ar((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+ar(t)+" "," ")))})}function Ee(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(t.split(" "),function(e){e=ar(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",ar(n))}}function Ce(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;n>r;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function ke(e,t){return Te(e,"$"+(t||"ngController")+"Controller")}function Te(e,t,n){for(9==e.nodeType&&(e=e.documentElement),t=ir(t)?t:[t];e;){for(var r=0,i=t.length;i>r;r++)if(y(n=Ln.data(e,t[r])))return n;e=e.parentNode||11===e.nodeType&&e.host}}function Ae(e){for(ve(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Ne(e,t){t||ve(e);var n=e.parentNode;n&&n.removeChild(e)}function Oe(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):Ln(n).on("load",t)}function je(e,t){var n=Ar[t.toLowerCase()];return n&&Nr[D(e)]&&n}function Me(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(g(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return!0===n.immediatePropagationStopped};var s=i.specialHandlerWrapper||De;o>1&&(i=q(i));for(var u=0;o>u;u++)n.isImmediatePropagationStopped()||s(e,n,i[u])}};return n.elem=e,n}function De(e,t,n){n.call(e,t)}function Pe(e,t,n){var r=t.relatedTarget;r&&(r===e||kr.call(e,r))||n.call(e,t)}function Ve(){this.$get=function(){return l(me,{hasClass:function(e,t){return e.attr&&(e=e[0]),we(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Ee(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),Se(e,t)}})}}function qe(e,t){var n=e&&e.$$hashKey;return n?("function"==typeof n&&(n=e.$$hashKey()),n):(n=typeof e,n="function"==n||"object"==n&&null!==e?e.$$hashKey=n+":"+(t||u)():n+":"+e)}function Re(e,t){if(t){var n=0;this.nextUid=function(){return++n}}o(e,this.put,this)}function Fe(e){return(e=e.toString().replace(Vr,"").match(Mr))?"function("+(e[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Ie(e,t){function r(e){return function(t,n){return b(t)?void o(t,s(e)):e(t,n)}}function i(e,t){if(ae(e,"service"),(C(t)||ir(t))&&(t=m.instantiate(t)),!t.$get)throw qr("pget",e);return h[e+"Provider"]=t}function a(e,t){return function(){var n=y.invoke(t,this);if(g(n))throw qr("undef",e);return n}}function u(e,t,n){return i(e,{$get:!1!==n?a(e,t):t})}function c(e){ie(g(e)||ir(e),"modulesToLoad","not an array");var t,n=[];return o(e,function(e){function r(e){var t,n;for(t=0,n=e.length;n>t;t++){var r=e[t],i=m.get(r[0]);i[r[1]].apply(i,r[2])}}if(!d.get(e)){d.put(e,!0);try{w(e)?(t=Bn(e),n=n.concat(c(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):C(e)?n.push(m.invoke(e)):ir(e)?n.push(m.invoke(e)):oe(e,"module")}catch(i){throw ir(e)&&(e=e[e.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),qr("modulerr",e,i.stack||i.message||i)}}}),n}function l(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===f)throw qr("cdep",t+" <- "+p.join(" <- "));return e[t]}try{return p.unshift(t),e[t]=f,e[t]=n(t,r)}catch(i){throw e[t]===f&&delete e[t],i}finally{p.shift()}}function i(e,n,i,o){"string"==typeof i&&(o=i,i=null);var a,s,u,c=[],l=Ie.$$annotate(e,t,o);for(s=0,a=l.length;a>s;s++){if(u=l[s],"string"!=typeof u)throw qr("itkn",u);c.push(i&&i.hasOwnProperty(u)?i[u]:r(u,o))}return ir(e)&&(e=e[a]),e.apply(n,c)}return{invoke:i,instantiate:function(e,t,n){var r=Object.create((ir(e)?e[e.length-1]:e).prototype||null);return e=i(e,r,t,n),b(e)||C(e)?e:r},get:r,annotate:Ie.$$annotate,has:function(t){return h.hasOwnProperty(t+"Provider")||e.hasOwnProperty(t)}}}t=!0===t;var f={},p=[],d=new Re([],!0),h={$provide:{provider:r(i),factory:r(u),service:r(function(e,t){return u(e,["$injector",function(e){return e.instantiate(t)}])}),value:r(function(e,t){return u(e,$(t),!1)}),constant:r(function(e,t){ae(e,"constant"),h[e]=t,v[e]=t}),decorator:function(e,t){var n=m.get(e+"Provider"),r=n.$get;n.$get=function(){var e=y.invoke(r,n);return y.invoke(t,null,{$delegate:e})}}}},m=h.$injector=l(h,function(e,t){throw tr.isString(t)&&p.push(t),qr("unpr",p.join(" <- "))}),v={},y=v.$injector=l(v,function(e,t){var r=m.get(e+"Provider",t);return y.invoke(r.$get,r,n,e)});return o(c(e),function(e){e&&y.invoke(e)}),y}function _e(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){return"a"===D(e)?(t=e,!0):void 0}),t}function o(e){if(e){e.scrollIntoView();var n;n=a.yOffset,C(n)?n=n():j(n)?(n=n[0],n="fixed"!==t.getComputedStyle(n).position?0:n.getBoundingClientRect().bottom):S(n)||(n=0),n&&(e=e.getBoundingClientRect().top,t.scrollBy(0,e-n))}else t.scrollTo(0,0)}function a(e){e=w(e)?e:n.hash();var t;e?(t=s.getElementById(e))?o(t):(t=i(s.getElementsByName(e)))?o(t):"top"===e&&o(null):o(null)}var s=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){e===t&&""===e||Oe(function(){r.$evalAsync(a)})}),a}]}function He(e,t){return e||t?e?t?(ir(e)&&(e=e.join(" ")),ir(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function Le(e){w(e)&&(e=e.split(" "));var t=ce();return o(e,function(e){e.length&&(t[e]=!0)}),t}function Ue(e){return b(e)?e:{}}function Be(e,t,n,r){function i(e){try{e.apply(null,Yn.call(arguments,1))}finally{if($--,0===$)for(;v.length;)try{v.pop()()}catch(t){n.error(t)}}}function a(){S=null,s(),u()}function s(){e:{try{y=f.state;break e}catch(e){}y=void 0}y=g(y)?null:y,R(y,k)&&(y=k),k=y}function u(){x===c.url()&&b===y||(x=c.url(),b=y,o(E,function(e){e(c.url(),y)}))}var c=this,l=e.location,f=e.history,p=e.setTimeout,d=e.clearTimeout,m={};c.isMock=!1;var $=0,v=[];c.$$completeOutstandingRequest=i,c.$$incOutstandingRequestCount=function(){$++},c.notifyWhenNoOutstandingRequests=function(e){0===$?e():v.push(e)};var y,b,x=l.href,w=t.find("base"),S=null;s(),b=y,c.url=function(t,n,i){if(g(i)&&(i=null),l!==e.location&&(l=e.location),f!==e.history&&(f=e.history),t){var o=b===i;if(x===t&&(!r.history||o))return c;var a=x&&gt(x)===gt(t);return x=t,b=i,!r.history||a&&o?(a&&!S||(S=t),n?l.replace(t):a?(n=l,i=t.indexOf("#"),i=-1===i?"":t.substr(i),n.hash=i):l.href=t,l.href!==t&&(S=t)):(f[n?"replaceState":"pushState"](i,"",t),s(),b=y),c}return S||l.href.replace(/%27/g,"'")},c.state=function(){return y};var E=[],C=!1,k=null;c.onUrlChange=function(t){return C||(r.history&&Ln(e).on("popstate",a),Ln(e).on("hashchange",a),C=!0),E.push(t),t},c.$$applicationDestroyed=function(){Ln(e).off("hashchange popstate",a)},c.$$checkUrlChange=u,c.baseHref=function(){var e=w.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""},c.defer=function(e,t){var n;return $++,n=p(function(){delete m[n],i(e)},t||0),m[n]=!0,n},c.defer.cancel=function(e){return m[e]?(delete m[e],d(e),i(h),!0):!1}}function ze(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new Be(e,r,t,n)}]}function We(){this.$get=function(){function e(e,n){function i(e){e!=p&&(d?d==e&&(d=e.n):d=e,o(e.n,e.p),o(e,p),p=e,p.n=null)}function o(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in t)throw r("$cacheFactory")("iid",e);var a=0,s=l({},n,{id:e}),u=ce(),c=n&&n.capacity||Number.MAX_VALUE,f=ce(),p=null,d=null;return t[e]={put:function(e,t){if(!g(t)){if(c<Number.MAX_VALUE){var n=f[e]||(f[e]={key:e});i(n)}return e in u||a++,u[e]=t,a>c&&this.remove(d.key),t}},get:function(e){if(c<Number.MAX_VALUE){var t=f[e];if(!t)return;i(t)}return u[e]},remove:function(e){if(c<Number.MAX_VALUE){var t=f[e];if(!t)return;t==p&&(p=t.p),t==d&&(d=t.n),o(t.n,t.p),delete f[e]}e in u&&(delete u[e],a--)},removeAll:function(){u=ce(),a=0,f=ce(),p=d=null},destroy:function(){f=s=u=null,delete t[e]},info:function(){return l({},s,{size:a})}}}var t={};return e.info=function(){var e={};return o(t,function(t,n){e[n]=t.info()}),e},e.get=function(e){return t[e]},e}}function Ge(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function Je(e,r){function i(e,t,n){var r=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,i={};return o(e,function(e,o){var a=e.match(r);if(!a)throw Br("iscp",t,o,e,n?"controller bindings definition":"isolate scope definition");i[o]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||o}}),i}function a(e){var t=e.charAt(0);if(!t||t!==Wn(t))throw Br("baddir",e);if(e!==e.trim())throw Br("baddir",e)}var u={},c=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,f=/(([\w\-]+)(?:\:([^;]+))?;?)/,p=M("ngSrc,ngSrcset,src,srcset"),v=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,x=/^(on[a-z]+|formaction)$/;this.directive=function E(t,n){return ae(t,"directive"),w(t)?(a(t),ie(n,"directiveFactory"),u.hasOwnProperty(t)||(u[t]=[],e.factory(t+"Directive",["$injector","$exceptionHandler",function(e,n){var r=[];return o(u[t],function(o,a){try{var s=e.invoke(o);C(s)?s={compile:$(s)}:!s.compile&&s.link&&(s.compile=$(s.link)),s.priority=s.priority||0,s.index=a,s.name=s.name||t,s.require=s.require||s.controller&&s.name,s.restrict=s.restrict||"EA";var u=s,c=s,l=s.name,f={isolateScope:null,bindToController:null};if(b(c.scope)&&(!0===c.bindToController?(f.bindToController=i(c.scope,l,!0),f.isolateScope={}):f.isolateScope=i(c.scope,l,!1)),b(c.bindToController)&&(f.bindToController=i(c.bindToController,l,!0)),b(f.bindToController)){var p=c.controller,d=c.controllerAs;if(!p)throw Br("noctrl",l);var h;e:if(d&&w(d))h=d;else{if(w(p)){var m=Gr.exec(p);if(m){h=m[3];break e}}h=void 0}if(!h)throw Br("noident",l)}var v=u.$$bindings=f;b(v.isolateScope)&&(s.$$isolateBindings=v.isolateScope),s.$$moduleName=o.$$moduleName,r.push(s)}catch(g){n(g)}}),r}])),u[t].push(n)):o(t,s(E)),this},this.aHrefSanitizationWhitelist=function(e){return y(e)?(r.aHrefSanitizationWhitelist(e),this):r.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return y(e)?(r.imgSrcSanitizationWhitelist(e),this):r.imgSrcSanitizationWhitelist()};var S=!0;this.debugInfoEnabled=function(e){return y(e)?(S=e,this):S},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(e,r,i,a,s,$,y,E,k,T){function N(e,t){try{e.addClass(t)}catch(n){}}function O(e,t,n,r,i){e instanceof Ln||(e=Ln(e)),o(e,function(t,n){t.nodeType==dr&&t.nodeValue.match(/\S+/)&&(e[n]=Ln(t).wrap("<span></span>").parent()[0])});var a=j(e,t,e,n,r,i);O.$$addScopeClass(e);var s=null;return function(t,n,r){ie(t,"scope"),i&&i.needsNewScope&&(t=t.$parent.$new()),r=r||{};var o=r.parentBoundTranscludeFn,u=r.transcludeControllers;if(r=r.futureParentElement,o&&o.$$boundTransclude&&(o=o.$$boundTransclude),s||(s=(r=r&&r[0])&&"foreignobject"!==D(r)&&r.toString().match(/SVG/)?"svg":"html"),r="html"!==s?Ln(Y(s,Ln("<div>").append(e).html())):n?Tr.clone.call(e):e,u)for(var c in u)r.data("$"+c+"Controller",u[c].instance);return O.$$addScopeInfo(r,t),n&&n(r,t),a&&a(t,r,r,o),r}}function j(e,t,r,i,o,a){function s(e,r,i,o){var a,s,u,c,l,f,h;if(p)for(h=Array(r.length),c=0;c<d.length;c+=3)a=d[c],h[a]=r[a];else h=r;for(c=0,l=d.length;l>c;)s=h[d[c++]],r=d[c++],a=d[c++],r?(r.scope?(u=e.$new(),O.$$addScopeInfo(Ln(s),u)):u=e,f=r.transcludeOnThisElement?M(e,r.transclude,o):!r.templateOnThisElement&&o?o:!o&&t?M(e,t):null,r(a,u,s,i,f)):a&&a(e,s.childNodes,n,o)}for(var u,c,l,f,p,d=[],h=0;h<e.length;h++)u=new re,c=V(e[h],[],u,0===h?i:n,o),(a=c.length?I(c,e[h],u,t,r,null,[],[],a):null)&&a.scope&&O.$$addScopeClass(u.$$element),u=a&&a.terminal||!(l=e[h].childNodes)||!l.length?null:j(l,a?(a.transcludeOnThisElement||!a.templateOnThisElement)&&a.transclude:t),(a||u)&&(d.push(h,a,u),f=!0,p=p||a),a=null;return f?s:null}function M(e,t,n){return function(r,i,o,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}}function V(e,t,n,r,i){var o,a=n.$attr;switch(e.nodeType){case 1:H(t,Ye(D(e)),"E",r,i);for(var s,u,l,p=e.attributes,d=0,h=p&&p.length;h>d;d++){var m=!1,$=!1;s=p[d],o=s.name,u=ar(s.value),s=Ye(o),(l=ue.test(s))&&(o=o.replace(zr,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()})),(s=s.match(le))&&L(s[1])&&(m=o,$=o.substr(0,o.length-5)+"end",o=o.substr(0,o.length-6)),s=Ye(o.toLowerCase()),a[s]=o,!l&&n.hasOwnProperty(s)||(n[s]=u,je(e,s)&&(n[s]=!0)),K(e,t,u,s,l),H(t,s,"A",r,i,m,$)}if(e=e.className,b(e)&&(e=e.animVal),w(e)&&""!==e)for(;o=f.exec(e);)s=Ye(o[2]),H(t,s,"C",r,i)&&(n[s]=ar(o[3])),e=e.substr(o.index+o[0].length);break;case dr:if(11===Hn)for(;e.parentNode&&e.nextSibling&&e.nextSibling.nodeType===dr;)e.nodeValue+=e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);J(t,e.nodeValue);break;case 8:try{(o=c.exec(e.nodeValue))&&(s=Ye(o[1]),H(t,s,"M",r,i)&&(n[s]=ar(o[2])))}catch(v){}}return t.sort(W),t}function q(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw Br("uterdir",t,n);1==e.nodeType&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0)}else r.push(e);return Ln(r)}function F(e,t,n){return function(r,i,o,a,s){return i=q(i[0],t,n),e(r,i,o,a,s)}}function I(e,r,o,a,s,u,c,l,f){function p(e,t,n,r){e&&(n&&(e=F(e,n,r)),e.require=g.require,e.directiveName=y,(N===g||g.$$isolateScope)&&(e=Q(e,{isolateScope:!0})),c.push(e)),t&&(n&&(t=F(t,n,r)),t.require=g.require,t.directiveName=y,(N===g||g.$$isolateScope)&&(t=Q(t,{isolateScope:!0})),l.push(t))}function d(e,t,n,r){var i;if(w(t)){var o=t.match(v);t=t.substring(o[0].length);var a=o[1]||o[3],o="?"===o[2];if("^^"===a?n=n.parent():i=(i=r&&r[t])&&i.instance,i||(r="$"+t+"Controller",i=a?n.inheritedData(r):n.data(r)),!i&&!o)throw Br("ctreq",t,e)}else if(ir(t))for(i=[],a=0,o=t.length;o>a;a++)i[a]=d(e,t[a],n,r);return i||null}function h(e,t,n,r,i,o){var a,s=ce();for(a in r){var u=r[a],c={$scope:u===N||u.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},l=u.controller;"@"==l&&(l=t[u.name]),c=$(l,c,!0,u.controllerAs),s[u.name]=c,R||e.data("$"+u.name+"Controller",c.instance)}return s}function m(e,t,i,a,s){function u(e,t,r){var i;return A(e)||(r=t,t=e,e=n),R&&(i=$),r||(r=R?g.parent():g),s(e,t,i,r,E)}var f,p,m,$,v,g,y;r===i?(a=o,g=o.$$element):(g=Ln(i),a=new re(g,o)),m=t,N?p=t.$new(!0):k&&(m=t.$parent),s&&(v=u,v.$$boundTransclude=s),T&&($=h(g,a,v,T,p,t)),N&&(O.$$addScopeInfo(g,p,!0,!(j&&(j===N||j===N.$$originalDirective))),O.$$addScopeClass(g,!0),p.$$isolateBindings=N.$$isolateBindings,(y=te(t,a,p,p.$$isolateBindings,N))&&p.$on("$destroy",y));for(var b in $){y=T[b];var x=$[b],w=y.$$bindings.bindToController;x.identifier&&w&&(f=te(m,a,x.instance,w,y));var S=x();S!==x.instance&&(x.instance=S,g.data("$"+y.name+"Controller",S),f&&f(),f=te(m,a,x.instance,w,y))}for(L=0,W=c.length;W>L;L++)f=c[L],ee(f,f.isolateScope?p:t,g,a,f.require&&d(f.directiveName,f.require,g,$),v);var E=t;for(N&&(N.template||null===N.templateUrl)&&(E=p),e&&e(E,i.childNodes,n,s),L=l.length-1;L>=0;L--)f=l[L],ee(f,f.isolateScope?p:t,g,a,f.require&&d(f.directiveName,f.require,g,$),v)}f=f||{};for(var g,y,x,S,E=-Number.MAX_VALUE,k=f.newScopeDirective,T=f.controllerDirectives,N=f.newIsolateScopeDirective,j=f.templateDirective,M=f.nonTlbTranscludeDirective,D=!1,P=!1,R=f.hasElementTranscludeDirective,I=o.$$element=Ln(r),H=a,L=0,W=e.length;W>L;L++){g=e[L];var J=g.$$start,X=g.$$end;if(J&&(I=q(r,J,X)),x=n,E>g.priority)break;if((x=g.scope)&&(g.templateUrl||(b(x)?(G("new/isolated scope",N||k,g,I),N=g):G("new/isolated scope",N,g,I)),k=k||g),y=g.name,!g.templateUrl&&g.controller&&(x=g.controller,T=T||ce(),G("'"+y+"' controller",T[y],g,I),T[y]=g),(x=g.transclude)&&(D=!0,g.$$tlb||(G("transclusion",M,g,I),M=g),"element"==x?(R=!0,E=g.priority,x=I,I=o.$$element=Ln(t.createComment(" "+y+": "+o[y]+" ")),r=I[0],Z(s,Yn.call(x,0),r),H=O(x,a,E,u&&u.name,{nonTlbTranscludeDirective:M})):(x=Ln($e(r)).contents(),I.empty(),
H=O(x,a,n,n,{needsNewScope:g.$$isolateScope||g.$$newScope}))),g.template)if(P=!0,G("template",j,g,I),j=g,x=C(g.template)?g.template(I,o):g.template,x=se(x),g.replace){if(u=g,x=wr.test(x)?Ke(Y(g.templateNamespace,ar(x))):[],r=x[0],1!=x.length||1!==r.nodeType)throw Br("tplrt",y,"");Z(s,I,r),x={$attr:{}};var K=V(r,[],x),ne=e.splice(L+1,e.length-(L+1));(N||k)&&_(K,N,k),e=e.concat(K).concat(ne),U(o,x),W=e.length}else I.html(x);if(g.templateUrl)P=!0,G("template",j,g,I),j=g,g.replace&&(u=g),m=B(e.splice(L,e.length-L),I,o,s,D&&H,c,l,{controllerDirectives:T,newScopeDirective:k!==g&&k,newIsolateScopeDirective:N,templateDirective:j,nonTlbTranscludeDirective:M}),W=e.length;else if(g.compile)try{S=g.compile(I,o,H),C(S)?p(null,S,J,X):S&&p(S.pre,S.post,J,X)}catch(ie){i(ie,z(I))}g.terminal&&(m.terminal=!0,E=Math.max(E,g.priority))}return m.scope=k&&!0===k.scope,m.transcludeOnThisElement=D,m.templateOnThisElement=P,m.transclude=H,f.hasElementTranscludeDirective=R,m}function _(e,t,n){for(var r=0,i=e.length;i>r;r++)e[r]=d(e[r],{$$isolateScope:t,$$newScope:n})}function H(t,n,r,o,a,s,c){if(n===a)return null;if(a=null,u.hasOwnProperty(n)){var l;n=e.get(n+"Directive");for(var f=0,p=n.length;p>f;f++)try{l=n[f],(g(o)||o>l.priority)&&-1!=l.restrict.indexOf(r)&&(s&&(l=d(l,{$$start:s,$$end:c})),t.push(l),a=l)}catch(h){i(h)}}return a}function L(t){if(u.hasOwnProperty(t))for(var n=e.get(t+"Directive"),r=0,i=n.length;i>r;r++)if(t=n[r],t.multiElement)return!0;return!1}function U(e,t){var n=t.$attr,r=e.$attr,i=e.$$element;o(e,function(r,i){"$"!=i.charAt(0)&&(t[i]&&t[i]!==r&&(r+=("style"===i?";":" ")+t[i]),e.$set(i,r,!0,n[i]))}),o(t,function(t,o){"class"==o?(N(i,t),e["class"]=(e["class"]?e["class"]+" ":"")+t):"style"==o?(i.attr("style",i.attr("style")+";"+t),e.style=(e.style?e.style+";":"")+t):"$"==o.charAt(0)||e.hasOwnProperty(o)||(e[o]=t,r[o]=n[o])})}function B(e,t,n,r,i,s,u,c){var l,f,p=[],h=t[0],m=e.shift(),$=d(m,{templateUrl:null,transclude:null,replace:null,$$originalDirective:m}),v=C(m.templateUrl)?m.templateUrl(t,n):m.templateUrl,g=m.templateNamespace;return t.empty(),a(v).then(function(a){var d,y;if(a=se(a),m.replace){if(a=wr.test(a)?Ke(Y(g,ar(a))):[],d=a[0],1!=a.length||1!==d.nodeType)throw Br("tplrt",m.name,v);a={$attr:{}},Z(r,t,d);var x=V(d,[],a);b(m.scope)&&_(x,!0),e=x.concat(e),U(n,a)}else d=h,t.html(a);for(e.unshift($),l=I(e,d,n,i,t,m,s,u,c),o(r,function(e,n){e==d&&(r[n]=t[0])}),f=j(t[0].childNodes,i);p.length;){a=p.shift(),y=p.shift();var w=p.shift(),S=p.shift(),x=t[0];if(!a.$$destroyed){if(y!==h){var E=y.className;c.hasElementTranscludeDirective&&m.replace||(x=$e(d)),Z(w,Ln(y),x),N(Ln(x),E)}y=l.transcludeOnThisElement?M(a,l.transclude,S):S,l(f,a,x,r,y)}}p=null}),function(e,t,n,r,i){e=i,t.$$destroyed||(p?p.push(t,n,r,e):(l.transcludeOnThisElement&&(e=M(t,l.transclude,i)),l(f,t,n,r,e)))}}function W(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function G(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw Br("multidir",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,z(r))}function J(e,t){var n=r(t,!0);n&&e.push({priority:0,compile:function(e){e=e.parent();var t=!!e.length;return t&&O.$$addBindingClass(e),function(e,r){var i=r.parent();t||O.$$addBindingClass(i),O.$$addBindingInfo(i,n.expressions),e.$watch(n,function(e){r[0].nodeValue=e})}}})}function Y(e,n){switch(e=Wn(e||"html")){case"svg":case"math":var r=t.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function X(e,t){if("srcdoc"==t)return E.HTML;var n=D(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?E.RESOURCE_URL:void 0}function K(e,t,n,i,o){var a=X(e,i);o=p[i]||o;var s=r(n,!0,a,o);if(s){if("multiple"===i&&"select"===D(e))throw Br("selmulti",z(e));t.push({priority:100,compile:function(){return{pre:function(e,t,u){if(t=u.$$observers||(u.$$observers=ce()),x.test(i))throw Br("nodomevents");var c=u[i];c!==n&&(s=c&&r(c,!0,a,o),n=c),s&&(u[i]=s(e),(t[i]||(t[i]=[])).$$inter=!0,(u.$$observers&&u.$$observers[i].$$scope||e).$watch(s,function(e,t){"class"===i&&e!=t?u.$updateClass(e,t):u.$set(i,e)}))}}}})}}function Z(e,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(e)for(i=0,o=e.length;o>i;i++)if(e[i]==a){e[i++]=r,o=i+s-1;for(var c=e.length;c>i;i++,o++)c>o?e[i]=e[o]:delete e[i];e.length-=s-1,e.context===a&&(e.context=r);break}for(u&&u.replaceChild(r,a),e=t.createDocumentFragment(),e.appendChild(a),Ln.hasData(a)&&(Ln.data(r,Ln.data(a)),Un?(rr=!0,Un.cleanData([a])):delete Ln.cache[a[Ln.expando]]),a=1,s=n.length;s>a;a++)u=n[a],Ln(u).remove(),e.appendChild(u),delete n[a];n[0]=r,n.length=1}function Q(e,t){return l(function(){return e.apply(null,arguments)},e,t)}function ee(e,t,n,r,o,a){try{e(t,n,r,o,a)}catch(s){i(s,z(n))}}function te(e,t,n,i,a){var u=[];return o(i,function(i,o){var c,l,f,p,d=i.attrName,m=i.optional;switch(i.mode){case"@":m||Gn.call(t,d)||(n[o]=t[d]=void 0),t.$observe(d,function(e){w(e)&&(n[o]=e)}),t.$$observers[d].$$scope=e,w(t[d])&&(n[o]=r(t[d])(e));break;case"=":if(!Gn.call(t,d)){if(m)break;t[d]=void 0}if(m&&!t[d])break;l=s(t[d]),p=l.literal?R:function(e,t){return e===t||e!==e&&t!==t},f=l.assign||function(){throw c=n[o]=l(e),Br("nonassign",t[d],a.name)},c=n[o]=l(e),m=function(t){return p(t,n[o])||(p(t,c)?f(e,t=n[o]):n[o]=t),c=t},m.$stateful=!0,m=i.collection?e.$watchCollection(t[d],m):e.$watch(s(t[d],m),null,l.literal),u.push(m);break;case"&":if(l=t.hasOwnProperty(d)?s(t[d]):h,l===h&&m)break;n[o]=function(t){return l(e,t)}}}),u.length&&function(){for(var e=0,t=u.length;t>e;++e)u[e]()}}var re=function(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e};re.prototype={$normalize:Ye,$addClass:function(e){e&&0<e.length&&k.addClass(this.$$element,e)},$removeClass:function(e){e&&0<e.length&&k.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=Xe(e,t);n&&n.length&&k.addClass(this.$$element,n),(n=Xe(t,e))&&n.length&&k.removeClass(this.$$element,n)},$set:function(e,t,n,r){var a=je(this.$$element[0],e),s=Or[e],u=e;if(a?(this.$$element.prop(e,t),r=a):s&&(this[s]=t,u=s),this[e]=t,r?this.$attr[e]=r:(r=this.$attr[e])||(this.$attr[e]=r=ne(e,"-")),a=D(this.$$element),"a"===a&&"href"===e||"img"===a&&"src"===e)this[e]=t=T(t,"src"===e);else if("img"===a&&"srcset"===e){for(var a="",s=ar(t),c=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,c=/\s/.test(s)?c:/(,)/,s=s.split(c),c=Math.floor(s.length/2),l=0;c>l;l++)var f=2*l,a=a+T(ar(s[f]),!0),a=a+(" "+ar(s[f+1]));s=ar(s[2*l]).split(/\s/),a+=T(ar(s[0]),!0),2===s.length&&(a+=" "+ar(s[1])),this[e]=t=a}!1!==n&&(null===t||g(t)?this.$$element.removeAttr(r):this.$$element.attr(r,t)),(e=this.$$observers)&&o(e[u],function(e){try{e(t)}catch(n){i(n)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=ce()),i=r[e]||(r[e]=[]);return i.push(t),y.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||g(n[e])||t(n[e])}),function(){P(i,t)}}};var oe=r.startSymbol(),ae=r.endSymbol(),se="{{"==oe||"}}"==ae?m:function(e){return e.replace(/\{\{/g,oe).replace(/}}/g,ae)},ue=/^ngAttr[A-Z]/,le=/^(.+)Start$/;return O.$$addBindingInfo=S?function(e,t){var n=e.data("$binding")||[];ir(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:h,O.$$addBindingClass=S?function(e){N(e,"ng-binding")}:h,O.$$addScopeInfo=S?function(e,t,n,r){e.data(n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope",t)}:h,O.$$addScopeClass=S?function(e,t){N(e,t?"ng-isolate-scope":"ng-scope")}:h,O}]}function Ye(e){return pe(e.replace(zr,""))}function Xe(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/),o=0;e:for(;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue e;n+=(0<n.length?" ":"")+a}return n}function Ke(e){e=Ln(e);var t=e.length;if(1>=t)return e;for(;t--;)8===e[t].nodeType&&Xn.call(e,t,1);return e}function Ze(){var e={},t=!1;this.register=function(t,n){ae(t,"controller"),b(t)?l(e,t):e[t]=n},this.allowGlobals=function(){t=!0},this.$get=["$injector","$window",function(i,o){function a(e,t,n,i){if(!e||!b(e.$scope))throw r("$controller")("noscp",i,t);e.$scope[t]=n}return function(r,s,u,c){var f,p,d;if(u=!0===u,c&&w(c)&&(d=c),w(r)){if(c=r.match(Gr),!c)throw Wr("ctrlfmt",r);p=c[1],d=d||c[3],r=e.hasOwnProperty(p)?e[p]:se(s.$scope,p,!0)||(t?se(o,p,!0):n),oe(r,p,!0)}return u?(u=(ir(r)?r[r.length-1]:r).prototype,f=Object.create(u||null),d&&a(s,d,f,p||r.name),l(function(){var e=i.invoke(r,f,s,p);return e!==f&&(b(e)||C(e))&&(f=e,d&&a(s,d,f,p||r.name)),f},{instance:f,identifier:d})):(f=i.instantiate(r,s,p),d&&a(s,d,f,p||r.name),f)}}]}function Qe(){this.$get=["$window",function(e){return Ln(e.document)}]}function et(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function tt(e){return b(e)?E(e)?e.toISOString():H(e):e}function nt(){this.$get=function(){return function(e){if(!e)return"";var t=[];return a(e,function(e,n){null===e||g(e)||(ir(e)?o(e,function(e,r){t.push(X(n)+"="+X(tt(e)))}):t.push(X(n)+"="+X(tt(e))))}),t.join("&")}}}function rt(){this.$get=function(){return function(e){function t(e,r,i){null===e||g(e)||(ir(e)?o(e,function(e,n){t(e,r+"["+(b(e)?n:"")+"]")}):b(e)&&!E(e)?a(e,function(e,n){t(e,r+(i?"":"[")+n+(i?"":"]"))}):n.push(X(r)+"="+X(tt(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function it(e,t){if(w(e)){var n=e.replace(Qr,"").trim();if(n){var r=t("Content-Type");(r=r&&0===r.indexOf(Yr))||(r=(r=n.match(Kr))&&Zr[r[0]].test(n)),r&&(e=L(n))}}return e}function ot(e){var t,n=ce();return w(e)?o(e.split("\n"),function(e){t=e.indexOf(":");var r=Wn(ar(e.substr(0,t)));e=ar(e.substr(t+1)),r&&(n[r]=n[r]?n[r]+", "+e:e)}):b(e)&&o(e,function(e,t){var r=Wn(t),i=ar(e);r&&(n[r]=n[r]?n[r]+", "+i:i)}),n}function at(e){var t;return function(n){return t||(t=ot(e)),n?(n=t[Wn(n)],void 0===n&&(n=null),n):t}}function st(e,t,n,r){return C(r)?r(e,t,n):(o(r,function(r){e=r(e,t,n)}),e)}function ut(){var e=this.defaults={transformResponse:[it],transformRequest:[function(e){return b(e)&&"[object File]"!==Zn.call(e)&&"[object Blob]"!==Zn.call(e)&&"[object FormData]"!==Zn.call(e)?H(e):e}],headers:{common:{Accept:"application/json, text/plain, */*"},post:q(Xr),put:q(Xr),patch:q(Xr)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},t=!1;this.useApplyAsync=function(e){return y(e)?(t=!!e,this):t};var i=!0;this.useLegacyPromiseExtensions=function(e){return y(e)?(i=!!e,this):i};var a=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(s,u,c,f,p,d){function h(t){function a(e){var t=l({},e);return t.data=st(e.data,e.headers,e.status,u.transformResponse),e=e.status,e>=200&&300>e?t:p.reject(t)}function s(e,t){var n,r={};return o(e,function(e,i){C(e)?(n=e(t),null!=n&&(r[i]=n)):r[i]=e}),r}if(!tr.isObject(t))throw r("$http")("badreq",t);if(!w(t.url))throw r("$http")("badreq",t.url);var u=l({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer},t);u.headers=function(t){var n,r,i,o=e.headers,a=l({},t.headers),o=l({},o.common,o[Wn(t.method)]);e:for(n in o){r=Wn(n);for(i in a)if(Wn(i)===r)continue e;a[n]=o[n]}return s(a,q(t))}(t),u.method=Jn(u.method),u.paramSerializer=w(u.paramSerializer)?d.get(u.paramSerializer):u.paramSerializer;var c=[function(t){var r=t.headers,i=st(t.data,at(r),n,t.transformRequest);return g(i)&&o(r,function(e,t){"content-type"===Wn(t)&&delete r[t]}),g(t.withCredentials)&&!g(e.withCredentials)&&(t.withCredentials=e.withCredentials),m(t,i).then(a,a)},n],f=p.when(u);for(o(x,function(e){(e.request||e.requestError)&&c.unshift(e.request,e.requestError),(e.response||e.responseError)&&c.push(e.response,e.responseError)});c.length;){t=c.shift();var h=c.shift(),f=f.then(t,h)}return i?(f.success=function(e){return oe(e,"fn"),f.then(function(t){e(t.data,t.status,t.headers,u)}),f},f.error=function(e){return oe(e,"fn"),f.then(null,function(t){e(t.data,t.status,t.headers,u)}),f}):(f.success=ti("success"),f.error=ti("error")),f}function m(r,i){function o(e,n,r,i){function o(){a(n,e,r,i)}d&&(e>=200&&300>e?d.put(E,[e,n,ot(r),i]):d.remove(E)),t?f.$applyAsync(o):(o(),f.$$phase||f.$apply())}function a(e,t,n,i){t=t>=-1?t:0,(t>=200&&300>t?x.resolve:x.reject)({data:e,status:t,headers:at(n),config:r,statusText:i})}function c(e){a(e.data,e.status,q(e.headers()),e.statusText)}function l(){var e=h.pendingRequests.indexOf(r);-1!==e&&h.pendingRequests.splice(e,1)}var d,m,x=p.defer(),w=x.promise,S=r.headers,E=$(r.url,r.paramSerializer(r.params));return h.pendingRequests.push(r),w.then(l,l),!r.cache&&!e.cache||!1===r.cache||"GET"!==r.method&&"JSONP"!==r.method||(d=b(r.cache)?r.cache:b(e.cache)?e.cache:v),d&&(m=d.get(E),y(m)?m&&C(m.then)?m.then(c,c):ir(m)?a(m[1],m[0],q(m[2]),m[3]):a(m,200,{},"OK"):d.put(E,w)),g(m)&&((m=an(r.url)?u()[r.xsrfCookieName||e.xsrfCookieName]:n)&&(S[r.xsrfHeaderName||e.xsrfHeaderName]=m),s(r.method,E,i,o,S,r.timeout,r.withCredentials,r.responseType)),w}function $(e,t){return 0<t.length&&(e+=(-1==e.indexOf("?")?"?":"&")+t),e}var v=c("$http");e.paramSerializer=w(e.paramSerializer)?d.get(e.paramSerializer):e.paramSerializer;var x=[];return o(a,function(e){x.unshift(w(e)?d.get(e):d.invoke(e))}),h.pendingRequests=[],function(e){o(arguments,function(e){h[e]=function(t,n){return h(l({},n||{},{method:e,url:t}))}})}("get","delete","head","jsonp"),function(e){o(arguments,function(e){h[e]=function(t,n,r){return h(l({},r||{},{method:e,url:t,data:n}))}})}("post","put","patch"),h.defaults=e,h}]}function ct(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function lt(){this.$get=["$browser","$window","$document","$xhrFactory",function(e,t,n,r){return ft(e,r,e.defer,t.angular.callbacks,n[0])}]}function ft(e,t,n,r,i){function a(e,t,n){var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=e,o.async=!0,a=function(e){o.removeEventListener("load",a,!1),o.removeEventListener("error",a,!1),i.body.removeChild(o),o=null;var s=-1,u="unknown";e&&("load"!==e.type||r[t].called||(e={type:"error"}),u=e.type,s="error"===e.type?404:200),n&&n(s,u)},o.addEventListener("load",a,!1),o.addEventListener("error",a,!1),i.body.appendChild(o),a}return function(i,s,u,c,l,f,p,d){function m(){b&&b(),x&&x.abort()}function $(t,r,i,o,a){y(S)&&n.cancel(S),b=x=null,t(r,i,o,a),e.$$completeOutstandingRequest(h)}if(e.$$incOutstandingRequestCount(),s=s||e.url(),"jsonp"==Wn(i)){var v="_"+(r.counter++).toString(36);r[v]=function(e){r[v].data=e,r[v].called=!0};var b=a(s.replace("JSON_CALLBACK","angular.callbacks."+v),v,function(e,t){$(c,e,r[v].data,"",t),r[v]=h})}else{var x=t(i,s);if(x.open(i,s,!0),o(l,function(e,t){y(e)&&x.setRequestHeader(t,e)}),x.onload=function(){var e=x.statusText||"",t="response"in x?x.response:x.responseText,n=1223===x.status?204:x.status;0===n&&(n=t?200:"file"==on(s).protocol?404:0),$(c,n,t,x.getAllResponseHeaders(),e)},i=function(){$(c,-1,null,null,"")},x.onerror=i,x.onabort=i,p&&(x.withCredentials=!0),d)try{x.responseType=d}catch(w){if("json"!==d)throw w}x.send(g(u)?null:u)}if(f>0)var S=n(m,f);else f&&C(f.then)&&f.then(m)}}function pt(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(n){return n.replace(f,e).replace(p,t)}function s(o,s,f,p){function d(e){try{var t=e;e=f?i.getTrusted(f,t):i.valueOf(t);var n;if(p&&!y(e))n=e;else if(null==e)n="";else{switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=H(e)}n=e}return n}catch(a){r(ni.interr(o,a))}}p=!!p;for(var h,m,$=0,v=[],b=[],x=o.length,w=[],S=[];x>$;){if(-1==(h=o.indexOf(e,$))||-1==(m=o.indexOf(t,h+u))){$!==x&&w.push(a(o.substring($)));break}$!==h&&w.push(a(o.substring($,h))),$=o.substring(h+u,m),v.push($),b.push(n($,d)),$=m+c,S.push(w.length),w.push("")}if(f&&1<w.length&&ni.throwNoconcat(o),!s||v.length){var E=function(e){for(var t=0,n=v.length;n>t;t++){if(p&&g(e[t]))return;w[S[t]]=e[t]}return w.join("")};return l(function(e){var t=0,n=v.length,i=Array(n);try{for(;n>t;t++)i[t]=b[t](e);return E(i)}catch(a){r(ni.interr(o,a))}},{exp:o,expressions:v,$$watchDelegate:function(e,t){var n;return e.$watchGroup(b,function(r,i){var o=E(r);C(t)&&t.call(this,o,r!==i?n:o,e),n=o})}})}}var u=e.length,c=t.length,f=new RegExp(e.replace(/./g,o),"g"),p=new RegExp(t.replace(/./g,o),"g");return s.startSymbol=function(){return e},s.endSymbol=function(){return t},s}]}function dt(){this.$get=["$rootScope","$window","$q","$$q",function(e,t,n,r){function i(i,a,s,u){var c=4<arguments.length,l=c?Yn.call(arguments,4):[],f=t.setInterval,p=t.clearInterval,d=0,h=y(u)&&!u,m=(h?r:n).defer(),$=m.promise;return s=y(s)?s:0,$.then(null,null,c?function(){i.apply(null,l)}:i),$.$$intervalId=f(function(){m.notify(d++),s>0&&d>=s&&(m.resolve(d),p($.$$intervalId),delete o[$.$$intervalId]),h||e.$apply()},a),o[$.$$intervalId]=m,$}var o={};return i.cancel=function(e){return e&&e.$$intervalId in o?(o[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete o[e.$$intervalId],!0):!1},i}]}function ht(e){e=e.split("/");for(var t=e.length;t--;)e[t]=Y(e[t]);return e.join("/")}function mt(e,t){var n=on(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=p(n.port)||ii[n.protocol]||null}function $t(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=on(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=G(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function vt(e,t){return 0===t.indexOf(e)?t.substr(e.length):void 0}function gt(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function yt(e){return e.replace(/(#.+)|#$/,"$1")}function bt(e,t,n){this.$$html5=!0,n=n||"",mt(e,this),this.$$parse=function(e){var n=vt(t,e);if(!w(n))throw oi("ipthprfx",e,t);$t(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=J(this.$$search),n=this.$$hash?"#"+Y(this.$$hash):"";this.$$url=ht(this.$$path)+(e?"?"+e:"")+n,this.$$absUrl=t+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return y(o=vt(e,r))?(a=o,a=y(o=vt(n,o))?t+(vt("/",o)||o):e+a):y(o=vt(t,r))?a=t+o:t==r+"/"&&(a=t),a&&this.$$parse(a),!!a}}function xt(e,t,n){mt(e,this),this.$$parse=function(r){var i,o=vt(e,r)||vt(t,r);g(o)||"#"!==o.charAt(0)?this.$$html5?i=o:(i="",g(o)&&(e=r,this.replace())):(i=vt(n,o),g(i)&&(i=o)),$t(i,this),r=this.$$path;var o=e,a=/^\/[A-Z]:(\/.*)/;0===i.indexOf(o)&&(i=i.replace(o,"")),a.exec(i)||(r=(i=a.exec(r))?i[1]:r),this.$$path=r,this.$$compose()},this.$$compose=function(){var t=J(this.$$search),r=this.$$hash?"#"+Y(this.$$hash):"";this.$$url=ht(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(t,n){return gt(e)==gt(t)?(this.$$parse(t),!0):!1}}function wt(e,t,n){this.$$html5=!0,xt.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e==gt(r)?o=r:(a=vt(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o},this.$$compose=function(){var t=J(this.$$search),r=this.$$hash?"#"+Y(this.$$hash):"";this.$$url=ht(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+n+this.$$url}}function St(e){return function(){return this[e]}}function Et(e,t){return function(n){return g(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function Ct(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return y(t)?(e=t,this):e},this.html5Mode=function(e){return N(e)?(t.enabled=e,this):b(e)?(N(e.enabled)&&(t.enabled=e.enabled),N(e.requireBase)&&(t.requireBase=e.requireBase),N(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(e,t,n){var i=c.url(),o=c.$$state;try{r.url(e,t,n),c.$$state=r.state()}catch(a){throw c.url(i),c.$$state=o,a}}function u(e,t){n.$broadcast("$locationChangeSuccess",c.absUrl(),e,c.$$state,t)}var c,l;l=r.baseHref();var f,p=r.url();if(t.enabled){if(!l&&t.requireBase)throw oi("nobase");f=p.substring(0,p.indexOf("/",p.indexOf("//")+2))+(l||"/"),l=i.history?bt:wt}else f=gt(p),l=xt;var d=f.substr(0,gt(f).lastIndexOf("/")+1);c=new l(f,d,"#"+e),c.$$parseLinkUrl(p,p),c.$$state=r.state();var h=/^\s*(javascript|mailto):/i;o.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var i=Ln(e.target);"a"!==D(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),u=i.attr("href")||i.attr("xlink:href");b(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=on(s.animVal).href),h.test(s)||!s||i.attr("target")||e.isDefaultPrevented()||!c.$$parseLinkUrl(s,u)||(e.preventDefault(),c.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),yt(c.absUrl())!=yt(p)&&r.url(c.absUrl(),!0);var m=!0;return r.onUrlChange(function(e,t){g(vt(d,e))?a.location.href=e:(n.$evalAsync(function(){var r,i=c.absUrl(),o=c.$$state;e=yt(e),c.$$parse(e),c.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,c.absUrl()===e&&(r?(c.$$parse(i),c.$$state=o,s(i,!1,o)):(m=!1,u(i,o)))}),n.$$phase||n.$digest())}),n.$watch(function(){var e=yt(r.url()),t=yt(c.absUrl()),o=r.state(),a=c.$$replace,l=e!==t||c.$$html5&&i.history&&o!==c.$$state;(m||l)&&(m=!1,n.$evalAsync(function(){var t=c.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,c.$$state,o).defaultPrevented;c.absUrl()===t&&(r?(c.$$parse(e),c.$$state=o):(l&&s(t,a,o===c.$$state?null:c.$$state),u(e,o)))})),c.$$replace=!1}),c}]}function kt(){var e=!0,t=this;this.debugEnabled=function(t){return y(t)?(e=t,this):e},this.$get=["$window",function(n){function r(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function i(e){var t=n.console||{},i=t[e]||t.log||h;e=!1;try{e=!!i.apply}catch(a){}return e?function(){var e=[];return o(arguments,function(t){e.push(r(t))}),i.apply(t,e)}:function(e,t){i(e,null==t?"":t)}}return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function Tt(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw si("isecfld",t);return e}function At(e,t){if(e+="",!w(e))throw si("iseccst",t);return e}function Nt(e,t){if(e){if(e.constructor===e)throw si("isecfn",t);if(e.window===e)throw si("isecwindow",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw si("isecdom",t);if(e===Object)throw si("isecobj",t)}return e}function Ot(e,t){if(e){if(e.constructor===e)throw si("isecfn",t);if(e===ui||e===ci||e===li)throw si("isecff",t)}}function jt(e,t){if(e&&(e===0..constructor||e===(!1).constructor||e==="".constructor||e==={}.constructor||e===[].constructor||e===Function.constructor))throw si("isecaf",t)}function Mt(e,t){return"undefined"!=typeof e?e:t}function Dt(e,t){return"undefined"==typeof e?t:"undefined"==typeof t?e:e+t}function Pt(e,t){var n,r;switch(e.type){case hi.Program:n=!0,o(e.body,function(e){Pt(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case hi.Literal:e.constant=!0,e.toWatch=[];break;case hi.UnaryExpression:Pt(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case hi.BinaryExpression:Pt(e.left,t),Pt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case hi.LogicalExpression:Pt(e.left,t),Pt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case hi.ConditionalExpression:Pt(e.test,t),Pt(e.alternate,t),Pt(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case hi.Identifier:e.constant=!1,e.toWatch=[e];break;case hi.MemberExpression:Pt(e.object,t),e.computed&&Pt(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case hi.CallExpression:n=e.filter?!t(e.callee.name).$stateful:!1,r=[],o(e.arguments,function(e){Pt(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=e.filter&&!t(e.callee.name).$stateful?r:[e];break;case hi.AssignmentExpression:Pt(e.left,t),Pt(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case hi.ArrayExpression:n=!0,r=[],o(e.elements,function(e){Pt(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=r;break;case hi.ObjectExpression:n=!0,r=[],o(e.properties,function(e){Pt(e.value,t),n=n&&e.value.constant,e.value.constant||r.push.apply(r,e.value.toWatch)}),e.constant=n,e.toWatch=r;break;case hi.ThisExpression:e.constant=!1,e.toWatch=[]}}function Vt(e){if(1==e.length){e=e[0].expression;var t=e.toWatch;return 1!==t.length?t:t[0]!==e?t:n}}function qt(e){return e.type===hi.Identifier||e.type===hi.MemberExpression}function Rt(e){return 1===e.body.length&&qt(e.body[0].expression)?{type:hi.AssignmentExpression,left:e.body[0].expression,right:{type:hi.NGValueParameter},operator:"="}:void 0}function Ft(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===hi.Literal||e.body[0].expression.type===hi.ArrayExpression||e.body[0].expression.type===hi.ObjectExpression)}function It(e,t){this.astBuilder=e,this.$filter=t}function _t(e,t){this.astBuilder=e,this.$filter=t}function Ht(e){return"constructor"==e}function Lt(e){return C(e.valueOf)?e.valueOf():$i.call(e)}function Ut(){var e=ce(),t=ce();this.$get=["$filter",function(r){function i(e,t){return null==e||null==t?e===t:"object"==typeof e&&(e=Lt(e),"object"==typeof e)?!1:e===t||e!==e&&t!==t}function a(e,t,r,o,a){var s,u=o.inputs;if(1===u.length){var c=i,u=u[0];return e.$watch(function(e){var t=u(e);return i(t,c)||(s=o(e,n,n,[t]),c=t&&Lt(t)),s},t,r,a)}for(var l=[],f=[],p=0,d=u.length;d>p;p++)l[p]=i,f[p]=null;return e.$watch(function(e){for(var t=!1,r=0,a=u.length;a>r;r++){var c=u[r](e);(t||(t=!i(c,l[r])))&&(f[r]=c,l[r]=c&&Lt(c))}return t&&(s=o(e,n,n,f)),s},t,r,a)}function s(e,t,n,r){var i,o;return i=e.$watch(function(e){return r(e)},function(e,n,r){o=e,C(t)&&t.apply(this,arguments),y(e)&&r.$$postDigest(function(){y(o)&&i()})},n)}function u(e,t,n,r){function i(e){var t=!0;return o(e,function(e){y(e)||(t=!1)}),t}var a,s;return a=e.$watch(function(e){return r(e)},function(e,n,r){s=e,C(t)&&t.call(this,e,n,r),i(e)&&r.$$postDigest(function(){i(s)&&a()})},n)}function c(e,t,n,r){var i;return i=e.$watch(function(e){return r(e)},function(e,n,r){C(t)&&t.apply(this,arguments),i()},n)}function l(e,t){if(!t)return e;var n=e.$$watchDelegate,r=!1,n=n!==u&&n!==s?function(n,i,o,a){return o=r&&a?a[0]:e(n,i,o,a),t(o,n,i)}:function(n,r,i,o){return i=e(n,r,i,o),n=t(i,n,r),y(i)?n:i};return e.$$watchDelegate&&e.$$watchDelegate!==a?n.$$watchDelegate=e.$$watchDelegate:t.$stateful||(n.$$watchDelegate=a,r=!e.inputs,n.inputs=e.inputs?e.inputs:[e]),n}var f=ur().noUnsafeEval,p={csp:f,expensiveChecks:!1},d={csp:f,expensiveChecks:!0};return function(n,i,o){var f,m,$;switch(typeof n){case"string":$=n=n.trim();var v=o?t:e;return f=v[$],f||(":"===n.charAt(0)&&":"===n.charAt(1)&&(m=!0,n=n.substring(2)),o=o?d:p,f=new di(o),f=new mi(f,r,o).parse(n),f.constant?f.$$watchDelegate=c:m?f.$$watchDelegate=f.literal?u:s:f.inputs&&(f.$$watchDelegate=a),v[$]=f),l(f,i);case"function":return l(n,i);default:return l(h,i)}}}]}function Bt(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return Wt(function(t){e.$evalAsync(t)},t)}]}function zt(){this.$get=["$browser","$exceptionHandler",function(e,t){return Wt(function(t){e.defer(t)},t)}]}function Wt(e,t){function i(e,t,n){function r(t){return function(n){i||(i=!0,t.call(e,n))}}var i=!1;return[r(t),r(n)]}function a(){this.$$state={status:0}}function s(e,t){return function(n){t.call(e,n)}}function u(r){!r.processScheduled&&r.pending&&(r.processScheduled=!0,e(function(){var e,i,o;o=r.pending,r.processScheduled=!1,r.pending=n;for(var a=0,s=o.length;s>a;++a){i=o[a][0],e=o[a][r.status];try{C(e)?i.resolve(e(r.value)):1===r.status?i.resolve(r.value):i.reject(r.value)}catch(u){i.reject(u),t(u)}}}))}function c(){this.promise=new a,this.resolve=s(this,this.resolve),this.reject=s(this,this.reject),this.notify=s(this,this.notify)}var f=r("$q",TypeError);l(a.prototype,{then:function(e,t,n){if(g(e)&&g(t)&&g(n))return this;var r=new c;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),0<this.$$state.status&&u(this.$$state),r.promise},"catch":function(e){return this.then(null,e)},"finally":function(e,t){return this.then(function(t){return d(t,!0,e)},function(t){return d(t,!1,e)},t)}}),l(c.prototype,{resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(f("qcycle",e)):this.$$resolve(e))},$$resolve:function(e){var n,r;r=i(this,this.$$resolve,this.$$reject);try{(b(e)||C(e))&&(n=e&&e.then),C(n)?(this.promise.$$state.status=-1,n.call(e,r[0],r[1],this.notify)):(this.promise.$$state.value=e,this.promise.$$state.status=1,u(this.promise.$$state))}catch(o){r[1](o),t(o)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,u(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;0>=this.promise.$$state.status&&r&&r.length&&e(function(){for(var e,i,o=0,a=r.length;a>o;o++){i=r[o][0],e=r[o][3];try{i.notify(C(e)?e(n):n)}catch(s){t(s)}}})}});var p=function(e,t){var n=new c;return t?n.resolve(e):n.reject(e),n.promise},d=function(e,t,n){var r=null;try{C(n)&&(r=n())}catch(i){return p(i,!1)}return r&&C(r.then)?r.then(function(){return p(e,t)},function(e){return p(e,!1)}):p(e,t)},h=function(e,t,n,r){var i=new c;return i.resolve(e),i.promise.then(t,n,r)},m=function $(e){if(!C(e))throw f("norslvr",e);if(!(this instanceof $))return new $(e);var t=new c;return e(function(e){t.resolve(e)},function(e){t.reject(e)}),t.promise};return m.defer=function(){return new c},m.reject=function(e){var t=new c;return t.reject(e),t.promise},m.when=h,m.resolve=h,m.all=function(e){var t=new c,n=0,r=ir(e)?[]:{};return o(e,function(e,i){n++,h(e).then(function(e){r.hasOwnProperty(i)||(r[i]=e,--n||t.resolve(r))},function(e){r.hasOwnProperty(i)||t.reject(e)})}),0===n&&t.resolve(r),t.promise},m}function Gt(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function Jt(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=++nr,this.$$ChildScope=null}return t.prototype=e,t}var t=10,n=r("$rootScope"),a=null,s=null;this.digestTtl=function(e){return arguments.length&&(t=e),t},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(r,u,c,l){function f(e){e.currentScope.$$destroyed=!0}function p(e){9===Hn&&(e.$$childHead&&p(e.$$childHead),e.$$nextSibling&&p(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}function d(){this.$id=++nr,this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function m(e){if(S.$$phase)throw n("inprog",S.$$phase);S.$$phase=e}function $(e,t){do e.$$watchersCount+=t;while(e=e.$parent)}function v(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function y(){}function x(){
for(;T.length;)try{T.shift()()}catch(e){u(e)}s=null}function w(){null===s&&(s=l.defer(function(){S.$apply(x)}))}d.prototype={constructor:d,$new:function(t,n){var r;return n=n||this,t?(r=new d,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!=this)&&r.$on("$destroy",f),r},$watch:function(e,t,n,r){var i=c(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,n,i,e);var o=this,s=o.$$watchers,u={fn:t,last:y,get:i,exp:r||e,eq:!!n};return a=null,C(t)||(u.fn=h),s||(s=o.$$watchers=[]),s.unshift(u),$(this,1),function(){0<=P(s,u)&&$(o,-1),a=null}},$watchGroup:function(e,t){function n(){u=!1,c?(c=!1,t(i,i,s)):t(i,r,s)}var r=Array(e.length),i=Array(e.length),a=[],s=this,u=!1,c=!0;if(!e.length){var l=!0;return s.$evalAsync(function(){l&&t(i,i,s)}),function(){l=!1}}return 1===e.length?this.$watch(e[0],function(e,n,o){i[0]=e,r[0]=n,t(i,e===n?i:r,o)}):(o(e,function(e,t){var o=s.$watch(e,function(e,o){i[t]=e,r[t]=o,u||(u=!0,s.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function n(e){r=e;var t,n,a,s;if(!g(r)){if(b(r))if(i(r))for(o!==p&&(o=p,m=o.length=0,l++),e=r.length,m!==e&&(l++,o.length=m=e),t=0;e>t;t++)s=o[t],a=r[t],n=s!==s&&a!==a,n||s===a||(l++,o[t]=a);else{o!==d&&(o=d={},m=0,l++),e=0;for(t in r)Gn.call(r,t)&&(e++,a=r[t],s=o[t],t in o?(n=s!==s&&a!==a,n||s===a||(l++,o[t]=a)):(m++,o[t]=a,l++));if(m>e)for(t in l++,o)Gn.call(r,t)||(m--,delete o[t])}else o!==r&&(o=r,l++);return l}}n.$stateful=!0;var r,o,a,s=this,u=1<t.length,l=0,f=c(e,n),p=[],d={},h=!0,m=0;return this.$watch(f,function(){if(h?(h=!1,t(r,r,s)):t(r,a,s),u)if(b(r))if(i(r)){a=Array(r.length);for(var e=0;e<r.length;e++)a[e]=r[e]}else for(e in a={},r)Gn.call(r,e)&&(a[e]=r[e]);else a=r})},$digest:function(){var e,r,i,o,c,f,p,d,h,$=t,v=[];m("$digest"),l.$$checkUrlChange(),this===S&&null!==s&&(l.defer.cancel(s),x()),a=null;do{for(f=!1,p=this;E.length;){try{h=E.shift(),h.scope.$eval(h.expression,h.locals)}catch(g){u(g)}a=null}e:do{if(o=p.$$watchers)for(c=o.length;c--;)try{if(e=o[c])if((r=e.get(p))===(i=e.last)||(e.eq?R(r,i):"number"==typeof r&&"number"==typeof i&&isNaN(r)&&isNaN(i))){if(e===a){f=!1;break e}}else f=!0,a=e,e.last=e.eq?V(r,null):r,e.fn(r,i===y?r:i,p),5>$&&(d=4-$,v[d]||(v[d]=[]),v[d].push({msg:C(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:r,oldVal:i}))}catch(b){u(b)}if(!(o=p.$$watchersCount&&p.$$childHead||p!==this&&p.$$nextSibling))for(;p!==this&&!(o=p.$$nextSibling);)p=p.$parent}while(p=o);if((f||E.length)&&!$--)throw S.$$phase=null,n("infdig",t,v)}while(f||E.length);for(S.$$phase=null;k.length;)try{k.shift()()}catch(w){u(w)}},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===S&&l.$$applicationDestroyed(),$(this,-this.$$watchersCount);for(var t in this.$$listenerCount)v(this,this.$$listenerCount[t],t);e&&e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=h,this.$on=this.$watch=this.$watchGroup=function(){return h},this.$$listeners={},this.$$nextSibling=null,p(this)}},$eval:function(e,t){return c(e)(this,t)},$evalAsync:function(e,t){S.$$phase||E.length||l.defer(function(){E.length&&S.$digest()}),E.push({scope:this,expression:e,locals:t})},$$postDigest:function(e){k.push(e)},$apply:function(e){try{m("$apply");try{return this.$eval(e)}finally{S.$$phase=null}}catch(t){u(t)}finally{try{S.$digest()}catch(n){throw u(n),n}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&T.push(t),w()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,v(i,1,e))}},$emit:function(e,t){var n,r,i,o=[],a=this,s=!1,c={name:e,targetScope:a,stopPropagation:function(){s=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},l=F([c],arguments,1);do{for(n=a.$$listeners[e]||o,c.currentScope=a,r=0,i=n.length;i>r;r++)if(n[r])try{n[r].apply(null,l)}catch(f){u(f)}else n.splice(r,1),r--,i--;if(s)return c.currentScope=null,c;a=a.$parent}while(a);return c.currentScope=null,c},$broadcast:function(e,t){var n=this,r=this,i={name:e,targetScope:this,preventDefault:function(){i.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[e])return i;for(var o,a,s=F([i],arguments,1);n=r;){for(i.currentScope=n,r=n.$$listeners[e]||[],o=0,a=r.length;a>o;o++)if(r[o])try{r[o].apply(null,s)}catch(c){u(c)}else r.splice(o,1),o--,a--;if(!(r=n.$$listenerCount[e]&&n.$$childHead||n!==this&&n.$$nextSibling))for(;n!==this&&!(r=n.$$nextSibling);)n=n.$parent}return i.currentScope=null,i}};var S=new d,E=S.$$asyncQueue=[],k=S.$$postDigestQueue=[],T=S.$$applyAsyncQueue=[];return S}]}function Yt(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return y(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return y(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=on(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function Xt(e){if("self"===e)return e;if(w(e)){if(-1<e.indexOf("***"))throw vi("iwcard",e);return e=sr(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(k(e))return new RegExp("^"+e.source+"$");throw vi("imatcher")}function Kt(e){var t=[];return y(e)&&o(e,function(e){t.push(Xt(e))}),t}function Zt(){this.SCE_CONTEXTS=gi;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=Kt(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=Kt(e)),t},this.$get=["$injector",function(n){function r(e,t){return"self"===e?an(t):!!e.exec(t.href)}function i(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}var o=function(e){throw vi("unsafe")};n.has("$sanitize")&&(o=n.get("$sanitize"));var a=i(),s={};return s[gi.HTML]=i(a),s[gi.CSS]=i(a),s[gi.URL]=i(a),s[gi.JS]=i(a),s[gi.RESOURCE_URL]=i(s[gi.URL]),{trustAs:function(e,t){var n=s.hasOwnProperty(e)?s[e]:null;if(!n)throw vi("icontext",e,t);if(null===t||g(t)||""===t)return t;if("string"!=typeof t)throw vi("itype",e);return new n(t)},getTrusted:function(n,i){if(null===i||g(i)||""===i)return i;var a=s.hasOwnProperty(n)?s[n]:null;if(a&&i instanceof a)return i.$$unwrapTrustedValue();if(n===gi.RESOURCE_URL){var u,c,a=on(i.toString()),l=!1;for(u=0,c=e.length;c>u;u++)if(r(e[u],a)){l=!0;break}if(l)for(u=0,c=t.length;c>u;u++)if(r(t[u],a)){l=!1;break}if(l)return i;throw vi("insecurl",i.toString())}if(n===gi.HTML)return o(i);throw vi("unsafe")},valueOf:function(e){return e instanceof a?e.$$unwrapTrustedValue():e}}}]}function Qt(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>Hn)throw vi("iequirks");var r=q(gi);r.isEnabled=function(){return e},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,e||(r.trustAs=r.getTrusted=function(e,t){return t},r.valueOf=m),r.parseAs=function(e,n){var i=t(n);return i.literal&&i.constant?i:t(n,function(t){return r.getTrusted(e,t)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(gi,function(e,t){var n=Wn(t);r[pe("parse_as_"+n)]=function(t){return i(e,t)},r[pe("get_trusted_"+n)]=function(t){return a(e,t)},r[pe("trust_as_"+n)]=function(t){return s(e,t)}}),r}]}function en(){this.$get=["$window","$document",function(e,t){var n,r={},i=p((/android (\d+)/.exec(Wn((e.navigator||{}).userAgent))||[])[1]),o=/Boxee/i.test((e.navigator||{}).userAgent),a=t[0]||{},s=/^(Moz|webkit|ms)(?=[A-Z])/,u=a.body&&a.body.style,c=!1,l=!1;if(u){for(var f in u)if(c=s.exec(f)){n=c[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in u&&"webkit"),c=!!("transition"in u||n+"Transition"in u),l=!!("animation"in u||n+"Animation"in u),!i||c&&l||(c=w(u.webkitTransition),l=w(u.webkitAnimation))}return{history:!(!e.history||!e.history.pushState||4>i||o),hasEvent:function(e){if("input"===e&&11>=Hn)return!1;if(g(r[e])){var t=a.createElement("div");r[e]="on"+e in t}return r[e]},csp:ur(),vendorPrefix:n,transitions:c,animations:l,android:i}}]}function tn(){this.$get=["$templateCache","$http","$q","$sce",function(e,t,n,r){function i(o,a){i.totalPendingRequests++,w(o)&&e.get(o)||(o=r.getTrustedResourceUrl(o));var s=t.defaults&&t.defaults.transformResponse;return ir(s)?s=s.filter(function(e){return e!==it}):s===it&&(s=null),t.get(o,{cache:e,transformResponse:s})["finally"](function(){i.totalPendingRequests--}).then(function(t){return e.put(o,t.data),t.data},function(e){if(!a)throw Br("tpload",o,e.status,e.statusText);return n.reject(e)})}return i.totalPendingRequests=0,i}]}function nn(){this.$get=["$rootScope","$browser","$location",function(e,t,n){return{findBindings:function(e,t,n){e=e.getElementsByClassName("ng-binding");var r=[];return o(e,function(e){var i=tr.element(e).data("$binding");i&&o(i,function(i){n?new RegExp("(^|\\s)"+sr(t)+"(\\s|\\||$)").test(i)&&r.push(e):-1!=i.indexOf(t)&&r.push(e)})}),r},findModels:function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=e.querySelectorAll("["+r[i]+"model"+(n?"=":"*=")+'"'+t+'"]');if(o.length)return o}},getLocation:function(){return n.url()},setLocation:function(t){t!==n.url()&&(n.url(t),e.$digest())},whenStable:function(e){t.notifyWhenNoOutstandingRequests(e)}}}]}function rn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,u){C(o)||(u=s,s=o,o=h);var c,l=Yn.call(arguments,3),f=y(u)&&!u,p=(f?r:n).defer(),d=p.promise;return c=t.defer(function(){try{p.resolve(o.apply(null,l))}catch(t){p.reject(t),i(t)}finally{delete a[d.$$timeoutId]}f||e.$apply()},s),d.$$timeoutId=c,a[c]=p,d}var a={};return o.cancel=function(e){return e&&e.$$timeoutId in a?(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId)):!1},o}]}function on(e){return Hn&&(yi.setAttribute("href",e),e=yi.href),yi.setAttribute("href",e),{href:yi.href,protocol:yi.protocol?yi.protocol.replace(/:$/,""):"",host:yi.host,search:yi.search?yi.search.replace(/^\?/,""):"",hash:yi.hash?yi.hash.replace(/^#/,""):"",hostname:yi.hostname,port:yi.port,pathname:"/"===yi.pathname.charAt(0)?yi.pathname:"/"+yi.pathname}}function an(e){return e=w(e)?on(e):e,e.protocol===bi.protocol&&e.host===bi.host}function sn(){this.$get=$(e)}function un(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var n=e[0]||{},r={},i="";return function(){var e,o,a,s,u;if(e=n.cookie||"",e!==i)for(i=e,e=i.split("; "),r={},a=0;a<e.length;a++)o=e[a],s=o.indexOf("="),s>0&&(u=t(o.substring(0,s)),g(r[u])&&(r[u]=t(o.substring(s+1))));return r}}function cn(){this.$get=un}function ln(e){function t(n,r){if(b(n)){var i={};return o(n,function(e,n){i[n]=t(n,e)}),i}return e.factory(n+"Filter",r)}this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+"Filter")}}],t("currency",mn),t("date",kn),t("filter",fn),t("json",Tn),t("limitTo",An),t("lowercase",Ti),t("number",$n),t("orderBy",Nn),t("uppercase",Ai)}function fn(){return function(e,t,n){if(!i(e)){if(null==e)return e;throw r("filter")("notarray",e)}var o;switch(hn(t)){case"function":break;case"boolean":case"null":case"number":case"string":o=!0;case"object":t=pn(t,n,o);break;default:return e}return Array.prototype.filter.call(e,t)}}function pn(e,t,n){var r=b(e)&&"$"in e;return!0===t?t=R:C(t)||(t=function(e,t){return g(e)?!1:null===e||null===t?e===t:b(t)||b(e)&&!v(e)?!1:(e=Wn(""+e),t=Wn(""+t),-1!==e.indexOf(t))}),function(i){return r&&!b(i)?dn(i,e.$,t,!1):dn(i,e,t,n)}}function dn(e,t,n,r,i){var o=hn(e),a=hn(t);if("string"===a&&"!"===t.charAt(0))return!dn(e,t.substring(1),n,r);if(ir(e))return e.some(function(e){return dn(e,t,n,r)});switch(o){case"object":var s;if(r){for(s in e)if("$"!==s.charAt(0)&&dn(e[s],t,n,!0))return!0;return i?!1:dn(e,t,n,!1)}if("object"===a){for(s in t)if(i=t[s],!C(i)&&!g(i)&&(o="$"===s,!dn(o?e:e[s],i,n,o,o)))return!1;return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function hn(e){return null===e?"null":typeof e}function mn(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return g(n)&&(n=t.CURRENCY_SYM),g(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:yn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function $n(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:yn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function vn(e){var t,n,r,i,o,a=0;for(-1<(n=e.indexOf(wi))&&(e=e.replace(wi,"")),0<(r=e.search(/e/i))?(0>n&&(n=r),n+=+e.slice(r+1),e=e.substring(0,r)):0>n&&(n=e.length),r=0;e.charAt(r)==Si;r++);if(r==(o=e.length))t=[0],n=1;else{for(o--;e.charAt(o)==Si;)o--;for(n-=r,t=[],i=0;o>=r;r++,i++)t[i]=+e.charAt(r)}return n>xi&&(t=t.splice(0,xi-1),a=n-1,n=1),{d:t,e:a,i:n}}function gn(e,t,n,r){var i=e.d,o=i.length-e.i;if(t=g(t)?Math.min(Math.max(n,o),r):+t,n=t+e.i,r=i[n],n>0)i.splice(n);else{e.i=1,i.length=n=t+1;for(var a=0;n>a;a++)i[a]=0}for(r>=5&&i[n-1]++;t>o;o++)i.push(0);(t=i.reduceRight(function(e,t,n,r){return t+=e,r[n]=t%10,Math.floor(t/10)},0))&&(i.unshift(t),e.i++)}function yn(e,t,n,r,i){if(!w(e)&&!S(e)||isNaN(e))return"";var o=!isFinite(e),a=!1,s=Math.abs(e)+"",u="";if(o)u="∞";else{for(a=vn(s),gn(a,i,t.minFrac,t.maxFrac),u=a.d,s=a.i,i=a.e,o=[],a=u.reduce(function(e,t){return e&&!t},!0);0>s;)u.unshift(0),s++;for(s>0?o=u.splice(s):(o=u,u=[0]),s=[],u.length>t.lgSize&&s.unshift(u.splice(-t.lgSize).join(""));u.length>t.gSize;)s.unshift(u.splice(-t.gSize).join(""));u.length&&s.unshift(u.join("")),u=s.join(n),o.length&&(u+=r+o.join("")),i&&(u+="e+"+i)}return 0>e&&!a?t.negPre+u+t.negSuf:t.posPre+u+t.posSuf}function bn(e,t,n){var r="";for(0>e&&(r="-",e=-e),e=""+e;e.length<t;)e=Si+e;return n&&(e=e.substr(e.length-t)),r+e}function xn(e,t,n,r){return n=n||0,function(i){return i=i["get"+e](),(n>0||i>-n)&&(i+=n),0===i&&-12==n&&(i=12),bn(i,t,r)}}function wn(e,t){return function(n,r){var i=n["get"+e](),o=Jn(t?"SHORT"+e:e);return r[o][i]}}function Sn(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function En(e){return function(t){var n=Sn(t.getFullYear());return t=+new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay()))-+n,t=1+Math.round(t/6048e5),bn(t,e)}}function Cn(e,t){return 0>=e.getFullYear()?t.ERAS[0]:t.ERAS[1]}function kn(e){function t(e){var t;if(t=e.match(n)){e=new Date(0);var r=0,i=0,o=t[8]?e.setUTCFullYear:e.setFullYear,a=t[8]?e.setUTCHours:e.setHours;t[9]&&(r=p(t[9]+t[10]),i=p(t[9]+t[11])),o.call(e,p(t[1]),p(t[2])-1,p(t[3])),r=p(t[4]||0)-r,i=p(t[5]||0)-i,o=p(t[6]||0),t=Math.round(1e3*parseFloat("0."+(t[7]||0))),a.call(e,r,i,o,t)}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,u="",c=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,w(n)&&(n=ki.test(n)?p(n):t(n)),S(n)&&(n=new Date(n)),!E(n)||!isFinite(n.getTime()))return n;for(;r;)(s=Ci.exec(r))?(c=F(c,s,1),r=c.pop()):(c.push(r),r=null);var l=n.getTimezoneOffset();return i&&(l=U(i,n.getTimezoneOffset()),n=B(n,i,!0)),o(c,function(t){a=Ei[t],u+=a?a(n,e.DATETIME_FORMATS,l):t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function Tn(){return function(e,t){return g(t)&&(t=2),H(e,t)}}function An(){return function(e,t,n){return t=1/0===Math.abs(Number(t))?Number(t):p(t),isNaN(t)?e:(S(e)&&(e=e.toString()),ir(e)||w(e)?(n=!n||isNaN(n)?0:p(n),n=0>n?Math.max(0,e.length+n):n,t>=0?e.slice(n,n+t):0===n?e.slice(t,e.length):e.slice(Math.max(0,n+t),n)):e)}}function Nn(e){function t(t,n){return n=n?-1:1,t.map(function(t){var r=1,i=m;if(C(t))i=t;else if(w(t)&&("+"!=t.charAt(0)&&"-"!=t.charAt(0)||(r="-"==t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(i=e(t),i.constant)))var o=i(),i=function(e){return e[o]};return{get:i,descending:r*n}})}function n(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}return function(e,r,o){if(!i(e))return e;ir(r)||(r=[r]),0===r.length&&(r=["+"]);var a=t(r,o);return a.push({get:function(){return{}},descending:o?-1:1}),e=Array.prototype.map.call(e,function(e,t){return{value:e,predicateValues:a.map(function(r){var i=r.get(e);return r=typeof i,null===i?(r="string",i="null"):"string"===r?i=i.toLowerCase():"object"===r&&("function"==typeof i.valueOf&&(i=i.valueOf(),n(i))||v(i)&&(i=i.toString(),n(i))||(i=t)),{value:i,type:r}})}}),e.sort(function(e,t){for(var n=0,r=0,i=a.length;i>r;++r){var n=e.predicateValues[r],o=t.predicateValues[r],s=0;if(n.type===o.type?n.value!==o.value&&(s=n.value<o.value?-1:1):s=n.type<o.type?-1:1,n=s*a[r].descending)break}return n}),e=e.map(function(e){return e.value})}}function On(e){return C(e)&&(e={link:e}),e.restrict=e.restrict||"AC",$(e)}function jn(e,t,r,i,a){var s=this,u=[];s.$error={},s.$$success={},s.$pending=n,s.$name=a(t.name||t.ngForm||"")(r),s.$dirty=!1,s.$pristine=!0,s.$valid=!0,s.$invalid=!1,s.$submitted=!1,s.$$parentForm=ji,s.$rollbackViewValue=function(){o(u,function(e){e.$rollbackViewValue()})},s.$commitViewValue=function(){o(u,function(e){e.$commitViewValue()})},s.$addControl=function(e){ae(e.$name,"input"),u.push(e),e.$name&&(s[e.$name]=e),e.$$parentForm=s},s.$$renameControl=function(e,t){var n=e.$name;s[n]===e&&delete s[n],s[t]=e,e.$name=t},s.$removeControl=function(e){e.$name&&s[e.$name]===e&&delete s[e.$name],o(s.$pending,function(t,n){s.$setValidity(n,null,e)}),o(s.$error,function(t,n){s.$setValidity(n,null,e)}),o(s.$$success,function(t,n){s.$setValidity(n,null,e)}),P(u,e),e.$$parentForm=ji},In({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];r?-1===r.indexOf(n)&&r.push(n):e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(P(r,n),0===r.length&&delete e[t])},$animate:i}),s.$setDirty=function(){i.removeClass(e,po),i.addClass(e,ho),s.$dirty=!0,s.$pristine=!1,s.$$parentForm.$setDirty()},s.$setPristine=function(){i.setClass(e,po,ho+" ng-submitted"),s.$dirty=!1,s.$pristine=!0,s.$submitted=!1,o(u,function(e){e.$setPristine()})},s.$setUntouched=function(){o(u,function(e){e.$setUntouched()})},s.$setSubmitted=function(){i.addClass(e,"ng-submitted"),s.$submitted=!0,s.$$parentForm.$setSubmitted()}}function Mn(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function Dn(e,t,n,r,i,o){var a=Wn(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(e){s=!0}),t.on("compositionend",function(){s=!1,u()})}var u=function(e){if(c&&(o.defer.cancel(c),c=null),!s){var i=t.val();e=e&&e.type,"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=ar(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,e)}};if(i.hasEvent("input"))t.on("input",u);else{var c,l=function(e,t,n){c||(c=o.defer(function(){c=null,t&&t.value===n||u(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||t>15&&19>t||t>=37&&40>=t||l(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",l)}t.on("change",u),r.$render=function(){var e=r.$isEmpty(r.$viewValue)?"":r.$viewValue;t.val()!==e&&t.val(e)}}function Pn(e,t){return function(n,r){var i,a;if(E(n))return n;if(w(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),Vi.test(n))return new Date(n);if(e.lastIndex=0,i=e.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function Vn(e,t,r,i){return function(o,a,s,u,c,l,f){function p(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function d(e){return y(e)&&!E(e)?r(e)||n:e}qn(o,a,s,u),Dn(o,a,s,u,c,l);var h,m=u&&u.$options&&u.$options.timezone;if(u.$$parserName=e,u.$parsers.push(function(e){return u.$isEmpty(e)?null:t.test(e)?(e=r(e,h),m&&(e=B(e,m)),e):n}),u.$formatters.push(function(e){if(e&&!E(e))throw $o("datefmt",e);return p(e)?((h=e)&&m&&(h=B(h,m,!0)),f("date")(e,i,m)):(h=null,"")}),y(s.min)||s.ngMin){var $;u.$validators.min=function(e){return!p(e)||g($)||r(e)>=$},s.$observe("min",function(e){$=d(e),u.$validate()})}if(y(s.max)||s.ngMax){var v;u.$validators.max=function(e){return!p(e)||g(v)||r(e)<=v},s.$observe("max",function(e){v=d(e),u.$validate()})}}}function qn(e,t,r,i){(i.$$hasNativeValidators=b(t[0].validity))&&i.$parsers.push(function(e){var r=t.prop("validity")||{};return r.badInput&&!r.typeMismatch?n:e})}function Rn(e,t,n,r,i){if(y(r)){if(e=e(r),!e.constant)throw $o("constexpr",n,r);return e(t)}return i}function Fn(e,t){return e="ngClass"+e,["$animate",function(n){function r(e,t){var n=[],r=0;e:for(;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i==t[o])continue e;n.push(i)}return n}function i(e){var t=[];return ir(e)?(o(e,function(e){t=t.concat(i(e))}),t):w(e)?e.split(" "):b(e)?(o(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t):e}return{restrict:"AC",link:function(a,s,u){function c(e,t){var n=s.data("$classCounts")||ce(),r=[];return o(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&r.push(e))}),s.data("$classCounts",n),r.join(" ")}function l(e){if(!0===t||a.$index%2===t){var o=i(e||[]);if(f){if(!R(e,f)){var l=i(f),p=r(o,l),o=r(l,o),p=c(p,1),o=c(o,-1);p&&p.length&&n.addClass(s,p),o&&o.length&&n.removeClass(s,o)}}else{var p=c(o,1);u.$addClass(p)}}f=q(e)}var f;a.$watch(u[e],l,!0),u.$observe("class",function(t){l(a.$eval(u[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var o=1&n;if(o!==(1&r)){var s=i(a.$eval(u[e]));o===t?(o=c(s,1),u.$addClass(o)):(o=c(s,-1),u.$removeClass(o))}})}}}]}function In(e){function t(e,t){t&&!a[e]?(c.addClass(o,e),a[e]=!0):!t&&a[e]&&(c.removeClass(o,e),a[e]=!1)}function r(e,n){e=e?"-"+ne(e,"-"):"",t(lo+e,!0===n),t(fo+e,!1===n)}var i=e.ctrl,o=e.$element,a={},s=e.set,u=e.unset,c=e.$animate;a[fo]=!(a[lo]=o.hasClass(lo)),i.$setValidity=function(e,o,a){g(o)?(i.$pending||(i.$pending={}),s(i.$pending,e,a)):(i.$pending&&u(i.$pending,e,a),_n(i.$pending)&&(i.$pending=n)),N(o)?o?(u(i.$error,e,a),s(i.$$success,e,a)):(s(i.$error,e,a),u(i.$$success,e,a)):(u(i.$error,e,a),u(i.$$success,e,a)),i.$pending?(t(mo,!0),i.$valid=i.$invalid=n,r("",null)):(t(mo,!1),i.$valid=_n(i.$error),i.$invalid=!i.$valid,r("",i.$valid)),o=i.$pending&&i.$pending[e]?n:i.$error[e]?!1:i.$$success[e]?!0:null,r(e,o),i.$$parentForm.$setValidity(e,o,i)}}function _n(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}var Hn,Ln,Un,Bn,zn=/^\/(.+)\/([a-z]*)$/,Wn=function(e){return w(e)?e.toLowerCase():e},Gn=Object.prototype.hasOwnProperty,Jn=function(e){return w(e)?e.toUpperCase():e},Yn=[].slice,Xn=[].splice,Kn=[].push,Zn=Object.prototype.toString,Qn=Object.getPrototypeOf,er=r("ng"),tr=e.angular||(e.angular={}),nr=0;Hn=t.documentMode,h.$inject=[],m.$inject=[];var rr,ir=Array.isArray,or=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,ar=function(e){return w(e)?e.trim():e},sr=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},ur=function(){if(!y(ur.rules)){var e=t.querySelector("[ng-csp]")||t.querySelector("[data-ng-csp]");if(e){var n=e.getAttribute("ng-csp")||e.getAttribute("data-ng-csp");ur.rules={noUnsafeEval:!n||-1!==n.indexOf("no-unsafe-eval"),noInlineStyle:!n||-1!==n.indexOf("no-inline-style")}}else{e=ur;try{new Function(""),n=!1}catch(r){n=!0}e.rules={noUnsafeEval:n,noInlineStyle:!1}}}return ur.rules},cr=function(){if(y(cr.name_))return cr.name_;var e,n,r,i,o=lr.length;for(n=0;o>n;++n)if(r=lr[n],e=t.querySelector("["+r.replace(":","\\:")+"jq]")){i=e.getAttribute(r+"jq");break}return cr.name_=i},lr=["ng-","data-ng-","ng:","x-ng-"],fr=/[A-Z]/g,pr=!1,dr=3,hr={full:"1.4.9",major:1,minor:4,dot:9,codeName:"implicit-superannuation"};me.expando="ng339";var mr=me.cache={},$r=1;me._data=function(e){return this.cache[e[this.expando]]||{}};var vr=/([\:\-\_]+(.))/g,gr=/^moz([A-Z])/,yr={mouseleave:"mouseout",mouseenter:"mouseover"},br=r("jqLite"),xr=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,wr=/<|&#?\w+;/,Sr=/<([\w:-]+)/,Er=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Cr={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Cr.optgroup=Cr.option,Cr.tbody=Cr.tfoot=Cr.colgroup=Cr.caption=Cr.thead,Cr.th=Cr.td;var kr=Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},Tr=me.prototype={ready:function(n){function r(){i||(i=!0,n())}var i=!1;"complete"===t.readyState?setTimeout(r):(this.on("DOMContentLoaded",r),me(e).on("load",r))},toString:function(){var e=[];return o(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return Ln(e>=0?this[e]:this[this.length+e])},length:0,push:Kn,sort:[].sort,splice:[].splice},Ar={};o("multiple selected checked disabled readOnly required open".split(" "),function(e){Ar[Wn(e)]=e});var Nr={};o("input select option textarea button form details".split(" "),function(e){Nr[e]=!0});var Or={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};o({data:xe,removeData:ye,hasData:function(e){for(var t in mr[e.ng339])return!0;return!1}},function(e,t){me[t]=e}),o({data:xe,inheritedData:Te,scope:function(e){return Ln.data(e,"$scope")||Te(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return Ln.data(e,"$isolateScope")||Ln.data(e,"$isolateScopeNoTemplate")},controller:ke,injector:function(e){return Te(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:we,css:function(e,t,n){return t=pe(t),y(n)?void(e.style[t]=n):e.style[t]},attr:function(e,t,r){var i=e.nodeType;if(i!==dr&&2!==i&&8!==i)if(i=Wn(t),Ar[i]){if(!y(r))return e[t]||(e.attributes.getNamedItem(t)||h).specified?i:n;r?(e[t]=!0,e.setAttribute(t,i)):(e[t]=!1,e.removeAttribute(i))}else if(y(r))e.setAttribute(t,r);else if(e.getAttribute)return e=e.getAttribute(t,2),null===e?n:e},prop:function(e,t,n){return y(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(g(t)){var n=e.nodeType;return 1===n||n===dr?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(g(t)){if(e.multiple&&"select"===D(e)){var n=[];return o(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return g(t)?e.innerHTML:(ve(e,!0),void(e.innerHTML=t))},empty:Ae},function(e,t){me.prototype[t]=function(t,n){var r,i,o=this.length;if(e!==Ae&&g(2==e.length&&e!==we&&e!==ke?t:n)){if(b(t)){for(r=0;o>r;r++)if(e===xe)e(this[r],t);else for(i in t)e(this[r],i,t[i]);return this}for(r=e.$dv,o=g(r)?Math.min(o,1):o,i=0;o>i;i++){var a=e(this[i],t,n);r=r?r+a:a}return r}for(r=0;o>r;r++)e(this[r],t,n);return this}}),o({removeData:ye,on:function(e,t,r,i){if(y(i))throw br("onargs");if(de(e)){i=be(e,!0);var o=i.events,a=i.handle;a||(a=i.handle=Me(e,o)),i=0<=t.indexOf(" ")?t.split(" "):[t];for(var s=i.length,u=function(t,n,i){var s=o[t];s||(s=o[t]=[],s.specialHandlerWrapper=n,"$destroy"===t||i||e.addEventListener(t,a,!1)),s.push(r)};s--;)t=i[s],yr[t]?(u(yr[t],Pe),u(t,n,!0)):u(t)}},off:ge,one:function(e,t,n){e=Ln(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,r=e.parentNode;ve(e),o(new me(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(e){var t=[];return o(e.childNodes,function(e){1===e.nodeType&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(1===n||11===n){t=new me(t);for(var n=0,r=t.length;r>n;n++)e.appendChild(t[n])}},prepend:function(e,t){if(1===e.nodeType){var n=e.firstChild;o(new me(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){t=Ln(t).eq(0).clone()[0];var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)},remove:Ne,detach:function(e){Ne(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new me(t);for(var i=0,o=t.length;o>i;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Ee,removeClass:Se,toggleClass:function(e,t,n){t&&o(t.split(" "),function(t){var r=n;g(r)&&(r=!we(e,t)),(r?Ee:Se)(e,t)})},parent:function(e){return(e=e.parentNode)&&11!==e.nodeType?e:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:$e,triggerHandler:function(e,t,n){var r,i,a=t.type||t,s=be(e);(s=(s=s&&s.events)&&s[a])&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:h,type:a,target:e},t.type&&(r=l(r,t)),t=q(s),i=n?[r].concat(n):[r],o(t,function(t){r.isImmediatePropagationStopped()||t.apply(e,i)}))}},function(e,t){me.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;a>o;o++)g(i)?(i=e(this[o],t,n,r),y(i)&&(i=Ln(i))):Ce(i,e(this[o],t,n,r));return y(i)?i:this},me.prototype.bind=me.prototype.on,me.prototype.unbind=me.prototype.off}),Re.prototype={put:function(e,t){this[qe(e,this.nextUid)]=t},get:function(e){return this[qe(e,this.nextUid)]},remove:function(e){var t=this[e=qe(e,this.nextUid)];return delete this[e],t}};var jr=[function(){this.$get=[function(){return Re}]}],Mr=/^[^\(]*\(\s*([^\)]*)\)/m,Dr=/,/,Pr=/^\s*(_?)(\S+?)\1\s*$/,Vr=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,qr=r("$injector");Ie.$$annotate=function(e,t,n){var r;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw w(n)&&n||(n=e.name||Fe(e)),qr("strictdi",n);t=e.toString().replace(Vr,""),t=t.match(Mr),o(t[1].split(Dr),function(e){e.replace(Pr,function(e,t,n){r.push(n)})})}e.$inject=r}}else ir(e)?(t=e.length-1,oe(e[t],"fn"),r=e.slice(0,t)):oe(e,"fn",!0);return r};var Rr=r("$animate"),Fr=function(){this.$get=function(){}},Ir=function(){var e=new Re,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(e,t,n){var r=!1;return t&&(t=w(t)?t.split(" "):ir(t)?t:[],o(t,function(t){t&&(r=!0,e[t]=n)})),r}function a(){o(t,function(t){var n=e.get(t);if(n){var r=Le(t.attr("class")),i="",a="";o(n,function(e,t){e!==!!r[t]&&(e?i+=(i.length?" ":"")+t:a+=(a.length?" ":"")+t)}),o(t,function(e){i&&Ee(e,i),a&&Se(e,a)}),e.remove(t)}}),t.length=0}return{enabled:h,on:h,off:h,pin:h,push:function(o,s,u,c){return c&&c(),u=u||{},u.from&&o.css(u.from),u.to&&o.css(u.to),(u.addClass||u.removeClass)&&(s=u.addClass,c=u.removeClass,u=e.get(o)||{},s=i(u,s,!0),c=i(u,c,!1),(s||c)&&(e.put(o,u),t.push(o),1===t.length&&r.$$postDigest(a))),o=new n,o.complete(),o}}}]},_r=["$provide",function(e){var t=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw Rr("notcsel",n);var i=n+"-animation";t.$$registeredAnimations[n.substr(1)]=i,e.factory(i,r)},this.classNameFilter=function(e){if(1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null)&&/(\s+|\/)ng-animate(\s+|\/)/.test(this.$$classNameFilter.toString()))throw Rr("nongcls","ng-animate");return this.$$classNameFilter},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r;e:{for(r=0;r<n.length;r++){var i=n[r];if(1===i.nodeType){r=i;break e}}r=void 0}!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,i,o){return r=r&&Ln(r),
i=i&&Ln(i),r=r||i.parent(),t(n,r,i),e.push(n,"enter",Ue(o))},move:function(n,r,i,o){return r=r&&Ln(r),i=i&&Ln(i),r=r||i.parent(),t(n,r,i),e.push(n,"move",Ue(o))},leave:function(t,n){return e.push(t,"leave",Ue(n),function(){t.remove()})},addClass:function(t,n,r){return r=Ue(r),r.addClass=He(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=Ue(r),r.removeClass=He(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,i){return i=Ue(i),i.addClass=He(i.addClass,n),i.removeClass=He(i.removeClass,r),e.push(t,"setClass",i)},animate:function(t,n,r,i,o){return o=Ue(o),o.from=o.from?l(o.from,n):n,o.to=o.to?l(o.to,r):r,o.tempClasses=He(o.tempClasses,i||"ng-inline-animate"),e.push(t,"animate",o)}}}]}],Hr=function(){this.$get=["$$rAF",function(e){function t(t){n.push(t),1<n.length||e(function(){for(var e=0;e<n.length;e++)n[e]();n=[]})}var n=[];return function(){var e=!1;return t(function(){e=!0}),function(n){e?n():t(n)}}}]},Lr=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(e,t,n,r,i){function a(e){this.setHost(e);var t=n();this._doneCallbacks=[],this._tick=function(e){var n=r[0];n&&n.hidden?i(e,0,!1):t(e)},this._state=0}return a.chain=function(e,t){function n(){r===e.length?t(!0):e[r](function(e){!1===e?t(!1):(r++,n())})}var r=0;n()},a.all=function(e,t){function n(n){i=i&&n,++r===e.length&&t(i)}var r=0,i=!0;o(e,function(e){e.done(n)})},a.prototype={setHost:function(e){this.host=e||{}},done:function(e){2===this._state?e():this._doneCallbacks.push(e)},progress:h,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){!1===t?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},"catch":function(e){return this.getPromise()["catch"](e)},"finally":function(e){return this.getPromise()["finally"](e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;0===t._state&&(t._state=1,t._tick(function(){t._resolve(e)}))},_resolve:function(e){2!==this._state&&(o(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=2)}},a}]},Ur=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(e,t,n){return function(t,r){function i(){return e(function(){o.addClass&&(t.addClass(o.addClass),o.addClass=null),o.removeClass&&(t.removeClass(o.removeClass),o.removeClass=null),o.to&&(t.css(o.to),o.to=null),a||s.complete(),a=!0}),s}var o=r||{};o.$$prepared||(o=V(o)),o.cleanupStyles&&(o.from=o.to=null),o.from&&(t.css(o.from),o.from=null);var a,s=new n;return{start:i,end:i}}}]},Br=r("$compile");Je.$inject=["$provide","$$sanitizeUriProvider"];var zr=/^((?:x|data)[\:\-_])/i,Wr=r("$controller"),Gr=/^(\S+)(\s+as\s+([\w$]+))?$/,Jr=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof Ln&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},Yr="application/json",Xr={"Content-Type":Yr+";charset=utf-8"},Kr=/^\[|^\{(?!\{)/,Zr={"[":/]$/,"{":/}$/},Qr=/^\)\]\}',?\n/,ei=r("$http"),ti=function(e){return function(){throw ei("legacy",e)}},ni=tr.$interpolateMinErr=r("$interpolate");ni.throwNoconcat=function(e){throw ni("noconcat",e)},ni.interr=function(e,t){return ni("interr",e,t.toString())};var ri=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,ii={http:80,https:443,ftp:21},oi=r("$location"),ai={$$html5:!1,$$replace:!1,absUrl:St("$$absUrl"),url:function(e){if(g(e))return this.$$url;var t=ri.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:St("$$protocol"),host:St("$$host"),port:St("$$port"),path:Et("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(w(e)||S(e))e=e.toString(),this.$$search=G(e);else{if(!b(e))throw oi("isrcharg");e=V(e,{}),o(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:g(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:Et("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};o([wt,xt,bt],function(e){e.prototype=Object.create(ai),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==bt||!this.$$html5)throw oi("nostate");return this.$$state=g(t)?null:t,this}});var si=r("$parse"),ui=Function.prototype.call,ci=Function.prototype.apply,li=Function.prototype.bind,fi=ce();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){fi[e]=!0});var pi={n:"\n",f:"\f",r:"\r",t:"	",v:"\x0B","'":"'",'"':'"'},di=function(e){this.options=e};di.prototype={constructor:di,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;)if(e=this.text.charAt(this.index),'"'===e||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(e))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var t=e+this.peek(),n=t+this.peek(2),r=fi[t],i=fi[n];fi[e]||r||i?(e=i?n:r?t:e,this.tokens.push({index:this.index,text:e,operator:!0}),this.index+=e.length):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){return e=e||1,this.index+e<this.text.length?this.text.charAt(this.index+e):!1},isNumber:function(e){return e>="0"&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"	"===e||"\n"===e||"\x0B"===e||" "===e},isIdent:function(e){return e>="a"&&"z">=e||e>="A"&&"Z">=e||"_"===e||"$"===e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){throw n=n||this.index,t=y(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n,si("lexerr",e,t,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Wn(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){for(var e=this.index;this.index<this.text.length;){var t=this.text.charAt(this.index);if(!this.isIdent(t)&&!this.isNumber(t))break;this.index++}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index),r=r+o;if(i)"u"===o?(i=this.text.substring(this.index+1,this.index+5),i.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+i+"]"),this.index+=4,n+=String.fromCharCode(parseInt(i,16))):n+=pi[o]||o,i=!1;else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var hi=function(e,t){this.lexer=e,this.options=t};hi.Program="Program",hi.ExpressionStatement="ExpressionStatement",hi.AssignmentExpression="AssignmentExpression",hi.ConditionalExpression="ConditionalExpression",hi.LogicalExpression="LogicalExpression",hi.BinaryExpression="BinaryExpression",hi.UnaryExpression="UnaryExpression",hi.CallExpression="CallExpression",hi.MemberExpression="MemberExpression",hi.Identifier="Identifier",hi.Literal="Literal",hi.ArrayExpression="ArrayExpression",hi.Property="Property",hi.ObjectExpression="ObjectExpression",hi.ThisExpression="ThisExpression",hi.NGValueParameter="NGValueParameter",hi.prototype={ast:function(e){return this.text=e,this.tokens=this.lexer.lex(e),e=this.program(),0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var e=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:hi.Program,body:e}},expressionStatement:function(){return{type:hi.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e=this.expression();this.expect("|");)e=this.filter(e);return e},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();return this.expect("=")&&(e={type:hi.AssignmentExpression,left:e,right:this.assignment(),operator:"="}),e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:hi.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:hi.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:hi.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:hi.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:hi.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:hi.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:hi.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:hi.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.constants.hasOwnProperty(this.peek().text)?e=V(this.constants[this.consume().text]):this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:hi.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:hi.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:hi.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){e=[e];for(var t={type:hi.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return t},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do e.push(this.expression());while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:hi.Identifier,name:e.text}},constant:function(){return{type:hi.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:hi.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:hi.Property,kind:"init"},this.peek().constant?e.key=this.constant():this.peek().identifier?e.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),e.value=this.expression(),t.push(e)}while(this.expect(","));return this.consume("}"),{type:hi.ObjectExpression,properties:t}},throwError:function(e,t){throw si("syntax",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw si("ueoe",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw si("ueoe",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){e=this.tokens[e];var o=e.text;if(o===t||o===n||o===r||o===i||!(t||n||r||i))return e}return!1},expect:function(e,t,n,r){return(e=this.peek(e,t,n,r))?(this.tokens.shift(),e):!1},constants:{"true":{type:hi.Literal,value:!0},"false":{type:hi.Literal,value:!1},"null":{type:hi.Literal,value:null},undefined:{type:hi.Literal,value:n},"this":{type:hi.ThisExpression}}},It.prototype={compile:function(e,t){var r=this,i=this.astBuilder.ast(e);this.state={nextId:0,filters:{},expensiveChecks:t,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},Pt(i,r.$filter);var a,s="";return this.stage="assign",(a=Rt(i))&&(this.state.computing="assign",s=this.nextId(),this.recurse(a,s),this.return_(s),s="fn.assign="+this.generateFunction("assign","s,v,l")),a=Vt(i.body),r.stage="inputs",o(a,function(e,t){var n="fn"+t;r.state[n]={vars:[],body:[],own:{}},r.state.computing=n;var i=r.nextId();r.recurse(e,i),r.return_(i),r.state.inputs.push(n),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(i),s='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+s+this.watchFns()+"return fn;",s=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",s)(this.$filter,Tt,Nt,Ot,At,jt,Mt,Dt,e),this.state=this.stage=n,s.literal=Ft(i),s.constant=i.constant,s},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return o(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return o(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,r,i,a,s){var u,c,l,f,p=this;if(i=i||h,!s&&y(e.watchId))t=t||this.nextId(),this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,r,i,a,!0));else switch(e.type){case hi.Program:o(e.body,function(t,r){p.recurse(t.expression,n,n,function(e){c=e}),r!==e.body.length-1?p.current().body.push(c,";"):p.return_(c)});break;case hi.Literal:f=this.escape(e.value),this.assign(t,f),i(f);break;case hi.UnaryExpression:this.recurse(e.argument,n,n,function(e){c=e}),f=e.operator+"("+this.ifDefined(c,0)+")",this.assign(t,f),i(f);break;case hi.BinaryExpression:this.recurse(e.left,n,n,function(e){u=e}),this.recurse(e.right,n,n,function(e){c=e}),f="+"===e.operator?this.plus(u,c):"-"===e.operator?this.ifDefined(u,0)+e.operator+this.ifDefined(c,0):"("+u+")"+e.operator+"("+c+")",this.assign(t,f),i(f);break;case hi.LogicalExpression:t=t||this.nextId(),p.recurse(e.left,t),p.if_("&&"===e.operator?t:p.not(t),p.lazyRecurse(e.right,t)),i(t);break;case hi.ConditionalExpression:t=t||this.nextId(),p.recurse(e.test,t),p.if_(t,p.lazyRecurse(e.alternate,t),p.lazyRecurse(e.consequent,t)),i(t);break;case hi.Identifier:t=t||this.nextId(),r&&(r.context="inputs"===p.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),r.computed=!1,r.name=e.name),Tt(e.name),p.if_("inputs"===p.stage||p.not(p.getHasOwnProperty("l",e.name)),function(){p.if_("inputs"===p.stage||"s",function(){a&&1!==a&&p.if_(p.not(p.nonComputedMember("s",e.name)),p.lazyAssign(p.nonComputedMember("s",e.name),"{}")),p.assign(t,p.nonComputedMember("s",e.name))})},t&&p.lazyAssign(t,p.nonComputedMember("l",e.name))),(p.state.expensiveChecks||Ht(e.name))&&p.addEnsureSafeObject(t),i(t);break;case hi.MemberExpression:u=r&&(r.context=this.nextId())||this.nextId(),t=t||this.nextId(),p.recurse(e.object,u,n,function(){p.if_(p.notNull(u),function(){e.computed?(c=p.nextId(),p.recurse(e.property,c),p.getStringValue(c),p.addEnsureSafeMemberName(c),a&&1!==a&&p.if_(p.not(p.computedMember(u,c)),p.lazyAssign(p.computedMember(u,c),"{}")),f=p.ensureSafeObject(p.computedMember(u,c)),p.assign(t,f),r&&(r.computed=!0,r.name=c)):(Tt(e.property.name),a&&1!==a&&p.if_(p.not(p.nonComputedMember(u,e.property.name)),p.lazyAssign(p.nonComputedMember(u,e.property.name),"{}")),f=p.nonComputedMember(u,e.property.name),(p.state.expensiveChecks||Ht(e.property.name))&&(f=p.ensureSafeObject(f)),p.assign(t,f),r&&(r.computed=!1,r.name=e.property.name))},function(){p.assign(t,"undefined")}),i(t)},!!a);break;case hi.CallExpression:t=t||this.nextId(),e.filter?(c=p.filter(e.callee.name),l=[],o(e.arguments,function(e){var t=p.nextId();p.recurse(e,t),l.push(t)}),f=c+"("+l.join(",")+")",p.assign(t,f),i(t)):(c=p.nextId(),u={},l=[],p.recurse(e.callee,c,u,function(){p.if_(p.notNull(c),function(){p.addEnsureSafeFunction(c),o(e.arguments,function(e){p.recurse(e,p.nextId(),n,function(e){l.push(p.ensureSafeObject(e))})}),u.name?(p.state.expensiveChecks||p.addEnsureSafeObject(u.context),f=p.member(u.context,u.name,u.computed)+"("+l.join(",")+")"):f=c+"("+l.join(",")+")",f=p.ensureSafeObject(f),p.assign(t,f)},function(){p.assign(t,"undefined")}),i(t)}));break;case hi.AssignmentExpression:if(c=this.nextId(),u={},!qt(e.left))throw si("lval");this.recurse(e.left,n,u,function(){p.if_(p.notNull(u.context),function(){p.recurse(e.right,c),p.addEnsureSafeObject(p.member(u.context,u.name,u.computed)),p.addEnsureSafeAssignContext(u.context),f=p.member(u.context,u.name,u.computed)+e.operator+c,p.assign(t,f),i(t||f)})},1);break;case hi.ArrayExpression:l=[],o(e.elements,function(e){p.recurse(e,p.nextId(),n,function(e){l.push(e)})}),f="["+l.join(",")+"]",this.assign(t,f),i(f);break;case hi.ObjectExpression:l=[],o(e.properties,function(e){p.recurse(e.value,p.nextId(),n,function(t){l.push(p.escape(e.key.type===hi.Identifier?e.key.name:""+e.key.value)+":"+t)})}),f="{"+l.join(",")+"}",this.assign(t,f),i(f);break;case hi.ThisExpression:this.assign(t,"s"),i("s");break;case hi.NGValueParameter:this.assign(t,"v"),i("v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){return e?(this.current().body.push(e,"=",t,";"),e):void 0},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(!0===e)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){return e+"."+t},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},addEnsureSafeObject:function(e){this.current().body.push(this.ensureSafeObject(e),";")},addEnsureSafeMemberName:function(e){this.current().body.push(this.ensureSafeMemberName(e),";")},addEnsureSafeFunction:function(e){this.current().body.push(this.ensureSafeFunction(e),";")},addEnsureSafeAssignContext:function(e){this.current().body.push(this.ensureSafeAssignContext(e),";")},ensureSafeObject:function(e){return"ensureSafeObject("+e+",text)"},ensureSafeMemberName:function(e){return"ensureSafeMemberName("+e+",text)"},ensureSafeFunction:function(e){return"ensureSafeFunction("+e+",text)"},getStringValue:function(e){this.assign(e,"getStringValue("+e+",text)")},ensureSafeAssignContext:function(e){return"ensureSafeAssignContext("+e+",text)"},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(w(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(S(e))return e.toString();if(!0===e)return"true";if(!1===e)return"false";if(null===e)return"null";if("undefined"==typeof e)return"undefined";throw si("esc")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},_t.prototype={compile:function(e,t){var n=this,r=this.astBuilder.ast(e);this.expression=e,this.expensiveChecks=t,Pt(r,n.$filter);var i,a;(i=Rt(r))&&(a=this.recurse(i)),i=Vt(r.body);var s;i&&(s=[],o(i,function(e,t){var r=n.recurse(e);e.input=r,s.push(r),e.watchId=t}));var u=[];return o(r.body,function(e){u.push(n.recurse(e.expression))}),i=0===r.body.length?function(){}:1===r.body.length?u[0]:function(e,t){var n;return o(u,function(r){n=r(e,t)}),n},a&&(i.assign=function(e,t,n){return a(e,n,t)}),s&&(i.inputs=s),i.literal=Ft(r),i.constant=r.constant,i},recurse:function(e,t,r){var i,a,s,u=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case hi.Literal:return this.value(e.value,t);case hi.UnaryExpression:return a=this.recurse(e.argument),this["unary"+e.operator](a,t);case hi.BinaryExpression:return i=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](i,a,t);case hi.LogicalExpression:return i=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](i,a,t);case hi.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case hi.Identifier:return Tt(e.name,u.expression),u.identifier(e.name,u.expensiveChecks||Ht(e.name),t,r,u.expression);case hi.MemberExpression:return i=this.recurse(e.object,!1,!!r),e.computed||(Tt(e.property.name,u.expression),a=e.property.name),e.computed&&(a=this.recurse(e.property)),e.computed?this.computedMember(i,a,t,r,u.expression):this.nonComputedMember(i,a,u.expensiveChecks,t,r,u.expression);case hi.CallExpression:return s=[],o(e.arguments,function(e){s.push(u.recurse(e))}),e.filter&&(a=this.$filter(e.callee.name)),e.filter||(a=this.recurse(e.callee,!0)),e.filter?function(e,r,i,o){for(var u=[],c=0;c<s.length;++c)u.push(s[c](e,r,i,o));return e=a.apply(n,u,o),t?{context:n,name:n,value:e}:e}:function(e,n,r,i){var o,c=a(e,n,r,i);if(null!=c.value){Nt(c.context,u.expression),Ot(c.value,u.expression),o=[];for(var l=0;l<s.length;++l)o.push(Nt(s[l](e,n,r,i),u.expression));o=Nt(c.value.apply(c.context,o),u.expression)}return t?{value:o}:o};case hi.AssignmentExpression:return i=this.recurse(e.left,!0,1),a=this.recurse(e.right),function(e,n,r,o){var s=i(e,n,r,o);return e=a(e,n,r,o),Nt(s.value,u.expression),jt(s.context),s.context[s.name]=e,t?{value:e}:e};case hi.ArrayExpression:return s=[],o(e.elements,function(e){s.push(u.recurse(e))}),function(e,n,r,i){for(var o=[],a=0;a<s.length;++a)o.push(s[a](e,n,r,i));return t?{value:o}:o};case hi.ObjectExpression:return s=[],o(e.properties,function(e){s.push({key:e.key.type===hi.Identifier?e.key.name:""+e.key.value,value:u.recurse(e.value)})}),function(e,n,r,i){for(var o={},a=0;a<s.length;++a)o[s[a].key]=s[a].value(e,n,r,i);return t?{value:o}:o};case hi.ThisExpression:return function(e){return t?{value:e}:e};case hi.NGValueParameter:return function(e,n,r,i){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,i,o){return n=e(n,r,i,o),n=y(n)?+n:0,t?{value:n}:n}},"unary-":function(e,t){return function(n,r,i,o){return n=e(n,r,i,o),n=y(n)?-n:0,t?{value:n}:n}},"unary!":function(e,t){return function(n,r,i,o){return n=!e(n,r,i,o),t?{value:n}:n}},"binary+":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a);return r=t(r,i,o,a),s=Dt(s,r),n?{value:s}:s}},"binary-":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a);return r=t(r,i,o,a),s=(y(s)?s:0)-(y(r)?r:0),n?{value:s}:s}},"binary*":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)*t(r,i,o,a),n?{value:r}:r}},"binary/":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)/t(r,i,o,a),n?{value:r}:r}},"binary%":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)%t(r,i,o,a),n?{value:r}:r}},"binary===":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)===t(r,i,o,a),n?{value:r}:r}},"binary!==":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)!==t(r,i,o,a),n?{value:r}:r}},"binary==":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)==t(r,i,o,a),n?{value:r}:r}},"binary!=":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)!=t(r,i,o,a),n?{value:r}:r}},"binary<":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)<t(r,i,o,a),n?{value:r}:r}},"binary>":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)>t(r,i,o,a),n?{value:r}:r}},"binary<=":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)<=t(r,i,o,a),n?{value:r}:r}},"binary>=":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)>=t(r,i,o,a),n?{value:r}:r}},"binary&&":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)&&t(r,i,o,a),n?{value:r}:r}},"binary||":function(e,t,n){return function(r,i,o,a){return r=e(r,i,o,a)||t(r,i,o,a),n?{value:r}:r}},"ternary?:":function(e,t,n,r){return function(i,o,a,s){return i=e(i,o,a,s)?t(i,o,a,s):n(i,o,a,s),r?{value:i}:i}},value:function(e,t){return function(){return t?{context:n,name:n,value:e}:e}},identifier:function(e,t,r,i,o){return function(a,s,u,c){return a=s&&e in s?s:a,i&&1!==i&&a&&!a[e]&&(a[e]={}),s=a?a[e]:n,t&&Nt(s,o),r?{context:a,name:e,value:s}:s}},computedMember:function(e,t,n,r,i){return function(o,a,s,u){var c,l,f=e(o,a,s,u);return null!=f&&(c=t(o,a,s,u),c=At(c),Tt(c,i),r&&1!==r&&f&&!f[c]&&(f[c]={}),l=f[c],Nt(l,i)),n?{context:f,name:c,value:l}:l}},nonComputedMember:function(e,t,r,i,o,a){return function(s,u,c,l){return s=e(s,u,c,l),o&&1!==o&&s&&!s[t]&&(s[t]={}),u=null!=s?s[t]:n,(r||Ht(t))&&Nt(u,a),i?{context:s,name:t,value:u}:u}},inputs:function(e,t){return function(n,r,i,o){return o?o[t]:e(n,r,i)}}};var mi=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n,this.ast=new hi(this.lexer),this.astCompiler=n.csp?new _t(this.ast,t):new It(this.ast,t)};mi.prototype={constructor:mi,parse:function(e){return this.astCompiler.compile(e,this.options.expensiveChecks)}};var $i=Object.prototype.valueOf,vi=r("$sce"),gi={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Br=r("$compile"),yi=t.createElement("a"),bi=on(e.location.href);un.$inject=["$document"],ln.$inject=["$provide"];var xi=22,wi=".",Si="0";mn.$inject=["$locale"],$n.$inject=["$locale"];var Ei={yyyy:xn("FullYear",4),yy:xn("FullYear",2,0,!0),y:xn("FullYear",1),MMMM:wn("Month"),MMM:wn("Month",!0),MM:xn("Month",2,1),M:xn("Month",1,1),dd:xn("Date",2),d:xn("Date",1),HH:xn("Hours",2),H:xn("Hours",1),hh:xn("Hours",2,-12),h:xn("Hours",1,-12),mm:xn("Minutes",2),m:xn("Minutes",1),ss:xn("Seconds",2),s:xn("Seconds",1),sss:xn("Milliseconds",3),EEEE:wn("Day"),EEE:wn("Day",!0),a:function(e,t){return 12>e.getHours()?t.AMPMS[0]:t.AMPMS[1]},Z:function(e,t,n){return e=-1*n,e=(e>=0?"+":"")+(bn(Math[e>0?"floor":"ceil"](e/60),2)+bn(Math.abs(e%60),2))},ww:En(2),w:En(1),G:Cn,GG:Cn,GGG:Cn,GGGG:function(e,t){return 0>=e.getFullYear()?t.ERANAMES[0]:t.ERANAMES[1]}},Ci=/((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,ki=/^\-?\d+$/;kn.$inject=["$locale"];var Ti=$(Wn),Ai=$(Jn);Nn.$inject=["$parse"];var Ni=$({restrict:"E",compile:function(e,t){return t.href||t.xlinkHref?void 0:function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Zn.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),Oi={};o(Ar,function(e,t){function n(e,n,i){e.$watch(i[r],function(e){i.$set(t,!!e)})}if("multiple"!=e){var r=Ye("ng-"+t),i=n;"checked"===e&&(i=function(e,t,i){i.ngModel!==i[r]&&n(e,t,i)}),Oi[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(Or,function(e,t){Oi[t]=function(){return{priority:100,link:function(e,n,r){return"ngPattern"===t&&"/"==r.ngPattern.charAt(0)&&(n=r.ngPattern.match(zn))?void r.$set("ngPattern",new RegExp(n[1],n[2])):void e.$watch(r[t],function(e){r.$set(t,e)})}}}}),o(["src","srcset","href"],function(e){var t=Ye("ng-"+e);Oi[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===Zn.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){t?(i.$set(a,t),Hn&&o&&r.prop(o,i[a])):"href"===e&&i.$set(a,null)})}}}});var ji={$addControl:h,$$renameControl:function(e,t){e.$name=t},$removeControl:h,$setValidity:h,$setDirty:h,$setPristine:h,$setSubmitted:h};jn.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Mi=function(e){return["$timeout","$parse",function(t,r){function i(e){return""===e?r('this[""]').assign:r(e).assign||h}return{name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:jn,compile:function(r,o){r.addClass(po).addClass(lo);var a=o.name?"name":e&&o.ngForm?"ngForm":!1;return{pre:function(e,r,o,s){var u=s[0];if(!("action"in o)){var c=function(t){e.$apply(function(){u.$commitViewValue(),u.$setSubmitted()}),t.preventDefault()};r[0].addEventListener("submit",c,!1),r.on("$destroy",function(){t(function(){r[0].removeEventListener("submit",c,!1)},0,!1)})}(s[1]||u.$$parentForm).$addControl(u);var f=a?i(u.$name):h;a&&(f(e,u),o.$observe(a,function(t){u.$name!==t&&(f(e,n),u.$$parentForm.$$renameControl(u,t),(f=i(u.$name))(e,u))})),r.on("$destroy",function(){u.$$parentForm.$removeControl(u),f(e,n),l(u,ji)})}}}}}]},Di=Mi(),Pi=Mi(!0),Vi=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,qi=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,Ri=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Fi=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Ii=/^(\d{4})-(\d{2})-(\d{2})$/,_i=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Hi=/^(\d{4})-W(\d\d)$/,Li=/^(\d{4})-(\d\d)$/,Ui=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Bi={text:function(e,t,n,r,i,o){Dn(e,t,n,r,i,o),Mn(r)},date:Vn("date",Ii,Pn(Ii,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":Vn("datetimelocal",_i,Pn(_i,"yyyy MM dd HH mm ss sss".split(" ")),"yyyy-MM-ddTHH:mm:ss.sss"),time:Vn("time",Ui,Pn(Ui,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:Vn("week",Hi,function(e,t){if(E(e))return e;if(w(e)){Hi.lastIndex=0;var n=Hi.exec(e);if(n){var r=+n[1],i=+n[2],o=n=0,a=0,s=0,u=Sn(r),i=7*(i-1);return t&&(n=t.getHours(),o=t.getMinutes(),a=t.getSeconds(),s=t.getMilliseconds()),new Date(r,0,u.getDate()+i,n,o,a,s)}}return NaN},"yyyy-Www"),month:Vn("month",Li,Pn(Li,["yyyy","MM"]),"yyyy-MM"),number:function(e,t,r,i,o,a){if(qn(e,t,r,i),Dn(e,t,r,i,o,a),i.$$parserName="number",i.$parsers.push(function(e){return i.$isEmpty(e)?null:Fi.test(e)?parseFloat(e):n}),i.$formatters.push(function(e){if(!i.$isEmpty(e)){if(!S(e))throw $o("numfmt",e);e=e.toString()}return e}),y(r.min)||r.ngMin){var s;i.$validators.min=function(e){return i.$isEmpty(e)||g(s)||e>=s},r.$observe("min",function(e){y(e)&&!S(e)&&(e=parseFloat(e,10)),s=S(e)&&!isNaN(e)?e:n,i.$validate()})}if(y(r.max)||r.ngMax){var u;i.$validators.max=function(e){return i.$isEmpty(e)||g(u)||u>=e},r.$observe("max",function(e){y(e)&&!S(e)&&(e=parseFloat(e,10)),u=S(e)&&!isNaN(e)?e:n,i.$validate()})}},url:function(e,t,n,r,i,o){Dn(e,t,n,r,i,o),Mn(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||qi.test(n)}},email:function(e,t,n,r,i,o){
Dn(e,t,n,r,i,o),Mn(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||Ri.test(n)}},radio:function(e,t,n,r){g(n.name)&&t.attr("name",++nr),t.on("click",function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)}),r.$render=function(){t[0].checked=n.value==r.$viewValue},n.$observe("value",r.$render)},checkbox:function(e,t,n,r,i,o,a,s){var u=Rn(s,e,"ngTrueValue",n.ngTrueValue,!0),c=Rn(s,e,"ngFalseValue",n.ngFalseValue,!1);t.on("click",function(e){r.$setViewValue(t[0].checked,e&&e.type)}),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return!1===e},r.$formatters.push(function(e){return R(e,u)}),r.$parsers.push(function(e){return e?u:c})},hidden:h,button:h,submit:h,reset:h,file:h},zi=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Bi[Wn(a.type)]||Bi.text)(i,o,a,s[0],t,e,n,r)}}}}],Wi=/^(true|false|\d+)$/,Gi=function(){return{restrict:"A",priority:100,compile:function(e,t){return Wi.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},Ji=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,n,r){e.$$addBindingInfo(n,r.ngBind),n=n[0],t.$watch(r.ngBind,function(e){n.textContent=g(e)?"":e})}}}}],Yi=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){n=e(r.attr(i.$attr.ngBindTemplate)),t.$$addBindingInfo(r,n.expressions),r=r[0],i.$observe("ngBindTemplate",function(e){r.textContent=g(e)?"":e})}}}}],Xi=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(e){return(e||"").toString()});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){r.html(e.getTrustedHtml(o(t))||"")})}}}}],Ki=$({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),Zi=Fn("",!0),Qi=Fn("Odd",0),eo=Fn("Even",1),to=On({compile:function(e,t){t.$set("ngCloak",n),e.removeClass("ng-cloak")}}),no=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],ro={},io={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=Ye("ng-"+e);ro[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t],null,!0);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};io[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var oo=["$animate",function(e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,c;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=t.createComment(" end ngIf: "+i.ngIf+" "),s={clone:n},e.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),u&&(u.$destroy(),u=null),s&&(c=ue(s.clone),e.leave(c).then(function(){c=null}),s=null))})}}}],ao=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:tr.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,c,l){var f,p,d,h=0,m=function(){p&&(p.remove(),p=null),f&&(f.$destroy(),f=null),d&&(n.leave(d).then(function(){p=null}),p=d,d=null)};r.$watch(o,function(o){var u=function(){!y(s)||s&&!r.$eval(s)||t()},p=++h;o?(e(o,!0).then(function(e){if(!r.$$destroyed&&p===h){var t=r.$new();c.template=e,e=l(t,function(e){m(),n.enter(e,null,i).then(u)}),f=t,d=e,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||p!==h||(m(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(m(),c.template=null)})}}}}],so=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){/SVG/.test(r[0].toString())?(r.empty(),e(he(o.template,t).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(o.template),e(r.contents())(n))}}}],uo=On({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),co=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,r,i){var a=t.attr(r.$attr.ngList)||", ",s="false"!==r.ngTrim,u=s?ar(a):a;i.$parsers.push(function(e){if(!g(e)){var t=[];return e&&o(e.split(u),function(e){e&&t.push(s?ar(e):e)}),t}}),i.$formatters.push(function(e){return ir(e)?e.join(a):n}),i.$isEmpty=function(e){return!e||!e.length}}}},lo="ng-valid",fo="ng-invalid",po="ng-pristine",ho="ng-dirty",mo="ng-pending",$o=r("ngModel"),vo=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,r,i,a,s,u,c,l,f){this.$modelValue=this.$viewValue=Number.NaN,this.$$rawModelValue=n,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=n,this.$name=f(r.name||"",!1)(e),this.$$parentForm=ji;var p,d=a(r.ngModel),m=d.assign,$=d,v=m,b=null,x=this;this.$$setOptions=function(e){if((x.$options=e)&&e.getterSetter){var t=a(r.ngModel+"()"),n=a(r.ngModel+"($$$p)");$=function(e){var n=d(e);return C(n)&&(n=t(e)),n},v=function(e,t){C(d(e))?n(e,{$$$p:x.$modelValue}):m(e,x.$modelValue)}}else if(!d.assign)throw $o("nonassign",r.ngModel,z(i))},this.$render=h,this.$isEmpty=function(e){return g(e)||""===e||null===e||e!==e};var w=0;In({ctrl:this,$element:i,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},$animate:s}),this.$setPristine=function(){x.$dirty=!1,x.$pristine=!0,s.removeClass(i,ho),s.addClass(i,po)},this.$setDirty=function(){x.$dirty=!0,x.$pristine=!1,s.removeClass(i,po),s.addClass(i,ho),x.$$parentForm.$setDirty()},this.$setUntouched=function(){x.$touched=!1,x.$untouched=!0,s.setClass(i,"ng-untouched","ng-touched")},this.$setTouched=function(){x.$touched=!0,x.$untouched=!1,s.setClass(i,"ng-touched","ng-untouched")},this.$rollbackViewValue=function(){u.cancel(b),x.$viewValue=x.$$lastCommittedViewValue,x.$render()},this.$validate=function(){if(!S(x.$modelValue)||!isNaN(x.$modelValue)){var e=x.$$rawModelValue,t=x.$valid,r=x.$modelValue,i=x.$options&&x.$options.allowInvalid;x.$$runValidators(e,x.$$lastCommittedViewValue,function(o){i||t===o||(x.$modelValue=o?e:n,x.$modelValue!==r&&x.$$writeModelToScope())})}},this.$$runValidators=function(e,t,r){function i(){var n=!0;return o(x.$validators,function(r,i){var o=r(e,t);n=n&&o,s(i,o)}),n?!0:(o(x.$asyncValidators,function(e,t){s(t,null)}),!1)}function a(){var r=[],i=!0;o(x.$asyncValidators,function(o,a){var u=o(e,t);if(!u||!C(u.then))throw $o("nopromise",u);s(a,n),r.push(u.then(function(){s(a,!0)},function(e){i=!1,s(a,!1)}))}),r.length?l.all(r).then(function(){u(i)},h):u(!0)}function s(e,t){c===w&&x.$setValidity(e,t)}function u(e){c===w&&r(e)}w++;var c=w;(function(){var e=x.$$parserName||"parse";return g(p)?(s(e,null),!0):(p||(o(x.$validators,function(e,t){s(t,null)}),o(x.$asyncValidators,function(e,t){s(t,null)})),s(e,p),p)})()&&i()?a():u(!1)},this.$commitViewValue=function(){var e=x.$viewValue;u.cancel(b),(x.$$lastCommittedViewValue!==e||""===e&&x.$$hasNativeValidators)&&(x.$$lastCommittedViewValue=e,x.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){var t=x.$$lastCommittedViewValue;if(p=g(t)?n:!0)for(var r=0;r<x.$parsers.length;r++)if(t=x.$parsers[r](t),g(t)){p=!1;break}S(x.$modelValue)&&isNaN(x.$modelValue)&&(x.$modelValue=$(e));var i=x.$modelValue,o=x.$options&&x.$options.allowInvalid;x.$$rawModelValue=t,o&&(x.$modelValue=t,x.$modelValue!==i&&x.$$writeModelToScope()),x.$$runValidators(t,x.$$lastCommittedViewValue,function(e){o||(x.$modelValue=e?t:n,x.$modelValue!==i&&x.$$writeModelToScope())})},this.$$writeModelToScope=function(){v(e,x.$modelValue),o(x.$viewChangeListeners,function(e){try{e()}catch(n){t(n)}})},this.$setViewValue=function(e,t){x.$viewValue=e,x.$options&&!x.$options.updateOnDefault||x.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n=0,r=x.$options;r&&y(r.debounce)&&(r=r.debounce,S(r)?n=r:S(r[t])?n=r[t]:S(r["default"])&&(n=r["default"])),u.cancel(b),n?b=u(function(){x.$commitViewValue()},n):c.$$phase?x.$commitViewValue():e.$apply(function(){x.$commitViewValue()})},e.$watch(function(){var t=$(e);if(t!==x.$modelValue&&(x.$modelValue===x.$modelValue||t===t)){x.$modelValue=x.$$rawModelValue=t,p=n;for(var r=x.$formatters,i=r.length,o=t;i--;)o=r[i](o);x.$viewValue!==o&&(x.$viewValue=x.$$lastCommittedViewValue=o,x.$render(),x.$$runValidators(t,o,h))}return t})}],go=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:vo,priority:1,compile:function(t){return t.addClass(po).addClass("ng-untouched").addClass(lo),{pre:function(e,t,n,r){var i=r[0];t=r[1]||i.$$parentForm,i.$$setOptions(r[2]&&r[2].$options),t.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(t,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(e){o.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(n){o.$touched||(e.$$phase?t.$evalAsync(o.$setTouched):t.$apply(o.$setTouched))})}}}}}],yo=/(\s+|^)default(\s+|$)/,bo=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var n=this;this.$options=V(e.$eval(t.ngModelOptions)),y(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=ar(this.$options.updateOn.replace(yo,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},xo=On({terminal:!0,priority:1e3}),wo=r("ngOptions"),So=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,Eo=["$compile","$parse",function(e,n){function r(e,t,r){function o(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function a(e){var t;if(!c&&i(e))t=e;else{t=[];for(var n in e)e.hasOwnProperty(n)&&"$"!==n.charAt(0)&&t.push(n)}return t}var s=e.match(So);if(!s)throw wo("iexp",e,z(t));var u=s[5]||s[7],c=s[6];e=/ as /.test(s[0])&&s[1];var l=s[9];t=n(s[2]?s[1]:u);var f=e&&n(e)||t,p=l&&n(l),d=l?function(e,t){return p(r,t)}:function(e){return qe(e)},h=function(e,t){return d(e,b(e,t))},m=n(s[2]||s[1]),$=n(s[3]||""),v=n(s[4]||""),g=n(s[8]),y={},b=c?function(e,t){return y[c]=t,y[u]=e,y}:function(e){return y[u]=e,y};return{trackBy:l,getTrackByValue:h,getWatchables:n(g,function(e){var t=[];e=e||[];for(var n=a(e),i=n.length,o=0;i>o;o++){var u=e===n?o:n[o],c=b(e[u],u),u=d(e[u],c);t.push(u),(s[2]||s[1])&&(u=m(r,c),t.push(u)),s[4]&&(c=v(r,c),t.push(c))}return t}),getOptions:function(){for(var e=[],t={},n=g(r)||[],i=a(n),s=i.length,u=0;s>u;u++){var c=n===i?u:i[u],p=b(n[c],c),y=f(r,p),c=d(y,p),x=m(r,p),w=$(r,p),p=v(r,p),y=new o(c,y,x,w,p);e.push(y),t[c]=y}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[h(e)]},getViewValueFromOption:function(e){return l?tr.copy(e.viewValue):e.viewValue}}}}}var a=t.createElement("option"),s=t.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","?ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=h},post:function(t,n,i,u){function c(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),e.value!==t.value&&(t.value=e.selectValue)}function l(e,t,n,r){return t&&Wn(t.nodeName)===n?n=t:(n=r.cloneNode(!1),t?e.insertBefore(n,t):e.appendChild(n)),n}function f(e){for(var t;e;)t=e.nextSibling,Ne(e),e=t}function p(e){var t=m&&m[0],n=x&&x[0];if(t||n)for(;e&&(e===t||e===n||8===e.nodeType||"option"===D(e)&&""===e.value);)e=e.nextSibling;return e}function d(){var e=w&&$.readValue();w=S.getOptions();var t={},r=n[0].firstChild;if(b&&n.prepend(m),r=p(r),w.items.forEach(function(e){var i,o;e.group?(i=t[e.group],i||(i=l(n[0],r,"optgroup",s),r=i.nextSibling,i.label=e.group,i=t[e.group]={groupElement:i,currentOptionElement:i.firstChild}),o=l(i.groupElement,i.currentOptionElement,"option",a),c(e,o),i.currentOptionElement=o.nextSibling):(o=l(n[0],r,"option",a),c(e,o),r=o.nextSibling)}),Object.keys(t).forEach(function(e){f(t[e].currentOptionElement)}),f(r),h.$render(),!h.$isEmpty(e)){var i=$.readValue();(S.trackBy||v?R(e,i):e===i)||(h.$setViewValue(i),h.$render())}}var h=u[1];if(h){var m,$=u[0],v=i.multiple;u=0;for(var g=n.children(),y=g.length;y>u;u++)if(""===g[u].value){m=g.eq(u);break}var b=!!m,x=Ln(a.cloneNode(!1));x.val("?");var w,S=r(i.ngOptions,n,t);v?(h.$isEmpty=function(e){return!e||0===e.length},$.writeValue=function(e){w.items.forEach(function(e){e.element.selected=!1}),e&&e.forEach(function(e){(e=w.getOptionFromViewValue(e))&&!e.disabled&&(e.element.selected=!0)})},$.readValue=function(){var e=n.val()||[],t=[];return o(e,function(e){(e=w.selectValueMap[e])&&!e.disabled&&t.push(w.getViewValueFromOption(e))}),t},S.trackBy&&t.$watchCollection(function(){return ir(h.$viewValue)?h.$viewValue.map(function(e){return S.getTrackByValue(e)}):void 0},function(){h.$render()})):($.writeValue=function(e){var t=w.getOptionFromViewValue(e);t&&!t.disabled?n[0].value!==t.selectValue&&(x.remove(),b||m.remove(),n[0].value=t.selectValue,t.element.selected=!0,t.element.setAttribute("selected","selected")):null===e||b?(x.remove(),b||n.prepend(m),n.val(""),m.prop("selected",!0),m.attr("selected",!0)):(b||m.remove(),n.prepend(x),n.val("?"),x.prop("selected",!0),x.attr("selected",!0))},$.readValue=function(){var e=w.selectValueMap[n.val()];return e&&!e.disabled?(b||m.remove(),x.remove(),w.getViewValueFromOption(e)):null},S.trackBy&&t.$watch(function(){return S.getTrackByValue(h.$viewValue)},function(){h.$render()})),b?(m.remove(),e(m)(t),m.removeClass("ng-scope")):m=Ln(a.cloneNode(!1)),d(),t.$watchCollection(S.getWatchables,d)}}}}}],Co=["$locale","$interpolate","$log",function(e,t,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(a,s,u){function c(e){s.text(e||"")}var l,f=u.count,p=u.$attr.when&&s.attr(u.$attr.when),d=u.offset||0,m=a.$eval(p)||{},$={},v=t.startSymbol(),y=t.endSymbol(),b=v+f+"-"+d+y,x=tr.noop;o(u,function(e,t){var n=i.exec(t);n&&(n=(n[1]?"-":"")+Wn(n[2]),m[n]=s.attr(u.$attr[t]))}),o(m,function(e,n){$[n]=t(e.replace(r,b))}),a.$watch(f,function(t){var r=parseFloat(t),i=isNaN(r);i||r in m||(r=e.pluralCat(r-d)),r===l||i&&S(l)&&isNaN(l)||(x(),i=$[r],g(i)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+p),x=h,c()):x=a.$watch(i,c),l=r)})}}}],ko=["$parse","$animate",function(e,a){var s=r("ngRepeat"),u=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,c){var l=c.ngRepeat,f=t.createComment(" end ngRepeat: "+l+" "),p=l.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!p)throw s("iexp",l);var d=p[1],h=p[2],m=p[3],$=p[4],p=d.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);if(!p)throw s("iidexp",d);var v=p[3]||p[1],g=p[2];if(m&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(m)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(m)))throw s("badident",m);var y,b,x,w,S={$id:qe};return $?y=e($):(x=function(e,t){return qe(t)},w=function(e){return e}),function(e,t,r,c,p){y&&(b=function(t,n,r){return g&&(S[g]=t),S[v]=n,S.$index=r,y(e,S)});var d=ce();e.$watchCollection(h,function(r){var c,h,$,y,S,E,C,k,T,A,N=t[0],O=ce();if(m&&(e[m]=r),i(r))k=r,h=b||x;else for(A in h=b||w,k=[],r)Gn.call(r,A)&&"$"!==A.charAt(0)&&k.push(A);for(y=k.length,A=Array(y),c=0;y>c;c++)if(S=r===k?c:k[c],E=r[S],C=h(S,E,c),d[C])T=d[C],delete d[C],O[C]=T,A[c]=T;else{if(O[C])throw o(A,function(e){e&&e.scope&&(d[e.id]=e)}),s("dupes",l,C,E);A[c]={id:C,scope:n,clone:n},O[C]=!0}for($ in d){if(T=d[$],C=ue(T.clone),a.leave(C),C[0].parentNode)for(c=0,h=C.length;h>c;c++)C[c].$$NG_REMOVED=!0;T.scope.$destroy()}for(c=0;y>c;c++)if(S=r===k?c:k[c],E=r[S],T=A[c],T.scope){$=N;do $=$.nextSibling;while($&&$.$$NG_REMOVED);T.clone[0]!=$&&a.move(ue(T.clone),null,Ln(N)),N=T.clone[T.clone.length-1],u(T.scope,c,v,E,g,S,y)}else p(function(e,t){T.scope=t;var n=f.cloneNode(!1);e[e.length++]=n,a.enter(e,null,Ln(N)),N=n,T.clone=e,O[T.id]=T,u(T.scope,c,v,E,g,S,y)});d=O})}}}}],To=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Ao=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],No=On(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&o(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),Oo=["$animate",function(e){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=[],u=[],c=[],l=[],f=function(e,t){return function(){e.splice(t,1)}};n.$watch(i.ngSwitch||i.on,function(n){var r,i;for(r=0,i=c.length;i>r;++r)e.cancel(c[r]);for(r=c.length=0,i=l.length;i>r;++r){var p=ue(u[r].clone);l[r].$destroy(),(c[r]=e.leave(p)).then(f(c,r))}u.length=0,l.length=0,(s=a.cases["!"+n]||a.cases["?"])&&o(s,function(n){n.transclude(function(r,i){l.push(i);var o=n.element;r[r.length++]=t.createComment(" end ngSwitchWhen: "),u.push({clone:r}),e.enter(r,o.parent(),o)})})})}}}],jo=On({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:t})}}),Mo=On({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Do=On({restrict:"EAC",link:function(e,t,n,i,o){if(!o)throw r("ngTransclude")("orphan",z(t));o(function(e){t.empty(),t.append(e)})}}),Po=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){"text/ng-template"==n.type&&e.put(n.id,t[0].text)}}}],Vo={$setViewValue:h,$render:h},qo=["$element","$scope","$attrs",function(e,r,i){var o=this,a=new Re;o.ngModelCtrl=Vo,o.unknownOption=Ln(t.createElement("option")),o.renderUnknownOption=function(t){t="? "+qe(t)+" ?",o.unknownOption.val(t),e.prepend(o.unknownOption),e.val(t)},r.$on("$destroy",function(){o.renderUnknownOption=h}),o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.readValue=function(){return o.removeUnknownOption(),e.val()},o.writeValue=function(t){o.hasOption(t)?(o.removeUnknownOption(),e.val(t),""===t&&o.emptyOption.prop("selected",!0)):null==t&&o.emptyOption?(o.removeUnknownOption(),e.val("")):o.renderUnknownOption(t)},o.addOption=function(e,t){ae(e,'"option value"'),""===e&&(o.emptyOption=t);var n=a.get(e)||0;a.put(e,n+1),o.ngModelCtrl.$render(),t[0].hasAttribute("selected")&&(t[0].selected=!0)},o.removeOption=function(e){var t=a.get(e);t&&(1===t?(a.remove(e),""===e&&(o.emptyOption=n)):a.put(e,t-1))},o.hasOption=function(e){return!!a.get(e)},o.registerOption=function(e,t,n,r,i){if(r){var a;n.$observe("value",function(e){y(a)&&o.removeOption(a),a=e,o.addOption(e,t)})}else i?e.$watch(i,function(e,r){n.$set("value",e),r!==e&&o.removeOption(r),o.addOption(e,t)}):o.addOption(n.value,t);t.on("$destroy",function(){o.removeOption(n.value),o.ngModelCtrl.$render()})}}],Ro=function(){return{restrict:"E",require:["select","?ngModel"],controller:qo,priority:1,link:{pre:function(e,t,n,r){var i=r[1];if(i){var a=r[0];if(a.ngModelCtrl=i,t.on("change",function(){e.$apply(function(){i.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var e=[];return o(t.find("option"),function(t){t.selected&&e.push(t.value)}),e},a.writeValue=function(e){var n=new Re(e);o(t.find("option"),function(e){e.selected=y(n.get(e.value))})};var s,u=NaN;e.$watch(function(){u!==i.$viewValue||R(s,i.$viewValue)||(s=q(i.$viewValue),i.$render()),u=i.$viewValue}),i.$isEmpty=function(e){return!e||0===e.length}}}},post:function(e,t,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}}}},Fo=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,n){if(y(n.value))var r=e(n.value,!0);else{var i=e(t.text(),!0);i||n.$set("value",t.text())}return function(e,t,n){var o=t.parent();(o=o.data("$selectController")||o.parent().data("$selectController"))&&o.registerOption(e,t,n,r,i)}}}}],Io=$({restrict:"E",terminal:!1}),_o=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},Ho=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,i,o){if(o){var a,s=i.ngPattern||i.pattern;i.$observe("pattern",function(e){if(w(e)&&0<e.length&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw r("ngPattern")("noregexp",s,e,z(t));a=e||n,o.$validate()}),o.$validators.pattern=function(e,t){return o.$isEmpty(t)||g(a)||a.test(t)}}}}},Lo=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){e=p(e),i=isNaN(e)?-1:e,r.$validate()}),r.$validators.maxlength=function(e,t){return 0>i||r.$isEmpty(t)||t.length<=i}}}}},Uo=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=p(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};e.angular.bootstrap?console.log("WARNING: Tried to load angular more than once."):(re(),fe(tr),tr.module("ngLocale",[],["$provide",function(e){function t(e){e+="";var t=e.indexOf(".");return-1==t?0:e.length-t-1}e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:"January February March April May June July August September October November December".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),STANDALONEMONTH:"January February March April May June July August September October November December".split(" "),WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",pluralCat:function(e,r){var i=0|e,o=r;return n===o&&(o=Math.min(t(e),3)),Math.pow(10,o),1==i&&0==o?"one":"other"}})}]),Ln(t).ready(function(){Z(t,Q)}))}(window,document),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),require("./angular"),module.exports=angular,function(){function e(e){return"function"==typeof e}function t(e){var t=[];return JSON.stringify(e,function(e,n){if(n=toJsonReplacer(e,n),isObject(n)){if(t.indexOf(n)>=0)return"...";t.push(n)}return n})}function n(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):isUndefined(e)?"undefined":"string"!=typeof e?t(e):e}function r(e,t){return t=t||Error,function(){var r,i,o=2,a=arguments,s=a[0],u="["+(e?e+":":"")+s+"] ",c=a[1];for(u+=c.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1),r=t+o;return r<a.length?n(a[r]):e}),u+="\nhttp://errors.angularjs.org/1.4.9/"+(e?e+"/":"")+s,i=o,r="?";i<a.length;i++,r="&")u+=r+"p"+(i-o)+"="+encodeURIComponent(n(a[i]));return new t(u)}}function i(t){function n(e,t,n){return e[t]||(e[t]=n())}var i=r("$injector"),o=r("ng"),a=n(t,"angular",Object);return a.$$minErr=a.$$minErr||r,n(a,"module",function(){var t={};return function(r,a,s){var u=function(e,t){if("hasOwnProperty"===e)throw o("badname","hasOwnProperty is not a valid {0} name",t)};return u(r,"module"),a&&t.hasOwnProperty(r)&&(t[r]=null),n(t,r,function(){function t(e,t,n,r){return r||(r=o),function(){return r[n||"push"]([e,t,arguments]),f}}function n(t,n){return function(i,a){return a&&e(a)&&(a.$$moduleName=r),o.push([t,n,arguments]),f}}if(!a)throw i("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var o=[],u=[],c=[],l=t("$injector","invoke","push",u),f={_invokeQueue:o,_configBlocks:u,_runBlocks:c,requires:a,name:r,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:t("$provide","value"),constant:t("$provide","constant","unshift"),decorator:n("$provide","decorator"),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),config:l,run:function(e){return c.push(e),this}};return s&&l(s),f})}})}i(window)}(window),angular.Module,function(){function e(e){return function(){var t,n=arguments[0];for(t="["+(e?e+":":"")+n+"] http://errors.angularjs.org/1.4.9/"+(e?e+"/":"")+n,n=1;n<arguments.length;n++){t=t+(1==n?"?":"&")+"p"+(n-1)+"=";var r,i=encodeURIComponent;r=arguments[n],r="function"==typeof r?r.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof r?"undefined":"string"!=typeof r?JSON.stringify(r):r,t+=i(r)}return Error(t)}}!function(t){function n(e,t,n){return e[t]||(e[t]=n())}var r=e("$injector"),i=e("ng");return t=n(t,"angular",Object),t.$$minErr=t.$$minErr||e,n(t,"module",function(){var e={};return function(t,o,a){if("hasOwnProperty"===t)throw i("badname","module");return o&&e.hasOwnProperty(t)&&(e[t]=null),n(e,t,function(){function e(e,t,n,r){return r||(r=i),function(){return r[n||"push"]([e,t,arguments]),l}}function n(e,n){return function(r,o){return o&&"function"==typeof o&&(o.$$moduleName=t),i.push([e,n,arguments]),l}}if(!o)throw r("nomod",t);var i=[],s=[],u=[],c=e("$injector","invoke","push",s),l={_invokeQueue:i,_configBlocks:s,_runBlocks:u,requires:o,name:t,provider:n("$provide","provider"),factory:n("$provide","factory"),service:n("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:n("$provide","decorator"),animation:n("$animateProvider","register"),filter:n("$filterProvider","register"),controller:n("$controllerProvider","register"),directive:n("$compileProvider","directive"),config:c,run:function(e){return u.push(e),this}};return a&&c(a),l})}})}(window)}(window),function(e,t,n){function r(e){var t;if(t=e.match(c)){var n=new Date(0),r=0,o=0;return t[9]&&(r=i(t[9]+t[10]),o=i(t[9]+t[11])),n.setUTCFullYear(i(t[1]),i(t[2])-1,i(t[3])),n.setUTCHours(i(t[4]||0)-r,i(t[5]||0)-o,i(t[6]||0),i(t[7]||0)),n}return e}function i(e){return parseInt(e,10)}function o(e,t,n){var r="";for(0>e&&(r="-",e=-e),e=""+e;e.length<t;)e="0"+e;return n&&(e=e.substr(e.length-t)),r+e}function a(e,r,i,o){function a(e,n,r,i){return t.isFunction(e)?e:function(){return t.isNumber(e)?[e,n,r,i]:[200,e,n,r]}}function c(e,a,s,c,l,$,v){function g(e){return t.isString(e)||t.isFunction(e)||e instanceof RegExp?e:t.toJson(e)}function y(t){function i(){var n=t.response(e,a,s,l);b.$$respHeaders=n[2],c(m(n[0]),m(n[1]),b.getAllResponseHeaders(),m(n[3]||""))}function u(){for(var e=0,t=d.length;t>e;e++)if(d[e]===i){d.splice(e,1),c(-1,n,"");break}}return!o&&$&&($.then?$.then(u):r(u,$)),i}var b=new u,x=p[0],w=!1;if(x&&x.match(e,a)){if(!x.matchData(s))throw new Error("Expected "+x+" with different data\nEXPECTED: "+g(x.data)+"\nGOT:      "+s);if(!x.matchHeaders(l))throw new Error("Expected "+x+" with different headers\nEXPECTED: "+g(x.headers)+"\nGOT:      "+g(l));if(p.shift(),x.response)return void d.push(y(x));w=!0}for(var S,E=-1;S=f[++E];)if(S.match(e,a,s,l||{})){if(S.response)(o?o.defer:h)(y(S));else{if(!S.passThrough)throw new Error("No response defined !");i(e,a,s,c,l,$,v)}return}throw w?new Error("No response defined !"):new Error("Unexpected request: "+e+" "+a+"\n"+(x?"Expected "+x:"No more request expected"))}function l(e){t.forEach(["GET","DELETE","JSONP","HEAD"],function(t){c[e+t]=function(r,i){return c[e](t,r,n,i)}}),t.forEach(["PUT","POST","PATCH"],function(t){c[e+t]=function(n,r,i){return c[e](t,n,r,i)}})}var f=[],p=[],d=[],h=t.bind(d,d.push),m=t.copy;return c.when=function(e,t,r,i){var u=new s(e,t,r,i),c={respond:function(e,t,r,i){return u.passThrough=n,u.response=a(e,t,r,i),c}};return o&&(c.passThrough=function(){return u.response=n,u.passThrough=!0,c}),f.push(u),c},l("when"),c.expect=function(e,t,n,r){var i=new s(e,t,n,r),o={respond:function(e,t,n,r){return i.response=a(e,t,n,r),o}};return p.push(i),o},l("expect"),c.flush=function(n,r){if(r!==!1&&e.$digest(),!d.length)throw new Error("No pending request to flush !");if(t.isDefined(n)&&null!==n)for(;n--;){if(!d.length)throw new Error("No more pending request to flush !");d.shift()()}else for(;d.length;)d.shift()();c.verifyNoOutstandingExpectation(r)},c.verifyNoOutstandingExpectation=function(t){if(t!==!1&&e.$digest(),p.length)throw new Error("Unsatisfied requests: "+p.join(", "))},c.verifyNoOutstandingRequest=function(){if(d.length)throw new Error("Unflushed requests: "+d.length)},c.resetExpectations=function(){p.length=0,d.length=0},c}function s(e,n,r,i){this.data=r,this.headers=i,this.match=function(n,r,i,o){return e!=n?!1:this.matchUrl(r)?t.isDefined(i)&&!this.matchData(i)?!1:!t.isDefined(o)||this.matchHeaders(o):!1},this.matchUrl=function(e){return n?t.isFunction(n.test)?n.test(e):t.isFunction(n)?n(e):n==e:!0},this.matchHeaders=function(e){return t.isUndefined(i)?!0:t.isFunction(i)?i(e):t.equals(i,e)},this.matchData=function(e){return t.isUndefined(r)?!0:r&&t.isFunction(r.test)?r.test(e):r&&t.isFunction(r)?r(e):r&&!t.isString(r)?t.equals(t.fromJson(t.toJson(r)),t.fromJson(e)):r==e},this.toString=function(){return e+" "+n}}function u(){u.$$lastInstance=this,this.open=function(e,t,n){this.$$method=e,this.$$url=t,this.$$async=n,this.$$reqHeaders={},this.$$respHeaders={}},this.send=function(e){this.$$data=e},this.setRequestHeader=function(e,t){this.$$reqHeaders[e]=t},this.getResponseHeader=function(e){var r=this.$$respHeaders[e];return r?r:(e=t.lowercase(e),(r=this.$$respHeaders[e])?r:(r=n,t.forEach(this.$$respHeaders,function(n,i){r||t.lowercase(i)!=e||(r=n)}),r))},this.getAllResponseHeaders=function(){var e=[];return t.forEach(this.$$respHeaders,function(t,n){e.push(n+": "+t)}),e.join("\n")},this.abort=t.noop}t.mock={},t.mock.$BrowserProvider=function(){this.$get=function(){return new t.mock.$Browser}},t.mock.$Browser=function(){var e=this;this.isMock=!0,e.$$url="http://server/",e.$$lastUrl=e.$$url,e.pollFns=[],e.$$completeOutstandingRequest=t.noop,e.$$incOutstandingRequestCount=t.noop,e.onUrlChange=function(t){return e.pollFns.push(function(){e.$$lastUrl===e.$$url&&e.$$state===e.$$lastState||(e.$$lastUrl=e.$$url,e.$$lastState=e.$$state,t(e.$$url,e.$$state))}),t},e.$$applicationDestroyed=t.noop,e.$$checkUrlChange=t.noop,e.deferredFns=[],e.deferredNextId=0,e.defer=function(t,n){
return n=n||0,e.deferredFns.push({time:e.defer.now+n,fn:t,id:e.deferredNextId}),e.deferredFns.sort(function(e,t){return e.time-t.time}),e.deferredNextId++},e.defer.now=0,e.defer.cancel=function(n){var r;return t.forEach(e.deferredFns,function(e,t){e.id===n&&(r=t)}),t.isDefined(r)?(e.deferredFns.splice(r,1),!0):!1},e.defer.flush=function(n){if(t.isDefined(n))e.defer.now+=n;else{if(!e.deferredFns.length)throw new Error("No deferred tasks to be flushed");e.defer.now=e.deferredFns[e.deferredFns.length-1].time}for(;e.deferredFns.length&&e.deferredFns[0].time<=e.defer.now;)e.deferredFns.shift().fn()},e.$$baseHref="/",e.baseHref=function(){return this.$$baseHref}},t.mock.$Browser.prototype={poll:function(){t.forEach(this.pollFns,function(e){e()})},url:function(e,n,r){return t.isUndefined(r)&&(r=null),e?(this.$$url=e,this.$$state=t.copy(r),this):this.$$url},state:function(){return this.$$state},notifyWhenNoOutstandingRequests:function(e){e()}},t.mock.$ExceptionHandlerProvider=function(){var e;this.mode=function(t){switch(t){case"log":case"rethrow":var n=[];e=function(e){if(1==arguments.length?n.push(e):n.push([].slice.call(arguments,0)),"rethrow"===t)throw e},e.errors=n;break;default:throw new Error("Unknown mode '"+t+"', only 'log'/'rethrow' modes are allowed!")}},this.$get=function(){return e},this.mode("rethrow")},t.mock.$LogProvider=function(){function e(e,t,n){return e.concat(Array.prototype.slice.call(t,n))}var n=!0;this.debugEnabled=function(e){return t.isDefined(e)?(n=e,this):n},this.$get=function(){var r={log:function(){r.log.logs.push(e([],arguments,0))},warn:function(){r.warn.logs.push(e([],arguments,0))},info:function(){r.info.logs.push(e([],arguments,0))},error:function(){r.error.logs.push(e([],arguments,0))},debug:function(){n&&r.debug.logs.push(e([],arguments,0))}};return r.reset=function(){r.log.logs=[],r.info.logs=[],r.warn.logs=[],r.error.logs=[],r.debug.logs=[]},r.assertEmpty=function(){var e=[];if(t.forEach(["error","warn","info","log","debug"],function(n){t.forEach(r[n].logs,function(r){t.forEach(r,function(t){e.push("MOCK $log ("+n+"): "+String(t)+"\n"+(t.stack||""))})})}),e.length)throw e.unshift("Expected $log to be empty! Either a message was logged unexpectedly, or an expected log message was not checked and removed:"),e.push(""),new Error(e.join("\n---------\n"))},r.reset(),r}},t.mock.$IntervalProvider=function(){this.$get=["$browser","$rootScope","$q","$$q",function(e,n,r,i){var o=[],a=0,s=0,u=function(u,c,l,f){function p(){if(v.notify(m++),l>0&&m>=l){var r;v.resolve(m),t.forEach(o,function(e,t){e.id===g.$$intervalId&&(r=t)}),t.isDefined(r)&&o.splice(r,1)}$?e.defer.flush():n.$apply()}var d=arguments.length>4,h=d?Array.prototype.slice.call(arguments,4):[],m=0,$=t.isDefined(f)&&!f,v=($?i:r).defer(),g=v.promise;return l=t.isDefined(l)?l:0,g.then(null,null,d?function(){u.apply(null,h)}:u),g.$$intervalId=a,o.push({nextTime:s+c,delay:c,fn:p,id:a,deferred:v}),o.sort(function(e,t){return e.nextTime-t.nextTime}),a++,g};return u.cancel=function(e){if(!e)return!1;var n;return t.forEach(o,function(t,r){t.id===e.$$intervalId&&(n=r)}),t.isDefined(n)?(o[n].deferred.reject("canceled"),o.splice(n,1),!0):!1},u.flush=function(e){for(s+=e;o.length&&o[0].nextTime<=s;){var t=o[0];t.fn(),t.nextTime+=t.delay,o.sort(function(e,t){return e.nextTime-t.nextTime})}return e},u}]};var c=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?:\:?(\d\d)(?:\:?(\d\d)(?:\.(\d{3}))?)?)?(Z|([+-])(\d\d):?(\d\d)))?$/;if(t.mock.TzDate=function(e,n){var i=new Date(0);if(t.isString(n)){var a=n;if(i.origDate=r(n),n=i.origDate.getTime(),isNaN(n))throw{name:"Illegal Argument",message:"Arg '"+a+"' passed into TzDate constructor is not a valid date string"}}else i.origDate=new Date(n);var s=new Date(n).getTimezoneOffset();i.offsetDiff=60*s*1e3-1e3*e*60*60,i.date=new Date(n+i.offsetDiff),i.getTime=function(){return i.date.getTime()-i.offsetDiff},i.toLocaleDateString=function(){return i.date.toLocaleDateString()},i.getFullYear=function(){return i.date.getFullYear()},i.getMonth=function(){return i.date.getMonth()},i.getDate=function(){return i.date.getDate()},i.getHours=function(){return i.date.getHours()},i.getMinutes=function(){return i.date.getMinutes()},i.getSeconds=function(){return i.date.getSeconds()},i.getMilliseconds=function(){return i.date.getMilliseconds()},i.getTimezoneOffset=function(){return 60*e},i.getUTCFullYear=function(){return i.origDate.getUTCFullYear()},i.getUTCMonth=function(){return i.origDate.getUTCMonth()},i.getUTCDate=function(){return i.origDate.getUTCDate()},i.getUTCHours=function(){return i.origDate.getUTCHours()},i.getUTCMinutes=function(){return i.origDate.getUTCMinutes()},i.getUTCSeconds=function(){return i.origDate.getUTCSeconds()},i.getUTCMilliseconds=function(){return i.origDate.getUTCMilliseconds()},i.getDay=function(){return i.date.getDay()},i.toISOString&&(i.toISOString=function(){return o(i.origDate.getUTCFullYear(),4)+"-"+o(i.origDate.getUTCMonth()+1,2)+"-"+o(i.origDate.getUTCDate(),2)+"T"+o(i.origDate.getUTCHours(),2)+":"+o(i.origDate.getUTCMinutes(),2)+":"+o(i.origDate.getUTCSeconds(),2)+"."+o(i.origDate.getUTCMilliseconds(),3)+"Z"});var u=["getUTCDay","getYear","setDate","setFullYear","setHours","setMilliseconds","setMinutes","setMonth","setSeconds","setTime","setUTCDate","setUTCFullYear","setUTCHours","setUTCMilliseconds","setUTCMinutes","setUTCMonth","setUTCSeconds","setYear","toDateString","toGMTString","toJSON","toLocaleFormat","toLocaleString","toLocaleTimeString","toSource","toString","toTimeString","toUTCString","valueOf"];return t.forEach(u,function(e){i[e]=function(){throw new Error("Method '"+e+"' is not implemented in the TzDate mock")}}),i},t.mock.TzDate.prototype=Date.prototype,t.mock.animate=t.module("ngAnimateMock",["ng"]).config(["$provide",function(e){e.factory("$$forceReflow",function(){function e(){e.totalReflows++}return e.totalReflows=0,e}),e.factory("$$animateAsyncRun",function(){var e=[],t=function(){return function(t){e.push(t)}};return t.flush=function(){if(0===e.length)return!1;for(var t=0;t<e.length;t++)e[t]();return e=[],!0},t}),e.decorator("$$animateJs",["$delegate",function(e){var t=[],n=function(){var n=e.apply(e,arguments);return n&&t.push(n),n};return n.$closeAndFlush=function(){t.forEach(function(e){e.end()}),t=[]},n}]),e.decorator("$animateCss",["$delegate",function(e){var t=[],n=function(n,r){var i=e(n,r);return t.push(i),i};return n.$closeAndFlush=function(){t.forEach(function(e){e.end()}),t=[]},n}]),e.decorator("$animate",["$delegate","$timeout","$browser","$$rAF","$animateCss","$$animateJs","$$forceReflow","$$animateAsyncRun","$rootScope",function(e,n,r,i,o,a,s,u,c){var l={queue:[],cancel:e.cancel,on:e.on,off:e.off,pin:e.pin,get reflows(){return s.totalReflows},enabled:e.enabled,closeAndFlush:function(){this.flush(!0),o.$closeAndFlush(),a.$closeAndFlush(),this.flush()},flush:function(e){c.$digest();var t,n=!1;do t=!1,i.queue.length&&(i.flush(),t=n=!0),u.flush()&&(t=n=!0);while(t);if(!n&&!e)throw new Error("No pending animations ready to be closed or flushed");c.$digest()}};return t.forEach(["animate","enter","leave","move","addClass","removeClass","setClass"],function(t){l[t]=function(){return l.queue.push({event:t,element:arguments[0],options:arguments[arguments.length-1],args:arguments}),e[t].apply(e,arguments)}}),l}])}]),t.mock.dump=function(e){function n(e){var i;return t.isElement(e)?(e=t.element(e),i=t.element("<div></div>"),t.forEach(e,function(e){i.append(t.element(e).clone())}),i=i.html()):t.isArray(e)?(i=[],t.forEach(e,function(e){i.push(n(e))}),i="[ "+i.join(", ")+" ]"):i=t.isObject(e)?t.isFunction(e.$eval)&&t.isFunction(e.$apply)?r(e):e instanceof Error?e.stack||""+e.name+": "+e.message:t.toJson(e,!0):String(e),i}function r(e,n){n=n||"  ";var i=[n+"Scope("+e.$id+"): {"];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&!o.match(/^(\$|this)/)&&i.push("  "+o+": "+t.toJson(e[o]));for(var a=e.$$childHead;a;)i.push(r(a,n+"  ")),a=a.$$nextSibling;return i.push("}"),i.join("\n"+n)}return n(e)},t.mock.$HttpBackendProvider=function(){this.$get=["$rootScope","$timeout",a]},t.mock.$TimeoutDecorator=["$delegate","$browser",function(e,n){function r(e){var n=[];return t.forEach(e,function(e){n.push("{id: "+e.id+", time: "+e.time+"}")}),n.join(", ")}return e.flush=function(e){n.defer.flush(e)},e.verifyNoPendingTasks=function(){if(n.deferredFns.length)throw new Error("Deferred tasks to flush ("+n.deferredFns.length+"): "+r(n.deferredFns))},e}],t.mock.$RAFDecorator=["$delegate",function(e){var t=function(e){var n=t.queue.length;return t.queue.push(e),function(){t.queue.splice(n,1)}};return t.queue=[],t.supported=e.supported,t.flush=function(){if(0===t.queue.length)throw new Error("No rAF callbacks present");for(var e=t.queue.length,n=0;e>n;n++)t.queue[n]();t.queue=t.queue.slice(n)},t}],t.mock.$RootElementProvider=function(){this.$get=function(){return t.element("<div ng-app></div>")}},t.mock.$ControllerDecorator=["$delegate",function(e){return function(n,r,i,o){if(i&&"object"==typeof i){var a=e(n,r,!0,o);return t.extend(a.instance,i),a()}return e(n,r,i,o)}}],t.module("ngMock",["ng"]).provider({$browser:t.mock.$BrowserProvider,$exceptionHandler:t.mock.$ExceptionHandlerProvider,$log:t.mock.$LogProvider,$interval:t.mock.$IntervalProvider,$httpBackend:t.mock.$HttpBackendProvider,$rootElement:t.mock.$RootElementProvider}).config(["$provide",function(e){e.decorator("$timeout",t.mock.$TimeoutDecorator),e.decorator("$$rAF",t.mock.$RAFDecorator),e.decorator("$rootScope",t.mock.$RootScopeDecorator),e.decorator("$controller",t.mock.$ControllerDecorator)}]),t.module("ngMockE2E",["ng"]).config(["$provide",function(e){e.decorator("$httpBackend",t.mock.e2e.$httpBackendDecorator)}]),t.mock.e2e={},t.mock.e2e.$httpBackendDecorator=["$rootScope","$timeout","$delegate","$browser",a],t.mock.$RootScopeDecorator=["$delegate",function(e){function t(){for(var e,t=0,n=[this.$$childHead];n.length;)for(e=n.shift();e;)t+=1,n.push(e.$$childHead),e=e.$$nextSibling;return t}function n(){for(var e,t=this.$$watchers?this.$$watchers.length:0,n=[this.$$childHead];n.length;)for(e=n.shift();e;)t+=e.$$watchers?e.$$watchers.length:0,n.push(e.$$childHead),e=e.$$nextSibling;return t}var r=Object.getPrototypeOf(e);return r.$countChildScopes=t,r.$countWatchers=n,e}],e.jasmine||e.mocha){var l=null,f=[],p=function(){return!!l};t.mock.$$annotate=t.injector.$$annotate,t.injector.$$annotate=function(e){return"function"!=typeof e||e.$inject||f.push(e),t.mock.$$annotate.apply(this,arguments)},(e.beforeEach||e.setup)(function(){f=[],l=this}),(e.afterEach||e.teardown)(function(){var e=l.$injector;f.forEach(function(e){delete e.$inject}),t.forEach(l.$modules,function(e){e&&e.$$hashKey&&(e.$$hashKey=n)}),l.$injector=null,l.$modules=null,l=null,e&&e.get("$rootElement").off(),t.forEach(t.element.fragments,function(e,n){delete t.element.fragments[n]}),u.$$lastInstance=null,t.forEach(t.callbacks,function(e,n){delete t.callbacks[n]}),t.callbacks.counter=0}),e.module=t.mock.module=function(){function e(){if(l.$injector)throw new Error("Injector already created, can not register a module!");var e=l.$modules||(l.$modules=[]);t.forEach(n,function(n){t.isObject(n)&&!t.isArray(n)?e.push(function(e){t.forEach(n,function(t,n){e.value(n,t)})}):e.push(n)})}var n=Array.prototype.slice.call(arguments,0);return p()?e():e};var d=function(e,t){this.message=e.message,this.name=e.name,e.line&&(this.line=e.line),e.sourceId&&(this.sourceId=e.sourceId),e.stack&&t&&(this.stack=e.stack+"\n"+t.stack),e.stackArray&&(this.stackArray=e.stackArray)};d.prototype.toString=Error.prototype.toString,e.inject=t.mock.inject=function(){function e(){var e=l.$modules||[],i=!!l.$injectorStrict;e.unshift("ngMock"),e.unshift("ng");var o=l.$injector;o||(i&&t.forEach(e,function(e){"function"==typeof e&&t.injector.$$annotate(e)}),o=l.$injector=t.injector(e,i),l.$injectorStrict=i);for(var a=0,s=n.length;s>a;a++){l.$injectorStrict&&o.annotate(n[a]);try{o.invoke(n[a]||t.noop,this)}catch(u){if(u.stack&&r)throw new d(u,r);throw u}finally{r=null}}}var n=Array.prototype.slice.call(arguments,0),r=new Error("Declaration Location");return p()?e.call(l):e},t.mock.inject.strictDi=function(e){function t(){if(e!==l.$injectorStrict){if(l.$injector)throw new Error("Injector already created, can not modify strict annotations");l.$injectorStrict=e}}return e=arguments.length?!!e:!0,p()?t():t}}}(window,window.angular),require("./angular-mocks"),module.exports="ngAnimateMock",require("./angular-mocks"),module.exports="ngMock",require("./angular-mocks"),module.exports="ngMockE2E",function(e,t,n){function r(){function e(e,n){return t.extend(Object.create(e),n)}function n(e,t){var n=t.caseInsensitiveMatch,r={originalPath:e,regexp:e},i=r.keys=[];return e=e.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)([\?\*])?/g,function(e,t,n,r){var o="?"===r?r:null,a="*"===r?r:null;return i.push({name:n,optional:!!o}),t=t||"",""+(o?"":t)+"(?:"+(o?t:"")+(a&&"(.+?)"||"([^/]+)")+(o||"")+")"+(o||"")}).replace(/([\/$\*])/g,"\\$1"),r.regexp=new RegExp("^"+e+"$",n?"i":""),r}var r={};this.when=function(e,i){var o=t.copy(i);if(t.isUndefined(o.reloadOnSearch)&&(o.reloadOnSearch=!0),t.isUndefined(o.caseInsensitiveMatch)&&(o.caseInsensitiveMatch=this.caseInsensitiveMatch),r[e]=t.extend(o,e&&n(e,o)),e){var a="/"==e[e.length-1]?e.substr(0,e.length-1):e+"/";r[a]=t.extend({redirectTo:e},n(a,o))}return this},this.caseInsensitiveMatch=!1,this.otherwise=function(e){return"string"==typeof e&&(e={redirectTo:e}),this.when(null,e),this},this.$get=["$rootScope","$location","$routeParams","$q","$injector","$templateRequest","$sce",function(n,i,o,a,s,c,l){function f(e,t){var n=t.keys,r={};if(!t.regexp)return null;var i=t.regexp.exec(e);if(!i)return null;for(var o=1,a=i.length;a>o;++o){var s=n[o-1],u=i[o];s&&u&&(r[s.name]=u)}return r}function p(e){var r=y.current;$=h(),v=$&&r&&$.$$route===r.$$route&&t.equals($.pathParams,r.pathParams)&&!$.reloadOnSearch&&!g,v||!r&&!$||n.$broadcast("$routeChangeStart",$,r).defaultPrevented&&e&&e.preventDefault()}function d(){var e=y.current,r=$;v?(e.params=r.params,t.copy(e.params,o),n.$broadcast("$routeUpdate",e)):(r||e)&&(g=!1,y.current=r,r&&r.redirectTo&&(t.isString(r.redirectTo)?i.path(m(r.redirectTo,r.params)).search(r.params).replace():i.url(r.redirectTo(r.pathParams,i.path(),i.search())).replace()),a.when(r).then(function(){if(r){var e,n,i=t.extend({},r.resolve);return t.forEach(i,function(e,n){i[n]=t.isString(e)?s.get(e):s.invoke(e,null,null,n)}),t.isDefined(e=r.template)?t.isFunction(e)&&(e=e(r.params)):t.isDefined(n=r.templateUrl)&&(t.isFunction(n)&&(n=n(r.params)),t.isDefined(n)&&(r.loadedTemplateUrl=l.valueOf(n),e=c(n))),t.isDefined(e)&&(i.$template=e),a.all(i)}}).then(function(i){r==y.current&&(r&&(r.locals=i,t.copy(r.params,o)),n.$broadcast("$routeChangeSuccess",r,e))},function(t){r==y.current&&n.$broadcast("$routeChangeError",r,e,t)}))}function h(){var n,o;return t.forEach(r,function(r,a){!o&&(n=f(i.path(),r))&&(o=e(r,{params:t.extend({},i.search(),n),pathParams:n}),o.$$route=r)}),o||r[null]&&e(r[null],{params:{},pathParams:{}})}function m(e,n){var r=[];return t.forEach((e||"").split(":"),function(e,t){if(0===t)r.push(e);else{var i=e.match(/(\w+)(?:[?*])?(.*)/),o=i[1];r.push(n[o]),r.push(i[2]||""),delete n[o]}}),r.join("")}var $,v,g=!1,y={routes:r,reload:function(){g=!0,n.$evalAsync(function(){p(),d()})},updateParams:function(e){if(!this.current||!this.current.$$route)throw u("norout","Tried updating route when with no current route");e=t.extend({},this.current.params,e),i.path(m(this.current.$$route.originalPath,e)),i.search(e)}};return n.$on("$locationChangeStart",p),n.$on("$locationChangeSuccess",d),y}]}function i(){this.$get=function(){return{}}}function o(e,n,r){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(i,o,a,s,u){function c(){d&&(r.cancel(d),d=null),f&&(f.$destroy(),f=null),p&&(d=r.leave(p),d.then(function(){d=null}),p=null)}function l(){var a=e.current&&e.current.locals,s=a&&a.$template;if(t.isDefined(s)){var l=i.$new(),d=e.current,$=u(l,function(e){r.enter(e,null,p||o).then(function(){!t.isDefined(h)||h&&!i.$eval(h)||n()}),c()});p=$,f=d.scope=l,f.$emit("$viewContentLoaded"),f.$eval(m)}else c()}var f,p,d,h=a.autoscroll,m=a.onload||"";i.$on("$routeChangeSuccess",l),l()}}}function a(e,t,n){return{restrict:"ECA",priority:-400,link:function(r,i){var o=n.current,a=o.locals;i.html(a.$template);var s=e(i.contents());if(o.controller){a.$scope=r;var u=t(o.controller,a);o.controllerAs&&(r[o.controllerAs]=u),i.data("$ngControllerController",u),i.children().data("$ngControllerController",u)}s(r)}}}var s=t.module("ngRoute",["ng"]).provider("$route",r),u=t.$$minErr("ngRoute");s.provider("$routeParams",i),s.directive("ngView",o),s.directive("ngView",a),o.$inject=["$route","$anchorScroll","$animate"],a.$inject=["$compile","$controller","$route"]}(window,window.angular),function(e,t,n){function r(e,n,r){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(i,o,a,s,u){function c(){d&&(r.cancel(d),d=null),f&&(f.$destroy(),f=null),p&&(d=r.leave(p),d.then(function(){d=null}),p=null)}function l(){var a=e.current&&e.current.locals;if(t.isDefined(a&&a.$template)){var a=i.$new(),s=e.current;p=u(a,function(e){r.enter(e,null,p||o).then(function(){!t.isDefined(h)||h&&!i.$eval(h)||n()}),c()}),f=s.scope=a,f.$emit("$viewContentLoaded"),f.$eval(m)}else c()}var f,p,d,h=a.autoscroll,m=a.onload||"";i.$on("$routeChangeSuccess",l),l()}}}function i(e,t,n){return{restrict:"ECA",priority:-400,link:function(r,i){var o=n.current,a=o.locals;i.html(a.$template);var s=e(i.contents());o.controller&&(a.$scope=r,a=t(o.controller,a),o.controllerAs&&(r[o.controllerAs]=a),i.data("$ngControllerController",a),i.children().data("$ngControllerController",a)),s(r)}}}e=t.module("ngRoute",["ng"]).provider("$route",function(){function e(e,n){return t.extend(Object.create(e),n)}function n(e,t){var n=t.caseInsensitiveMatch,r={originalPath:e,regexp:e},i=r.keys=[];return e=e.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)([\?\*])?/g,function(e,t,n,r){return e="?"===r?r:null,r="*"===r?r:null,i.push({name:n,optional:!!e}),t=t||"",""+(e?"":t)+"(?:"+(e?t:"")+(r&&"(.+?)"||"([^/]+)")+(e||"")+")"+(e||"")}).replace(/([\/$\*])/g,"\\$1"),r.regexp=new RegExp("^"+e+"$",n?"i":""),r}var r={};this.when=function(e,i){var o=t.copy(i);if(t.isUndefined(o.reloadOnSearch)&&(o.reloadOnSearch=!0),t.isUndefined(o.caseInsensitiveMatch)&&(o.caseInsensitiveMatch=this.caseInsensitiveMatch),r[e]=t.extend(o,e&&n(e,o)),e){var a="/"==e[e.length-1]?e.substr(0,e.length-1):e+"/";r[a]=t.extend({redirectTo:e},n(a,o))}return this},this.caseInsensitiveMatch=!1,this.otherwise=function(e){return"string"==typeof e&&(e={redirectTo:e}),this.when(null,e),this},this.$get=["$rootScope","$location","$routeParams","$q","$injector","$templateRequest","$sce",function(n,i,a,s,u,c,l){function f(e){var r=g.current;($=(m=d())&&r&&m.$$route===r.$$route&&t.equals(m.pathParams,r.pathParams)&&!m.reloadOnSearch&&!v)||!r&&!m||n.$broadcast("$routeChangeStart",m,r).defaultPrevented&&e&&e.preventDefault()}function p(){var e=g.current,r=m;$?(e.params=r.params,t.copy(e.params,a),n.$broadcast("$routeUpdate",e)):(r||e)&&(v=!1,(g.current=r)&&r.redirectTo&&(t.isString(r.redirectTo)?i.path(h(r.redirectTo,r.params)).search(r.params).replace():i.url(r.redirectTo(r.pathParams,i.path(),i.search())).replace()),s.when(r).then(function(){if(r){var e,n,i=t.extend({},r.resolve);return t.forEach(i,function(e,n){i[n]=t.isString(e)?u.get(e):u.invoke(e,null,null,n)}),t.isDefined(e=r.template)?t.isFunction(e)&&(e=e(r.params)):t.isDefined(n=r.templateUrl)&&(t.isFunction(n)&&(n=n(r.params)),t.isDefined(n)&&(r.loadedTemplateUrl=l.valueOf(n),e=c(n))),t.isDefined(e)&&(i.$template=e),s.all(i)}}).then(function(i){r==g.current&&(r&&(r.locals=i,t.copy(r.params,a)),n.$broadcast("$routeChangeSuccess",r,e))},function(t){r==g.current&&n.$broadcast("$routeChangeError",r,e,t)}))}function d(){var n,o;return t.forEach(r,function(r,a){var s;if(s=!o){var u=i.path();s=r.keys;var c={};if(r.regexp)if(u=r.regexp.exec(u)){for(var l=1,f=u.length;f>l;++l){var p=s[l-1],d=u[l];p&&d&&(c[p.name]=d)}s=c}else s=null;else s=null;s=n=s}s&&(o=e(r,{params:t.extend({},i.search(),n),pathParams:n}),o.$$route=r)}),o||r[null]&&e(r[null],{params:{},pathParams:{}})}function h(e,n){var r=[];return t.forEach((e||"").split(":"),function(e,t){if(0===t)r.push(e);else{var i=e.match(/(\w+)(?:[?*])?(.*)/),o=i[1];r.push(n[o]),r.push(i[2]||""),delete n[o]}}),r.join("")}var m,$,v=!1,g={routes:r,reload:function(){v=!0,n.$evalAsync(function(){f(),p()})},updateParams:function(e){if(!this.current||!this.current.$$route)throw o("norout");e=t.extend({},this.current.params,e),i.path(h(this.current.$$route.originalPath,e)),i.search(e)}};return n.$on("$locationChangeStart",f),n.$on("$locationChangeSuccess",p),g}]});var o=t.$$minErr("ngRoute");e.provider("$routeParams",function(){this.$get=function(){return{}}}),e.directive("ngView",r),e.directive("ngView",i),r.$inject=["$route","$anchorScroll","$animate"],i.$inject=["$compile","$controller","$route"]}(window,window.angular),require("./angular-route"),module.exports="ngRoute";var fs=require("fs"),path=require("path"),gulp=require("gulp"),plugins=require("gulp-load-plugins")(),runSequence=require("run-sequence"),pkg=require("./package.json"),dirs=pkg["h5bp-configs"].directories;gulp.task("archive:create_archive_dir",function(){fs.mkdirSync(path.resolve(dirs.archive),"0755")}),gulp.task("archive:zip",function(e){var t=path.resolve(dirs.archive,pkg.name+"_v"+pkg.version+".zip"),n=require("archiver")("zip"),r=require("glob").sync("**/*.*",{cwd:dirs.dist,dot:!0}),i=fs.createWriteStream(t);n.on("error",function(t){throw e(),t}),i.on("close",e),r.forEach(function(e){var t=path.resolve(dirs.dist,e);n.append(fs.createReadStream(t),{name:e,mode:fs.statSync(t)})}),n.pipe(i),n.finalize()}),gulp.task("clean",function(e){require("del")([dirs.archive,dirs.dist],e)}),gulp.task("copy",["copy:.htaccess","copy:index.html","copy:jquery","copy:license","copy:main.css","copy:misc","copy:normalize"]),gulp.task("copy:.htaccess",function(){return gulp.src("node_modules/apache-server-configs/dist/.htaccess").pipe(plugins.replace(/# ErrorDocument/g,"ErrorDocument")).pipe(gulp.dest(dirs.dist))}),gulp.task("copy:index.html",function(){return gulp.src(dirs.src+"/index.html").pipe(plugins.replace(/{{JQUERY_VERSION}}/g,pkg.devDependencies.jquery)).pipe(gulp.dest(dirs.dist))}),gulp.task("copy:jquery",function(){return gulp.src(["node_modules/jquery/dist/jquery.min.js"]).pipe(plugins.rename("jquery-"+pkg.devDependencies.jquery+".min.js")).pipe(gulp.dest(dirs.dist+"/js/vendor"))}),gulp.task("copy:license",function(){return gulp.src("LICENSE.txt").pipe(gulp.dest(dirs.dist))}),gulp.task("copy:main.css",function(){var e="/*! HTML5 Boilerplate v"+pkg.version+" | "+pkg.license.type+" License | "+pkg.homepage+" */\n\n";return gulp.src(dirs.src+"/css/main.css").pipe(plugins.header(e)).pipe(plugins.autoprefixer({browsers:["last 2 versions","ie >= 8","> 1%"],cascade:!1})).pipe(gulp.dest(dirs.dist+"/css"))}),gulp.task("copy:misc",function(){return gulp.src([dirs.src+"/**/*","!"+dirs.src+"/css/main.css","!"+dirs.src+"/index.html"],{dot:!0}).pipe(gulp.dest(dirs.dist))}),gulp.task("copy:normalize",function(){return gulp.src("node_modules/normalize.css/normalize.css").pipe(gulp.dest(dirs.dist+"/css"))}),gulp.task("lint:js",function(){return gulp.src(["gulpfile.js",dirs.src+"/js/*.js",dirs.test+"/*.js"]).pipe(plugins.jscs()).pipe(plugins.jshint()).pipe(plugins.jshint.reporter("jshint-stylish")).pipe(plugins.jshint.reporter("fail"))}),gulp.task("archive",function(e){runSequence("build","archive:create_archive_dir","archive:zip",e)}),gulp.task("build",function(e){runSequence(["clean","lint:js"],"copy",e)}),gulp.task("default",["build"]);var assert=require("assert"),fs=require("fs"),path=require("path"),pkg=require("./../package.json"),dirs=pkg["h5bp-configs"].directories;runTests();var assert=require("assert"),fs=require("fs"),path=require("path"),pkg=require("./../package.json"),dirs=pkg["h5bp-configs"].directories,expectedFilesInArchiveDir=[pkg.name+"_v"+pkg.version+".zip"],expectedFilesInDistDir=[".editorconfig",".gitattributes",".gitignore",".htaccess","404.html","apple-touch-icon.png","browserconfig.xml","crossdomain.xml","css/","css/main.css","css/normalize.css","doc/","doc/TOC.md","doc/css.md","doc/extend.md","doc/faq.md","doc/html.md","doc/js.md","doc/misc.md","doc/usage.md","favicon.ico","humans.txt","img/","img/.gitignore","index.html","js/","js/main.js","js/plugins.js","js/vendor/","js/vendor/jquery-"+pkg.devDependencies.jquery+".min.js","js/vendor/modernizr-2.8.3.min.js","LICENSE.txt","robots.txt","tile-wide.png","tile.png"];runTests(),function(){for(var e,t=function(){},n=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],r=n.length,i=window.console=window.console||{};r--;)e=n[r],i[e]||(i[e]=t)}(),function(){for(var e,t=function(){},n=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],r=n.length,i=window.console=window.console||{};r--;)e=n[r],i[e]||(i[e]=t)}(),!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t="length"in e&&e.length,n=ie.type(e);return"function"===n||ie.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(ie.isFunction(t))return ie.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return ie.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(pe.test(t))return ie.filter(t,e,n);t=ie.filter(t,e)}return ie.grep(e,function(e){return ie.inArray(e,t)>=0!==n})}function i(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}function o(e){var t=be[e]={};return ie.each(e.match(ye)||[],function(e,n){t[n]=!0}),t}function a(){he.addEventListener?(he.removeEventListener("DOMContentLoaded",s,!1),e.removeEventListener("load",s,!1)):(he.detachEvent("onreadystatechange",s),e.detachEvent("onload",s))}function s(){(he.addEventListener||"load"===event.type||"complete"===he.readyState)&&(a(),ie.ready())}function u(e,t,n){if(void 0===n&&1===e.nodeType){var r="data-"+t.replace(Ce,"-$1").toLowerCase();if(n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:Ee.test(n)?ie.parseJSON(n):n}catch(i){}ie.data(e,t,n)}else n=void 0}return n}function c(e){var t;for(t in e)if(("data"!==t||!ie.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function l(e,t,n,r){if(ie.acceptData(e)){var i,o,a=ie.expando,s=e.nodeType,u=s?ie.cache:e,c=s?e[a]:e[a]&&a;if(c&&u[c]&&(r||u[c].data)||void 0!==n||"string"!=typeof t)return c||(c=s?e[a]=J.pop()||ie.guid++:a),u[c]||(u[c]=s?{}:{toJSON:ie.noop}),("object"==typeof t||"function"==typeof t)&&(r?u[c]=ie.extend(u[c],t):u[c].data=ie.extend(u[c].data,t)),o=u[c],r||(o.data||(o.data={}),o=o.data),void 0!==n&&(o[ie.camelCase(t)]=n),"string"==typeof t?(i=o[t],null==i&&(i=o[ie.camelCase(t)])):i=o,i}}function f(e,t,n){if(ie.acceptData(e)){var r,i,o=e.nodeType,a=o?ie.cache:e,s=o?e[ie.expando]:ie.expando;if(a[s]){if(t&&(r=n?a[s]:a[s].data)){ie.isArray(t)?t=t.concat(ie.map(t,ie.camelCase)):t in r?t=[t]:(t=ie.camelCase(t),t=t in r?[t]:t.split(" ")),i=t.length;for(;i--;)delete r[t[i]];if(n?!c(r):!ie.isEmptyObject(r))return}(n||(delete a[s].data,c(a[s])))&&(o?ie.cleanData([e],!0):ne.deleteExpando||a!=a.window?delete a[s]:a[s]=null)}}}function p(){return!0}function d(){return!1}function h(){try{return he.activeElement}catch(e){}}function m(e){var t=qe.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function $(e,t){var n,r,i=0,o=typeof e.getElementsByTagName!==Se?e.getElementsByTagName(t||"*"):typeof e.querySelectorAll!==Se?e.querySelectorAll(t||"*"):void 0;if(!o)for(o=[],n=e.childNodes||e;null!=(r=n[i]);i++)!t||ie.nodeName(r,t)?o.push(r):ie.merge(o,$(r,t));return void 0===t||t&&ie.nodeName(e,t)?ie.merge([e],o):o}function v(e){Oe.test(e.type)&&(e.defaultChecked=e.checked)}function g(e,t){return ie.nodeName(e,"table")&&ie.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function y(e){return e.type=(null!==ie.find.attr(e,"type"))+"/"+e.type,e}function b(e){var t=Ge.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function x(e,t){for(var n,r=0;null!=(n=e[r]);r++)ie._data(n,"globalEval",!t||ie._data(t[r],"globalEval"))}function w(e,t){if(1===t.nodeType&&ie.hasData(e)){var n,r,i,o=ie._data(e),a=ie._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)ie.event.add(t,n,s[n][r])}a.data&&(a.data=ie.extend({},a.data))}}function S(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!ne.noCloneEvent&&t[ie.expando]){i=ie._data(t);for(r in i.events)ie.removeEvent(t,r,i.handle);t.removeAttribute(ie.expando)}"script"===n&&t.text!==e.text?(y(t).text=e.text,b(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),ne.html5Clone&&e.innerHTML&&!ie.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Oe.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}}function E(t,n){var r,i=ie(n.createElement(t)).appendTo(n.body),o=e.getDefaultComputedStyle&&(r=e.getDefaultComputedStyle(i[0]))?r.display:ie.css(i[0],"display");return i.detach(),o}function C(e){var t=he,n=Qe[e];return n||(n=E(e,t),"none"!==n&&n||(Ze=(Ze||ie("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=(Ze[0].contentWindow||Ze[0].contentDocument).document,t.write(),t.close(),n=E(e,t),Ze.detach()),Qe[e]=n),n}function k(e,t){return{get:function(){var n=e();return null!=n?n?void delete this.get:(this.get=t).apply(this,arguments):void 0}}}function T(e,t){if(t in e)return t;for(var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=pt.length;i--;)if(t=pt[i]+n,t in e)return t;return r}function A(e,t){for(var n,r,i,o=[],a=0,s=e.length;s>a;a++)r=e[a],r.style&&(o[a]=ie._data(r,"olddisplay"),n=r.style.display,t?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&Ae(r)&&(o[a]=ie._data(r,"olddisplay",C(r.nodeName)))):(i=Ae(r),(n&&"none"!==n||!i)&&ie._data(r,"olddisplay",i?n:ie.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}function N(e,t,n){var r=ut.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function O(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;4>o;o+=2)"margin"===n&&(a+=ie.css(e,n+Te[o],!0,i)),r?("content"===n&&(a-=ie.css(e,"padding"+Te[o],!0,i)),"margin"!==n&&(a-=ie.css(e,"border"+Te[o]+"Width",!0,i))):(a+=ie.css(e,"padding"+Te[o],!0,i),"padding"!==n&&(a+=ie.css(e,"border"+Te[o]+"Width",!0,i)));return a}function j(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=et(e),a=ne.boxSizing&&"border-box"===ie.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=tt(e,t,o),(0>i||null==i)&&(i=e.style[t]),rt.test(i))return i;r=a&&(ne.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+O(e,t,n||(a?"border":"content"),r,o)+"px"}function M(e,t,n,r,i){return new M.prototype.init(e,t,n,r,i)}function D(){return setTimeout(function(){dt=void 0}),dt=ie.now()}function P(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=Te[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function V(e,t,n){
for(var r,i=(yt[t]||[]).concat(yt["*"]),o=0,a=i.length;a>o;o++)if(r=i[o].call(n,t,e))return r}function q(e,t,n){var r,i,o,a,s,u,c,l,f=this,p={},d=e.style,h=e.nodeType&&Ae(e),m=ie._data(e,"fxshow");n.queue||(s=ie._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,u=s.empty.fire,s.empty.fire=function(){s.unqueued||u()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,ie.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],c=ie.css(e,"display"),l="none"===c?ie._data(e,"olddisplay")||C(e.nodeName):c,"inline"===l&&"none"===ie.css(e,"float")&&(ne.inlineBlockNeedsLayout&&"inline"!==C(e.nodeName)?d.zoom=1:d.display="inline-block")),n.overflow&&(d.overflow="hidden",ne.shrinkWrapBlocks()||f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],mt.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;h=!0}p[r]=m&&m[r]||ie.style(e,r)}else c=void 0;if(ie.isEmptyObject(p))"inline"===("none"===c?C(e.nodeName):c)&&(d.display=c);else{m?"hidden"in m&&(h=m.hidden):m=ie._data(e,"fxshow",{}),o&&(m.hidden=!h),h?ie(e).show():f.done(function(){ie(e).hide()}),f.done(function(){var t;ie._removeData(e,"fxshow");for(t in p)ie.style(e,t,p[t])});for(r in p)a=V(h?m[r]:0,r,f),r in m||(m[r]=a.start,h&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function R(e,t){var n,r,i,o,a;for(n in e)if(r=ie.camelCase(n),i=t[r],o=e[n],ie.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),a=ie.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function F(e,t,n){var r,i,o=0,a=gt.length,s=ie.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=dt||D(),n=Math.max(0,c.startTime+c.duration-t),r=n/c.duration||0,o=1-r,a=0,u=c.tweens.length;u>a;a++)c.tweens[a].run(o);return s.notifyWith(e,[c,o,n]),1>o&&u?n:(s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:ie.extend({},t),opts:ie.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:dt||D(),duration:n.duration,tweens:[],createTween:function(t,n){var r=ie.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)c.tweens[n].run(1);return t?s.resolveWith(e,[c,t]):s.rejectWith(e,[c,t]),this}}),l=c.props;for(R(l,c.opts.specialEasing);a>o;o++)if(r=gt[o].call(c,e,l,c.opts))return r;return ie.map(l,V,c),ie.isFunction(c.opts.start)&&c.opts.start.call(e,c),ie.fx.timer(ie.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function I(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(ye)||[];if(ie.isFunction(n))for(;r=o[i++];)"+"===r.charAt(0)?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function _(e,t,n,r){function i(s){var u;return o[s]=!0,ie.each(e[s]||[],function(e,s){var c=s(t,n,r);return"string"!=typeof c||a||o[c]?a?!(u=c):void 0:(t.dataTypes.unshift(c),i(c),!1)}),u}var o={},a=e===Ut;return i(t.dataTypes[0])||!o["*"]&&i("*")}function H(e,t){var n,r,i=ie.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((i[r]?e:n||(n={}))[r]=t[r]);return n&&ie.extend(!0,e,n),e}function L(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(a in s)if(s[a]&&s[a].test(i)){u.unshift(a);break}if(u[0]in n)o=u[0];else{for(a in n){if(!u[0]||e.converters[a+" "+u[0]]){o=a;break}r||(r=a)}o=o||r}return o?(o!==u[0]&&u.unshift(o),n[o]):void 0}function U(e,t,n,r){var i,o,a,s,u,c={},l=e.dataTypes.slice();if(l[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(a=c[u+" "+o]||c["* "+o],!a)for(i in c)if(s=i.split(" "),s[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){a===!0?a=c[i]:c[i]!==!0&&(o=s[0],l.unshift(s[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(f){return{state:"parsererror",error:a?f:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function B(e,t,n,r){var i;if(ie.isArray(t))ie.each(t,function(t,i){n||Gt.test(e)?r(e,i):B(e+"["+("object"==typeof i?t:"")+"]",i,n,r)});else if(n||"object"!==ie.type(t))r(e,t);else for(i in t)B(e+"["+i+"]",t[i],n,r)}function z(){try{return new e.XMLHttpRequest}catch(t){}}function W(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function G(e){return ie.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}var J=[],Y=J.slice,X=J.concat,K=J.push,Z=J.indexOf,Q={},ee=Q.toString,te=Q.hasOwnProperty,ne={},re="1.11.3",ie=function(e,t){return new ie.fn.init(e,t)},oe=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ae=/^-ms-/,se=/-([\da-z])/gi,ue=function(e,t){return t.toUpperCase()};ie.fn=ie.prototype={jquery:re,constructor:ie,selector:"",length:0,toArray:function(){return Y.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:Y.call(this)},pushStack:function(e){var t=ie.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return ie.each(this,e,t)},map:function(e){return this.pushStack(ie.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(Y.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:K,sort:J.sort,splice:J.splice},ie.extend=ie.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||ie.isFunction(a)||(a={}),s===u&&(a=this,s--);u>s;s++)if(null!=(i=arguments[s]))for(r in i)e=a[r],n=i[r],a!==n&&(c&&n&&(ie.isPlainObject(n)||(t=ie.isArray(n)))?(t?(t=!1,o=e&&ie.isArray(e)?e:[]):o=e&&ie.isPlainObject(e)?e:{},a[r]=ie.extend(c,o,n)):void 0!==n&&(a[r]=n));return a},ie.extend({expando:"jQuery"+(re+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===ie.type(e)},isArray:Array.isArray||function(e){return"array"===ie.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!ie.isArray(e)&&e-parseFloat(e)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==ie.type(e)||e.nodeType||ie.isWindow(e))return!1;try{if(e.constructor&&!te.call(e,"constructor")&&!te.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}if(ne.ownLast)for(t in e)return te.call(e,t);for(t in e);return void 0===t||te.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?Q[ee.call(e)]||"object":typeof e},globalEval:function(t){t&&ie.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(ae,"ms-").replace(se,ue)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,r){var i,o=0,a=e.length,s=n(e);if(r){if(s)for(;a>o&&(i=t.apply(e[o],r),i!==!1);o++);else for(o in e)if(i=t.apply(e[o],r),i===!1)break}else if(s)for(;a>o&&(i=t.call(e[o],o,e[o]),i!==!1);o++);else for(o in e)if(i=t.call(e[o],o,e[o]),i===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(oe,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?ie.merge(r,"string"==typeof e?[e]:e):K.call(r,e)),r},inArray:function(e,t,n){var r;if(t){if(Z)return Z.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;)e[i++]=t[r++];if(n!==n)for(;void 0!==t[r];)e[i++]=t[r++];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;a>o;o++)r=!t(e[o],o),r!==s&&i.push(e[o]);return i},map:function(e,t,r){var i,o=0,a=e.length,s=n(e),u=[];if(s)for(;a>o;o++)i=t(e[o],o,r),null!=i&&u.push(i);else for(o in e)i=t(e[o],o,r),null!=i&&u.push(i);return X.apply([],u)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(i=e[t],t=e,e=i),ie.isFunction(e)?(n=Y.call(arguments,2),r=function(){return e.apply(t||this,n.concat(Y.call(arguments)))},r.guid=e.guid=e.guid||ie.guid++,r):void 0},now:function(){return+new Date},support:ne}),ie.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){Q["[object "+t+"]"]=t.toLowerCase()});var ce=function(e){function t(e,t,n,r){var i,o,a,s,u,c,f,d,h,m;if((t?t.ownerDocument||t:_)!==M&&j(t),t=t||M,n=n||[],s=t.nodeType,"string"!=typeof e||!e||1!==s&&9!==s&&11!==s)return n;if(!r&&P){if(11!==s&&(i=ge.exec(e)))if(a=i[1]){if(9===s){if(o=t.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(a))&&F(t,o)&&o.id===a)return n.push(o),n}else{if(i[2])return Z.apply(n,t.getElementsByTagName(e)),n;if((a=i[3])&&x.getElementsByClassName)return Z.apply(n,t.getElementsByClassName(a)),n}if(x.qsa&&(!V||!V.test(e))){if(d=f=I,h=t,m=1!==s&&e,1===s&&"object"!==t.nodeName.toLowerCase()){for(c=C(e),(f=t.getAttribute("id"))?d=f.replace(be,"\\$&"):t.setAttribute("id",d),d="[id='"+d+"'] ",u=c.length;u--;)c[u]=d+p(c[u]);h=ye.test(e)&&l(t.parentNode)||t,m=c.join(",")}if(m)try{return Z.apply(n,h.querySelectorAll(m)),n}catch($){}finally{f||t.removeAttribute("id")}}}return T(e.replace(ue,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[I]=!0,e}function i(e){var t=M.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=e.length;r--;)w.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||G)-(~e.sourceIndex||G);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function l(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function p(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function d(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=L++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,a){var s,u,c=[H,o];if(a){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,a))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(u=t[I]||(t[I]={}),(s=u[r])&&s[0]===H&&s[1]===o)return c[2]=s[2];if(u[r]=c,c[2]=e(t,n,a))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function m(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function $(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,c=null!=t;u>s;s++)(o=e[s])&&(!n||n(o,r,i))&&(a.push(o),c&&t.push(s));return a}function v(e,t,n,i,o,a){return i&&!i[I]&&(i=v(i)),o&&!o[I]&&(o=v(o,a)),r(function(r,a,s,u){var c,l,f,p=[],d=[],h=a.length,v=r||m(t||"*",s.nodeType?[s]:s,[]),g=!e||!r&&t?v:$(v,p,e,s,u),y=n?o||(r?e:h||i)?[]:a:g;if(n&&n(g,y,s,u),i)for(c=$(y,d),i(c,[],s,u),l=c.length;l--;)(f=c[l])&&(y[d[l]]=!(g[d[l]]=f));if(r){if(o||e){if(o){for(c=[],l=y.length;l--;)(f=y[l])&&c.push(g[l]=f);o(null,y=[],c,u)}for(l=y.length;l--;)(f=y[l])&&(c=o?ee(r,f):p[l])>-1&&(r[c]=!(a[c]=f))}}else y=$(y===a?y.splice(h,y.length):y),o?o(null,a,y,u):Z.apply(a,y)})}function g(e){for(var t,n,r,i=e.length,o=w.relative[e[0].type],a=o||w.relative[" "],s=o?1:0,u=d(function(e){return e===t},a,!0),c=d(function(e){return ee(t,e)>-1},a,!0),l=[function(e,n,r){var i=!o&&(r||n!==A)||((t=n).nodeType?u(e,n,r):c(e,n,r));return t=null,i}];i>s;s++)if(n=w.relative[e[s].type])l=[d(h(l),n)];else{if(n=w.filter[e[s].type].apply(null,e[s].matches),n[I]){for(r=++s;i>r&&!w.relative[e[r].type];r++);return v(s>1&&h(l),s>1&&p(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(ue,"$1"),n,r>s&&g(e.slice(s,r)),i>r&&g(e=e.slice(r)),i>r&&p(e))}l.push(n)}return h(l)}function y(e,n){var i=n.length>0,o=e.length>0,a=function(r,a,s,u,c){var l,f,p,d=0,h="0",m=r&&[],v=[],g=A,y=r||o&&w.find.TAG("*",c),b=H+=null==g?1:Math.random()||.1,x=y.length;for(c&&(A=a!==M&&a);h!==x&&null!=(l=y[h]);h++){if(o&&l){for(f=0;p=e[f++];)if(p(l,a,s)){u.push(l);break}c&&(H=b)}i&&((l=!p&&l)&&d--,r&&m.push(l))}if(d+=h,i&&h!==d){for(f=0;p=n[f++];)p(m,v,a,s);if(r){if(d>0)for(;h--;)m[h]||v[h]||(v[h]=X.call(u));v=$(v)}Z.apply(u,v),c&&!r&&v.length>0&&d+n.length>1&&t.uniqueSort(u)}return c&&(H=b,A=g),m};return i?r(a):a}var b,x,w,S,E,C,k,T,A,N,O,j,M,D,P,V,q,R,F,I="sizzle"+1*new Date,_=e.document,H=0,L=0,U=n(),B=n(),z=n(),W=function(e,t){return e===t&&(O=!0),0},G=1<<31,J={}.hasOwnProperty,Y=[],X=Y.pop,K=Y.push,Z=Y.push,Q=Y.slice,ee=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie=re.replace("w","w#"),oe="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ie+"))|)"+ne+"*\\]",ae=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+oe+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ue=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ce=new RegExp("^"+ne+"*,"+ne+"*"),le=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),fe=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),pe=new RegExp(ae),de=new RegExp("^"+ie+"$"),he={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re.replace("w","w*")+")"),ATTR:new RegExp("^"+oe),PSEUDO:new RegExp("^"+ae),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},me=/^(?:input|select|textarea|button)$/i,$e=/^h\d$/i,ve=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,be=/'|\\/g,xe=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),we=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},Se=function(){j()};try{Z.apply(Y=Q.call(_.childNodes),_.childNodes),Y[_.childNodes.length].nodeType}catch(Ee){Z={apply:Y.length?function(e,t){K.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},E=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},j=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:_;return r!==M&&9===r.nodeType&&r.documentElement?(M=r,D=r.documentElement,n=r.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Se,!1):n.attachEvent&&n.attachEvent("onunload",Se)),P=!E(r),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(r.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=ve.test(r.getElementsByClassName),x.getById=i(function(e){return D.appendChild(e).id=I,!r.getElementsByName||!r.getElementsByName(I).length}),x.getById?(w.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&P){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},w.filter.ID=function(e){var t=e.replace(xe,we);return function(e){return e.getAttribute("id")===t}}):(delete w.find.ID,w.filter.ID=function(e){var t=e.replace(xe,we);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),w.find.TAG=x.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},w.find.CLASS=x.getElementsByClassName&&function(e,t){return P?t.getElementsByClassName(e):void 0},q=[],V=[],(x.qsa=ve.test(r.querySelectorAll))&&(i(function(e){D.appendChild(e).innerHTML="<a id='"+I+"'></a><select id='"+I+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&V.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||V.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+I+"-]").length||V.push("~="),e.querySelectorAll(":checked").length||V.push(":checked"),e.querySelectorAll("a#"+I+"+*").length||V.push(".#.+[+~]")}),i(function(e){var t=r.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&V.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||V.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),V.push(",.*:")})),(x.matchesSelector=ve.test(R=D.matches||D.webkitMatchesSelector||D.mozMatchesSelector||D.oMatchesSelector||D.msMatchesSelector))&&i(function(e){x.disconnectedMatch=R.call(e,"div"),R.call(e,"[s!='']:x"),q.push("!=",ae)}),V=V.length&&new RegExp(V.join("|")),q=q.length&&new RegExp(q.join("|")),t=ve.test(D.compareDocumentPosition),F=t||ve.test(D.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},W=t?function(e,t){if(e===t)return O=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===r||e.ownerDocument===_&&F(_,e)?-1:t===r||t.ownerDocument===_&&F(_,t)?1:N?ee(N,e)-ee(N,t):0:4&n?-1:1)}:function(e,t){if(e===t)return O=!0,0;var n,i=0,o=e.parentNode,s=t.parentNode,u=[e],c=[t];if(!o||!s)return e===r?-1:t===r?1:o?-1:s?1:N?ee(N,e)-ee(N,t):0;if(o===s)return a(e,t);for(n=e;n=n.parentNode;)u.unshift(n);for(n=t;n=n.parentNode;)c.unshift(n);for(;u[i]===c[i];)i++;return i?a(u[i],c[i]):u[i]===_?-1:c[i]===_?1:0},r):M},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==M&&j(e),n=n.replace(fe,"='$1']"),!(!x.matchesSelector||!P||q&&q.test(n)||V&&V.test(n)))try{var r=R.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,M,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==M&&j(e),F(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==M&&j(e);var n=w.attrHandle[t.toLowerCase()],r=n&&J.call(w.attrHandle,t.toLowerCase())?n(e,t,!P):void 0;return void 0!==r?r:x.attributes||!P?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(O=!x.detectDuplicates,N=!x.sortStable&&e.slice(0),e.sort(W),O){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return N=null,e},S=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=S(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=S(t);return n},w=t.selectors={cacheLength:50,createPseudo:r,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xe,we),e[3]=(e[3]||e[4]||e[5]||"").replace(xe,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return he.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&pe.test(n)&&(t=C(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xe,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=U[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&U(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(se," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,p,d,h,m=o!==a?"nextSibling":"previousSibling",$=t.parentNode,v=s&&t.nodeName.toLowerCase(),g=!u&&!s;if($){if(o){for(;m;){for(f=t;f=f[m];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?$.firstChild:$.lastChild],a&&g){for(l=$[I]||($[I]={}),c=l[e]||[],d=c[0]===H&&c[1],p=c[0]===H&&c[2],f=d&&$.childNodes[d];f=++d&&f&&f[m]||(p=d=0)||h.pop();)if(1===f.nodeType&&++p&&f===t){l[e]=[H,d,p];break}}else if(g&&(c=(t[I]||(t[I]={}))[e])&&c[0]===H)p=c[1];else for(;(f=++d&&f&&f[m]||(p=d=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++p||(g&&((f[I]||(f[I]={}))[e]=[H,p]),f!==t)););return p-=i,p===r||p%r===0&&p/r>=0}}},PSEUDO:function(e,n){var i,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[I]?o(n):o.length>1?(i=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)r=ee(e,i[a]),e[r]=!(t[r]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=k(e.replace(ue,"$1"));return i[I]?r(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(xe,we),function(t){return(t.textContent||t.innerText||S(t)).indexOf(e)>-1}}),lang:r(function(e){return de.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(xe,we).toLowerCase(),function(t){var n;do if(n=P?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===D},focus:function(e){return e===M.activeElement&&(!M.hasFocus||M.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return $e.test(e.nodeName)},input:function(e){return me.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:c(function(){return[0]}),last:c(function(e,t){return[t-1]}),eq:c(function(e,t,n){return[0>n?n+t:n]}),even:c(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:c(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:c(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:c(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},w.pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=s(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=u(b);return f.prototype=w.filters=w.pseudos,w.setFilters=new f,C=t.tokenize=function(e,n){var r,i,o,a,s,u,c,l=B[e+" "];if(l)return n?0:l.slice(0);for(s=e,u=[],c=w.preFilter;s;){(!r||(i=ce.exec(s)))&&(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),r=!1,(i=le.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ue," ")}),s=s.slice(r.length));for(a in w.filter)!(i=he[a].exec(s))||c[a]&&!(i=c[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):B(e,u).slice(0)},k=t.compile=function(e,t){var n,r=[],i=[],o=z[e+" "];if(!o){for(t||(t=C(e)),n=t.length;n--;)o=g(t[n]),o[I]?r.push(o):i.push(o);o=z(e,y(i,r)),o.selector=e}return o},T=t.select=function(e,t,n,r){var i,o,a,s,u,c="function"==typeof e&&e,f=!r&&C(e=c.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&x.getById&&9===t.nodeType&&P&&w.relative[o[1].type]){if(t=(w.find.ID(a.matches[0].replace(xe,we),t)||[])[0],!t)return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=he.needsContext.test(e)?0:o.length;i--&&(a=o[i],!w.relative[s=a.type]);)if((u=w.find[s])&&(r=u(a.matches[0].replace(xe,we),ye.test(o[0].type)&&l(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&p(o),!e)return Z.apply(n,r),n;break}}return(c||k(e,f))(r,t,!P,n,ye.test(e)&&l(t.parentNode)||t),n},x.sortStable=I.split("").sort(W).join("")===I,x.detectDuplicates=!!O,j(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(M.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);ie.find=ce,ie.expr=ce.selectors,ie.expr[":"]=ie.expr.pseudos,ie.unique=ce.uniqueSort,ie.text=ce.getText,ie.isXMLDoc=ce.isXML,ie.contains=ce.contains;var le=ie.expr.match.needsContext,fe=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,pe=/^.[^:#\[\.,]*$/;ie.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?ie.find.matchesSelector(r,e)?[r]:[]:ie.find.matches(e,ie.grep(t,function(e){return 1===e.nodeType}))},ie.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(ie(e).filter(function(){for(t=0;i>t;t++)if(ie.contains(r[t],this))return!0}));for(t=0;i>t;t++)ie.find(e,r[t],n);return n=this.pushStack(i>1?ie.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&le.test(e)?ie(e):e||[],!1).length}});var de,he=e.document,me=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,$e=ie.fn.init=function(e,t){var n,r;if(!e)return this;if("string"==typeof e){if(n="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:me.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||de).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof ie?t[0]:t,ie.merge(this,ie.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:he,!0)),fe.test(n[1])&&ie.isPlainObject(t))for(n in t)ie.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}if(r=he.getElementById(n[2]),r&&r.parentNode){if(r.id!==n[2])return de.find(e);this.length=1,this[0]=r}return this.context=he,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):ie.isFunction(e)?"undefined"!=typeof de.ready?de.ready(e):e(ie):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),ie.makeArray(e,this))};$e.prototype=ie.fn,de=ie(he);var ve=/^(?:parents|prev(?:Until|All))/,ge={children:!0,contents:!0,next:!0,prev:!0};ie.extend({dir:function(e,t,n){for(var r=[],i=e[t];i&&9!==i.nodeType&&(void 0===n||1!==i.nodeType||!ie(i).is(n));)1===i.nodeType&&r.push(i),i=i[t];return r},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),ie.fn.extend({has:function(e){var t,n=ie(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(ie.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],a=le.test(e)||"string"!=typeof e?ie(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&ie.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?ie.unique(o):o)},index:function(e){return e?"string"==typeof e?ie.inArray(this[0],ie(e)):ie.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ie.unique(ie.merge(this.get(),ie(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ie.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return ie.dir(e,"parentNode")},parentsUntil:function(e,t,n){return ie.dir(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return ie.dir(e,"nextSibling")},prevAll:function(e){return ie.dir(e,"previousSibling")},nextUntil:function(e,t,n){return ie.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return ie.dir(e,"previousSibling",n)},siblings:function(e){return ie.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return ie.sibling(e.firstChild)},contents:function(e){return ie.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:ie.merge([],e.childNodes)}},function(e,t){ie.fn[e]=function(n,r){var i=ie.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=ie.filter(r,i)),this.length>1&&(ge[e]||(i=ie.unique(i)),ve.test(e)&&(i=i.reverse())),this.pushStack(i)}});var ye=/\S+/g,be={};ie.Callbacks=function(e){e="string"==typeof e?be[e]||o(e):ie.extend({},e);var t,n,r,i,a,s,u=[],c=!e.once&&[],l=function(o){for(n=e.memory&&o,r=!0,a=s||0,s=0,i=u.length,t=!0;u&&i>a;a++)if(u[a].apply(o[0],o[1])===!1&&e.stopOnFalse){n=!1;break}t=!1,u&&(c?c.length&&l(c.shift()):n?u=[]:f.disable())},f={add:function(){if(u){var r=u.length;!function o(t){ie.each(t,function(t,n){var r=ie.type(n);"function"===r?e.unique&&f.has(n)||u.push(n):n&&n.length&&"string"!==r&&o(n)})}(arguments),t?i=u.length:n&&(s=r,l(n))}return this},remove:function(){return u&&ie.each(arguments,function(e,n){for(var r;(r=ie.inArray(n,u,r))>-1;)u.splice(r,1),t&&(i>=r&&i--,a>=r&&a--)}),this},has:function(e){return e?ie.inArray(e,u)>-1:!(!u||!u.length)},empty:function(){return u=[],i=0,this},disable:function(){return u=c=n=void 0,this},disabled:function(){return!u;
},lock:function(){return c=void 0,n||f.disable(),this},locked:function(){return!c},fireWith:function(e,n){return!u||r&&!c||(n=n||[],n=[e,n.slice?n.slice():n],t?c.push(n):l(n)),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!r}};return f},ie.extend({Deferred:function(e){var t=[["resolve","done",ie.Callbacks("once memory"),"resolved"],["reject","fail",ie.Callbacks("once memory"),"rejected"],["notify","progress",ie.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return ie.Deferred(function(n){ie.each(t,function(t,o){var a=ie.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&ie.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?ie.extend(e,r):r}},i={};return r.pipe=r.then,ie.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=Y.call(arguments),a=o.length,s=1!==a||e&&ie.isFunction(e.promise)?a:0,u=1===s?e:ie.Deferred(),c=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?Y.call(arguments):i,r===t?u.notifyWith(n,r):--s||u.resolveWith(n,r)}};if(a>1)for(t=new Array(a),n=new Array(a),r=new Array(a);a>i;i++)o[i]&&ie.isFunction(o[i].promise)?o[i].promise().done(c(i,r,o)).fail(u.reject).progress(c(i,n,t)):--s;return s||u.resolveWith(r,o),u.promise()}});var xe;ie.fn.ready=function(e){return ie.ready.promise().done(e),this},ie.extend({isReady:!1,readyWait:1,holdReady:function(e){e?ie.readyWait++:ie.ready(!0)},ready:function(e){if(e===!0?!--ie.readyWait:!ie.isReady){if(!he.body)return setTimeout(ie.ready);ie.isReady=!0,e!==!0&&--ie.readyWait>0||(xe.resolveWith(he,[ie]),ie.fn.triggerHandler&&(ie(he).triggerHandler("ready"),ie(he).off("ready")))}}}),ie.ready.promise=function(t){if(!xe)if(xe=ie.Deferred(),"complete"===he.readyState)setTimeout(ie.ready);else if(he.addEventListener)he.addEventListener("DOMContentLoaded",s,!1),e.addEventListener("load",s,!1);else{he.attachEvent("onreadystatechange",s),e.attachEvent("onload",s);var n=!1;try{n=null==e.frameElement&&he.documentElement}catch(r){}n&&n.doScroll&&!function i(){if(!ie.isReady){try{n.doScroll("left")}catch(e){return setTimeout(i,50)}a(),ie.ready()}}()}return xe.promise(t)};var we,Se="undefined";for(we in ie(ne))break;ne.ownLast="0"!==we,ne.inlineBlockNeedsLayout=!1,ie(function(){var e,t,n,r;n=he.getElementsByTagName("body")[0],n&&n.style&&(t=he.createElement("div"),r=he.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),typeof t.style.zoom!==Se&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",ne.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(r))}),function(){var e=he.createElement("div");if(null==ne.deleteExpando){ne.deleteExpando=!0;try{delete e.test}catch(t){ne.deleteExpando=!1}}e=null}(),ie.acceptData=function(e){var t=ie.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return 1!==n&&9!==n?!1:!t||t!==!0&&e.getAttribute("classid")===t};var Ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ce=/([A-Z])/g;ie.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?ie.cache[e[ie.expando]]:e[ie.expando],!!e&&!c(e)},data:function(e,t,n){return l(e,t,n)},removeData:function(e,t){return f(e,t)},_data:function(e,t,n){return l(e,t,n,!0)},_removeData:function(e,t){return f(e,t,!0)}}),ie.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=ie.data(o),1===o.nodeType&&!ie._data(o,"parsedAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=ie.camelCase(r.slice(5)),u(o,r,i[r])));ie._data(o,"parsedAttrs",!0)}return i}return"object"==typeof e?this.each(function(){ie.data(this,e)}):arguments.length>1?this.each(function(){ie.data(this,e,t)}):o?u(o,e,ie.data(o,e)):void 0},removeData:function(e){return this.each(function(){ie.removeData(this,e)})}}),ie.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=ie._data(e,t),n&&(!r||ie.isArray(n)?r=ie._data(e,t,ie.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=ie.queue(e,t),r=n.length,i=n.shift(),o=ie._queueHooks(e,t),a=function(){ie.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ie._data(e,n)||ie._data(e,n,{empty:ie.Callbacks("once memory").add(function(){ie._removeData(e,t+"queue"),ie._removeData(e,n)})})}}),ie.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?ie.queue(this[0],e):void 0===t?this:this.each(function(){var n=ie.queue(this,e,t);ie._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&ie.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ie.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=ie.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)n=ie._data(o[a],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ke=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Te=["Top","Right","Bottom","Left"],Ae=function(e,t){return e=t||e,"none"===ie.css(e,"display")||!ie.contains(e.ownerDocument,e)},Ne=ie.access=function(e,t,n,r,i,o,a){var s=0,u=e.length,c=null==n;if("object"===ie.type(n)){i=!0;for(s in n)ie.access(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,ie.isFunction(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(ie(e),n)})),t))for(;u>s;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:c?t.call(e):u?t(e[0],n):o},Oe=/^(?:checkbox|radio)$/i;!function(){var e=he.createElement("input"),t=he.createElement("div"),n=he.createDocumentFragment();if(t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",ne.leadingWhitespace=3===t.firstChild.nodeType,ne.tbody=!t.getElementsByTagName("tbody").length,ne.htmlSerialize=!!t.getElementsByTagName("link").length,ne.html5Clone="<:nav></:nav>"!==he.createElement("nav").cloneNode(!0).outerHTML,e.type="checkbox",e.checked=!0,n.appendChild(e),ne.appendChecked=e.checked,t.innerHTML="<textarea>x</textarea>",ne.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue,n.appendChild(t),t.innerHTML="<input type='radio' checked='checked' name='t'/>",ne.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,ne.noCloneEvent=!0,t.attachEvent&&(t.attachEvent("onclick",function(){ne.noCloneEvent=!1}),t.cloneNode(!0).click()),null==ne.deleteExpando){ne.deleteExpando=!0;try{delete t.test}catch(r){ne.deleteExpando=!1}}}(),function(){var t,n,r=he.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(ne[t+"Bubbles"]=n in e)||(r.setAttribute(n,"t"),ne[t+"Bubbles"]=r.attributes[n].expando===!1);r=null}();var je=/^(?:input|select|textarea)$/i,Me=/^key/,De=/^(?:mouse|pointer|contextmenu)|click/,Pe=/^(?:focusinfocus|focusoutblur)$/,Ve=/^([^.]*)(?:\.(.+)|)$/;ie.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,c,l,f,p,d,h,m,$=ie._data(e);if($){for(n.handler&&(u=n,n=u.handler,i=u.selector),n.guid||(n.guid=ie.guid++),(a=$.events)||(a=$.events={}),(l=$.handle)||(l=$.handle=function(e){return typeof ie===Se||e&&ie.event.triggered===e.type?void 0:ie.event.dispatch.apply(l.elem,arguments)},l.elem=e),t=(t||"").match(ye)||[""],s=t.length;s--;)o=Ve.exec(t[s])||[],d=m=o[1],h=(o[2]||"").split(".").sort(),d&&(c=ie.event.special[d]||{},d=(i?c.delegateType:c.bindType)||d,c=ie.event.special[d]||{},f=ie.extend({type:d,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&ie.expr.match.needsContext.test(i),namespace:h.join(".")},u),(p=a[d])||(p=a[d]=[],p.delegateCount=0,c.setup&&c.setup.call(e,r,h,l)!==!1||(e.addEventListener?e.addEventListener(d,l,!1):e.attachEvent&&e.attachEvent("on"+d,l))),c.add&&(c.add.call(e,f),f.handler.guid||(f.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,f):p.push(f),ie.event.global[d]=!0);e=null}},remove:function(e,t,n,r,i){var o,a,s,u,c,l,f,p,d,h,m,$=ie.hasData(e)&&ie._data(e);if($&&(l=$.events)){for(t=(t||"").match(ye)||[""],c=t.length;c--;)if(s=Ve.exec(t[c])||[],d=m=s[1],h=(s[2]||"").split(".").sort(),d){for(f=ie.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,p=l[d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=o=p.length;o--;)a=p[o],!i&&m!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&("**"!==r||!a.selector)||(p.splice(o,1),a.selector&&p.delegateCount--,f.remove&&f.remove.call(e,a));u&&!p.length&&(f.teardown&&f.teardown.call(e,h,$.handle)!==!1||ie.removeEvent(e,d,$.handle),delete l[d])}else for(d in l)ie.event.remove(e,d+t[c],n,r,!0);ie.isEmptyObject(l)&&(delete $.handle,ie._removeData(e,"events"))}},trigger:function(t,n,r,i){var o,a,s,u,c,l,f,p=[r||he],d=te.call(t,"type")?t.type:t,h=te.call(t,"namespace")?t.namespace.split("."):[];if(s=l=r=r||he,3!==r.nodeType&&8!==r.nodeType&&!Pe.test(d+ie.event.triggered)&&(d.indexOf(".")>=0&&(h=d.split("."),d=h.shift(),h.sort()),a=d.indexOf(":")<0&&"on"+d,t=t[ie.expando]?t:new ie.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:ie.makeArray(n,[t]),c=ie.event.special[d]||{},i||!c.trigger||c.trigger.apply(r,n)!==!1)){if(!i&&!c.noBubble&&!ie.isWindow(r)){for(u=c.delegateType||d,Pe.test(u+d)||(s=s.parentNode);s;s=s.parentNode)p.push(s),l=s;l===(r.ownerDocument||he)&&p.push(l.defaultView||l.parentWindow||e)}for(f=0;(s=p[f++])&&!t.isPropagationStopped();)t.type=f>1?u:c.bindType||d,o=(ie._data(s,"events")||{})[t.type]&&ie._data(s,"handle"),o&&o.apply(s,n),o=a&&s[a],o&&o.apply&&ie.acceptData(s)&&(t.result=o.apply(s,n),t.result===!1&&t.preventDefault());if(t.type=d,!i&&!t.isDefaultPrevented()&&(!c._default||c._default.apply(p.pop(),n)===!1)&&ie.acceptData(r)&&a&&r[d]&&!ie.isWindow(r)){l=r[a],l&&(r[a]=null),ie.event.triggered=d;try{r[d]()}catch(m){}ie.event.triggered=void 0,l&&(r[a]=l)}return t.result}},dispatch:function(e){e=ie.event.fix(e);var t,n,r,i,o,a=[],s=Y.call(arguments),u=(ie._data(this,"events")||{})[e.type]||[],c=ie.event.special[e.type]||{};if(s[0]=e,e.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,e)!==!1){for(a=ie.event.handlers.call(this,e,u),t=0;(i=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,o=0;(r=i.handlers[o++])&&!e.isImmediatePropagationStopped();)(!e.namespace_re||e.namespace_re.test(r.namespace))&&(e.handleObj=r,e.data=r.data,n=((ie.event.special[r.origType]||{}).handle||r.handler).apply(i.elem,s),void 0!==n&&(e.result=n)===!1&&(e.preventDefault(),e.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,a=[],s=t.delegateCount,u=e.target;if(s&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!=this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(i=[],o=0;s>o;o++)r=t[o],n=r.selector+" ",void 0===i[n]&&(i[n]=r.needsContext?ie(n,this).index(u)>=0:ie.find(n,this,null,[u]).length),i[n]&&i.push(r);i.length&&a.push({elem:u,handlers:i})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},fix:function(e){if(e[ie.expando])return e;var t,n,r,i=e.type,o=e,a=this.fixHooks[i];for(a||(this.fixHooks[i]=a=De.test(i)?this.mouseHooks:Me.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new ie.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=o.srcElement||he),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,a.filter?a.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button,a=t.fromElement;return null==e.pageX&&null!=t.clientX&&(r=e.target.ownerDocument||he,i=r.documentElement,n=r.body,e.pageX=t.clientX+(i&&i.scrollLeft||n&&n.scrollLeft||0)-(i&&i.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(i&&i.scrollTop||n&&n.scrollTop||0)-(i&&i.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&a&&(e.relatedTarget=a===e.target?t.toElement:a),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==h()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===h()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return ie.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(e){return ie.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=ie.extend(new ie.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?ie.event.trigger(i,null,t):ie.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},ie.removeEvent=he.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(typeof e[r]===Se&&(e[r]=null),e.detachEvent(r,n))},ie.Event=function(e,t){return this instanceof ie.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?p:d):this.type=e,t&&ie.extend(this,t),this.timeStamp=e&&e.timeStamp||ie.now(),void(this[ie.expando]=!0)):new ie.Event(e,t)},ie.Event.prototype={isDefaultPrevented:d,isPropagationStopped:d,isImmediatePropagationStopped:d,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=p,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=p,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=p,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},ie.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ie.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!ie.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),ne.submitBubbles||(ie.event.special.submit={setup:function(){return ie.nodeName(this,"form")?!1:void ie.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=ie.nodeName(t,"input")||ie.nodeName(t,"button")?t.form:void 0;n&&!ie._data(n,"submitBubbles")&&(ie.event.add(n,"submit._submit",function(e){e._submit_bubble=!0}),ie._data(n,"submitBubbles",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&ie.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return ie.nodeName(this,"form")?!1:void ie.event.remove(this,"._submit")}}),ne.changeBubbles||(ie.event.special.change={setup:function(){return je.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(ie.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),ie.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),ie.event.simulate("change",this,e,!0)})),!1):void ie.event.add(this,"beforeactivate._change",function(e){var t=e.target;je.test(t.nodeName)&&!ie._data(t,"changeBubbles")&&(ie.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||ie.event.simulate("change",this.parentNode,e,!0)}),ie._data(t,"changeBubbles",!0))})},handle:function(e){var t=e.target;return this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type?e.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return ie.event.remove(this,"._change"),!je.test(this.nodeName)}}),ne.focusinBubbles||ie.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){ie.event.simulate(t,e.target,ie.event.fix(e),!0)};ie.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=ie._data(r,t);i||r.addEventListener(e,n,!0),ie._data(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=ie._data(r,t)-1;i?ie._data(r,t,i):(r.removeEventListener(e,n,!0),ie._removeData(r,t))}}}),ie.fn.extend({on:function(e,t,n,r,i){var o,a;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(o in e)this.on(o,t,n,e[o],i);return this}if(null==n&&null==r?(r=t,n=t=void 0):null==r&&("string"==typeof t?(r=n,n=void 0):(r=n,n=t,t=void 0)),r===!1)r=d;else if(!r)return this;return 1===i&&(a=r,r=function(e){return ie().off(e),a.apply(this,arguments)},r.guid=a.guid||(a.guid=ie.guid++)),this.each(function(){ie.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,ie(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=d),this.each(function(){ie.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){ie.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?ie.event.trigger(e,t,n,!0):void 0}});var qe="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",Re=/ jQuery\d+="(?:null|\d+)"/g,Fe=new RegExp("<(?:"+qe+")[\\s/>]","i"),Ie=/^\s+/,_e=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,He=/<([\w:]+)/,Le=/<tbody/i,Ue=/<|&#?\w+;/,Be=/<(?:script|style|link)/i,ze=/checked\s*(?:[^=]|=\s*.checked.)/i,We=/^$|\/(?:java|ecma)script/i,Ge=/^true\/(.*)/,Je=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Ye={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:ne.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},Xe=m(he),Ke=Xe.appendChild(he.createElement("div"));Ye.optgroup=Ye.option,Ye.tbody=Ye.tfoot=Ye.colgroup=Ye.caption=Ye.thead,Ye.th=Ye.td,ie.extend({clone:function(e,t,n){var r,i,o,a,s,u=ie.contains(e.ownerDocument,e);if(ne.html5Clone||ie.isXMLDoc(e)||!Fe.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Ke.innerHTML=e.outerHTML,Ke.removeChild(o=Ke.firstChild)),!(ne.noCloneEvent&&ne.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ie.isXMLDoc(e)))for(r=$(o),s=$(e),a=0;null!=(i=s[a]);++a)r[a]&&S(i,r[a]);if(t)if(n)for(s=s||$(e),r=r||$(o),a=0;null!=(i=s[a]);a++)w(i,r[a]);else w(e,o);return r=$(o,"script"),r.length>0&&x(r,!u&&$(e,"script")),r=s=i=null,o},buildFragment:function(e,t,n,r){for(var i,o,a,s,u,c,l,f=e.length,p=m(t),d=[],h=0;f>h;h++)if(o=e[h],o||0===o)if("object"===ie.type(o))ie.merge(d,o.nodeType?[o]:o);else if(Ue.test(o)){for(s=s||p.appendChild(t.createElement("div")),u=(He.exec(o)||["",""])[1].toLowerCase(),l=Ye[u]||Ye._default,s.innerHTML=l[1]+o.replace(_e,"<$1></$2>")+l[2],i=l[0];i--;)s=s.lastChild;if(!ne.leadingWhitespace&&Ie.test(o)&&d.push(t.createTextNode(Ie.exec(o)[0])),!ne.tbody)for(o="table"!==u||Le.test(o)?"<table>"!==l[1]||Le.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;i--;)ie.nodeName(c=o.childNodes[i],"tbody")&&!c.childNodes.length&&o.removeChild(c);for(ie.merge(d,s.childNodes),s.textContent="";s.firstChild;)s.removeChild(s.firstChild);s=p.lastChild}else d.push(t.createTextNode(o));for(s&&p.removeChild(s),ne.appendChecked||ie.grep($(d,"input"),v),h=0;o=d[h++];)if((!r||-1===ie.inArray(o,r))&&(a=ie.contains(o.ownerDocument,o),s=$(p.appendChild(o),"script"),a&&x(s),n))for(i=0;o=s[i++];)We.test(o.type||"")&&n.push(o);return s=null,p},cleanData:function(e,t){for(var n,r,i,o,a=0,s=ie.expando,u=ie.cache,c=ne.deleteExpando,l=ie.event.special;null!=(n=e[a]);a++)if((t||ie.acceptData(n))&&(i=n[s],o=i&&u[i])){if(o.events)for(r in o.events)l[r]?ie.event.remove(n,r):ie.removeEvent(n,r,o.handle);u[i]&&(delete u[i],c?delete n[s]:typeof n.removeAttribute!==Se?n.removeAttribute(s):n[s]=null,J.push(i))}}}),ie.fn.extend({text:function(e){return Ne(this,function(e){return void 0===e?ie.text(this):this.empty().append((this[0]&&this[0].ownerDocument||he).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=g(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=g(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,r=e?ie.filter(e,this):this,i=0;null!=(n=r[i]);i++)t||1!==n.nodeType||ie.cleanData($(n)),n.parentNode&&(t&&ie.contains(n.ownerDocument,n)&&x($(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&ie.cleanData($(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&ie.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return ie.clone(this,e,t)})},html:function(e){return Ne(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(Re,""):void 0;if(!("string"!=typeof e||Be.test(e)||!ne.htmlSerialize&&Fe.test(e)||!ne.leadingWhitespace&&Ie.test(e)||Ye[(He.exec(e)||["",""])[1].toLowerCase()])){e=e.replace(_e,"<$1></$2>");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(ie.cleanData($(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,ie.cleanData($(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=X.apply([],e);var n,r,i,o,a,s,u=0,c=this.length,l=this,f=c-1,p=e[0],d=ie.isFunction(p);if(d||c>1&&"string"==typeof p&&!ne.checkClone&&ze.test(p))return this.each(function(n){var r=l.eq(n);d&&(e[0]=p.call(this,n,r.html())),r.domManip(e,t)});if(c&&(s=ie.buildFragment(e,this[0].ownerDocument,!1,this),n=s.firstChild,1===s.childNodes.length&&(s=n),n)){for(o=ie.map($(s,"script"),y),i=o.length;c>u;u++)r=s,u!==f&&(r=ie.clone(r,!0,!0),i&&ie.merge(o,$(r,"script"))),t.call(this[u],r,u);if(i)for(a=o[o.length-1].ownerDocument,ie.map(o,b),u=0;i>u;u++)r=o[u],We.test(r.type||"")&&!ie._data(r,"globalEval")&&ie.contains(a,r)&&(r.src?ie._evalUrl&&ie._evalUrl(r.src):ie.globalEval((r.text||r.textContent||r.innerHTML||"").replace(Je,"")));s=n=null}return this}}),ie.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ie.fn[e]=function(e){for(var n,r=0,i=[],o=ie(e),a=o.length-1;a>=r;r++)n=r===a?this:this.clone(!0),ie(o[r])[t](n),K.apply(i,n.get());return this.pushStack(i)}});var Ze,Qe={};!function(){var e;ne.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,r;return n=he.getElementsByTagName("body")[0],n&&n.style?(t=he.createElement("div"),r=he.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),typeof t.style.zoom!==Se&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(he.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(r),e):void 0}}();var et,tt,nt=/^margin/,rt=new RegExp("^("+ke+")(?!px)[a-z%]+$","i"),it=/^(top|right|bottom|left)$/;e.getComputedStyle?(et=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)},tt=function(e,t,n){var r,i,o,a,s=e.style;return n=n||et(e),a=n?n.getPropertyValue(t)||n[t]:void 0,n&&(""!==a||ie.contains(e.ownerDocument,e)||(a=ie.style(e,t)),rt.test(a)&&nt.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0===a?a:a+""}):he.documentElement.currentStyle&&(et=function(e){return e.currentStyle},tt=function(e,t,n){var r,i,o,a,s=e.style;return n=n||et(e),a=n?n[t]:void 0,null==a&&s&&s[t]&&(a=s[t]),rt.test(a)&&!it.test(t)&&(r=s.left,i=e.runtimeStyle,o=i&&i.left,o&&(i.left=e.currentStyle.left),s.left="fontSize"===t?"1em":a,a=s.pixelLeft+"px",s.left=r,o&&(i.left=o)),void 0===a?a:a+""||"auto"}),!function(){function t(){var t,n,r,i;n=he.getElementsByTagName("body")[0],n&&n.style&&(t=he.createElement("div"),r=he.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),t.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",o=a=!1,u=!0,e.getComputedStyle&&(o="1%"!==(e.getComputedStyle(t,null)||{}).top,a="4px"===(e.getComputedStyle(t,null)||{width:"4px"}).width,i=t.appendChild(he.createElement("div")),i.style.cssText=t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",t.style.width="1px",u=!parseFloat((e.getComputedStyle(i,null)||{}).marginRight),t.removeChild(i)),t.innerHTML="<table><tr><td></td><td>t</td></tr></table>",i=t.getElementsByTagName("td"),i[0].style.cssText="margin:0;border:0;padding:0;display:none",s=0===i[0].offsetHeight,s&&(i[0].style.display="",i[1].style.display="none",s=0===i[0].offsetHeight),n.removeChild(r))}var n,r,i,o,a,s,u;n=he.createElement("div"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",i=n.getElementsByTagName("a")[0],(r=i&&i.style)&&(r.cssText="float:left;opacity:.5",ne.opacity="0.5"===r.opacity,ne.cssFloat=!!r.cssFloat,n.style.backgroundClip="content-box",n.cloneNode(!0).style.backgroundClip="",ne.clearCloneStyle="content-box"===n.style.backgroundClip,ne.boxSizing=""===r.boxSizing||""===r.MozBoxSizing||""===r.WebkitBoxSizing,ie.extend(ne,{reliableHiddenOffsets:function(){return null==s&&t(),s},boxSizingReliable:function(){return null==a&&t(),a},pixelPosition:function(){return null==o&&t(),o},reliableMarginRight:function(){return null==u&&t(),u}}))}(),ie.swap=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i};var ot=/alpha\([^)]*\)/i,at=/opacity\s*=\s*([^)]*)/,st=/^(none|table(?!-c[ea]).+)/,ut=new RegExp("^("+ke+")(.*)$","i"),ct=new RegExp("^([+-])=("+ke+")","i"),lt={position:"absolute",visibility:"hidden",display:"block"},ft={letterSpacing:"0",fontWeight:"400"},pt=["Webkit","O","Moz","ms"];ie.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=tt(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":ne.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=ie.camelCase(t),u=e.style;if(t=ie.cssProps[s]||(ie.cssProps[s]=T(u,s)),a=ie.cssHooks[t]||ie.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];if(o=typeof n,"string"===o&&(i=ct.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(ie.css(e,t)),o="number"),null!=n&&n===n&&("number"!==o||ie.cssNumber[s]||(n+="px"),ne.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),!(a&&"set"in a&&void 0===(n=a.set(e,n,r)))))try{u[t]=n}catch(c){}}},css:function(e,t,n,r){var i,o,a,s=ie.camelCase(t);return t=ie.cssProps[s]||(ie.cssProps[s]=T(e.style,s)),a=ie.cssHooks[t]||ie.cssHooks[s],a&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=tt(e,t,r)),"normal"===o&&t in ft&&(o=ft[t]),""===n||n?(i=parseFloat(o),n===!0||ie.isNumeric(i)?i||0:o):o}}),ie.each(["height","width"],function(e,t){ie.cssHooks[t]={get:function(e,n,r){return n?st.test(ie.css(e,"display"))&&0===e.offsetWidth?ie.swap(e,lt,function(){return j(e,t,r)}):j(e,t,r):void 0},set:function(e,n,r){var i=r&&et(e);return N(e,n,r?O(e,t,r,ne.boxSizing&&"border-box"===ie.css(e,"boxSizing",!1,i),i):0)}}}),ne.opacity||(ie.cssHooks.opacity={get:function(e,t){return at.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=ie.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===ie.trim(o.replace(ot,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=ot.test(o)?o.replace(ot,i):o+" "+i)}}),ie.cssHooks.marginRight=k(ne.reliableMarginRight,function(e,t){return t?ie.swap(e,{display:"inline-block"},tt,[e,"marginRight"]):void 0}),ie.each({margin:"",padding:"",border:"Width"},function(e,t){ie.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+Te[r]+t]=o[r]||o[r-2]||o[0];return i}},nt.test(e)||(ie.cssHooks[e+t].set=N)}),ie.fn.extend({css:function(e,t){return Ne(this,function(e,t,n){var r,i,o={},a=0;if(ie.isArray(t)){for(r=et(e),i=t.length;i>a;a++)o[t[a]]=ie.css(e,t[a],!1,r);return o}return void 0!==n?ie.style(e,t,n):ie.css(e,t)},e,t,arguments.length>1)},show:function(){return A(this,!0)},hide:function(){return A(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ae(this)?ie(this).show():ie(this).hide()})}}),ie.Tween=M,M.prototype={constructor:M,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(ie.cssNumber[n]?"":"px")},cur:function(){var e=M.propHooks[this.prop];return e&&e.get?e.get(this):M.propHooks._default.get(this)},run:function(e){var t,n=M.propHooks[this.prop];return this.options.duration?this.pos=t=ie.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):M.propHooks._default.set(this),this}},M.prototype.init.prototype=M.prototype,M.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=ie.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){ie.fx.step[e.prop]?ie.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[ie.cssProps[e.prop]]||ie.cssHooks[e.prop])?ie.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now;
}}},M.propHooks.scrollTop=M.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ie.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},ie.fx=M.prototype.init,ie.fx.step={};var dt,ht,mt=/^(?:toggle|show|hide)$/,$t=new RegExp("^(?:([+-])=|)("+ke+")([a-z%]*)$","i"),vt=/queueHooks$/,gt=[q],yt={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=$t.exec(t),o=i&&i[3]||(ie.cssNumber[e]?"":"px"),a=(ie.cssNumber[e]||"px"!==o&&+r)&&$t.exec(ie.css(n.elem,e)),s=1,u=20;if(a&&a[3]!==o){o=o||a[3],i=i||[],a=+r||1;do s=s||".5",a/=s,ie.style(n.elem,e,a+o);while(s!==(s=n.cur()/r)&&1!==s&&--u)}return i&&(a=n.start=+a||+r||0,n.unit=o,n.end=i[1]?a+(i[1]+1)*i[2]:+i[2]),n}]};ie.Animation=ie.extend(F,{tweener:function(e,t){ie.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,r=0,i=e.length;i>r;r++)n=e[r],yt[n]=yt[n]||[],yt[n].unshift(t)},prefilter:function(e,t){t?gt.unshift(e):gt.push(e)}}),ie.speed=function(e,t,n){var r=e&&"object"==typeof e?ie.extend({},e):{complete:n||!n&&t||ie.isFunction(e)&&e,duration:e,easing:n&&t||t&&!ie.isFunction(t)&&t};return r.duration=ie.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in ie.fx.speeds?ie.fx.speeds[r.duration]:ie.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){ie.isFunction(r.old)&&r.old.call(this),r.queue&&ie.dequeue(this,r.queue)},r},ie.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=ie.isEmptyObject(e),o=ie.speed(t,n,r),a=function(){var t=F(this,ie.extend({},e),o);(i||ie._data(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=ie.timers,a=ie._data(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&vt.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&ie.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=ie._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=ie.timers,a=r?r.length:0;for(n.finish=!0,ie.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),ie.each(["toggle","show","hide"],function(e,t){var n=ie.fn[t];ie.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(P(t,!0),e,r,i)}}),ie.each({slideDown:P("show"),slideUp:P("hide"),slideToggle:P("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ie.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),ie.timers=[],ie.fx.tick=function(){var e,t=ie.timers,n=0;for(dt=ie.now();n<t.length;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||ie.fx.stop(),dt=void 0},ie.fx.timer=function(e){ie.timers.push(e),e()?ie.fx.start():ie.timers.pop()},ie.fx.interval=13,ie.fx.start=function(){ht||(ht=setInterval(ie.fx.tick,ie.fx.interval))},ie.fx.stop=function(){clearInterval(ht),ht=null},ie.fx.speeds={slow:600,fast:200,_default:400},ie.fn.delay=function(e,t){return e=ie.fx?ie.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},function(){var e,t,n,r,i;t=he.createElement("div"),t.setAttribute("className","t"),t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",r=t.getElementsByTagName("a")[0],n=he.createElement("select"),i=n.appendChild(he.createElement("option")),e=t.getElementsByTagName("input")[0],r.style.cssText="top:1px",ne.getSetAttribute="t"!==t.className,ne.style=/top/.test(r.getAttribute("style")),ne.hrefNormalized="/a"===r.getAttribute("href"),ne.checkOn=!!e.value,ne.optSelected=i.selected,ne.enctype=!!he.createElement("form").enctype,n.disabled=!0,ne.optDisabled=!i.disabled,e=he.createElement("input"),e.setAttribute("value",""),ne.input=""===e.getAttribute("value"),e.value="t",e.setAttribute("type","radio"),ne.radioValue="t"===e.value}();var bt=/\r/g;ie.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=ie.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,ie(this).val()):e,null==i?i="":"number"==typeof i?i+="":ie.isArray(i)&&(i=ie.map(i,function(e){return null==e?"":e+""})),t=ie.valHooks[this.type]||ie.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=ie.valHooks[i.type]||ie.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(bt,""):null==n?"":n)):void 0}}),ie.extend({valHooks:{option:{get:function(e){var t=ie.find.attr(e,"value");return null!=t?t:ie.trim(ie.text(e))}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,u=0>i?s:o?i:0;s>u;u++)if(n=r[u],!(!n.selected&&u!==i||(ne.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&ie.nodeName(n.parentNode,"optgroup"))){if(t=ie(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=ie.makeArray(t),a=i.length;a--;)if(r=i[a],ie.inArray(ie.valHooks.option.get(r),o)>=0)try{r.selected=n=!0}catch(s){r.scrollHeight}else r.selected=!1;return n||(e.selectedIndex=-1),i}}}}),ie.each(["radio","checkbox"],function(){ie.valHooks[this]={set:function(e,t){return ie.isArray(t)?e.checked=ie.inArray(ie(e).val(),t)>=0:void 0}},ne.checkOn||(ie.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var xt,wt,St=ie.expr.attrHandle,Et=/^(?:checked|selected)$/i,Ct=ne.getSetAttribute,kt=ne.input;ie.fn.extend({attr:function(e,t){return Ne(this,ie.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ie.removeAttr(this,e)})}}),ie.extend({attr:function(e,t,n){var r,i,o=e.nodeType;return e&&3!==o&&8!==o&&2!==o?typeof e.getAttribute===Se?ie.prop(e,t,n):(1===o&&ie.isXMLDoc(e)||(t=t.toLowerCase(),r=ie.attrHooks[t]||(ie.expr.match.bool.test(t)?wt:xt)),void 0===n?r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=ie.find.attr(e,t),null==i?void 0:i):null!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):void ie.removeAttr(e,t)):void 0},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(ye);if(o&&1===e.nodeType)for(;n=o[i++];)r=ie.propFix[n]||n,ie.expr.match.bool.test(n)?kt&&Ct||!Et.test(n)?e[r]=!1:e[ie.camelCase("default-"+n)]=e[r]=!1:ie.attr(e,n,""),e.removeAttribute(Ct?n:r)},attrHooks:{type:{set:function(e,t){if(!ne.radioValue&&"radio"===t&&ie.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),wt={set:function(e,t,n){return t===!1?ie.removeAttr(e,n):kt&&Ct||!Et.test(n)?e.setAttribute(!Ct&&ie.propFix[n]||n,n):e[ie.camelCase("default-"+n)]=e[n]=!0,n}},ie.each(ie.expr.match.bool.source.match(/\w+/g),function(e,t){var n=St[t]||ie.find.attr;St[t]=kt&&Ct||!Et.test(t)?function(e,t,r){var i,o;return r||(o=St[t],St[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,St[t]=o),i}:function(e,t,n){return n?void 0:e[ie.camelCase("default-"+t)]?t.toLowerCase():null}}),kt&&Ct||(ie.attrHooks.value={set:function(e,t,n){return ie.nodeName(e,"input")?void(e.defaultValue=t):xt&&xt.set(e,t,n)}}),Ct||(xt={set:function(e,t,n){var r=e.getAttributeNode(n);return r||e.setAttributeNode(r=e.ownerDocument.createAttribute(n)),r.value=t+="","value"===n||t===e.getAttribute(n)?t:void 0}},St.id=St.name=St.coords=function(e,t,n){var r;return n?void 0:(r=e.getAttributeNode(t))&&""!==r.value?r.value:null},ie.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);return n&&n.specified?n.value:void 0},set:xt.set},ie.attrHooks.contenteditable={set:function(e,t,n){xt.set(e,""===t?!1:t,n)}},ie.each(["width","height"],function(e,t){ie.attrHooks[t]={set:function(e,n){return""===n?(e.setAttribute(t,"auto"),n):void 0}}})),ne.style||(ie.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var Tt=/^(?:input|select|textarea|button|object)$/i,At=/^(?:a|area)$/i;ie.fn.extend({prop:function(e,t){return Ne(this,ie.prop,e,t,arguments.length>1)},removeProp:function(e){return e=ie.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(t){}})}}),ie.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,i,o,a=e.nodeType;return e&&3!==a&&8!==a&&2!==a?(o=1!==a||!ie.isXMLDoc(e),o&&(t=ie.propFix[t]||t,i=ie.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]):void 0},propHooks:{tabIndex:{get:function(e){var t=ie.find.attr(e,"tabindex");return t?parseInt(t,10):Tt.test(e.nodeName)||At.test(e.nodeName)&&e.href?0:-1}}}}),ne.hrefNormalized||ie.each(["href","src"],function(e,t){ie.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),ne.optSelected||(ie.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),ie.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ie.propFix[this.toLowerCase()]=this}),ne.enctype||(ie.propFix.enctype="encoding");var Nt=/[\t\r\n\f]/g;ie.fn.extend({addClass:function(e){var t,n,r,i,o,a,s=0,u=this.length,c="string"==typeof e&&e;if(ie.isFunction(e))return this.each(function(t){ie(this).addClass(e.call(this,t,this.className))});if(c)for(t=(e||"").match(ye)||[];u>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Nt," "):" ")){for(o=0;i=t[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");a=ie.trim(r),n.className!==a&&(n.className=a)}return this},removeClass:function(e){var t,n,r,i,o,a,s=0,u=this.length,c=0===arguments.length||"string"==typeof e&&e;if(ie.isFunction(e))return this.each(function(t){ie(this).removeClass(e.call(this,t,this.className))});if(c)for(t=(e||"").match(ye)||[];u>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Nt," "):"")){for(o=0;i=t[o++];)for(;r.indexOf(" "+i+" ")>=0;)r=r.replace(" "+i+" "," ");a=e?ie.trim(r):"",n.className!==a&&(n.className=a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):this.each(ie.isFunction(e)?function(n){ie(this).toggleClass(e.call(this,n,this.className,t),t)}:function(){if("string"===n)for(var t,r=0,i=ie(this),o=e.match(ye)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else(n===Se||"boolean"===n)&&(this.className&&ie._data(this,"__className__",this.className),this.className=this.className||e===!1?"":ie._data(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,r=this.length;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(Nt," ").indexOf(t)>=0)return!0;return!1}}),ie.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){ie.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),ie.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var Ot=ie.now(),jt=/\?/,Mt=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;ie.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,r=null,i=ie.trim(t+"");return i&&!ie.trim(i.replace(Mt,function(e,t,i,o){return n&&t&&(r=0),0===r?e:(n=i||t,r+=!o-!i,"")}))?Function("return "+i)():ie.error("Invalid JSON: "+t)},ie.parseXML=function(t){var n,r;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(r=new DOMParser,n=r.parseFromString(t,"text/xml")):(n=new ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(t))}catch(i){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||ie.error("Invalid XML: "+t),n};var Dt,Pt,Vt=/#.*$/,qt=/([?&])_=[^&]*/,Rt=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Ft=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,It=/^(?:GET|HEAD)$/,_t=/^\/\//,Ht=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Lt={},Ut={},Bt="*/".concat("*");try{Pt=location.href}catch(zt){Pt=he.createElement("a"),Pt.href="",Pt=Pt.href}Dt=Ht.exec(Pt.toLowerCase())||[],ie.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Pt,type:"GET",isLocal:Ft.test(Dt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ie.parseJSON,"text xml":ie.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?H(H(e,ie.ajaxSettings),t):H(ie.ajaxSettings,e)},ajaxPrefilter:I(Lt),ajaxTransport:I(Ut),ajax:function(e,t){function n(e,t,n,r){var i,l,v,g,b,w=t;2!==y&&(y=2,s&&clearTimeout(s),c=void 0,a=r||"",x.readyState=e>0?4:0,i=e>=200&&300>e||304===e,n&&(g=L(f,x,n)),g=U(f,g,x,i),i?(f.ifModified&&(b=x.getResponseHeader("Last-Modified"),b&&(ie.lastModified[o]=b),b=x.getResponseHeader("etag"),b&&(ie.etag[o]=b)),204===e||"HEAD"===f.type?w="nocontent":304===e?w="notmodified":(w=g.state,l=g.data,v=g.error,i=!v)):(v=w,(e||!w)&&(w="error",0>e&&(e=0))),x.status=e,x.statusText=(t||w)+"",i?h.resolveWith(p,[l,w,x]):h.rejectWith(p,[x,w,v]),x.statusCode($),$=void 0,u&&d.trigger(i?"ajaxSuccess":"ajaxError",[x,f,i?l:v]),m.fireWith(p,[x,w]),u&&(d.trigger("ajaxComplete",[x,f]),--ie.active||ie.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,a,s,u,c,l,f=ie.ajaxSetup({},t),p=f.context||f,d=f.context&&(p.nodeType||p.jquery)?ie(p):ie.event,h=ie.Deferred(),m=ie.Callbacks("once memory"),$=f.statusCode||{},v={},g={},y=0,b="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(2===y){if(!l)for(l={};t=Rt.exec(a);)l[t[1].toLowerCase()]=t[2];t=l[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===y?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return y||(e=g[n]=g[n]||e,v[e]=t),this},overrideMimeType:function(e){return y||(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>y)for(t in e)$[t]=[$[t],e[t]];else x.always(e[x.status]);return this},abort:function(e){var t=e||b;return c&&c.abort(t),n(0,t),this}};if(h.promise(x).complete=m.add,x.success=x.done,x.error=x.fail,f.url=((e||f.url||Pt)+"").replace(Vt,"").replace(_t,Dt[1]+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=ie.trim(f.dataType||"*").toLowerCase().match(ye)||[""],null==f.crossDomain&&(r=Ht.exec(f.url.toLowerCase()),f.crossDomain=!(!r||r[1]===Dt[1]&&r[2]===Dt[2]&&(r[3]||("http:"===r[1]?"80":"443"))===(Dt[3]||("http:"===Dt[1]?"80":"443")))),f.data&&f.processData&&"string"!=typeof f.data&&(f.data=ie.param(f.data,f.traditional)),_(Lt,f,t,x),2===y)return x;u=ie.event&&f.global,u&&0===ie.active++&&ie.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!It.test(f.type),o=f.url,f.hasContent||(f.data&&(o=f.url+=(jt.test(o)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=qt.test(o)?o.replace(qt,"$1_="+Ot++):o+(jt.test(o)?"&":"?")+"_="+Ot++)),f.ifModified&&(ie.lastModified[o]&&x.setRequestHeader("If-Modified-Since",ie.lastModified[o]),ie.etag[o]&&x.setRequestHeader("If-None-Match",ie.etag[o])),(f.data&&f.hasContent&&f.contentType!==!1||t.contentType)&&x.setRequestHeader("Content-Type",f.contentType),x.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Bt+"; q=0.01":""):f.accepts["*"]);for(i in f.headers)x.setRequestHeader(i,f.headers[i]);if(f.beforeSend&&(f.beforeSend.call(p,x,f)===!1||2===y))return x.abort();b="abort";for(i in{success:1,error:1,complete:1})x[i](f[i]);if(c=_(Ut,f,t,x)){x.readyState=1,u&&d.trigger("ajaxSend",[x,f]),f.async&&f.timeout>0&&(s=setTimeout(function(){x.abort("timeout")},f.timeout));try{y=1,c.send(v,n)}catch(w){if(!(2>y))throw w;n(-1,w)}}else n(-1,"No Transport");return x},getJSON:function(e,t,n){return ie.get(e,t,n,"json")},getScript:function(e,t){return ie.get(e,void 0,t,"script")}}),ie.each(["get","post"],function(e,t){ie[t]=function(e,n,r,i){return ie.isFunction(n)&&(i=i||r,r=n,n=void 0),ie.ajax({url:e,type:t,dataType:i,data:n,success:r})}}),ie._evalUrl=function(e){return ie.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},ie.fn.extend({wrapAll:function(e){if(ie.isFunction(e))return this.each(function(t){ie(this).wrapAll(e.call(this,t))});if(this[0]){var t=ie(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return this.each(ie.isFunction(e)?function(t){ie(this).wrapInner(e.call(this,t))}:function(){var t=ie(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=ie.isFunction(e);return this.each(function(n){ie(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){ie.nodeName(this,"body")||ie(this).replaceWith(this.childNodes)}).end()}}),ie.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0||!ne.reliableHiddenOffsets()&&"none"===(e.style&&e.style.display||ie.css(e,"display"))},ie.expr.filters.visible=function(e){return!ie.expr.filters.hidden(e)};var Wt=/%20/g,Gt=/\[\]$/,Jt=/\r?\n/g,Yt=/^(?:submit|button|image|reset|file)$/i,Xt=/^(?:input|select|textarea|keygen)/i;ie.param=function(e,t){var n,r=[],i=function(e,t){t=ie.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=ie.ajaxSettings&&ie.ajaxSettings.traditional),ie.isArray(e)||e.jquery&&!ie.isPlainObject(e))ie.each(e,function(){i(this.name,this.value)});else for(n in e)B(n,e[n],t,i);return r.join("&").replace(Wt,"+")},ie.fn.extend({serialize:function(){return ie.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ie.prop(this,"elements");return e?ie.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ie(this).is(":disabled")&&Xt.test(this.nodeName)&&!Yt.test(e)&&(this.checked||!Oe.test(e))}).map(function(e,t){var n=ie(this).val();return null==n?null:ie.isArray(n)?ie.map(n,function(e){return{name:t.name,value:e.replace(Jt,"\r\n")}}):{name:t.name,value:n.replace(Jt,"\r\n")}}).get()}}),ie.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&z()||W()}:z;var Kt=0,Zt={},Qt=ie.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in Zt)Zt[e](void 0,!0)}),ne.cors=!!Qt&&"withCredentials"in Qt,Qt=ne.ajax=!!Qt,Qt&&ie.ajaxTransport(function(e){if(!e.crossDomain||ne.cors){var t;return{send:function(n,r){var i,o=e.xhr(),a=++Kt;if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)o[i]=e.xhrFields[i];e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)void 0!==n[i]&&o.setRequestHeader(i,n[i]+"");o.send(e.hasContent&&e.data||null),t=function(n,i){var s,u,c;if(t&&(i||4===o.readyState))if(delete Zt[a],t=void 0,o.onreadystatechange=ie.noop,i)4!==o.readyState&&o.abort();else{c={},s=o.status,"string"==typeof o.responseText&&(c.text=o.responseText);try{u=o.statusText}catch(l){u=""}s||!e.isLocal||e.crossDomain?1223===s&&(s=204):s=c.text?200:404}c&&r(s,u,c,o.getAllResponseHeaders())},e.async?4===o.readyState?setTimeout(t):o.onreadystatechange=Zt[a]=t:t()},abort:function(){t&&t(void 0,!0)}}}}),ie.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return ie.globalEval(e),e}}}),ie.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),ie.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=he.head||ie("head")[0]||he.documentElement;return{send:function(r,i){t=he.createElement("script"),t.async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||i(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var en=[],tn=/(=)\?(?=&|$)|\?\?/;ie.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=en.pop()||ie.expando+"_"+Ot++;return this[e]=!0,e}}),ie.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=t.jsonp!==!1&&(tn.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&tn.test(t.data)&&"data");return s||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=ie.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(tn,"$1"+i):t.jsonp!==!1&&(t.url+=(jt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||ie.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,en.push(i)),a&&ie.isFunction(o)&&o(a[0]),a=o=void 0}),"script"):void 0}),ie.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||he;var r=fe.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=ie.buildFragment([e],t,i),i&&i.length&&ie(i).remove(),ie.merge([],r.childNodes))};var nn=ie.fn.load;ie.fn.load=function(e,t,n){if("string"!=typeof e&&nn)return nn.apply(this,arguments);var r,i,o,a=this,s=e.indexOf(" ");return s>=0&&(r=ie.trim(e.slice(s,e.length)),e=e.slice(0,s)),ie.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&ie.ajax({url:e,type:o,dataType:"html",data:t}).done(function(e){i=arguments,a.html(r?ie("<div>").append(ie.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){a.each(n,i||[e.responseText,t,e])}),this},ie.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ie.fn[t]=function(e){return this.on(t,e)}}),ie.expr.filters.animated=function(e){return ie.grep(ie.timers,function(t){return e===t.elem}).length};var rn=e.document.documentElement;ie.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,c,l=ie.css(e,"position"),f=ie(e),p={};"static"===l&&(e.style.position="relative"),s=f.offset(),o=ie.css(e,"top"),u=ie.css(e,"left"),c=("absolute"===l||"fixed"===l)&&ie.inArray("auto",[o,u])>-1,c?(r=f.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),ie.isFunction(t)&&(t=t.call(e,n,s)),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+i),"using"in t?t.using.call(e,p):f.css(p)}},ie.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ie.offset.setOffset(this,e,t)});var t,n,r={top:0,left:0},i=this[0],o=i&&i.ownerDocument;return o?(t=o.documentElement,ie.contains(t,i)?(typeof i.getBoundingClientRect!==Se&&(r=i.getBoundingClientRect()),n=G(o),{top:r.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:r.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):r):void 0},position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===ie.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),ie.nodeName(e[0],"html")||(n=e.offset()),n.top+=ie.css(e[0],"borderTopWidth",!0),n.left+=ie.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-ie.css(r,"marginTop",!0),left:t.left-n.left-ie.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||rn;e&&!ie.nodeName(e,"html")&&"static"===ie.css(e,"position");)e=e.offsetParent;return e||rn})}}),ie.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);ie.fn[e]=function(r){return Ne(this,function(e,r,i){var o=G(e);return void 0===i?o?t in o?o[t]:o.document.documentElement[r]:e[r]:void(o?o.scrollTo(n?ie(o).scrollLeft():i,n?i:ie(o).scrollTop()):e[r]=i)},e,r,arguments.length,null)}}),ie.each(["top","left"],function(e,t){ie.cssHooks[t]=k(ne.pixelPosition,function(e,n){return n?(n=tt(e,t),rt.test(n)?ie(e).position()[t]+"px":n):void 0})}),ie.each({Height:"height",Width:"width"},function(e,t){ie.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){ie.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||i===!0?"margin":"border");return Ne(this,function(t,n,r){var i;return ie.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?ie.css(t,n,a):ie.style(t,n,r,a)},t,o?r:void 0,o,null)}})}),ie.fn.size=function(){return this.length},ie.fn.andSelf=ie.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return ie});var on=e.jQuery,an=e.$;return ie.noConflict=function(t){return e.$===ie&&(e.$=an),t&&e.jQuery===ie&&(e.jQuery=on),ie},typeof t===Se&&(e.jQuery=e.$=ie),ie}),window.Modernizr=function(e,t,n){function r(e){y.cssText=e}function i(e,t){return r(S.join(e+";")+(t||""))}function o(e,t){return typeof e===t}function a(e,t){return!!~(""+e).indexOf(t)}function s(e,t){for(var r in e){var i=e[r];if(!a(i,"-")&&y[i]!==n)return"pfx"==t?i:!0}return!1}function u(e,t,r){for(var i in e){var a=t[e[i]];if(a!==n)return r===!1?e[i]:o(a,"function")?a.bind(r||t):a}return!1}function c(e,t,n){var r=e.charAt(0).toUpperCase()+e.slice(1),i=(e+" "+C.join(r+" ")+r).split(" ");return o(t,"string")||o(t,"undefined")?s(i,t):(i=(e+" "+k.join(r+" ")+r).split(" "),u(i,t,n))}function l(){h.input=function(n){for(var r=0,i=n.length;i>r;r++)O[n[r]]=n[r]in b;return O.list&&(O.list=!!t.createElement("datalist")&&!!e.HTMLDataListElement),O}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),h.inputtypes=function(e){for(var r,i,o,a=0,s=e.length;s>a;a++)b.setAttribute("type",i=e[a]),r="text"!==b.type,r&&(b.value=x,b.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(i)&&b.style.WebkitAppearance!==n?($.appendChild(b),o=t.defaultView,r=o.getComputedStyle&&"textfield"!==o.getComputedStyle(b,null).WebkitAppearance&&0!==b.offsetHeight,$.removeChild(b)):/^(search|tel)$/.test(i)||(r=/^(url|email)$/.test(i)?b.checkValidity&&b.checkValidity()===!1:b.value!=x)),N[e[a]]=!!r;return N}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var f,p,d="2.8.3",h={},m=!0,$=t.documentElement,v="modernizr",g=t.createElement(v),y=g.style,b=t.createElement("input"),x=":)",w={}.toString,S=" -webkit- -moz- -o- -ms- ".split(" "),E="Webkit Moz O ms",C=E.split(" "),k=E.toLowerCase().split(" "),T={svg:"http://www.w3.org/2000/svg"},A={},N={},O={},j=[],M=j.slice,D=function(e,n,r,i){var o,a,s,u,c=t.createElement("div"),l=t.body,f=l||t.createElement("body");if(parseInt(r,10))for(;r--;)s=t.createElement("div"),s.id=i?i[r]:v+(r+1),c.appendChild(s);return o=["&#173;",'<style id="s',v,'">',e,"</style>"].join(""),c.id=v,(l?c:f).innerHTML+=o,f.appendChild(c),l||(f.style.background="",f.style.overflow="hidden",u=$.style.overflow,$.style.overflow="hidden",$.appendChild(f)),a=n(c,e),l?c.parentNode.removeChild(c):(f.parentNode.removeChild(f),$.style.overflow=u),!!a},P=function(t){var n=e.matchMedia||e.msMatchMedia;if(n)return n(t)&&n(t).matches||!1;var r;return D("@media "+t+" { #"+v+" { position: absolute; } }",function(t){r="absolute"==(e.getComputedStyle?getComputedStyle(t,null):t.currentStyle).position}),r},V=function(){function e(e,i){i=i||t.createElement(r[e]||"div"),e="on"+e;var a=e in i;return a||(i.setAttribute||(i=t.createElement("div")),i.setAttribute&&i.removeAttribute&&(i.setAttribute(e,""),a=o(i[e],"function"),o(i[e],"undefined")||(i[e]=n),i.removeAttribute(e))),i=null,a}var r={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return e}(),q={}.hasOwnProperty;p=o(q,"undefined")||o(q.call,"undefined")?function(e,t){return t in e&&o(e.constructor.prototype[t],"undefined")}:function(e,t){return q.call(e,t)},Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if("function"!=typeof t)throw new TypeError;var n=M.call(arguments,1),r=function(){if(this instanceof r){var i=function(){};i.prototype=t.prototype;var o=new i,a=t.apply(o,n.concat(M.call(arguments)));return Object(a)===a?a:o}return t.apply(e,n.concat(M.call(arguments)))};return r}),A.flexbox=function(){return c("flexWrap")},A.canvas=function(){var e=t.createElement("canvas");return!!e.getContext&&!!e.getContext("2d")},A.canvastext=function(){return!!h.canvas&&!!o(t.createElement("canvas").getContext("2d").fillText,"function")},A.webgl=function(){return!!e.WebGLRenderingContext},A.touch=function(){var n;return"ontouchstart"in e||e.DocumentTouch&&t instanceof DocumentTouch?n=!0:D(["@media (",S.join("touch-enabled),("),v,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(e){n=9===e.offsetTop}),n},A.geolocation=function(){return"geolocation"in navigator},A.postmessage=function(){return!!e.postMessage},A.websqldatabase=function(){return!!e.openDatabase},A.indexedDB=function(){return!!c("indexedDB",e)},A.hashchange=function(){return V("hashchange",e)&&(t.documentMode===n||t.documentMode>7)},A.history=function(){return!!e.history&&!!history.pushState},A.draganddrop=function(){var e=t.createElement("div");return"draggable"in e||"ondragstart"in e&&"ondrop"in e},A.websockets=function(){return"WebSocket"in e||"MozWebSocket"in e},A.rgba=function(){return r("background-color:rgba(150,255,150,.5)"),a(y.backgroundColor,"rgba")},A.hsla=function(){return r("background-color:hsla(120,40%,100%,.5)"),a(y.backgroundColor,"rgba")||a(y.backgroundColor,"hsla")},A.multiplebgs=function(){return r("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(y.background)},A.backgroundsize=function(){return c("backgroundSize")},A.borderimage=function(){return c("borderImage")},A.borderradius=function(){return c("borderRadius")},A.boxshadow=function(){return c("boxShadow")},A.textshadow=function(){return""===t.createElement("div").style.textShadow},A.opacity=function(){return i("opacity:.55"),/^0.55$/.test(y.opacity)},A.cssanimations=function(){return c("animationName")},A.csscolumns=function(){return c("columnCount")},A.cssgradients=function(){var e="background-image:",t="gradient(linear,left top,right bottom,from(#9f9),to(white));",n="linear-gradient(left top,#9f9, white);";return r((e+"-webkit- ".split(" ").join(t+e)+S.join(n+e)).slice(0,-e.length)),a(y.backgroundImage,"gradient")},A.cssreflections=function(){return c("boxReflect")},A.csstransforms=function(){return!!c("transform")},A.csstransforms3d=function(){var e=!!c("perspective");return e&&"webkitPerspective"in $.style&&D("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(t,n){e=9===t.offsetLeft&&3===t.offsetHeight}),e},A.csstransitions=function(){return c("transition")},A.fontface=function(){var e;return D('@font-face {font-family:"font";src:url("https://")}',function(n,r){
var i=t.getElementById("smodernizr"),o=i.sheet||i.styleSheet,a=o?o.cssRules&&o.cssRules[0]?o.cssRules[0].cssText:o.cssText||"":"";e=/src/i.test(a)&&0===a.indexOf(r.split(" ")[0])}),e},A.generatedcontent=function(){var e;return D(["#",v,"{font:0/0 a}#",v,':after{content:"',x,'";visibility:hidden;font:3px/1 a}'].join(""),function(t){e=t.offsetHeight>=3}),e},A.video=function(){var e=t.createElement("video"),n=!1;try{(n=!!e.canPlayType)&&(n=new Boolean(n),n.ogg=e.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),n.h264=e.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),n.webm=e.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(r){}return n},A.audio=function(){var e=t.createElement("audio"),n=!1;try{(n=!!e.canPlayType)&&(n=new Boolean(n),n.ogg=e.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),n.mp3=e.canPlayType("audio/mpeg;").replace(/^no$/,""),n.wav=e.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),n.m4a=(e.canPlayType("audio/x-m4a;")||e.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(r){}return n},A.localstorage=function(){try{return localStorage.setItem(v,v),localStorage.removeItem(v),!0}catch(e){return!1}},A.sessionstorage=function(){try{return sessionStorage.setItem(v,v),sessionStorage.removeItem(v),!0}catch(e){return!1}},A.webworkers=function(){return!!e.Worker},A.applicationcache=function(){return!!e.applicationCache},A.svg=function(){return!!t.createElementNS&&!!t.createElementNS(T.svg,"svg").createSVGRect},A.inlinesvg=function(){var e=t.createElement("div");return e.innerHTML="<svg/>",(e.firstChild&&e.firstChild.namespaceURI)==T.svg},A.smil=function(){return!!t.createElementNS&&/SVGAnimate/.test(w.call(t.createElementNS(T.svg,"animate")))},A.svgclippaths=function(){return!!t.createElementNS&&/SVGClipPath/.test(w.call(t.createElementNS(T.svg,"clipPath")))};for(var R in A)p(A,R)&&(f=R.toLowerCase(),h[f]=A[R](),j.push((h[f]?"":"no-")+f));return h.input||l(),h.addTest=function(e,t){if("object"==typeof e)for(var r in e)p(e,r)&&h.addTest(r,e[r]);else{if(e=e.toLowerCase(),h[e]!==n)return h;t="function"==typeof t?t():t,"undefined"!=typeof m&&m&&($.className+=" "+(t?"":"no-")+e),h[e]=t}return h},r(""),g=b=null,function(e,t){function n(e,t){var n=e.createElement("p"),r=e.getElementsByTagName("head")[0]||e.documentElement;return n.innerHTML="x<style>"+t+"</style>",r.insertBefore(n.lastChild,r.firstChild)}function r(){var e=g.elements;return"string"==typeof e?e.split(" "):e}function i(e){var t=v[e[m]];return t||(t={},$++,e[m]=$,v[$]=t),t}function o(e,n,r){if(n||(n=t),l)return n.createElement(e);r||(r=i(n));var o;return o=r.cache[e]?r.cache[e].cloneNode():h.test(e)?(r.cache[e]=r.createElem(e)).cloneNode():r.createElem(e),!o.canHaveChildren||d.test(e)||o.tagUrn?o:r.frag.appendChild(o)}function a(e,n){if(e||(e=t),l)return e.createDocumentFragment();n=n||i(e);for(var o=n.frag.cloneNode(),a=0,s=r(),u=s.length;u>a;a++)o.createElement(s[a]);return o}function s(e,t){t.cache||(t.cache={},t.createElem=e.createElement,t.createFrag=e.createDocumentFragment,t.frag=t.createFrag()),e.createElement=function(n){return g.shivMethods?o(n,e,t):t.createElem(n)},e.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+r().join().replace(/[\w\-]+/g,function(e){return t.createElem(e),t.frag.createElement(e),'c("'+e+'")'})+");return n}")(g,t.frag)}function u(e){e||(e=t);var r=i(e);return g.shivCSS&&!c&&!r.hasCSS&&(r.hasCSS=!!n(e,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),l||s(e,r),e}var c,l,f="3.7.0",p=e.html5||{},d=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,h=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,m="_html5shiv",$=0,v={};!function(){try{var e=t.createElement("a");e.innerHTML="<xyz></xyz>",c="hidden"in e,l=1==e.childNodes.length||function(){t.createElement("a");var e=t.createDocumentFragment();return"undefined"==typeof e.cloneNode||"undefined"==typeof e.createDocumentFragment||"undefined"==typeof e.createElement}()}catch(n){c=!0,l=!0}}();var g={elements:p.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:f,shivCSS:p.shivCSS!==!1,supportsUnknownElements:l,shivMethods:p.shivMethods!==!1,type:"default",shivDocument:u,createElement:o,createDocumentFragment:a};e.html5=g,u(t)}(this,t),h._version=d,h._prefixes=S,h._domPrefixes=k,h._cssomPrefixes=C,h.mq=P,h.hasEvent=V,h.testProp=function(e){return s([e])},h.testAllProps=c,h.testStyles=D,h.prefixed=function(e,t,n){return t?c(e,t,n):c(e,"pfx")},$.className=$.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(m?" js "+j.join(" "):""),h}(this,this.document),function(e,t,n){function r(e){return"[object Function]"==$.call(e)}function i(e){return"string"==typeof e}function o(){}function a(e){return!e||"loaded"==e||"complete"==e||"uninitialized"==e}function s(){var e=v.shift();g=1,e?e.t?h(function(){("c"==e.t?p.injectCss:p.injectJs)(e.s,0,e.a,e.x,e.e,1)},0):(e(),s()):g=0}function u(e,n,r,i,o,u,c){function l(t){if(!d&&a(f.readyState)&&(y.r=d=1,!g&&s(),f.onload=f.onreadystatechange=null,t)){"img"!=e&&h(function(){x.removeChild(f)},50);for(var r in k[n])k[n].hasOwnProperty(r)&&k[n][r].onload()}}var c=c||p.errorTimeout,f=t.createElement(e),d=0,$=0,y={t:r,s:n,e:o,a:u,x:c};1===k[n]&&($=1,k[n]=[]),"object"==e?f.data=n:(f.src=n,f.type=e),f.width=f.height="0",f.onerror=f.onload=f.onreadystatechange=function(){l.call(this,$)},v.splice(i,0,y),"img"!=e&&($||2===k[n]?(x.insertBefore(f,b?null:m),h(l,c)):k[n].push(f))}function c(e,t,n,r,o){return g=0,t=t||"j",i(e)?u("c"==t?S:w,e,t,this.i++,n,r,o):(v.splice(this.i++,0,e),1==v.length&&s()),this}function l(){var e=p;return e.loader={load:c,i:0},e}var f,p,d=t.documentElement,h=e.setTimeout,m=t.getElementsByTagName("script")[0],$={}.toString,v=[],g=0,y="MozAppearance"in d.style,b=y&&!!t.createRange().compareNode,x=b?d:m.parentNode,d=e.opera&&"[object Opera]"==$.call(e.opera),d=!!t.attachEvent&&!d,w=y?"object":d?"script":"img",S=d?"script":w,E=Array.isArray||function(e){return"[object Array]"==$.call(e)},C=[],k={},T={timeout:function(e,t){return t.length&&(e.timeout=t[0]),e}};p=function(e){function t(e){var t,n,r,e=e.split("!"),i=C.length,o=e.pop(),a=e.length,o={url:o,origUrl:o,prefixes:e};for(n=0;a>n;n++)r=e[n].split("="),(t=T[r.shift()])&&(o=t(o,r));for(n=0;i>n;n++)o=C[n](o);return o}function a(e,i,o,a,s){var u=t(e),c=u.autoCallback;u.url.split(".").pop().split("?").shift(),u.bypass||(i&&(i=r(i)?i:i[e]||i[a]||i[e.split("/").pop().split("?")[0]]),u.instead?u.instead(e,i,o,a,s):(k[u.url]?u.noexec=!0:k[u.url]=1,o.load(u.url,u.forceCSS||!u.forceJS&&"css"==u.url.split(".").pop().split("?").shift()?"c":n,u.noexec,u.attrs,u.timeout),(r(i)||r(c))&&o.load(function(){l(),i&&i(u.origUrl,s,a),c&&c(u.origUrl,s,a),k[u.url]=2})))}function s(e,t){function n(e,n){if(e){if(i(e))n||(f=function(){var e=[].slice.call(arguments);p.apply(this,e),d()}),a(e,f,t,0,c);else if(Object(e)===e)for(u in s=function(){var t,n=0;for(t in e)e.hasOwnProperty(t)&&n++;return n}(),e)e.hasOwnProperty(u)&&(!n&&!--s&&(r(f)?f=function(){var e=[].slice.call(arguments);p.apply(this,e),d()}:f[u]=function(e){return function(){var t=[].slice.call(arguments);e&&e.apply(this,t),d()}}(p[u])),a(e[u],f,t,u,c))}else!n&&d()}var s,u,c=!!e.test,l=e.load||e.both,f=e.callback||o,p=f,d=e.complete||o;n(c?e.yep:e.nope,!!l),l&&n(l)}var u,c,f=this.yepnope.loader;if(i(e))a(e,0,f,0);else if(E(e))for(u=0;u<e.length;u++)c=e[u],i(c)?a(c,0,f,0):E(c)?p(c):Object(c)===c&&s(c,f);else Object(e)===e&&s(e,f)},p.addPrefix=function(e,t){T[e]=t},p.addFilter=function(e){C.push(e)},p.errorTimeout=1e4,null==t.readyState&&t.addEventListener&&(t.readyState="loading",t.addEventListener("DOMContentLoaded",f=function(){t.removeEventListener("DOMContentLoaded",f,0),t.readyState="complete"},0)),e.yepnope=l(),e.yepnope.executeStack=s,e.yepnope.injectJs=function(e,n,r,i,u,c){var l,f,d=t.createElement("script"),i=i||p.errorTimeout;d.src=e;for(f in r)d.setAttribute(f,r[f]);n=c?s:n||o,d.onreadystatechange=d.onload=function(){!l&&a(d.readyState)&&(l=1,n(),d.onload=d.onreadystatechange=null)},h(function(){l||(l=1,n(1))},i),u?d.onload():m.parentNode.insertBefore(d,m)},e.yepnope.injectCss=function(e,n,r,i,a,u){var c,i=t.createElement("link"),n=u?s:n||o;i.href=e,i.rel="stylesheet",i.type="text/css";for(c in r)i.setAttribute(c,r[c]);a||(m.parentNode.insertBefore(i,m),h(n,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))},window.Modernizr=function(e,t,n){function r(e){y.cssText=e}function i(e,t){return r(S.join(e+";")+(t||""))}function o(e,t){return typeof e===t}function a(e,t){return!!~(""+e).indexOf(t)}function s(e,t){for(var r in e){var i=e[r];if(!a(i,"-")&&y[i]!==n)return"pfx"==t?i:!0}return!1}function u(e,t,r){for(var i in e){var a=t[e[i]];if(a!==n)return r===!1?e[i]:o(a,"function")?a.bind(r||t):a}return!1}function c(e,t,n){var r=e.charAt(0).toUpperCase()+e.slice(1),i=(e+" "+C.join(r+" ")+r).split(" ");return o(t,"string")||o(t,"undefined")?s(i,t):(i=(e+" "+k.join(r+" ")+r).split(" "),u(i,t,n))}function l(){h.input=function(n){for(var r=0,i=n.length;i>r;r++)O[n[r]]=n[r]in b;return O.list&&(O.list=!!t.createElement("datalist")&&!!e.HTMLDataListElement),O}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),h.inputtypes=function(e){for(var r,i,o,a=0,s=e.length;s>a;a++)b.setAttribute("type",i=e[a]),r="text"!==b.type,r&&(b.value=x,b.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(i)&&b.style.WebkitAppearance!==n?($.appendChild(b),o=t.defaultView,r=o.getComputedStyle&&"textfield"!==o.getComputedStyle(b,null).WebkitAppearance&&0!==b.offsetHeight,$.removeChild(b)):/^(search|tel)$/.test(i)||(r=/^(url|email)$/.test(i)?b.checkValidity&&b.checkValidity()===!1:b.value!=x)),N[e[a]]=!!r;return N}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var f,p,d="2.8.3",h={},m=!0,$=t.documentElement,v="modernizr",g=t.createElement(v),y=g.style,b=t.createElement("input"),x=":)",w={}.toString,S=" -webkit- -moz- -o- -ms- ".split(" "),E="Webkit Moz O ms",C=E.split(" "),k=E.toLowerCase().split(" "),T={svg:"http://www.w3.org/2000/svg"},A={},N={},O={},j=[],M=j.slice,D=function(e,n,r,i){var o,a,s,u,c=t.createElement("div"),l=t.body,f=l||t.createElement("body");if(parseInt(r,10))for(;r--;)s=t.createElement("div"),s.id=i?i[r]:v+(r+1),c.appendChild(s);return o=["&#173;",'<style id="s',v,'">',e,"</style>"].join(""),c.id=v,(l?c:f).innerHTML+=o,f.appendChild(c),l||(f.style.background="",f.style.overflow="hidden",u=$.style.overflow,$.style.overflow="hidden",$.appendChild(f)),a=n(c,e),l?c.parentNode.removeChild(c):(f.parentNode.removeChild(f),$.style.overflow=u),!!a},P=function(t){var n=e.matchMedia||e.msMatchMedia;if(n)return n(t)&&n(t).matches||!1;var r;return D("@media "+t+" { #"+v+" { position: absolute; } }",function(t){r="absolute"==(e.getComputedStyle?getComputedStyle(t,null):t.currentStyle).position}),r},V=function(){function e(e,i){i=i||t.createElement(r[e]||"div"),e="on"+e;var a=e in i;return a||(i.setAttribute||(i=t.createElement("div")),i.setAttribute&&i.removeAttribute&&(i.setAttribute(e,""),a=o(i[e],"function"),o(i[e],"undefined")||(i[e]=n),i.removeAttribute(e))),i=null,a}var r={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return e}(),q={}.hasOwnProperty;p=o(q,"undefined")||o(q.call,"undefined")?function(e,t){return t in e&&o(e.constructor.prototype[t],"undefined")}:function(e,t){return q.call(e,t)},Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if("function"!=typeof t)throw new TypeError;var n=M.call(arguments,1),r=function(){if(this instanceof r){var i=function(){};i.prototype=t.prototype;var o=new i,a=t.apply(o,n.concat(M.call(arguments)));return Object(a)===a?a:o}return t.apply(e,n.concat(M.call(arguments)))};return r}),A.flexbox=function(){return c("flexWrap")},A.canvas=function(){var e=t.createElement("canvas");return!!e.getContext&&!!e.getContext("2d")},A.canvastext=function(){return!!h.canvas&&!!o(t.createElement("canvas").getContext("2d").fillText,"function")},A.webgl=function(){return!!e.WebGLRenderingContext},A.touch=function(){var n;return"ontouchstart"in e||e.DocumentTouch&&t instanceof DocumentTouch?n=!0:D(["@media (",S.join("touch-enabled),("),v,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(e){n=9===e.offsetTop}),n},A.geolocation=function(){return"geolocation"in navigator},A.postmessage=function(){return!!e.postMessage},A.websqldatabase=function(){return!!e.openDatabase},A.indexedDB=function(){return!!c("indexedDB",e)},A.hashchange=function(){return V("hashchange",e)&&(t.documentMode===n||t.documentMode>7)},A.history=function(){return!!e.history&&!!history.pushState},A.draganddrop=function(){var e=t.createElement("div");return"draggable"in e||"ondragstart"in e&&"ondrop"in e},A.websockets=function(){return"WebSocket"in e||"MozWebSocket"in e},A.rgba=function(){return r("background-color:rgba(150,255,150,.5)"),a(y.backgroundColor,"rgba")},A.hsla=function(){return r("background-color:hsla(120,40%,100%,.5)"),a(y.backgroundColor,"rgba")||a(y.backgroundColor,"hsla")},A.multiplebgs=function(){return r("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(y.background)},A.backgroundsize=function(){return c("backgroundSize")},A.borderimage=function(){return c("borderImage")},A.borderradius=function(){return c("borderRadius")},A.boxshadow=function(){return c("boxShadow")},A.textshadow=function(){return""===t.createElement("div").style.textShadow},A.opacity=function(){return i("opacity:.55"),/^0.55$/.test(y.opacity)},A.cssanimations=function(){return c("animationName")},A.csscolumns=function(){return c("columnCount")},A.cssgradients=function(){var e="background-image:",t="gradient(linear,left top,right bottom,from(#9f9),to(white));",n="linear-gradient(left top,#9f9, white);";return r((e+"-webkit- ".split(" ").join(t+e)+S.join(n+e)).slice(0,-e.length)),a(y.backgroundImage,"gradient")},A.cssreflections=function(){return c("boxReflect")},A.csstransforms=function(){return!!c("transform")},A.csstransforms3d=function(){var e=!!c("perspective");return e&&"webkitPerspective"in $.style&&D("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(t,n){e=9===t.offsetLeft&&3===t.offsetHeight}),e},A.csstransitions=function(){return c("transition")},A.fontface=function(){var e;return D('@font-face {font-family:"font";src:url("https://")}',function(n,r){var i=t.getElementById("smodernizr"),o=i.sheet||i.styleSheet,a=o?o.cssRules&&o.cssRules[0]?o.cssRules[0].cssText:o.cssText||"":"";e=/src/i.test(a)&&0===a.indexOf(r.split(" ")[0])}),e},A.generatedcontent=function(){var e;return D(["#",v,"{font:0/0 a}#",v,':after{content:"',x,'";visibility:hidden;font:3px/1 a}'].join(""),function(t){e=t.offsetHeight>=3}),e},A.video=function(){var e=t.createElement("video"),n=!1;try{(n=!!e.canPlayType)&&(n=new Boolean(n),n.ogg=e.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),n.h264=e.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),n.webm=e.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(r){}return n},A.audio=function(){var e=t.createElement("audio"),n=!1;try{(n=!!e.canPlayType)&&(n=new Boolean(n),n.ogg=e.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),n.mp3=e.canPlayType("audio/mpeg;").replace(/^no$/,""),n.wav=e.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),n.m4a=(e.canPlayType("audio/x-m4a;")||e.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(r){}return n},A.localstorage=function(){try{return localStorage.setItem(v,v),localStorage.removeItem(v),!0}catch(e){return!1}},A.sessionstorage=function(){try{return sessionStorage.setItem(v,v),sessionStorage.removeItem(v),!0}catch(e){return!1}},A.webworkers=function(){return!!e.Worker},A.applicationcache=function(){return!!e.applicationCache},A.svg=function(){return!!t.createElementNS&&!!t.createElementNS(T.svg,"svg").createSVGRect},A.inlinesvg=function(){var e=t.createElement("div");return e.innerHTML="<svg/>",(e.firstChild&&e.firstChild.namespaceURI)==T.svg},A.smil=function(){return!!t.createElementNS&&/SVGAnimate/.test(w.call(t.createElementNS(T.svg,"animate")))},A.svgclippaths=function(){return!!t.createElementNS&&/SVGClipPath/.test(w.call(t.createElementNS(T.svg,"clipPath")))};for(var R in A)p(A,R)&&(f=R.toLowerCase(),h[f]=A[R](),j.push((h[f]?"":"no-")+f));return h.input||l(),h.addTest=function(e,t){if("object"==typeof e)for(var r in e)p(e,r)&&h.addTest(r,e[r]);else{if(e=e.toLowerCase(),h[e]!==n)return h;t="function"==typeof t?t():t,"undefined"!=typeof m&&m&&($.className+=" "+(t?"":"no-")+e),h[e]=t}return h},r(""),g=b=null,function(e,t){function n(e,t){var n=e.createElement("p"),r=e.getElementsByTagName("head")[0]||e.documentElement;return n.innerHTML="x<style>"+t+"</style>",r.insertBefore(n.lastChild,r.firstChild)}function r(){var e=g.elements;return"string"==typeof e?e.split(" "):e}function i(e){var t=v[e[m]];return t||(t={},$++,e[m]=$,v[$]=t),t}function o(e,n,r){if(n||(n=t),l)return n.createElement(e);r||(r=i(n));var o;return o=r.cache[e]?r.cache[e].cloneNode():h.test(e)?(r.cache[e]=r.createElem(e)).cloneNode():r.createElem(e),!o.canHaveChildren||d.test(e)||o.tagUrn?o:r.frag.appendChild(o)}function a(e,n){if(e||(e=t),l)return e.createDocumentFragment();n=n||i(e);for(var o=n.frag.cloneNode(),a=0,s=r(),u=s.length;u>a;a++)o.createElement(s[a]);return o}function s(e,t){t.cache||(t.cache={},t.createElem=e.createElement,t.createFrag=e.createDocumentFragment,t.frag=t.createFrag()),e.createElement=function(n){return g.shivMethods?o(n,e,t):t.createElem(n)},e.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+r().join().replace(/[\w\-]+/g,function(e){return t.createElem(e),t.frag.createElement(e),'c("'+e+'")'})+");return n}")(g,t.frag)}function u(e){e||(e=t);var r=i(e);return g.shivCSS&&!c&&!r.hasCSS&&(r.hasCSS=!!n(e,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),l||s(e,r),e}var c,l,f="3.7.0",p=e.html5||{},d=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,h=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,m="_html5shiv",$=0,v={};!function(){try{var e=t.createElement("a");e.innerHTML="<xyz></xyz>",c="hidden"in e,l=1==e.childNodes.length||function(){t.createElement("a");var e=t.createDocumentFragment();return"undefined"==typeof e.cloneNode||"undefined"==typeof e.createDocumentFragment||"undefined"==typeof e.createElement}()}catch(n){c=!0,l=!0}}();var g={elements:p.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:f,shivCSS:p.shivCSS!==!1,supportsUnknownElements:l,shivMethods:p.shivMethods!==!1,type:"default",shivDocument:u,createElement:o,createDocumentFragment:a};e.html5=g,u(t)}(this,t),h._version=d,h._prefixes=S,h._domPrefixes=k,h._cssomPrefixes=C,h.mq=P,h.hasEvent=V,h.testProp=function(e){return s([e])},h.testAllProps=c,h.testStyles=D,h.prefixed=function(e,t,n){return t?c(e,t,n):c(e,"pfx")},$.className=$.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(m?" js "+j.join(" "):""),h}(this,this.document),function(e,t,n){function r(e){return"[object Function]"==$.call(e)}function i(e){return"string"==typeof e}function o(){}function a(e){return!e||"loaded"==e||"complete"==e||"uninitialized"==e}function s(){var e=v.shift();g=1,e?e.t?h(function(){("c"==e.t?p.injectCss:p.injectJs)(e.s,0,e.a,e.x,e.e,1)},0):(e(),s()):g=0}function u(e,n,r,i,o,u,c){function l(t){if(!d&&a(f.readyState)&&(y.r=d=1,!g&&s(),f.onload=f.onreadystatechange=null,t)){"img"!=e&&h(function(){x.removeChild(f)},50);for(var r in k[n])k[n].hasOwnProperty(r)&&k[n][r].onload()}}var c=c||p.errorTimeout,f=t.createElement(e),d=0,$=0,y={t:r,s:n,e:o,a:u,x:c};1===k[n]&&($=1,k[n]=[]),"object"==e?f.data=n:(f.src=n,f.type=e),f.width=f.height="0",f.onerror=f.onload=f.onreadystatechange=function(){l.call(this,$)},v.splice(i,0,y),"img"!=e&&($||2===k[n]?(x.insertBefore(f,b?null:m),h(l,c)):k[n].push(f))}function c(e,t,n,r,o){return g=0,t=t||"j",i(e)?u("c"==t?S:w,e,t,this.i++,n,r,o):(v.splice(this.i++,0,e),1==v.length&&s()),this}function l(){var e=p;return e.loader={load:c,i:0},e}var f,p,d=t.documentElement,h=e.setTimeout,m=t.getElementsByTagName("script")[0],$={}.toString,v=[],g=0,y="MozAppearance"in d.style,b=y&&!!t.createRange().compareNode,x=b?d:m.parentNode,d=e.opera&&"[object Opera]"==$.call(e.opera),d=!!t.attachEvent&&!d,w=y?"object":d?"script":"img",S=d?"script":w,E=Array.isArray||function(e){return"[object Array]"==$.call(e)},C=[],k={},T={timeout:function(e,t){return t.length&&(e.timeout=t[0]),e}};p=function(e){function t(e){var t,n,r,e=e.split("!"),i=C.length,o=e.pop(),a=e.length,o={url:o,origUrl:o,prefixes:e};for(n=0;a>n;n++)r=e[n].split("="),(t=T[r.shift()])&&(o=t(o,r));for(n=0;i>n;n++)o=C[n](o);return o}function a(e,i,o,a,s){var u=t(e),c=u.autoCallback;u.url.split(".").pop().split("?").shift(),u.bypass||(i&&(i=r(i)?i:i[e]||i[a]||i[e.split("/").pop().split("?")[0]]),u.instead?u.instead(e,i,o,a,s):(k[u.url]?u.noexec=!0:k[u.url]=1,o.load(u.url,u.forceCSS||!u.forceJS&&"css"==u.url.split(".").pop().split("?").shift()?"c":n,u.noexec,u.attrs,u.timeout),(r(i)||r(c))&&o.load(function(){l(),i&&i(u.origUrl,s,a),c&&c(u.origUrl,s,a),k[u.url]=2})))}function s(e,t){function n(e,n){if(e){if(i(e))n||(f=function(){var e=[].slice.call(arguments);p.apply(this,e),d()}),a(e,f,t,0,c);else if(Object(e)===e)for(u in s=function(){var t,n=0;for(t in e)e.hasOwnProperty(t)&&n++;return n}(),e)e.hasOwnProperty(u)&&(!n&&!--s&&(r(f)?f=function(){var e=[].slice.call(arguments);p.apply(this,e),d()}:f[u]=function(e){return function(){var t=[].slice.call(arguments);e&&e.apply(this,t),d()}}(p[u])),a(e[u],f,t,u,c))}else!n&&d()}var s,u,c=!!e.test,l=e.load||e.both,f=e.callback||o,p=f,d=e.complete||o;n(c?e.yep:e.nope,!!l),l&&n(l)}var u,c,f=this.yepnope.loader;if(i(e))a(e,0,f,0);else if(E(e))for(u=0;u<e.length;u++)c=e[u],i(c)?a(c,0,f,0):E(c)?p(c):Object(c)===c&&s(c,f);else Object(e)===e&&s(e,f)},p.addPrefix=function(e,t){T[e]=t},p.addFilter=function(e){C.push(e)},p.errorTimeout=1e4,null==t.readyState&&t.addEventListener&&(t.readyState="loading",t.addEventListener("DOMContentLoaded",f=function(){t.removeEventListener("DOMContentLoaded",f,0),t.readyState="complete"},0)),e.yepnope=l(),e.yepnope.executeStack=s,e.yepnope.injectJs=function(e,n,r,i,u,c){var l,f,d=t.createElement("script"),i=i||p.errorTimeout;d.src=e;for(f in r)d.setAttribute(f,r[f]);n=c?s:n||o,d.onreadystatechange=d.onload=function(){!l&&a(d.readyState)&&(l=1,n(),d.onload=d.onreadystatechange=null)},h(function(){l||(l=1,n(1))},i),u?d.onload():m.parentNode.insertBefore(d,m)},e.yepnope.injectCss=function(e,n,r,i,a,u){var c,i=t.createElement("link"),n=u?s:n||o;i.href=e,i.rel="stylesheet",i.type="text/css";for(c in r)i.setAttribute(c,r[c]);a||(m.parentNode.insertBefore(i,m),h(n,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImJvd2VyX2NvbXBvbmVudHMvaHRtbDUtYm9pbGVycGxhdGUvdGVzdC9maWxlX2NvbnRlbnQuanMiLCJib3dlcl9jb21wb25lbnRzL2h0bWw1LWJvaWxlcnBsYXRlL3Rlc3QvZmlsZV9leGlzdGVuY2UuanMiLCJ2aWV3MS92aWV3MS5qcyIsInZpZXcxL3ZpZXcxX3Rlc3QuanMiLCJ2aWV3Mi92aWV3Mi5qcyIsInZpZXcyL3ZpZXcyX3Rlc3QuanMiLCJjb21wb25lbnRzL3ZlcnNpb24vaW50ZXJwb2xhdGUtZmlsdGVyLmpzIiwiY29tcG9uZW50cy92ZXJzaW9uL2ludGVycG9sYXRlLWZpbHRlcl90ZXN0LmpzIiwiY29tcG9uZW50cy92ZXJzaW9uL3ZlcnNpb24tZGlyZWN0aXZlLmpzIiwiY29tcG9uZW50cy92ZXJzaW9uL3ZlcnNpb24tZGlyZWN0aXZlX3Rlc3QuanMiLCJjb21wb25lbnRzL3ZlcnNpb24vdmVyc2lvbi5qcyIsImNvbXBvbmVudHMvdmVyc2lvbi92ZXJzaW9uX3Rlc3QuanMiLCJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXIvYW5ndWxhci5qcyIsImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci9hbmd1bGFyLm1pbi5qcyIsImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci9pbmRleC5qcyIsImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1sb2FkZXIvYW5ndWxhci1sb2FkZXIuanMiLCJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItbG9hZGVyL2FuZ3VsYXItbG9hZGVyLm1pbi5qcyIsImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1tb2Nrcy9hbmd1bGFyLW1vY2tzLmpzIiwiYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLW1vY2tzL25nQW5pbWF0ZU1vY2suanMiLCJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItbW9ja3MvbmdNb2NrLmpzIiwiYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLW1vY2tzL25nTW9ja0UyRS5qcyIsImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1yb3V0ZS9hbmd1bGFyLXJvdXRlLmpzIiwiYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXJvdXRlL2FuZ3VsYXItcm91dGUubWluLmpzIiwiYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXJvdXRlL2luZGV4LmpzIiwiYm93ZXJfY29tcG9uZW50cy9odG1sNS1ib2lsZXJwbGF0ZS9ndWxwZmlsZS5qcyIsImJvd2VyX2NvbXBvbmVudHMvaHRtbDUtYm9pbGVycGxhdGUvZGlzdC9qcy9wbHVnaW5zLmpzIiwiYm93ZXJfY29tcG9uZW50cy9odG1sNS1ib2lsZXJwbGF0ZS9zcmMvanMvcGx1Z2lucy5qcyIsImJvd2VyX2NvbXBvbmVudHMvaHRtbDUtYm9pbGVycGxhdGUvZGlzdC9qcy92ZW5kb3IvanF1ZXJ5LTEuMTEuMy5taW4uanMiLCJib3dlcl9jb21wb25lbnRzL2h0bWw1LWJvaWxlcnBsYXRlL2Rpc3QvanMvdmVuZG9yL21vZGVybml6ci0yLjguMy5taW4uanMiLCJib3dlcl9jb21wb25lbnRzL2h0bWw1LWJvaWxlcnBsYXRlL3NyYy9qcy92ZW5kb3IvbW9kZXJuaXpyLTIuOC4zLm1pbi5qcyJdLCJuYW1lcyI6WyJjaGVja1N0cmluZyIsImZpbGUiLCJzdHJpbmciLCJkb25lIiwiY2hhcmFjdGVyIiwibWF0Y2hGb3VuZCIsIm1hdGNoZWRQb3NpdGlvbnMiLCJyZWFkU3RyZWFtIiwiZnMiLCJjcmVhdGVSZWFkU3RyZWFtIiwiZW5jb2RpbmciLCJvbiIsInJlYWQiLCJjaGFyQXQiLCJsZW5ndGgiLCJhc3NlcnQiLCJlcXVhbCIsInRoaXMiLCJjbG9zZSIsInJ1blRlc3RzIiwiZGlyIiwiZGlycyIsImRpc3QiLCJkZXNjcmliZSIsIml0IiwicGF0aCIsInJlc29sdmUiLCJwa2ciLCJkZXZEZXBlbmRlbmNpZXMiLCJqcXVlcnkiLCJ2ZXJzaW9uIiwibGljZW5zZSIsInR5cGUiLCJob21lcGFnZSIsImNoZWNrRmlsZXMiLCJkaXJlY3RvcnkiLCJleHBlY3RlZEZpbGVzIiwiZmlsZXMiLCJyZXF1aXJlIiwic3luYyIsImN3ZCIsImRvdCIsIm1hcmsiLCJmb3JFYWNoIiwib2siLCJleHBlY3RlZEZpbGVUeXBlIiwic2xpY2UiLCJpbmRleE9mIiwic3RhdFN5bmMiLCJpc0ZpbGUiLCJmaWx0ZXIiLCJhcmNoaXZlIiwiZXhwZWN0ZWRGaWxlc0luQXJjaGl2ZURpciIsImV4cGVjdGVkRmlsZXNJbkRpc3REaXIiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwid2hlbiIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsImJlZm9yZUVhY2giLCJpbmplY3QiLCIkY29udHJvbGxlciIsInZpZXcxQ3RybCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwiY29udHJvbGxlckFzIiwidm0iLCJwYWdlVGl0bGUiLCJ2aWV3MkN0cmwiLCJ0ZXh0IiwiU3RyaW5nIiwicmVwbGFjZSIsIiRwcm92aWRlIiwidmFsdWUiLCJpbnRlcnBvbGF0ZUZpbHRlciIsInRvRXF1YWwiLCJkaXJlY3RpdmUiLCJzY29wZSIsImVsbSIsImF0dHJzIiwiJGNvbXBpbGUiLCIkcm9vdFNjb3BlIiwiZWxlbWVudCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwibWluRXJyIiwiRXJyb3JDb25zdHJ1Y3RvciIsIkVycm9yIiwicGFyYW1QcmVmaXgiLCJpIiwiU0tJUF9JTkRFWEVTIiwidGVtcGxhdGVBcmdzIiwiYXJndW1lbnRzIiwiY29kZSIsIm1lc3NhZ2UiLCJ0ZW1wbGF0ZSIsIm1hdGNoIiwiaW5kZXgiLCJzaGlmdGVkSW5kZXgiLCJ0b0RlYnVnU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaXNBcnJheUxpa2UiLCJvYmoiLCJpc1dpbmRvdyIsImlzQXJyYXkiLCJpc1N0cmluZyIsImpxTGl0ZSIsIk9iamVjdCIsImlzTnVtYmVyIiwiQXJyYXkiLCJpdGVtIiwiaXRlcmF0b3IiLCJjb250ZXh0Iiwia2V5IiwiaXNGdW5jdGlvbiIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImlzUHJpbWl0aXZlIiwiaXNCbGFua09iamVjdCIsImZvckVhY2hTb3J0ZWQiLCJrZXlzIiwic29ydCIsInJldmVyc2VQYXJhbXMiLCJpdGVyYXRvckZuIiwibmV4dFVpZCIsInVpZCIsInNldEhhc2hLZXkiLCJoIiwiJCRoYXNoS2V5IiwiYmFzZUV4dGVuZCIsImRzdCIsIm9ianMiLCJkZWVwIiwiaWkiLCJpc09iamVjdCIsImoiLCJqaiIsInNyYyIsImlzRGF0ZSIsIkRhdGUiLCJ2YWx1ZU9mIiwiaXNSZWdFeHAiLCJSZWdFeHAiLCJub2RlTmFtZSIsImNsb25lTm9kZSIsImlzRWxlbWVudCIsImNsb25lIiwiZXh0ZW5kIiwibWVyZ2UiLCJ0b0ludCIsInN0ciIsInBhcnNlSW50IiwiaW5oZXJpdCIsInBhcmVudCIsImV4dHJhIiwiY3JlYXRlIiwibm9vcCIsImlkZW50aXR5IiwiJCIsInZhbHVlRm4iLCJoYXNDdXN0b21Ub1N0cmluZyIsInRvU3RyaW5nIiwiaXNVbmRlZmluZWQiLCJpc0RlZmluZWQiLCJnZXRQcm90b3R5cGVPZiIsImlzU2NvcGUiLCIkZXZhbEFzeW5jIiwiJHdhdGNoIiwiaXNGb3JtRGF0YSIsImlzQmxvYiIsImlzQm9vbGVhbiIsImlzUHJvbWlzZUxpa2UiLCJ0aGVuIiwiaXNUeXBlZEFycmF5IiwiVFlQRURfQVJSQVlfUkVHRVhQIiwidGVzdCIsIm5vZGUiLCJwcm9wIiwiYXR0ciIsImZpbmQiLCJtYWtlTWFwIiwiaXRlbXMiLCJzcGxpdCIsIm5vZGVOYW1lXyIsImxvd2VyY2FzZSIsImFycmF5UmVtb3ZlIiwiYXJyYXkiLCJzcGxpY2UiLCJjb3B5Iiwic291cmNlIiwiZGVzdGluYXRpb24iLCJjb3B5UmVjdXJzZSIsInB1c2giLCJjb3B5RWxlbWVudCIsInN0YWNrU291cmNlIiwic3RhY2tEZXN0IiwibmdNaW5FcnIiLCJuZWVkc1JlY3Vyc2UiLCJjb25zdHJ1Y3RvciIsImdldFRpbWUiLCJsYXN0SW5kZXgiLCJzaGFsbG93Q29weSIsImVxdWFscyIsIm8xIiwibzIiLCJrZXlTZXQiLCJ0MSIsInQyIiwiY3JlYXRlTWFwIiwiY29uY2F0IiwiYXJyYXkxIiwiYXJyYXkyIiwic2xpY2VBcmdzIiwiYXJncyIsInN0YXJ0SW5kZXgiLCJiaW5kIiwic2VsZiIsImZuIiwiY3VycnlBcmdzIiwiYXBwbHkiLCJ0b0pzb25SZXBsYWNlciIsInZhbCIsInRvSnNvbiIsInByZXR0eSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmcm9tSnNvbiIsImpzb24iLCJwYXJzZSIsInRpbWV6b25lVG9PZmZzZXQiLCJ0aW1lem9uZSIsImZhbGxiYWNrIiwicmVxdWVzdGVkVGltZXpvbmVPZmZzZXQiLCJpc05hTiIsImFkZERhdGVNaW51dGVzIiwiZGF0ZSIsIm1pbnV0ZXMiLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsImNvbnZlcnRUaW1lem9uZVRvTG9jYWwiLCJyZXZlcnNlIiwidGltZXpvbmVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsInN0YXJ0aW5nVGFnIiwiZW1wdHkiLCJlIiwiZWxlbUh0bWwiLCJhcHBlbmQiLCJodG1sIiwibm9kZVR5cGUiLCJOT0RFX1RZUEVfVEVYVCIsInRyeURlY29kZVVSSUNvbXBvbmVudCIsImRlY29kZVVSSUNvbXBvbmVudCIsInBhcnNlS2V5VmFsdWUiLCJrZXlWYWx1ZSIsInNwbGl0UG9pbnQiLCJzdWJzdHJpbmciLCJ0b0tleVZhbHVlIiwicGFydHMiLCJhcnJheVZhbHVlIiwiZW5jb2RlVXJpUXVlcnkiLCJqb2luIiwiZW5jb2RlVXJpU2VnbWVudCIsInBjdEVuY29kZVNwYWNlcyIsImdldE5nQXR0cmlidXRlIiwibmdBdHRyIiwibmdBdHRyUHJlZml4ZXMiLCJnZXRBdHRyaWJ1dGUiLCJhbmd1bGFySW5pdCIsImJvb3RzdHJhcCIsImFwcEVsZW1lbnQiLCJwcmVmaXgiLCJuYW1lIiwiaGFzQXR0cmlidXRlIiwiY2FuZGlkYXRlIiwicXVlcnlTZWxlY3RvciIsInN0cmljdERpIiwibW9kdWxlcyIsImRlZmF1bHRDb25maWciLCJkb0Jvb3RzdHJhcCIsImluamVjdG9yIiwidGFnIiwidW5zaGlmdCIsImRlYnVnSW5mb0VuYWJsZWQiLCIkY29tcGlsZVByb3ZpZGVyIiwiY3JlYXRlSW5qZWN0b3IiLCJpbnZva2UiLCJjb21waWxlIiwiJGFwcGx5IiwiZGF0YSIsIk5HX0VOQUJMRV9ERUJVR19JTkZPIiwiTkdfREVGRVJfQk9PVFNUUkFQIiwicmVzdW1lQm9vdHN0cmFwIiwiZXh0cmFNb2R1bGVzIiwicmVzdW1lRGVmZXJyZWRCb290c3RyYXAiLCJyZWxvYWRXaXRoRGVidWdJbmZvIiwibG9jYXRpb24iLCJyZWxvYWQiLCJnZXRUZXN0YWJpbGl0eSIsInJvb3RFbGVtZW50IiwiZ2V0Iiwic25ha2VfY2FzZSIsInNlcGFyYXRvciIsIlNOQUtFX0NBU0VfUkVHRVhQIiwibGV0dGVyIiwicG9zIiwidG9Mb3dlckNhc2UiLCJiaW5kSlF1ZXJ5Iiwib3JpZ2luYWxDbGVhbkRhdGEiLCJiaW5kSlF1ZXJ5RmlyZWQiLCJqcU5hbWUiLCJqcSIsImpRdWVyeSIsIkpRTGl0ZVByb3RvdHlwZSIsImlzb2xhdGVTY29wZSIsImluaGVyaXRlZERhdGEiLCJjbGVhbkRhdGEiLCJlbGVtcyIsImV2ZW50cyIsInNraXBEZXN0cm95T25OZXh0SlF1ZXJ5Q2xlYW5EYXRhIiwiZWxlbSIsIl9kYXRhIiwiJGRlc3Ryb3kiLCJ0cmlnZ2VySGFuZGxlciIsIkpRTGl0ZSIsImFzc2VydEFyZyIsImFyZyIsInJlYXNvbiIsImFzc2VydEFyZ0ZuIiwiYWNjZXB0QXJyYXlBbm5vdGF0aW9uIiwiYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkiLCJnZXR0ZXIiLCJiaW5kRm5Ub1Njb3BlIiwibGFzdEluc3RhbmNlIiwibGVuIiwiZ2V0QmxvY2tOb2RlcyIsIm5vZGVzIiwiYmxvY2tOb2RlcyIsImVuZE5vZGUiLCJuZXh0U2libGluZyIsInNldHVwTW9kdWxlTG9hZGVyIiwiZW5zdXJlIiwiZmFjdG9yeSIsIiRpbmplY3Rvck1pbkVyciIsIiQkbWluRXJyIiwicmVxdWlyZXMiLCJjb25maWdGbiIsImludm9rZUxhdGVyIiwicHJvdmlkZXIiLCJtZXRob2QiLCJpbnNlcnRNZXRob2QiLCJxdWV1ZSIsImludm9rZVF1ZXVlIiwibW9kdWxlSW5zdGFuY2UiLCJpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUiLCJyZWNpcGVOYW1lIiwiZmFjdG9yeUZ1bmN0aW9uIiwiJCRtb2R1bGVOYW1lIiwiY29uZmlnQmxvY2tzIiwicnVuQmxvY2tzIiwiX2ludm9rZVF1ZXVlIiwiX2NvbmZpZ0Jsb2NrcyIsIl9ydW5CbG9ja3MiLCJzZXJ2aWNlIiwiY29uc3RhbnQiLCJkZWNvcmF0b3IiLCJhbmltYXRpb24iLCJydW4iLCJibG9jayIsInNlcmlhbGl6ZU9iamVjdCIsInNlZW4iLCJwdWJsaXNoRXh0ZXJuYWxBUEkiLCJ1cHBlcmNhc2UiLCJjYWxsYmFja3MiLCJjb3VudGVyIiwiJCRjc3AiLCJjc3AiLCJhbmd1bGFyTW9kdWxlIiwiJCRzYW5pdGl6ZVVyaSIsIiQkU2FuaXRpemVVcmlQcm92aWRlciIsIiRDb21waWxlUHJvdmlkZXIiLCJhIiwiaHRtbEFuY2hvckRpcmVjdGl2ZSIsImlucHV0IiwiaW5wdXREaXJlY3RpdmUiLCJ0ZXh0YXJlYSIsImZvcm0iLCJmb3JtRGlyZWN0aXZlIiwic2NyaXB0Iiwic2NyaXB0RGlyZWN0aXZlIiwic2VsZWN0Iiwic2VsZWN0RGlyZWN0aXZlIiwic3R5bGUiLCJzdHlsZURpcmVjdGl2ZSIsIm9wdGlvbiIsIm9wdGlvbkRpcmVjdGl2ZSIsIm5nQmluZCIsIm5nQmluZERpcmVjdGl2ZSIsIm5nQmluZEh0bWwiLCJuZ0JpbmRIdG1sRGlyZWN0aXZlIiwibmdCaW5kVGVtcGxhdGUiLCJuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSIsIm5nQ2xhc3MiLCJuZ0NsYXNzRGlyZWN0aXZlIiwibmdDbGFzc0V2ZW4iLCJuZ0NsYXNzRXZlbkRpcmVjdGl2ZSIsIm5nQ2xhc3NPZGQiLCJuZ0NsYXNzT2RkRGlyZWN0aXZlIiwibmdDbG9hayIsIm5nQ2xvYWtEaXJlY3RpdmUiLCJuZ0NvbnRyb2xsZXIiLCJuZ0NvbnRyb2xsZXJEaXJlY3RpdmUiLCJuZ0Zvcm0iLCJuZ0Zvcm1EaXJlY3RpdmUiLCJuZ0hpZGUiLCJuZ0hpZGVEaXJlY3RpdmUiLCJuZ0lmIiwibmdJZkRpcmVjdGl2ZSIsIm5nSW5jbHVkZSIsIm5nSW5jbHVkZURpcmVjdGl2ZSIsIm5nSW5pdCIsIm5nSW5pdERpcmVjdGl2ZSIsIm5nTm9uQmluZGFibGUiLCJuZ05vbkJpbmRhYmxlRGlyZWN0aXZlIiwibmdQbHVyYWxpemUiLCJuZ1BsdXJhbGl6ZURpcmVjdGl2ZSIsIm5nUmVwZWF0IiwibmdSZXBlYXREaXJlY3RpdmUiLCJuZ1Nob3ciLCJuZ1Nob3dEaXJlY3RpdmUiLCJuZ1N0eWxlIiwibmdTdHlsZURpcmVjdGl2ZSIsIm5nU3dpdGNoIiwibmdTd2l0Y2hEaXJlY3RpdmUiLCJuZ1N3aXRjaFdoZW4iLCJuZ1N3aXRjaFdoZW5EaXJlY3RpdmUiLCJuZ1N3aXRjaERlZmF1bHQiLCJuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUiLCJuZ09wdGlvbnMiLCJuZ09wdGlvbnNEaXJlY3RpdmUiLCJuZ1RyYW5zY2x1ZGUiLCJuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUiLCJuZ01vZGVsIiwibmdNb2RlbERpcmVjdGl2ZSIsIm5nTGlzdCIsIm5nTGlzdERpcmVjdGl2ZSIsIm5nQ2hhbmdlIiwibmdDaGFuZ2VEaXJlY3RpdmUiLCJwYXR0ZXJuIiwicGF0dGVybkRpcmVjdGl2ZSIsIm5nUGF0dGVybiIsInJlcXVpcmVkIiwicmVxdWlyZWREaXJlY3RpdmUiLCJuZ1JlcXVpcmVkIiwibWlubGVuZ3RoIiwibWlubGVuZ3RoRGlyZWN0aXZlIiwibmdNaW5sZW5ndGgiLCJtYXhsZW5ndGgiLCJtYXhsZW5ndGhEaXJlY3RpdmUiLCJuZ01heGxlbmd0aCIsIm5nVmFsdWUiLCJuZ1ZhbHVlRGlyZWN0aXZlIiwibmdNb2RlbE9wdGlvbnMiLCJuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSIsIm5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlIiwibmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMiLCJuZ0V2ZW50RGlyZWN0aXZlcyIsIiRhbmNob3JTY3JvbGwiLCIkQW5jaG9yU2Nyb2xsUHJvdmlkZXIiLCIkYW5pbWF0ZSIsIiRBbmltYXRlUHJvdmlkZXIiLCIkYW5pbWF0ZUNzcyIsIiRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyIiwiJCRhbmltYXRlSnMiLCIkJENvcmVBbmltYXRlSnNQcm92aWRlciIsIiQkYW5pbWF0ZVF1ZXVlIiwiJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIiLCIkJEFuaW1hdGVSdW5uZXIiLCIkJEFuaW1hdGVSdW5uZXJGYWN0b3J5UHJvdmlkZXIiLCIkJGFuaW1hdGVBc3luY1J1biIsIiQkQW5pbWF0ZUFzeW5jUnVuRmFjdG9yeVByb3ZpZGVyIiwiJGJyb3dzZXIiLCIkQnJvd3NlclByb3ZpZGVyIiwiJGNhY2hlRmFjdG9yeSIsIiRDYWNoZUZhY3RvcnlQcm92aWRlciIsIiRDb250cm9sbGVyUHJvdmlkZXIiLCIkZG9jdW1lbnQiLCIkRG9jdW1lbnRQcm92aWRlciIsIiRleGNlcHRpb25IYW5kbGVyIiwiJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlciIsIiRmaWx0ZXIiLCIkRmlsdGVyUHJvdmlkZXIiLCIkJGZvcmNlUmVmbG93IiwiJCRGb3JjZVJlZmxvd1Byb3ZpZGVyIiwiJGludGVycG9sYXRlIiwiJEludGVycG9sYXRlUHJvdmlkZXIiLCIkaW50ZXJ2YWwiLCIkSW50ZXJ2YWxQcm92aWRlciIsIiRodHRwIiwiJEh0dHBQcm92aWRlciIsIiRodHRwUGFyYW1TZXJpYWxpemVyIiwiJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlciIsIiRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlIiwiJEh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VQcm92aWRlciIsIiRodHRwQmFja2VuZCIsIiRIdHRwQmFja2VuZFByb3ZpZGVyIiwiJHhockZhY3RvcnkiLCIkeGhyRmFjdG9yeVByb3ZpZGVyIiwiJGxvY2F0aW9uIiwiJExvY2F0aW9uUHJvdmlkZXIiLCIkbG9nIiwiJExvZ1Byb3ZpZGVyIiwiJHBhcnNlIiwiJFBhcnNlUHJvdmlkZXIiLCIkUm9vdFNjb3BlUHJvdmlkZXIiLCIkcSIsIiRRUHJvdmlkZXIiLCIkJHEiLCIkJFFQcm92aWRlciIsIiRzY2UiLCIkU2NlUHJvdmlkZXIiLCIkc2NlRGVsZWdhdGUiLCIkU2NlRGVsZWdhdGVQcm92aWRlciIsIiRzbmlmZmVyIiwiJFNuaWZmZXJQcm92aWRlciIsIiR0ZW1wbGF0ZUNhY2hlIiwiJFRlbXBsYXRlQ2FjaGVQcm92aWRlciIsIiR0ZW1wbGF0ZVJlcXVlc3QiLCIkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIiLCIkJHRlc3RhYmlsaXR5IiwiJCRUZXN0YWJpbGl0eVByb3ZpZGVyIiwiJHRpbWVvdXQiLCIkVGltZW91dFByb3ZpZGVyIiwiJHdpbmRvdyIsIiRXaW5kb3dQcm92aWRlciIsIiQkckFGIiwiJCRSQUZQcm92aWRlciIsIiQkanFMaXRlIiwiJCRqcUxpdGVQcm92aWRlciIsIiQkSGFzaE1hcCIsIiQkSGFzaE1hcFByb3ZpZGVyIiwiJCRjb29raWVSZWFkZXIiLCIkJENvb2tpZVJlYWRlclByb3ZpZGVyIiwianFOZXh0SWQiLCJqcUlkIiwiY2FtZWxDYXNlIiwiU1BFQ0lBTF9DSEFSU19SRUdFWFAiLCJfIiwib2Zmc2V0IiwidG9VcHBlckNhc2UiLCJNT1pfSEFDS19SRUdFWFAiLCJqcUxpdGVJc1RleHROb2RlIiwiSFRNTF9SRUdFWFAiLCJqcUxpdGVBY2NlcHRzRGF0YSIsIk5PREVfVFlQRV9FTEVNRU5UIiwiTk9ERV9UWVBFX0RPQ1VNRU5UIiwianFMaXRlSGFzRGF0YSIsImpxQ2FjaGUiLCJuZzMzOSIsImpxTGl0ZUJ1aWxkRnJhZ21lbnQiLCJ0bXAiLCJ3cmFwIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJUQUdfTkFNRV9SRUdFWFAiLCJleGVjIiwid3JhcE1hcCIsIl9kZWZhdWx0IiwiaW5uZXJIVE1MIiwiWEhUTUxfVEFHX1JFR0VYUCIsImxhc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJmaXJzdENoaWxkIiwidGV4dENvbnRlbnQiLCJqcUxpdGVQYXJzZUhUTUwiLCJwYXJzZWQiLCJTSU5HTEVfVEFHX1JFR0VYUCIsImFyZ0lzU3RyaW5nIiwidHJpbSIsImpxTGl0ZU1pbkVyciIsImpxTGl0ZUFkZE5vZGVzIiwianFMaXRlQ2xvbmUiLCJqcUxpdGVEZWFsb2MiLCJvbmx5RGVzY2VuZGFudHMiLCJqcUxpdGVSZW1vdmVEYXRhIiwicXVlcnlTZWxlY3RvckFsbCIsImRlc2NlbmRhbnRzIiwibCIsImpxTGl0ZU9mZiIsInVuc3VwcG9ydGVkIiwiZXhwYW5kb1N0b3JlIiwianFMaXRlRXhwYW5kb1N0b3JlIiwiaGFuZGxlIiwicmVtb3ZlSGFuZGxlciIsImxpc3RlbmVyRm5zIiwicmVtb3ZlRXZlbnRMaXN0ZW5lckZuIiwiTU9VU0VfRVZFTlRfTUFQIiwiZXhwYW5kb0lkIiwiY3JlYXRlSWZOZWNlc3NhcnkiLCJqcUxpdGVEYXRhIiwiaXNTaW1wbGVTZXR0ZXIiLCJpc1NpbXBsZUdldHRlciIsIm1hc3NHZXR0ZXIiLCJqcUxpdGVIYXNDbGFzcyIsInNlbGVjdG9yIiwianFMaXRlUmVtb3ZlQ2xhc3MiLCJjc3NDbGFzc2VzIiwic2V0QXR0cmlidXRlIiwiY3NzQ2xhc3MiLCJqcUxpdGVBZGRDbGFzcyIsImV4aXN0aW5nQ2xhc3NlcyIsInJvb3QiLCJlbGVtZW50cyIsImpxTGl0ZUNvbnRyb2xsZXIiLCJqcUxpdGVJbmhlcml0ZWREYXRhIiwiZG9jdW1lbnRFbGVtZW50IiwibmFtZXMiLCJwYXJlbnROb2RlIiwiTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UIiwiaG9zdCIsImpxTGl0ZUVtcHR5IiwicmVtb3ZlQ2hpbGQiLCJqcUxpdGVSZW1vdmUiLCJrZWVwRGF0YSIsImpxTGl0ZURvY3VtZW50TG9hZGVkIiwiYWN0aW9uIiwid2luIiwicmVhZHlTdGF0ZSIsInNldFRpbWVvdXQiLCJnZXRCb29sZWFuQXR0ck5hbWUiLCJib29sZWFuQXR0ciIsIkJPT0xFQU5fQVRUUiIsIkJPT0xFQU5fRUxFTUVOVFMiLCJnZXRBbGlhc2VkQXR0ck5hbWUiLCJBTElBU0VEX0FUVFIiLCJjcmVhdGVFdmVudEhhbmRsZXIiLCJldmVudEhhbmRsZXIiLCJldmVudCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJldmVudEZucyIsImV2ZW50Rm5zTGVuZ3RoIiwiaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwib3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJzdG9wUHJvcGFnYXRpb24iLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImhhbmRsZXJXcmFwcGVyIiwic3BlY2lhbEhhbmRsZXJXcmFwcGVyIiwiZGVmYXVsdEhhbmRsZXJXcmFwcGVyIiwiaGFuZGxlciIsInNwZWNpYWxNb3VzZUhhbmRsZXJXcmFwcGVyIiwidGFyZ2V0IiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJqcUxpdGVDb250YWlucyIsIiRnZXQiLCJoYXNDbGFzcyIsImNsYXNzZXMiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiaGFzaEtleSIsIm5leHRVaWRGbiIsIm9ialR5cGUiLCJIYXNoTWFwIiwiaXNvbGF0ZWRVaWQiLCJwdXQiLCJhbm9uRm4iLCJmblRleHQiLCJTVFJJUF9DT01NRU5UUyIsIkZOX0FSR1MiLCJhbm5vdGF0ZSIsIiRpbmplY3QiLCJhcmdEZWNsIiwibGFzdCIsIkZOX0FSR19TUExJVCIsIkZOX0FSRyIsImFsbCIsInVuZGVyc2NvcmUiLCJtb2R1bGVzVG9Mb2FkIiwic3VwcG9ydE9iamVjdCIsImRlbGVnYXRlIiwicHJvdmlkZXJfIiwicHJvdmlkZXJJbmplY3RvciIsImluc3RhbnRpYXRlIiwicHJvdmlkZXJDYWNoZSIsInByb3ZpZGVyU3VmZml4IiwiZW5mb3JjZVJldHVyblZhbHVlIiwicmVzdWx0IiwiaW5zdGFuY2VJbmplY3RvciIsImZhY3RvcnlGbiIsImVuZm9yY2UiLCIkaW5qZWN0b3IiLCJpbnN0YW5jZUNhY2hlIiwic2VydmljZU5hbWUiLCJkZWNvckZuIiwib3JpZ1Byb3ZpZGVyIiwib3JpZyRnZXQiLCJvcmlnSW5zdGFuY2UiLCIkZGVsZWdhdGUiLCJsb2FkTW9kdWxlcyIsIm1vZHVsZUZuIiwicnVuSW52b2tlUXVldWUiLCJpbnZva2VBcmdzIiwibG9hZGVkTW9kdWxlcyIsInN0YWNrIiwiY3JlYXRlSW50ZXJuYWxJbmplY3RvciIsImNhY2hlIiwiZ2V0U2VydmljZSIsImNhbGxlciIsIklOU1RBTlRJQVRJTkciLCJlcnIiLCJzaGlmdCIsImxvY2FscyIsIiQkYW5ub3RhdGUiLCJUeXBlIiwiaW5zdGFuY2UiLCJwcm90b3R5cGUiLCJyZXR1cm5lZFZhbHVlIiwiaGFzIiwiYXV0b1Njcm9sbGluZ0VuYWJsZWQiLCJkaXNhYmxlQXV0b1Njcm9sbGluZyIsImdldEZpcnN0QW5jaG9yIiwibGlzdCIsInNvbWUiLCJnZXRZT2Zmc2V0Iiwic2Nyb2xsIiwieU9mZnNldCIsImdldENvbXB1dGVkU3R5bGUiLCJwb3NpdGlvbiIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJvdHRvbSIsInNjcm9sbFRvIiwic2Nyb2xsSW50b1ZpZXciLCJlbGVtVG9wIiwidG9wIiwic2Nyb2xsQnkiLCJoYXNoIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsIm5ld1ZhbCIsIm9sZFZhbCIsIm1lcmdlQ2xhc3NlcyIsImIiLCJleHRyYWN0RWxlbWVudE5vZGUiLCJFTEVNRU5UX05PREUiLCJzcGxpdENsYXNzZXMiLCJrbGFzcyIsInByZXBhcmVBbmltYXRlT3B0aW9ucyIsIm9wdGlvbnMiLCJCcm93c2VyIiwiY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QiLCJvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCIsIm91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcyIsInBvcCIsImVycm9yIiwiZ2V0SGFzaCIsInVybCIsInN1YnN0ciIsImNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlIiwicGVuZGluZ0xvY2F0aW9uIiwiY2FjaGVTdGF0ZSIsImZpcmVVcmxDaGFuZ2UiLCJnZXRDdXJyZW50U3RhdGUiLCJoaXN0b3J5Iiwic3RhdGUiLCJjYWNoZWRTdGF0ZSIsImxhc3RDYWNoZWRTdGF0ZSIsImxhc3RCcm93c2VyVXJsIiwibGFzdEhpc3RvcnlTdGF0ZSIsInVybENoYW5nZUxpc3RlbmVycyIsImxpc3RlbmVyIiwiY2xlYXJUaW1lb3V0IiwicGVuZGluZ0RlZmVySWRzIiwiaXNNb2NrIiwiJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCIsIiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQiLCJub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzIiwiY2FsbGJhY2siLCJocmVmIiwiYmFzZUVsZW1lbnQiLCJzYW1lU3RhdGUiLCJzYW1lQmFzZSIsInN0cmlwSGFzaCIsInVybENoYW5nZUluaXQiLCJvblVybENoYW5nZSIsIiQkYXBwbGljYXRpb25EZXN0cm95ZWQiLCJvZmYiLCIkJGNoZWNrVXJsQ2hhbmdlIiwiYmFzZUhyZWYiLCJkZWZlciIsImRlbGF5IiwidGltZW91dElkIiwiY2FuY2VsIiwiZGVmZXJJZCIsImNhY2hlRmFjdG9yeSIsImNhY2hlSWQiLCJyZWZyZXNoIiwiZW50cnkiLCJmcmVzaEVuZCIsInN0YWxlRW5kIiwibiIsImxpbmsiLCJwIiwibmV4dEVudHJ5IiwicHJldkVudHJ5IiwiY2FjaGVzIiwic2l6ZSIsInN0YXRzIiwiaWQiLCJjYXBhY2l0eSIsIk51bWJlciIsIk1BWF9WQUxVRSIsImxydUhhc2giLCJscnVFbnRyeSIsInJlbW92ZSIsInJlbW92ZUFsbCIsImRlc3Ryb3kiLCJpbmZvIiwiJCRzYW5pdGl6ZVVyaVByb3ZpZGVyIiwicGFyc2VJc29sYXRlQmluZGluZ3MiLCJkaXJlY3RpdmVOYW1lIiwiaXNDb250cm9sbGVyIiwiTE9DQUxfUkVHRVhQIiwiYmluZGluZ3MiLCJkZWZpbml0aW9uIiwic2NvcGVOYW1lIiwiJGNvbXBpbGVNaW5FcnIiLCJtb2RlIiwiY29sbGVjdGlvbiIsIm9wdGlvbmFsIiwiYXR0ck5hbWUiLCJwYXJzZURpcmVjdGl2ZUJpbmRpbmdzIiwiYmluZFRvQ29udHJvbGxlciIsImlkZW50aWZpZXJGb3JDb250cm9sbGVyIiwiYXNzZXJ0VmFsaWREaXJlY3RpdmVOYW1lIiwiaGFzRGlyZWN0aXZlcyIsIlN1ZmZpeCIsIkNPTU1FTlRfRElSRUNUSVZFX1JFR0VYUCIsIkNMQVNTX0RJUkVDVElWRV9SRUdFWFAiLCJBTExfT1JfTk9USElOR19BVFRSUyIsIlJFUVVJUkVfUFJFRklYX1JFR0VYUCIsIkVWRU5UX0hBTkRMRVJfQVRUUl9SRUdFWFAiLCJyZWdpc3RlckRpcmVjdGl2ZSIsImRpcmVjdGl2ZUZhY3RvcnkiLCJkaXJlY3RpdmVzIiwicHJpb3JpdHkiLCJyZXN0cmljdCIsIiQkYmluZGluZ3MiLCIkJGlzb2xhdGVCaW5kaW5ncyIsImFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0IiwicmVnZXhwIiwiaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0IiwiZW5hYmxlZCIsInNhZmVBZGRDbGFzcyIsIiRlbGVtZW50IiwiY2xhc3NOYW1lIiwiJGNvbXBpbGVOb2RlcyIsInRyYW5zY2x1ZGVGbiIsIm1heFByaW9yaXR5IiwiaWdub3JlRGlyZWN0aXZlIiwicHJldmlvdXNDb21waWxlQ29udGV4dCIsIm5vZGVWYWx1ZSIsImNvbXBvc2l0ZUxpbmtGbiIsImNvbXBpbGVOb2RlcyIsIiQkYWRkU2NvcGVDbGFzcyIsIm5hbWVzcGFjZSIsImNsb25lQ29ubmVjdEZuIiwibmVlZHNOZXdTY29wZSIsIiRwYXJlbnQiLCIkbmV3IiwicGFyZW50Qm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlQ29udHJvbGxlcnMiLCJmdXR1cmVQYXJlbnRFbGVtZW50IiwiJCRib3VuZFRyYW5zY2x1ZGUiLCJkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzIiwiJGxpbmtOb2RlIiwid3JhcFRlbXBsYXRlIiwiY29udHJvbGxlck5hbWUiLCIkJGFkZFNjb3BlSW5mbyIsInBhcmVudEVsZW1lbnQiLCJub2RlTGlzdCIsIiRyb290RWxlbWVudCIsIm5vZGVMaW5rRm4iLCJjaGlsZExpbmtGbiIsImNoaWxkU2NvcGUiLCJpZHgiLCJjaGlsZEJvdW5kVHJhbnNjbHVkZUZuIiwic3RhYmxlTm9kZUxpc3QiLCJub2RlTGlua0ZuRm91bmQiLCJub2RlTGlzdExlbmd0aCIsImxpbmtGbnMiLCJ0cmFuc2NsdWRlT25UaGlzRWxlbWVudCIsImNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuIiwidHJhbnNjbHVkZSIsInRlbXBsYXRlT25UaGlzRWxlbWVudCIsImxpbmtGbkZvdW5kIiwiQXR0cmlidXRlcyIsImNvbGxlY3REaXJlY3RpdmVzIiwiYXBwbHlEaXJlY3RpdmVzVG9Ob2RlIiwiJCRlbGVtZW50IiwidGVybWluYWwiLCJwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuIiwiYm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlZFNjb3BlIiwiY2xvbmVGbiIsImNvbnRyb2xsZXJzIiwiY29udGFpbmluZ1Njb3BlIiwiJCR0cmFuc2NsdWRlZCIsImF0dHJzTWFwIiwiJGF0dHIiLCJhZGREaXJlY3RpdmUiLCJkaXJlY3RpdmVOb3JtYWxpemUiLCJuTmFtZSIsIm5nQXR0ck5hbWUiLCJpc05nQXR0ciIsIm5BdHRycyIsImF0dHJpYnV0ZXMiLCJhdHRyU3RhcnROYW1lIiwiYXR0ckVuZE5hbWUiLCJOR19BVFRSX0JJTkRJTkciLCJQUkVGSVhfUkVHRVhQIiwibXVsdGlFbGVtZW50TWF0Y2giLCJNVUxUSV9FTEVNRU5UX0RJUl9SRSIsImRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50IiwiYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlIiwiYW5pbVZhbCIsIm1zaWUiLCJhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUiLCJOT0RFX1RZUEVfQ09NTUVOVCIsImJ5UHJpb3JpdHkiLCJncm91cFNjYW4iLCJhdHRyU3RhcnQiLCJhdHRyRW5kIiwiZGVwdGgiLCJncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlciIsImxpbmtGbiIsImNvbXBpbGVOb2RlIiwidGVtcGxhdGVBdHRycyIsImpxQ29sbGVjdGlvbiIsIm9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSIsInByZUxpbmtGbnMiLCJwb3N0TGlua0ZucyIsImFkZExpbmtGbnMiLCJwcmUiLCJwb3N0IiwibmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIiwiJCRpc29sYXRlU2NvcGUiLCJjbG9uZUFuZEFubm90YXRlRm4iLCJnZXRDb250cm9sbGVycyIsImVsZW1lbnRDb250cm9sbGVycyIsImluaGVyaXRUeXBlIiwiZGF0YU5hbWUiLCJzZXR1cENvbnRyb2xsZXJzIiwiY29udHJvbGxlckRpcmVjdGl2ZXMiLCJjb250cm9sbGVyS2V5IiwiJHNjb3BlIiwiJGF0dHJzIiwiJHRyYW5zY2x1ZGUiLCJjb250cm9sbGVySW5zdGFuY2UiLCJoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSIsImxpbmtOb2RlIiwiY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGUiLCJjbG9uZUF0dGFjaEZuIiwic2NvcGVUb0NoaWxkIiwiY29udHJvbGxlclNjb3BlIiwicmVtb3ZlU2NvcGVCaW5kaW5nV2F0Y2hlcyIsInJlbW92ZUNvbnRyb2xsZXJCaW5kaW5nV2F0Y2hlcyIsIm5ld1Njb3BlRGlyZWN0aXZlIiwidGVtcGxhdGVEaXJlY3RpdmUiLCIkJG9yaWdpbmFsRGlyZWN0aXZlIiwiaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzIiwiJG9uIiwiY29udHJvbGxlckRpcmVjdGl2ZSIsImlkZW50aWZpZXIiLCJjb250cm9sbGVyUmVzdWx0IiwiaW52b2tlTGlua0ZuIiwiJHRlbXBsYXRlIiwiZGlyZWN0aXZlVmFsdWUiLCJ0ZXJtaW5hbFByaW9yaXR5Iiwibm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSIsImhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUiLCJoYXNUZW1wbGF0ZSIsIiRjb21waWxlTm9kZSIsInJlcGxhY2VEaXJlY3RpdmUiLCJjaGlsZFRyYW5zY2x1ZGVGbiIsIiQkc3RhcnQiLCIkJGVuZCIsImFzc2VydE5vRHVwbGljYXRlIiwiJCR0bGIiLCJjcmVhdGVDb21tZW50IiwicmVwbGFjZVdpdGgiLCJjb250ZW50cyIsIiQkbmV3U2NvcGUiLCJkZW5vcm1hbGl6ZVRlbXBsYXRlIiwicmVtb3ZlQ29tbWVudHMiLCJ0ZW1wbGF0ZU5hbWVzcGFjZSIsIm5ld1RlbXBsYXRlQXR0cnMiLCJ0ZW1wbGF0ZURpcmVjdGl2ZXMiLCJ1bnByb2Nlc3NlZERpcmVjdGl2ZXMiLCJtYXJrRGlyZWN0aXZlU2NvcGUiLCJtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyIsImNvbXBpbGVUZW1wbGF0ZVVybCIsIk1hdGgiLCJtYXgiLCJuZXdTY29wZSIsInREaXJlY3RpdmVzIiwic3RhcnRBdHRyTmFtZSIsImVuZEF0dHJOYW1lIiwibXVsdGlFbGVtZW50Iiwic3JjQXR0ciIsImRzdEF0dHIiLCIkc2V0IiwidEF0dHJzIiwiYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4iLCJhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4iLCJsaW5rUXVldWUiLCJiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlIiwib3JpZ0FzeW5jRGlyZWN0aXZlIiwiZGVyaXZlZFN5bmNEaXJlY3RpdmUiLCJjb250ZW50IiwidGVtcFRlbXBsYXRlQXR0cnMiLCJiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlIiwibGlua1Jvb3RFbGVtZW50IiwiJCRkZXN0cm95ZWQiLCJvbGRDbGFzc2VzIiwiaWdub3JlQ2hpbGRMaW5rRm4iLCJkaWZmIiwid2hhdCIsInByZXZpb3VzRGlyZWN0aXZlIiwid3JhcE1vZHVsZU5hbWVJZkRlZmluZWQiLCJtb2R1bGVOYW1lIiwiaW50ZXJwb2xhdGVGbiIsInRlbXBsYXRlTm9kZSIsInRlbXBsYXRlTm9kZVBhcmVudCIsImhhc0NvbXBpbGVQYXJlbnQiLCIkJGFkZEJpbmRpbmdDbGFzcyIsIiQkYWRkQmluZGluZ0luZm8iLCJleHByZXNzaW9ucyIsIndyYXBwZXIiLCJnZXRUcnVzdGVkQ29udGV4dCIsImF0dHJOb3JtYWxpemVkTmFtZSIsIkhUTUwiLCJSRVNPVVJDRV9VUkwiLCJhbGxPck5vdGhpbmciLCJ0cnVzdGVkQ29udGV4dCIsIiQkb2JzZXJ2ZXJzIiwibmV3VmFsdWUiLCIkJGludGVyIiwiJCRzY29wZSIsIm9sZFZhbHVlIiwiJHVwZGF0ZUNsYXNzIiwiZWxlbWVudHNUb1JlbW92ZSIsIm5ld05vZGUiLCJmaXJzdEVsZW1lbnRUb1JlbW92ZSIsInJlbW92ZUNvdW50IiwiajIiLCJyZXBsYWNlQ2hpbGQiLCJoYXNEYXRhIiwiZXhwYW5kbyIsImsiLCJrayIsImFubm90YXRpb24iLCJyZW1vdmVXYXRjaENvbGxlY3Rpb24iLCJsYXN0VmFsdWUiLCJwYXJlbnRHZXQiLCJwYXJlbnRTZXQiLCJjb21wYXJlIiwiJG9ic2VydmUiLCJsaXRlcmFsIiwiYXNzaWduIiwicGFyZW50VmFsdWVXYXRjaCIsInBhcmVudFZhbHVlIiwiJHN0YXRlZnVsIiwicmVtb3ZlV2F0Y2giLCIkd2F0Y2hDb2xsZWN0aW9uIiwiYXR0cmlidXRlc1RvQ29weSIsIiRub3JtYWxpemUiLCIkYWRkQ2xhc3MiLCJjbGFzc1ZhbCIsIiRyZW1vdmVDbGFzcyIsIm5ld0NsYXNzZXMiLCJ0b0FkZCIsInRva2VuRGlmZmVyZW5jZSIsInRvUmVtb3ZlIiwid3JpdGVBdHRyIiwiYm9vbGVhbktleSIsImFsaWFzZWRLZXkiLCJvYnNlcnZlciIsInRyaW1tZWRTcmNzZXQiLCJzcmNQYXR0ZXJuIiwicmF3VXJpcyIsIm5iclVyaXNXaXRoMnBhcnRzIiwiZmxvb3IiLCJpbm5lcklkeCIsImxhc3RUdXBsZSIsInJlbW92ZUF0dHIiLCJsaXN0ZW5lcnMiLCJzdGFydFN5bWJvbCIsImVuZFN5bWJvbCIsImJpbmRpbmciLCJpc29sYXRlZCIsIm5vVGVtcGxhdGUiLCJzdHIxIiwic3RyMiIsInZhbHVlcyIsInRva2VuczEiLCJ0b2tlbnMyIiwib3V0ZXIiLCJ0b2tlbiIsImpxTm9kZXMiLCJpZGVudCIsIkNOVFJMX1JFRyIsImdsb2JhbHMiLCJyZWdpc3RlciIsImFsbG93R2xvYmFscyIsImFkZElkZW50aWZpZXIiLCJleHByZXNzaW9uIiwibGF0ZXIiLCIkY29udHJvbGxlck1pbkVyciIsImNvbnRyb2xsZXJQcm90b3R5cGUiLCJleGNlcHRpb24iLCJjYXVzZSIsInNlcmlhbGl6ZVZhbHVlIiwidiIsInRvSVNPU3RyaW5nIiwicGFyYW1zIiwic2VyaWFsaXplIiwidG9TZXJpYWxpemUiLCJ0b3BMZXZlbCIsImRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0iLCJoZWFkZXJzIiwidGVtcERhdGEiLCJKU09OX1BST1RFQ1RJT05fUFJFRklYIiwiY29udGVudFR5cGUiLCJBUFBMSUNBVElPTl9KU09OIiwiaXNKc29uTGlrZSIsImpzb25TdGFydCIsIkpTT05fU1RBUlQiLCJKU09OX0VORFMiLCJwYXJzZUhlYWRlcnMiLCJmaWxsSW5QYXJzZWQiLCJsaW5lIiwiaGVhZGVyVmFsIiwiaGVhZGVyS2V5IiwiaGVhZGVyc0dldHRlciIsImhlYWRlcnNPYmoiLCJ0cmFuc2Zvcm1EYXRhIiwic3RhdHVzIiwiZm5zIiwiaXNTdWNjZXNzIiwiZGVmYXVsdHMiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInRyYW5zZm9ybVJlcXVlc3QiLCJkIiwiY29tbW9uIiwiQWNjZXB0IiwiQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04iLCJwYXRjaCIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJwYXJhbVNlcmlhbGl6ZXIiLCJ1c2VBcHBseUFzeW5jIiwidXNlTGVnYWN5UHJvbWlzZSIsInVzZUxlZ2FjeVByb21pc2VFeHRlbnNpb25zIiwiaW50ZXJjZXB0b3JGYWN0b3JpZXMiLCJpbnRlcmNlcHRvcnMiLCJyZXF1ZXN0Q29uZmlnIiwicmVzcG9uc2UiLCJyZXNwIiwicmVqZWN0IiwiZXhlY3V0ZUhlYWRlckZucyIsImhlYWRlckNvbnRlbnQiLCJwcm9jZXNzZWRIZWFkZXJzIiwiaGVhZGVyRm4iLCJoZWFkZXIiLCJtZXJnZUhlYWRlcnMiLCJkZWZIZWFkZXJOYW1lIiwibG93ZXJjYXNlRGVmSGVhZGVyTmFtZSIsInJlcUhlYWRlck5hbWUiLCJkZWZIZWFkZXJzIiwicmVxSGVhZGVycyIsImRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uIiwic2VydmVyUmVxdWVzdCIsInJlcURhdGEiLCJ3aXRoQ3JlZGVudGlhbHMiLCJzZW5kUmVxIiwiY2hhaW4iLCJwcm9taXNlIiwicmV2ZXJzZWRJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlcXVlc3QiLCJyZXF1ZXN0RXJyb3IiLCJyZXNwb25zZUVycm9yIiwidGhlbkZuIiwicmVqZWN0Rm4iLCJzdWNjZXNzIiwiJGh0dHBNaW5FcnJMZWdhY3lGbiIsImNyZWF0ZVNob3J0TWV0aG9kcyIsImNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhIiwiaGVhZGVyc1N0cmluZyIsInN0YXR1c1RleHQiLCJyZXNvbHZlSHR0cFByb21pc2UiLCJyZXNvbHZlUHJvbWlzZSIsIiRhcHBseUFzeW5jIiwiJCRwaGFzZSIsImRlZmVycmVkIiwicmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0IiwicmVtb3ZlUGVuZGluZ1JlcSIsInBlbmRpbmdSZXF1ZXN0cyIsImNhY2hlZFJlc3AiLCJidWlsZFVybCIsImRlZmF1bHRDYWNoZSIsInhzcmZWYWx1ZSIsInVybElzU2FtZU9yaWdpbiIsInRpbWVvdXQiLCJyZXNwb25zZVR5cGUiLCJzZXJpYWxpemVkUGFyYW1zIiwiaW50ZXJjZXB0b3JGYWN0b3J5IiwiWE1MSHR0cFJlcXVlc3QiLCJjcmVhdGVIdHRwQmFja2VuZCIsImNyZWF0ZVhociIsIiRicm93c2VyRGVmZXIiLCJyYXdEb2N1bWVudCIsImpzb25wUmVxIiwiY2FsbGJhY2tJZCIsImFzeW5jIiwiYm9keSIsImNhbGxlZCIsImFkZEV2ZW50TGlzdGVuZXJGbiIsInRpbWVvdXRSZXF1ZXN0IiwianNvbnBEb25lIiwieGhyIiwiYWJvcnQiLCJjb21wbGV0ZVJlcXVlc3QiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ubG9hZCIsInJlc3BvbnNlVGV4dCIsInVybFJlc29sdmUiLCJwcm90b2NvbCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsIm9uZXJyb3IiLCJvbmFib3J0Iiwic2VuZCIsImVzY2FwZSIsImNoIiwidW5lc2NhcGVUZXh0IiwiZXNjYXBlZFN0YXJ0UmVnZXhwIiwiZXNjYXBlZEVuZFJlZ2V4cCIsIm11c3RIYXZlRXhwcmVzc2lvbiIsInBhcnNlU3RyaW5naWZ5SW50ZXJjZXB0b3IiLCJnZXRWYWx1ZSIsIiRpbnRlcnBvbGF0ZU1pbkVyciIsImludGVyciIsImVuZEluZGV4IiwiZXhwIiwicGFyc2VGbnMiLCJ0ZXh0TGVuZ3RoIiwiZXhwcmVzc2lvblBvc2l0aW9ucyIsInN0YXJ0U3ltYm9sTGVuZ3RoIiwiZW5kU3ltYm9sTGVuZ3RoIiwidGhyb3dOb2NvbmNhdCIsImNvbXB1dGUiLCJnZXRUcnVzdGVkIiwiJCR3YXRjaERlbGVnYXRlIiwiJHdhdGNoR3JvdXAiLCJvbGRWYWx1ZXMiLCJjdXJyVmFsdWUiLCJpbnRlcnZhbCIsImNvdW50IiwiaW52b2tlQXBwbHkiLCJoYXNQYXJhbXMiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJpdGVyYXRpb24iLCJza2lwQXBwbHkiLCIkJGludGVydmFsSWQiLCJub3RpZnkiLCJpbnRlcnZhbHMiLCJlbmNvZGVQYXRoIiwic2VnbWVudHMiLCJwYXJzZUFic29sdXRlVXJsIiwiYWJzb2x1dGVVcmwiLCJsb2NhdGlvbk9iaiIsInBhcnNlZFVybCIsIiQkcHJvdG9jb2wiLCIkJGhvc3QiLCJob3N0bmFtZSIsIiQkcG9ydCIsInBvcnQiLCJERUZBVUxUX1BPUlRTIiwicGFyc2VBcHBVcmwiLCJyZWxhdGl2ZVVybCIsInByZWZpeGVkIiwiJCRwYXRoIiwicGF0aG5hbWUiLCIkJHNlYXJjaCIsInNlYXJjaCIsIiQkaGFzaCIsImJlZ2luc1dpdGgiLCJiZWdpbiIsIndob2xlIiwidHJpbUVtcHR5SGFzaCIsInN0cmlwRmlsZSIsImxhc3RJbmRleE9mIiwic2VydmVyQmFzZSIsIkxvY2F0aW9uSHRtbDVVcmwiLCJhcHBCYXNlIiwiYXBwQmFzZU5vRmlsZSIsImJhc2VQcmVmaXgiLCIkJGh0bWw1IiwiJCRwYXJzZSIsInBhdGhVcmwiLCIkbG9jYXRpb25NaW5FcnIiLCIkJGNvbXBvc2UiLCIkJHVybCIsIiQkYWJzVXJsIiwiJCRwYXJzZUxpbmtVcmwiLCJyZWxIcmVmIiwiYXBwVXJsIiwicHJldkFwcFVybCIsInJld3JpdHRlblVybCIsIkxvY2F0aW9uSGFzaGJhbmdVcmwiLCJoYXNoUHJlZml4IiwicmVtb3ZlV2luZG93c0RyaXZlTmFtZSIsImJhc2UiLCJmaXJzdFBhdGhTZWdtZW50TWF0Y2giLCJ3aW5kb3dzRmlsZVBhdGhFeHAiLCJ3aXRob3V0SGFzaFVybCIsIndpdGhvdXRCYXNlVXJsIiwiTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwiLCJsb2NhdGlvbkdldHRlciIsInByb3BlcnR5IiwibG9jYXRpb25HZXR0ZXJTZXR0ZXIiLCJwcmVwcm9jZXNzIiwiaHRtbDVNb2RlIiwicmVxdWlyZUJhc2UiLCJyZXdyaXRlTGlua3MiLCJzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrIiwib2xkVXJsIiwib2xkU3RhdGUiLCIkJHN0YXRlIiwiYWZ0ZXJMb2NhdGlvbkNoYW5nZSIsIiRicm9hZGNhc3QiLCJhYnNVcmwiLCJMb2NhdGlvbk1vZGUiLCJpbml0aWFsVXJsIiwiSUdOT1JFX1VSSV9SRUdFWFAiLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5Iiwid2hpY2giLCJidXR0b24iLCJhYnNIcmVmIiwicHJldmVudERlZmF1bHQiLCJpbml0aWFsaXppbmciLCJuZXdVcmwiLCJuZXdTdGF0ZSIsIiRkaWdlc3QiLCJjdXJyZW50UmVwbGFjZSIsIiQkcmVwbGFjZSIsInVybE9yU3RhdGVDaGFuZ2VkIiwiZGVidWciLCJkZWJ1Z0VuYWJsZWQiLCJmbGFnIiwiZm9ybWF0RXJyb3IiLCJzb3VyY2VVUkwiLCJjb25zb2xlTG9nIiwiY29uc29sZSIsImxvZ0ZuIiwibG9nIiwiaGFzQXBwbHkiLCJhcmcxIiwiYXJnMiIsIndhcm4iLCJlbnN1cmVTYWZlTWVtYmVyTmFtZSIsImZ1bGxFeHByZXNzaW9uIiwiJHBhcnNlTWluRXJyIiwiZ2V0U3RyaW5nVmFsdWUiLCJlbnN1cmVTYWZlT2JqZWN0IiwiY2hpbGRyZW4iLCJlbnN1cmVTYWZlRnVuY3Rpb24iLCJDQUxMIiwiQVBQTFkiLCJCSU5EIiwiZW5zdXJlU2FmZUFzc2lnbkNvbnRleHQiLCJGdW5jdGlvbiIsImlmRGVmaW5lZCIsInBsdXNGbiIsInIiLCJpc1N0YXRlbGVzcyIsImZpbHRlck5hbWUiLCJmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zIiwiYXN0IiwiYWxsQ29uc3RhbnRzIiwiYXJnc1RvV2F0Y2giLCJBU1QiLCJQcm9ncmFtIiwiZXhwciIsIkxpdGVyYWwiLCJ0b1dhdGNoIiwiVW5hcnlFeHByZXNzaW9uIiwiYXJndW1lbnQiLCJCaW5hcnlFeHByZXNzaW9uIiwibGVmdCIsInJpZ2h0IiwiTG9naWNhbEV4cHJlc3Npb24iLCJDb25kaXRpb25hbEV4cHJlc3Npb24iLCJhbHRlcm5hdGUiLCJjb25zZXF1ZW50IiwiSWRlbnRpZmllciIsIk1lbWJlckV4cHJlc3Npb24iLCJvYmplY3QiLCJjb21wdXRlZCIsIkNhbGxFeHByZXNzaW9uIiwiY2FsbGVlIiwiQXNzaWdubWVudEV4cHJlc3Npb24iLCJBcnJheUV4cHJlc3Npb24iLCJPYmplY3RFeHByZXNzaW9uIiwicHJvcGVydGllcyIsIlRoaXNFeHByZXNzaW9uIiwiZ2V0SW5wdXRzIiwibGFzdEV4cHJlc3Npb24iLCJpc0Fzc2lnbmFibGUiLCJhc3NpZ25hYmxlQVNUIiwiTkdWYWx1ZVBhcmFtZXRlciIsIm9wZXJhdG9yIiwiaXNMaXRlcmFsIiwiaXNDb25zdGFudCIsIkFTVENvbXBpbGVyIiwiYXN0QnVpbGRlciIsIkFTVEludGVycHJldGVyIiwiaXNQb3NzaWJseURhbmdlcm91c01lbWJlck5hbWUiLCJnZXRWYWx1ZU9mIiwib2JqZWN0VmFsdWVPZiIsImNhY2hlRGVmYXVsdCIsImNhY2hlRXhwZW5zaXZlIiwiZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayIsIm9sZFZhbHVlT2ZWYWx1ZSIsImlucHV0c1dhdGNoRGVsZWdhdGUiLCJvYmplY3RFcXVhbGl0eSIsInBhcnNlZEV4cHJlc3Npb24iLCJwcmV0dHlQcmludEV4cHJlc3Npb24iLCJsYXN0UmVzdWx0IiwiaW5wdXRFeHByZXNzaW9ucyIsImlucHV0cyIsIm9sZElucHV0VmFsdWVPZiIsIm5ld0lucHV0VmFsdWUiLCJvbGRJbnB1dFZhbHVlT2ZWYWx1ZXMiLCJvbGRJbnB1dFZhbHVlcyIsImNoYW5nZWQiLCJvbmVUaW1lV2F0Y2hEZWxlZ2F0ZSIsInVud2F0Y2giLCJvbGQiLCIkJHBvc3REaWdlc3QiLCJvbmVUaW1lTGl0ZXJhbFdhdGNoRGVsZWdhdGUiLCJpc0FsbERlZmluZWQiLCJhbGxEZWZpbmVkIiwiY29uc3RhbnRXYXRjaERlbGVnYXRlIiwiYWRkSW50ZXJjZXB0b3IiLCJpbnRlcmNlcHRvckZuIiwid2F0Y2hEZWxlZ2F0ZSIsInVzZUlucHV0cyIsInJlZ3VsYXJXYXRjaCIsIm5vVW5zYWZlRXZhbCIsIiRwYXJzZU9wdGlvbnMiLCJleHBlbnNpdmVDaGVja3MiLCIkcGFyc2VPcHRpb25zRXhwZW5zaXZlIiwib25lVGltZSIsImNhY2hlS2V5IiwicGFyc2VPcHRpb25zIiwibGV4ZXIiLCJMZXhlciIsInBhcnNlciIsIlBhcnNlciIsInFGYWN0b3J5IiwibmV4dFRpY2siLCJleGNlcHRpb25IYW5kbGVyIiwiY2FsbE9uY2UiLCJyZXNvbHZlRm4iLCJQcm9taXNlIiwic2ltcGxlQmluZCIsInByb2Nlc3NRdWV1ZSIsInBlbmRpbmciLCJwcm9jZXNzU2NoZWR1bGVkIiwic2NoZWR1bGVQcm9jZXNzUXVldWUiLCJEZWZlcnJlZCIsInByb21pc2VzIiwicmVzdWx0cyIsIiRxTWluRXJyIiwiVHlwZUVycm9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwicHJvZ3Jlc3NCYWNrIiwiY2F0Y2giLCJmaW5hbGx5IiwiaGFuZGxlQ2FsbGJhY2siLCIkJHJlamVjdCIsIiQkcmVzb2x2ZSIsInByb2dyZXNzIiwibWFrZVByb21pc2UiLCJyZXNvbHZlZCIsImlzUmVzb2x2ZWQiLCJjYWxsYmFja091dHB1dCIsImVycmJhY2siLCIkUSIsIlEiLCJyZXNvbHZlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwid2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyYWZTdXBwb3J0ZWQiLCJyYWYiLCJ0aW1lciIsInN1cHBvcnRlZCIsImNyZWF0ZUNoaWxkU2NvcGVDbGFzcyIsIkNoaWxkU2NvcGUiLCIkJHdhdGNoZXJzIiwiJCRuZXh0U2libGluZyIsIiQkY2hpbGRIZWFkIiwiJCRjaGlsZFRhaWwiLCIkJGxpc3RlbmVycyIsIiQkbGlzdGVuZXJDb3VudCIsIiQkd2F0Y2hlcnNDb3VudCIsIiRpZCIsIiQkQ2hpbGRTY29wZSIsIlRUTCIsIiRyb290U2NvcGVNaW5FcnIiLCJsYXN0RGlydHlXYXRjaCIsImFwcGx5QXN5bmNJZCIsImRpZ2VzdFR0bCIsImRlc3Ryb3lDaGlsZFNjb3BlIiwiJGV2ZW50IiwiY3VycmVudFNjb3BlIiwiY2xlYW5VcFNjb3BlIiwiJCRwcmV2U2libGluZyIsIiRyb290IiwiU2NvcGUiLCJiZWdpblBoYXNlIiwicGhhc2UiLCJjbGVhclBoYXNlIiwiaW5jcmVtZW50V2F0Y2hlcnNDb3VudCIsImN1cnJlbnQiLCJkZWNyZW1lbnRMaXN0ZW5lckNvdW50IiwiaW5pdFdhdGNoVmFsIiwiZmx1c2hBcHBseUFzeW5jIiwiYXBwbHlBc3luY1F1ZXVlIiwic2NoZWR1bGVBcHBseUFzeW5jIiwiaXNvbGF0ZSIsImNoaWxkIiwid2F0Y2hFeHAiLCJ3YXRjaGVyIiwiZXEiLCJ3YXRjaEV4cHJlc3Npb25zIiwid2F0Y2hHcm91cEFjdGlvbiIsImNoYW5nZVJlYWN0aW9uU2NoZWR1bGVkIiwiZmlyc3RSdW4iLCJuZXdWYWx1ZXMiLCJkZXJlZ2lzdGVyRm5zIiwic2hvdWxkQ2FsbCIsInVud2F0Y2hGbiIsIiR3YXRjaENvbGxlY3Rpb25JbnRlcmNlcHRvciIsIl92YWx1ZSIsIm5ld0xlbmd0aCIsImJvdGhOYU4iLCJuZXdJdGVtIiwib2xkSXRlbSIsImludGVybmFsQXJyYXkiLCJvbGRMZW5ndGgiLCJjaGFuZ2VEZXRlY3RlZCIsImludGVybmFsT2JqZWN0IiwiJHdhdGNoQ29sbGVjdGlvbkFjdGlvbiIsImluaXRSdW4iLCJ2ZXJ5T2xkVmFsdWUiLCJ0cmFja1ZlcnlPbGRWYWx1ZSIsImNoYW5nZURldGVjdG9yIiwid2F0Y2giLCJ3YXRjaGVycyIsImRpcnR5IiwibmV4dCIsImxvZ0lkeCIsImFzeW5jVGFzayIsInR0bCIsIndhdGNoTG9nIiwiYXN5bmNRdWV1ZSIsIiRldmFsIiwidHJhdmVyc2VTY29wZXNMb29wIiwibXNnIiwicG9zdERpZ2VzdFF1ZXVlIiwiZXZlbnROYW1lIiwiJGFwcGx5QXN5bmNFeHByZXNzaW9uIiwibmFtZWRMaXN0ZW5lcnMiLCJpbmRleE9mTGlzdGVuZXIiLCIkZW1pdCIsInRhcmdldFNjb3BlIiwibGlzdGVuZXJBcmdzIiwiJCRhc3luY1F1ZXVlIiwiJCRwb3N0RGlnZXN0UXVldWUiLCIkJGFwcGx5QXN5bmNRdWV1ZSIsInVyaSIsImlzSW1hZ2UiLCJub3JtYWxpemVkVmFsIiwicmVnZXgiLCJhZGp1c3RNYXRjaGVyIiwibWF0Y2hlciIsIiRzY2VNaW5FcnIiLCJlc2NhcGVGb3JSZWdleHAiLCJhZGp1c3RNYXRjaGVycyIsIm1hdGNoZXJzIiwiYWRqdXN0ZWRNYXRjaGVycyIsIlNDRV9DT05URVhUUyIsInJlc291cmNlVXJsV2hpdGVsaXN0IiwicmVzb3VyY2VVcmxCbGFja2xpc3QiLCJtYXRjaFVybCIsImlzUmVzb3VyY2VVcmxBbGxvd2VkQnlQb2xpY3kiLCJhbGxvd2VkIiwiZ2VuZXJhdGVIb2xkZXJUeXBlIiwiQmFzZSIsImhvbGRlclR5cGUiLCJ0cnVzdGVkVmFsdWUiLCIkJHVud3JhcFRydXN0ZWRWYWx1ZSIsInRydXN0QXMiLCJDb25zdHJ1Y3RvciIsImJ5VHlwZSIsIm1heWJlVHJ1c3RlZCIsInRydXN0ZWRWYWx1ZUhvbGRlckJhc2UiLCJodG1sU2FuaXRpemVyIiwiQ1NTIiwiVVJMIiwiSlMiLCJzY2UiLCJpc0VuYWJsZWQiLCJwYXJzZUFzIiwiZW51bVZhbHVlIiwibE5hbWUiLCJ2ZW5kb3JQcmVmaXgiLCJldmVudFN1cHBvcnQiLCJhbmRyb2lkIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiYm94ZWUiLCJ2ZW5kb3JSZWdleCIsImJvZHlTdHlsZSIsInRyYW5zaXRpb25zIiwiYW5pbWF0aW9ucyIsIndlYmtpdFRyYW5zaXRpb24iLCJ3ZWJraXRBbmltYXRpb24iLCJwdXNoU3RhdGUiLCJoYXNFdmVudCIsImRpdkVsbSIsImhhbmRsZVJlcXVlc3RGbiIsInRwbCIsImlnbm9yZVJlcXVlc3RFcnJvciIsImhhbmRsZUVycm9yIiwidG90YWxQZW5kaW5nUmVxdWVzdHMiLCJnZXRUcnVzdGVkUmVzb3VyY2VVcmwiLCJ0cmFuc2Zvcm1lciIsImh0dHBPcHRpb25zIiwidGVzdGFiaWxpdHkiLCJmaW5kQmluZGluZ3MiLCJvcHRfZXhhY3RNYXRjaCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJtYXRjaGVzIiwiZGF0YUJpbmRpbmciLCJiaW5kaW5nTmFtZSIsImZpbmRNb2RlbHMiLCJwcmVmaXhlcyIsImF0dHJpYnV0ZUVxdWFscyIsImdldExvY2F0aW9uIiwic2V0TG9jYXRpb24iLCJ3aGVuU3RhYmxlIiwiZGVmZXJyZWRzIiwiJCR0aW1lb3V0SWQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlcXVlc3RVcmwiLCJvcmlnaW5VcmwiLCIkJENvb2tpZVJlYWRlciIsInNhZmVEZWNvZGVVUklDb21wb25lbnQiLCJsYXN0Q29va2llcyIsImxhc3RDb29raWVTdHJpbmciLCJjb29raWVBcnJheSIsImNvb2tpZSIsImN1cnJlbnRDb29raWVTdHJpbmciLCJmaWx0ZXJzIiwic3VmZml4IiwiY3VycmVuY3lGaWx0ZXIiLCJkYXRlRmlsdGVyIiwiZmlsdGVyRmlsdGVyIiwianNvbkZpbHRlciIsImxpbWl0VG9GaWx0ZXIiLCJsb3dlcmNhc2VGaWx0ZXIiLCJudW1iZXJGaWx0ZXIiLCJvcmRlckJ5RmlsdGVyIiwidXBwZXJjYXNlRmlsdGVyIiwiY29tcGFyYXRvciIsInByZWRpY2F0ZUZuIiwibWF0Y2hBZ2FpbnN0QW55UHJvcCIsImV4cHJlc3Npb25UeXBlIiwiZ2V0VHlwZUZvckZpbHRlciIsImNyZWF0ZVByZWRpY2F0ZUZuIiwic2hvdWxkTWF0Y2hQcmltaXRpdmVzIiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJkZWVwQ29tcGFyZSIsImRvbnRNYXRjaFdob2xlT2JqZWN0IiwiYWN0dWFsVHlwZSIsImV4cGVjdGVkVHlwZSIsImV4cGVjdGVkVmFsIiwibWF0Y2hBbnlQcm9wZXJ0eSIsImFjdHVhbFZhbCIsIiRsb2NhbGUiLCJmb3JtYXRzIiwiTlVNQkVSX0ZPUk1BVFMiLCJhbW91bnQiLCJjdXJyZW5jeVN5bWJvbCIsImZyYWN0aW9uU2l6ZSIsIkNVUlJFTkNZX1NZTSIsIlBBVFRFUk5TIiwibWF4RnJhYyIsImZvcm1hdE51bWJlciIsIkdST1VQX1NFUCIsIkRFQ0lNQUxfU0VQIiwibnVtYmVyIiwibnVtU3RyIiwiZGlnaXRzIiwibnVtYmVyT2ZJbnRlZ2VyRGlnaXRzIiwiemVyb3MiLCJleHBvbmVudCIsIlpFUk9fQ0hBUiIsIk1BWF9ESUdJVFMiLCJyb3VuZE51bWJlciIsInBhcnNlZE51bWJlciIsIm1pbkZyYWMiLCJmcmFjdGlvbkxlbiIsIm1pbiIsInJvdW5kQXQiLCJkaWdpdCIsImNhcnJ5IiwicmVkdWNlUmlnaHQiLCJncm91cFNlcCIsImRlY2ltYWxTZXAiLCJpc0luZmluaXR5IiwiaXNGaW5pdGUiLCJpc1plcm8iLCJhYnMiLCJmb3JtYXR0ZWRUZXh0IiwiaW50ZWdlckxlbiIsImRlY2ltYWxzIiwicmVkdWNlIiwiZ3JvdXBzIiwibGdTaXplIiwiZ1NpemUiLCJuZWdQcmUiLCJuZWdTdWYiLCJwb3NQcmUiLCJwb3NTdWYiLCJwYWROdW1iZXIiLCJudW0iLCJuZWciLCJkYXRlR2V0dGVyIiwiZGF0ZVN0ckdldHRlciIsInNob3J0Rm9ybSIsInRpbWVab25lR2V0dGVyIiwiem9uZSIsInBhZGRlZFpvbmUiLCJnZXRGaXJzdFRodXJzZGF5T2ZZZWFyIiwieWVhciIsImRheU9mV2Vla09uRmlyc3QiLCJnZXREYXkiLCJnZXRUaHVyc2RheVRoaXNXZWVrIiwiZGF0ZXRpbWUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsIndlZWtHZXR0ZXIiLCJmaXJzdFRodXJzIiwidGhpc1RodXJzIiwicm91bmQiLCJhbXBtR2V0dGVyIiwiZ2V0SG91cnMiLCJBTVBNUyIsImVyYUdldHRlciIsIkVSQVMiLCJsb25nRXJhR2V0dGVyIiwiRVJBTkFNRVMiLCJqc29uU3RyaW5nVG9EYXRlIiwiUl9JU084NjAxX1NUUiIsInR6SG91ciIsInR6TWluIiwiZGF0ZVNldHRlciIsInNldFVUQ0Z1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJ0aW1lU2V0dGVyIiwic2V0VVRDSG91cnMiLCJzZXRIb3VycyIsIm0iLCJzIiwibXMiLCJwYXJzZUZsb2F0IiwiZm9ybWF0IiwiREFURVRJTUVfRk9STUFUUyIsIk5VTUJFUl9TVFJJTkciLCJEQVRFX0ZPUk1BVFNfU1BMSVQiLCJkYXRlVGltZXpvbmVPZmZzZXQiLCJEQVRFX0ZPUk1BVFMiLCJzcGFjaW5nIiwibGltaXQiLCJJbmZpbml0eSIsInByb2Nlc3NQcmVkaWNhdGVzIiwic29ydFByZWRpY2F0ZSIsInJldmVyc2VPcmRlciIsIm1hcCIsInByZWRpY2F0ZSIsImRlc2NlbmRpbmciLCJvYmplY3RWYWx1ZSIsImdldFByZWRpY2F0ZVZhbHVlIiwidjEiLCJ2MiIsImdldENvbXBhcmlzb25PYmplY3QiLCJwcmVkaWNhdGVWYWx1ZXMiLCJwcmVkaWNhdGVzIiwiZG9Db21wYXJpc29uIiwiY29tcGFyZVZhbHVlcyIsIm5nRGlyZWN0aXZlIiwibnVsbEZvcm1SZW5hbWVDb250cm9sIiwiY29udHJvbCIsIiRuYW1lIiwiRm9ybUNvbnRyb2xsZXIiLCJjb250cm9scyIsIiRlcnJvciIsIiQkc3VjY2VzcyIsIiRwZW5kaW5nIiwiJGRpcnR5IiwiJHByaXN0aW5lIiwiJHZhbGlkIiwiJGludmFsaWQiLCIkc3VibWl0dGVkIiwiJCRwYXJlbnRGb3JtIiwibnVsbEZvcm1DdHJsIiwiJHJvbGxiYWNrVmlld1ZhbHVlIiwiJGNvbW1pdFZpZXdWYWx1ZSIsIiRhZGRDb250cm9sIiwiJCRyZW5hbWVDb250cm9sIiwibmV3TmFtZSIsIm9sZE5hbWUiLCIkcmVtb3ZlQ29udHJvbCIsIiRzZXRWYWxpZGl0eSIsImFkZFNldFZhbGlkaXR5TWV0aG9kIiwiY3RybCIsInNldCIsInVuc2V0IiwiJHNldERpcnR5IiwiUFJJU1RJTkVfQ0xBU1MiLCJESVJUWV9DTEFTUyIsIiRzZXRQcmlzdGluZSIsInNldENsYXNzIiwiU1VCTUlUVEVEX0NMQVNTIiwiJHNldFVudG91Y2hlZCIsIiRzZXRTdWJtaXR0ZWQiLCJzdHJpbmdCYXNlZElucHV0VHlwZSIsIiRmb3JtYXR0ZXJzIiwiJGlzRW1wdHkiLCJ0ZXh0SW5wdXRUeXBlIiwiYmFzZUlucHV0VHlwZSIsImNvbXBvc2luZyIsImV2IiwibmdUcmltIiwiJHZpZXdWYWx1ZSIsIiQkaGFzTmF0aXZlVmFsaWRhdG9ycyIsIiRzZXRWaWV3VmFsdWUiLCJkZWZlckxpc3RlbmVyIiwib3JpZ1ZhbHVlIiwia2V5Q29kZSIsIiRyZW5kZXIiLCJ3ZWVrUGFyc2VyIiwiaXNvV2VlayIsImV4aXN0aW5nRGF0ZSIsIldFRUtfUkVHRVhQIiwid2VlayIsImhvdXJzIiwic2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsImFkZERheXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiTmFOIiwiY3JlYXRlRGF0ZVBhcnNlciIsIm1hcHBpbmciLCJpc28iLCJJU09fREFURV9SRUdFWFAiLCJ5eXl5IiwiTU0iLCJkZCIsIkhIIiwibW0iLCJzcyIsInNzcyIsInBhcnQiLCJjcmVhdGVEYXRlSW5wdXRUeXBlIiwicGFyc2VEYXRlIiwiaXNWYWxpZERhdGUiLCJwYXJzZU9ic2VydmVkRGF0ZVZhbHVlIiwiYmFkSW5wdXRDaGVja2VyIiwicHJldmlvdXNEYXRlIiwiJG9wdGlvbnMiLCIkJHBhcnNlck5hbWUiLCIkcGFyc2VycyIsInBhcnNlZERhdGUiLCJuZ01vZGVsTWluRXJyIiwibmdNaW4iLCJtaW5WYWwiLCIkdmFsaWRhdG9ycyIsIiR2YWxpZGF0ZSIsIm5nTWF4IiwibWF4VmFsIiwibmF0aXZlVmFsaWRhdGlvbiIsInZhbGlkaXR5IiwiVkFMSURJVFlfU1RBVEVfUFJPUEVSVFkiLCJiYWRJbnB1dCIsInR5cGVNaXNtYXRjaCIsIm51bWJlcklucHV0VHlwZSIsIk5VTUJFUl9SRUdFWFAiLCJ1cmxJbnB1dFR5cGUiLCJtb2RlbFZhbHVlIiwidmlld1ZhbHVlIiwiVVJMX1JFR0VYUCIsImVtYWlsSW5wdXRUeXBlIiwiZW1haWwiLCJFTUFJTF9SRUdFWFAiLCJyYWRpb0lucHV0VHlwZSIsImNoZWNrZWQiLCJwYXJzZUNvbnN0YW50RXhwciIsInBhcnNlRm4iLCJjaGVja2JveElucHV0VHlwZSIsInRydWVWYWx1ZSIsIm5nVHJ1ZVZhbHVlIiwiZmFsc2VWYWx1ZSIsIm5nRmFsc2VWYWx1ZSIsImNsYXNzRGlyZWN0aXZlIiwiYXJyYXlEaWZmZXJlbmNlIiwiYXJyYXlDbGFzc2VzIiwiYWRkQ2xhc3NlcyIsImRpZ2VzdENsYXNzQ291bnRzIiwicmVtb3ZlQ2xhc3NlcyIsImNsYXNzQ291bnRzIiwiY2xhc3Nlc1RvVXBkYXRlIiwidXBkYXRlQ2xhc3NlcyIsIm5nQ2xhc3NXYXRjaEFjdGlvbiIsIiRpbmRleCIsIm9sZCRpbmRleCIsIm1vZCIsInNldFZhbGlkaXR5IiwidmFsaWRhdGlvbkVycm9yS2V5IiwiY3JlYXRlQW5kU2V0IiwidW5zZXRBbmRDbGVhbnVwIiwiY2FjaGVkVG9nZ2xlQ2xhc3MiLCJQRU5ESU5HX0NMQVNTIiwidG9nZ2xlVmFsaWRhdGlvbkNzcyIsImlzT2JqZWN0RW1wdHkiLCJjb21iaW5lZFN0YXRlIiwic3dpdGNoVmFsdWUiLCJjbGFzc0NhY2hlIiwiaXNWYWxpZCIsIlZBTElEX0NMQVNTIiwiSU5WQUxJRF9DTEFTUyIsImNocm9tZUhhY2siLCJvcHRpb25FbGVtZW50Iiwic2VsZWN0ZWQiLCJSRUdFWF9TVFJJTkdfUkVHRVhQIiwibWFudWFsTG93ZXJjYXNlIiwiZnJvbUNoYXJDb2RlIiwiY2hhckNvZGVBdCIsIm1hbnVhbFVwcGVyY2FzZSIsImRvY3VtZW50TW9kZSIsInJ1bGVzIiwibmdDc3BFbGVtZW50IiwibmdDc3BBdHRyaWJ1dGUiLCJub0lubGluZVN0eWxlIiwibmFtZV8iLCJlbCIsIk5PREVfVFlQRV9BVFRSSUJVVEUiLCJmdWxsIiwibWFqb3IiLCJtaW5vciIsImNvZGVOYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJtb3VzZWxlYXZlIiwibW91c2VlbnRlciIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiTm9kZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJyZWFkeSIsInRyaWdnZXIiLCJmaXJlZCIsInJlbW92ZURhdGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjc3MiLCJsb3dlcmNhc2VkTmFtZSIsImdldE5hbWVkSXRlbSIsInNwZWNpZmllZCIsInJldCIsImdldFRleHQiLCIkZHYiLCJtdWx0aXBsZSIsIm5vZGVDb3VudCIsInR5cGVzIiwiYWRkSGFuZGxlciIsIm5vRXZlbnRMaXN0ZW5lciIsIm9uZSIsIm9uRm4iLCJyZXBsYWNlTm9kZSIsImluc2VydEJlZm9yZSIsImNvbnRlbnREb2N1bWVudCIsInByZXBlbmQiLCJ3cmFwTm9kZSIsImRldGFjaCIsImFmdGVyIiwibmV3RWxlbWVudCIsInRvZ2dsZUNsYXNzIiwiY29uZGl0aW9uIiwiY2xhc3NDb25kaXRpb24iLCJuZXh0RWxlbWVudFNpYmxpbmciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImV4dHJhUGFyYW1ldGVycyIsImR1bW15RXZlbnQiLCJldmVudEZuc0NvcHkiLCJoYW5kbGVyQXJncyIsImFyZzMiLCJ1bmJpbmQiLCIkYW5pbWF0ZU1pbkVyciIsIk5HX0FOSU1BVEVfQ0xBU1NOQU1FIiwicG9zdERpZ2VzdEVsZW1lbnRzIiwidXBkYXRlRGF0YSIsImhhbmRsZUNTU0NsYXNzQ2hhbmdlcyIsImV4aXN0aW5nIiwiYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QiLCJhZGQiLCJjbGFzc2VzQWRkZWQiLCJjbGFzc2VzUmVtb3ZlZCIsInBpbiIsImRvbU9wZXJhdGlvbiIsImZyb20iLCJ0byIsInJ1bm5lciIsImNvbXBsZXRlIiwiJCRyZWdpc3RlcmVkQW5pbWF0aW9ucyIsImNsYXNzTmFtZUZpbHRlciIsIiQkY2xhc3NOYW1lRmlsdGVyIiwicmVzZXJ2ZWRSZWdleCIsImRvbUluc2VydCIsImFmdGVyRWxlbWVudCIsImFmdGVyTm9kZSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJlbmQiLCJlbnRlciIsIm1vdmUiLCJsZWF2ZSIsImFkZGNsYXNzIiwiYW5pbWF0ZSIsInRlbXBDbGFzc2VzIiwid2FpdEZvclRpY2siLCJ3YWl0UXVldWUiLCJwYXNzZWQiLCJBbmltYXRlUnVubmVyIiwic2V0SG9zdCIsInJhZlRpY2siLCJ0aW1lb3V0VGljayIsIl9kb25lQ2FsbGJhY2tzIiwiX3RpY2siLCJkb2MiLCJoaWRkZW4iLCJfc3RhdGUiLCJJTklUSUFMX1NUQVRFIiwiRE9ORV9QRU5ESU5HX1NUQVRFIiwiRE9ORV9DT01QTEVURV9TVEFURSIsInJ1bm5lcnMiLCJvblByb2dyZXNzIiwiZ2V0UHJvbWlzZSIsInJlc29sdmVIYW5kbGVyIiwicmVqZWN0SGFuZGxlciIsInBhdXNlIiwicmVzdW1lIiwiX3Jlc29sdmUiLCJpbml0aWFsT3B0aW9ucyIsImFwcGx5QW5pbWF0aW9uQ29udGVudHMiLCJjbG9zZWQiLCIkJHByZXBhcmVkIiwiY2xlYW51cFN0eWxlcyIsInN0YXJ0IiwiZG9tTm9kZSIsIm9mZnNldFdpZHRoIiwiQ29udGVudC1UeXBlIiwiWyIsInsiLCIkaHR0cE1pbkVyciIsIlBBVEhfTUFUQ0giLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJsb2NhdGlvblByb3RvdHlwZSIsInBhcmFtVmFsdWUiLCJMb2NhdGlvbiIsIk9QRVJBVE9SUyIsIkVTQ0FQRSIsImYiLCJ0IiwiJyIsIlwiIiwibGV4IiwidG9rZW5zIiwicmVhZFN0cmluZyIsInBlZWsiLCJyZWFkTnVtYmVyIiwiaXNJZGVudCIsInJlYWRJZGVudCIsImlzIiwiaXNXaGl0ZXNwYWNlIiwiY2gyIiwiY2gzIiwib3AxIiwib3AyIiwib3AzIiwidGhyb3dFcnJvciIsImNoYXJzIiwiaXNFeHBPcGVyYXRvciIsImNvbFN0ciIsInBlZWtDaCIsInF1b3RlIiwicmF3U3RyaW5nIiwiaGV4IiwicmVwIiwiRXhwcmVzc2lvblN0YXRlbWVudCIsIlByb3BlcnR5IiwicHJvZ3JhbSIsImV4cHJlc3Npb25TdGF0ZW1lbnQiLCJmaWx0ZXJDaGFpbiIsImFzc2lnbm1lbnQiLCJ0ZXJuYXJ5IiwibG9naWNhbE9SIiwiY29uc3VtZSIsImxvZ2ljYWxBTkQiLCJlcXVhbGl0eSIsInJlbGF0aW9uYWwiLCJhZGRpdGl2ZSIsIm11bHRpcGxpY2F0aXZlIiwidW5hcnkiLCJwcmltYXJ5IiwiYXJyYXlEZWNsYXJhdGlvbiIsImNvbnN0YW50cyIsInBhcnNlQXJndW1lbnRzIiwiYmFzZUV4cHJlc3Npb24iLCJwZWVrVG9rZW4iLCJraW5kIiwiZTEiLCJlMiIsImUzIiwiZTQiLCJwZWVrQWhlYWQiLCJ0cnVlIiwiZmFsc2UiLCJudWxsIiwibmV4dElkIiwidmFycyIsIm93biIsImFzc2lnbmFibGUiLCJzdGFnZSIsImNvbXB1dGluZyIsInJlY3Vyc2UiLCJyZXR1cm5fIiwiZ2VuZXJhdGVGdW5jdGlvbiIsImZuS2V5IiwiaW50b0lkIiwid2F0Y2hJZCIsImZuU3RyaW5nIiwiVVNFIiwiU1RSSUNUIiwiZmlsdGVyUHJlZml4Iiwid2F0Y2hGbnMiLCJ2YXJzUHJlZml4Iiwic2VjdGlvbiIsIm5hbWVJZCIsInJlY3Vyc2lvbkZuIiwic2tpcFdhdGNoSWRDaGVjayIsImlmXyIsImxhenlBc3NpZ24iLCJjb21wdXRlZE1lbWJlciIsImxhenlSZWN1cnNlIiwicGx1cyIsIm5vdCIsImdldEhhc093blByb3BlcnR5Iiwibm9uQ29tcHV0ZWRNZW1iZXIiLCJhZGRFbnN1cmVTYWZlT2JqZWN0Iiwibm90TnVsbCIsImFkZEVuc3VyZVNhZmVNZW1iZXJOYW1lIiwiYWRkRW5zdXJlU2FmZUZ1bmN0aW9uIiwibWVtYmVyIiwiYWRkRW5zdXJlU2FmZUFzc2lnbkNvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJzdHJpbmdFc2NhcGVSZWdleCIsInN0cmluZ0VzY2FwZUZuIiwiYyIsInNraXAiLCJpbml0IiwicmhzIiwibGhzIiwidW5hcnkrIiwidW5hcnktIiwidW5hcnkhIiwiYmluYXJ5KyIsImJpbmFyeS0iLCJiaW5hcnkqIiwiYmluYXJ5LyIsImJpbmFyeSUiLCJiaW5hcnk9PT0iLCJiaW5hcnkhPT0iLCJiaW5hcnk9PSIsImJpbmFyeSE9IiwiYmluYXJ5PCIsImJpbmFyeT4iLCJiaW5hcnk8PSIsImJpbmFyeT49IiwiYmluYXJ5JiYiLCJiaW5hcnl8fCIsInRlcm5hcnk/OiIsImFzdENvbXBpbGVyIiwieXkiLCJ5IiwiTU1NTSIsIk1NTSIsIk0iLCJIIiwiaGgiLCJFRUVFIiwiRUVFIiwiWiIsInd3IiwidyIsIkciLCJHRyIsIkdHRyIsIkdHR0ciLCJ4bGlua0hyZWYiLCJwcm9wTmFtZSIsImRlZmF1bHRMaW5rRm4iLCJub3JtYWxpemVkIiwiaHRtbEF0dHIiLCJmb3JtRGlyZWN0aXZlRmFjdG9yeSIsImlzTmdGb3JtIiwiZ2V0U2V0dGVyIiwiZm9ybUVsZW1lbnQiLCJuYW1lQXR0ciIsImN0cmxzIiwiaGFuZGxlRm9ybVN1Ym1pc3Npb24iLCJwYXJlbnRGb3JtQ3RybCIsInNldHRlciIsIkRBVEVfUkVHRVhQIiwiREFURVRJTUVMT0NBTF9SRUdFWFAiLCJNT05USF9SRUdFWFAiLCJUSU1FX1JFR0VYUCIsImlucHV0VHlwZSIsImRhdGV0aW1lLWxvY2FsIiwidGltZSIsIm1vbnRoIiwicmFkaW8iLCJjaGVja2JveCIsInN1Ym1pdCIsInJlc2V0IiwiQ09OU1RBTlRfVkFMVUVfUkVHRVhQIiwidHBsQXR0ciIsInRlbXBsYXRlRWxlbWVudCIsInRFbGVtZW50IiwibmdCaW5kSHRtbEdldHRlciIsIm5nQmluZEh0bWxXYXRjaCIsImdldFRydXN0ZWRIdG1sIiwiJHZpZXdDaGFuZ2VMaXN0ZW5lcnMiLCJmb3JjZUFzeW5jRXZlbnRzIiwiYmx1ciIsImZvY3VzIiwicHJldmlvdXNFbGVtZW50cyIsInNyY0V4cCIsIm9ubG9hZEV4cCIsImF1dG9TY3JvbGxFeHAiLCJhdXRvc2Nyb2xsIiwicHJldmlvdXNFbGVtZW50IiwiY3VycmVudEVsZW1lbnQiLCJjaGFuZ2VDb3VudGVyIiwiY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCIsImFmdGVyQW5pbWF0aW9uIiwidGhpc0NoYW5nZUlkIiwidHJpbVZhbHVlcyIsIlVOVE9VQ0hFRF9DTEFTUyIsIlRPVUNIRURfQ0xBU1MiLCJOZ01vZGVsQ29udHJvbGxlciIsIiRtb2RlbFZhbHVlIiwiJCRyYXdNb2RlbFZhbHVlIiwiJGFzeW5jVmFsaWRhdG9ycyIsIiR1bnRvdWNoZWQiLCIkdG91Y2hlZCIsInBhcnNlclZhbGlkIiwicGFyc2VkTmdNb2RlbCIsInBhcnNlZE5nTW9kZWxBc3NpZ24iLCJuZ01vZGVsR2V0IiwibmdNb2RlbFNldCIsInBlbmRpbmdEZWJvdW5jZSIsIiQkc2V0T3B0aW9ucyIsImdldHRlclNldHRlciIsImludm9rZU1vZGVsR2V0dGVyIiwiaW52b2tlTW9kZWxTZXR0ZXIiLCIkJCRwIiwiY3VycmVudFZhbGlkYXRpb25SdW5JZCIsIiRzZXRUb3VjaGVkIiwiJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlIiwicHJldlZhbGlkIiwicHJldk1vZGVsVmFsdWUiLCJhbGxvd0ludmFsaWQiLCIkJHJ1blZhbGlkYXRvcnMiLCJhbGxWYWxpZCIsIiQkd3JpdGVNb2RlbFRvU2NvcGUiLCJkb25lQ2FsbGJhY2siLCJwcm9jZXNzUGFyc2VFcnJvcnMiLCJlcnJvcktleSIsInByb2Nlc3NTeW5jVmFsaWRhdG9ycyIsInN5bmNWYWxpZGF0b3JzVmFsaWQiLCJ2YWxpZGF0b3IiLCJwcm9jZXNzQXN5bmNWYWxpZGF0b3JzIiwidmFsaWRhdG9yUHJvbWlzZXMiLCJ2YWxpZGF0aW9uRG9uZSIsImxvY2FsVmFsaWRhdGlvblJ1bklkIiwiJCRwYXJzZUFuZFZhbGlkYXRlIiwid3JpdGVUb01vZGVsSWZOZWVkZWQiLCJ1cGRhdGVPbkRlZmF1bHQiLCIkJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0IiwiZGVib3VuY2UiLCJkZWJvdW5jZURlbGF5IiwiZm9ybWF0dGVycyIsIm1vZGVsQ3RybCIsImZvcm1DdHJsIiwidXBkYXRlT24iLCJERUZBVUxUX1JFR0VYUCIsInRoYXQiLCJuZ09wdGlvbnNNaW5FcnIiLCJOR19PUFRJT05TX1JFR0VYUCIsInBhcnNlT3B0aW9uc0V4cHJlc3Npb24iLCJvcHRpb25zRXhwIiwic2VsZWN0RWxlbWVudCIsIk9wdGlvbiIsInNlbGVjdFZhbHVlIiwibGFiZWwiLCJncm91cCIsImRpc2FibGVkIiwiZ2V0T3B0aW9uVmFsdWVzS2V5cyIsIm9wdGlvblZhbHVlcyIsIm9wdGlvblZhbHVlc0tleXMiLCJrZXlOYW1lIiwiaXRlbUtleSIsInZhbHVlTmFtZSIsInNlbGVjdEFzIiwidHJhY2tCeSIsInNlbGVjdEFzRm4iLCJ2aWV3VmFsdWVGbiIsInRyYWNrQnlGbiIsImdldFRyYWNrQnlWYWx1ZUZuIiwiZ2V0VHJhY2tCeVZhbHVlIiwiZ2V0TG9jYWxzIiwiZGlzcGxheUZuIiwiZ3JvdXBCeUZuIiwiZGlzYWJsZVdoZW5GbiIsInZhbHVlc0ZuIiwiZ2V0V2F0Y2hhYmxlcyIsIndhdGNoZWRBcnJheSIsIm9wdGlvblZhbHVlc0xlbmd0aCIsImRpc2FibGVXaGVuIiwiZ2V0T3B0aW9ucyIsIm9wdGlvbkl0ZW1zIiwic2VsZWN0VmFsdWVNYXAiLCJvcHRpb25JdGVtIiwiZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZSIsImdldFZpZXdWYWx1ZUZyb21PcHRpb24iLCJuZ09wdGlvbnNQb3N0TGluayIsInVwZGF0ZU9wdGlvbkVsZW1lbnQiLCJhZGRPclJldXNlRWxlbWVudCIsInJlbW92ZUV4Y2Vzc0VsZW1lbnRzIiwic2tpcEVtcHR5QW5kVW5rbm93bk9wdGlvbnMiLCJlbXB0eU9wdGlvbl8iLCJlbXB0eU9wdGlvbiIsInVua25vd25PcHRpb25fIiwidW5rbm93bk9wdGlvbiIsInVwZGF0ZU9wdGlvbnMiLCJwcmV2aW91c1ZhbHVlIiwic2VsZWN0Q3RybCIsInJlYWRWYWx1ZSIsImdyb3VwTWFwIiwicHJvdmlkZWRFbXB0eU9wdGlvbiIsImdyb3VwRWxlbWVudCIsIm9wdEdyb3VwVGVtcGxhdGUiLCJjdXJyZW50T3B0aW9uRWxlbWVudCIsIm9wdGlvblRlbXBsYXRlIiwibmdNb2RlbEN0cmwiLCJuZXh0VmFsdWUiLCJpc05vdFByaW1pdGl2ZSIsInJlbmRlckVtcHR5T3B0aW9uIiwicmVtb3ZlRW1wdHlPcHRpb24iLCJyZW5kZXJVbmtub3duT3B0aW9uIiwicmVtb3ZlVW5rbm93bk9wdGlvbiIsIndyaXRlVmFsdWUiLCJzZWxlY3RlZFZhbHVlcyIsInNlbGVjdGlvbnMiLCJzZWxlY3RlZE9wdGlvbiIsInJlZ2lzdGVyT3B0aW9uIiwiQlJBQ0UiLCJJU19XSEVOIiwidXBkYXRlRWxlbWVudFRleHQiLCJuZXdUZXh0IiwibGFzdENvdW50IiwibnVtYmVyRXhwIiwid2hlbkV4cCIsIndoZW5zIiwid2hlbnNFeHBGbnMiLCJicmFjZVJlcGxhY2VtZW50Iiwid2F0Y2hSZW1vdmVyIiwiYXR0cmlidXRlTmFtZSIsInRtcE1hdGNoIiwid2hlbktleSIsImNvdW50SXNOYU4iLCJwbHVyYWxDYXQiLCJ3aGVuRXhwRm4iLCJOR19SRU1PVkVEIiwibmdSZXBlYXRNaW5FcnIiLCJ1cGRhdGVTY29wZSIsInZhbHVlSWRlbnRpZmllciIsImtleUlkZW50aWZpZXIiLCJhcnJheUxlbmd0aCIsIiRmaXJzdCIsIiRsYXN0IiwiJG1pZGRsZSIsIiRvZGQiLCIkZXZlbiIsImdldEJsb2NrU3RhcnQiLCJnZXRCbG9ja0VuZCIsIm5nUmVwZWF0RW5kQ29tbWVudCIsImFsaWFzQXMiLCJ0cmFja0J5RXhwIiwidHJhY2tCeUV4cEdldHRlciIsInRyYWNrQnlJZEV4cEZuIiwidHJhY2tCeUlkQXJyYXlGbiIsInRyYWNrQnlJZE9iakZuIiwiaGFzaEZuTG9jYWxzIiwibGFzdEJsb2NrTWFwIiwibmV4dE5vZGUiLCJjb2xsZWN0aW9uTGVuZ3RoIiwidHJhY2tCeUlkIiwidHJhY2tCeUlkRm4iLCJjb2xsZWN0aW9uS2V5cyIsIm5leHRCbG9ja09yZGVyIiwicHJldmlvdXNOb2RlIiwibmV4dEJsb2NrTWFwIiwiYmxvY2tLZXkiLCJOR19ISURFX0NMQVNTIiwiTkdfSElERV9JTl9QUk9HUkVTU19DTEFTUyIsIm5ld1N0eWxlcyIsIm9sZFN0eWxlcyIsImNhc2VzIiwibmdTd2l0Y2hDb250cm9sbGVyIiwid2F0Y2hFeHByIiwic2VsZWN0ZWRUcmFuc2NsdWRlcyIsInNlbGVjdGVkRWxlbWVudHMiLCJwcmV2aW91c0xlYXZlQW5pbWF0aW9ucyIsInNlbGVjdGVkU2NvcGVzIiwic3BsaWNlRmFjdG9yeSIsInNlbGVjdGVkVHJhbnNjbHVkZSIsImNhc2VFbGVtZW50Iiwic2VsZWN0ZWRTY29wZSIsImFuY2hvciIsIm5vb3BOZ01vZGVsQ29udHJvbGxlciIsIlNlbGVjdENvbnRyb2xsZXIiLCJvcHRpb25zTWFwIiwidW5rbm93blZhbCIsImhhc09wdGlvbiIsImFkZE9wdGlvbiIsInJlbW92ZU9wdGlvbiIsIm9wdGlvblNjb3BlIiwib3B0aW9uQXR0cnMiLCJpbnRlcnBvbGF0ZVZhbHVlRm4iLCJpbnRlcnBvbGF0ZVRleHRGbiIsInNlbGVjdFByZUxpbmsiLCJsYXN0VmlldyIsImxhc3RWaWV3UmVmIiwic2VsZWN0UG9zdExpbmsiLCJzZWxlY3RDdHJsTmFtZSIsInBhdHRlcm5FeHAiLCJpbnRWYWwiLCJnZXREZWNpbWFscyIsImdldFZGIiwib3B0X3ByZWNpc2lvbiIsInBvdyIsIlBMVVJBTF9DQVRFR09SWSIsIlpFUk8iLCJPTkUiLCJUV08iLCJGRVciLCJNQU5ZIiwiT1RIRVIiLCJEQVkiLCJGSVJTVERBWU9GV0VFSyIsIk1PTlRIIiwiU0hPUlREQVkiLCJTSE9SVE1PTlRIIiwiU1RBTkRBTE9ORU1PTlRIIiwiV0VFS0VORFJBTkdFIiwiZnVsbERhdGUiLCJsb25nRGF0ZSIsIm1lZGl1bSIsIm1lZGl1bURhdGUiLCJtZWRpdW1UaW1lIiwic2hvcnQiLCJzaG9ydERhdGUiLCJzaG9ydFRpbWUiLCJtaW5JbnQiLCJ2ZiIsImhlYWQiLCJTIiwiVyIsIkFhIiwiWGEiLCJFIiwiRiIsIkEiLCJCIiwib2MiLCJyYSIsInBjIiwicWMiLCJYZCIsIm9iIiwiT2IiLCJnIiwiZGEiLCJMYSIsIlBiIiwiTiIsInNhIiwiWWQiLCJRYiIsInoiLCJZYSIsIm5hIiwicmMiLCJ0YSIsInEiLCJ1Iiwic2MiLCJaYSIsIiRhIiwidGMiLCJaZCIsIiRkIiwib2EiLCJLIiwiYWIiLCJNYSIsIkJhIiwiaGEiLCJrYSIsImVhIiwiYmIiLCJ1YyIsImFlIiwiY2IiLCJ2YyIsIndjIiwiUmIiLCJ1YSIsIk5hIiwieGMiLCJ5YyIsIlNiIiwiaWEiLCJwYiIsImJlIiwiT2EiLCJjZSIsInpjIiwiZGIiLCJkZSIsImVlIiwiQWMiLCJmZSIsImdlIiwiQmMiLCJxYiIsInBhIiwiUGEiLCJUYiIsIlAiLCJyYiIsIlFhIiwiUmEiLCJDYyIsInNiIiwiaGUiLCJDIiwiaWUiLCJqZSIsInRiIiwiQ2EiLCJVYiIsImtlIiwiRGMiLCJsZSIsIkVjIiwibWUiLCJuZSIsIm9lIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIk1lIiwiTmUiLCJPZSIsIlBlIiwiUWUiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIlJlIiwiU2UiLCJUZSIsInViIiwiSmMiLCJVZSIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJLYyIsImZmIiwiZ2YiLCJoZiIsImpmIiwia2YiLCJsZiIsIm1mIiwibmYiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwidGYiLCJ1ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIkZmIiwiZWIiLCJHZiIsIkhmIiwiTGMiLCJNYyIsIlZiIiwiSWYiLCJqYSIsIkpmIiwiVCIsIldiIiwiS2YiLCJOYyIsIlhiIiwidmIiLCJ3YiIsIk9jIiwieGIiLCJ5YiIsImZiIiwiTGYiLCJZYiIsInpiIiwiQWIiLCJCYiIsIlBjIiwiQ2IiLCJRYyIsIlpiIiwiTWYiLCJSYyIsIkRiIiwiU2MiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIkRhIiwiU2EiLCJSZiIsIlRjIiwiVWMiLCJFYSIsImdiIiwiU2YiLCJGYSIsIlRmIiwiUiIsIkQiLCJ4IiwibGEiLCJZIiwiR2EiLCJJIiwiZ2EiLCJYIiwiVSIsIlZjIiwiTCIsIk8iLCJhYSIsInZhIiwiWWMiLCJmYSIsIkhhIiwiSiIsIndhIiwiVGEiLCJiYSIsImhiIiwiWGMiLCJjYSIsImliIiwiVWEiLCJWIiwiWmMiLCJFYiIsIldjIiwiJGMiLCJhZCIsIlVmIiwiVmYiLCIkYiIsImFjIiwiV2YiLCJiZCIsIlhmIiwiWWYiLCJjZCIsImVkIiwiYmMiLCJmZCIsImdkIiwiWmYiLCJ4YSIsIklhIiwiY2MiLCJoZCIsIiRmIiwicWEiLCJqYiIsImRjIiwiRmIiLCJlYyIsImpkIiwiR2IiLCJrZCIsIlZhIiwibGQiLCJ5YSIsIm1kIiwiYWciLCJiZyIsImNnIiwibmQiLCJkZyIsIm9kIiwicGQiLCJxZCIsInJkIiwic2QiLCJ1ZCIsIkhiIiwiZmMiLCJlZyIsImdjIiwiaGMiLCJ2ZCIsImZnIiwiemEiLCJ3ZCIsInhkIiwibWEiLCJ5ZCIsInpkIiwiQWQiLCJCZCIsImdnIiwiaGciLCJpZyIsImpnIiwiQ2QiLCJEZCIsImtnIiwiaWMiLCJsZyIsIkphIiwiRWQiLCJtZyIsIkZkIiwiamMiLCJHZCIsIm5nIiwiSWIiLCJKYiIsIkhkIiwiSWQiLCJrYyIsIm9nIiwicGciLCJxZyIsIkthIiwiSmQiLCJLYiIsIktkIiwiV2EiLCJMYiIsImxjIiwia2IiLCJNYiIsInJnIiwibGIiLCJMZCIsIm1iIiwiTWQiLCJtYyIsIm5iIiwiTmQiLCJPZCIsIlBkIiwic2ciLCJ0ZyIsInVnIiwidmciLCJRZCIsIndnIiwieGciLCJ5ZyIsIk5iIiwiemciLCJSZCIsIkFnIiwiQmciLCJDZyIsIlNkIiwiVGQiLCJuYyIsIlVkIiwiVmQiLCJXZCIsIkRnIiwiRWciLCJGZyIsIkdnIiwiSGciLCJJZyIsIiQkTkdfUkVNT1ZFRCIsIkpnIiwiS2ciLCJleHBvcnRzIiwiTW9kdWxlIiwiUl9JU084MDYxX1NUUiIsImNyZWF0ZUh0dHBCYWNrZW5kTW9jayIsImNyZWF0ZVJlc3BvbnNlIiwicHJldHR5UHJpbnQiLCJ3cmFwUmVzcG9uc2UiLCJ3cmFwcGVkIiwiaGFuZGxlUmVzcG9uc2UiLCIkJHJlc3BIZWFkZXJzIiwiaGFuZGxlVGltZW91dCIsInJlc3BvbnNlcyIsIk1vY2tYaHIiLCJleHBlY3RhdGlvbiIsImV4cGVjdGF0aW9ucyIsIndhc0V4cGVjdGVkIiwibWF0Y2hEYXRhIiwibWF0Y2hIZWFkZXJzIiwiZGVmaW5pdGlvbnMiLCJyZXNwb25zZXNQdXNoIiwicGFzc1Rocm91Z2giLCJNb2NrSHR0cEV4cGVjdGF0aW9uIiwicmVzcG9uZCIsImZsdXNoIiwiZGlnZXN0IiwidmVyaWZ5Tm9PdXRzdGFuZGluZ0V4cGVjdGF0aW9uIiwidmVyaWZ5Tm9PdXRzdGFuZGluZ1JlcXVlc3QiLCJyZXNldEV4cGVjdGF0aW9ucyIsIiQkbGFzdEluc3RhbmNlIiwiJCRtZXRob2QiLCIkJGFzeW5jIiwiJCRyZXFIZWFkZXJzIiwiJCRkYXRhIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJoZWFkZXJOYW1lIiwibGluZXMiLCJtb2NrIiwiJEJyb3dzZXIiLCIkJGxhc3RVcmwiLCJwb2xsRm5zIiwiJCRsYXN0U3RhdGUiLCJkZWZlcnJlZEZucyIsImRlZmVycmVkTmV4dElkIiwibm93IiwiZm5JbmRleCIsIiQkYmFzZUhyZWYiLCJwb2xsIiwicG9sbEZuIiwiZXJyb3JzIiwibG9ncyIsImFzc2VydEVtcHR5IiwibG9nTGV2ZWwiLCJsb2dJdGVtIiwicmVwZWF0Rm5zIiwibmV4dFJlcGVhdElkIiwidGljayIsIm5leHRUaW1lIiwibWlsbGlzIiwidGFzayIsIlR6RGF0ZSIsInRpbWVzdGFtcCIsInRzU3RyIiwib3JpZ0RhdGUiLCJsb2NhbE9mZnNldCIsIm9mZnNldERpZmYiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJ1bmltcGxlbWVudGVkTWV0aG9kcyIsIm1ldGhvZE5hbWUiLCJyZWZsb3dGbiIsInRvdGFsUmVmbG93cyIsInF1ZXVlRm4iLCJhbmltYXRlSnNDb25zdHJ1Y3RvciIsImFuaW1hdG9yIiwiJGNsb3NlQW5kRmx1c2giLCJhbmltYXRlQ3NzQ29uc3RydWN0b3IiLCJyZWZsb3dzIiwiY2xvc2VBbmRGbHVzaCIsImhpZGVFcnJvcnMiLCJkb05leHRSdW4iLCJzb21ldGhpbmdGbHVzaGVkIiwiZHVtcCIsIm91dCIsIm8iLCJzZXJpYWxpemVTY29wZSIsIiRUaW1lb3V0RGVjb3JhdG9yIiwiZm9ybWF0UGVuZGluZ1Rhc2tzQXNTdHJpbmciLCJ0YXNrcyIsInZlcmlmeU5vUGVuZGluZ1Rhc2tzIiwiJFJBRkRlY29yYXRvciIsInJhZkZuIiwiJFJvb3RFbGVtZW50UHJvdmlkZXIiLCIkQ29udHJvbGxlckRlY29yYXRvciIsIiRSb290U2NvcGVEZWNvcmF0b3IiLCJlMmUiLCIkaHR0cEJhY2tlbmREZWNvcmF0b3IiLCJjb3VudENoaWxkU2NvcGVzIiwicGVuZGluZ0NoaWxkSGVhZHMiLCJjb3VudFdhdGNoZXJzIiwiJHJvb3RTY29wZVByb3RvdHlwZSIsIiRjb3VudENoaWxkU2NvcGVzIiwiJGNvdW50V2F0Y2hlcnMiLCJqYXNtaW5lIiwibW9jaGEiLCJjdXJyZW50U3BlYyIsImFubm90YXRlZEZ1bmN0aW9ucyIsImlzU3BlY1J1bm5pbmciLCJzZXR1cCIsImFmdGVyRWFjaCIsInRlYXJkb3duIiwiJG1vZHVsZXMiLCJmcmFnbWVudHMiLCJ3b3JrRm4iLCJtb2R1bGVGbnMiLCJFcnJvckFkZGluZ0RlY2xhcmF0aW9uTG9jYXRpb25TdGFjayIsImVycm9yRm9yU3RhY2siLCJzb3VyY2VJZCIsInN0YWNrQXJyYXkiLCIkaW5qZWN0b3JTdHJpY3QiLCJibG9ja0ZucyIsIiRSb3V0ZVByb3ZpZGVyIiwicGF0aFJlZ0V4cCIsIm9wdHMiLCJpbnNlbnNpdGl2ZSIsImNhc2VJbnNlbnNpdGl2ZU1hdGNoIiwib3JpZ2luYWxQYXRoIiwic2xhc2giLCJzdGFyIiwicm91dGVzIiwicm91dGUiLCJyb3V0ZUNvcHkiLCJyZWxvYWRPblNlYXJjaCIsInJlZGlyZWN0UGF0aCIsIiRyb3V0ZVBhcmFtcyIsInN3aXRjaFJvdXRlTWF0Y2hlciIsInByZXBhcmVSb3V0ZSIsIiRsb2NhdGlvbkV2ZW50IiwibGFzdFJvdXRlIiwiJHJvdXRlIiwicHJlcGFyZWRSb3V0ZSIsInBhcnNlUm91dGUiLCJwcmVwYXJlZFJvdXRlSXNVcGRhdGVPbmx5IiwiJCRyb3V0ZSIsInBhdGhQYXJhbXMiLCJmb3JjZVJlbG9hZCIsImNvbW1pdFJvdXRlIiwibmV4dFJvdXRlIiwiaW50ZXJwb2xhdGUiLCJsb2FkZWRUZW1wbGF0ZVVybCIsInNlZ21lbnQiLCJzZWdtZW50TWF0Y2giLCJ1cGRhdGVQYXJhbXMiLCJuZXdQYXJhbXMiLCIkcm91dGVNaW5FcnIiLCIkUm91dGVQYXJhbXNQcm92aWRlciIsIm5nVmlld0ZhY3RvcnkiLCJjbGVhbnVwTGFzdFZpZXciLCJwcmV2aW91c0xlYXZlQW5pbWF0aW9uIiwidXBkYXRlIiwibmdWaWV3RmlsbENvbnRlbnRGYWN0b3J5IiwibmdSb3V0ZU1vZHVsZSIsImd1bHAiLCJwbHVnaW5zIiwicnVuU2VxdWVuY2UiLCJkaXJlY3RvcmllcyIsIm1rZGlyU3luYyIsImFyY2hpdmVOYW1lIiwiYXJjaGl2ZXIiLCJvdXRwdXQiLCJjcmVhdGVXcml0ZVN0cmVhbSIsImZpbGVQYXRoIiwicGlwZSIsImZpbmFsaXplIiwiZGVzdCIsInJlbmFtZSIsImJhbm5lciIsImF1dG9wcmVmaXhlciIsImJyb3dzZXJzIiwiY2FzY2FkZSIsImpzY3MiLCJqc2hpbnQiLCJyZXBvcnRlciIsIm1ldGhvZHMiLCJncmVwIiwiaW5BcnJheSIsImVhY2giLCJkZXRhY2hFdmVudCIsInBhcnNlSlNPTiIsImlzRW1wdHlPYmplY3QiLCJhY2NlcHREYXRhIiwiZ3VpZCIsInRvSlNPTiIsImRlbGV0ZUV4cGFuZG8iLCJhY3RpdmVFbGVtZW50IiwiZGVmYXVsdENoZWNrZWQiLCJvd25lckRvY3VtZW50Iiwibm9DbG9uZUV2ZW50IiwicmVtb3ZlRXZlbnQiLCJvdXRlckhUTUwiLCJodG1sNUNsb25lIiwiZGVmYXVsdFNlbGVjdGVkIiwiYXBwZW5kVG8iLCJnZXREZWZhdWx0Q29tcHV0ZWRTdHlsZSIsImRpc3BsYXkiLCJjb250ZW50V2luZG93Iiwid3JpdGUiLCJvZmZzZXRIZWlnaHQiLCJib3hTaXppbmciLCJib3hTaXppbmdSZWxpYWJsZSIsImhlaWdodCIsIm9wYWNpdHkiLCJ3aWR0aCIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJmaXJlIiwiYWx3YXlzIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJpbmxpbmVCbG9ja05lZWRzTGF5b3V0Iiwiem9vbSIsInNocmlua1dyYXBCbG9ja3MiLCJzaG93IiwiaGlkZSIsIl9yZW1vdmVEYXRhIiwiY3NzSG9va3MiLCJleHBhbmQiLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInR3ZWVucyIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb3BzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImNyZWF0ZVR3ZWVuIiwiVHdlZW4iLCJlYXNpbmciLCJzdG9wIiwicmVqZWN0V2l0aCIsImZ4IiwiYW5pbSIsImZhaWwiLCJkYXRhVHlwZXMiLCJhamF4U2V0dGluZ3MiLCJmbGF0T3B0aW9ucyIsIm1pbWVUeXBlIiwiY29udmVydGVycyIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsImRhdGFUeXBlIiwiQWN0aXZlWE9iamVjdCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwidG9BcnJheSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJmaXJzdCIsImlzUGxhaW5PYmplY3QiLCJyYW5kb20iLCJpc1JlYWR5IiwiaXNOdW1lcmljIiwib3duTGFzdCIsImdsb2JhbEV2YWwiLCJleGVjU2NyaXB0IiwiZXZhbCIsIm1ha2VBcnJheSIsInByb3h5Iiwic3VwcG9ydCIsInFzYSIsImNhY2hlTGVuZ3RoIiwiYXR0ckhhbmRsZSIsInNvdXJjZUluZGV4IiwicmVsYXRpdmUiLCJUQUciLCJ1bmlxdWVTb3J0IiwiSUQiLCJDTEFTUyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJpc1hNTCIsInNldERvY3VtZW50IiwiYXR0YWNoRXZlbnQiLCJnZXRCeUlkIiwiZ2V0QXR0cmlidXRlTm9kZSIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwic29ydERldGFjaGVkIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCI+IiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwicHNldWRvcyIsInNldEZpbHRlcnMiLCJpbm5lclRleHQiLCJsYW5nIiwiaGFzRm9jdXMiLCJ0YWJJbmRleCIsInNlbGVjdGVkSW5kZXgiLCJldmVuIiwib2RkIiwibHQiLCJndCIsIm50aCIsInBhc3N3b3JkIiwiaW1hZ2UiLCJ0b2tlbml6ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwicGFyc2VIVE1MIiwicHJldiIsInNpYmxpbmciLCJjbG9zZXN0IiwicHJldkFsbCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsInNpYmxpbmdzIiwiQ2FsbGJhY2tzIiwib25jZSIsIm1lbW9yeSIsInN0b3BPbkZhbHNlIiwiZGlzYWJsZSIsImxvY2siLCJsb2NrZWQiLCJmaXJlV2l0aCIsInJlYWR5V2FpdCIsImhvbGRSZWFkeSIsImZyYW1lRWxlbWVudCIsImRvU2Nyb2xsIiwiY3NzVGV4dCIsIm5vRGF0YSIsImFwcGxldCAiLCJlbWJlZCAiLCJvYmplY3QgIiwiZGVxdWV1ZSIsImNsZWFyUXVldWUiLCJhY2Nlc3MiLCJsZWFkaW5nV2hpdGVzcGFjZSIsImh0bWxTZXJpYWxpemUiLCJhcHBlbmRDaGVja2VkIiwibm9DbG9uZUNoZWNrZWQiLCJjaGVja0Nsb25lIiwiY2xpY2siLCJjaGFuZ2UiLCJmb2N1c2luIiwiZ2xvYmFsIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJzcGVjaWFsIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJvcmlnVHlwZSIsImRlbGVnYXRlQ291bnQiLCJFdmVudCIsImlzVHJpZ2dlciIsIm5hbWVzcGFjZV9yZSIsIm5vQnViYmxlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaGFuZGxlcnMiLCJjdXJyZW50VGFyZ2V0IiwiaGFuZGxlT2JqIiwicG9zdERpc3BhdGNoIiwiZml4SG9va3MiLCJtb3VzZUhvb2tzIiwia2V5SG9va3MiLCJzcmNFbGVtZW50IiwiY2hhckNvZGUiLCJmcm9tRWxlbWVudCIsInBhZ2VYIiwiY2xpZW50WCIsInNjcm9sbExlZnQiLCJjbGllbnRMZWZ0IiwicGFnZVkiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwidG9FbGVtZW50IiwibG9hZCIsImJlZm9yZXVubG9hZCIsIm9yaWdpbmFsRXZlbnQiLCJyZXR1cm5WYWx1ZSIsInNpbXVsYXRlIiwiaXNTaW11bGF0ZWQiLCJ0aW1lU3RhbXAiLCJjYW5jZWxCdWJibGUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJzdWJtaXRCdWJibGVzIiwiX3N1Ym1pdF9idWJibGUiLCJjaGFuZ2VCdWJibGVzIiwicHJvcGVydHlOYW1lIiwiX2p1c3RfY2hhbmdlZCIsImZvY3VzaW5CdWJibGVzIiwibGVnZW5kIiwiYXJlYSIsInBhcmFtIiwiYnVpbGRGcmFnbWVudCIsImRvbU1hbmlwIiwiYmVmb3JlIiwiX2V2YWxVcmwiLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcGVuZXIiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImN1cnJlbnRTdHlsZSIsInJ1bnRpbWVTdHlsZSIsInBpeGVsTGVmdCIsIm1hcmdpblJpZ2h0IiwiY3NzRmxvYXQiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsIk1vekJveFNpemluZyIsIldlYmtpdEJveFNpemluZyIsInJlbGlhYmxlSGlkZGVuT2Zmc2V0cyIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpblJpZ2h0Iiwic3dhcCIsInZpc2liaWxpdHkiLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsImNzc051bWJlciIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4IiwiY3NzUHJvcHMiLCJmbG9hdCIsIiQxIiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInRvZ2dsZSIsImN1ciIsInVuaXQiLCJwcm9wSG9va3MiLCJzdGVwIiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsIl9hIiwiKiIsIkFuaW1hdGlvbiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsInNwZWVkcyIsImZhZGVUbyIsImZpbmlzaCIsInRpbWVycyIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJnZXRTZXRBdHRyaWJ1dGUiLCJocmVmTm9ybWFsaXplZCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsImVuY3R5cGUiLCJvcHREaXNhYmxlZCIsInJhZGlvVmFsdWUiLCJ2YWxIb29rcyIsInNjcm9sbEhlaWdodCIsImF0dHJIb29rcyIsInByb3BGaXgiLCJzZXRBdHRyaWJ1dGVOb2RlIiwiY3JlYXRlQXR0cmlidXRlIiwiY29vcmRzIiwiY29udGVudGVkaXRhYmxlIiwicmVtb3ZlUHJvcCIsImZvciIsImNsYXNzIiwiaG92ZXIiLCJ1bmRlbGVnYXRlIiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJsb2FkWE1MIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImFjY2VwdHMiLCJ4bWwiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsImlmTW9kaWZpZWQiLCJzdGF0dXNDb2RlIiwib3ZlcnJpZGVNaW1lVHlwZSIsImNyb3NzRG9tYWluIiwidHJhZGl0aW9uYWwiLCJoYXNDb250ZW50IiwiYmVmb3JlU2VuZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ0aHJvd3MiLCJ3cmFwQWxsIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsInNlcmlhbGl6ZUFycmF5IiwiY29ycyIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25yZWFkeXN0YXRlY2hhbmdlIiwidGV4dCBzY3JpcHQiLCJzY3JpcHRDaGFyc2V0IiwiY2hhcnNldCIsIl9iIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwiYW5pbWF0ZWQiLCJzZXRPZmZzZXQiLCJ1c2luZyIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJIZWlnaHQiLCJXaWR0aCIsIiIsImFuZFNlbGYiLCJkZWZpbmUiLCJhbWQiLCJub0NvbmZsaWN0IiwiTW9kZXJuaXpyIiwiSFRNTERhdGFMaXN0RWxlbWVudCIsImlucHV0dHlwZXMiLCJXZWJraXRBcHBlYXJhbmNlIiwiY2hlY2tWYWxpZGl0eSIsInN2ZyIsImJhY2tncm91bmQiLCJtYXRjaE1lZGlhIiwibXNNYXRjaE1lZGlhIiwiZmxleGJveCIsImNhbnZhcyIsImdldENvbnRleHQiLCJjYW52YXN0ZXh0IiwiZmlsbFRleHQiLCJ3ZWJnbCIsIldlYkdMUmVuZGVyaW5nQ29udGV4dCIsInRvdWNoIiwiRG9jdW1lbnRUb3VjaCIsIm9mZnNldFRvcCIsImdlb2xvY2F0aW9uIiwicG9zdG1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsIndlYnNxbGRhdGFiYXNlIiwib3BlbkRhdGFiYXNlIiwiaW5kZXhlZERCIiwiaGFzaGNoYW5nZSIsImRyYWdhbmRkcm9wIiwid2Vic29ja2V0cyIsInJnYmEiLCJiYWNrZ3JvdW5kQ29sb3IiLCJoc2xhIiwibXVsdGlwbGViZ3MiLCJiYWNrZ3JvdW5kc2l6ZSIsImJvcmRlcmltYWdlIiwiYm9yZGVycmFkaXVzIiwiYm94c2hhZG93IiwidGV4dHNoYWRvdyIsInRleHRTaGFkb3ciLCJjc3NhbmltYXRpb25zIiwiY3NzY29sdW1ucyIsImNzc2dyYWRpZW50cyIsImJhY2tncm91bmRJbWFnZSIsImNzc3JlZmxlY3Rpb25zIiwiY3NzdHJhbnNmb3JtcyIsImNzc3RyYW5zZm9ybXMzZCIsIm9mZnNldExlZnQiLCJjc3N0cmFuc2l0aW9ucyIsImZvbnRmYWNlIiwic2hlZXQiLCJzdHlsZVNoZWV0IiwiY3NzUnVsZXMiLCJnZW5lcmF0ZWRjb250ZW50IiwidmlkZW8iLCJjYW5QbGF5VHlwZSIsIkJvb2xlYW4iLCJvZ2ciLCJoMjY0Iiwid2VibSIsImF1ZGlvIiwibXAzIiwid2F2IiwibTRhIiwibG9jYWxzdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJzZXNzaW9uc3RvcmFnZSIsInNlc3Npb25TdG9yYWdlIiwid2Vid29ya2VycyIsIldvcmtlciIsImFwcGxpY2F0aW9uY2FjaGUiLCJhcHBsaWNhdGlvbkNhY2hlIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlU1ZHUmVjdCIsImlubGluZXN2ZyIsIm5hbWVzcGFjZVVSSSIsInNtaWwiLCJzdmdjbGlwcGF0aHMiLCJhZGRUZXN0IiwiY3JlYXRlRWxlbSIsImNhbkhhdmVDaGlsZHJlbiIsInRhZ1VybiIsImZyYWciLCJjcmVhdGVGcmFnIiwic2hpdk1ldGhvZHMiLCJzaGl2Q1NTIiwiaGFzQ1NTIiwiaHRtbDUiLCJzdXBwb3J0c1Vua25vd25FbGVtZW50cyIsInNoaXZEb2N1bWVudCIsIl92ZXJzaW9uIiwiX3ByZWZpeGVzIiwiX2RvbVByZWZpeGVzIiwiX2Nzc29tUHJlZml4ZXMiLCJtcSIsInRlc3RQcm9wIiwidGVzdEFsbFByb3BzIiwidGVzdFN0eWxlcyIsImluamVjdENzcyIsImluamVjdEpzIiwiZXJyb3JUaW1lb3V0IiwibG9hZGVyIiwiY3JlYXRlUmFuZ2UiLCJjb21wYXJlTm9kZSIsIm9wZXJhIiwib3JpZ1VybCIsImF1dG9DYWxsYmFjayIsImJ5cGFzcyIsImluc3RlYWQiLCJub2V4ZWMiLCJmb3JjZUNTUyIsImZvcmNlSlMiLCJib3RoIiwieWVwIiwibm9wZSIsInllcG5vcGUiLCJhZGRQcmVmaXgiLCJhZGRGaWx0ZXIiLCJleGVjdXRlU3RhY2siLCJyZWwiXSwibWFwcGluZ3MiOiJBQUFBLFlDV0EsU0FBQUEsYUFBQUMsRUFBQUMsRUFBQUMsR0FFQSxHQUFBQyxHQUFBLEdBQ0FDLEdBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBQyxHQUFBQyxpQkFBQVIsR0FBQVMsU0FBQSxRQUVBSCxHQUFBSSxHQUFBLFFBQUFSLEdBQ0FJLEVBQUFJLEdBQUEsUUFBQVIsR0FDQUksRUFBQUksR0FBQSxXQUFBLFdBSUEsS0FBQU4sS0FBQSxHQUNBLFFBQUFELEVBQUFHLEVBQUFLLEtBQUEsS0FFQVIsSUFBQUYsRUFBQVcsT0FBQVAsR0FDQUEsR0FBQSxFQUVBQSxFQUFBLEVBR0FBLElBQUFKLEVBQUFZLFNBQ0FULEdBQUEsRUFLQVUsUUFBQUMsT0FBQSxFQUFBWCxHQUNBWSxLQUFBQyxVQVFBLFFBQUFDLFlBRUEsR0FBQUMsR0FBQUMsS0FBQUMsSUFFQUMsVUFBQSwrQkFBQUgsRUFBQSx3Q0FBQSxXQUVBSSxHQUFBLGtFQUFBLFNBQUFyQixHQUNBLEdBQUFELEdBQUEscUNBQ0FGLGFBQUF5QixLQUFBQyxRQUFBTixFQUFBLGFBQUFsQixFQUFBQyxLQUdBcUIsR0FBQSx3RUFBQSxTQUFBckIsR0FDQSxHQUFBRCxHQUFBLHdDQUFBeUIsSUFBQUMsZ0JBQUFDLE9BQUEsZ0JBQ0E3QixhQUFBeUIsS0FBQUMsUUFBQU4sRUFBQSxjQUFBbEIsRUFBQUMsS0FHQXFCLEdBQUEsMEVBQUEsU0FBQXJCLEdBQ0EsR0FBQUQsR0FBQSxvQkFBQXlCLElBQUFDLGdCQUFBQyxPQUFBLFNBQ0E3QixhQUFBeUIsS0FBQUMsUUFBQU4sRUFBQSxjQUFBbEIsRUFBQUMsS0FHQXFCLEdBQUEsNENBQUEsU0FBQXJCLEdBQ0EsR0FBQUQsR0FBQSwwQkFB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QWxpQyxFQUFBZzJFLG1CQUFBaDJFLEVBQUFpTCxPQUFBLFlBQUExb0IsR0FBQTA2RCxFQUFBajlDLEVBQUFqYixjQUFBeEMsRUFBQSxFQUFBMmxELElBQUFsb0MsRUFBQWlMLE9BQUFqTCxFQUFBZzJFLG1CQUFBLE9BQUE5bkQsRUFBQSxXQUFBM3JDLElBQUFBLEVBQUEsRUFBQTJsRCxFQUFBLEtBQUFwN0QsR0FBQTVKLEVBQUE4OEIsRUFBQWlMLFNBQUFwYixFQUFBeEwsV0FBQWc0QyxhQUFBcjhCLEVBQUFuUSxJQUFBdmEsRUFBQWlwRyxRQUFBakIsVUFBQSxTQUFBaG9HLEVBQUE0eUQsRUFBQXBpQyxFQUFBaDVCLEVBQUFtd0UsRUFBQS81RSxHQUFBLEdBQUE4QyxHQUFBOEcsRUFBQXFmLEVBQUFwTCxjQUFBLFFBQUFtbkQsRUFBQWhsRSxFQUFBc0MsRUFBQTBpRSxHQUFBaEcsQ0FBQXAxRCxHQUFBeWhCLEtBQUFqWixFQUFBeEksRUFBQTZ4RyxJQUFBLGFBQUE3eEcsRUFBQTFOLEtBQUEsVUFBQSxLQUFBNEcsSUFBQTgvQixHQUFBaDVCLEVBQUE2VyxhQUFBM2QsRUFBQTgvQixFQUFBOS9CLEdBQUFpM0UsS0FBQXB0RCxFQUFBeEwsV0FBQWc0QyxhQUFBdnZELEVBQUEraUIsR0FBQXErQixFQUFBZ2EsRUFBQSxNQUFBN3BFLEtBQUF1RSxVQUFBdzBHLFVBQUF0SyxLQUFBLFdBQUF5UixRQUFBbnpHLE1BQUF6SSxVQUFBekMsTUFBQTJFLEtBQUF4QixVQUFBIiwiZmlsZSI6ImJ1bmRsZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIERlY2xhcmUgYXBwIGxldmVsIG1vZHVsZSB3aGljaCBkZXBlbmRzIG9uIHZpZXdzLCBhbmQgY29tcG9uZW50c1xuYW5ndWxhci5tb2R1bGUoJ215QXBwJywgW1xuICAnbmdSb3V0ZScsXG4gICdteUFwcC52aWV3MScsXG4gICdteUFwcC52aWV3MicsXG4gICdteUFwcC52ZXJzaW9uJ1xuXSkuXG5jb25maWcoWyckcm91dGVQcm92aWRlcicsIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICRyb3V0ZVByb3ZpZGVyLm90aGVyd2lzZSh7cmVkaXJlY3RUbzogJy92aWV3MSd9KTtcbn1dKTtcbiIsIi8qIGpzaGludCBtb2NoYTogdHJ1ZSAqL1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbnZhciBwa2cgPSByZXF1aXJlKCcuLy4uL3BhY2thZ2UuanNvbicpO1xudmFyIGRpcnMgPSBwa2dbJ2g1YnAtY29uZmlncyddLmRpcmVjdG9yaWVzO1xuXG4vLyAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC1cblxuZnVuY3Rpb24gY2hlY2tTdHJpbmcoZmlsZSwgc3RyaW5nLCBkb25lKSB7XG5cbiAgICB2YXIgY2hhcmFjdGVyID0gJyc7XG4gICAgdmFyIG1hdGNoRm91bmQgPSBmYWxzZTtcbiAgICB2YXIgbWF0Y2hlZFBvc2l0aW9ucyA9IDA7XG4gICAgdmFyIHJlYWRTdHJlYW0gPSBmcy5jcmVhdGVSZWFkU3RyZWFtKGZpbGUsIHsgJ2VuY29kaW5nJzogJ3V0ZjgnIH0pO1xuXG4gICAgcmVhZFN0cmVhbS5vbignY2xvc2UnLCBkb25lKTtcbiAgICByZWFkU3RyZWFtLm9uKCdlcnJvcicsIGRvbmUpO1xuICAgIHJlYWRTdHJlYW0ub24oJ3JlYWRhYmxlJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIC8vIFJlYWQgZmlsZSB1bnRpbCB0aGUgc3RyaW5nIGlzIGZvdW5kXG4gICAgICAgIC8vIG9yIHRoZSB3aG9sZSBmaWxlIGhhcyBiZWVuIHJlYWRcbiAgICAgICAgd2hpbGUgKG1hdGNoRm91bmQgIT09IHRydWUgJiZcbiAgICAgICAgICAgICAgICAoY2hhcmFjdGVyID0gcmVhZFN0cmVhbS5yZWFkKDEpKSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBzdHJpbmcuY2hhckF0KG1hdGNoZWRQb3NpdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlZFBvc2l0aW9ucyArPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVkUG9zaXRpb25zID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1hdGNoZWRQb3NpdGlvbnMgPT09IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBtYXRjaEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgYXNzZXJ0LmVxdWFsKHRydWUsIG1hdGNoRm91bmQpO1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG5cbiAgICB9KTtcblxufVxuXG4vLyAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC1cblxuZnVuY3Rpb24gcnVuVGVzdHMoKSB7XG5cbiAgICB2YXIgZGlyID0gZGlycy5kaXN0O1xuXG4gICAgZGVzY3JpYmUoJ1Rlc3QgaWYgdGhlIGZpbGVzIGZyb20gdGhlIFwiJyArIGRpciArICdcIiBkaXJlY3RvcnkgaGF2ZSB0aGUgZXhwZWN0ZWQgY29udGVudCcsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBpdCgnXCIuaHRhY2Nlc3NcIiBzaG91bGQgaGF2ZSB0aGUgXCJFcnJvckRvY3VtZW50Li4uXCIgbGluZSB1bmNvbW1lbnRlZCcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5nID0gJ1xcblxcbkVycm9yRG9jdW1lbnQgNDA0IC80MDQuaHRtbFxcblxcbic7XG4gICAgICAgICAgICBjaGVja1N0cmluZyhwYXRoLnJlc29sdmUoZGlyLCAnLmh0YWNjZXNzJyksIHN0cmluZywgZG9uZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdcImluZGV4Lmh0bWxcIiBzaG91bGQgY29udGFpbiB0aGUgY29ycmVjdCBqUXVlcnkgdmVyc2lvbiBpbiB0aGUgQ0ROIFVSTCcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5nID0gJ2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8nICsgcGtnLmRldkRlcGVuZGVuY2llcy5qcXVlcnkgKyAnL2pxdWVyeS5taW4uanMnO1xuICAgICAgICAgICAgY2hlY2tTdHJpbmcocGF0aC5yZXNvbHZlKGRpciwgJ2luZGV4Lmh0bWwnKSwgc3RyaW5nLCBkb25lKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ1wiaW5kZXguaHRtbFwiIHNob3VsZCBjb250YWluIHRoZSBjb3JyZWN0IGpRdWVyeSB2ZXJzaW9uIGluIHRoZSBsb2NhbCBVUkwnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgdmFyIHN0cmluZyA9ICdqcy92ZW5kb3IvanF1ZXJ5LScgKyBwa2cuZGV2RGVwZW5kZW5jaWVzLmpxdWVyeSArICcubWluLmpzJztcbiAgICAgICAgICAgIGNoZWNrU3RyaW5nKHBhdGgucmVzb2x2ZShkaXIsICdpbmRleC5odG1sJyksIHN0cmluZywgZG9uZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdcIm1haW4uY3NzXCIgc2hvdWxkIGNvbnRhaW4gYSBjdXN0b20gYmFubmVyJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmcgPSAnLyohIEhUTUw1IEJvaWxlcnBsYXRlIHYnICsgcGtnLnZlcnNpb24gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICcgfCAnICsgcGtnLmxpY2Vuc2UudHlwZSArICcgTGljZW5zZScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICcgfCAnICsgcGtnLmhvbWVwYWdlICsgJyAqL1xcblxcbi8qXFxuJztcbiAgICAgICAgICAgIGNoZWNrU3RyaW5nKHBhdGgucmVzb2x2ZShkaXIsICdjc3MvbWFpbi5jc3MnKSwgc3RyaW5nLCBkb25lKTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxufVxuXG5ydW5UZXN0cygpO1xuIiwiLyoganNoaW50IG1vY2hhOiB0cnVlICovXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxudmFyIHBrZyA9IHJlcXVpcmUoJy4vLi4vcGFja2FnZS5qc29uJyk7XG52YXIgZGlycyA9IHBrZ1snaDVicC1jb25maWdzJ10uZGlyZWN0b3JpZXM7XG5cbnZhciBleHBlY3RlZEZpbGVzSW5BcmNoaXZlRGlyID0gW1xuICAgIHBrZy5uYW1lICsgJ192JyArIHBrZy52ZXJzaW9uICsgJy56aXAnXG5dO1xuXG52YXIgZXhwZWN0ZWRGaWxlc0luRGlzdERpciA9IFtcblxuICAgICcuZWRpdG9yY29uZmlnJyxcbiAgICAnLmdpdGF0dHJpYnV0ZXMnLFxuICAgICcuZ2l0aWdub3JlJyxcbiAgICAnLmh0YWNjZXNzJyxcbiAgICAnNDA0Lmh0bWwnLFxuICAgICdhcHBsZS10b3VjaC1pY29uLnBuZycsXG4gICAgJ2Jyb3dzZXJjb25maWcueG1sJyxcbiAgICAnY3Jvc3Nkb21haW4ueG1sJyxcblxuICAgICdjc3MvJywgLy8gZm9yIGRpcmVjdG9yaWVzLCBhIGAvYCBjaGFyYWN0ZXJcbiAgICAgICAgICAgIC8vIHNob3VsZCBiZSBpbmNsdWRlZCBhdCB0aGUgZW5kXG4gICAgICAgICdjc3MvbWFpbi5jc3MnLFxuICAgICAgICAnY3NzL25vcm1hbGl6ZS5jc3MnLFxuXG4gICAgJ2RvYy8nLFxuICAgICAgICAnZG9jL1RPQy5tZCcsXG4gICAgICAgICdkb2MvY3NzLm1kJyxcbiAgICAgICAgJ2RvYy9leHRlbmQubWQnLFxuICAgICAgICAnZG9jL2ZhcS5tZCcsXG4gICAgICAgICdkb2MvaHRtbC5tZCcsXG4gICAgICAgICdkb2MvanMubWQnLFxuICAgICAgICAnZG9jL21pc2MubWQnLFxuICAgICAgICAnZG9jL3VzYWdlLm1kJyxcblxuICAgICdmYXZpY29uLmljbycsXG4gICAgJ2h1bWFucy50eHQnLFxuXG4gICAgJ2ltZy8nLFxuICAgICAgICAnaW1nLy5naXRpZ25vcmUnLFxuXG4gICAgJ2luZGV4Lmh0bWwnLFxuXG4gICAgJ2pzLycsXG4gICAgICAgICdqcy9tYWluLmpzJyxcbiAgICAgICAgJ2pzL3BsdWdpbnMuanMnLFxuICAgICAgICAnanMvdmVuZG9yLycsXG4gICAgICAgICAgICAnanMvdmVuZG9yL2pxdWVyeS0nICsgcGtnLmRldkRlcGVuZGVuY2llcy5qcXVlcnkgKyAnLm1pbi5qcycsXG4gICAgICAgICAgICAnanMvdmVuZG9yL21vZGVybml6ci0yLjguMy5taW4uanMnLFxuXG4gICAgJ0xJQ0VOU0UudHh0JyxcbiAgICAncm9ib3RzLnR4dCcsXG4gICAgJ3RpbGUtd2lkZS5wbmcnLFxuICAgICd0aWxlLnBuZydcblxuXTtcblxuLy8gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtXG5cbmZ1bmN0aW9uIGNoZWNrRmlsZXMoZGlyZWN0b3J5LCBleHBlY3RlZEZpbGVzKSB7XG5cbiAgICAvLyBHZXQgdGhlIGxpc3Qgb2YgZmlsZXMgZnJvbSB0aGUgc3BlY2lmaWVkIGRpcmVjdG9yeVxuICAgIHZhciBmaWxlcyA9IHJlcXVpcmUoJ2dsb2InKS5zeW5jKCcqKi8qJywge1xuICAgICAgICAnY3dkJzogZGlyZWN0b3J5LFxuICAgICAgICAnZG90JzogdHJ1ZSwgICAgICAvLyBpbmNsdWRlIGhpZGRlbiBmaWxlc1xuICAgICAgICAnbWFyayc6IHRydWUgICAgICAvLyBhZGQgYSBgL2AgY2hhcmFjdGVyIHRvIGRpcmVjdG9yeSBtYXRjaGVzXG4gICAgfSk7XG5cbiAgICAvLyBDaGVjayBpZiBhbGwgZXhwZWN0ZWQgZmlsZXMgYXJlIHByZXNlbnQgaW4gdGhlXG4gICAgLy8gc3BlY2lmaWVkIGRpcmVjdG9yeSwgYW5kIGFyZSBvZiB0aGUgZXhwZWN0ZWQgdHlwZVxuICAgIGV4cGVjdGVkRmlsZXMuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xuXG4gICAgICAgIHZhciBvayA9IGZhbHNlO1xuICAgICAgICB2YXIgZXhwZWN0ZWRGaWxlVHlwZSA9IChmaWxlLnNsaWNlKC0xKSAhPT0gJy8nID8gJ3JlZ3VsYXIgZmlsZScgOiAnZGlyZWN0b3J5Jyk7XG5cbiAgICAgICAgLy8gSWYgZmlsZSBleGlzdHNcbiAgICAgICAgaWYgKGZpbGVzLmluZGV4T2YoZmlsZSkgIT09IC0xKSB7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBmaWxlIGlzIG9mIHRoZSBjb3JyZWN0IHR5cGVcbiAgICAgICAgICAgIGlmIChmaWxlLnNsaWNlKC0xKSAhPT0gJy8nKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGZpbGUgaXMgcmVhbGx5IGEgcmVndWxhciBmaWxlXG4gICAgICAgICAgICAgICAgb2sgPSBmcy5zdGF0U3luYyhwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCBmaWxlKSkuaXNGaWxlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBmaWxlIGlzIGEgZGlyZWN0b3J5XG4gICAgICAgICAgICAgICAgLy8gKFNpbmNlIGdsb2IgYWRkcyB0aGUgYC9gIGNoYXJhY3RlciB0byBkaXJlY3RvcnkgbWF0Y2hlcyxcbiAgICAgICAgICAgICAgICAvLyB3ZSBjYW4gc2ltcGx5IGNoZWNrIGlmIHRoZSBgL2AgY2hhcmFjdGVyIGlzIHByZXNlbnQpXG4gICAgICAgICAgICAgICAgb2sgPSAoZmlsZXNbZmlsZXMuaW5kZXhPZihmaWxlKV0uc2xpY2UoLTEpID09PSAnLycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpdCgnXCInICsgZmlsZSArICdcIiBzaG91bGQgYmUgcHJlc2VudCBhbmQgaXQgc2hvdWxkIGJlIGEgJyArIGV4cGVjdGVkRmlsZVR5cGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbCh0cnVlLCBvayk7XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgICAvLyBMaXN0IGFsbCBmaWxlcyB0aGF0IHNob3VsZCBiZSBOT1RcbiAgICAvLyBiZSBwcmVzZW50IGluIHRoZSBzcGVjaWZpZWQgZGlyZWN0b3J5XG4gICAgKGZpbGVzLmZpbHRlcihmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICByZXR1cm4gZXhwZWN0ZWRGaWxlcy5pbmRleE9mKGZpbGUpID09PSAtMTtcbiAgICB9KSkuZm9yRWFjaChmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICBpdCgnXCInICsgZmlsZSArICdcIiBzaG91bGQgTk9UIGJlIHByZXNlbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhc3NlcnQoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxufVxuXG4vLyAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC1cblxuZnVuY3Rpb24gcnVuVGVzdHMoKSB7XG5cbiAgICBkZXNjcmliZSgnVGVzdCBpZiBhbGwgdGhlIGV4cGVjdGVkIGZpbGVzLCBhbmQgb25seSB0aGVtLCBhcmUgcHJlc2VudCBpbiB0aGUgYnVpbGQgZGlyZWN0b3JpZXMnLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgZGVzY3JpYmUoZGlycy5hcmNoaXZlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjaGVja0ZpbGVzKGRpcnMuYXJjaGl2ZSwgZXhwZWN0ZWRGaWxlc0luQXJjaGl2ZURpcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKGRpcnMuZGlzdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2hlY2tGaWxlcyhkaXJzLmRpc3QsIGV4cGVjdGVkRmlsZXNJbkRpc3REaXIpO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG59XG5cbnJ1blRlc3RzKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdteUFwcC52aWV3MScsIFsnbmdSb3V0ZSddKVxuXG4uY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuICAkcm91dGVQcm92aWRlci53aGVuKCcvdmlldzEnLCB7XG4gICAgdGVtcGxhdGVVcmw6ICd2aWV3MS92aWV3MS5odG1sJyxcbiAgICBjb250cm9sbGVyOiAnVmlldzFDdHJsJ1xuICB9KTtcbn1dKVxuXG4uY29udHJvbGxlcignVmlldzFDdHJsJywgW2Z1bmN0aW9uKCkge1xuXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5kZXNjcmliZSgnbXlBcHAudmlldzEgbW9kdWxlJywgZnVuY3Rpb24oKSB7XG5cbiAgYmVmb3JlRWFjaChtb2R1bGUoJ215QXBwLnZpZXcxJykpO1xuXG4gIGRlc2NyaWJlKCd2aWV3MSBjb250cm9sbGVyJywgZnVuY3Rpb24oKXtcblxuICAgIGl0KCdzaG91bGQgLi4uLicsIGluamVjdChmdW5jdGlvbigkY29udHJvbGxlcikge1xuICAgICAgLy9zcGVjIGJvZHlcbiAgICAgIHZhciB2aWV3MUN0cmwgPSAkY29udHJvbGxlcignVmlldzFDdHJsJyk7XG4gICAgICBleHBlY3QodmlldzFDdHJsKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pKTtcblxuICB9KTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ215QXBwLnZpZXcyJywgWyduZ1JvdXRlJ10pXG5cbi5jb25maWcoWyckcm91dGVQcm92aWRlcicsIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICRyb3V0ZVByb3ZpZGVyLndoZW4oJy92aWV3MicsIHtcbiAgICB0ZW1wbGF0ZVVybDogJ3ZpZXcyL3ZpZXcyLmh0bWwnLFxuICAgIGNvbnRyb2xsZXI6ICdWaWV3MkN0cmwnLFxuICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICB9KTtcbn1dKVxuXG4uY29udHJvbGxlcignVmlldzJDdHJsJywgW2Z1bmN0aW9uKCkge1xuICB2YXIgdm0gPSB0aGlzO1xuICB2bS5wYWdlVGl0bGUgPSAn5ris6KmmJztcbn1dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZGVzY3JpYmUoJ215QXBwLnZpZXcyIG1vZHVsZScsIGZ1bmN0aW9uKCkge1xuXG4gIGJlZm9yZUVhY2gobW9kdWxlKCdteUFwcC52aWV3MicpKTtcblxuICBkZXNjcmliZSgndmlldzIgY29udHJvbGxlcicsIGZ1bmN0aW9uKCl7XG5cbiAgICBpdCgnc2hvdWxkIC4uLi4nLCBpbmplY3QoZnVuY3Rpb24oJGNvbnRyb2xsZXIpIHtcbiAgICAgIC8vc3BlYyBib2R5XG4gICAgICB2YXIgdmlldzJDdHJsID0gJGNvbnRyb2xsZXIoJ1ZpZXcyQ3RybCcpO1xuICAgICAgZXhwZWN0KHZpZXcyQ3RybCkudG9CZURlZmluZWQoKTtcbiAgICB9KSk7XG5cbiAgfSk7XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdteUFwcC52ZXJzaW9uLmludGVycG9sYXRlLWZpbHRlcicsIFtdKVxuXG4uZmlsdGVyKCdpbnRlcnBvbGF0ZScsIFsndmVyc2lvbicsIGZ1bmN0aW9uKHZlcnNpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRleHQpIHtcbiAgICByZXR1cm4gU3RyaW5nKHRleHQpLnJlcGxhY2UoL1xcJVZFUlNJT05cXCUvbWcsIHZlcnNpb24pO1xuICB9O1xufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5kZXNjcmliZSgnbXlBcHAudmVyc2lvbiBtb2R1bGUnLCBmdW5jdGlvbigpIHtcbiAgYmVmb3JlRWFjaChtb2R1bGUoJ215QXBwLnZlcnNpb24nKSk7XG5cbiAgZGVzY3JpYmUoJ2ludGVycG9sYXRlIGZpbHRlcicsIGZ1bmN0aW9uKCkge1xuICAgIGJlZm9yZUVhY2gobW9kdWxlKGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gICAgICAkcHJvdmlkZS52YWx1ZSgndmVyc2lvbicsICdURVNUX1ZFUicpO1xuICAgIH0pKTtcblxuICAgIGl0KCdzaG91bGQgcmVwbGFjZSBWRVJTSU9OJywgaW5qZWN0KGZ1bmN0aW9uKGludGVycG9sYXRlRmlsdGVyKSB7XG4gICAgICBleHBlY3QoaW50ZXJwb2xhdGVGaWx0ZXIoJ2JlZm9yZSAlVkVSU0lPTiUgYWZ0ZXInKSkudG9FcXVhbCgnYmVmb3JlIFRFU1RfVkVSIGFmdGVyJyk7XG4gICAgfSkpO1xuICB9KTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnbXlBcHAudmVyc2lvbi52ZXJzaW9uLWRpcmVjdGl2ZScsIFtdKVxuXG4uZGlyZWN0aXZlKCdhcHBWZXJzaW9uJywgWyd2ZXJzaW9uJywgZnVuY3Rpb24odmVyc2lvbikge1xuICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0cnMpIHtcbiAgICBlbG0udGV4dCh2ZXJzaW9uKTtcbiAgfTtcbn1dKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZGVzY3JpYmUoJ215QXBwLnZlcnNpb24gbW9kdWxlJywgZnVuY3Rpb24oKSB7XG4gIGJlZm9yZUVhY2gobW9kdWxlKCdteUFwcC52ZXJzaW9uJykpO1xuXG4gIGRlc2NyaWJlKCdhcHAtdmVyc2lvbiBkaXJlY3RpdmUnLCBmdW5jdGlvbigpIHtcbiAgICBpdCgnc2hvdWxkIHByaW50IGN1cnJlbnQgdmVyc2lvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgbW9kdWxlKGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gICAgICAgICRwcm92aWRlLnZhbHVlKCd2ZXJzaW9uJywgJ1RFU1RfVkVSJyk7XG4gICAgICB9KTtcbiAgICAgIGluamVjdChmdW5jdGlvbigkY29tcGlsZSwgJHJvb3RTY29wZSkge1xuICAgICAgICB2YXIgZWxlbWVudCA9ICRjb21waWxlKCc8c3BhbiBhcHAtdmVyc2lvbj48L3NwYW4+JykoJHJvb3RTY29wZSk7XG4gICAgICAgIGV4cGVjdChlbGVtZW50LnRleHQoKSkudG9FcXVhbCgnVEVTVF9WRVInKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnbXlBcHAudmVyc2lvbicsIFtcbiAgJ215QXBwLnZlcnNpb24uaW50ZXJwb2xhdGUtZmlsdGVyJyxcbiAgJ215QXBwLnZlcnNpb24udmVyc2lvbi1kaXJlY3RpdmUnXG5dKVxuXG4udmFsdWUoJ3ZlcnNpb24nLCAnMC4xJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmRlc2NyaWJlKCdteUFwcC52ZXJzaW9uIG1vZHVsZScsIGZ1bmN0aW9uKCkge1xuICBiZWZvcmVFYWNoKG1vZHVsZSgnbXlBcHAudmVyc2lvbicpKTtcblxuICBkZXNjcmliZSgndmVyc2lvbiBzZXJ2aWNlJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gY3VycmVudCB2ZXJzaW9uJywgaW5qZWN0KGZ1bmN0aW9uKHZlcnNpb24pIHtcbiAgICAgIGV4cGVjdCh2ZXJzaW9uKS50b0VxdWFsKCcwLjEnKTtcbiAgICB9KSk7XG4gIH0pO1xufSk7XG4iLCIvKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS40LjlcbiAqIChjKSAyMDEwLTIwMTUgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkgeyd1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGlzIG9iamVjdCBwcm92aWRlcyBhIHV0aWxpdHkgZm9yIHByb2R1Y2luZyByaWNoIEVycm9yIG1lc3NhZ2VzIHdpdGhpblxuICogQW5ndWxhci4gSXQgY2FuIGJlIGNhbGxlZCBhcyBmb2xsb3dzOlxuICpcbiAqIHZhciBleGFtcGxlTWluRXJyID0gbWluRXJyKCdleGFtcGxlJyk7XG4gKiB0aHJvdyBleGFtcGxlTWluRXJyKCdvbmUnLCAnVGhpcyB7MH0gaXMgezF9JywgZm9vLCBiYXIpO1xuICpcbiAqIFRoZSBhYm92ZSBjcmVhdGVzIGFuIGluc3RhbmNlIG9mIG1pbkVyciBpbiB0aGUgZXhhbXBsZSBuYW1lc3BhY2UuIFRoZVxuICogcmVzdWx0aW5nIGVycm9yIHdpbGwgaGF2ZSBhIG5hbWVzcGFjZWQgZXJyb3IgY29kZSBvZiBleGFtcGxlLm9uZS4gIFRoZVxuICogcmVzdWx0aW5nIGVycm9yIHdpbGwgcmVwbGFjZSB7MH0gd2l0aCB0aGUgdmFsdWUgb2YgZm9vLCBhbmQgezF9IHdpdGggdGhlXG4gKiB2YWx1ZSBvZiBiYXIuIFRoZSBvYmplY3QgaXMgbm90IHJlc3RyaWN0ZWQgaW4gdGhlIG51bWJlciBvZiBhcmd1bWVudHMgaXQgY2FuXG4gKiB0YWtlLlxuICpcbiAqIElmIGZld2VyIGFyZ3VtZW50cyBhcmUgc3BlY2lmaWVkIHRoYW4gbmVjZXNzYXJ5IGZvciBpbnRlcnBvbGF0aW9uLCB0aGUgZXh0cmFcbiAqIGludGVycG9sYXRpb24gbWFya2VycyB3aWxsIGJlIHByZXNlcnZlZCBpbiB0aGUgZmluYWwgc3RyaW5nLlxuICpcbiAqIFNpbmNlIGRhdGEgd2lsbCBiZSBwYXJzZWQgc3RhdGljYWxseSBkdXJpbmcgYSBidWlsZCBzdGVwLCBzb21lIHJlc3RyaWN0aW9uc1xuICogYXJlIGFwcGxpZWQgd2l0aCByZXNwZWN0IHRvIGhvdyBtaW5FcnIgaW5zdGFuY2VzIGFyZSBjcmVhdGVkIGFuZCBjYWxsZWQuXG4gKiBJbnN0YW5jZXMgc2hvdWxkIGhhdmUgbmFtZXMgb2YgdGhlIGZvcm0gbmFtZXNwYWNlTWluRXJyIGZvciBhIG1pbkVyciBjcmVhdGVkXG4gKiB1c2luZyBtaW5FcnIoJ25hbWVzcGFjZScpIC4gRXJyb3IgY29kZXMsIG5hbWVzcGFjZXMgYW5kIHRlbXBsYXRlIHN0cmluZ3NcbiAqIHNob3VsZCBhbGwgYmUgc3RhdGljIHN0cmluZ3MsIG5vdCB2YXJpYWJsZXMgb3IgZ2VuZXJhbCBleHByZXNzaW9ucy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlIFRoZSBuYW1lc3BhY2UgdG8gdXNlIGZvciB0aGUgbmV3IG1pbkVyciBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IEVycm9yQ29uc3RydWN0b3IgQ3VzdG9tIGVycm9yIGNvbnN0cnVjdG9yIHRvIGJlIGluc3RhbnRpYXRlZCB3aGVuIHJldHVybmluZ1xuICogICBlcnJvciBmcm9tIHJldHVybmVkIGZ1bmN0aW9uLCBmb3IgY2FzZXMgd2hlbiBhIHBhcnRpY3VsYXIgdHlwZSBvZiBlcnJvciBpcyB1c2VmdWwuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29kZTpzdHJpbmcsIHRlbXBsYXRlOnN0cmluZywgLi4udGVtcGxhdGVBcmdzKTogRXJyb3J9IG1pbkVyciBpbnN0YW5jZVxuICovXG5cbmZ1bmN0aW9uIG1pbkVycihtb2R1bGUsIEVycm9yQ29uc3RydWN0b3IpIHtcbiAgRXJyb3JDb25zdHJ1Y3RvciA9IEVycm9yQ29uc3RydWN0b3IgfHwgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgU0tJUF9JTkRFWEVTID0gMjtcblxuICAgIHZhciB0ZW1wbGF0ZUFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICBjb2RlID0gdGVtcGxhdGVBcmdzWzBdLFxuICAgICAgbWVzc2FnZSA9ICdbJyArIChtb2R1bGUgPyBtb2R1bGUgKyAnOicgOiAnJykgKyBjb2RlICsgJ10gJyxcbiAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGVBcmdzWzFdLFxuICAgICAgcGFyYW1QcmVmaXgsIGk7XG5cbiAgICBtZXNzYWdlICs9IHRlbXBsYXRlLnJlcGxhY2UoL1xce1xcZCtcXH0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHZhciBpbmRleCA9ICttYXRjaC5zbGljZSgxLCAtMSksXG4gICAgICAgIHNoaWZ0ZWRJbmRleCA9IGluZGV4ICsgU0tJUF9JTkRFWEVTO1xuXG4gICAgICBpZiAoc2hpZnRlZEluZGV4IDwgdGVtcGxhdGVBcmdzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdG9EZWJ1Z1N0cmluZyh0ZW1wbGF0ZUFyZ3Nbc2hpZnRlZEluZGV4XSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIG1lc3NhZ2UgKz0gJ1xcbmh0dHA6Ly9lcnJvcnMuYW5ndWxhcmpzLm9yZy8xLjQuOS8nICtcbiAgICAgIChtb2R1bGUgPyBtb2R1bGUgKyAnLycgOiAnJykgKyBjb2RlO1xuXG4gICAgZm9yIChpID0gU0tJUF9JTkRFWEVTLCBwYXJhbVByZWZpeCA9ICc/JzsgaSA8IHRlbXBsYXRlQXJncy5sZW5ndGg7IGkrKywgcGFyYW1QcmVmaXggPSAnJicpIHtcbiAgICAgIG1lc3NhZ2UgKz0gcGFyYW1QcmVmaXggKyAncCcgKyAoaSAtIFNLSVBfSU5ERVhFUykgKyAnPScgK1xuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQodG9EZWJ1Z1N0cmluZyh0ZW1wbGF0ZUFyZ3NbaV0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEVycm9yQ29uc3RydWN0b3IobWVzc2FnZSk7XG4gIH07XG59XG5cbi8qIFdlIG5lZWQgdG8gdGVsbCBqc2hpbnQgd2hhdCB2YXJpYWJsZXMgYXJlIGJlaW5nIGV4cG9ydGVkICovXG4vKiBnbG9iYWwgYW5ndWxhcjogdHJ1ZSxcbiAgbXNpZTogdHJ1ZSxcbiAganFMaXRlOiB0cnVlLFxuICBqUXVlcnk6IHRydWUsXG4gIHNsaWNlOiB0cnVlLFxuICBzcGxpY2U6IHRydWUsXG4gIHB1c2g6IHRydWUsXG4gIHRvU3RyaW5nOiB0cnVlLFxuICBuZ01pbkVycjogdHJ1ZSxcbiAgYW5ndWxhck1vZHVsZTogdHJ1ZSxcbiAgdWlkOiB0cnVlLFxuICBSRUdFWF9TVFJJTkdfUkVHRVhQOiB0cnVlLFxuICBWQUxJRElUWV9TVEFURV9QUk9QRVJUWTogdHJ1ZSxcblxuICBsb3dlcmNhc2U6IHRydWUsXG4gIHVwcGVyY2FzZTogdHJ1ZSxcbiAgbWFudWFsTG93ZXJjYXNlOiB0cnVlLFxuICBtYW51YWxVcHBlcmNhc2U6IHRydWUsXG4gIG5vZGVOYW1lXzogdHJ1ZSxcbiAgaXNBcnJheUxpa2U6IHRydWUsXG4gIGZvckVhY2g6IHRydWUsXG4gIGZvckVhY2hTb3J0ZWQ6IHRydWUsXG4gIHJldmVyc2VQYXJhbXM6IHRydWUsXG4gIG5leHRVaWQ6IHRydWUsXG4gIHNldEhhc2hLZXk6IHRydWUsXG4gIGV4dGVuZDogdHJ1ZSxcbiAgdG9JbnQ6IHRydWUsXG4gIGluaGVyaXQ6IHRydWUsXG4gIG1lcmdlOiB0cnVlLFxuICBub29wOiB0cnVlLFxuICBpZGVudGl0eTogdHJ1ZSxcbiAgdmFsdWVGbjogdHJ1ZSxcbiAgaXNVbmRlZmluZWQ6IHRydWUsXG4gIGlzRGVmaW5lZDogdHJ1ZSxcbiAgaXNPYmplY3Q6IHRydWUsXG4gIGlzQmxhbmtPYmplY3Q6IHRydWUsXG4gIGlzU3RyaW5nOiB0cnVlLFxuICBpc051bWJlcjogdHJ1ZSxcbiAgaXNEYXRlOiB0cnVlLFxuICBpc0FycmF5OiB0cnVlLFxuICBpc0Z1bmN0aW9uOiB0cnVlLFxuICBpc1JlZ0V4cDogdHJ1ZSxcbiAgaXNXaW5kb3c6IHRydWUsXG4gIGlzU2NvcGU6IHRydWUsXG4gIGlzRmlsZTogdHJ1ZSxcbiAgaXNGb3JtRGF0YTogdHJ1ZSxcbiAgaXNCbG9iOiB0cnVlLFxuICBpc0Jvb2xlYW46IHRydWUsXG4gIGlzUHJvbWlzZUxpa2U6IHRydWUsXG4gIHRyaW06IHRydWUsXG4gIGVzY2FwZUZvclJlZ2V4cDogdHJ1ZSxcbiAgaXNFbGVtZW50OiB0cnVlLFxuICBtYWtlTWFwOiB0cnVlLFxuICBpbmNsdWRlczogdHJ1ZSxcbiAgYXJyYXlSZW1vdmU6IHRydWUsXG4gIGNvcHk6IHRydWUsXG4gIHNoYWxsb3dDb3B5OiB0cnVlLFxuICBlcXVhbHM6IHRydWUsXG4gIGNzcDogdHJ1ZSxcbiAganE6IHRydWUsXG4gIGNvbmNhdDogdHJ1ZSxcbiAgc2xpY2VBcmdzOiB0cnVlLFxuICBiaW5kOiB0cnVlLFxuICB0b0pzb25SZXBsYWNlcjogdHJ1ZSxcbiAgdG9Kc29uOiB0cnVlLFxuICBmcm9tSnNvbjogdHJ1ZSxcbiAgY29udmVydFRpbWV6b25lVG9Mb2NhbDogdHJ1ZSxcbiAgdGltZXpvbmVUb09mZnNldDogdHJ1ZSxcbiAgc3RhcnRpbmdUYWc6IHRydWUsXG4gIHRyeURlY29kZVVSSUNvbXBvbmVudDogdHJ1ZSxcbiAgcGFyc2VLZXlWYWx1ZTogdHJ1ZSxcbiAgdG9LZXlWYWx1ZTogdHJ1ZSxcbiAgZW5jb2RlVXJpU2VnbWVudDogdHJ1ZSxcbiAgZW5jb2RlVXJpUXVlcnk6IHRydWUsXG4gIGFuZ3VsYXJJbml0OiB0cnVlLFxuICBib290c3RyYXA6IHRydWUsXG4gIGdldFRlc3RhYmlsaXR5OiB0cnVlLFxuICBzbmFrZV9jYXNlOiB0cnVlLFxuICBiaW5kSlF1ZXJ5OiB0cnVlLFxuICBhc3NlcnRBcmc6IHRydWUsXG4gIGFzc2VydEFyZ0ZuOiB0cnVlLFxuICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eTogdHJ1ZSxcbiAgZ2V0dGVyOiB0cnVlLFxuICBnZXRCbG9ja05vZGVzOiB0cnVlLFxuICBoYXNPd25Qcm9wZXJ0eTogdHJ1ZSxcbiAgY3JlYXRlTWFwOiB0cnVlLFxuXG4gIE5PREVfVFlQRV9FTEVNRU5UOiB0cnVlLFxuICBOT0RFX1RZUEVfQVRUUklCVVRFOiB0cnVlLFxuICBOT0RFX1RZUEVfVEVYVDogdHJ1ZSxcbiAgTk9ERV9UWVBFX0NPTU1FTlQ6IHRydWUsXG4gIE5PREVfVFlQRV9ET0NVTUVOVDogdHJ1ZSxcbiAgTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UOiB0cnVlLFxuKi9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbmdcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqICMgbmcgKGNvcmUgbW9kdWxlKVxuICogVGhlIG5nIG1vZHVsZSBpcyBsb2FkZWQgYnkgZGVmYXVsdCB3aGVuIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiBpcyBzdGFydGVkLiBUaGUgbW9kdWxlIGl0c2VsZlxuICogY29udGFpbnMgdGhlIGVzc2VudGlhbCBjb21wb25lbnRzIGZvciBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24gdG8gZnVuY3Rpb24uIFRoZSB0YWJsZSBiZWxvd1xuICogbGlzdHMgYSBoaWdoIGxldmVsIGJyZWFrZG93biBvZiBlYWNoIG9mIHRoZSBzZXJ2aWNlcy9mYWN0b3JpZXMsIGZpbHRlcnMsIGRpcmVjdGl2ZXMgYW5kIHRlc3RpbmdcbiAqIGNvbXBvbmVudHMgYXZhaWxhYmxlIHdpdGhpbiB0aGlzIGNvcmUgbW9kdWxlLlxuICpcbiAqIDxkaXYgZG9jLW1vZHVsZS1jb21wb25lbnRzPVwibmdcIj48L2Rpdj5cbiAqL1xuXG52YXIgUkVHRVhfU1RSSU5HX1JFR0VYUCA9IC9eXFwvKC4rKVxcLyhbYS16XSopJC87XG5cbi8vIFRoZSBuYW1lIG9mIGEgZm9ybSBjb250cm9sJ3MgVmFsaWRpdHlTdGF0ZSBwcm9wZXJ0eS5cbi8vIFRoaXMgaXMgdXNlZCBzbyB0aGF0IGl0J3MgcG9zc2libGUgZm9yIGludGVybmFsIHRlc3RzIHRvIGNyZWF0ZSBtb2NrIFZhbGlkaXR5U3RhdGVzLlxudmFyIFZBTElESVRZX1NUQVRFX1BST1BFUlRZID0gJ3ZhbGlkaXR5JztcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIubG93ZXJjYXNlXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHN0cmluZyB0byBsb3dlcmNhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlLlxuICogQHJldHVybnMge3N0cmluZ30gTG93ZXJjYXNlZCBzdHJpbmcuXG4gKi9cbnZhciBsb3dlcmNhc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtyZXR1cm4gaXNTdHJpbmcoc3RyaW5nKSA/IHN0cmluZy50b0xvd2VyQ2FzZSgpIDogc3RyaW5nO307XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci51cHBlcmNhc2VcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgc3RyaW5nIHRvIHVwcGVyY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGJlIGNvbnZlcnRlZCB0byB1cHBlcmNhc2UuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBVcHBlcmNhc2VkIHN0cmluZy5cbiAqL1xudmFyIHVwcGVyY2FzZSA9IGZ1bmN0aW9uKHN0cmluZykge3JldHVybiBpc1N0cmluZyhzdHJpbmcpID8gc3RyaW5nLnRvVXBwZXJDYXNlKCkgOiBzdHJpbmc7fTtcblxuXG52YXIgbWFudWFsTG93ZXJjYXNlID0gZnVuY3Rpb24ocykge1xuICAvKiBqc2hpbnQgYml0d2lzZTogZmFsc2UgKi9cbiAgcmV0dXJuIGlzU3RyaW5nKHMpXG4gICAgICA/IHMucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24oY2gpIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaC5jaGFyQ29kZUF0KDApIHwgMzIpO30pXG4gICAgICA6IHM7XG59O1xudmFyIG1hbnVhbFVwcGVyY2FzZSA9IGZ1bmN0aW9uKHMpIHtcbiAgLyoganNoaW50IGJpdHdpc2U6IGZhbHNlICovXG4gIHJldHVybiBpc1N0cmluZyhzKVxuICAgICAgPyBzLnJlcGxhY2UoL1thLXpdL2csIGZ1bmN0aW9uKGNoKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSAmIH4zMik7fSlcbiAgICAgIDogcztcbn07XG5cblxuLy8gU3RyaW5nI3RvTG93ZXJDYXNlIGFuZCBTdHJpbmcjdG9VcHBlckNhc2UgZG9uJ3QgcHJvZHVjZSBjb3JyZWN0IHJlc3VsdHMgaW4gYnJvd3NlcnMgd2l0aCBUdXJraXNoXG4vLyBsb2NhbGUsIGZvciB0aGlzIHJlYXNvbiB3ZSBuZWVkIHRvIGRldGVjdCB0aGlzIGNhc2UgYW5kIHJlZGVmaW5lIGxvd2VyY2FzZS91cHBlcmNhc2UgbWV0aG9kc1xuLy8gd2l0aCBjb3JyZWN0IGJ1dCBzbG93ZXIgYWx0ZXJuYXRpdmVzLlxuaWYgKCdpJyAhPT0gJ0knLnRvTG93ZXJDYXNlKCkpIHtcbiAgbG93ZXJjYXNlID0gbWFudWFsTG93ZXJjYXNlO1xuICB1cHBlcmNhc2UgPSBtYW51YWxVcHBlcmNhc2U7XG59XG5cblxudmFyXG4gICAgbXNpZSwgICAgICAgICAgICAgLy8gaG9sZHMgbWFqb3IgdmVyc2lvbiBudW1iZXIgZm9yIElFLCBvciBOYU4gaWYgVUEgaXMgbm90IElFLlxuICAgIGpxTGl0ZSwgICAgICAgICAgIC8vIGRlbGF5IGJpbmRpbmcgc2luY2UgalF1ZXJ5IGNvdWxkIGJlIGxvYWRlZCBhZnRlciB1cy5cbiAgICBqUXVlcnksICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nXG4gICAgc2xpY2UgICAgICAgICAgICAgPSBbXS5zbGljZSxcbiAgICBzcGxpY2UgICAgICAgICAgICA9IFtdLnNwbGljZSxcbiAgICBwdXNoICAgICAgICAgICAgICA9IFtdLnB1c2gsXG4gICAgdG9TdHJpbmcgICAgICAgICAgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuICAgIGdldFByb3RvdHlwZU9mICAgID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICAgIG5nTWluRXJyICAgICAgICAgID0gbWluRXJyKCduZycpLFxuXG4gICAgLyoqIEBuYW1lIGFuZ3VsYXIgKi9cbiAgICBhbmd1bGFyICAgICAgICAgICA9IHdpbmRvdy5hbmd1bGFyIHx8ICh3aW5kb3cuYW5ndWxhciA9IHt9KSxcbiAgICBhbmd1bGFyTW9kdWxlLFxuICAgIHVpZCAgICAgICAgICAgICAgID0gMDtcblxuLyoqXG4gKiBkb2N1bWVudE1vZGUgaXMgYW4gSUUtb25seSBwcm9wZXJ0eVxuICogaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2NjMTk2OTg4KHY9dnMuODUpLmFzcHhcbiAqL1xubXNpZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTtcblxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGBvYmpgIGlzIGFuIGFycmF5IG9yIGFycmF5LWxpa2Ugb2JqZWN0IChOb2RlTGlzdCwgQXJndW1lbnRzLFxuICogICAgICAgICAgICAgICAgICAgU3RyaW5nIC4uLilcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2Uob2JqKSB7XG5cbiAgLy8gYG51bGxgLCBgdW5kZWZpbmVkYCBhbmQgYHdpbmRvd2AgYXJlIG5vdCBhcnJheS1saWtlXG4gIGlmIChvYmogPT0gbnVsbCB8fCBpc1dpbmRvdyhvYmopKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gYXJyYXlzLCBzdHJpbmdzIGFuZCBqUXVlcnkvanFMaXRlIG9iamVjdHMgYXJlIGFycmF5IGxpa2VcbiAgLy8gKiBqcUxpdGUgaXMgZWl0aGVyIHRoZSBqUXVlcnkgb3IganFMaXRlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gIC8vICogd2UgaGF2ZSB0byBjaGVjayB0aGUgZXhpc3RhbmNlIG9mIGpxTGl0ZSBmaXJzdCBhcyB0aGlzIG1ldGhvZCBpcyBjYWxsZWRcbiAgLy8gICB2aWEgdGhlIGZvckVhY2ggbWV0aG9kIHdoZW4gY29uc3RydWN0aW5nIHRoZSBqcUxpdGUgb2JqZWN0IGluIHRoZSBmaXJzdCBwbGFjZVxuICBpZiAoaXNBcnJheShvYmopIHx8IGlzU3RyaW5nKG9iaikgfHwgKGpxTGl0ZSAmJiBvYmogaW5zdGFuY2VvZiBqcUxpdGUpKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBTdXBwb3J0OiBpT1MgOC4yIChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcbiAgLy8gXCJsZW5ndGhcIiBpbiBvYmogdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMTE1MDgpXG4gIHZhciBsZW5ndGggPSBcImxlbmd0aFwiIGluIE9iamVjdChvYmopICYmIG9iai5sZW5ndGg7XG5cbiAgLy8gTm9kZUxpc3Qgb2JqZWN0cyAod2l0aCBgaXRlbWAgbWV0aG9kKSBhbmRcbiAgLy8gb3RoZXIgb2JqZWN0cyB3aXRoIHN1aXRhYmxlIGxlbmd0aCBjaGFyYWN0ZXJpc3RpY3MgYXJlIGFycmF5LWxpa2VcbiAgcmV0dXJuIGlzTnVtYmVyKGxlbmd0aCkgJiZcbiAgICAobGVuZ3RoID49IDAgJiYgKChsZW5ndGggLSAxKSBpbiBvYmogfHwgb2JqIGluc3RhbmNlb2YgQXJyYXkpIHx8IHR5cGVvZiBvYmouaXRlbSA9PSAnZnVuY3Rpb24nKTtcblxufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5mb3JFYWNoXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSW52b2tlcyB0aGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBvbmNlIGZvciBlYWNoIGl0ZW0gaW4gYG9iamAgY29sbGVjdGlvbiwgd2hpY2ggY2FuIGJlIGVpdGhlciBhblxuICogb2JqZWN0IG9yIGFuIGFycmF5LiBUaGUgYGl0ZXJhdG9yYCBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggYGl0ZXJhdG9yKHZhbHVlLCBrZXksIG9iailgLCB3aGVyZSBgdmFsdWVgXG4gKiBpcyB0aGUgdmFsdWUgb2YgYW4gb2JqZWN0IHByb3BlcnR5IG9yIGFuIGFycmF5IGVsZW1lbnQsIGBrZXlgIGlzIHRoZSBvYmplY3QgcHJvcGVydHkga2V5IG9yXG4gKiBhcnJheSBlbGVtZW50IGluZGV4IGFuZCBvYmogaXMgdGhlIGBvYmpgIGl0c2VsZi4gU3BlY2lmeWluZyBhIGBjb250ZXh0YCBmb3IgdGhlIGZ1bmN0aW9uIGlzIG9wdGlvbmFsLlxuICpcbiAqIEl0IGlzIHdvcnRoIG5vdGluZyB0aGF0IGAuZm9yRWFjaGAgZG9lcyBub3QgaXRlcmF0ZSBvdmVyIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGJlY2F1c2UgaXQgZmlsdGVyc1xuICogdXNpbmcgdGhlIGBoYXNPd25Qcm9wZXJ0eWAgbWV0aG9kLlxuICpcbiAqIFVubGlrZSBFUzI2MidzXG4gKiBbQXJyYXkucHJvdG90eXBlLmZvckVhY2hdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS40LjQuMTgpLFxuICogUHJvdmlkaW5nICd1bmRlZmluZWQnIG9yICdudWxsJyB2YWx1ZXMgZm9yIGBvYmpgIHdpbGwgbm90IHRocm93IGEgVHlwZUVycm9yLCBidXQgcmF0aGVyIGp1c3RcbiAqIHJldHVybiB0aGUgdmFsdWUgcHJvdmlkZWQuXG4gKlxuICAgYGBganNcbiAgICAgdmFyIHZhbHVlcyA9IHtuYW1lOiAnbWlza28nLCBnZW5kZXI6ICdtYWxlJ307XG4gICAgIHZhciBsb2cgPSBbXTtcbiAgICAgYW5ndWxhci5mb3JFYWNoKHZhbHVlcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgIHRoaXMucHVzaChrZXkgKyAnOiAnICsgdmFsdWUpO1xuICAgICB9LCBsb2cpO1xuICAgICBleHBlY3QobG9nKS50b0VxdWFsKFsnbmFtZTogbWlza28nLCAnZ2VuZGVyOiBtYWxlJ10pO1xuICAgYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBPYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0b3IgSXRlcmF0b3IgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbnRleHQgT2JqZWN0IHRvIGJlY29tZSBjb250ZXh0IChgdGhpc2ApIGZvciB0aGUgaXRlcmF0b3IgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fEFycmF5fSBSZWZlcmVuY2UgdG8gYG9iamAuXG4gKi9cblxuZnVuY3Rpb24gZm9yRWFjaChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gIHZhciBrZXksIGxlbmd0aDtcbiAgaWYgKG9iaikge1xuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikpIHtcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICAvLyBOZWVkIHRvIGNoZWNrIGlmIGhhc093blByb3BlcnR5IGV4aXN0cyxcbiAgICAgICAgLy8gYXMgb24gSUU4IHRoZSByZXN1bHQgb2YgcXVlcnlTZWxlY3RvckFsbCBpcyBhbiBvYmplY3Qgd2l0aG91dCBhIGhhc093blByb3BlcnR5IGZ1bmN0aW9uXG4gICAgICAgIGlmIChrZXkgIT0gJ3Byb3RvdHlwZScgJiYga2V5ICE9ICdsZW5ndGgnICYmIGtleSAhPSAnbmFtZScgJiYgKCFvYmouaGFzT3duUHJvcGVydHkgfHwgb2JqLmhhc093blByb3BlcnR5KGtleSkpKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikgfHwgaXNBcnJheUxpa2Uob2JqKSkge1xuICAgICAgdmFyIGlzUHJpbWl0aXZlID0gdHlwZW9mIG9iaiAhPT0gJ29iamVjdCc7XG4gICAgICBmb3IgKGtleSA9IDAsIGxlbmd0aCA9IG9iai5sZW5ndGg7IGtleSA8IGxlbmd0aDsga2V5KyspIHtcbiAgICAgICAgaWYgKGlzUHJpbWl0aXZlIHx8IGtleSBpbiBvYmopIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9iai5mb3JFYWNoICYmIG9iai5mb3JFYWNoICE9PSBmb3JFYWNoKSB7XG4gICAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0LCBvYmopO1xuICAgIH0gZWxzZSBpZiAoaXNCbGFua09iamVjdChvYmopKSB7XG4gICAgICAvLyBjcmVhdGVNYXAoKSBmYXN0IHBhdGggLS0tIFNhZmUgdG8gYXZvaWQgaGFzT3duUHJvcGVydHkgY2hlY2sgYmVjYXVzZSBwcm90b3R5cGUgY2hhaW4gaXMgZW1wdHlcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqLmhhc093blByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBTbG93IHBhdGggZm9yIG9iamVjdHMgaW5oZXJpdGluZyBPYmplY3QucHJvdG90eXBlLCBoYXNPd25Qcm9wZXJ0eSBjaGVjayBuZWVkZWRcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2xvdyBwYXRoIGZvciBvYmplY3RzIHdoaWNoIGRvIG5vdCBoYXZlIGEgbWV0aG9kIGBoYXNPd25Qcm9wZXJ0eWBcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFNvcnRlZChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKS5zb3J0KCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleXNbaV1dLCBrZXlzW2ldKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cblxuXG4vKipcbiAqIHdoZW4gdXNpbmcgZm9yRWFjaCB0aGUgcGFyYW1zIGFyZSB2YWx1ZSwga2V5LCBidXQgaXQgaXMgb2Z0ZW4gdXNlZnVsIHRvIGhhdmUga2V5LCB2YWx1ZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCAqKX0gaXRlcmF0b3JGblxuICogQHJldHVybnMge2Z1bmN0aW9uKCosIHN0cmluZyl9XG4gKi9cbmZ1bmN0aW9uIHJldmVyc2VQYXJhbXMoaXRlcmF0b3JGbikge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGtleSkgeyBpdGVyYXRvckZuKGtleSwgdmFsdWUpOyB9O1xufVxuXG4vKipcbiAqIEEgY29uc2lzdGVudCB3YXkgb2YgY3JlYXRpbmcgdW5pcXVlIElEcyBpbiBhbmd1bGFyLlxuICpcbiAqIFVzaW5nIHNpbXBsZSBudW1iZXJzIGFsbG93cyB1cyB0byBnZW5lcmF0ZSAyOC42IG1pbGxpb24gdW5pcXVlIGlkcyBwZXIgc2Vjb25kIGZvciAxMCB5ZWFycyBiZWZvcmVcbiAqIHdlIGhpdCBudW1iZXIgcHJlY2lzaW9uIGlzc3VlcyBpbiBKYXZhU2NyaXB0LlxuICpcbiAqIE1hdGgucG93KDIsNTMpIC8gNjAgLyA2MCAvIDI0IC8gMzY1IC8gMTAgPSAyOC42TVxuICpcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFuIHVuaXF1ZSBhbHBoYS1udW1lcmljIHN0cmluZ1xuICovXG5mdW5jdGlvbiBuZXh0VWlkKCkge1xuICByZXR1cm4gKyt1aWQ7XG59XG5cblxuLyoqXG4gKiBTZXQgb3IgY2xlYXIgdGhlIGhhc2hrZXkgZm9yIGFuIG9iamVjdC5cbiAqIEBwYXJhbSBvYmogb2JqZWN0XG4gKiBAcGFyYW0gaCB0aGUgaGFzaGtleSAoIXRydXRoeSB0byBkZWxldGUgdGhlIGhhc2hrZXkpXG4gKi9cbmZ1bmN0aW9uIHNldEhhc2hLZXkob2JqLCBoKSB7XG4gIGlmIChoKSB7XG4gICAgb2JqLiQkaGFzaEtleSA9IGg7XG4gIH0gZWxzZSB7XG4gICAgZGVsZXRlIG9iai4kJGhhc2hLZXk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBiYXNlRXh0ZW5kKGRzdCwgb2JqcywgZGVlcCkge1xuICB2YXIgaCA9IGRzdC4kJGhhc2hLZXk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGlpID0gb2Jqcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgdmFyIG9iaiA9IG9ianNbaV07XG4gICAgaWYgKCFpc09iamVjdChvYmopICYmICFpc0Z1bmN0aW9uKG9iaikpIGNvbnRpbnVlO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKHZhciBqID0gMCwgamogPSBrZXlzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2pdO1xuICAgICAgdmFyIHNyYyA9IG9ialtrZXldO1xuXG4gICAgICBpZiAoZGVlcCAmJiBpc09iamVjdChzcmMpKSB7XG4gICAgICAgIGlmIChpc0RhdGUoc3JjKSkge1xuICAgICAgICAgIGRzdFtrZXldID0gbmV3IERhdGUoc3JjLnZhbHVlT2YoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAoc3JjKSkge1xuICAgICAgICAgIGRzdFtrZXldID0gbmV3IFJlZ0V4cChzcmMpO1xuICAgICAgICB9IGVsc2UgaWYgKHNyYy5ub2RlTmFtZSkge1xuICAgICAgICAgIGRzdFtrZXldID0gc3JjLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnQoc3JjKSkge1xuICAgICAgICAgIGRzdFtrZXldID0gc3JjLmNsb25lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFpc09iamVjdChkc3Rba2V5XSkpIGRzdFtrZXldID0gaXNBcnJheShzcmMpID8gW10gOiB7fTtcbiAgICAgICAgICBiYXNlRXh0ZW5kKGRzdFtrZXldLCBbc3JjXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldEhhc2hLZXkoZHN0LCBoKTtcbiAgcmV0dXJuIGRzdDtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZXh0ZW5kXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRXh0ZW5kcyB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGBkc3RgIGJ5IGNvcHlpbmcgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBmcm9tIHRoZSBgc3JjYCBvYmplY3QocylcbiAqIHRvIGBkc3RgLiBZb3UgY2FuIHNwZWNpZnkgbXVsdGlwbGUgYHNyY2Agb2JqZWN0cy4gSWYgeW91IHdhbnQgdG8gcHJlc2VydmUgb3JpZ2luYWwgb2JqZWN0cywgeW91IGNhbiBkbyBzb1xuICogYnkgcGFzc2luZyBhbiBlbXB0eSBvYmplY3QgYXMgdGhlIHRhcmdldDogYHZhciBvYmplY3QgPSBhbmd1bGFyLmV4dGVuZCh7fSwgb2JqZWN0MSwgb2JqZWN0MilgLlxuICpcbiAqICoqTm90ZToqKiBLZWVwIGluIG1pbmQgdGhhdCBgYW5ndWxhci5leHRlbmRgIGRvZXMgbm90IHN1cHBvcnQgcmVjdXJzaXZlIG1lcmdlIChkZWVwIGNvcHkpLiBVc2VcbiAqIHtAbGluayBhbmd1bGFyLm1lcmdlfSBmb3IgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZHN0IERlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzcmMgU291cmNlIG9iamVjdChzKS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlZmVyZW5jZSB0byBgZHN0YC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGRzdCkge1xuICByZXR1cm4gYmFzZUV4dGVuZChkc3QsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZmFsc2UpO1xufVxuXG5cbi8qKlxuKiBAbmdkb2MgZnVuY3Rpb25cbiogQG5hbWUgYW5ndWxhci5tZXJnZVxuKiBAbW9kdWxlIG5nXG4qIEBraW5kIGZ1bmN0aW9uXG4qXG4qIEBkZXNjcmlwdGlvblxuKiBEZWVwbHkgZXh0ZW5kcyB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGBkc3RgIGJ5IGNvcHlpbmcgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBmcm9tIHRoZSBgc3JjYCBvYmplY3QocylcbiogdG8gYGRzdGAuIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBgc3JjYCBvYmplY3RzLiBJZiB5b3Ugd2FudCB0byBwcmVzZXJ2ZSBvcmlnaW5hbCBvYmplY3RzLCB5b3UgY2FuIGRvIHNvXG4qIGJ5IHBhc3NpbmcgYW4gZW1wdHkgb2JqZWN0IGFzIHRoZSB0YXJnZXQ6IGB2YXIgb2JqZWN0ID0gYW5ndWxhci5tZXJnZSh7fSwgb2JqZWN0MSwgb2JqZWN0MilgLlxuKlxuKiBVbmxpa2Uge0BsaW5rIGFuZ3VsYXIuZXh0ZW5kIGV4dGVuZCgpfSwgYG1lcmdlKClgIHJlY3Vyc2l2ZWx5IGRlc2NlbmRzIGludG8gb2JqZWN0IHByb3BlcnRpZXMgb2Ygc291cmNlXG4qIG9iamVjdHMsIHBlcmZvcm1pbmcgYSBkZWVwIGNvcHkuXG4qXG4qIEBwYXJhbSB7T2JqZWN0fSBkc3QgRGVzdGluYXRpb24gb2JqZWN0LlxuKiBAcGFyYW0gey4uLk9iamVjdH0gc3JjIFNvdXJjZSBvYmplY3QocykuXG4qIEByZXR1cm5zIHtPYmplY3R9IFJlZmVyZW5jZSB0byBgZHN0YC5cbiovXG5mdW5jdGlvbiBtZXJnZShkc3QpIHtcbiAgcmV0dXJuIGJhc2VFeHRlbmQoZHN0LCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIHRydWUpO1xufVxuXG5cblxuZnVuY3Rpb24gdG9JbnQoc3RyKSB7XG4gIHJldHVybiBwYXJzZUludChzdHIsIDEwKTtcbn1cblxuXG5mdW5jdGlvbiBpbmhlcml0KHBhcmVudCwgZXh0cmEpIHtcbiAgcmV0dXJuIGV4dGVuZChPYmplY3QuY3JlYXRlKHBhcmVudCksIGV4dHJhKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIubm9vcFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBubyBvcGVyYXRpb25zLiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlXG4gKiBmdW5jdGlvbmFsIHN0eWxlLlxuICAgYGBganNcbiAgICAgZnVuY3Rpb24gZm9vKGNhbGxiYWNrKSB7XG4gICAgICAgdmFyIHJlc3VsdCA9IGNhbGN1bGF0ZVJlc3VsdCgpO1xuICAgICAgIChjYWxsYmFjayB8fCBhbmd1bGFyLm5vb3ApKHJlc3VsdCk7XG4gICAgIH1cbiAgIGBgYFxuICovXG5mdW5jdGlvbiBub29wKCkge31cbm5vb3AuJGluamVjdCA9IFtdO1xuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlkZW50aXR5XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXRzIGZpcnN0IGFyZ3VtZW50LiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY29kZSBpbiB0aGVcbiAqIGZ1bmN0aW9uYWwgc3R5bGUuXG4gKlxuICAgYGBganNcbiAgICAgZnVuY3Rpb24gdHJhbnNmb3JtZXIodHJhbnNmb3JtYXRpb25GbiwgdmFsdWUpIHtcbiAgICAgICByZXR1cm4gKHRyYW5zZm9ybWF0aW9uRm4gfHwgYW5ndWxhci5pZGVudGl0eSkodmFsdWUpO1xuICAgICB9O1xuICAgYGBgXG4gICogQHBhcmFtIHsqfSB2YWx1ZSB0byBiZSByZXR1cm5lZC5cbiAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHBhc3NlZCBpbi5cbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkoJCkge3JldHVybiAkO31cbmlkZW50aXR5LiRpbmplY3QgPSBbXTtcblxuXG5mdW5jdGlvbiB2YWx1ZUZuKHZhbHVlKSB7cmV0dXJuIGZ1bmN0aW9uKCkge3JldHVybiB2YWx1ZTt9O31cblxuZnVuY3Rpb24gaGFzQ3VzdG9tVG9TdHJpbmcob2JqKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKG9iai50b1N0cmluZykgJiYgb2JqLnRvU3RyaW5nICE9PSB0b1N0cmluZztcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc1VuZGVmaW5lZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgdW5kZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRGVmaW5lZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gaXNEZWZpbmVkKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzT2JqZWN0XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhbiBgT2JqZWN0YC4gVW5saWtlIGB0eXBlb2ZgIGluIEphdmFTY3JpcHQsIGBudWxsYHMgYXJlIG5vdFxuICogY29uc2lkZXJlZCB0byBiZSBvYmplY3RzLiBOb3RlIHRoYXQgSmF2YVNjcmlwdCBhcnJheXMgYXJlIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBPYmplY3RgIGJ1dCBub3QgYG51bGxgLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAvLyBodHRwOi8vanNwZXJmLmNvbS9pc29iamVjdDRcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhIG51bGwgcHJvdG90eXBlXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgT2JqZWN0YCB3aXRoIGEgbnVsbCBwcm90b3R5cGVcbiAqL1xuZnVuY3Rpb24gaXNCbGFua09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzU3RyaW5nXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBTdHJpbmdgLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBTdHJpbmdgLlxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO31cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc051bWJlclxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgTnVtYmVyYC5cbiAqXG4gKiBUaGlzIGluY2x1ZGVzIHRoZSBcInNwZWNpYWxcIiBudW1iZXJzIGBOYU5gLCBgK0luZmluaXR5YCBhbmQgYC1JbmZpbml0eWAuXG4gKlxuICogSWYgeW91IHdpc2ggdG8gZXhjbHVkZSB0aGVzZSB0aGVuIHlvdSBjYW4gdXNlIHRoZSBuYXRpdmVcbiAqIFtgaXNGaW5pdGUnXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9pc0Zpbml0ZSlcbiAqIG1ldGhvZC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgTnVtYmVyYC5cbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNEYXRlXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgZGF0ZS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRGF0ZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0FycmF5XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhbiBgQXJyYXlgLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgQXJyYXlgLlxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRnVuY3Rpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYEZ1bmN0aW9uYC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRnVuY3Rpb25gLlxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJzt9XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgUmVnRXhwYC5cbiAqL1xuZnVuY3Rpb24gaXNSZWdFeHAodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxuXG4vKipcbiAqIENoZWNrcyBpZiBgb2JqYCBpcyBhIHdpbmRvdyBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gb2JqIE9iamVjdCB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqLlxuICovXG5mdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmoud2luZG93ID09PSBvYmo7XG59XG5cblxuZnVuY3Rpb24gaXNTY29wZShvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouJGV2YWxBc3luYyAmJiBvYmouJHdhdGNoO1xufVxuXG5cbmZ1bmN0aW9uIGlzRmlsZShvYmopIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG5cbmZ1bmN0aW9uIGlzRm9ybURhdGEob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG59XG5cblxuZnVuY3Rpb24gaXNCbG9iKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cblxuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cblxuXG5mdW5jdGlvbiBpc1Byb21pc2VMaWtlKG9iaikge1xuICByZXR1cm4gb2JqICYmIGlzRnVuY3Rpb24ob2JqLnRoZW4pO1xufVxuXG5cbnZhciBUWVBFRF9BUlJBWV9SRUdFWFAgPSAvXlxcW29iamVjdCAoPzpVaW50OHxVaW50OENsYW1wZWR8VWludDE2fFVpbnQzMnxJbnQ4fEludDE2fEludDMyfEZsb2F0MzJ8RmxvYXQ2NClBcnJheVxcXSQvO1xuZnVuY3Rpb24gaXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiBpc051bWJlcih2YWx1ZS5sZW5ndGgpICYmIFRZUEVEX0FSUkFZX1JFR0VYUC50ZXN0KHRvU3RyaW5nLmNhbGwodmFsdWUpKTtcbn1cblxuXG52YXIgdHJpbSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn07XG5cbi8vIENvcGllZCBmcm9tOlxuLy8gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9sb2NhbF9jbG9zdXJlX2dvb2dfc3RyaW5nX3N0cmluZy5qcy5zb3VyY2UuaHRtbCNsaW5lMTAyMVxuLy8gUHJlcmVxOiBzIGlzIGEgc3RyaW5nLlxudmFyIGVzY2FwZUZvclJlZ2V4cCA9IGZ1bmN0aW9uKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZSgvKFstKClcXFtcXF17fSs/Ki4kXFxefCw6IzwhXFxcXF0pL2csICdcXFxcJDEnKS5cbiAgICAgICAgICAgcmVwbGFjZSgvXFx4MDgvZywgJ1xcXFx4MDgnKTtcbn07XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNFbGVtZW50XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIERPTSBlbGVtZW50IChvciB3cmFwcGVkIGpRdWVyeSBlbGVtZW50KS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCAob3Igd3JhcHBlZCBqUXVlcnkgZWxlbWVudCkuXG4gKi9cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIHJldHVybiAhIShub2RlICYmXG4gICAgKG5vZGUubm9kZU5hbWUgIC8vIHdlIGFyZSBhIGRpcmVjdCBlbGVtZW50XG4gICAgfHwgKG5vZGUucHJvcCAmJiBub2RlLmF0dHIgJiYgbm9kZS5maW5kKSkpOyAgLy8gd2UgaGF2ZSBhbiBvbiBhbmQgZmluZCBtZXRob2QgcGFydCBvZiBqUXVlcnkgQVBJXG59XG5cbi8qKlxuICogQHBhcmFtIHN0ciAna2V5MSxrZXkyLC4uLidcbiAqIEByZXR1cm5zIHtvYmplY3R9IGluIHRoZSBmb3JtIG9mIHtrZXkxOnRydWUsIGtleTI6dHJ1ZSwgLi4ufVxuICovXG5mdW5jdGlvbiBtYWtlTWFwKHN0cikge1xuICB2YXIgb2JqID0ge30sIGl0ZW1zID0gc3RyLnNwbGl0KFwiLFwiKSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgb2JqW2l0ZW1zW2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuXG5mdW5jdGlvbiBub2RlTmFtZV8oZWxlbWVudCkge1xuICByZXR1cm4gbG93ZXJjYXNlKGVsZW1lbnQubm9kZU5hbWUgfHwgKGVsZW1lbnRbMF0gJiYgZWxlbWVudFswXS5ub2RlTmFtZSkpO1xufVxuXG5mdW5jdGlvbiBpbmNsdWRlcyhhcnJheSwgb2JqKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGFycmF5LCBvYmopICE9IC0xO1xufVxuXG5mdW5jdGlvbiBhcnJheVJlbW92ZShhcnJheSwgdmFsdWUpIHtcbiAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZih2YWx1ZSk7XG4gIGlmIChpbmRleCA+PSAwKSB7XG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICByZXR1cm4gaW5kZXg7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmNvcHlcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIGBzb3VyY2VgLCB3aGljaCBzaG91bGQgYmUgYW4gb2JqZWN0IG9yIGFuIGFycmF5LlxuICpcbiAqICogSWYgbm8gZGVzdGluYXRpb24gaXMgc3VwcGxpZWQsIGEgY29weSBvZiB0aGUgb2JqZWN0IG9yIGFycmF5IGlzIGNyZWF0ZWQuXG4gKiAqIElmIGEgZGVzdGluYXRpb24gaXMgcHJvdmlkZWQsIGFsbCBvZiBpdHMgZWxlbWVudHMgKGZvciBhcnJheXMpIG9yIHByb3BlcnRpZXMgKGZvciBvYmplY3RzKVxuICogICBhcmUgZGVsZXRlZCBhbmQgdGhlbiBhbGwgZWxlbWVudHMvcHJvcGVydGllcyBmcm9tIHRoZSBzb3VyY2UgYXJlIGNvcGllZCB0byBpdC5cbiAqICogSWYgYHNvdXJjZWAgaXMgbm90IGFuIG9iamVjdCBvciBhcnJheSAoaW5jLiBgbnVsbGAgYW5kIGB1bmRlZmluZWRgKSwgYHNvdXJjZWAgaXMgcmV0dXJuZWQuXG4gKiAqIElmIGBzb3VyY2VgIGlzIGlkZW50aWNhbCB0byAnZGVzdGluYXRpb24nIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi5cbiAqXG4gKiBAcGFyYW0geyp9IHNvdXJjZSBUaGUgc291cmNlIHRoYXQgd2lsbCBiZSB1c2VkIHRvIG1ha2UgYSBjb3B5LlxuICogICAgICAgICAgICAgICAgICAgQ2FuIGJlIGFueSB0eXBlLCBpbmNsdWRpbmcgcHJpbWl0aXZlcywgYG51bGxgLCBhbmQgYHVuZGVmaW5lZGAuXG4gKiBAcGFyYW0geyhPYmplY3R8QXJyYXkpPX0gZGVzdGluYXRpb24gRGVzdGluYXRpb24gaW50byB3aGljaCB0aGUgc291cmNlIGlzIGNvcGllZC4gSWZcbiAqICAgICBwcm92aWRlZCwgbXVzdCBiZSBvZiB0aGUgc2FtZSB0eXBlIGFzIGBzb3VyY2VgLlxuICogQHJldHVybnMgeyp9IFRoZSBjb3B5IG9yIHVwZGF0ZWQgYGRlc3RpbmF0aW9uYCwgaWYgYGRlc3RpbmF0aW9uYCB3YXMgc3BlY2lmaWVkLlxuICpcbiAqIEBleGFtcGxlXG4gPGV4YW1wbGUgbW9kdWxlPVwiY29weUV4YW1wbGVcIj5cbiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gPGZvcm0gbm92YWxpZGF0ZSBjbGFzcz1cInNpbXBsZS1mb3JtXCI+XG4gTmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIiAvPjxiciAvPlxuIEUtbWFpbDogPGlucHV0IHR5cGU9XCJlbWFpbFwiIG5nLW1vZGVsPVwidXNlci5lbWFpbFwiIC8+PGJyIC8+XG4gR2VuZGVyOiA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJ1c2VyLmdlbmRlclwiIHZhbHVlPVwibWFsZVwiIC8+bWFsZVxuIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cInVzZXIuZ2VuZGVyXCIgdmFsdWU9XCJmZW1hbGVcIiAvPmZlbWFsZTxiciAvPlxuIDxidXR0b24gbmctY2xpY2s9XCJyZXNldCgpXCI+UkVTRVQ8L2J1dHRvbj5cbiA8YnV0dG9uIG5nLWNsaWNrPVwidXBkYXRlKHVzZXIpXCI+U0FWRTwvYnV0dG9uPlxuIDwvZm9ybT5cbiA8cHJlPmZvcm0gPSB7e3VzZXIgfCBqc29ufX08L3ByZT5cbiA8cHJlPm1hc3RlciA9IHt7bWFzdGVyIHwganNvbn19PC9wcmU+XG4gPC9kaXY+XG5cbiA8c2NyaXB0PlxuICBhbmd1bGFyLm1vZHVsZSgnY29weUV4YW1wbGUnLCBbXSlcbiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgJHNjb3BlLm1hc3Rlcj0ge307XG5cbiAgICAgICRzY29wZS51cGRhdGUgPSBmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgIC8vIEV4YW1wbGUgd2l0aCAxIGFyZ3VtZW50XG4gICAgICAgICRzY29wZS5tYXN0ZXI9IGFuZ3VsYXIuY29weSh1c2VyKTtcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBFeGFtcGxlIHdpdGggMiBhcmd1bWVudHNcbiAgICAgICAgYW5ndWxhci5jb3B5KCRzY29wZS5tYXN0ZXIsICRzY29wZS51c2VyKTtcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS5yZXNldCgpO1xuICAgIH1dKTtcbiA8L3NjcmlwdD5cbiA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiBjb3B5KHNvdXJjZSwgZGVzdGluYXRpb24pIHtcbiAgdmFyIHN0YWNrU291cmNlID0gW107XG4gIHZhciBzdGFja0Rlc3QgPSBbXTtcblxuICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICBpZiAoaXNUeXBlZEFycmF5KGRlc3RpbmF0aW9uKSkge1xuICAgICAgdGhyb3cgbmdNaW5FcnIoJ2NwdGEnLCBcIkNhbid0IGNvcHkhIFR5cGVkQXJyYXkgZGVzdGluYXRpb24gY2Fubm90IGJlIG11dGF0ZWQuXCIpO1xuICAgIH1cbiAgICBpZiAoc291cmNlID09PSBkZXN0aW5hdGlvbikge1xuICAgICAgdGhyb3cgbmdNaW5FcnIoJ2NwaScsIFwiQ2FuJ3QgY29weSEgU291cmNlIGFuZCBkZXN0aW5hdGlvbiBhcmUgaWRlbnRpY2FsLlwiKTtcbiAgICB9XG5cbiAgICAvLyBFbXB0eSB0aGUgZGVzdGluYXRpb24gb2JqZWN0XG4gICAgaWYgKGlzQXJyYXkoZGVzdGluYXRpb24pKSB7XG4gICAgICBkZXN0aW5hdGlvbi5sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JFYWNoKGRlc3RpbmF0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChrZXkgIT09ICckJGhhc2hLZXknKSB7XG4gICAgICAgICAgZGVsZXRlIGRlc3RpbmF0aW9uW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YWNrU291cmNlLnB1c2goc291cmNlKTtcbiAgICBzdGFja0Rlc3QucHVzaChkZXN0aW5hdGlvbik7XG4gICAgcmV0dXJuIGNvcHlSZWN1cnNlKHNvdXJjZSwgZGVzdGluYXRpb24pO1xuICB9XG5cbiAgcmV0dXJuIGNvcHlFbGVtZW50KHNvdXJjZSk7XG5cbiAgZnVuY3Rpb24gY29weVJlY3Vyc2Uoc291cmNlLCBkZXN0aW5hdGlvbikge1xuICAgIHZhciBoID0gZGVzdGluYXRpb24uJCRoYXNoS2V5O1xuICAgIHZhciByZXN1bHQsIGtleTtcbiAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBzb3VyY2UubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBkZXN0aW5hdGlvbi5wdXNoKGNvcHlFbGVtZW50KHNvdXJjZVtpXSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNCbGFua09iamVjdChzb3VyY2UpKSB7XG4gICAgICAvLyBjcmVhdGVNYXAoKSBmYXN0IHBhdGggLS0tIFNhZmUgdG8gYXZvaWQgaGFzT3duUHJvcGVydHkgY2hlY2sgYmVjYXVzZSBwcm90b3R5cGUgY2hhaW4gaXMgZW1wdHlcbiAgICAgIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weUVsZW1lbnQoc291cmNlW2tleV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc291cmNlICYmIHR5cGVvZiBzb3VyY2UuaGFzT3duUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFNsb3cgcGF0aCwgd2hpY2ggbXVzdCByZWx5IG9uIGhhc093blByb3BlcnR5XG4gICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNvcHlFbGVtZW50KHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTbG93ZXN0IHBhdGggLS0tIGhhc093blByb3BlcnR5IGNhbid0IGJlIGNhbGxlZCBhcyBhIG1ldGhvZFxuICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjb3B5RWxlbWVudChzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc2V0SGFzaEtleShkZXN0aW5hdGlvbiwgaCk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gY29weUVsZW1lbnQoc291cmNlKSB7XG4gICAgLy8gU2ltcGxlIHZhbHVlc1xuICAgIGlmICghaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9XG5cbiAgICAvLyBBbHJlYWR5IGNvcGllZCB2YWx1ZXNcbiAgICB2YXIgaW5kZXggPSBzdGFja1NvdXJjZS5pbmRleE9mKHNvdXJjZSk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHN0YWNrRGVzdFtpbmRleF07XG4gICAgfVxuXG4gICAgaWYgKGlzV2luZG93KHNvdXJjZSkgfHwgaXNTY29wZShzb3VyY2UpKSB7XG4gICAgICB0aHJvdyBuZ01pbkVycignY3B3cycsXG4gICAgICAgIFwiQ2FuJ3QgY29weSEgTWFraW5nIGNvcGllcyBvZiBXaW5kb3cgb3IgU2NvcGUgaW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQuXCIpO1xuICAgIH1cblxuICAgIHZhciBuZWVkc1JlY3Vyc2UgPSBmYWxzZTtcbiAgICB2YXIgZGVzdGluYXRpb247XG5cbiAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICBkZXN0aW5hdGlvbiA9IFtdO1xuICAgICAgbmVlZHNSZWN1cnNlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGlzVHlwZWRBcnJheShzb3VyY2UpKSB7XG4gICAgICBkZXN0aW5hdGlvbiA9IG5ldyBzb3VyY2UuY29uc3RydWN0b3Ioc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKGlzRGF0ZShzb3VyY2UpKSB7XG4gICAgICBkZXN0aW5hdGlvbiA9IG5ldyBEYXRlKHNvdXJjZS5nZXRUaW1lKCkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAoc291cmNlKSkge1xuICAgICAgZGVzdGluYXRpb24gPSBuZXcgUmVnRXhwKHNvdXJjZS5zb3VyY2UsIHNvdXJjZS50b1N0cmluZygpLm1hdGNoKC9bXlxcL10qJC8pWzBdKTtcbiAgICAgIGRlc3RpbmF0aW9uLmxhc3RJbmRleCA9IHNvdXJjZS5sYXN0SW5kZXg7XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHNvdXJjZS5jbG9uZU5vZGUpKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uID0gc291cmNlLmNsb25lTm9kZSh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVzdGluYXRpb24gPSBPYmplY3QuY3JlYXRlKGdldFByb3RvdHlwZU9mKHNvdXJjZSkpO1xuICAgICAgbmVlZHNSZWN1cnNlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzdGFja1NvdXJjZS5wdXNoKHNvdXJjZSk7XG4gICAgc3RhY2tEZXN0LnB1c2goZGVzdGluYXRpb24pO1xuXG4gICAgcmV0dXJuIG5lZWRzUmVjdXJzZVxuICAgICAgPyBjb3B5UmVjdXJzZShzb3VyY2UsIGRlc3RpbmF0aW9uKVxuICAgICAgOiBkZXN0aW5hdGlvbjtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzaGFsbG93IGNvcHkgb2YgYW4gb2JqZWN0LCBhbiBhcnJheSBvciBhIHByaW1pdGl2ZS5cbiAqXG4gKiBBc3N1bWVzIHRoYXQgdGhlcmUgYXJlIG5vIHByb3RvIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dDb3B5KHNyYywgZHN0KSB7XG4gIGlmIChpc0FycmF5KHNyYykpIHtcbiAgICBkc3QgPSBkc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBzcmMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgZHN0W2ldID0gc3JjW2ldO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChzcmMpKSB7XG4gICAgZHN0ID0gZHN0IHx8IHt9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgICAgaWYgKCEoa2V5LmNoYXJBdCgwKSA9PT0gJyQnICYmIGtleS5jaGFyQXQoMSkgPT09ICckJykpIHtcbiAgICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZHN0IHx8IHNyYztcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5lcXVhbHNcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIHR3byBvYmplY3RzIG9yIHR3byB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQuIFN1cHBvcnRzIHZhbHVlIHR5cGVzLCByZWd1bGFyXG4gKiBleHByZXNzaW9ucywgYXJyYXlzIGFuZCBvYmplY3RzLlxuICpcbiAqIFR3byBvYmplY3RzIG9yIHZhbHVlcyBhcmUgY29uc2lkZXJlZCBlcXVpdmFsZW50IGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm9sbG93aW5nIGlzIHRydWU6XG4gKlxuICogKiBCb3RoIG9iamVjdHMgb3IgdmFsdWVzIHBhc3MgYD09PWAgY29tcGFyaXNvbi5cbiAqICogQm90aCBvYmplY3RzIG9yIHZhbHVlcyBhcmUgb2YgdGhlIHNhbWUgdHlwZSBhbmQgYWxsIG9mIHRoZWlyIHByb3BlcnRpZXMgYXJlIGVxdWFsIGJ5XG4gKiAgIGNvbXBhcmluZyB0aGVtIHdpdGggYGFuZ3VsYXIuZXF1YWxzYC5cbiAqICogQm90aCB2YWx1ZXMgYXJlIE5hTi4gKEluIEphdmFTY3JpcHQsIE5hTiA9PSBOYU4gPT4gZmFsc2UuIEJ1dCB3ZSBjb25zaWRlciB0d28gTmFOIGFzIGVxdWFsKVxuICogKiBCb3RoIHZhbHVlcyByZXByZXNlbnQgdGhlIHNhbWUgcmVndWxhciBleHByZXNzaW9uIChJbiBKYXZhU2NyaXB0LFxuICogICAvYWJjLyA9PSAvYWJjLyA9PiBmYWxzZS4gQnV0IHdlIGNvbnNpZGVyIHR3byByZWd1bGFyIGV4cHJlc3Npb25zIGFzIGVxdWFsIHdoZW4gdGhlaXIgdGV4dHVhbFxuICogICByZXByZXNlbnRhdGlvbiBtYXRjaGVzKS5cbiAqXG4gKiBEdXJpbmcgYSBwcm9wZXJ0eSBjb21wYXJpc29uLCBwcm9wZXJ0aWVzIG9mIGBmdW5jdGlvbmAgdHlwZSBhbmQgcHJvcGVydGllcyB3aXRoIG5hbWVzXG4gKiB0aGF0IGJlZ2luIHdpdGggYCRgIGFyZSBpZ25vcmVkLlxuICpcbiAqIFNjb3BlIGFuZCBET01XaW5kb3cgb2JqZWN0cyBhcmUgYmVpbmcgY29tcGFyZWQgb25seSBieSBpZGVudGlmeSAoYD09PWApLlxuICpcbiAqIEBwYXJhbSB7Kn0gbzEgT2JqZWN0IG9yIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG8yIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYXJndW1lbnRzIGFyZSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxzKG8xLCBvMikge1xuICBpZiAobzEgPT09IG8yKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKG8xID09PSBudWxsIHx8IG8yID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChvMSAhPT0gbzEgJiYgbzIgIT09IG8yKSByZXR1cm4gdHJ1ZTsgLy8gTmFOID09PSBOYU5cbiAgdmFyIHQxID0gdHlwZW9mIG8xLCB0MiA9IHR5cGVvZiBvMiwgbGVuZ3RoLCBrZXksIGtleVNldDtcbiAgaWYgKHQxID09IHQyKSB7XG4gICAgaWYgKHQxID09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoaXNBcnJheShvMSkpIHtcbiAgICAgICAgaWYgKCFpc0FycmF5KG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoKGxlbmd0aCA9IG8xLmxlbmd0aCkgPT0gbzIubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yIChrZXkgPSAwOyBrZXkgPCBsZW5ndGg7IGtleSsrKSB7XG4gICAgICAgICAgICBpZiAoIWVxdWFscyhvMVtrZXldLCBvMltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0RhdGUobzEpKSB7XG4gICAgICAgIGlmICghaXNEYXRlKG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gZXF1YWxzKG8xLmdldFRpbWUoKSwgbzIuZ2V0VGltZSgpKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAobzEpKSB7XG4gICAgICAgIHJldHVybiBpc1JlZ0V4cChvMikgPyBvMS50b1N0cmluZygpID09IG8yLnRvU3RyaW5nKCkgOiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1Njb3BlKG8xKSB8fCBpc1Njb3BlKG8yKSB8fCBpc1dpbmRvdyhvMSkgfHwgaXNXaW5kb3cobzIpIHx8XG4gICAgICAgICAgaXNBcnJheShvMikgfHwgaXNEYXRlKG8yKSB8fCBpc1JlZ0V4cChvMikpIHJldHVybiBmYWxzZTtcbiAgICAgICAga2V5U2V0ID0gY3JlYXRlTWFwKCk7XG4gICAgICAgIGZvciAoa2V5IGluIG8xKSB7XG4gICAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgPT09ICckJyB8fCBpc0Z1bmN0aW9uKG8xW2tleV0pKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAoIWVxdWFscyhvMVtrZXldLCBvMltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGtleVNldFtrZXldID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGtleSBpbiBvMikge1xuICAgICAgICAgIGlmICghKGtleSBpbiBrZXlTZXQpICYmXG4gICAgICAgICAgICAgIGtleS5jaGFyQXQoMCkgIT09ICckJyAmJlxuICAgICAgICAgICAgICBpc0RlZmluZWQobzJba2V5XSkgJiZcbiAgICAgICAgICAgICAgIWlzRnVuY3Rpb24obzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgY3NwID0gZnVuY3Rpb24oKSB7XG4gIGlmICghaXNEZWZpbmVkKGNzcC5ydWxlcykpIHtcblxuXG4gICAgdmFyIG5nQ3NwRWxlbWVudCA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmctY3NwXScpIHx8XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5nLWNzcF0nKSk7XG5cbiAgICBpZiAobmdDc3BFbGVtZW50KSB7XG4gICAgICB2YXIgbmdDc3BBdHRyaWJ1dGUgPSBuZ0NzcEVsZW1lbnQuZ2V0QXR0cmlidXRlKCduZy1jc3AnKSB8fFxuICAgICAgICAgICAgICAgICAgICBuZ0NzcEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW5nLWNzcCcpO1xuICAgICAgY3NwLnJ1bGVzID0ge1xuICAgICAgICBub1Vuc2FmZUV2YWw6ICFuZ0NzcEF0dHJpYnV0ZSB8fCAobmdDc3BBdHRyaWJ1dGUuaW5kZXhPZignbm8tdW5zYWZlLWV2YWwnKSAhPT0gLTEpLFxuICAgICAgICBub0lubGluZVN0eWxlOiAhbmdDc3BBdHRyaWJ1dGUgfHwgKG5nQ3NwQXR0cmlidXRlLmluZGV4T2YoJ25vLWlubGluZS1zdHlsZScpICE9PSAtMSlcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzcC5ydWxlcyA9IHtcbiAgICAgICAgbm9VbnNhZmVFdmFsOiBub1Vuc2FmZUV2YWwoKSxcbiAgICAgICAgbm9JbmxpbmVTdHlsZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNzcC5ydWxlcztcblxuICBmdW5jdGlvbiBub1Vuc2FmZUV2YWwoKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8qIGpzaGludCAtVzAzMSwgLVcwNTQgKi9cbiAgICAgIG5ldyBGdW5jdGlvbignJyk7XG4gICAgICAvKiBqc2hpbnQgK1cwMzEsICtXMDU0ICovXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBtb2R1bGUgbmdcbiAqIEBuYW1lIG5nSnFcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdKcSB0aGUgbmFtZSBvZiB0aGUgbGlicmFyeSBhdmFpbGFibGUgdW5kZXIgYHdpbmRvd2BcbiAqIHRvIGJlIHVzZWQgZm9yIGFuZ3VsYXIuZWxlbWVudFxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhpcyBkaXJlY3RpdmUgdG8gZm9yY2UgdGhlIGFuZ3VsYXIuZWxlbWVudCBsaWJyYXJ5LiAgVGhpcyBzaG91bGQgYmVcbiAqIHVzZWQgdG8gZm9yY2UgZWl0aGVyIGpxTGl0ZSBieSBsZWF2aW5nIG5nLWpxIGJsYW5rIG9yIHNldHRpbmcgdGhlIG5hbWUgb2ZcbiAqIHRoZSBqcXVlcnkgdmFyaWFibGUgdW5kZXIgd2luZG93IChlZy4galF1ZXJ5KS5cbiAqXG4gKiBTaW5jZSBhbmd1bGFyIGxvb2tzIGZvciB0aGlzIGRpcmVjdGl2ZSB3aGVuIGl0IGlzIGxvYWRlZCAoZG9lc24ndCB3YWl0IGZvciB0aGVcbiAqIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQpLCBpdCBtdXN0IGJlIHBsYWNlZCBvbiBhbiBlbGVtZW50IHRoYXQgY29tZXMgYmVmb3JlIHRoZSBzY3JpcHRcbiAqIHdoaWNoIGxvYWRzIGFuZ3VsYXIuIEFsc28sIG9ubHkgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGBuZy1qcWAgd2lsbCBiZSB1c2VkIGFuZCBhbGxcbiAqIG90aGVycyBpZ25vcmVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIGZvcmNlIGpxTGl0ZSB1c2luZyB0aGUgYG5nSnFgIGRpcmVjdGl2ZSB0byB0aGUgYGh0bWxgIHRhZy5cbiBgYGBodG1sXG4gPCFkb2N0eXBlIGh0bWw+XG4gPGh0bWwgbmctYXBwIG5nLWpxPlxuIC4uLlxuIC4uLlxuIDwvaHRtbD5cbiBgYGBcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBhIGpRdWVyeSBiYXNlZCBsaWJyYXJ5IG9mIGEgZGlmZmVyZW50IG5hbWUuXG4gKiBUaGUgbGlicmFyeSBuYW1lIG11c3QgYmUgYXZhaWxhYmxlIGF0IHRoZSB0b3AgbW9zdCAnd2luZG93Jy5cbiBgYGBodG1sXG4gPCFkb2N0eXBlIGh0bWw+XG4gPGh0bWwgbmctYXBwIG5nLWpxPVwialF1ZXJ5TGliXCI+XG4gLi4uXG4gLi4uXG4gPC9odG1sPlxuIGBgYFxuICovXG52YXIganEgPSBmdW5jdGlvbigpIHtcbiAgaWYgKGlzRGVmaW5lZChqcS5uYW1lXykpIHJldHVybiBqcS5uYW1lXztcbiAgdmFyIGVsO1xuICB2YXIgaSwgaWkgPSBuZ0F0dHJQcmVmaXhlcy5sZW5ndGgsIHByZWZpeCwgbmFtZTtcbiAgZm9yIChpID0gMDsgaSA8IGlpOyArK2kpIHtcbiAgICBwcmVmaXggPSBuZ0F0dHJQcmVmaXhlc1tpXTtcbiAgICBpZiAoZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbJyArIHByZWZpeC5yZXBsYWNlKCc6JywgJ1xcXFw6JykgKyAnanFdJykpIHtcbiAgICAgIG5hbWUgPSBlbC5nZXRBdHRyaWJ1dGUocHJlZml4ICsgJ2pxJyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGpxLm5hbWVfID0gbmFtZSk7XG59O1xuXG5mdW5jdGlvbiBjb25jYXQoYXJyYXkxLCBhcnJheTIsIGluZGV4KSB7XG4gIHJldHVybiBhcnJheTEuY29uY2F0KHNsaWNlLmNhbGwoYXJyYXkyLCBpbmRleCkpO1xufVxuXG5mdW5jdGlvbiBzbGljZUFyZ3MoYXJncywgc3RhcnRJbmRleCkge1xuICByZXR1cm4gc2xpY2UuY2FsbChhcmdzLCBzdGFydEluZGV4IHx8IDApO1xufVxuXG5cbi8qIGpzaGludCAtVzEwMSAqL1xuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuYmluZFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBjYWxscyBmdW5jdGlvbiBgZm5gIGJvdW5kIHRvIGBzZWxmYCAoYHNlbGZgIGJlY29tZXMgdGhlIGB0aGlzYCBmb3JcbiAqIGBmbmApLiBZb3UgY2FuIHN1cHBseSBvcHRpb25hbCBgYXJnc2AgdGhhdCBhcmUgcHJlYm91bmQgdG8gdGhlIGZ1bmN0aW9uLiBUaGlzIGZlYXR1cmUgaXMgYWxzb1xuICoga25vd24gYXMgW3BhcnRpYWwgYXBwbGljYXRpb25dKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGFydGlhbF9hcHBsaWNhdGlvbiksIGFzXG4gKiBkaXN0aW5ndWlzaGVkIGZyb20gW2Z1bmN0aW9uIGN1cnJ5aW5nXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1cnJ5aW5nI0NvbnRyYXN0X3dpdGhfcGFydGlhbF9mdW5jdGlvbl9hcHBsaWNhdGlvbikuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNlbGYgQ29udGV4dCB3aGljaCBgZm5gIHNob3VsZCBiZSBldmFsdWF0ZWQgaW4uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEZ1bmN0aW9uIHRvIGJlIGJvdW5kLlxuICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIGFyZ3VtZW50cyB0byBiZSBwcmVib3VuZCB0byB0aGUgYGZuYCBmdW5jdGlvbiBjYWxsLlxuICogQHJldHVybnMge2Z1bmN0aW9uKCl9IEZ1bmN0aW9uIHRoYXQgd3JhcHMgdGhlIGBmbmAgd2l0aCBhbGwgdGhlIHNwZWNpZmllZCBiaW5kaW5ncy5cbiAqL1xuLyoganNoaW50ICtXMTAxICovXG5mdW5jdGlvbiBiaW5kKHNlbGYsIGZuKSB7XG4gIHZhciBjdXJyeUFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IHNsaWNlQXJncyhhcmd1bWVudHMsIDIpIDogW107XG4gIGlmIChpc0Z1bmN0aW9uKGZuKSAmJiAhKGZuIGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgIHJldHVybiBjdXJyeUFyZ3MubGVuZ3RoXG4gICAgICA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgICAgICA/IGZuLmFwcGx5KHNlbGYsIGNvbmNhdChjdXJyeUFyZ3MsIGFyZ3VtZW50cywgMCkpXG4gICAgICAgICAgICA6IGZuLmFwcGx5KHNlbGYsIGN1cnJ5QXJncyk7XG4gICAgICAgIH1cbiAgICAgIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgICAgID8gZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKVxuICAgICAgICAgICAgOiBmbi5jYWxsKHNlbGYpO1xuICAgICAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIGluIElFLCBuYXRpdmUgbWV0aG9kcyBhcmUgbm90IGZ1bmN0aW9ucyBzbyB0aGV5IGNhbm5vdCBiZSBib3VuZCAobm90ZTogdGhleSBkb24ndCBuZWVkIHRvIGJlKVxuICAgIHJldHVybiBmbjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHRvSnNvblJlcGxhY2VyKGtleSwgdmFsdWUpIHtcbiAgdmFyIHZhbCA9IHZhbHVlO1xuXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnJCcgJiYga2V5LmNoYXJBdCgxKSA9PT0gJyQnKSB7XG4gICAgdmFsID0gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKGlzV2luZG93KHZhbHVlKSkge1xuICAgIHZhbCA9ICckV0lORE9XJztcbiAgfSBlbHNlIGlmICh2YWx1ZSAmJiAgZG9jdW1lbnQgPT09IHZhbHVlKSB7XG4gICAgdmFsID0gJyRET0NVTUVOVCc7XG4gIH0gZWxzZSBpZiAoaXNTY29wZSh2YWx1ZSkpIHtcbiAgICB2YWwgPSAnJFNDT1BFJztcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIudG9Kc29uXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2VyaWFsaXplcyBpbnB1dCBpbnRvIGEgSlNPTi1mb3JtYXR0ZWQgc3RyaW5nLiBQcm9wZXJ0aWVzIHdpdGggbGVhZGluZyAkJCBjaGFyYWN0ZXJzIHdpbGwgYmVcbiAqIHN0cmlwcGVkIHNpbmNlIGFuZ3VsYXIgdXNlcyB0aGlzIG5vdGF0aW9uIGludGVybmFsbHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl8RGF0ZXxzdHJpbmd8bnVtYmVyfSBvYmogSW5wdXQgdG8gYmUgc2VyaWFsaXplZCBpbnRvIEpTT04uXG4gKiBAcGFyYW0ge2Jvb2xlYW58bnVtYmVyfSBbcHJldHR5PTJdIElmIHNldCB0byB0cnVlLCB0aGUgSlNPTiBvdXRwdXQgd2lsbCBjb250YWluIG5ld2xpbmVzIGFuZCB3aGl0ZXNwYWNlLlxuICogICAgSWYgc2V0IHRvIGFuIGludGVnZXIsIHRoZSBKU09OIG91dHB1dCB3aWxsIGNvbnRhaW4gdGhhdCBtYW55IHNwYWNlcyBwZXIgaW5kZW50YXRpb24uXG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gSlNPTi1pZmllZCBzdHJpbmcgcmVwcmVzZW50aW5nIGBvYmpgLlxuICovXG5mdW5jdGlvbiB0b0pzb24ob2JqLCBwcmV0dHkpIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAoIWlzTnVtYmVyKHByZXR0eSkpIHtcbiAgICBwcmV0dHkgPSBwcmV0dHkgPyAyIDogbnVsbDtcbiAgfVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCB0b0pzb25SZXBsYWNlciwgcHJldHR5KTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5mcm9tSnNvblxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERlc2VyaWFsaXplcyBhIEpTT04gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBqc29uIEpTT04gc3RyaW5nIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybnMge09iamVjdHxBcnJheXxzdHJpbmd8bnVtYmVyfSBEZXNlcmlhbGl6ZWQgSlNPTiBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGZyb21Kc29uKGpzb24pIHtcbiAgcmV0dXJuIGlzU3RyaW5nKGpzb24pXG4gICAgICA/IEpTT04ucGFyc2UoanNvbilcbiAgICAgIDoganNvbjtcbn1cblxuXG5mdW5jdGlvbiB0aW1lem9uZVRvT2Zmc2V0KHRpbWV6b25lLCBmYWxsYmFjaykge1xuICB2YXIgcmVxdWVzdGVkVGltZXpvbmVPZmZzZXQgPSBEYXRlLnBhcnNlKCdKYW4gMDEsIDE5NzAgMDA6MDA6MDAgJyArIHRpbWV6b25lKSAvIDYwMDAwO1xuICByZXR1cm4gaXNOYU4ocmVxdWVzdGVkVGltZXpvbmVPZmZzZXQpID8gZmFsbGJhY2sgOiByZXF1ZXN0ZWRUaW1lem9uZU9mZnNldDtcbn1cblxuXG5mdW5jdGlvbiBhZGREYXRlTWludXRlcyhkYXRlLCBtaW51dGVzKSB7XG4gIGRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gIGRhdGUuc2V0TWludXRlcyhkYXRlLmdldE1pbnV0ZXMoKSArIG1pbnV0ZXMpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxuXG5mdW5jdGlvbiBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKGRhdGUsIHRpbWV6b25lLCByZXZlcnNlKSB7XG4gIHJldmVyc2UgPSByZXZlcnNlID8gLTEgOiAxO1xuICB2YXIgdGltZXpvbmVPZmZzZXQgPSB0aW1lem9uZVRvT2Zmc2V0KHRpbWV6b25lLCBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICByZXR1cm4gYWRkRGF0ZU1pbnV0ZXMoZGF0ZSwgcmV2ZXJzZSAqICh0aW1lem9uZU9mZnNldCAtIGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSkpO1xufVxuXG5cbi8qKlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBzdGFydGluZ1RhZyhlbGVtZW50KSB7XG4gIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCkuY2xvbmUoKTtcbiAgdHJ5IHtcbiAgICAvLyB0dXJucyBvdXQgSUUgZG9lcyBub3QgbGV0IHlvdSBzZXQgLmh0bWwoKSBvbiBlbGVtZW50cyB3aGljaFxuICAgIC8vIGFyZSBub3QgYWxsb3dlZCB0byBoYXZlIGNoaWxkcmVuLiBTbyB3ZSBqdXN0IGlnbm9yZSBpdC5cbiAgICBlbGVtZW50LmVtcHR5KCk7XG4gIH0gY2F0Y2ggKGUpIHt9XG4gIHZhciBlbGVtSHRtbCA9IGpxTGl0ZSgnPGRpdj4nKS5hcHBlbmQoZWxlbWVudCkuaHRtbCgpO1xuICB0cnkge1xuICAgIHJldHVybiBlbGVtZW50WzBdLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCA/IGxvd2VyY2FzZShlbGVtSHRtbCkgOlxuICAgICAgICBlbGVtSHRtbC5cbiAgICAgICAgICBtYXRjaCgvXig8W14+XSs+KS8pWzFdLlxuICAgICAgICAgIHJlcGxhY2UoL148KFtcXHdcXC1dKykvLCBmdW5jdGlvbihtYXRjaCwgbm9kZU5hbWUpIHsgcmV0dXJuICc8JyArIGxvd2VyY2FzZShub2RlTmFtZSk7IH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGxvd2VyY2FzZShlbGVtSHRtbCk7XG4gIH1cblxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBUcmllcyB0byBkZWNvZGUgdGhlIFVSSSBjb21wb25lbnQgd2l0aG91dCB0aHJvd2luZyBhbiBleGNlcHRpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSBzdHIgdmFsdWUgcG90ZW50aWFsIFVSSSBjb21wb25lbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGNhbiBiZSBkZWNvZGVkXG4gKiB3aXRoIHRoZSBkZWNvZGVVUklDb21wb25lbnQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRyeURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSWdub3JlIGFueSBpbnZhbGlkIHVyaSBjb21wb25lbnRcbiAgfVxufVxuXG5cbi8qKlxuICogUGFyc2VzIGFuIGVzY2FwZWQgdXJsIHF1ZXJ5IHN0cmluZyBpbnRvIGtleS12YWx1ZSBwYWlycy5cbiAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZyxib29sZWFufEFycmF5Pn1cbiAqL1xuZnVuY3Rpb24gcGFyc2VLZXlWYWx1ZSgvKipzdHJpbmcqL2tleVZhbHVlKSB7XG4gIHZhciBvYmogPSB7fTtcbiAgZm9yRWFjaCgoa2V5VmFsdWUgfHwgXCJcIikuc3BsaXQoJyYnKSwgZnVuY3Rpb24oa2V5VmFsdWUpIHtcbiAgICB2YXIgc3BsaXRQb2ludCwga2V5LCB2YWw7XG4gICAgaWYgKGtleVZhbHVlKSB7XG4gICAgICBrZXkgPSBrZXlWYWx1ZSA9IGtleVZhbHVlLnJlcGxhY2UoL1xcKy9nLCclMjAnKTtcbiAgICAgIHNwbGl0UG9pbnQgPSBrZXlWYWx1ZS5pbmRleE9mKCc9Jyk7XG4gICAgICBpZiAoc3BsaXRQb2ludCAhPT0gLTEpIHtcbiAgICAgICAga2V5ID0ga2V5VmFsdWUuc3Vic3RyaW5nKDAsIHNwbGl0UG9pbnQpO1xuICAgICAgICB2YWwgPSBrZXlWYWx1ZS5zdWJzdHJpbmcoc3BsaXRQb2ludCArIDEpO1xuICAgICAgfVxuICAgICAga2V5ID0gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gICAgICBpZiAoaXNEZWZpbmVkKGtleSkpIHtcbiAgICAgICAgdmFsID0gaXNEZWZpbmVkKHZhbCkgPyB0cnlEZWNvZGVVUklDb21wb25lbnQodmFsKSA6IHRydWU7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrZXldKSkge1xuICAgICAgICAgIG9ialtrZXldLnB1c2godmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYmpba2V5XSA9IFtvYmpba2V5XSx2YWxdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gdG9LZXlWYWx1ZShvYmopIHtcbiAgdmFyIHBhcnRzID0gW107XG4gIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbihhcnJheVZhbHVlKSB7XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArXG4gICAgICAgICAgICAgICAgICAgKGFycmF5VmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KGFycmF5VmFsdWUsIHRydWUpKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArXG4gICAgICAgICAgICAgICAodmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KHZhbHVlLCB0cnVlKSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwYXJ0cy5sZW5ndGggPyBwYXJ0cy5qb2luKCcmJykgOiAnJztcbn1cblxuXG4vKipcbiAqIFdlIG5lZWQgb3VyIGN1c3RvbSBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGRvZXNuJ3QgZm9sbG93XG4gKiBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCB3aXRoIHJlZ2FyZHMgdG8gdGhlIGNoYXJhY3RlciBzZXQgKHBjaGFyKSBhbGxvd2VkIGluIHBhdGhcbiAqIHNlZ21lbnRzOlxuICogICAgc2VnbWVudCAgICAgICA9ICpwY2hhclxuICogICAgcGNoYXIgICAgICAgICA9IHVucmVzZXJ2ZWQgLyBwY3QtZW5jb2RlZCAvIHN1Yi1kZWxpbXMgLyBcIjpcIiAvIFwiQFwiXG4gKiAgICBwY3QtZW5jb2RlZCAgID0gXCIlXCIgSEVYRElHIEhFWERJR1xuICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyBcIi1cIiAvIFwiLlwiIC8gXCJfXCIgLyBcIn5cIlxuICogICAgc3ViLWRlbGltcyAgICA9IFwiIVwiIC8gXCIkXCIgLyBcIiZcIiAvIFwiJ1wiIC8gXCIoXCIgLyBcIilcIlxuICogICAgICAgICAgICAgICAgICAgICAvIFwiKlwiIC8gXCIrXCIgLyBcIixcIiAvIFwiO1wiIC8gXCI9XCJcbiAqL1xuZnVuY3Rpb24gZW5jb2RlVXJpU2VnbWVudCh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVyaVF1ZXJ5KHZhbCwgdHJ1ZSkuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTI2L2dpLCAnJicpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUzRC9naSwgJz0nKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMkIvZ2ksICcrJyk7XG59XG5cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZW5jb2RpbmcgKmtleSogb3IgKnZhbHVlKiBwYXJ0cyBvZiBxdWVyeSBjb21wb25lbnQuIFdlIG5lZWQgYSBjdXN0b21cbiAqIG1ldGhvZCBiZWNhdXNlIGVuY29kZVVSSUNvbXBvbmVudCBpcyB0b28gYWdncmVzc2l2ZSBhbmQgZW5jb2RlcyBzdHVmZiB0aGF0IGRvZXNuJ3QgaGF2ZSB0byBiZVxuICogZW5jb2RlZCBwZXIgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NjpcbiAqICAgIHF1ZXJ5ICAgICAgID0gKiggcGNoYXIgLyBcIi9cIiAvIFwiP1wiIClcbiAqICAgIHBjaGFyICAgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gXCI6XCIgLyBcIkBcIlxuICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyBcIi1cIiAvIFwiLlwiIC8gXCJfXCIgLyBcIn5cIlxuICogICAgcGN0LWVuY29kZWQgICA9IFwiJVwiIEhFWERJRyBIRVhESUdcbiAqICAgIHN1Yi1kZWxpbXMgICAgPSBcIiFcIiAvIFwiJFwiIC8gXCImXCIgLyBcIidcIiAvIFwiKFwiIC8gXCIpXCJcbiAqICAgICAgICAgICAgICAgICAgICAgLyBcIipcIiAvIFwiK1wiIC8gXCIsXCIgLyBcIjtcIiAvIFwiPVwiXG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVyaVF1ZXJ5KHZhbCwgcGN0RW5jb2RlU3BhY2VzKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lM0IvZ2ksICc7JykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTIwL2csIChwY3RFbmNvZGVTcGFjZXMgPyAnJTIwJyA6ICcrJykpO1xufVxuXG52YXIgbmdBdHRyUHJlZml4ZXMgPSBbJ25nLScsICdkYXRhLW5nLScsICduZzonLCAneC1uZy0nXTtcblxuZnVuY3Rpb24gZ2V0TmdBdHRyaWJ1dGUoZWxlbWVudCwgbmdBdHRyKSB7XG4gIHZhciBhdHRyLCBpLCBpaSA9IG5nQXR0clByZWZpeGVzLmxlbmd0aDtcbiAgZm9yIChpID0gMDsgaSA8IGlpOyArK2kpIHtcbiAgICBhdHRyID0gbmdBdHRyUHJlZml4ZXNbaV0gKyBuZ0F0dHI7XG4gICAgaWYgKGlzU3RyaW5nKGF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyKSkpIHtcbiAgICAgIHJldHVybiBhdHRyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0FwcFxuICogQG1vZHVsZSBuZ1xuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHthbmd1bGFyLk1vZHVsZX0gbmdBcHAgYW4gb3B0aW9uYWwgYXBwbGljYXRpb25cbiAqICAge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZX0gbmFtZSB0byBsb2FkLlxuICogQHBhcmFtIHtib29sZWFuPX0gbmdTdHJpY3REaSBpZiB0aGlzIGF0dHJpYnV0ZSBpcyBwcmVzZW50IG9uIHRoZSBhcHAgZWxlbWVudCwgdGhlIGluamVjdG9yIHdpbGwgYmVcbiAqICAgY3JlYXRlZCBpbiBcInN0cmljdC1kaVwiIG1vZGUuIFRoaXMgbWVhbnMgdGhhdCB0aGUgYXBwbGljYXRpb24gd2lsbCBmYWlsIHRvIGludm9rZSBmdW5jdGlvbnMgd2hpY2hcbiAqICAgZG8gbm90IHVzZSBleHBsaWNpdCBmdW5jdGlvbiBhbm5vdGF0aW9uIChhbmQgYXJlIHRodXMgdW5zdWl0YWJsZSBmb3IgbWluaWZpY2F0aW9uKSwgYXMgZGVzY3JpYmVkXG4gKiAgIGluIHtAbGluayBndWlkZS9kaSB0aGUgRGVwZW5kZW5jeSBJbmplY3Rpb24gZ3VpZGV9LCBhbmQgdXNlZnVsIGRlYnVnZ2luZyBpbmZvIHdpbGwgYXNzaXN0IGluXG4gKiAgIHRyYWNraW5nIGRvd24gdGhlIHJvb3Qgb2YgdGhlc2UgYnVncy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBVc2UgdGhpcyBkaXJlY3RpdmUgdG8gKiphdXRvLWJvb3RzdHJhcCoqIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbi4gVGhlIGBuZ0FwcGAgZGlyZWN0aXZlXG4gKiBkZXNpZ25hdGVzIHRoZSAqKnJvb3QgZWxlbWVudCoqIG9mIHRoZSBhcHBsaWNhdGlvbiBhbmQgaXMgdHlwaWNhbGx5IHBsYWNlZCBuZWFyIHRoZSByb290IGVsZW1lbnRcbiAqIG9mIHRoZSBwYWdlIC0gZS5nLiBvbiB0aGUgYDxib2R5PmAgb3IgYDxodG1sPmAgdGFncy5cbiAqXG4gKiBPbmx5IG9uZSBBbmd1bGFySlMgYXBwbGljYXRpb24gY2FuIGJlIGF1dG8tYm9vdHN0cmFwcGVkIHBlciBIVE1MIGRvY3VtZW50LiBUaGUgZmlyc3QgYG5nQXBwYFxuICogZm91bmQgaW4gdGhlIGRvY3VtZW50IHdpbGwgYmUgdXNlZCB0byBkZWZpbmUgdGhlIHJvb3QgZWxlbWVudCB0byBhdXRvLWJvb3RzdHJhcCBhcyBhblxuICogYXBwbGljYXRpb24uIFRvIHJ1biBtdWx0aXBsZSBhcHBsaWNhdGlvbnMgaW4gYW4gSFRNTCBkb2N1bWVudCB5b3UgbXVzdCBtYW51YWxseSBib290c3RyYXAgdGhlbSB1c2luZ1xuICoge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfSBpbnN0ZWFkLiBBbmd1bGFySlMgYXBwbGljYXRpb25zIGNhbm5vdCBiZSBuZXN0ZWQgd2l0aGluIGVhY2ggb3RoZXIuXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IGFuICoqQW5ndWxhckpTIG1vZHVsZSoqIHRvIGJlIHVzZWQgYXMgdGhlIHJvb3QgbW9kdWxlIGZvciB0aGUgYXBwbGljYXRpb24uICBUaGlzXG4gKiBtb2R1bGUgd2lsbCBiZSBsb2FkZWQgaW50byB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yfSB3aGVuIHRoZSBhcHBsaWNhdGlvbiBpcyBib290c3RyYXBwZWQuIEl0XG4gKiBzaG91bGQgY29udGFpbiB0aGUgYXBwbGljYXRpb24gY29kZSBuZWVkZWQgb3IgaGF2ZSBkZXBlbmRlbmNpZXMgb24gb3RoZXIgbW9kdWxlcyB0aGF0IHdpbGxcbiAqIGNvbnRhaW4gdGhlIGNvZGUuIFNlZSB7QGxpbmsgYW5ndWxhci5tb2R1bGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEluIHRoZSBleGFtcGxlIGJlbG93IGlmIHRoZSBgbmdBcHBgIGRpcmVjdGl2ZSB3ZXJlIG5vdCBwbGFjZWQgb24gdGhlIGBodG1sYCBlbGVtZW50IHRoZW4gdGhlXG4gKiBkb2N1bWVudCB3b3VsZCBub3QgYmUgY29tcGlsZWQsIHRoZSBgQXBwQ29udHJvbGxlcmAgd291bGQgbm90IGJlIGluc3RhbnRpYXRlZCBhbmQgdGhlIGB7eyBhK2IgfX1gXG4gKiB3b3VsZCBub3QgYmUgcmVzb2x2ZWQgdG8gYDNgLlxuICpcbiAqIGBuZ0FwcGAgaXMgdGhlIGVhc2llc3QsIGFuZCBtb3N0IGNvbW1vbiB3YXkgdG8gYm9vdHN0cmFwIGFuIGFwcGxpY2F0aW9uLlxuICpcbiA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FwcERlbW9cIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJuZ0FwcERlbW9Db250cm9sbGVyXCI+XG4gICAgIEkgY2FuIGFkZDoge3thfX0gKyB7e2J9fSA9ICB7eyBhK2IgfX1cbiAgIDwvZGl2PlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgYW5ndWxhci5tb2R1bGUoJ25nQXBwRGVtbycsIFtdKS5jb250cm9sbGVyKCduZ0FwcERlbW9Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICRzY29wZS5hID0gMTtcbiAgICAgJHNjb3BlLmIgPSAyO1xuICAgfSk7XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuICpcbiAqIFVzaW5nIGBuZ1N0cmljdERpYCwgeW91IHdvdWxkIHNlZSBzb21ldGhpbmcgbGlrZSB0aGlzOlxuICpcbiA8ZXhhbXBsZSBuZy1hcHAtaW5jbHVkZWQ9XCJ0cnVlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgPGRpdiBuZy1hcHA9XCJuZ0FwcFN0cmljdERlbW9cIiBuZy1zdHJpY3QtZGk+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiR29vZENvbnRyb2xsZXIxXCI+XG4gICAgICAgICAgIEkgY2FuIGFkZDoge3thfX0gKyB7e2J9fSA9ICB7eyBhK2IgfX1cblxuICAgICAgICAgICA8cD5UaGlzIHJlbmRlcnMgYmVjYXVzZSB0aGUgY29udHJvbGxlciBkb2VzIG5vdCBmYWlsIHRvXG4gICAgICAgICAgICAgIGluc3RhbnRpYXRlLCBieSB1c2luZyBleHBsaWNpdCBhbm5vdGF0aW9uIHN0eWxlIChzZWVcbiAgICAgICAgICAgICAgc2NyaXB0LmpzIGZvciBkZXRhaWxzKVxuICAgICAgICAgICA8L3A+XG4gICAgICAgPC9kaXY+XG5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJHb29kQ29udHJvbGxlcjJcIj5cbiAgICAgICAgICAgTmFtZTogPGlucHV0IG5nLW1vZGVsPVwibmFtZVwiPjxiciAvPlxuICAgICAgICAgICBIZWxsbywge3tuYW1lfX0hXG5cbiAgICAgICAgICAgPHA+VGhpcyByZW5kZXJzIGJlY2F1c2UgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgZmFpbCB0b1xuICAgICAgICAgICAgICBpbnN0YW50aWF0ZSwgYnkgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBzdHlsZVxuICAgICAgICAgICAgICAoc2VlIHNjcmlwdC5qcyBmb3IgZGV0YWlscylcbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuXG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQmFkQ29udHJvbGxlclwiPlxuICAgICAgICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG5cbiAgICAgICAgICAgPHA+VGhlIGNvbnRyb2xsZXIgY291bGQgbm90IGJlIGluc3RhbnRpYXRlZCwgZHVlIHRvIHJlbHlpbmdcbiAgICAgICAgICAgICAgb24gYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb25zICh3aGljaCBhcmUgZGlzYWJsZWQgaW5cbiAgICAgICAgICAgICAgc3RyaWN0IG1vZGUpLiBBcyBzdWNoLCB0aGUgY29udGVudCBvZiB0aGlzIHNlY3Rpb24gaXMgbm90XG4gICAgICAgICAgICAgIGludGVycG9sYXRlZCwgYW5kIHRoZXJlIHNob3VsZCBiZSBhbiBlcnJvciBpbiB5b3VyIHdlYiBjb25zb2xlLlxuICAgICAgICAgICA8L3A+XG4gICAgICAgPC9kaXY+XG4gICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgIGFuZ3VsYXIubW9kdWxlKCduZ0FwcFN0cmljdERlbW8nLCBbXSlcbiAgICAgLy8gQmFkQ29udHJvbGxlciB3aWxsIGZhaWwgdG8gaW5zdGFudGlhdGUsIGR1ZSB0byByZWx5aW5nIG9uIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9uLFxuICAgICAvLyByYXRoZXIgdGhhbiBhbiBleHBsaWNpdCBhbm5vdGF0aW9uXG4gICAgIC5jb250cm9sbGVyKCdCYWRDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgJHNjb3BlLmEgPSAxO1xuICAgICAgICRzY29wZS5iID0gMjtcbiAgICAgfSlcbiAgICAgLy8gVW5saWtlIEJhZENvbnRyb2xsZXIsIEdvb2RDb250cm9sbGVyMSBhbmQgR29vZENvbnRyb2xsZXIyIHdpbGwgbm90IGZhaWwgdG8gYmUgaW5zdGFudGlhdGVkLFxuICAgICAvLyBkdWUgdG8gdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbnMgdXNpbmcgdGhlIGFycmF5IHN0eWxlIGFuZCAkaW5qZWN0IHByb3BlcnR5LCByZXNwZWN0aXZlbHkuXG4gICAgIC5jb250cm9sbGVyKCdHb29kQ29udHJvbGxlcjEnLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICRzY29wZS5hID0gMTtcbiAgICAgICAkc2NvcGUuYiA9IDI7XG4gICAgIH1dKVxuICAgICAuY29udHJvbGxlcignR29vZENvbnRyb2xsZXIyJywgR29vZENvbnRyb2xsZXIyKTtcbiAgICAgZnVuY3Rpb24gR29vZENvbnRyb2xsZXIyKCRzY29wZSkge1xuICAgICAgICRzY29wZS5uYW1lID0gXCJXb3JsZFwiO1xuICAgICB9XG4gICAgIEdvb2RDb250cm9sbGVyMi4kaW5qZWN0ID0gWyckc2NvcGUnXTtcbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgIGRpdltuZy1jb250cm9sbGVyXSB7XG4gICAgICAgbWFyZ2luLWJvdHRvbTogMWVtO1xuICAgICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICBib3JkZXI6IDFweCBzb2xpZDtcbiAgICAgICBwYWRkaW5nOiAuNWVtO1xuICAgfVxuICAgZGl2W25nLWNvbnRyb2xsZXJePUdvb2RdIHtcbiAgICAgICBib3JkZXItY29sb3I6ICNkNmU5YzY7XG4gICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2RmZjBkODtcbiAgICAgICBjb2xvcjogIzNjNzYzZDtcbiAgIH1cbiAgIGRpdltuZy1jb250cm9sbGVyXj1CYWRdIHtcbiAgICAgICBib3JkZXItY29sb3I6ICNlYmNjZDE7XG4gICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2YyZGVkZTtcbiAgICAgICBjb2xvcjogI2E5NDQ0MjtcbiAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgfVxuICAgPC9maWxlPlxuIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gYW5ndWxhckluaXQoZWxlbWVudCwgYm9vdHN0cmFwKSB7XG4gIHZhciBhcHBFbGVtZW50LFxuICAgICAgbW9kdWxlLFxuICAgICAgY29uZmlnID0ge307XG5cbiAgLy8gVGhlIGVsZW1lbnQgYGVsZW1lbnRgIGhhcyBwcmlvcml0eSBvdmVyIGFueSBvdGhlciBlbGVtZW50XG4gIGZvckVhY2gobmdBdHRyUHJlZml4ZXMsIGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIHZhciBuYW1lID0gcHJlZml4ICsgJ2FwcCc7XG5cbiAgICBpZiAoIWFwcEVsZW1lbnQgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIGFwcEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgbW9kdWxlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICB9KTtcbiAgZm9yRWFjaChuZ0F0dHJQcmVmaXhlcywgZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIG5hbWUgPSBwcmVmaXggKyAnYXBwJztcbiAgICB2YXIgY2FuZGlkYXRlO1xuXG4gICAgaWYgKCFhcHBFbGVtZW50ICYmIChjYW5kaWRhdGUgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1snICsgbmFtZS5yZXBsYWNlKCc6JywgJ1xcXFw6JykgKyAnXScpKSkge1xuICAgICAgYXBwRWxlbWVudCA9IGNhbmRpZGF0ZTtcbiAgICAgIG1vZHVsZSA9IGNhbmRpZGF0ZS5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICB9KTtcbiAgaWYgKGFwcEVsZW1lbnQpIHtcbiAgICBjb25maWcuc3RyaWN0RGkgPSBnZXROZ0F0dHJpYnV0ZShhcHBFbGVtZW50LCBcInN0cmljdC1kaVwiKSAhPT0gbnVsbDtcbiAgICBib290c3RyYXAoYXBwRWxlbWVudCwgbW9kdWxlID8gW21vZHVsZV0gOiBbXSwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5ib290c3RyYXBcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoaXMgZnVuY3Rpb24gdG8gbWFudWFsbHkgc3RhcnQgdXAgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBTZWU6IHtAbGluayBndWlkZS9ib290c3RyYXAgQm9vdHN0cmFwfVxuICpcbiAqIE5vdGUgdGhhdCBQcm90cmFjdG9yIGJhc2VkIGVuZC10by1lbmQgdGVzdHMgY2Fubm90IHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGJvb3RzdHJhcCBtYW51YWxseS5cbiAqIFRoZXkgbXVzdCB1c2Uge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0uXG4gKlxuICogQW5ndWxhciB3aWxsIGRldGVjdCBpZiBpdCBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgYnJvd3NlciBtb3JlIHRoYW4gb25jZSBhbmQgb25seSBhbGxvdyB0aGVcbiAqIGZpcnN0IGxvYWRlZCBzY3JpcHQgdG8gYmUgYm9vdHN0cmFwcGVkIGFuZCB3aWxsIHJlcG9ydCBhIHdhcm5pbmcgdG8gdGhlIGJyb3dzZXIgY29uc29sZSBmb3JcbiAqIGVhY2ggb2YgdGhlIHN1YnNlcXVlbnQgc2NyaXB0cy4gVGhpcyBwcmV2ZW50cyBzdHJhbmdlIHJlc3VsdHMgaW4gYXBwbGljYXRpb25zLCB3aGVyZSBvdGhlcndpc2VcbiAqIG11bHRpcGxlIGluc3RhbmNlcyBvZiBBbmd1bGFyIHRyeSB0byB3b3JrIG9uIHRoZSBET00uXG4gKlxuICogYGBgaHRtbFxuICogPCFkb2N0eXBlIGh0bWw+XG4gKiA8aHRtbD5cbiAqIDxib2R5PlxuICogPGRpdiBuZy1jb250cm9sbGVyPVwiV2VsY29tZUNvbnRyb2xsZXJcIj5cbiAqICAge3tncmVldGluZ319XG4gKiA8L2Rpdj5cbiAqXG4gKiA8c2NyaXB0IHNyYz1cImFuZ3VsYXIuanNcIj48L3NjcmlwdD5cbiAqIDxzY3JpcHQ+XG4gKiAgIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnZGVtbycsIFtdKVxuICogICAuY29udHJvbGxlcignV2VsY29tZUNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICRzY29wZS5ncmVldGluZyA9ICdXZWxjb21lISc7XG4gKiAgIH0pO1xuICogICBhbmd1bGFyLmJvb3RzdHJhcChkb2N1bWVudCwgWydkZW1vJ10pO1xuICogPC9zY3JpcHQ+XG4gKiA8L2JvZHk+XG4gKiA8L2h0bWw+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgRE9NIGVsZW1lbnQgd2hpY2ggaXMgdGhlIHJvb3Qgb2YgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfEZ1bmN0aW9ufEFycmF5Pj19IG1vZHVsZXMgYW4gYXJyYXkgb2YgbW9kdWxlcyB0byBsb2FkIGludG8gdGhlIGFwcGxpY2F0aW9uLlxuICogICAgIEVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgc2hvdWxkIGJlIHRoZSBuYW1lIG9mIGEgcHJlZGVmaW5lZCBtb2R1bGUgb3IgYSAoREkgYW5ub3RhdGVkKVxuICogICAgIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkIGJ5IHRoZSBpbmplY3RvciBhcyBhIGBjb25maWdgIGJsb2NrLlxuICogICAgIFNlZToge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9XG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBhbiBvYmplY3QgZm9yIGRlZmluaW5nIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGFwcGxpY2F0aW9uLiBUaGVcbiAqICAgICBmb2xsb3dpbmcga2V5cyBhcmUgc3VwcG9ydGVkOlxuICpcbiAqICogYHN0cmljdERpYCAtIGRpc2FibGUgYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb24gZm9yIHRoZSBhcHBsaWNhdGlvbi4gVGhpcyBpcyBtZWFudCB0b1xuICogICBhc3Npc3QgaW4gZmluZGluZyBidWdzIHdoaWNoIGJyZWFrIG1pbmlmaWVkIGNvZGUuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gKlxuICogQHJldHVybnMge2F1dG8uJGluamVjdG9yfSBSZXR1cm5zIHRoZSBuZXdseSBjcmVhdGVkIGluamVjdG9yIGZvciB0aGlzIGFwcC5cbiAqL1xuZnVuY3Rpb24gYm9vdHN0cmFwKGVsZW1lbnQsIG1vZHVsZXMsIGNvbmZpZykge1xuICBpZiAoIWlzT2JqZWN0KGNvbmZpZykpIGNvbmZpZyA9IHt9O1xuICB2YXIgZGVmYXVsdENvbmZpZyA9IHtcbiAgICBzdHJpY3REaTogZmFsc2VcbiAgfTtcbiAgY29uZmlnID0gZXh0ZW5kKGRlZmF1bHRDb25maWcsIGNvbmZpZyk7XG4gIHZhciBkb0Jvb3RzdHJhcCA9IGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudC5pbmplY3RvcigpKSB7XG4gICAgICB2YXIgdGFnID0gKGVsZW1lbnRbMF0gPT09IGRvY3VtZW50KSA/ICdkb2N1bWVudCcgOiBzdGFydGluZ1RhZyhlbGVtZW50KTtcbiAgICAgIC8vRW5jb2RlIGFuZ2xlIGJyYWNrZXRzIHRvIHByZXZlbnQgaW5wdXQgZnJvbSBiZWluZyBzYW5pdGl6ZWQgdG8gZW1wdHkgc3RyaW5nICM4NjgzXG4gICAgICB0aHJvdyBuZ01pbkVycihcbiAgICAgICAgICAnYnRzdHJwZCcsXG4gICAgICAgICAgXCJBcHAgQWxyZWFkeSBCb290c3RyYXBwZWQgd2l0aCB0aGlzIEVsZW1lbnQgJ3swfSdcIixcbiAgICAgICAgICB0YWcucmVwbGFjZSgvPC8sJyZsdDsnKS5yZXBsYWNlKC8+LywnJmd0OycpKTtcbiAgICB9XG5cbiAgICBtb2R1bGVzID0gbW9kdWxlcyB8fCBbXTtcbiAgICBtb2R1bGVzLnVuc2hpZnQoWyckcHJvdmlkZScsIGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gICAgICAkcHJvdmlkZS52YWx1ZSgnJHJvb3RFbGVtZW50JywgZWxlbWVudCk7XG4gICAgfV0pO1xuXG4gICAgaWYgKGNvbmZpZy5kZWJ1Z0luZm9FbmFibGVkKSB7XG4gICAgICAvLyBQdXNoaW5nIHNvIHRoYXQgdGhpcyBvdmVycmlkZXMgYGRlYnVnSW5mb0VuYWJsZWRgIHNldHRpbmcgZGVmaW5lZCBpbiB1c2VyJ3MgYG1vZHVsZXNgLlxuICAgICAgbW9kdWxlcy5wdXNoKFsnJGNvbXBpbGVQcm92aWRlcicsIGZ1bmN0aW9uKCRjb21waWxlUHJvdmlkZXIpIHtcbiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKHRydWUpO1xuICAgICAgfV0pO1xuICAgIH1cblxuICAgIG1vZHVsZXMudW5zaGlmdCgnbmcnKTtcbiAgICB2YXIgaW5qZWN0b3IgPSBjcmVhdGVJbmplY3Rvcihtb2R1bGVzLCBjb25maWcuc3RyaWN0RGkpO1xuICAgIGluamVjdG9yLmludm9rZShbJyRyb290U2NvcGUnLCAnJHJvb3RFbGVtZW50JywgJyRjb21waWxlJywgJyRpbmplY3RvcicsXG4gICAgICAgZnVuY3Rpb24gYm9vdHN0cmFwQXBwbHkoc2NvcGUsIGVsZW1lbnQsIGNvbXBpbGUsIGluamVjdG9yKSB7XG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50LmRhdGEoJyRpbmplY3RvcicsIGluamVjdG9yKTtcbiAgICAgICAgICBjb21waWxlKGVsZW1lbnQpKHNjb3BlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XVxuICAgICk7XG4gICAgcmV0dXJuIGluamVjdG9yO1xuICB9O1xuXG4gIHZhciBOR19FTkFCTEVfREVCVUdfSU5GTyA9IC9eTkdfRU5BQkxFX0RFQlVHX0lORk8hLztcbiAgdmFyIE5HX0RFRkVSX0JPT1RTVFJBUCA9IC9eTkdfREVGRVJfQk9PVFNUUkFQIS87XG5cbiAgaWYgKHdpbmRvdyAmJiBOR19FTkFCTEVfREVCVUdfSU5GTy50ZXN0KHdpbmRvdy5uYW1lKSkge1xuICAgIGNvbmZpZy5kZWJ1Z0luZm9FbmFibGVkID0gdHJ1ZTtcbiAgICB3aW5kb3cubmFtZSA9IHdpbmRvdy5uYW1lLnJlcGxhY2UoTkdfRU5BQkxFX0RFQlVHX0lORk8sICcnKTtcbiAgfVxuXG4gIGlmICh3aW5kb3cgJiYgIU5HX0RFRkVSX0JPT1RTVFJBUC50ZXN0KHdpbmRvdy5uYW1lKSkge1xuICAgIHJldHVybiBkb0Jvb3RzdHJhcCgpO1xuICB9XG5cbiAgd2luZG93Lm5hbWUgPSB3aW5kb3cubmFtZS5yZXBsYWNlKE5HX0RFRkVSX0JPT1RTVFJBUCwgJycpO1xuICBhbmd1bGFyLnJlc3VtZUJvb3RzdHJhcCA9IGZ1bmN0aW9uKGV4dHJhTW9kdWxlcykge1xuICAgIGZvckVhY2goZXh0cmFNb2R1bGVzLCBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIG1vZHVsZXMucHVzaChtb2R1bGUpO1xuICAgIH0pO1xuICAgIHJldHVybiBkb0Jvb3RzdHJhcCgpO1xuICB9O1xuXG4gIGlmIChpc0Z1bmN0aW9uKGFuZ3VsYXIucmVzdW1lRGVmZXJyZWRCb290c3RyYXApKSB7XG4gICAgYW5ndWxhci5yZXN1bWVEZWZlcnJlZEJvb3RzdHJhcCgpO1xuICB9XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLnJlbG9hZFdpdGhEZWJ1Z0luZm9cbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoaXMgZnVuY3Rpb24gdG8gcmVsb2FkIHRoZSBjdXJyZW50IGFwcGxpY2F0aW9uIHdpdGggZGVidWcgaW5mb3JtYXRpb24gdHVybmVkIG9uLlxuICogVGhpcyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYSBjYWxsIHRvIGAkY29tcGlsZVByb3ZpZGVyLmRlYnVnSW5mb0VuYWJsZWQoZmFsc2UpYC5cbiAqXG4gKiBTZWUge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGVidWdJbmZvRW5hYmxlZH0gZm9yIG1vcmUuXG4gKi9cbmZ1bmN0aW9uIHJlbG9hZFdpdGhEZWJ1Z0luZm8oKSB7XG4gIHdpbmRvdy5uYW1lID0gJ05HX0VOQUJMRV9ERUJVR19JTkZPIScgKyB3aW5kb3cubmFtZTtcbiAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xufVxuXG4vKipcbiAqIEBuYW1lIGFuZ3VsYXIuZ2V0VGVzdGFiaWxpdHlcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSB0ZXN0YWJpbGl0eSBzZXJ2aWNlIGZvciB0aGUgaW5zdGFuY2Ugb2YgQW5ndWxhciBvbiB0aGUgZ2l2ZW5cbiAqIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgRE9NIGVsZW1lbnQgd2hpY2ggaXMgdGhlIHJvb3Qgb2YgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0VGVzdGFiaWxpdHkocm9vdEVsZW1lbnQpIHtcbiAgdmFyIGluamVjdG9yID0gYW5ndWxhci5lbGVtZW50KHJvb3RFbGVtZW50KS5pbmplY3RvcigpO1xuICBpZiAoIWluamVjdG9yKSB7XG4gICAgdGhyb3cgbmdNaW5FcnIoJ3Rlc3QnLFxuICAgICAgJ25vIGluamVjdG9yIGZvdW5kIGZvciBlbGVtZW50IGFyZ3VtZW50IHRvIGdldFRlc3RhYmlsaXR5Jyk7XG4gIH1cbiAgcmV0dXJuIGluamVjdG9yLmdldCgnJCR0ZXN0YWJpbGl0eScpO1xufVxuXG52YXIgU05BS0VfQ0FTRV9SRUdFWFAgPSAvW0EtWl0vZztcbmZ1bmN0aW9uIHNuYWtlX2Nhc2UobmFtZSwgc2VwYXJhdG9yKSB7XG4gIHNlcGFyYXRvciA9IHNlcGFyYXRvciB8fCAnXyc7XG4gIHJldHVybiBuYW1lLnJlcGxhY2UoU05BS0VfQ0FTRV9SRUdFWFAsIGZ1bmN0aW9uKGxldHRlciwgcG9zKSB7XG4gICAgcmV0dXJuIChwb3MgPyBzZXBhcmF0b3IgOiAnJykgKyBsZXR0ZXIudG9Mb3dlckNhc2UoKTtcbiAgfSk7XG59XG5cbnZhciBiaW5kSlF1ZXJ5RmlyZWQgPSBmYWxzZTtcbnZhciBza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YTtcbmZ1bmN0aW9uIGJpbmRKUXVlcnkoKSB7XG4gIHZhciBvcmlnaW5hbENsZWFuRGF0YTtcblxuICBpZiAoYmluZEpRdWVyeUZpcmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gYmluZCB0byBqUXVlcnkgaWYgcHJlc2VudDtcbiAgdmFyIGpxTmFtZSA9IGpxKCk7XG4gIGpRdWVyeSA9IGlzVW5kZWZpbmVkKGpxTmFtZSkgPyB3aW5kb3cualF1ZXJ5IDogICAvLyB1c2UgalF1ZXJ5IChpZiBwcmVzZW50KVxuICAgICAgICAgICAhanFOYW1lICAgICAgICAgICAgID8gdW5kZWZpbmVkICAgICA6ICAgLy8gdXNlIGpxTGl0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93W2pxTmFtZV07ICAgLy8gdXNlIGpRdWVyeSBzcGVjaWZpZWQgYnkgYG5nSnFgXG5cbiAgLy8gVXNlIGpRdWVyeSBpZiBpdCBleGlzdHMgd2l0aCBwcm9wZXIgZnVuY3Rpb25hbGl0eSwgb3RoZXJ3aXNlIGRlZmF1bHQgdG8gdXMuXG4gIC8vIEFuZ3VsYXIgMS4yKyByZXF1aXJlcyBqUXVlcnkgMS43KyBmb3Igb24oKS9vZmYoKSBzdXBwb3J0LlxuICAvLyBBbmd1bGFyIDEuMysgdGVjaG5pY2FsbHkgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IDIuMSsgYnV0IGl0IG1heSB3b3JrIHdpdGggb2xkZXJcbiAgLy8gdmVyc2lvbnMuIEl0IHdpbGwgbm90IHdvcmsgZm9yIHN1cmUgd2l0aCBqUXVlcnkgPDEuNywgdGhvdWdoLlxuICBpZiAoalF1ZXJ5ICYmIGpRdWVyeS5mbi5vbikge1xuICAgIGpxTGl0ZSA9IGpRdWVyeTtcbiAgICBleHRlbmQoalF1ZXJ5LmZuLCB7XG4gICAgICBzY29wZTogSlFMaXRlUHJvdG90eXBlLnNjb3BlLFxuICAgICAgaXNvbGF0ZVNjb3BlOiBKUUxpdGVQcm90b3R5cGUuaXNvbGF0ZVNjb3BlLFxuICAgICAgY29udHJvbGxlcjogSlFMaXRlUHJvdG90eXBlLmNvbnRyb2xsZXIsXG4gICAgICBpbmplY3RvcjogSlFMaXRlUHJvdG90eXBlLmluamVjdG9yLFxuICAgICAgaW5oZXJpdGVkRGF0YTogSlFMaXRlUHJvdG90eXBlLmluaGVyaXRlZERhdGFcbiAgICB9KTtcblxuICAgIC8vIEFsbCBub2RlcyByZW1vdmVkIGZyb20gdGhlIERPTSB2aWEgdmFyaW91cyBqUXVlcnkgQVBJcyBsaWtlIC5yZW1vdmUoKVxuICAgIC8vIGFyZSBwYXNzZWQgdGhyb3VnaCBqUXVlcnkuY2xlYW5EYXRhLiBNb25rZXktcGF0Y2ggdGhpcyBtZXRob2QgdG8gZmlyZVxuICAgIC8vIHRoZSAkZGVzdHJveSBldmVudCBvbiBhbGwgcmVtb3ZlZCBub2Rlcy5cbiAgICBvcmlnaW5hbENsZWFuRGF0YSA9IGpRdWVyeS5jbGVhbkRhdGE7XG4gICAgalF1ZXJ5LmNsZWFuRGF0YSA9IGZ1bmN0aW9uKGVsZW1zKSB7XG4gICAgICB2YXIgZXZlbnRzO1xuICAgICAgaWYgKCFza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgZWxlbTsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrKSB7XG4gICAgICAgICAgZXZlbnRzID0galF1ZXJ5Ll9kYXRhKGVsZW0sIFwiZXZlbnRzXCIpO1xuICAgICAgICAgIGlmIChldmVudHMgJiYgZXZlbnRzLiRkZXN0cm95KSB7XG4gICAgICAgICAgICBqUXVlcnkoZWxlbSkudHJpZ2dlckhhbmRsZXIoJyRkZXN0cm95Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBza2lwRGVzdHJveU9uTmV4dEpRdWVyeUNsZWFuRGF0YSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgb3JpZ2luYWxDbGVhbkRhdGEoZWxlbXMpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAganFMaXRlID0gSlFMaXRlO1xuICB9XG5cbiAgYW5ndWxhci5lbGVtZW50ID0ganFMaXRlO1xuXG4gIC8vIFByZXZlbnQgZG91YmxlLXByb3h5aW5nLlxuICBiaW5kSlF1ZXJ5RmlyZWQgPSB0cnVlO1xufVxuXG4vKipcbiAqIHRocm93IGVycm9yIGlmIHRoZSBhcmd1bWVudCBpcyBmYWxzeS5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0QXJnKGFyZywgbmFtZSwgcmVhc29uKSB7XG4gIGlmICghYXJnKSB7XG4gICAgdGhyb3cgbmdNaW5FcnIoJ2FyZXEnLCBcIkFyZ3VtZW50ICd7MH0nIGlzIHsxfVwiLCAobmFtZSB8fCAnPycpLCAocmVhc29uIHx8IFwicmVxdWlyZWRcIikpO1xuICB9XG4gIHJldHVybiBhcmc7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEFyZ0ZuKGFyZywgbmFtZSwgYWNjZXB0QXJyYXlBbm5vdGF0aW9uKSB7XG4gIGlmIChhY2NlcHRBcnJheUFubm90YXRpb24gJiYgaXNBcnJheShhcmcpKSB7XG4gICAgICBhcmcgPSBhcmdbYXJnLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgYXNzZXJ0QXJnKGlzRnVuY3Rpb24oYXJnKSwgbmFtZSwgJ25vdCBhIGZ1bmN0aW9uLCBnb3QgJyArXG4gICAgICAoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnID8gYXJnLmNvbnN0cnVjdG9yLm5hbWUgfHwgJ09iamVjdCcgOiB0eXBlb2YgYXJnKSk7XG4gIHJldHVybiBhcmc7XG59XG5cbi8qKlxuICogdGhyb3cgZXJyb3IgaWYgdGhlIG5hbWUgZ2l2ZW4gaXMgaGFzT3duUHJvcGVydHlcbiAqIEBwYXJhbSAge1N0cmluZ30gbmFtZSAgICB0aGUgbmFtZSB0byB0ZXN0XG4gKiBAcGFyYW0gIHtTdHJpbmd9IGNvbnRleHQgdGhlIGNvbnRleHQgaW4gd2hpY2ggdGhlIG5hbWUgaXMgdXNlZCwgc3VjaCBhcyBtb2R1bGUgb3IgZGlyZWN0aXZlXG4gKi9cbmZ1bmN0aW9uIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsIGNvbnRleHQpIHtcbiAgaWYgKG5hbWUgPT09ICdoYXNPd25Qcm9wZXJ0eScpIHtcbiAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsIFwiaGFzT3duUHJvcGVydHkgaXMgbm90IGEgdmFsaWQgezB9IG5hbWVcIiwgY29udGV4dCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHZhbHVlIGFjY2Vzc2libGUgZnJvbSB0aGUgb2JqZWN0IGJ5IHBhdGguIEFueSB1bmRlZmluZWQgdHJhdmVyc2FscyBhcmUgaWdub3JlZFxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBzdGFydGluZyBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIHBhdGggdG8gdHJhdmVyc2VcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2JpbmRGblRvU2NvcGU9dHJ1ZV1cbiAqIEByZXR1cm5zIHtPYmplY3R9IHZhbHVlIGFzIGFjY2Vzc2libGUgYnkgcGF0aFxuICovXG4vL1RPRE8obWlza28pOiB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJlbW92ZWRcbmZ1bmN0aW9uIGdldHRlcihvYmosIHBhdGgsIGJpbmRGblRvU2NvcGUpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4gb2JqO1xuICB2YXIga2V5cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgdmFyIGtleTtcbiAgdmFyIGxhc3RJbnN0YW5jZSA9IG9iajtcbiAgdmFyIGxlbiA9IGtleXMubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChvYmopIHtcbiAgICAgIG9iaiA9IChsYXN0SW5zdGFuY2UgPSBvYmopW2tleV07XG4gICAgfVxuICB9XG4gIGlmICghYmluZEZuVG9TY29wZSAmJiBpc0Z1bmN0aW9uKG9iaikpIHtcbiAgICByZXR1cm4gYmluZChsYXN0SW5zdGFuY2UsIG9iaik7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIERPTSBzaWJsaW5ncyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBub2RlIGluIHRoZSBnaXZlbiBhcnJheS5cbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IGxpa2Ugb2JqZWN0XG4gKiBAcmV0dXJucyB7QXJyYXl9IHRoZSBpbnB1dHRlZCBvYmplY3Qgb3IgYSBqcUxpdGUgY29sbGVjdGlvbiBjb250YWluaW5nIHRoZSBub2Rlc1xuICovXG5mdW5jdGlvbiBnZXRCbG9ja05vZGVzKG5vZGVzKSB7XG4gIC8vIFRPRE8ocGVyZik6IHVwZGF0ZSBgbm9kZXNgIGluc3RlYWQgb2YgY3JlYXRpbmcgYSBuZXcgb2JqZWN0P1xuICB2YXIgbm9kZSA9IG5vZGVzWzBdO1xuICB2YXIgZW5kTm9kZSA9IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdO1xuICB2YXIgYmxvY2tOb2RlcztcblxuICBmb3IgKHZhciBpID0gMTsgbm9kZSAhPT0gZW5kTm9kZSAmJiAobm9kZSA9IG5vZGUubmV4dFNpYmxpbmcpOyBpKyspIHtcbiAgICBpZiAoYmxvY2tOb2RlcyB8fCBub2Rlc1tpXSAhPT0gbm9kZSkge1xuICAgICAgaWYgKCFibG9ja05vZGVzKSB7XG4gICAgICAgIGJsb2NrTm9kZXMgPSBqcUxpdGUoc2xpY2UuY2FsbChub2RlcywgMCwgaSkpO1xuICAgICAgfVxuICAgICAgYmxvY2tOb2Rlcy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBibG9ja05vZGVzIHx8IG5vZGVzO1xufVxuXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBvYmplY3Qgd2l0aG91dCBhIHByb3RvdHlwZS4gVGhpcyBvYmplY3QgaXMgdXNlZnVsIGZvciBsb29rdXAgd2l0aG91dCBoYXZpbmcgdG9cbiAqIGd1YXJkIGFnYWluc3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdGVkIHByb3BlcnRpZXMgdmlhIGhhc093blByb3BlcnR5LlxuICpcbiAqIFJlbGF0ZWQgbWljcm8tYmVuY2htYXJrczpcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vb2JqZWN0LWNyZWF0ZTJcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vcHJvdG8tbWFwLWxvb2t1cC8yXG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL2Zvci1pbi12cy1vYmplY3Qta2V5czJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBjcmVhdGVNYXAoKSB7XG4gIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuXG52YXIgTk9ERV9UWVBFX0VMRU1FTlQgPSAxO1xudmFyIE5PREVfVFlQRV9BVFRSSUJVVEUgPSAyO1xudmFyIE5PREVfVFlQRV9URVhUID0gMztcbnZhciBOT0RFX1RZUEVfQ09NTUVOVCA9IDg7XG52YXIgTk9ERV9UWVBFX0RPQ1VNRU5UID0gOTtcbnZhciBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgPSAxMTtcblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgYW5ndWxhci5Nb2R1bGVcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEludGVyZmFjZSBmb3IgY29uZmlndXJpbmcgYW5ndWxhciB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlc30uXG4gKi9cblxuZnVuY3Rpb24gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KSB7XG5cbiAgdmFyICRpbmplY3Rvck1pbkVyciA9IG1pbkVycignJGluamVjdG9yJyk7XG4gIHZhciBuZ01pbkVyciA9IG1pbkVycignbmcnKTtcblxuICBmdW5jdGlvbiBlbnN1cmUob2JqLCBuYW1lLCBmYWN0b3J5KSB7XG4gICAgcmV0dXJuIG9ialtuYW1lXSB8fCAob2JqW25hbWVdID0gZmFjdG9yeSgpKTtcbiAgfVxuXG4gIHZhciBhbmd1bGFyID0gZW5zdXJlKHdpbmRvdywgJ2FuZ3VsYXInLCBPYmplY3QpO1xuXG4gIC8vIFdlIG5lZWQgdG8gZXhwb3NlIGBhbmd1bGFyLiQkbWluRXJyYCB0byBtb2R1bGVzIHN1Y2ggYXMgYG5nUmVzb3VyY2VgIHRoYXQgcmVmZXJlbmNlIGl0IGR1cmluZyBib290c3RyYXBcbiAgYW5ndWxhci4kJG1pbkVyciA9IGFuZ3VsYXIuJCRtaW5FcnIgfHwgbWluRXJyO1xuXG4gIHJldHVybiBlbnN1cmUoYW5ndWxhciwgJ21vZHVsZScsIGZ1bmN0aW9uKCkge1xuICAgIC8qKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIGFuZ3VsYXIuTW9kdWxlPn0gKi9cbiAgICB2YXIgbW9kdWxlcyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgYW5ndWxhci5tb2R1bGVcbiAgICAgKiBAbW9kdWxlIG5nXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBUaGUgYGFuZ3VsYXIubW9kdWxlYCBpcyBhIGdsb2JhbCBwbGFjZSBmb3IgY3JlYXRpbmcsIHJlZ2lzdGVyaW5nIGFuZCByZXRyaWV2aW5nIEFuZ3VsYXJcbiAgICAgKiBtb2R1bGVzLlxuICAgICAqIEFsbCBtb2R1bGVzIChhbmd1bGFyIGNvcmUgb3IgM3JkIHBhcnR5KSB0aGF0IHNob3VsZCBiZSBhdmFpbGFibGUgdG8gYW4gYXBwbGljYXRpb24gbXVzdCBiZVxuICAgICAqIHJlZ2lzdGVyZWQgdXNpbmcgdGhpcyBtZWNoYW5pc20uXG4gICAgICpcbiAgICAgKiBQYXNzaW5nIG9uZSBhcmd1bWVudCByZXRyaWV2ZXMgYW4gZXhpc3Rpbmcge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfSxcbiAgICAgKiB3aGVyZWFzIHBhc3NpbmcgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCBjcmVhdGVzIGEgbmV3IHtAbGluayBhbmd1bGFyLk1vZHVsZX1cbiAgICAgKlxuICAgICAqXG4gICAgICogIyBNb2R1bGVcbiAgICAgKlxuICAgICAqIEEgbW9kdWxlIGlzIGEgY29sbGVjdGlvbiBvZiBzZXJ2aWNlcywgZGlyZWN0aXZlcywgY29udHJvbGxlcnMsIGZpbHRlcnMsIGFuZCBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uLlxuICAgICAqIGBhbmd1bGFyLm1vZHVsZWAgaXMgdXNlZCB0byBjb25maWd1cmUgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBDcmVhdGUgYSBuZXcgbW9kdWxlXG4gICAgICogdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ215TW9kdWxlJywgW10pO1xuICAgICAqXG4gICAgICogLy8gcmVnaXN0ZXIgYSBuZXcgc2VydmljZVxuICAgICAqIG15TW9kdWxlLnZhbHVlKCdhcHBOYW1lJywgJ015Q29vbEFwcCcpO1xuICAgICAqXG4gICAgICogLy8gY29uZmlndXJlIGV4aXN0aW5nIHNlcnZpY2VzIGluc2lkZSBpbml0aWFsaXphdGlvbiBibG9ja3MuXG4gICAgICogbXlNb2R1bGUuY29uZmlnKFsnJGxvY2F0aW9uUHJvdmlkZXInLCBmdW5jdGlvbigkbG9jYXRpb25Qcm92aWRlcikge1xuICAgICAqICAgLy8gQ29uZmlndXJlIGV4aXN0aW5nIHByb3ZpZGVyc1xuICAgICAqICAgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnIScpO1xuICAgICAqIH1dKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZW4geW91IGNhbiBjcmVhdGUgYW4gaW5qZWN0b3IgYW5kIGxvYWQgeW91ciBtb2R1bGVzIGxpa2UgdGhpczpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogdmFyIGluamVjdG9yID0gYW5ndWxhci5pbmplY3RvcihbJ25nJywgJ215TW9kdWxlJ10pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBIb3dldmVyIGl0J3MgbW9yZSBsaWtlbHkgdGhhdCB5b3UnbGwganVzdCB1c2VcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfSBvclxuICAgICAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0gdG8gc2ltcGxpZnkgdGhpcyBwcm9jZXNzIGZvciB5b3UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIG1vZHVsZSB0byBjcmVhdGUgb3IgcmV0cmlldmUuXG4gICAgICogQHBhcmFtIHshQXJyYXkuPHN0cmluZz49fSByZXF1aXJlcyBJZiBzcGVjaWZpZWQgdGhlbiBuZXcgbW9kdWxlIGlzIGJlaW5nIGNyZWF0ZWQuIElmXG4gICAgICogICAgICAgIHVuc3BlY2lmaWVkIHRoZW4gdGhlIG1vZHVsZSBpcyBiZWluZyByZXRyaWV2ZWQgZm9yIGZ1cnRoZXIgY29uZmlndXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gY29uZmlnRm4gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBmdW5jdGlvbiBmb3IgdGhlIG1vZHVsZS4gU2FtZSBhc1xuICAgICAqICAgICAgICB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnIE1vZHVsZSNjb25maWcoKX0uXG4gICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfSBuZXcgbW9kdWxlIHdpdGggdGhlIHtAbGluayBhbmd1bGFyLk1vZHVsZX0gYXBpLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBtb2R1bGUobmFtZSwgcmVxdWlyZXMsIGNvbmZpZ0ZuKSB7XG4gICAgICB2YXIgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkgPSBmdW5jdGlvbihuYW1lLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChuYW1lID09PSAnaGFzT3duUHJvcGVydHknKSB7XG4gICAgICAgICAgdGhyb3cgbmdNaW5FcnIoJ2JhZG5hbWUnLCAnaGFzT3duUHJvcGVydHkgaXMgbm90IGEgdmFsaWQgezB9IG5hbWUnLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ21vZHVsZScpO1xuICAgICAgaWYgKHJlcXVpcmVzICYmIG1vZHVsZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgbW9kdWxlc1tuYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gZW5zdXJlKG1vZHVsZXMsIG5hbWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXJlcXVpcmVzKSB7XG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdub21vZCcsIFwiTW9kdWxlICd7MH0nIGlzIG5vdCBhdmFpbGFibGUhIFlvdSBlaXRoZXIgbWlzc3BlbGxlZCBcIiArXG4gICAgICAgICAgICAgXCJ0aGUgbW9kdWxlIG5hbWUgb3IgZm9yZ290IHRvIGxvYWQgaXQuIElmIHJlZ2lzdGVyaW5nIGEgbW9kdWxlIGVuc3VyZSB0aGF0IHlvdSBcIiArXG4gICAgICAgICAgICAgXCJzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cIiwgbmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48QXJyYXkuPCo+Pn0gKi9cbiAgICAgICAgdmFyIGludm9rZVF1ZXVlID0gW107XG5cbiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEZ1bmN0aW9uPn0gKi9cbiAgICAgICAgdmFyIGNvbmZpZ0Jsb2NrcyA9IFtdO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxGdW5jdGlvbj59ICovXG4gICAgICAgIHZhciBydW5CbG9ja3MgPSBbXTtcblxuICAgICAgICB2YXIgY29uZmlnID0gaW52b2tlTGF0ZXIoJyRpbmplY3RvcicsICdpbnZva2UnLCAncHVzaCcsIGNvbmZpZ0Jsb2Nrcyk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHthbmd1bGFyLk1vZHVsZX0gKi9cbiAgICAgICAgdmFyIG1vZHVsZUluc3RhbmNlID0ge1xuICAgICAgICAgIC8vIFByaXZhdGUgc3RhdGVcbiAgICAgICAgICBfaW52b2tlUXVldWU6IGludm9rZVF1ZXVlLFxuICAgICAgICAgIF9jb25maWdCbG9ja3M6IGNvbmZpZ0Jsb2NrcyxcbiAgICAgICAgICBfcnVuQmxvY2tzOiBydW5CbG9ja3MsXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNyZXF1aXJlc1xuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIEhvbGRzIHRoZSBsaXN0IG9mIG1vZHVsZXMgd2hpY2ggdGhlIGluamVjdG9yIHdpbGwgbG9hZCBiZWZvcmUgdGhlIGN1cnJlbnQgbW9kdWxlIGlzXG4gICAgICAgICAgICogbG9hZGVkLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHJlcXVpcmVzOiByZXF1aXJlcyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI25hbWVcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBOYW1lIG9mIHRoZSBtb2R1bGUuXG4gICAgICAgICAgICovXG4gICAgICAgICAgbmFtZTogbmFtZSxcblxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3Byb3ZpZGVyXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyVHlwZSBDb25zdHJ1Y3Rpb24gZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiB0aGVcbiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgJHByb3ZpZGUucHJvdmlkZXIoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgcHJvdmlkZXI6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAncHJvdmlkZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmYWN0b3J5XG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyRnVuY3Rpb24gRnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiB0aGUgc2VydmljZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjZmFjdG9yeSAkcHJvdmlkZS5mYWN0b3J5KCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGZhY3Rvcnk6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAnZmFjdG9yeScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3NlcnZpY2VcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW5zdGFudGlhdGVkLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlICRwcm92aWRlLnNlcnZpY2UoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgc2VydmljZTogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdzZXJ2aWNlJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjdmFsdWVcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgU2VydmljZSBpbnN0YW5jZSBvYmplY3QuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlICRwcm92aWRlLnZhbHVlKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHZhbHVlOiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAndmFsdWUnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb25zdGFudFxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBjb25zdGFudCBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgQ29uc3RhbnQgdmFsdWUuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogQmVjYXVzZSB0aGUgY29uc3RhbnRzIGFyZSBmaXhlZCwgdGhleSBnZXQgYXBwbGllZCBiZWZvcmUgb3RoZXIgcHJvdmlkZSBtZXRob2RzLlxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNjb25zdGFudCAkcHJvdmlkZS5jb25zdGFudCgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb25zdGFudDogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ2NvbnN0YW50JywgJ3Vuc2hpZnQnKSxcblxuICAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZGVjb3JhdG9yXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgbmFtZSBvZiB0aGUgc2VydmljZSB0byBkZWNvcmF0ZS5cbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBzZXJ2aWNlIG5lZWRzIHRvIGJlXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW50aWF0ZWQgYW5kIHNob3VsZCByZXR1cm4gdGhlIGRlY29yYXRlZCBzZXJ2aWNlIGluc3RhbmNlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgJHByb3ZpZGUuZGVjb3JhdG9yKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGRlY29yYXRvcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdkZWNvcmF0b3InKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNhbmltYXRpb25cbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgYW5pbWF0aW9uIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhbmltYXRpb25GYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiBhblxuICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqXG4gICAgICAgICAgICogKipOT1RFKio6IGFuaW1hdGlvbnMgdGFrZSBlZmZlY3Qgb25seSBpZiB0aGUgKipuZ0FuaW1hdGUqKiBtb2R1bGUgaXMgbG9hZGVkLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBEZWZpbmVzIGFuIGFuaW1hdGlvbiBob29rIHRoYXQgY2FuIGJlIGxhdGVyIHVzZWQgd2l0aFxuICAgICAgICAgICAqIHtAbGluayAkYW5pbWF0ZSAkYW5pbWF0ZX0gc2VydmljZSBhbmQgZGlyZWN0aXZlcyB0aGF0IHVzZSB0aGlzIHNlcnZpY2UuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBgYGBqc1xuICAgICAgICAgICAqIG1vZHVsZS5hbmltYXRpb24oJy5hbmltYXRpb24tbmFtZScsIGZ1bmN0aW9uKCRpbmplY3QxLCAkaW5qZWN0Mikge1xuICAgICAgICAgICAqICAgcmV0dXJuIHtcbiAgICAgICAgICAgKiAgICAgZXZlbnROYW1lIDogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSkge1xuICAgICAgICAgICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvblxuICAgICAgICAgICAqICAgICAgIC8vb25jZSBjb21wbGV0ZSwgdGhlbiBydW4gZG9uZSgpXG4gICAgICAgICAgICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhbmNlbGxhdGlvbkZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgKiAgICAgICAgIC8vY29kZSB0byBjYW5jZWwgdGhlIGFuaW1hdGlvblxuICAgICAgICAgICAqICAgICAgIH1cbiAgICAgICAgICAgKiAgICAgfVxuICAgICAgICAgICAqICAgfVxuICAgICAgICAgICAqIH0pXG4gICAgICAgICAgICogYGBgXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXIgJGFuaW1hdGVQcm92aWRlci5yZWdpc3RlcigpfSBhbmRcbiAgICAgICAgICAgKiB7QGxpbmsgbmdBbmltYXRlIG5nQW5pbWF0ZSBtb2R1bGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGFuaW1hdGlvbjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckYW5pbWF0ZVByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZmlsdGVyXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEZpbHRlciBuYW1lIC0gdGhpcyBtdXN0IGJlIGEgdmFsaWQgYW5ndWxhciBleHByZXNzaW9uIGlkZW50aWZpZXJcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaWx0ZXJGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiBmaWx0ZXIuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kZmlsdGVyUHJvdmlkZXIjcmVnaXN0ZXIgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCl9LlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICAgICAgICAgKiAqKk5vdGU6KiogRmlsdGVyIG5hbWVzIG11c3QgYmUgdmFsaWQgYW5ndWxhciB7QGxpbmsgZXhwcmVzc2lvbn0gaWRlbnRpZmllcnMsIHN1Y2ggYXMgYHVwcGVyY2FzZWAgb3IgYG9yZGVyQnlgLlxuICAgICAgICAgICAqIE5hbWVzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJzLCBzdWNoIGFzIGh5cGhlbnMgYW5kIGRvdHMsIGFyZSBub3QgYWxsb3dlZC4gSWYgeW91IHdpc2ggdG8gbmFtZXNwYWNlXG4gICAgICAgICAgICogeW91ciBmaWx0ZXJzLCB0aGVuIHlvdSBjYW4gdXNlIGNhcGl0YWxpemF0aW9uIChgbXlhcHBTdWJzZWN0aW9uRmlsdGVyeGApIG9yIHVuZGVyc2NvcmVzXG4gICAgICAgICAgICogKGBteWFwcF9zdWJzZWN0aW9uX2ZpbHRlcnhgKS5cbiAgICAgICAgICAgKiA8L2Rpdj5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBmaWx0ZXI6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGZpbHRlclByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29udHJvbGxlclxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgQ29udHJvbGxlciBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGNvbnRyb2xsZXJzIHdoZXJlIHRoZVxuICAgICAgICAgICAqICAgIGtleXMgYXJlIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGNvbnN0cnVjdG9ycy5cbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciAkY29udHJvbGxlclByb3ZpZGVyLnJlZ2lzdGVyKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnRyb2xsZXI6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGNvbnRyb2xsZXJQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2RpcmVjdGl2ZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgRGlyZWN0aXZlIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgZGlyZWN0aXZlcyB3aGVyZSB0aGVcbiAgICAgICAgICAgKiAgICBrZXlzIGFyZSB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmYWN0b3JpZXMuXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZGlyZWN0aXZlRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2ZcbiAgICAgICAgICAgKiBkaXJlY3RpdmVzLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgZGlyZWN0aXZlOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRjb21waWxlUHJvdmlkZXInLCAnZGlyZWN0aXZlJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29uZmlnXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbmZpZ0ZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBvbiBtb2R1bGUgbG9hZC4gVXNlZnVsIGZvciBzZXJ2aWNlXG4gICAgICAgICAgICogICAgY29uZmlndXJhdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gcmVnaXN0ZXIgd29yayB3aGljaCBuZWVkcyB0byBiZSBwZXJmb3JtZWQgb24gbW9kdWxlIGxvYWRpbmcuXG4gICAgICAgICAgICogRm9yIG1vcmUgYWJvdXQgaG93IHRvIGNvbmZpZ3VyZSBzZXJ2aWNlcywgc2VlXG4gICAgICAgICAgICoge0BsaW5rIHByb3ZpZGVycyNwcm92aWRlci1yZWNpcGUgUHJvdmlkZXIgUmVjaXBlfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb25maWc6IGNvbmZpZyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNydW5cbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW5pdGlhbGl6YXRpb25GbiBFeGVjdXRlIHRoaXMgZnVuY3Rpb24gYWZ0ZXIgaW5qZWN0b3IgY3JlYXRpb24uXG4gICAgICAgICAgICogICAgVXNlZnVsIGZvciBhcHBsaWNhdGlvbiBpbml0aWFsaXphdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gcmVnaXN0ZXIgd29yayB3aGljaCBzaG91bGQgYmUgcGVyZm9ybWVkIHdoZW4gdGhlIGluamVjdG9yIGlzIGRvbmVcbiAgICAgICAgICAgKiBsb2FkaW5nIGFsbCBtb2R1bGVzLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHJ1bjogZnVuY3Rpb24oYmxvY2spIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoY29uZmlnRm4pIHtcbiAgICAgICAgICBjb25maWcoY29uZmlnRm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvdmlkZXJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZFxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZz19IGluc2VydE1ldGhvZFxuICAgICAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5Nb2R1bGV9XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBpbnZva2VMYXRlcihwcm92aWRlciwgbWV0aG9kLCBpbnNlcnRNZXRob2QsIHF1ZXVlKSB7XG4gICAgICAgICAgaWYgKCFxdWV1ZSkgcXVldWUgPSBpbnZva2VRdWV1ZTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBxdWV1ZVtpbnNlcnRNZXRob2QgfHwgJ3B1c2gnXShbcHJvdmlkZXIsIG1ldGhvZCwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvdmlkZXJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZFxuICAgICAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5Nb2R1bGV9XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUocHJvdmlkZXIsIG1ldGhvZCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihyZWNpcGVOYW1lLCBmYWN0b3J5RnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChmYWN0b3J5RnVuY3Rpb24gJiYgaXNGdW5jdGlvbihmYWN0b3J5RnVuY3Rpb24pKSBmYWN0b3J5RnVuY3Rpb24uJCRtb2R1bGVOYW1lID0gbmFtZTtcbiAgICAgICAgICAgIGludm9rZVF1ZXVlLnB1c2goW3Byb3ZpZGVyLCBtZXRob2QsIGFyZ3VtZW50c10pO1xuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xuXG59XG5cbi8qIGdsb2JhbDogdG9EZWJ1Z1N0cmluZzogdHJ1ZSAqL1xuXG5mdW5jdGlvbiBzZXJpYWxpemVPYmplY3Qob2JqKSB7XG4gIHZhciBzZWVuID0gW107XG5cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZnVuY3Rpb24oa2V5LCB2YWwpIHtcbiAgICB2YWwgPSB0b0pzb25SZXBsYWNlcihrZXksIHZhbCk7XG4gICAgaWYgKGlzT2JqZWN0KHZhbCkpIHtcblxuICAgICAgaWYgKHNlZW4uaW5kZXhPZih2YWwpID49IDApIHJldHVybiAnLi4uJztcblxuICAgICAgc2Vlbi5wdXNoKHZhbCk7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0b0RlYnVnU3RyaW5nKG9iaikge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvYmoudG9TdHJpbmcoKS5yZXBsYWNlKC8gXFx7W1xcc1xcU10qJC8sICcnKTtcbiAgfSBlbHNlIGlmIChpc1VuZGVmaW5lZChvYmopKSB7XG4gICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZU9iamVjdChvYmopO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qIGdsb2JhbCBhbmd1bGFyTW9kdWxlOiB0cnVlLFxuICB2ZXJzaW9uOiB0cnVlLFxuXG4gICRDb21waWxlUHJvdmlkZXIsXG5cbiAgaHRtbEFuY2hvckRpcmVjdGl2ZSxcbiAgaW5wdXREaXJlY3RpdmUsXG4gIGlucHV0RGlyZWN0aXZlLFxuICBmb3JtRGlyZWN0aXZlLFxuICBzY3JpcHREaXJlY3RpdmUsXG4gIHNlbGVjdERpcmVjdGl2ZSxcbiAgc3R5bGVEaXJlY3RpdmUsXG4gIG9wdGlvbkRpcmVjdGl2ZSxcbiAgbmdCaW5kRGlyZWN0aXZlLFxuICBuZ0JpbmRIdG1sRGlyZWN0aXZlLFxuICBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgbmdDbGFzc0RpcmVjdGl2ZSxcbiAgbmdDbGFzc0V2ZW5EaXJlY3RpdmUsXG4gIG5nQ2xhc3NPZGREaXJlY3RpdmUsXG4gIG5nQ2xvYWtEaXJlY3RpdmUsXG4gIG5nQ29udHJvbGxlckRpcmVjdGl2ZSxcbiAgbmdGb3JtRGlyZWN0aXZlLFxuICBuZ0hpZGVEaXJlY3RpdmUsXG4gIG5nSWZEaXJlY3RpdmUsXG4gIG5nSW5jbHVkZURpcmVjdGl2ZSxcbiAgbmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUsXG4gIG5nSW5pdERpcmVjdGl2ZSxcbiAgbmdOb25CaW5kYWJsZURpcmVjdGl2ZSxcbiAgbmdQbHVyYWxpemVEaXJlY3RpdmUsXG4gIG5nUmVwZWF0RGlyZWN0aXZlLFxuICBuZ1Nob3dEaXJlY3RpdmUsXG4gIG5nU3R5bGVEaXJlY3RpdmUsXG4gIG5nU3dpdGNoRGlyZWN0aXZlLFxuICBuZ1N3aXRjaFdoZW5EaXJlY3RpdmUsXG4gIG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSxcbiAgbmdPcHRpb25zRGlyZWN0aXZlLFxuICBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gIG5nTW9kZWxEaXJlY3RpdmUsXG4gIG5nTGlzdERpcmVjdGl2ZSxcbiAgbmdDaGFuZ2VEaXJlY3RpdmUsXG4gIHBhdHRlcm5EaXJlY3RpdmUsXG4gIHBhdHRlcm5EaXJlY3RpdmUsXG4gIHJlcXVpcmVkRGlyZWN0aXZlLFxuICByZXF1aXJlZERpcmVjdGl2ZSxcbiAgbWlubGVuZ3RoRGlyZWN0aXZlLFxuICBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gIG1heGxlbmd0aERpcmVjdGl2ZSxcbiAgbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICBuZ1ZhbHVlRGlyZWN0aXZlLFxuICBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSxcbiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMsXG4gIG5nRXZlbnREaXJlY3RpdmVzLFxuXG4gICRBbmNob3JTY3JvbGxQcm92aWRlcixcbiAgJEFuaW1hdGVQcm92aWRlcixcbiAgJENvcmVBbmltYXRlQ3NzUHJvdmlkZXIsXG4gICQkQ29yZUFuaW1hdGVKc1Byb3ZpZGVyLFxuICAkJENvcmVBbmltYXRlUXVldWVQcm92aWRlcixcbiAgJCRBbmltYXRlUnVubmVyRmFjdG9yeVByb3ZpZGVyLFxuICAkJEFuaW1hdGVBc3luY1J1bkZhY3RvcnlQcm92aWRlcixcbiAgJEJyb3dzZXJQcm92aWRlcixcbiAgJENhY2hlRmFjdG9yeVByb3ZpZGVyLFxuICAkQ29udHJvbGxlclByb3ZpZGVyLFxuICAkRG9jdW1lbnRQcm92aWRlcixcbiAgJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcixcbiAgJEZpbHRlclByb3ZpZGVyLFxuICAkJEZvcmNlUmVmbG93UHJvdmlkZXIsXG4gICRJbnRlcnBvbGF0ZVByb3ZpZGVyLFxuICAkSW50ZXJ2YWxQcm92aWRlcixcbiAgJCRIYXNoTWFwUHJvdmlkZXIsXG4gICRIdHRwUHJvdmlkZXIsXG4gICRIdHRwUGFyYW1TZXJpYWxpemVyUHJvdmlkZXIsXG4gICRIdHRwUGFyYW1TZXJpYWxpemVySlFMaWtlUHJvdmlkZXIsXG4gICRIdHRwQmFja2VuZFByb3ZpZGVyLFxuICAkeGhyRmFjdG9yeVByb3ZpZGVyLFxuICAkTG9jYXRpb25Qcm92aWRlcixcbiAgJExvZ1Byb3ZpZGVyLFxuICAkUGFyc2VQcm92aWRlcixcbiAgJFJvb3RTY29wZVByb3ZpZGVyLFxuICAkUVByb3ZpZGVyLFxuICAkJFFQcm92aWRlcixcbiAgJCRTYW5pdGl6ZVVyaVByb3ZpZGVyLFxuICAkU2NlUHJvdmlkZXIsXG4gICRTY2VEZWxlZ2F0ZVByb3ZpZGVyLFxuICAkU25pZmZlclByb3ZpZGVyLFxuICAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyLFxuICAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIsXG4gICQkVGVzdGFiaWxpdHlQcm92aWRlcixcbiAgJFRpbWVvdXRQcm92aWRlcixcbiAgJCRSQUZQcm92aWRlcixcbiAgJFdpbmRvd1Byb3ZpZGVyLFxuICAkJGpxTGl0ZVByb3ZpZGVyLFxuICAkJENvb2tpZVJlYWRlclByb3ZpZGVyXG4qL1xuXG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgYW5ndWxhci52ZXJzaW9uXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IEFuZ3VsYXJKUyB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgb2JqZWN0IGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogLSBgZnVsbGAg4oCTIGB7c3RyaW5nfWAg4oCTIEZ1bGwgdmVyc2lvbiBzdHJpbmcsIHN1Y2ggYXMgXCIwLjkuMThcIi5cbiAqIC0gYG1ham9yYCDigJMgYHtudW1iZXJ9YCDigJMgTWFqb3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCIwXCIuXG4gKiAtIGBtaW5vcmAg4oCTIGB7bnVtYmVyfWAg4oCTIE1pbm9yIHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzIFwiOVwiLlxuICogLSBgZG90YCDigJMgYHtudW1iZXJ9YCDigJMgRG90IHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzIFwiMThcIi5cbiAqIC0gYGNvZGVOYW1lYCDigJMgYHtzdHJpbmd9YCDigJMgQ29kZSBuYW1lIG9mIHRoZSByZWxlYXNlLCBzdWNoIGFzIFwiamlnZ2xpbmctYXJtZmF0XCIuXG4gKi9cbnZhciB2ZXJzaW9uID0ge1xuICBmdWxsOiAnMS40LjknLCAgICAvLyBhbGwgb2YgdGhlc2UgcGxhY2Vob2xkZXIgc3RyaW5ncyB3aWxsIGJlIHJlcGxhY2VkIGJ5IGdydW50J3NcbiAgbWFqb3I6IDEsICAgIC8vIHBhY2thZ2UgdGFza1xuICBtaW5vcjogNCxcbiAgZG90OiA5LFxuICBjb2RlTmFtZTogJ2ltcGxpY2l0LXN1cGVyYW5udWF0aW9uJ1xufTtcblxuXG5mdW5jdGlvbiBwdWJsaXNoRXh0ZXJuYWxBUEkoYW5ndWxhcikge1xuICBleHRlbmQoYW5ndWxhciwge1xuICAgICdib290c3RyYXAnOiBib290c3RyYXAsXG4gICAgJ2NvcHknOiBjb3B5LFxuICAgICdleHRlbmQnOiBleHRlbmQsXG4gICAgJ21lcmdlJzogbWVyZ2UsXG4gICAgJ2VxdWFscyc6IGVxdWFscyxcbiAgICAnZWxlbWVudCc6IGpxTGl0ZSxcbiAgICAnZm9yRWFjaCc6IGZvckVhY2gsXG4gICAgJ2luamVjdG9yJzogY3JlYXRlSW5qZWN0b3IsXG4gICAgJ25vb3AnOiBub29wLFxuICAgICdiaW5kJzogYmluZCxcbiAgICAndG9Kc29uJzogdG9Kc29uLFxuICAgICdmcm9tSnNvbic6IGZyb21Kc29uLFxuICAgICdpZGVudGl0eSc6IGlkZW50aXR5LFxuICAgICdpc1VuZGVmaW5lZCc6IGlzVW5kZWZpbmVkLFxuICAgICdpc0RlZmluZWQnOiBpc0RlZmluZWQsXG4gICAgJ2lzU3RyaW5nJzogaXNTdHJpbmcsXG4gICAgJ2lzRnVuY3Rpb24nOiBpc0Z1bmN0aW9uLFxuICAgICdpc09iamVjdCc6IGlzT2JqZWN0LFxuICAgICdpc051bWJlcic6IGlzTnVtYmVyLFxuICAgICdpc0VsZW1lbnQnOiBpc0VsZW1lbnQsXG4gICAgJ2lzQXJyYXknOiBpc0FycmF5LFxuICAgICd2ZXJzaW9uJzogdmVyc2lvbixcbiAgICAnaXNEYXRlJzogaXNEYXRlLFxuICAgICdsb3dlcmNhc2UnOiBsb3dlcmNhc2UsXG4gICAgJ3VwcGVyY2FzZSc6IHVwcGVyY2FzZSxcbiAgICAnY2FsbGJhY2tzJzoge2NvdW50ZXI6IDB9LFxuICAgICdnZXRUZXN0YWJpbGl0eSc6IGdldFRlc3RhYmlsaXR5LFxuICAgICckJG1pbkVycic6IG1pbkVycixcbiAgICAnJCRjc3AnOiBjc3AsXG4gICAgJ3JlbG9hZFdpdGhEZWJ1Z0luZm8nOiByZWxvYWRXaXRoRGVidWdJbmZvXG4gIH0pO1xuXG4gIGFuZ3VsYXJNb2R1bGUgPSBzZXR1cE1vZHVsZUxvYWRlcih3aW5kb3cpO1xuXG4gIGFuZ3VsYXJNb2R1bGUoJ25nJywgWyduZ0xvY2FsZSddLCBbJyRwcm92aWRlJyxcbiAgICBmdW5jdGlvbiBuZ01vZHVsZSgkcHJvdmlkZSkge1xuICAgICAgLy8gJCRzYW5pdGl6ZVVyaVByb3ZpZGVyIG5lZWRzIHRvIGJlIGJlZm9yZSAkY29tcGlsZVByb3ZpZGVyIGFzIGl0IGlzIHVzZWQgYnkgaXQuXG4gICAgICAkcHJvdmlkZS5wcm92aWRlcih7XG4gICAgICAgICQkc2FuaXRpemVVcmk6ICQkU2FuaXRpemVVcmlQcm92aWRlclxuICAgICAgfSk7XG4gICAgICAkcHJvdmlkZS5wcm92aWRlcignJGNvbXBpbGUnLCAkQ29tcGlsZVByb3ZpZGVyKS5cbiAgICAgICAgZGlyZWN0aXZlKHtcbiAgICAgICAgICAgIGE6IGh0bWxBbmNob3JEaXJlY3RpdmUsXG4gICAgICAgICAgICBpbnB1dDogaW5wdXREaXJlY3RpdmUsXG4gICAgICAgICAgICB0ZXh0YXJlYTogaW5wdXREaXJlY3RpdmUsXG4gICAgICAgICAgICBmb3JtOiBmb3JtRGlyZWN0aXZlLFxuICAgICAgICAgICAgc2NyaXB0OiBzY3JpcHREaXJlY3RpdmUsXG4gICAgICAgICAgICBzZWxlY3Q6IHNlbGVjdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG9wdGlvbjogb3B0aW9uRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdCaW5kOiBuZ0JpbmREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0JpbmRIdG1sOiBuZ0JpbmRIdG1sRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdCaW5kVGVtcGxhdGU6IG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbGFzczogbmdDbGFzc0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2xhc3NFdmVuOiBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2xhc3NPZGQ6IG5nQ2xhc3NPZGREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0Nsb2FrOiBuZ0Nsb2FrRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDb250cm9sbGVyOiBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0Zvcm06IG5nRm9ybURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nSGlkZTogbmdIaWRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdJZjogbmdJZkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nSW5jbHVkZTogbmdJbmNsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdJbml0OiBuZ0luaXREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ05vbkJpbmRhYmxlOiBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdQbHVyYWxpemU6IG5nUGx1cmFsaXplRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdSZXBlYXQ6IG5nUmVwZWF0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTaG93OiBuZ1Nob3dEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1N0eWxlOiBuZ1N0eWxlRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTd2l0Y2g6IG5nU3dpdGNoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTd2l0Y2hXaGVuOiBuZ1N3aXRjaFdoZW5EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1N3aXRjaERlZmF1bHQ6IG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nT3B0aW9uczogbmdPcHRpb25zRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdUcmFuc2NsdWRlOiBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01vZGVsOiBuZ01vZGVsRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdMaXN0OiBuZ0xpc3REaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NoYW5nZTogbmdDaGFuZ2VEaXJlY3RpdmUsXG4gICAgICAgICAgICBwYXR0ZXJuOiBwYXR0ZXJuRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdQYXR0ZXJuOiBwYXR0ZXJuRGlyZWN0aXZlLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdSZXF1aXJlZDogcmVxdWlyZWREaXJlY3RpdmUsXG4gICAgICAgICAgICBtaW5sZW5ndGg6IG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTWlubGVuZ3RoOiBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgICAgICBtYXhsZW5ndGg6IG1heGxlbmd0aERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTWF4bGVuZ3RoOiBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ1ZhbHVlOiBuZ1ZhbHVlRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNb2RlbE9wdGlvbnM6IG5nTW9kZWxPcHRpb25zRGlyZWN0aXZlXG4gICAgICAgIH0pLlxuICAgICAgICBkaXJlY3RpdmUoe1xuICAgICAgICAgIG5nSW5jbHVkZTogbmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmVcbiAgICAgICAgfSkuXG4gICAgICAgIGRpcmVjdGl2ZShuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcykuXG4gICAgICAgIGRpcmVjdGl2ZShuZ0V2ZW50RGlyZWN0aXZlcyk7XG4gICAgICAkcHJvdmlkZS5wcm92aWRlcih7XG4gICAgICAgICRhbmNob3JTY3JvbGw6ICRBbmNob3JTY3JvbGxQcm92aWRlcixcbiAgICAgICAgJGFuaW1hdGU6ICRBbmltYXRlUHJvdmlkZXIsXG4gICAgICAgICRhbmltYXRlQ3NzOiAkQ29yZUFuaW1hdGVDc3NQcm92aWRlcixcbiAgICAgICAgJCRhbmltYXRlSnM6ICQkQ29yZUFuaW1hdGVKc1Byb3ZpZGVyLFxuICAgICAgICAkJGFuaW1hdGVRdWV1ZTogJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIsXG4gICAgICAgICQkQW5pbWF0ZVJ1bm5lcjogJCRBbmltYXRlUnVubmVyRmFjdG9yeVByb3ZpZGVyLFxuICAgICAgICAkJGFuaW1hdGVBc3luY1J1bjogJCRBbmltYXRlQXN5bmNSdW5GYWN0b3J5UHJvdmlkZXIsXG4gICAgICAgICRicm93c2VyOiAkQnJvd3NlclByb3ZpZGVyLFxuICAgICAgICAkY2FjaGVGYWN0b3J5OiAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIsXG4gICAgICAgICRjb250cm9sbGVyOiAkQ29udHJvbGxlclByb3ZpZGVyLFxuICAgICAgICAkZG9jdW1lbnQ6ICREb2N1bWVudFByb3ZpZGVyLFxuICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcjogJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcixcbiAgICAgICAgJGZpbHRlcjogJEZpbHRlclByb3ZpZGVyLFxuICAgICAgICAkJGZvcmNlUmVmbG93OiAkJEZvcmNlUmVmbG93UHJvdmlkZXIsXG4gICAgICAgICRpbnRlcnBvbGF0ZTogJEludGVycG9sYXRlUHJvdmlkZXIsXG4gICAgICAgICRpbnRlcnZhbDogJEludGVydmFsUHJvdmlkZXIsXG4gICAgICAgICRodHRwOiAkSHR0cFByb3ZpZGVyLFxuICAgICAgICAkaHR0cFBhcmFtU2VyaWFsaXplcjogJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlcixcbiAgICAgICAgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2U6ICRIdHRwUGFyYW1TZXJpYWxpemVySlFMaWtlUHJvdmlkZXIsXG4gICAgICAgICRodHRwQmFja2VuZDogJEh0dHBCYWNrZW5kUHJvdmlkZXIsXG4gICAgICAgICR4aHJGYWN0b3J5OiAkeGhyRmFjdG9yeVByb3ZpZGVyLFxuICAgICAgICAkbG9jYXRpb246ICRMb2NhdGlvblByb3ZpZGVyLFxuICAgICAgICAkbG9nOiAkTG9nUHJvdmlkZXIsXG4gICAgICAgICRwYXJzZTogJFBhcnNlUHJvdmlkZXIsXG4gICAgICAgICRyb290U2NvcGU6ICRSb290U2NvcGVQcm92aWRlcixcbiAgICAgICAgJHE6ICRRUHJvdmlkZXIsXG4gICAgICAgICQkcTogJCRRUHJvdmlkZXIsXG4gICAgICAgICRzY2U6ICRTY2VQcm92aWRlcixcbiAgICAgICAgJHNjZURlbGVnYXRlOiAkU2NlRGVsZWdhdGVQcm92aWRlcixcbiAgICAgICAgJHNuaWZmZXI6ICRTbmlmZmVyUHJvdmlkZXIsXG4gICAgICAgICR0ZW1wbGF0ZUNhY2hlOiAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyLFxuICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0OiAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIsXG4gICAgICAgICQkdGVzdGFiaWxpdHk6ICQkVGVzdGFiaWxpdHlQcm92aWRlcixcbiAgICAgICAgJHRpbWVvdXQ6ICRUaW1lb3V0UHJvdmlkZXIsXG4gICAgICAgICR3aW5kb3c6ICRXaW5kb3dQcm92aWRlcixcbiAgICAgICAgJCRyQUY6ICQkUkFGUHJvdmlkZXIsXG4gICAgICAgICQkanFMaXRlOiAkJGpxTGl0ZVByb3ZpZGVyLFxuICAgICAgICAkJEhhc2hNYXA6ICQkSGFzaE1hcFByb3ZpZGVyLFxuICAgICAgICAkJGNvb2tpZVJlYWRlcjogJCRDb29raWVSZWFkZXJQcm92aWRlclxuICAgICAgfSk7XG4gICAgfVxuICBdKTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2VzIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi9cblxuLyogZ2xvYmFsIEpRTGl0ZVByb3RvdHlwZTogdHJ1ZSxcbiAgYWRkRXZlbnRMaXN0ZW5lckZuOiB0cnVlLFxuICByZW1vdmVFdmVudExpc3RlbmVyRm46IHRydWUsXG4gIEJPT0xFQU5fQVRUUjogdHJ1ZSxcbiAgQUxJQVNFRF9BVFRSOiB0cnVlLFxuKi9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9KUUxpdGVcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZWxlbWVudFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFdyYXBzIGEgcmF3IERPTSBlbGVtZW50IG9yIEhUTUwgc3RyaW5nIGFzIGEgW2pRdWVyeV0oaHR0cDovL2pxdWVyeS5jb20pIGVsZW1lbnQuXG4gKlxuICogSWYgalF1ZXJ5IGlzIGF2YWlsYWJsZSwgYGFuZ3VsYXIuZWxlbWVudGAgaXMgYW4gYWxpYXMgZm9yIHRoZVxuICogW2pRdWVyeV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2pRdWVyeS8pIGZ1bmN0aW9uLiBJZiBqUXVlcnkgaXMgbm90IGF2YWlsYWJsZSwgYGFuZ3VsYXIuZWxlbWVudGBcbiAqIGRlbGVnYXRlcyB0byBBbmd1bGFyJ3MgYnVpbHQtaW4gc3Vic2V0IG9mIGpRdWVyeSwgY2FsbGVkIFwialF1ZXJ5IGxpdGVcIiBvciAqKmpxTGl0ZSoqLlxuICpcbiAqIGpxTGl0ZSBpcyBhIHRpbnksIEFQSS1jb21wYXRpYmxlIHN1YnNldCBvZiBqUXVlcnkgdGhhdCBhbGxvd3NcbiAqIEFuZ3VsYXIgdG8gbWFuaXB1bGF0ZSB0aGUgRE9NIGluIGEgY3Jvc3MtYnJvd3NlciBjb21wYXRpYmxlIHdheS4ganFMaXRlIGltcGxlbWVudHMgb25seSB0aGUgbW9zdFxuICogY29tbW9ubHkgbmVlZGVkIGZ1bmN0aW9uYWxpdHkgd2l0aCB0aGUgZ29hbCBvZiBoYXZpbmcgYSB2ZXJ5IHNtYWxsIGZvb3RwcmludC5cbiAqXG4gKiBUbyB1c2UgYGpRdWVyeWAsIHNpbXBseSBlbnN1cmUgaXQgaXMgbG9hZGVkIGJlZm9yZSB0aGUgYGFuZ3VsYXIuanNgIGZpbGUuIFlvdSBjYW4gYWxzbyB1c2UgdGhlXG4gKiB7QGxpbmsgbmdKcSBgbmdKcWB9IGRpcmVjdGl2ZSB0byBzcGVjaWZ5IHRoYXQganFsaXRlIHNob3VsZCBiZSB1c2VkIG92ZXIgalF1ZXJ5LCBvciB0byB1c2UgYVxuICogc3BlY2lmaWMgdmVyc2lvbiBvZiBqUXVlcnkgaWYgbXVsdGlwbGUgdmVyc2lvbnMgZXhpc3Qgb24gdGhlIHBhZ2UuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj4qKk5vdGU6KiogQWxsIGVsZW1lbnQgcmVmZXJlbmNlcyBpbiBBbmd1bGFyIGFyZSBhbHdheXMgd3JhcHBlZCB3aXRoIGpRdWVyeSBvclxuICoganFMaXRlIChzdWNoIGFzIHRoZSBlbGVtZW50IGFyZ3VtZW50IGluIGEgZGlyZWN0aXZlJ3MgY29tcGlsZSAvIGxpbmsgZnVuY3Rpb24pLiBUaGV5IGFyZSBuZXZlciByYXcgRE9NIHJlZmVyZW5jZXMuPC9kaXY+XG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj4qKk5vdGU6KiogS2VlcCBpbiBtaW5kIHRoYXQgdGhpcyBmdW5jdGlvbiB3aWxsIG5vdCBmaW5kIGVsZW1lbnRzXG4gKiBieSB0YWcgbmFtZSAvIENTUyBzZWxlY3Rvci4gRm9yIGxvb2t1cHMgYnkgdGFnIG5hbWUsIHRyeSBpbnN0ZWFkIGBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoLi4uKWBcbiAqIG9yIGAkZG9jdW1lbnQuZmluZCgpYCwgb3IgdXNlIHRoZSBzdGFuZGFyZCBET00gQVBJcywgZS5nLiBgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgpYC48L2Rpdj5cbiAqXG4gKiAjIyBBbmd1bGFyJ3MganFMaXRlXG4gKiBqcUxpdGUgcHJvdmlkZXMgb25seSB0aGUgZm9sbG93aW5nIGpRdWVyeSBtZXRob2RzOlxuICpcbiAqIC0gW2BhZGRDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FkZENsYXNzLylcbiAqIC0gW2BhZnRlcigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FmdGVyLylcbiAqIC0gW2BhcHBlbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hcHBlbmQvKVxuICogLSBbYGF0dHIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hdHRyLykgLSBEb2VzIG5vdCBzdXBwb3J0IGZ1bmN0aW9ucyBhcyBwYXJhbWV0ZXJzXG4gKiAtIFtgYmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2JpbmQvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcywgc2VsZWN0b3JzIG9yIGV2ZW50RGF0YVxuICogLSBbYGNoaWxkcmVuKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY2hpbGRyZW4vKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzXG4gKiAtIFtgY2xvbmUoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jbG9uZS8pXG4gKiAtIFtgY29udGVudHMoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jb250ZW50cy8pXG4gKiAtIFtgY3NzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY3NzLykgLSBPbmx5IHJldHJpZXZlcyBpbmxpbmUtc3R5bGVzLCBkb2VzIG5vdCBjYWxsIGBnZXRDb21wdXRlZFN0eWxlKClgLlxuICogICBBcyBhIHNldHRlciwgZG9lcyBub3QgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ3Mgb3IgYXBwZW5kICdweCcsIGFuZCBhbHNvIGRvZXMgbm90IGhhdmUgYXV0b21hdGljIHByb3BlcnR5IHByZWZpeGluZy5cbiAqIC0gW2BkYXRhKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZGF0YS8pXG4gKiAtIFtgZGV0YWNoKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZGV0YWNoLylcbiAqIC0gW2BlbXB0eSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2VtcHR5LylcbiAqIC0gW2BlcSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2VxLylcbiAqIC0gW2BmaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZmluZC8pIC0gTGltaXRlZCB0byBsb29rdXBzIGJ5IHRhZyBuYW1lXG4gKiAtIFtgaGFzQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9oYXNDbGFzcy8pXG4gKiAtIFtgaHRtbCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2h0bWwvKVxuICogLSBbYG5leHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9uZXh0LykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICogLSBbYG9uKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb24vKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcywgc2VsZWN0b3JzIG9yIGV2ZW50RGF0YVxuICogLSBbYG9mZigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29mZi8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzLCBzZWxlY3RvcnMgb3IgZXZlbnQgb2JqZWN0IGFzIHBhcmFtZXRlclxuICogLSBbYG9uZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uZS8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzIG9yIHNlbGVjdG9yc1xuICogLSBbYHBhcmVudCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3BhcmVudC8pIC0gRG9lcyBub3Qgc3VwcG9ydCBzZWxlY3RvcnNcbiAqIC0gW2BwcmVwZW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcHJlcGVuZC8pXG4gKiAtIFtgcHJvcCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3Byb3AvKVxuICogLSBbYHJlYWR5KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVhZHkvKVxuICogLSBbYHJlbW92ZSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZS8pXG4gKiAtIFtgcmVtb3ZlQXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZUF0dHIvKVxuICogLSBbYHJlbW92ZUNsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQ2xhc3MvKVxuICogLSBbYHJlbW92ZURhdGEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVEYXRhLylcbiAqIC0gW2ByZXBsYWNlV2l0aCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlcGxhY2VXaXRoLylcbiAqIC0gW2B0ZXh0KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdGV4dC8pXG4gKiAtIFtgdG9nZ2xlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90b2dnbGVDbGFzcy8pXG4gKiAtIFtgdHJpZ2dlckhhbmRsZXIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90cmlnZ2VySGFuZGxlci8pIC0gUGFzc2VzIGEgZHVtbXkgZXZlbnQgb2JqZWN0IHRvIGhhbmRsZXJzLlxuICogLSBbYHVuYmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3VuYmluZC8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzIG9yIGV2ZW50IG9iamVjdCBhcyBwYXJhbWV0ZXJcbiAqIC0gW2B2YWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS92YWwvKVxuICogLSBbYHdyYXAoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS93cmFwLylcbiAqXG4gKiAjIyBqUXVlcnkvanFMaXRlIEV4dHJhc1xuICogQW5ndWxhciBhbHNvIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgYWRkaXRpb25hbCBtZXRob2RzIGFuZCBldmVudHMgdG8gYm90aCBqUXVlcnkgYW5kIGpxTGl0ZTpcbiAqXG4gKiAjIyMgRXZlbnRzXG4gKiAtIGAkZGVzdHJveWAgLSBBbmd1bGFySlMgaW50ZXJjZXB0cyBhbGwganFMaXRlL2pRdWVyeSdzIERPTSBkZXN0cnVjdGlvbiBhcGlzIGFuZCBmaXJlcyB0aGlzIGV2ZW50XG4gKiAgICBvbiBhbGwgRE9NIG5vZGVzIGJlaW5nIHJlbW92ZWQuICBUaGlzIGNhbiBiZSB1c2VkIHRvIGNsZWFuIHVwIGFueSAzcmQgcGFydHkgYmluZGluZ3MgdG8gdGhlIERPTVxuICogICAgZWxlbWVudCBiZWZvcmUgaXQgaXMgcmVtb3ZlZC5cbiAqXG4gKiAjIyMgTWV0aG9kc1xuICogLSBgY29udHJvbGxlcihuYW1lKWAgLSByZXRyaWV2ZXMgdGhlIGNvbnRyb2xsZXIgb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LiBCeSBkZWZhdWx0XG4gKiAgIHJldHJpZXZlcyBjb250cm9sbGVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgYG5nQ29udHJvbGxlcmAgZGlyZWN0aXZlLiBJZiBgbmFtZWAgaXMgcHJvdmlkZWQgYXNcbiAqICAgY2FtZWxDYXNlIGRpcmVjdGl2ZSBuYW1lLCB0aGVuIHRoZSBjb250cm9sbGVyIGZvciB0aGlzIGRpcmVjdGl2ZSB3aWxsIGJlIHJldHJpZXZlZCAoZS5nLlxuICogICBgJ25nTW9kZWwnYCkuXG4gKiAtIGBpbmplY3RvcigpYCAtIHJldHJpZXZlcyB0aGUgaW5qZWN0b3Igb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LlxuICogLSBgc2NvcGUoKWAgLSByZXRyaWV2ZXMgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfSBvZiB0aGUgY3VycmVudFxuICogICBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIFJlcXVpcmVzIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERlYnVnIERhdGF9IHRvXG4gKiAgIGJlIGVuYWJsZWQuXG4gKiAtIGBpc29sYXRlU2NvcGUoKWAgLSByZXRyaWV2ZXMgYW4gaXNvbGF0ZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0gaWYgb25lIGlzIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZVxuICogICBjdXJyZW50IGVsZW1lbnQuIFRoaXMgZ2V0dGVyIHNob3VsZCBiZSB1c2VkIG9ubHkgb24gZWxlbWVudHMgdGhhdCBjb250YWluIGEgZGlyZWN0aXZlIHdoaWNoIHN0YXJ0cyBhIG5ldyBpc29sYXRlXG4gKiAgIHNjb3BlLiBDYWxsaW5nIGBzY29wZSgpYCBvbiB0aGlzIGVsZW1lbnQgYWx3YXlzIHJldHVybnMgdGhlIG9yaWdpbmFsIG5vbi1pc29sYXRlIHNjb3BlLlxuICogICBSZXF1aXJlcyB7QGxpbmsgZ3VpZGUvcHJvZHVjdGlvbiNkaXNhYmxpbmctZGVidWctZGF0YSBEZWJ1ZyBEYXRhfSB0byBiZSBlbmFibGVkLlxuICogLSBgaW5oZXJpdGVkRGF0YSgpYCAtIHNhbWUgYXMgYGRhdGEoKWAsIGJ1dCB3YWxrcyB1cCB0aGUgRE9NIHVudGlsIGEgdmFsdWUgaXMgZm91bmQgb3IgdGhlIHRvcFxuICogICBwYXJlbnQgZWxlbWVudCBpcyByZWFjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgSFRNTCBzdHJpbmcgb3IgRE9NRWxlbWVudCB0byBiZSB3cmFwcGVkIGludG8galF1ZXJ5LlxuICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdC5cbiAqL1xuXG5KUUxpdGUuZXhwYW5kbyA9ICduZzMzOSc7XG5cbnZhciBqcUNhY2hlID0gSlFMaXRlLmNhY2hlID0ge30sXG4gICAganFJZCA9IDEsXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZuID0gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuICAgIH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuID0gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuICAgIH07XG5cbi8qXG4gKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgXCJwcml2YXRlXCIgZnVuY3Rpb24gISEhXG4gKi9cbkpRTGl0ZS5fZGF0YSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgLy9qUXVlcnkgYWx3YXlzIHJldHVybnMgYW4gb2JqZWN0IG9uIGNhY2hlIG1pc3NcbiAgcmV0dXJuIHRoaXMuY2FjaGVbbm9kZVt0aGlzLmV4cGFuZG9dXSB8fCB7fTtcbn07XG5cbmZ1bmN0aW9uIGpxTmV4dElkKCkgeyByZXR1cm4gKytqcUlkOyB9XG5cblxudmFyIFNQRUNJQUxfQ0hBUlNfUkVHRVhQID0gLyhbXFw6XFwtXFxfXSsoLikpL2c7XG52YXIgTU9aX0hBQ0tfUkVHRVhQID0gL15tb3ooW0EtWl0pLztcbnZhciBNT1VTRV9FVkVOVF9NQVA9IHsgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLCBtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwifTtcbnZhciBqcUxpdGVNaW5FcnIgPSBtaW5FcnIoJ2pxTGl0ZScpO1xuXG4vKipcbiAqIENvbnZlcnRzIHNuYWtlX2Nhc2UgdG8gY2FtZWxDYXNlLlxuICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci5cbiAqIEBwYXJhbSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gKi9cbmZ1bmN0aW9uIGNhbWVsQ2FzZShuYW1lKSB7XG4gIHJldHVybiBuYW1lLlxuICAgIHJlcGxhY2UoU1BFQ0lBTF9DSEFSU19SRUdFWFAsIGZ1bmN0aW9uKF8sIHNlcGFyYXRvciwgbGV0dGVyLCBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBvZmZzZXQgPyBsZXR0ZXIudG9VcHBlckNhc2UoKSA6IGxldHRlcjtcbiAgICB9KS5cbiAgICByZXBsYWNlKE1PWl9IQUNLX1JFR0VYUCwgJ01veiQxJyk7XG59XG5cbnZhciBTSU5HTEVfVEFHX1JFR0VYUCA9IC9ePChbXFx3LV0rKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLztcbnZhciBIVE1MX1JFR0VYUCA9IC88fCYjP1xcdys7LztcbnZhciBUQUdfTkFNRV9SRUdFWFAgPSAvPChbXFx3Oi1dKykvO1xudmFyIFhIVE1MX1RBR19SRUdFWFAgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpO1xuXG52YXIgd3JhcE1hcCA9IHtcbiAgJ29wdGlvbic6IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cIm11bHRpcGxlXCI+JywgJzwvc2VsZWN0PiddLFxuXG4gICd0aGVhZCc6IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddLFxuICAnY29sJzogWzIsICc8dGFibGU+PGNvbGdyb3VwPicsICc8L2NvbGdyb3VwPjwvdGFibGU+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuICAndGQnOiBbMywgJzx0YWJsZT48dGJvZHk+PHRyPicsICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nXSxcbiAgJ19kZWZhdWx0JzogWzAsIFwiXCIsIFwiXCJdXG59O1xuXG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24ganFMaXRlSXNUZXh0Tm9kZShodG1sKSB7XG4gIHJldHVybiAhSFRNTF9SRUdFWFAudGVzdChodG1sKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlQWNjZXB0c0RhdGEobm9kZSkge1xuICAvLyBUaGUgd2luZG93IG9iamVjdCBjYW4gYWNjZXB0IGRhdGEgYnV0IGhhcyBubyBub2RlVHlwZVxuICAvLyBPdGhlcndpc2Ugd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBlbGVtZW50cyAoMSkgYW5kIGRvY3VtZW50cyAoOSlcbiAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgcmV0dXJuIG5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCB8fCAhbm9kZVR5cGUgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9ET0NVTUVOVDtcbn1cblxuZnVuY3Rpb24ganFMaXRlSGFzRGF0YShub2RlKSB7XG4gIGZvciAodmFyIGtleSBpbiBqcUNhY2hlW25vZGUubmczMzldKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVCdWlsZEZyYWdtZW50KGh0bWwsIGNvbnRleHQpIHtcbiAgdmFyIHRtcCwgdGFnLCB3cmFwLFxuICAgICAgZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgIG5vZGVzID0gW10sIGk7XG5cbiAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoaHRtbCkpIHtcbiAgICAvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcbiAgICBub2Rlcy5wdXNoKGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoaHRtbCkpO1xuICB9IGVsc2Uge1xuICAgIC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuICAgIHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZChjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO1xuICAgIHRhZyA9IChUQUdfTkFNRV9SRUdFWFAuZXhlYyhodG1sKSB8fCBbXCJcIiwgXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgd3JhcCA9IHdyYXBNYXBbdGFnXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuICAgIHRtcC5pbm5lckhUTUwgPSB3cmFwWzFdICsgaHRtbC5yZXBsYWNlKFhIVE1MX1RBR19SRUdFWFAsIFwiPCQxPjwvJDI+XCIpICsgd3JhcFsyXTtcblxuICAgIC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuICAgIGkgPSB3cmFwWzBdO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgbm9kZXMgPSBjb25jYXQobm9kZXMsIHRtcC5jaGlsZE5vZGVzKTtcblxuICAgIHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG4gICAgdG1wLnRleHRDb250ZW50ID0gXCJcIjtcbiAgfVxuXG4gIC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcbiAgZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuICBmcmFnbWVudC5pbm5lckhUTUwgPSBcIlwiOyAvLyBDbGVhciBpbm5lciBIVE1MXG4gIGZvckVhY2gobm9kZXMsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZyYWdtZW50O1xufVxuXG5mdW5jdGlvbiBqcUxpdGVQYXJzZUhUTUwoaHRtbCwgY29udGV4dCkge1xuICBjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcbiAgdmFyIHBhcnNlZDtcblxuICBpZiAoKHBhcnNlZCA9IFNJTkdMRV9UQUdfUkVHRVhQLmV4ZWMoaHRtbCkpKSB7XG4gICAgcmV0dXJuIFtjb250ZXh0LmNyZWF0ZUVsZW1lbnQocGFyc2VkWzFdKV07XG4gIH1cblxuICBpZiAoKHBhcnNlZCA9IGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkpKSB7XG4gICAgcmV0dXJuIHBhcnNlZC5jaGlsZE5vZGVzO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG5cbi8vIElFOS0xMSBoYXMgbm8gbWV0aG9kIFwiY29udGFpbnNcIiBpbiBTVkcgZWxlbWVudCBhbmQgaW4gTm9kZS5wcm90b3R5cGUuIEJ1ZyAjMTAyNTkuXG52YXIganFMaXRlQ29udGFpbnMgPSBOb2RlLnByb3RvdHlwZS5jb250YWlucyB8fCBmdW5jdGlvbihhcmcpIHtcbiAgLy8ganNoaW50IGJpdHdpc2U6IGZhbHNlXG4gIHJldHVybiAhISh0aGlzLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGFyZykgJiAxNik7XG4gIC8vIGpzaGludCBiaXR3aXNlOiB0cnVlXG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmZ1bmN0aW9uIEpRTGl0ZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSlFMaXRlKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICB2YXIgYXJnSXNTdHJpbmc7XG5cbiAgaWYgKGlzU3RyaW5nKGVsZW1lbnQpKSB7XG4gICAgZWxlbWVudCA9IHRyaW0oZWxlbWVudCk7XG4gICAgYXJnSXNTdHJpbmcgPSB0cnVlO1xuICB9XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBKUUxpdGUpKSB7XG4gICAgaWYgKGFyZ0lzU3RyaW5nICYmIGVsZW1lbnQuY2hhckF0KDApICE9ICc8Jykge1xuICAgICAgdGhyb3cganFMaXRlTWluRXJyKCdub3NlbCcsICdMb29raW5nIHVwIGVsZW1lbnRzIHZpYSBzZWxlY3RvcnMgaXMgbm90IHN1cHBvcnRlZCBieSBqcUxpdGUhIFNlZTogaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvYW5ndWxhci5lbGVtZW50Jyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSlFMaXRlKGVsZW1lbnQpO1xuICB9XG5cbiAgaWYgKGFyZ0lzU3RyaW5nKSB7XG4gICAganFMaXRlQWRkTm9kZXModGhpcywganFMaXRlUGFyc2VIVE1MKGVsZW1lbnQpKTtcbiAgfSBlbHNlIHtcbiAgICBqcUxpdGVBZGROb2Rlcyh0aGlzLCBlbGVtZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVDbG9uZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlRGVhbG9jKGVsZW1lbnQsIG9ubHlEZXNjZW5kYW50cykge1xuICBpZiAoIW9ubHlEZXNjZW5kYW50cykganFMaXRlUmVtb3ZlRGF0YShlbGVtZW50KTtcblxuICBpZiAoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKSB7XG4gICAgdmFyIGRlc2NlbmRhbnRzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcqJyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkZXNjZW5kYW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGpxTGl0ZVJlbW92ZURhdGEoZGVzY2VuZGFudHNbaV0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVPZmYoZWxlbWVudCwgdHlwZSwgZm4sIHVuc3VwcG9ydGVkKSB7XG4gIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29mZmFyZ3MnLCAnanFMaXRlI29mZigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgYXJndW1lbnQnKTtcblxuICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQpO1xuICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gIHZhciBoYW5kbGUgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmhhbmRsZTtcblxuICBpZiAoIWhhbmRsZSkgcmV0dXJuOyAvL25vIGxpc3RlbmVycyByZWdpc3RlcmVkXG5cbiAgaWYgKCF0eXBlKSB7XG4gICAgZm9yICh0eXBlIGluIGV2ZW50cykge1xuICAgICAgaWYgKHR5cGUgIT09ICckZGVzdHJveScpIHtcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGVsZW1lbnQsIHR5cGUsIGhhbmRsZSk7XG4gICAgICB9XG4gICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgIH1cbiAgfSBlbHNlIHtcblxuICAgIHZhciByZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24odHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVyRm5zID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGlzRGVmaW5lZChmbikpIHtcbiAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJGbnMgfHwgW10sIGZuKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGlzRGVmaW5lZChmbikgJiYgbGlzdGVuZXJGbnMgJiYgbGlzdGVuZXJGbnMubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKGVsZW1lbnQsIHR5cGUsIGhhbmRsZSk7XG4gICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvckVhY2godHlwZS5zcGxpdCgnICcpLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICByZW1vdmVIYW5kbGVyKHR5cGUpO1xuICAgICAgaWYgKE1PVVNFX0VWRU5UX01BUFt0eXBlXSkge1xuICAgICAgICByZW1vdmVIYW5kbGVyKE1PVVNFX0VWRU5UX01BUFt0eXBlXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlUmVtb3ZlRGF0YShlbGVtZW50LCBuYW1lKSB7XG4gIHZhciBleHBhbmRvSWQgPSBlbGVtZW50Lm5nMzM5O1xuICB2YXIgZXhwYW5kb1N0b3JlID0gZXhwYW5kb0lkICYmIGpxQ2FjaGVbZXhwYW5kb0lkXTtcblxuICBpZiAoZXhwYW5kb1N0b3JlKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIGRlbGV0ZSBleHBhbmRvU3RvcmUuZGF0YVtuYW1lXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXhwYW5kb1N0b3JlLmhhbmRsZSkge1xuICAgICAgaWYgKGV4cGFuZG9TdG9yZS5ldmVudHMuJGRlc3Ryb3kpIHtcbiAgICAgICAgZXhwYW5kb1N0b3JlLmhhbmRsZSh7fSwgJyRkZXN0cm95Jyk7XG4gICAgICB9XG4gICAgICBqcUxpdGVPZmYoZWxlbWVudCk7XG4gICAgfVxuICAgIGRlbGV0ZSBqcUNhY2hlW2V4cGFuZG9JZF07XG4gICAgZWxlbWVudC5uZzMzOSA9IHVuZGVmaW5lZDsgLy8gZG9uJ3QgZGVsZXRlIERPTSBleHBhbmRvcy4gSUUgYW5kIENocm9tZSBkb24ndCBsaWtlIGl0XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgY3JlYXRlSWZOZWNlc3NhcnkpIHtcbiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnQubmczMzksXG4gICAgICBleHBhbmRvU3RvcmUgPSBleHBhbmRvSWQgJiYganFDYWNoZVtleHBhbmRvSWRdO1xuXG4gIGlmIChjcmVhdGVJZk5lY2Vzc2FyeSAmJiAhZXhwYW5kb1N0b3JlKSB7XG4gICAgZWxlbWVudC5uZzMzOSA9IGV4cGFuZG9JZCA9IGpxTmV4dElkKCk7XG4gICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWRdID0ge2V2ZW50czoge30sIGRhdGE6IHt9LCBoYW5kbGU6IHVuZGVmaW5lZH07XG4gIH1cblxuICByZXR1cm4gZXhwYW5kb1N0b3JlO1xufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZURhdGEoZWxlbWVudCwga2V5LCB2YWx1ZSkge1xuICBpZiAoanFMaXRlQWNjZXB0c0RhdGEoZWxlbWVudCkpIHtcblxuICAgIHZhciBpc1NpbXBsZVNldHRlciA9IGlzRGVmaW5lZCh2YWx1ZSk7XG4gICAgdmFyIGlzU2ltcGxlR2V0dGVyID0gIWlzU2ltcGxlU2V0dGVyICYmIGtleSAmJiAhaXNPYmplY3Qoa2V5KTtcbiAgICB2YXIgbWFzc0dldHRlciA9ICFrZXk7XG4gICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAhaXNTaW1wbGVHZXR0ZXIpO1xuICAgIHZhciBkYXRhID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5kYXRhO1xuXG4gICAgaWYgKGlzU2ltcGxlU2V0dGVyKSB7IC8vIGRhdGEoJ2tleScsIHZhbHVlKVxuICAgICAgZGF0YVtrZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtYXNzR2V0dGVyKSB7ICAvLyBkYXRhKClcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNTaW1wbGVHZXR0ZXIpIHsgLy8gZGF0YSgna2V5JylcbiAgICAgICAgICAvLyBkb24ndCBmb3JjZSBjcmVhdGlvbiBvZiBleHBhbmRvU3RvcmUgaWYgaXQgZG9lc24ndCBleGlzdCB5ZXRcbiAgICAgICAgICByZXR1cm4gZGF0YSAmJiBkYXRhW2tleV07XG4gICAgICAgIH0gZWxzZSB7IC8vIG1hc3Mtc2V0dGVyOiBkYXRhKHtrZXkxOiB2YWwxLCBrZXkyOiB2YWwyfSlcbiAgICAgICAgICBleHRlbmQoZGF0YSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVIYXNDbGFzcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICBpZiAoIWVsZW1lbnQuZ2V0QXR0cmlidXRlKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAoKFwiIFwiICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiKS5yZXBsYWNlKC9bXFxuXFx0XS9nLCBcIiBcIikuXG4gICAgICBpbmRleE9mKFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIikgPiAtMSk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVJlbW92ZUNsYXNzKGVsZW1lbnQsIGNzc0NsYXNzZXMpIHtcbiAgaWYgKGNzc0NsYXNzZXMgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUpIHtcbiAgICBmb3JFYWNoKGNzc0NsYXNzZXMuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY3NzQ2xhc3MpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRyaW0oXG4gICAgICAgICAgKFwiIFwiICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiKVxuICAgICAgICAgIC5yZXBsYWNlKC9bXFxuXFx0XS9nLCBcIiBcIilcbiAgICAgICAgICAucmVwbGFjZShcIiBcIiArIHRyaW0oY3NzQ2xhc3MpICsgXCIgXCIsIFwiIFwiKSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlQWRkQ2xhc3MoZWxlbWVudCwgY3NzQ2xhc3Nlcykge1xuICBpZiAoY3NzQ2xhc3NlcyAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgIHZhciBleGlzdGluZ0NsYXNzZXMgPSAoJyAnICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArICcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1xcblxcdF0vZywgXCIgXCIpO1xuXG4gICAgZm9yRWFjaChjc3NDbGFzc2VzLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNzc0NsYXNzKSB7XG4gICAgICBjc3NDbGFzcyA9IHRyaW0oY3NzQ2xhc3MpO1xuICAgICAgaWYgKGV4aXN0aW5nQ2xhc3Nlcy5pbmRleE9mKCcgJyArIGNzc0NsYXNzICsgJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgZXhpc3RpbmdDbGFzc2VzICs9IGNzc0NsYXNzICsgJyAnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdHJpbShleGlzdGluZ0NsYXNzZXMpKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZUFkZE5vZGVzKHJvb3QsIGVsZW1lbnRzKSB7XG4gIC8vIFRISVMgQ09ERSBJUyBWRVJZIEhPVC4gRG9uJ3QgbWFrZSBjaGFuZ2VzIHdpdGhvdXQgYmVuY2htYXJraW5nLlxuXG4gIGlmIChlbGVtZW50cykge1xuXG4gICAgLy8gaWYgYSBOb2RlICh0aGUgbW9zdCBjb21tb24gY2FzZSlcbiAgICBpZiAoZWxlbWVudHMubm9kZVR5cGUpIHtcbiAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50cztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgLy8gaWYgYW4gQXJyYXkgb3IgTm9kZUxpc3QgYW5kIG5vdCBhIFdpbmRvd1xuICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInICYmIGVsZW1lbnRzLndpbmRvdyAhPT0gZWxlbWVudHMpIHtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50c1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50cztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVDb250cm9sbGVyKGVsZW1lbnQsIG5hbWUpIHtcbiAgcmV0dXJuIGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudCwgJyQnICsgKG5hbWUgfHwgJ25nQ29udHJvbGxlcicpICsgJ0NvbnRyb2xsZXInKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAvLyBpZiBlbGVtZW50IGlzIHRoZSBkb2N1bWVudCBvYmplY3Qgd29yayB3aXRoIHRoZSBodG1sIGVsZW1lbnQgaW5zdGVhZFxuICAvLyB0aGlzIG1ha2VzICQoZG9jdW1lbnQpLnNjb3BlKCkgcG9zc2libGVcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT0gTk9ERV9UWVBFX0RPQ1VNRU5UKSB7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIHZhciBuYW1lcyA9IGlzQXJyYXkobmFtZSkgPyBuYW1lIDogW25hbWVdO1xuXG4gIHdoaWxlIChlbGVtZW50KSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbmFtZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSA9IGpxTGl0ZS5kYXRhKGVsZW1lbnQsIG5hbWVzW2ldKSkpIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBJZiBkZWFsaW5nIHdpdGggYSBkb2N1bWVudCBmcmFnbWVudCBub2RlIHdpdGggYSBob3N0IGVsZW1lbnQsIGFuZCBubyBwYXJlbnQsIHVzZSB0aGUgaG9zdFxuICAgIC8vIGVsZW1lbnQgYXMgdGhlIHBhcmVudC4gVGhpcyBlbmFibGVzIGRpcmVjdGl2ZXMgd2l0aGluIGEgU2hhZG93IERPTSBvciBwb2x5ZmlsbGVkIFNoYWRvdyBET01cbiAgICAvLyB0byBsb29rdXAgcGFyZW50IGNvbnRyb2xsZXJzLlxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUgfHwgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCAmJiBlbGVtZW50Lmhvc3QpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUVtcHR5KGVsZW1lbnQpIHtcbiAganFMaXRlRGVhbG9jKGVsZW1lbnQsIHRydWUpO1xuICB3aGlsZSAoZWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVJlbW92ZShlbGVtZW50LCBrZWVwRGF0YSkge1xuICBpZiAoIWtlZXBEYXRhKSBqcUxpdGVEZWFsb2MoZWxlbWVudCk7XG4gIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZChlbGVtZW50KTtcbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVEb2N1bWVudExvYWRlZChhY3Rpb24sIHdpbikge1xuICB3aW4gPSB3aW4gfHwgd2luZG93O1xuICBpZiAod2luLmRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAvLyBGb3JjZSB0aGUgYWN0aW9uIHRvIGJlIHJ1biBhc3luYyBmb3IgY29uc2lzdGVudCBiZWhhdmlvdXJcbiAgICAvLyBmcm9tIHRoZSBhY3Rpb24ncyBwb2ludCBvZiB2aWV3XG4gICAgLy8gaS5lLiBpdCB3aWxsIGRlZmluaXRlbHkgbm90IGJlIGluIGEgJGFwcGx5XG4gICAgd2luLnNldFRpbWVvdXQoYWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBObyBuZWVkIHRvIHVuYmluZCB0aGlzIGhhbmRsZXIgYXMgbG9hZCBpcyBvbmx5IGV2ZXIgY2FsbGVkIG9uY2VcbiAgICBqcUxpdGUod2luKS5vbignbG9hZCcsIGFjdGlvbik7XG4gIH1cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGdW5jdGlvbnMgd2hpY2ggYXJlIGRlY2xhcmVkIGRpcmVjdGx5LlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG52YXIgSlFMaXRlUHJvdG90eXBlID0gSlFMaXRlLnByb3RvdHlwZSA9IHtcbiAgcmVhZHk6IGZ1bmN0aW9uKGZuKSB7XG4gICAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiB0cmlnZ2VyKCkge1xuICAgICAgaWYgKGZpcmVkKSByZXR1cm47XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBmbigpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGRvY3VtZW50IGlzIGFscmVhZHkgbG9hZGVkXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgIHNldFRpbWVvdXQodHJpZ2dlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub24oJ0RPTUNvbnRlbnRMb2FkZWQnLCB0cmlnZ2VyKTsgLy8gd29ya3MgZm9yIG1vZGVybiBicm93c2VycyBhbmQgSUU5XG4gICAgICAvLyB3ZSBjYW4gbm90IHVzZSBqcUxpdGUgc2luY2Ugd2UgYXJlIG5vdCBkb25lIGxvYWRpbmcgYW5kIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgbGF0ZXIuXG4gICAgICAvLyBqc2hpbnQgLVcwNjRcbiAgICAgIEpRTGl0ZSh3aW5kb3cpLm9uKCdsb2FkJywgdHJpZ2dlcik7IC8vIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQgZm9yIG90aGVyc1xuICAgICAgLy8ganNoaW50ICtXMDY0XG4gICAgfVxuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gW107XG4gICAgZm9yRWFjaCh0aGlzLCBmdW5jdGlvbihlKSB7IHZhbHVlLnB1c2goJycgKyBlKTt9KTtcbiAgICByZXR1cm4gJ1snICsgdmFsdWUuam9pbignLCAnKSArICddJztcbiAgfSxcblxuICBlcTogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiAoaW5kZXggPj0gMCkgPyBqcUxpdGUodGhpc1tpbmRleF0pIDoganFMaXRlKHRoaXNbdGhpcy5sZW5ndGggKyBpbmRleF0pO1xuICB9LFxuXG4gIGxlbmd0aDogMCxcbiAgcHVzaDogcHVzaCxcbiAgc29ydDogW10uc29ydCxcbiAgc3BsaWNlOiBbXS5zcGxpY2Vcbn07XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRnVuY3Rpb25zIGl0ZXJhdGluZyBnZXR0ZXIvc2V0dGVycy5cbi8vIHRoZXNlIGZ1bmN0aW9ucyByZXR1cm4gc2VsZiBvbiBzZXR0ZXIgYW5kXG4vLyB2YWx1ZSBvbiBnZXQuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnZhciBCT09MRUFOX0FUVFIgPSB7fTtcbmZvckVhY2goJ211bHRpcGxlLHNlbGVjdGVkLGNoZWNrZWQsZGlzYWJsZWQscmVhZE9ubHkscmVxdWlyZWQsb3Blbicuc3BsaXQoJywnKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgQk9PTEVBTl9BVFRSW2xvd2VyY2FzZSh2YWx1ZSldID0gdmFsdWU7XG59KTtcbnZhciBCT09MRUFOX0VMRU1FTlRTID0ge307XG5mb3JFYWNoKCdpbnB1dCxzZWxlY3Qsb3B0aW9uLHRleHRhcmVhLGJ1dHRvbixmb3JtLGRldGFpbHMnLnNwbGl0KCcsJyksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gIEJPT0xFQU5fRUxFTUVOVFNbdmFsdWVdID0gdHJ1ZTtcbn0pO1xudmFyIEFMSUFTRURfQVRUUiA9IHtcbiAgJ25nTWlubGVuZ3RoJzogJ21pbmxlbmd0aCcsXG4gICduZ01heGxlbmd0aCc6ICdtYXhsZW5ndGgnLFxuICAnbmdNaW4nOiAnbWluJyxcbiAgJ25nTWF4JzogJ21heCcsXG4gICduZ1BhdHRlcm4nOiAncGF0dGVybidcbn07XG5cbmZ1bmN0aW9uIGdldEJvb2xlYW5BdHRyTmFtZShlbGVtZW50LCBuYW1lKSB7XG4gIC8vIGNoZWNrIGRvbSBsYXN0IHNpbmNlIHdlIHdpbGwgbW9zdCBsaWtlbHkgZmFpbCBvbiBuYW1lXG4gIHZhciBib29sZWFuQXR0ciA9IEJPT0xFQU5fQVRUUltuYW1lLnRvTG93ZXJDYXNlKCldO1xuXG4gIC8vIGJvb2xlYW5BdHRyIGlzIGhlcmUgdHdpY2UgdG8gbWluaW1pemUgRE9NIGFjY2Vzc1xuICByZXR1cm4gYm9vbGVhbkF0dHIgJiYgQk9PTEVBTl9FTEVNRU5UU1tub2RlTmFtZV8oZWxlbWVudCldICYmIGJvb2xlYW5BdHRyO1xufVxuXG5mdW5jdGlvbiBnZXRBbGlhc2VkQXR0ck5hbWUobmFtZSkge1xuICByZXR1cm4gQUxJQVNFRF9BVFRSW25hbWVdO1xufVxuXG5mb3JFYWNoKHtcbiAgZGF0YToganFMaXRlRGF0YSxcbiAgcmVtb3ZlRGF0YToganFMaXRlUmVtb3ZlRGF0YSxcbiAgaGFzRGF0YToganFMaXRlSGFzRGF0YVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgSlFMaXRlW25hbWVdID0gZm47XG59KTtcblxuZm9yRWFjaCh7XG4gIGRhdGE6IGpxTGl0ZURhdGEsXG4gIGluaGVyaXRlZERhdGE6IGpxTGl0ZUluaGVyaXRlZERhdGEsXG5cbiAgc2NvcGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAvLyBDYW4ndCB1c2UganFMaXRlRGF0YSBoZXJlIGRpcmVjdGx5IHNvIHdlIHN0YXkgY29tcGF0aWJsZSB3aXRoIGpRdWVyeSFcbiAgICByZXR1cm4ganFMaXRlLmRhdGEoZWxlbWVudCwgJyRzY29wZScpIHx8IGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQsIFsnJGlzb2xhdGVTY29wZScsICckc2NvcGUnXSk7XG4gIH0sXG5cbiAgaXNvbGF0ZVNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gQ2FuJ3QgdXNlIGpxTGl0ZURhdGEgaGVyZSBkaXJlY3RseSBzbyB3ZSBzdGF5IGNvbXBhdGlibGUgd2l0aCBqUXVlcnkhXG4gICAgcmV0dXJuIGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckaXNvbGF0ZVNjb3BlJykgfHwganFMaXRlLmRhdGEoZWxlbWVudCwgJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyk7XG4gIH0sXG5cbiAgY29udHJvbGxlcjoganFMaXRlQ29udHJvbGxlcixcblxuICBpbmplY3RvcjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckaW5qZWN0b3InKTtcbiAgfSxcblxuICByZW1vdmVBdHRyOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lKSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH0sXG5cbiAgaGFzQ2xhc3M6IGpxTGl0ZUhhc0NsYXNzLFxuXG4gIGNzczogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gY2FtZWxDYXNlKG5hbWUpO1xuXG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuc3R5bGVbbmFtZV07XG4gICAgfVxuICB9LFxuXG4gIGF0dHI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTtcbiAgICBpZiAobm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfQVRUUklCVVRFIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfQ09NTUVOVCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbG93ZXJjYXNlZE5hbWUgPSBsb3dlcmNhc2UobmFtZSk7XG4gICAgaWYgKEJPT0xFQU5fQVRUUltsb3dlcmNhc2VkTmFtZV0pIHtcbiAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIGlmICghIXZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudFtuYW1lXSA9IHRydWU7XG4gICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgbG93ZXJjYXNlZE5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnRbbmFtZV0gPSBmYWxzZTtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShsb3dlcmNhc2VkTmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoZWxlbWVudFtuYW1lXSB8fFxuICAgICAgICAgICAgICAgICAoZWxlbWVudC5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbShuYW1lKSB8fCBub29wKS5zcGVjaWZpZWQpXG4gICAgICAgICAgICAgICA/IGxvd2VyY2FzZWROYW1lXG4gICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7XG4gICAgICAvLyB0aGUgZXh0cmEgYXJndW1lbnQgXCIyXCIgaXMgdG8gZ2V0IHRoZSByaWdodCB0aGluZyBmb3IgYS5ocmVmIGluIElFLCBzZWUgalF1ZXJ5IGNvZGVcbiAgICAgIC8vIHNvbWUgZWxlbWVudHMgKGUuZy4gRG9jdW1lbnQpIGRvbid0IGhhdmUgZ2V0IGF0dHJpYnV0ZSwgc28gcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgdmFyIHJldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUsIDIpO1xuICAgICAgLy8gbm9ybWFsaXplIG5vbi1leGlzdGluZyBhdHRyaWJ1dGVzIHRvIHVuZGVmaW5lZCAoYXMgalF1ZXJ5KVxuICAgICAgcmV0dXJuIHJldCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcbiAgICB9XG4gIH0sXG5cbiAgcHJvcDogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgZWxlbWVudFtuYW1lXSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudFtuYW1lXTtcbiAgICB9XG4gIH0sXG5cbiAgdGV4dDogKGZ1bmN0aW9uKCkge1xuICAgIGdldFRleHQuJGR2ID0gJyc7XG4gICAgcmV0dXJuIGdldFRleHQ7XG5cbiAgICBmdW5jdGlvbiBnZXRUZXh0KGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIHZhciBub2RlVHlwZSA9IGVsZW1lbnQubm9kZVR5cGU7XG4gICAgICAgIHJldHVybiAobm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCkgPyBlbGVtZW50LnRleHRDb250ZW50IDogJyc7XG4gICAgICB9XG4gICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgfVxuICB9KSgpLFxuXG4gIHZhbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICBpZiAoZWxlbWVudC5tdWx0aXBsZSAmJiBub2RlTmFtZV8oZWxlbWVudCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yRWFjaChlbGVtZW50Lm9wdGlvbnMsIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDAgPyBudWxsIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnQudmFsdWU7XG4gICAgfVxuICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgfSxcblxuICBodG1sOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmlubmVySFRNTDtcbiAgICB9XG4gICAganFMaXRlRGVhbG9jKGVsZW1lbnQsIHRydWUpO1xuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH0sXG5cbiAgZW1wdHk6IGpxTGl0ZUVtcHR5XG59LCBmdW5jdGlvbihmbiwgbmFtZSkge1xuICAvKipcbiAgICogUHJvcGVydGllczogd3JpdGVzIHJldHVybiBzZWxlY3Rpb24sIHJlYWRzIHJldHVybiBmaXJzdCB2YWx1ZVxuICAgKi9cbiAgSlFMaXRlLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGFyZzEsIGFyZzIpIHtcbiAgICB2YXIgaSwga2V5O1xuICAgIHZhciBub2RlQ291bnQgPSB0aGlzLmxlbmd0aDtcblxuICAgIC8vIGpxTGl0ZUhhc0NsYXNzIGhhcyBvbmx5IHR3byBhcmd1bWVudHMsIGJ1dCBpcyBhIGdldHRlci1vbmx5IGZuLCBzbyB3ZSBuZWVkIHRvIHNwZWNpYWwtY2FzZSBpdFxuICAgIC8vIGluIGEgd2F5IHRoYXQgc3Vydml2ZXMgbWluaWZpY2F0aW9uLlxuICAgIC8vIGpxTGl0ZUVtcHR5IHRha2VzIG5vIGFyZ3VtZW50cyBidXQgaXMgYSBzZXR0ZXIuXG4gICAgaWYgKGZuICE9PSBqcUxpdGVFbXB0eSAmJlxuICAgICAgICAoaXNVbmRlZmluZWQoKGZuLmxlbmd0aCA9PSAyICYmIChmbiAhPT0ganFMaXRlSGFzQ2xhc3MgJiYgZm4gIT09IGpxTGl0ZUNvbnRyb2xsZXIpKSA/IGFyZzEgOiBhcmcyKSkpIHtcbiAgICAgIGlmIChpc09iamVjdChhcmcxKSkge1xuXG4gICAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBidXQgdGhlIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSB0aGUga2V5L3ZhbHVlc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgICAgICBpZiAoZm4gPT09IGpxTGl0ZURhdGEpIHtcbiAgICAgICAgICAgIC8vIGRhdGEoKSB0YWtlcyB0aGUgd2hvbGUgb2JqZWN0IGluIGpRdWVyeVxuICAgICAgICAgICAgZm4odGhpc1tpXSwgYXJnMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGFyZzEpIHtcbiAgICAgICAgICAgICAgZm4odGhpc1tpXSwga2V5LCBhcmcxW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyByZXR1cm4gc2VsZiBmb3IgY2hhaW5pbmdcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB3ZSBhcmUgYSByZWFkLCBzbyByZWFkIHRoZSBmaXJzdCBjaGlsZC5cbiAgICAgICAgLy8gVE9ETzogZG8gd2Ugc3RpbGwgbmVlZCB0aGlzP1xuICAgICAgICB2YXIgdmFsdWUgPSBmbi4kZHY7XG4gICAgICAgIC8vIE9ubHkgaWYgd2UgaGF2ZSAkZHYgZG8gd2UgaXRlcmF0ZSBvdmVyIGFsbCwgb3RoZXJ3aXNlIGl0IGlzIGp1c3QgdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAgICAgIHZhciBqaiA9IChpc1VuZGVmaW5lZCh2YWx1ZSkpID8gTWF0aC5taW4obm9kZUNvdW50LCAxKSA6IG5vZGVDb3VudDtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgdmFyIG5vZGVWYWx1ZSA9IGZuKHRoaXNbal0sIGFyZzEsIGFyZzIpO1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUgPyB2YWx1ZSArIG5vZGVWYWx1ZSA6IG5vZGVWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBzbyBhcHBseSB0byBhbGwgY2hpbGRyZW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xuICAgICAgICBmbih0aGlzW2ldLCBhcmcxLCBhcmcyKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZ1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudHMpIHtcbiAgdmFyIGV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50LCB0eXBlKSB7XG4gICAgLy8galF1ZXJ5IHNwZWNpZmljIGFwaVxuICAgIGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgfTtcblxuICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlIHx8IGV2ZW50LnR5cGVdO1xuICAgIHZhciBldmVudEZuc0xlbmd0aCA9IGV2ZW50Rm5zID8gZXZlbnRGbnMubGVuZ3RoIDogMDtcblxuICAgIGlmICghZXZlbnRGbnNMZW5ndGgpIHJldHVybjtcblxuICAgIGlmIChpc1VuZGVmaW5lZChldmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQpKSB7XG4gICAgICB2YXIgb3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb247XG4gICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3JpZ2luYWxTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICBvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbi5jYWxsKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9PT0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLy8gU29tZSBldmVudHMgaGF2ZSBzcGVjaWFsIGhhbmRsZXJzIHRoYXQgd3JhcCB0aGUgcmVhbCBoYW5kbGVyXG4gICAgdmFyIGhhbmRsZXJXcmFwcGVyID0gZXZlbnRGbnMuc3BlY2lhbEhhbmRsZXJXcmFwcGVyIHx8IGRlZmF1bHRIYW5kbGVyV3JhcHBlcjtcblxuICAgIC8vIENvcHkgZXZlbnQgaGFuZGxlcnMgaW4gY2FzZSBldmVudCBoYW5kbGVycyBhcnJheSBpcyBtb2RpZmllZCBkdXJpbmcgZXhlY3V0aW9uLlxuICAgIGlmICgoZXZlbnRGbnNMZW5ndGggPiAxKSkge1xuICAgICAgZXZlbnRGbnMgPSBzaGFsbG93Q29weShldmVudEZucyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudEZuc0xlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgaGFuZGxlcldyYXBwZXIoZWxlbWVudCwgZXZlbnQsIGV2ZW50Rm5zW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2sgZm9yIGFuZ3VsYXJNb2Nrcy9jbGVhckRhdGFDYWNoZSB0aGF0IG1ha2VzIGl0IHBvc3NpYmxlIHRvIGRlcmVnaXN0ZXIgYWxsXG4gIC8vICAgICAgIGV2ZW50cyBvbiBgZWxlbWVudGBcbiAgZXZlbnRIYW5kbGVyLmVsZW0gPSBlbGVtZW50O1xuICByZXR1cm4gZXZlbnRIYW5kbGVyO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0SGFuZGxlcldyYXBwZXIoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpIHtcbiAgaGFuZGxlci5jYWxsKGVsZW1lbnQsIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gc3BlY2lhbE1vdXNlSGFuZGxlcldyYXBwZXIodGFyZ2V0LCBldmVudCwgaGFuZGxlcikge1xuICAvLyBSZWZlciB0byBqUXVlcnkncyBpbXBsZW1lbnRhdGlvbiBvZiBtb3VzZWVudGVyICYgbW91c2VsZWF2ZVxuICAvLyBSZWFkIGFib3V0IG1vdXNlZW50ZXIgYW5kIG1vdXNlbGVhdmU6XG4gIC8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZXZlbnRzX21vdXNlLmh0bWwjbGluazhcbiAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAvLyBGb3IgbW91c2VudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG4gIC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG4gIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqcUxpdGVDb250YWlucy5jYWxsKHRhcmdldCwgcmVsYXRlZCkpKSB7XG4gICAgaGFuZGxlci5jYWxsKHRhcmdldCwgZXZlbnQpO1xuICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRnVuY3Rpb25zIGl0ZXJhdGluZyB0cmF2ZXJzYWwuXG4vLyBUaGVzZSBmdW5jdGlvbnMgY2hhaW4gcmVzdWx0cyBpbnRvIGEgc2luZ2xlXG4vLyBzZWxlY3Rvci5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZm9yRWFjaCh7XG4gIHJlbW92ZURhdGE6IGpxTGl0ZVJlbW92ZURhdGEsXG5cbiAgb246IGZ1bmN0aW9uIGpxTGl0ZU9uKGVsZW1lbnQsIHR5cGUsIGZuLCB1bnN1cHBvcnRlZCkge1xuICAgIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29uYXJncycsICdqcUxpdGUjb24oKSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBgc2VsZWN0b3JgIG9yIGBldmVudERhdGFgIHBhcmFtZXRlcnMnKTtcblxuICAgIC8vIERvIG5vdCBhZGQgZXZlbnQgaGFuZGxlcnMgdG8gbm9uLWVsZW1lbnRzIGJlY2F1c2UgdGhleSB3aWxsIG5vdCBiZSBjbGVhbmVkIHVwLlxuICAgIGlmICghanFMaXRlQWNjZXB0c0RhdGEoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsIHRydWUpO1xuICAgIHZhciBldmVudHMgPSBleHBhbmRvU3RvcmUuZXZlbnRzO1xuICAgIHZhciBoYW5kbGUgPSBleHBhbmRvU3RvcmUuaGFuZGxlO1xuXG4gICAgaWYgKCFoYW5kbGUpIHtcbiAgICAgIGhhbmRsZSA9IGV4cGFuZG9TdG9yZS5oYW5kbGUgPSBjcmVhdGVFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnRzKTtcbiAgICB9XG5cbiAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9zdHJpbmctaW5kZXhvZi12cy1zcGxpdFxuICAgIHZhciB0eXBlcyA9IHR5cGUuaW5kZXhPZignICcpID49IDAgPyB0eXBlLnNwbGl0KCcgJykgOiBbdHlwZV07XG4gICAgdmFyIGkgPSB0eXBlcy5sZW5ndGg7XG5cbiAgICB2YXIgYWRkSGFuZGxlciA9IGZ1bmN0aW9uKHR5cGUsIHNwZWNpYWxIYW5kbGVyV3JhcHBlciwgbm9FdmVudExpc3RlbmVyKSB7XG4gICAgICB2YXIgZXZlbnRGbnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICghZXZlbnRGbnMpIHtcbiAgICAgICAgZXZlbnRGbnMgPSBldmVudHNbdHlwZV0gPSBbXTtcbiAgICAgICAgZXZlbnRGbnMuc3BlY2lhbEhhbmRsZXJXcmFwcGVyID0gc3BlY2lhbEhhbmRsZXJXcmFwcGVyO1xuICAgICAgICBpZiAodHlwZSAhPT0gJyRkZXN0cm95JyAmJiAhbm9FdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lckZuKGVsZW1lbnQsIHR5cGUsIGhhbmRsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZXZlbnRGbnMucHVzaChmbik7XG4gICAgfTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHR5cGUgPSB0eXBlc1tpXTtcbiAgICAgIGlmIChNT1VTRV9FVkVOVF9NQVBbdHlwZV0pIHtcbiAgICAgICAgYWRkSGFuZGxlcihNT1VTRV9FVkVOVF9NQVBbdHlwZV0sIHNwZWNpYWxNb3VzZUhhbmRsZXJXcmFwcGVyKTtcbiAgICAgICAgYWRkSGFuZGxlcih0eXBlLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkSGFuZGxlcih0eXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgb2ZmOiBqcUxpdGVPZmYsXG5cbiAgb25lOiBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikge1xuICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7XG5cbiAgICAvL2FkZCB0aGUgbGlzdGVuZXIgdHdpY2Ugc28gdGhhdCB3aGVuIGl0IGlzIGNhbGxlZFxuICAgIC8veW91IGNhbiByZW1vdmUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGFuZCBzdGlsbCBiZVxuICAgIC8vYWJsZSB0byBjYWxsIGVsZW1lbnQub2ZmKGV2LCBmbikgbm9ybWFsbHlcbiAgICBlbGVtZW50Lm9uKHR5cGUsIGZ1bmN0aW9uIG9uRm4oKSB7XG4gICAgICBlbGVtZW50Lm9mZih0eXBlLCBmbik7XG4gICAgICBlbGVtZW50Lm9mZih0eXBlLCBvbkZuKTtcbiAgICB9KTtcbiAgICBlbGVtZW50Lm9uKHR5cGUsIGZuKTtcbiAgfSxcblxuICByZXBsYWNlV2l0aDogZnVuY3Rpb24oZWxlbWVudCwgcmVwbGFjZU5vZGUpIHtcbiAgICB2YXIgaW5kZXgsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBqcUxpdGVEZWFsb2MoZWxlbWVudCk7XG4gICAgZm9yRWFjaChuZXcgSlFMaXRlKHJlcGxhY2VOb2RlKSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChub2RlLCBlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gbm9kZTtcbiAgICB9KTtcbiAgfSxcblxuICBjaGlsZHJlbjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgIGZvckVhY2goZWxlbWVudC5jaGlsZE5vZGVzLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH0sXG5cbiAgY29udGVudHM6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5jb250ZW50RG9jdW1lbnQgfHwgZWxlbWVudC5jaGlsZE5vZGVzIHx8IFtdO1xuICB9LFxuXG4gIGFwcGVuZDogZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkge1xuICAgIHZhciBub2RlVHlwZSA9IGVsZW1lbnQubm9kZVR5cGU7XG4gICAgaWYgKG5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRUxFTUVOVCAmJiBub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UKSByZXR1cm47XG5cbiAgICBub2RlID0gbmV3IEpRTGl0ZShub2RlKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5vZGUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTtcbiAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7XG4gICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICB2YXIgaW5kZXggPSBlbGVtZW50LmZpcnN0Q2hpbGQ7XG4gICAgICBmb3JFYWNoKG5ldyBKUUxpdGUobm9kZSksIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIGVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBpbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgd3JhcDogZnVuY3Rpb24oZWxlbWVudCwgd3JhcE5vZGUpIHtcbiAgICB3cmFwTm9kZSA9IGpxTGl0ZSh3cmFwTm9kZSkuZXEoMCkuY2xvbmUoKVswXTtcbiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQod3JhcE5vZGUsIGVsZW1lbnQpO1xuICAgIH1cbiAgICB3cmFwTm9kZS5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgfSxcblxuICByZW1vdmU6IGpxTGl0ZVJlbW92ZSxcblxuICBkZXRhY2g6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICBqcUxpdGVSZW1vdmUoZWxlbWVudCwgdHJ1ZSk7XG4gIH0sXG5cbiAgYWZ0ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5ld0VsZW1lbnQpIHtcbiAgICB2YXIgaW5kZXggPSBlbGVtZW50LCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgbmV3RWxlbWVudCA9IG5ldyBKUUxpdGUobmV3RWxlbWVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuZXdFbGVtZW50Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciBub2RlID0gbmV3RWxlbWVudFtpXTtcbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpO1xuICAgICAgaW5kZXggPSBub2RlO1xuICAgIH1cbiAgfSxcblxuICBhZGRDbGFzczoganFMaXRlQWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzOiBqcUxpdGVSZW1vdmVDbGFzcyxcblxuICB0b2dnbGVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IsIGNvbmRpdGlvbikge1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgZm9yRWFjaChzZWxlY3Rvci5zcGxpdCgnICcpLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgdmFyIGNsYXNzQ29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQoY2xhc3NDb25kaXRpb24pKSB7XG4gICAgICAgICAgY2xhc3NDb25kaXRpb24gPSAhanFMaXRlSGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAoY2xhc3NDb25kaXRpb24gPyBqcUxpdGVBZGRDbGFzcyA6IGpxTGl0ZVJlbW92ZUNsYXNzKShlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHBhcmVudDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCA/IHBhcmVudCA6IG51bGw7XG4gIH0sXG5cbiAgbmV4dDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcbiAgfSxcblxuICBmaW5kOiBmdW5jdGlvbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIGlmIChlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShzZWxlY3Rvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH0sXG5cbiAgY2xvbmU6IGpxTGl0ZUNsb25lLFxuXG4gIHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgZXh0cmFQYXJhbWV0ZXJzKSB7XG5cbiAgICB2YXIgZHVtbXlFdmVudCwgZXZlbnRGbnNDb3B5LCBoYW5kbGVyQXJncztcbiAgICB2YXIgZXZlbnROYW1lID0gZXZlbnQudHlwZSB8fCBldmVudDtcbiAgICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQpO1xuICAgIHZhciBldmVudHMgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmV2ZW50cztcbiAgICB2YXIgZXZlbnRGbnMgPSBldmVudHMgJiYgZXZlbnRzW2V2ZW50TmFtZV07XG5cbiAgICBpZiAoZXZlbnRGbnMpIHtcbiAgICAgIC8vIENyZWF0ZSBhIGR1bW15IGV2ZW50IHRvIHBhc3MgdG8gdGhlIGhhbmRsZXJzXG4gICAgICBkdW1teUV2ZW50ID0ge1xuICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7IHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7IH0sXG4gICAgICAgIGlzRGVmYXVsdFByZXZlbnRlZDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHRydWU7IH0sXG4gICAgICAgIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7IHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTsgfSxcbiAgICAgICAgaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPT09IHRydWU7IH0sXG4gICAgICAgIHN0b3BQcm9wYWdhdGlvbjogbm9vcCxcbiAgICAgICAgdHlwZTogZXZlbnROYW1lLFxuICAgICAgICB0YXJnZXQ6IGVsZW1lbnRcbiAgICAgIH07XG5cbiAgICAgIC8vIElmIGEgY3VzdG9tIGV2ZW50IHdhcyBwcm92aWRlZCB0aGVuIGV4dGVuZCBvdXIgZHVtbXkgZXZlbnQgd2l0aCBpdFxuICAgICAgaWYgKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgZHVtbXlFdmVudCA9IGV4dGVuZChkdW1teUV2ZW50LCBldmVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENvcHkgZXZlbnQgaGFuZGxlcnMgaW4gY2FzZSBldmVudCBoYW5kbGVycyBhcnJheSBpcyBtb2RpZmllZCBkdXJpbmcgZXhlY3V0aW9uLlxuICAgICAgZXZlbnRGbnNDb3B5ID0gc2hhbGxvd0NvcHkoZXZlbnRGbnMpO1xuICAgICAgaGFuZGxlckFyZ3MgPSBleHRyYVBhcmFtZXRlcnMgPyBbZHVtbXlFdmVudF0uY29uY2F0KGV4dHJhUGFyYW1ldGVycykgOiBbZHVtbXlFdmVudF07XG5cbiAgICAgIGZvckVhY2goZXZlbnRGbnNDb3B5LCBmdW5jdGlvbihmbikge1xuICAgICAgICBpZiAoIWR1bW15RXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgIGZuLmFwcGx5KGVsZW1lbnQsIGhhbmRsZXJBcmdzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59LCBmdW5jdGlvbihmbiwgbmFtZSkge1xuICAvKipcbiAgICogY2hhaW5pbmcgZnVuY3Rpb25zXG4gICAqL1xuICBKUUxpdGUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciB2YWx1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHRoaXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIC8vIGFueSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmFsdWUgbmVlZHMgdG8gYmUgd3JhcHBlZFxuICAgICAgICAgIHZhbHVlID0ganFMaXRlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAganFMaXRlQWRkTm9kZXModmFsdWUsIGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIsIGFyZzMpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6IHRoaXM7XG4gIH07XG5cbiAgLy8gYmluZCBsZWdhY3kgYmluZC91bmJpbmQgdG8gb24vb2ZmXG4gIEpRTGl0ZS5wcm90b3R5cGUuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub247XG4gIEpRTGl0ZS5wcm90b3R5cGUudW5iaW5kID0gSlFMaXRlLnByb3RvdHlwZS5vZmY7XG59KTtcblxuXG4vLyBQcm92aWRlciBmb3IgcHJpdmF0ZSAkJGpxTGl0ZSBzZXJ2aWNlXG5mdW5jdGlvbiAkJGpxTGl0ZVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbiAkJGpxTGl0ZSgpIHtcbiAgICByZXR1cm4gZXh0ZW5kKEpRTGl0ZSwge1xuICAgICAgaGFzQ2xhc3M6IGZ1bmN0aW9uKG5vZGUsIGNsYXNzZXMpIHtcbiAgICAgICAgaWYgKG5vZGUuYXR0cikgbm9kZSA9IG5vZGVbMF07XG4gICAgICAgIHJldHVybiBqcUxpdGVIYXNDbGFzcyhub2RlLCBjbGFzc2VzKTtcbiAgICAgIH0sXG4gICAgICBhZGRDbGFzczogZnVuY3Rpb24obm9kZSwgY2xhc3Nlcykge1xuICAgICAgICBpZiAobm9kZS5hdHRyKSBub2RlID0gbm9kZVswXTtcbiAgICAgICAgcmV0dXJuIGpxTGl0ZUFkZENsYXNzKG5vZGUsIGNsYXNzZXMpO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihub2RlLCBjbGFzc2VzKSB7XG4gICAgICAgIGlmIChub2RlLmF0dHIpIG5vZGUgPSBub2RlWzBdO1xuICAgICAgICByZXR1cm4ganFMaXRlUmVtb3ZlQ2xhc3Mobm9kZSwgY2xhc3Nlcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59XG5cbi8qKlxuICogQ29tcHV0ZXMgYSBoYXNoIG9mIGFuICdvYmonLlxuICogSGFzaCBvZiBhOlxuICogIHN0cmluZyBpcyBzdHJpbmdcbiAqICBudW1iZXIgaXMgbnVtYmVyIGFzIHN0cmluZ1xuICogIG9iamVjdCBpcyBlaXRoZXIgcmVzdWx0IG9mIGNhbGxpbmcgJCRoYXNoS2V5IGZ1bmN0aW9uIG9uIHRoZSBvYmplY3Qgb3IgdW5pcXVlbHkgZ2VuZXJhdGVkIGlkLFxuICogICAgICAgICB0aGF0IGlzIGFsc28gYXNzaWduZWQgdG8gdGhlICQkaGFzaEtleSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBvYmpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGhhc2ggc3RyaW5nIHN1Y2ggdGhhdCB0aGUgc2FtZSBpbnB1dCB3aWxsIGhhdmUgdGhlIHNhbWUgaGFzaCBzdHJpbmcuXG4gKiAgICAgICAgIFRoZSByZXN1bHRpbmcgc3RyaW5nIGtleSBpcyBpbiAndHlwZTpoYXNoS2V5JyBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIGhhc2hLZXkob2JqLCBuZXh0VWlkRm4pIHtcbiAgdmFyIGtleSA9IG9iaiAmJiBvYmouJCRoYXNoS2V5O1xuXG4gIGlmIChrZXkpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAga2V5ID0gb2JqLiQkaGFzaEtleSgpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9XG5cbiAgdmFyIG9ialR5cGUgPSB0eXBlb2Ygb2JqO1xuICBpZiAob2JqVHlwZSA9PSAnZnVuY3Rpb24nIHx8IChvYmpUeXBlID09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCkpIHtcbiAgICBrZXkgPSBvYmouJCRoYXNoS2V5ID0gb2JqVHlwZSArICc6JyArIChuZXh0VWlkRm4gfHwgbmV4dFVpZCkoKTtcbiAgfSBlbHNlIHtcbiAgICBrZXkgPSBvYmpUeXBlICsgJzonICsgb2JqO1xuICB9XG5cbiAgcmV0dXJuIGtleTtcbn1cblxuLyoqXG4gKiBIYXNoTWFwIHdoaWNoIGNhbiB1c2Ugb2JqZWN0cyBhcyBrZXlzXG4gKi9cbmZ1bmN0aW9uIEhhc2hNYXAoYXJyYXksIGlzb2xhdGVkVWlkKSB7XG4gIGlmIChpc29sYXRlZFVpZCkge1xuICAgIHZhciB1aWQgPSAwO1xuICAgIHRoaXMubmV4dFVpZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICsrdWlkO1xuICAgIH07XG4gIH1cbiAgZm9yRWFjaChhcnJheSwgdGhpcy5wdXQsIHRoaXMpO1xufVxuSGFzaE1hcC5wcm90b3R5cGUgPSB7XG4gIC8qKlxuICAgKiBTdG9yZSBrZXkgdmFsdWUgcGFpclxuICAgKiBAcGFyYW0ga2V5IGtleSB0byBzdG9yZSBjYW4gYmUgYW55IHR5cGVcbiAgICogQHBhcmFtIHZhbHVlIHZhbHVlIHRvIHN0b3JlIGNhbiBiZSBhbnkgdHlwZVxuICAgKi9cbiAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1toYXNoS2V5KGtleSwgdGhpcy5uZXh0VWlkKV0gPSB2YWx1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIGtleVxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSB0aGUgdmFsdWUgZm9yIHRoZSBrZXlcbiAgICovXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXNbaGFzaEtleShrZXksIHRoaXMubmV4dFVpZCldO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGtleS92YWx1ZSBwYWlyXG4gICAqIEBwYXJhbSBrZXlcbiAgICovXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gdGhpc1trZXkgPSBoYXNoS2V5KGtleSwgdGhpcy5uZXh0VWlkKV07XG4gICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn07XG5cbnZhciAkJEhhc2hNYXBQcm92aWRlciA9IFtmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gW2Z1bmN0aW9uKCkge1xuICAgIHJldHVybiBIYXNoTWFwO1xuICB9XTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG1vZHVsZSBuZ1xuICogQG5hbWUgYW5ndWxhci5pbmplY3RvclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYW4gaW5qZWN0b3Igb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgZm9yIHJldHJpZXZpbmcgc2VydmljZXMgYXMgd2VsbCBhcyBmb3JcbiAqIGRlcGVuZGVuY3kgaW5qZWN0aW9uIChzZWUge0BsaW5rIGd1aWRlL2RpIGRlcGVuZGVuY3kgaW5qZWN0aW9ufSkuXG4gKlxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gbW9kdWxlcyBBIGxpc3Qgb2YgbW9kdWxlIGZ1bmN0aW9ucyBvciB0aGVpciBhbGlhc2VzLiBTZWVcbiAqICAgICB7QGxpbmsgYW5ndWxhci5tb2R1bGV9LiBUaGUgYG5nYCBtb2R1bGUgbXVzdCBiZSBleHBsaWNpdGx5IGFkZGVkLlxuICogQHBhcmFtIHtib29sZWFuPX0gW3N0cmljdERpPWZhbHNlXSBXaGV0aGVyIHRoZSBpbmplY3RvciBzaG91bGQgYmUgaW4gc3RyaWN0IG1vZGUsIHdoaWNoXG4gKiAgICAgZGlzYWxsb3dzIGFyZ3VtZW50IG5hbWUgYW5ub3RhdGlvbiBpbmZlcmVuY2UuXG4gKiBAcmV0dXJucyB7aW5qZWN0b3J9IEluamVjdG9yIG9iamVjdC4gU2VlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBUeXBpY2FsIHVzYWdlXG4gKiBgYGBqc1xuICogICAvLyBjcmVhdGUgYW4gaW5qZWN0b3JcbiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZyddKTtcbiAqXG4gKiAgIC8vIHVzZSB0aGUgaW5qZWN0b3IgdG8ga2ljayBvZmYgeW91ciBhcHBsaWNhdGlvblxuICogICAvLyB1c2UgdGhlIHR5cGUgaW5mZXJlbmNlIHRvIGF1dG8gaW5qZWN0IGFyZ3VtZW50cywgb3IgdXNlIGltcGxpY2l0IGluamVjdGlvblxuICogICAkaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRyb290U2NvcGUsICRjb21waWxlLCAkZG9jdW1lbnQpIHtcbiAqICAgICAkY29tcGlsZSgkZG9jdW1lbnQpKCRyb290U2NvcGUpO1xuICogICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIFNvbWV0aW1lcyB5b3Ugd2FudCB0byBnZXQgYWNjZXNzIHRvIHRoZSBpbmplY3RvciBvZiBhIGN1cnJlbnRseSBydW5uaW5nIEFuZ3VsYXIgYXBwXG4gKiBmcm9tIG91dHNpZGUgQW5ndWxhci4gUGVyaGFwcywgeW91IHdhbnQgdG8gaW5qZWN0IGFuZCBjb21waWxlIHNvbWUgbWFya3VwIGFmdGVyIHRoZVxuICogYXBwbGljYXRpb24gaGFzIGJlZW4gYm9vdHN0cmFwcGVkLiBZb3UgY2FuIGRvIHRoaXMgdXNpbmcgdGhlIGV4dHJhIGBpbmplY3RvcigpYCBhZGRlZFxuICogdG8gSlF1ZXJ5L2pxTGl0ZSBlbGVtZW50cy4gU2VlIHtAbGluayBhbmd1bGFyLmVsZW1lbnR9LlxuICpcbiAqICpUaGlzIGlzIGZhaXJseSByYXJlIGJ1dCBjb3VsZCBiZSB0aGUgY2FzZSBpZiBhIHRoaXJkIHBhcnR5IGxpYnJhcnkgaXMgaW5qZWN0aW5nIHRoZVxuICogbWFya3VwLipcbiAqXG4gKiBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgYSBuZXcgYmxvY2sgb2YgSFRNTCBjb250YWluaW5nIGEgYG5nLWNvbnRyb2xsZXJgXG4gKiBkaXJlY3RpdmUgaXMgYWRkZWQgdG8gdGhlIGVuZCBvZiB0aGUgZG9jdW1lbnQgYm9keSBieSBKUXVlcnkuIFdlIHRoZW4gY29tcGlsZSBhbmQgbGlua1xuICogaXQgaW50byB0aGUgY3VycmVudCBBbmd1bGFySlMgc2NvcGUuXG4gKlxuICogYGBganNcbiAqIHZhciAkZGl2ID0gJCgnPGRpdiBuZy1jb250cm9sbGVyPVwiTXlDdHJsXCI+e3tjb250ZW50LmxhYmVsfX08L2Rpdj4nKTtcbiAqICQoZG9jdW1lbnQuYm9keSkuYXBwZW5kKCRkaXYpO1xuICpcbiAqIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuaW5qZWN0b3IoKS5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUpIHtcbiAqICAgdmFyIHNjb3BlID0gYW5ndWxhci5lbGVtZW50KCRkaXYpLnNjb3BlKCk7XG4gKiAgICRjb21waWxlKCRkaXYpKHNjb3BlKTtcbiAqIH0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIGF1dG9cbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEltcGxpY2l0IG1vZHVsZSB3aGljaCBnZXRzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gZWFjaCB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAqL1xuXG52YXIgRk5fQVJHUyA9IC9eW15cXChdKlxcKFxccyooW15cXCldKilcXCkvbTtcbnZhciBGTl9BUkdfU1BMSVQgPSAvLC87XG52YXIgRk5fQVJHID0gL15cXHMqKF8/KShcXFMrPylcXDFcXHMqJC87XG52YXIgU1RSSVBfQ09NTUVOVFMgPSAvKChcXC9cXC8uKiQpfChcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKSkvbWc7XG52YXIgJGluamVjdG9yTWluRXJyID0gbWluRXJyKCckaW5qZWN0b3InKTtcblxuZnVuY3Rpb24gYW5vbkZuKGZuKSB7XG4gIC8vIEZvciBhbm9ueW1vdXMgZnVuY3Rpb25zLCBzaG93aW5nIGF0IHRoZSB2ZXJ5IGxlYXN0IHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgY2FuIGhlbHAgaW5cbiAgLy8gZGVidWdnaW5nLlxuICB2YXIgZm5UZXh0ID0gZm4udG9TdHJpbmcoKS5yZXBsYWNlKFNUUklQX0NPTU1FTlRTLCAnJyksXG4gICAgICBhcmdzID0gZm5UZXh0Lm1hdGNoKEZOX0FSR1MpO1xuICBpZiAoYXJncykge1xuICAgIHJldHVybiAnZnVuY3Rpb24oJyArIChhcmdzWzFdIHx8ICcnKS5yZXBsYWNlKC9bXFxzXFxyXFxuXSsvLCAnICcpICsgJyknO1xuICB9XG4gIHJldHVybiAnZm4nO1xufVxuXG5mdW5jdGlvbiBhbm5vdGF0ZShmbiwgc3RyaWN0RGksIG5hbWUpIHtcbiAgdmFyICRpbmplY3QsXG4gICAgICBmblRleHQsXG4gICAgICBhcmdEZWNsLFxuICAgICAgbGFzdDtcblxuICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKCEoJGluamVjdCA9IGZuLiRpbmplY3QpKSB7XG4gICAgICAkaW5qZWN0ID0gW107XG4gICAgICBpZiAoZm4ubGVuZ3RoKSB7XG4gICAgICAgIGlmIChzdHJpY3REaSkge1xuICAgICAgICAgIGlmICghaXNTdHJpbmcobmFtZSkgfHwgIW5hbWUpIHtcbiAgICAgICAgICAgIG5hbWUgPSBmbi5uYW1lIHx8IGFub25Gbihmbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignc3RyaWN0ZGknLFxuICAgICAgICAgICAgJ3swfSBpcyBub3QgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBhbmQgY2Fubm90IGJlIGludm9rZWQgaW4gc3RyaWN0IG1vZGUnLCBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBmblRleHQgPSBmbi50b1N0cmluZygpLnJlcGxhY2UoU1RSSVBfQ09NTUVOVFMsICcnKTtcbiAgICAgICAgYXJnRGVjbCA9IGZuVGV4dC5tYXRjaChGTl9BUkdTKTtcbiAgICAgICAgZm9yRWFjaChhcmdEZWNsWzFdLnNwbGl0KEZOX0FSR19TUExJVCksIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgIGFyZy5yZXBsYWNlKEZOX0FSRywgZnVuY3Rpb24oYWxsLCB1bmRlcnNjb3JlLCBuYW1lKSB7XG4gICAgICAgICAgICAkaW5qZWN0LnB1c2gobmFtZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZm4uJGluamVjdCA9ICRpbmplY3Q7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgbGFzdCA9IGZuLmxlbmd0aCAtIDE7XG4gICAgYXNzZXJ0QXJnRm4oZm5bbGFzdF0sICdmbicpO1xuICAgICRpbmplY3QgPSBmbi5zbGljZSgwLCBsYXN0KTtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnRBcmdGbihmbiwgJ2ZuJywgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuICRpbmplY3Q7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkaW5qZWN0b3JcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgJGluamVjdG9yYCBpcyB1c2VkIHRvIHJldHJpZXZlIG9iamVjdCBpbnN0YW5jZXMgYXMgZGVmaW5lZCBieVxuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUgcHJvdmlkZXJ9LCBpbnN0YW50aWF0ZSB0eXBlcywgaW52b2tlIG1ldGhvZHMsXG4gKiBhbmQgbG9hZCBtb2R1bGVzLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgYWx3YXlzIGhvbGRzIHRydWU6XG4gKlxuICogYGBganNcbiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoKTtcbiAqICAgZXhwZWN0KCRpbmplY3Rvci5nZXQoJyRpbmplY3RvcicpKS50b0JlKCRpbmplY3Rvcik7XG4gKiAgIGV4cGVjdCgkaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICogICAgIHJldHVybiAkaW5qZWN0b3I7XG4gKiAgIH0pKS50b0JlKCRpbmplY3Rvcik7XG4gKiBgYGBcbiAqXG4gKiAjIEluamVjdGlvbiBGdW5jdGlvbiBBbm5vdGF0aW9uXG4gKlxuICogSmF2YVNjcmlwdCBkb2VzIG5vdCBoYXZlIGFubm90YXRpb25zLCBhbmQgYW5ub3RhdGlvbnMgYXJlIG5lZWRlZCBmb3IgZGVwZW5kZW5jeSBpbmplY3Rpb24uIFRoZVxuICogZm9sbG93aW5nIGFyZSBhbGwgdmFsaWQgd2F5cyBvZiBhbm5vdGF0aW5nIGZ1bmN0aW9uIHdpdGggaW5qZWN0aW9uIGFyZ3VtZW50cyBhbmQgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogYGBganNcbiAqICAgLy8gaW5mZXJyZWQgKG9ubHkgd29ya3MgaWYgY29kZSBub3QgbWluaWZpZWQvb2JmdXNjYXRlZClcbiAqICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbihzZXJ2aWNlQSl7fSk7XG4gKlxuICogICAvLyBhbm5vdGF0ZWRcbiAqICAgZnVuY3Rpb24gZXhwbGljaXQoc2VydmljZUEpIHt9O1xuICogICBleHBsaWNpdC4kaW5qZWN0ID0gWydzZXJ2aWNlQSddO1xuICogICAkaW5qZWN0b3IuaW52b2tlKGV4cGxpY2l0KTtcbiAqXG4gKiAgIC8vIGlubGluZVxuICogICAkaW5qZWN0b3IuaW52b2tlKFsnc2VydmljZUEnLCBmdW5jdGlvbihzZXJ2aWNlQSl7fV0pO1xuICogYGBgXG4gKlxuICogIyMgSW5mZXJlbmNlXG4gKlxuICogSW4gSmF2YVNjcmlwdCBjYWxsaW5nIGB0b1N0cmluZygpYCBvbiBhIGZ1bmN0aW9uIHJldHVybnMgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb24uIFRoZSBkZWZpbml0aW9uXG4gKiBjYW4gdGhlbiBiZSBwYXJzZWQgYW5kIHRoZSBmdW5jdGlvbiBhcmd1bWVudHMgY2FuIGJlIGV4dHJhY3RlZC4gVGhpcyBtZXRob2Qgb2YgZGlzY292ZXJpbmdcbiAqIGFubm90YXRpb25zIGlzIGRpc2FsbG93ZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgaW4gc3RyaWN0IG1vZGUuXG4gKiAqTk9URToqIFRoaXMgZG9lcyBub3Qgd29yayB3aXRoIG1pbmlmaWNhdGlvbiwgYW5kIG9iZnVzY2F0aW9uIHRvb2xzIHNpbmNlIHRoZXNlIHRvb2xzIGNoYW5nZSB0aGVcbiAqIGFyZ3VtZW50IG5hbWVzLlxuICpcbiAqICMjIGAkaW5qZWN0YCBBbm5vdGF0aW9uXG4gKiBCeSBhZGRpbmcgYW4gYCRpbmplY3RgIHByb3BlcnR5IG9udG8gYSBmdW5jdGlvbiB0aGUgaW5qZWN0aW9uIHBhcmFtZXRlcnMgY2FuIGJlIHNwZWNpZmllZC5cbiAqXG4gKiAjIyBJbmxpbmVcbiAqIEFzIGFuIGFycmF5IG9mIGluamVjdGlvbiBuYW1lcywgd2hlcmUgdGhlIGxhc3QgaXRlbSBpbiB0aGUgYXJyYXkgaXMgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjZ2V0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gYW4gaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlIHRvIHJldHJpZXZlLlxuICogQHBhcmFtIHtzdHJpbmc9fSBjYWxsZXIgQW4gb3B0aW9uYWwgc3RyaW5nIHRvIHByb3ZpZGUgdGhlIG9yaWdpbiBvZiB0aGUgZnVuY3Rpb24gY2FsbCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gKiBAcmV0dXJuIHsqfSBUaGUgaW5zdGFuY2UuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjaW52b2tlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJbnZva2UgdGhlIG1ldGhvZCBhbmQgc3VwcGx5IHRoZSBtZXRob2QgYXJndW1lbnRzIGZyb20gdGhlIGAkaW5qZWN0b3JgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IGZuIFRoZSBpbmplY3RhYmxlIGZ1bmN0aW9uIHRvIGludm9rZS4gRnVuY3Rpb24gcGFyYW1ldGVycyBhcmVcbiAqICAgaW5qZWN0ZWQgYWNjb3JkaW5nIHRvIHRoZSB7QGxpbmsgZ3VpZGUvZGkgJGluamVjdCBBbm5vdGF0aW9ufSBydWxlcy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gc2VsZiBUaGUgYHRoaXNgIGZvciB0aGUgaW52b2tlZCBtZXRob2QuXG4gKiBAcGFyYW0ge09iamVjdD19IGxvY2FscyBPcHRpb25hbCBvYmplY3QuIElmIHByZXNldCB0aGVuIGFueSBhcmd1bWVudCBuYW1lcyBhcmUgcmVhZCBmcm9tIHRoaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCBmaXJzdCwgYmVmb3JlIHRoZSBgJGluamVjdG9yYCBpcyBjb25zdWx0ZWQuXG4gKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZSBpbnZva2VkIGBmbmAgZnVuY3Rpb24uXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjaGFzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBbGxvd3MgdGhlIHVzZXIgdG8gcXVlcnkgaWYgdGhlIHBhcnRpY3VsYXIgc2VydmljZSBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgc2VydmljZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgaW5qZWN0b3IgaGFzIGdpdmVuIHNlcnZpY2UuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjaW5zdGFudGlhdGVcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEpTIHR5cGUuIFRoZSBtZXRob2QgdGFrZXMgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgaW52b2tlcyB0aGUgbmV3XG4gKiBvcGVyYXRvciwgYW5kIHN1cHBsaWVzIGFsbCBvZiB0aGUgYXJndW1lbnRzIHRvIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBhcyBzcGVjaWZpZWQgYnkgdGhlXG4gKiBjb25zdHJ1Y3RvciBhbm5vdGF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFR5cGUgQW5ub3RhdGVkIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzXG4gKiBvYmplY3QgZmlyc3QsIGJlZm9yZSB0aGUgYCRpbmplY3RvcmAgaXMgY29uc3VsdGVkLlxuICogQHJldHVybnMge09iamVjdH0gbmV3IGluc3RhbmNlIG9mIGBUeXBlYC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRpbmplY3RvciNhbm5vdGF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBhbiBhcnJheSBvZiBzZXJ2aWNlIG5hbWVzIHdoaWNoIHRoZSBmdW5jdGlvbiBpcyByZXF1ZXN0aW5nIGZvciBpbmplY3Rpb24uIFRoaXMgQVBJIGlzXG4gKiB1c2VkIGJ5IHRoZSBpbmplY3RvciB0byBkZXRlcm1pbmUgd2hpY2ggc2VydmljZXMgbmVlZCB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBmdW5jdGlvbiB3aGVuIHRoZVxuICogZnVuY3Rpb24gaXMgaW52b2tlZC4gVGhlcmUgYXJlIHRocmVlIHdheXMgaW4gd2hpY2ggdGhlIGZ1bmN0aW9uIGNhbiBiZSBhbm5vdGF0ZWQgd2l0aCB0aGUgbmVlZGVkXG4gKiBkZXBlbmRlbmNpZXMuXG4gKlxuICogIyBBcmd1bWVudCBuYW1lc1xuICpcbiAqIFRoZSBzaW1wbGVzdCBmb3JtIGlzIHRvIGV4dHJhY3QgdGhlIGRlcGVuZGVuY2llcyBmcm9tIHRoZSBhcmd1bWVudHMgb2YgdGhlIGZ1bmN0aW9uLiBUaGlzIGlzIGRvbmVcbiAqIGJ5IGNvbnZlcnRpbmcgdGhlIGZ1bmN0aW9uIGludG8gYSBzdHJpbmcgdXNpbmcgYHRvU3RyaW5nKClgIG1ldGhvZCBhbmQgZXh0cmFjdGluZyB0aGUgYXJndW1lbnRcbiAqIG5hbWVzLlxuICogYGBganNcbiAqICAgLy8gR2l2ZW5cbiAqICAgZnVuY3Rpb24gTXlDb250cm9sbGVyKCRzY29wZSwgJHJvdXRlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH1cbiAqXG4gKiAgIC8vIFRoZW5cbiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKE15Q29udHJvbGxlcikpLnRvRXF1YWwoWyckc2NvcGUnLCAnJHJvdXRlJ10pO1xuICogYGBgXG4gKlxuICogWW91IGNhbiBkaXNhbGxvdyB0aGlzIG1ldGhvZCBieSB1c2luZyBzdHJpY3QgaW5qZWN0aW9uIG1vZGUuXG4gKlxuICogVGhpcyBtZXRob2QgZG9lcyBub3Qgd29yayB3aXRoIGNvZGUgbWluaWZpY2F0aW9uIC8gb2JmdXNjYXRpb24uIEZvciB0aGlzIHJlYXNvbiB0aGUgZm9sbG93aW5nXG4gKiBhbm5vdGF0aW9uIHN0cmF0ZWdpZXMgYXJlIHN1cHBvcnRlZC5cbiAqXG4gKiAjIFRoZSBgJGluamVjdGAgcHJvcGVydHlcbiAqXG4gKiBJZiBhIGZ1bmN0aW9uIGhhcyBhbiBgJGluamVjdGAgcHJvcGVydHkgYW5kIGl0cyB2YWx1ZSBpcyBhbiBhcnJheSBvZiBzdHJpbmdzLCB0aGVuIHRoZSBzdHJpbmdzXG4gKiByZXByZXNlbnQgbmFtZXMgb2Ygc2VydmljZXMgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24uXG4gKiBgYGBqc1xuICogICAvLyBHaXZlblxuICogICB2YXIgTXlDb250cm9sbGVyID0gZnVuY3Rpb24ob2JmdXNjYXRlZFNjb3BlLCBvYmZ1c2NhdGVkUm91dGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfVxuICogICAvLyBEZWZpbmUgZnVuY3Rpb24gZGVwZW5kZW5jaWVzXG4gKiAgIE15Q29udHJvbGxlclsnJGluamVjdCddID0gWyckc2NvcGUnLCAnJHJvdXRlJ107XG4gKlxuICogICAvLyBUaGVuXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShNeUNvbnRyb2xsZXIpKS50b0VxdWFsKFsnJHNjb3BlJywgJyRyb3V0ZSddKTtcbiAqIGBgYFxuICpcbiAqICMgVGhlIGFycmF5IG5vdGF0aW9uXG4gKlxuICogSXQgaXMgb2Z0ZW4gZGVzaXJhYmxlIHRvIGlubGluZSBJbmplY3RlZCBmdW5jdGlvbnMgYW5kIHRoYXQncyB3aGVuIHNldHRpbmcgdGhlIGAkaW5qZWN0YCBwcm9wZXJ0eVxuICogaXMgdmVyeSBpbmNvbnZlbmllbnQuIEluIHRoZXNlIHNpdHVhdGlvbnMgdXNpbmcgdGhlIGFycmF5IG5vdGF0aW9uIHRvIHNwZWNpZnkgdGhlIGRlcGVuZGVuY2llcyBpblxuICogYSB3YXkgdGhhdCBzdXJ2aXZlcyBtaW5pZmljYXRpb24gaXMgYSBiZXR0ZXIgY2hvaWNlOlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIFdlIHdpc2ggdG8gd3JpdGUgdGhpcyAobm90IG1pbmlmaWNhdGlvbiAvIG9iZnVzY2F0aW9uIHNhZmUpXG4gKiAgIGluamVjdG9yLmludm9rZShmdW5jdGlvbigkY29tcGlsZSwgJHJvb3RTY29wZSkge1xuICogICAgIC8vIC4uLlxuICogICB9KTtcbiAqXG4gKiAgIC8vIFdlIGFyZSBmb3JjZWQgdG8gd3JpdGUgYnJlYWsgaW5saW5pbmdcbiAqICAgdmFyIHRtcEZuID0gZnVuY3Rpb24ob2JmdXNjYXRlZENvbXBpbGUsIG9iZnVzY2F0ZWRSb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfTtcbiAqICAgdG1wRm4uJGluamVjdCA9IFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZSddO1xuICogICBpbmplY3Rvci5pbnZva2UodG1wRm4pO1xuICpcbiAqICAgLy8gVG8gYmV0dGVyIHN1cHBvcnQgaW5saW5lIGZ1bmN0aW9uIHRoZSBpbmxpbmUgYW5ub3RhdGlvbiBpcyBzdXBwb3J0ZWRcbiAqICAgaW5qZWN0b3IuaW52b2tlKFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKG9iZkNvbXBpbGUsIG9iZlJvb3RTY29wZSkge1xuICogICAgIC8vIC4uLlxuICogICB9XSk7XG4gKlxuICogICAvLyBUaGVyZWZvcmVcbiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKFxuICogICAgICBbJyRjb21waWxlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihvYmZ1c18kY29tcGlsZSwgb2JmdXNfJHJvb3RTY29wZSkge31dKVxuICogICAgKS50b0VxdWFsKFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZSddKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXkuPHN0cmluZ3xGdW5jdGlvbj59IGZuIEZ1bmN0aW9uIGZvciB3aGljaCBkZXBlbmRlbnQgc2VydmljZSBuYW1lcyBuZWVkIHRvXG4gKiBiZSByZXRyaWV2ZWQgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtzdHJpY3REaT1mYWxzZV0gRGlzYWxsb3cgYXJndW1lbnQgbmFtZSBhbm5vdGF0aW9uIGluZmVyZW5jZS5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59IFRoZSBuYW1lcyBvZiB0aGUgc2VydmljZXMgd2hpY2ggdGhlIGZ1bmN0aW9uIHJlcXVpcmVzLlxuICovXG5cblxuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRwcm92aWRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIHtAbGluayBhdXRvLiRwcm92aWRlICRwcm92aWRlfSBzZXJ2aWNlIGhhcyBhIG51bWJlciBvZiBtZXRob2RzIGZvciByZWdpc3RlcmluZyBjb21wb25lbnRzXG4gKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gTWFueSBvZiB0aGVzZSBmdW5jdGlvbnMgYXJlIGFsc28gZXhwb3NlZCBvblxuICoge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfS5cbiAqXG4gKiBBbiBBbmd1bGFyICoqc2VydmljZSoqIGlzIGEgc2luZ2xldG9uIG9iamVjdCBjcmVhdGVkIGJ5IGEgKipzZXJ2aWNlIGZhY3RvcnkqKi4gIFRoZXNlICoqc2VydmljZVxuICogZmFjdG9yaWVzKiogYXJlIGZ1bmN0aW9ucyB3aGljaCwgaW4gdHVybiwgYXJlIGNyZWF0ZWQgYnkgYSAqKnNlcnZpY2UgcHJvdmlkZXIqKi5cbiAqIFRoZSAqKnNlcnZpY2UgcHJvdmlkZXJzKiogYXJlIGNvbnN0cnVjdG9yIGZ1bmN0aW9ucy4gV2hlbiBpbnN0YW50aWF0ZWQgdGhleSBtdXN0IGNvbnRhaW4gYVxuICogcHJvcGVydHkgY2FsbGVkIGAkZ2V0YCwgd2hpY2ggaG9sZHMgdGhlICoqc2VydmljZSBmYWN0b3J5KiogZnVuY3Rpb24uXG4gKlxuICogV2hlbiB5b3UgcmVxdWVzdCBhIHNlcnZpY2UsIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSBpcyByZXNwb25zaWJsZSBmb3IgZmluZGluZyB0aGVcbiAqIGNvcnJlY3QgKipzZXJ2aWNlIHByb3ZpZGVyKiosIGluc3RhbnRpYXRpbmcgaXQgYW5kIHRoZW4gY2FsbGluZyBpdHMgYCRnZXRgICoqc2VydmljZSBmYWN0b3J5KipcbiAqIGZ1bmN0aW9uIHRvIGdldCB0aGUgaW5zdGFuY2Ugb2YgdGhlICoqc2VydmljZSoqLlxuICpcbiAqIE9mdGVuIHNlcnZpY2VzIGhhdmUgbm8gY29uZmlndXJhdGlvbiBvcHRpb25zIGFuZCB0aGVyZSBpcyBubyBuZWVkIHRvIGFkZCBtZXRob2RzIHRvIHRoZSBzZXJ2aWNlXG4gKiBwcm92aWRlci4gIFRoZSBwcm92aWRlciB3aWxsIGJlIG5vIG1vcmUgdGhhbiBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHdpdGggYSBgJGdldGAgcHJvcGVydHkuIEZvclxuICogdGhlc2UgY2FzZXMgdGhlIHtAbGluayBhdXRvLiRwcm92aWRlICRwcm92aWRlfSBzZXJ2aWNlIGhhcyBhZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzIHRvIHJlZ2lzdGVyXG4gKiBzZXJ2aWNlcyB3aXRob3V0IHNwZWNpZnlpbmcgYSBwcm92aWRlci5cbiAqXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3Byb3ZpZGVyIHByb3ZpZGVyKHByb3ZpZGVyKX0gLSByZWdpc3RlcnMgYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiB3aXRoIHRoZVxuICogICAgIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9XG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2NvbnN0YW50IGNvbnN0YW50KG9iail9IC0gcmVnaXN0ZXJzIGEgdmFsdWUvb2JqZWN0IHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGJ5XG4gKiAgICAgcHJvdmlkZXJzIGFuZCBzZXJ2aWNlcy5cbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgdmFsdWUob2JqKX0gLSByZWdpc3RlcnMgYSB2YWx1ZS9vYmplY3QgdGhhdCBjYW4gb25seSBiZSBhY2Nlc3NlZCBieVxuICogICAgIHNlcnZpY2VzLCBub3QgcHJvdmlkZXJzLlxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5IGZhY3RvcnkoZm4pfSAtIHJlZ2lzdGVycyBhIHNlcnZpY2UgKipmYWN0b3J5IGZ1bmN0aW9uKiosIGBmbmAsXG4gKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGNvbnRhaW4gdGhlXG4gKiAgICAgZ2l2ZW4gZmFjdG9yeSBmdW5jdGlvbi5cbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSBzZXJ2aWNlKGNsYXNzKX0gLSByZWdpc3RlcnMgYSAqKmNvbnN0cnVjdG9yIGZ1bmN0aW9uKiosIGBjbGFzc2BcbiAqICAgICB0aGF0IHdpbGwgYmUgd3JhcHBlZCBpbiBhICoqc2VydmljZSBwcm92aWRlcioqIG9iamVjdCwgd2hvc2UgYCRnZXRgIHByb3BlcnR5IHdpbGwgaW5zdGFudGlhdGVcbiAqICAgICAgYSBuZXcgb2JqZWN0IHVzaW5nIHRoZSBnaXZlbiBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBTZWUgdGhlIGluZGl2aWR1YWwgbWV0aG9kcyBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXMuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNwcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnByb3ZpZGVyIGZ1bmN0aW9uKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIFByb3ZpZGVyIGZ1bmN0aW9uc1xuICogYXJlIGNvbnN0cnVjdG9yIGZ1bmN0aW9ucywgd2hvc2UgaW5zdGFuY2VzIGFyZSByZXNwb25zaWJsZSBmb3IgXCJwcm92aWRpbmdcIiBhIGZhY3RvcnkgZm9yIGFcbiAqIHNlcnZpY2UuXG4gKlxuICogU2VydmljZSBwcm92aWRlciBuYW1lcyBzdGFydCB3aXRoIHRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIHRoZXkgcHJvdmlkZSBmb2xsb3dlZCBieSBgUHJvdmlkZXJgLlxuICogRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuJGxvZyAkbG9nfSBzZXJ2aWNlIGhhcyBhIHByb3ZpZGVyIGNhbGxlZFxuICoge0BsaW5rIG5nLiRsb2dQcm92aWRlciAkbG9nUHJvdmlkZXJ9LlxuICpcbiAqIFNlcnZpY2UgcHJvdmlkZXIgb2JqZWN0cyBjYW4gaGF2ZSBhZGRpdGlvbmFsIG1ldGhvZHMgd2hpY2ggYWxsb3cgY29uZmlndXJhdGlvbiBvZiB0aGUgcHJvdmlkZXJcbiAqIGFuZCBpdHMgc2VydmljZS4gSW1wb3J0YW50bHksIHlvdSBjYW4gY29uZmlndXJlIHdoYXQga2luZCBvZiBzZXJ2aWNlIGlzIGNyZWF0ZWQgYnkgdGhlIGAkZ2V0YFxuICogbWV0aG9kLCBvciBob3cgdGhhdCBzZXJ2aWNlIHdpbGwgYWN0LiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgJGxvZ1Byb3ZpZGVyfSBoYXMgYVxuICogbWV0aG9kIHtAbGluayBuZy4kbG9nUHJvdmlkZXIjZGVidWdFbmFibGVkIGRlYnVnRW5hYmxlZH1cbiAqIHdoaWNoIGxldHMgeW91IHNwZWNpZnkgd2hldGhlciB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSB3aWxsIGxvZyBkZWJ1ZyBtZXNzYWdlcyB0byB0aGVcbiAqIGNvbnNvbGUgb3Igbm90LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS4gTk9URTogdGhlIHByb3ZpZGVyIHdpbGwgYmUgYXZhaWxhYmxlIHVuZGVyIGBuYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdQcm92aWRlcidgIGtleS5cbiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbigpKX0gcHJvdmlkZXIgSWYgdGhlIHByb3ZpZGVyIGlzOlxuICpcbiAqICAgLSBgT2JqZWN0YDogdGhlbiBpdCBzaG91bGQgaGF2ZSBhIGAkZ2V0YCBtZXRob2QuIFRoZSBgJGdldGAgbWV0aG9kIHdpbGwgYmUgaW52b2tlZCB1c2luZ1xuICogICAgIHtAbGluayBhdXRvLiRpbmplY3RvciNpbnZva2UgJGluamVjdG9yLmludm9rZSgpfSB3aGVuIGFuIGluc3RhbmNlIG5lZWRzIHRvIGJlIGNyZWF0ZWQuXG4gKiAgIC0gYENvbnN0cnVjdG9yYDogYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHByb3ZpZGVyIHdpbGwgYmUgY3JlYXRlZCB1c2luZ1xuICogICAgIHtAbGluayBhdXRvLiRpbmplY3RvciNpbnN0YW50aWF0ZSAkaW5qZWN0b3IuaW5zdGFudGlhdGUoKX0sIHRoZW4gdHJlYXRlZCBhcyBgb2JqZWN0YC5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlXG5cbiAqIEBleGFtcGxlXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBjcmVhdGUgYSBzaW1wbGUgZXZlbnQgdHJhY2tpbmcgc2VydmljZSBhbmQgcmVnaXN0ZXIgaXQgdXNpbmdcbiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3Byb3ZpZGVyICRwcm92aWRlLnByb3ZpZGVyKCl9LlxuICpcbiAqIGBgYGpzXG4gKiAgLy8gRGVmaW5lIHRoZSBldmVudFRyYWNrZXIgcHJvdmlkZXJcbiAqICBmdW5jdGlvbiBFdmVudFRyYWNrZXJQcm92aWRlcigpIHtcbiAqICAgIHZhciB0cmFja2luZ1VybCA9ICcvdHJhY2snO1xuICpcbiAqICAgIC8vIEEgcHJvdmlkZXIgbWV0aG9kIGZvciBjb25maWd1cmluZyB3aGVyZSB0aGUgdHJhY2tlZCBldmVudHMgc2hvdWxkIGJlZW4gc2F2ZWRcbiAqICAgIHRoaXMuc2V0VHJhY2tpbmdVcmwgPSBmdW5jdGlvbih1cmwpIHtcbiAqICAgICAgdHJhY2tpbmdVcmwgPSB1cmw7XG4gKiAgICB9O1xuICpcbiAqICAgIC8vIFRoZSBzZXJ2aWNlIGZhY3RvcnkgZnVuY3Rpb25cbiAqICAgIHRoaXMuJGdldCA9IFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xuICogICAgICB2YXIgdHJhY2tlZEV2ZW50cyA9IHt9O1xuICogICAgICByZXR1cm4ge1xuICogICAgICAgIC8vIENhbGwgdGhpcyB0byB0cmFjayBhbiBldmVudFxuICogICAgICAgIGV2ZW50OiBmdW5jdGlvbihldmVudCkge1xuICogICAgICAgICAgdmFyIGNvdW50ID0gdHJhY2tlZEV2ZW50c1tldmVudF0gfHwgMDtcbiAqICAgICAgICAgIGNvdW50ICs9IDE7XG4gKiAgICAgICAgICB0cmFja2VkRXZlbnRzW2V2ZW50XSA9IGNvdW50O1xuICogICAgICAgICAgcmV0dXJuIGNvdW50O1xuICogICAgICAgIH0sXG4gKiAgICAgICAgLy8gQ2FsbCB0aGlzIHRvIHNhdmUgdGhlIHRyYWNrZWQgZXZlbnRzIHRvIHRoZSB0cmFja2luZ1VybFxuICogICAgICAgIHNhdmU6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgJGh0dHAucG9zdCh0cmFja2luZ1VybCwgdHJhY2tlZEV2ZW50cyk7XG4gKiAgICAgICAgfVxuICogICAgICB9O1xuICogICAgfV07XG4gKiAgfVxuICpcbiAqICBkZXNjcmliZSgnZXZlbnRUcmFja2VyJywgZnVuY3Rpb24oKSB7XG4gKiAgICB2YXIgcG9zdFNweTtcbiAqXG4gKiAgICBiZWZvcmVFYWNoKG1vZHVsZShmdW5jdGlvbigkcHJvdmlkZSkge1xuICogICAgICAvLyBSZWdpc3RlciB0aGUgZXZlbnRUcmFja2VyIHByb3ZpZGVyXG4gKiAgICAgICRwcm92aWRlLnByb3ZpZGVyKCdldmVudFRyYWNrZXInLCBFdmVudFRyYWNrZXJQcm92aWRlcik7XG4gKiAgICB9KSk7XG4gKlxuICogICAgYmVmb3JlRWFjaChtb2R1bGUoZnVuY3Rpb24oZXZlbnRUcmFja2VyUHJvdmlkZXIpIHtcbiAqICAgICAgLy8gQ29uZmlndXJlIGV2ZW50VHJhY2tlciBwcm92aWRlclxuICogICAgICBldmVudFRyYWNrZXJQcm92aWRlci5zZXRUcmFja2luZ1VybCgnL2N1c3RvbS10cmFjaycpO1xuICogICAgfSkpO1xuICpcbiAqICAgIGl0KCd0cmFja3MgZXZlbnRzJywgaW5qZWN0KGZ1bmN0aW9uKGV2ZW50VHJhY2tlcikge1xuICogICAgICBleHBlY3QoZXZlbnRUcmFja2VyLmV2ZW50KCdsb2dpbicpKS50b0VxdWFsKDEpO1xuICogICAgICBleHBlY3QoZXZlbnRUcmFja2VyLmV2ZW50KCdsb2dpbicpKS50b0VxdWFsKDIpO1xuICogICAgfSkpO1xuICpcbiAqICAgIGl0KCdzYXZlcyB0byB0aGUgdHJhY2tpbmcgdXJsJywgaW5qZWN0KGZ1bmN0aW9uKGV2ZW50VHJhY2tlciwgJGh0dHApIHtcbiAqICAgICAgcG9zdFNweSA9IHNweU9uKCRodHRwLCAncG9zdCcpO1xuICogICAgICBldmVudFRyYWNrZXIuZXZlbnQoJ2xvZ2luJyk7XG4gKiAgICAgIGV2ZW50VHJhY2tlci5zYXZlKCk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMF0pLm5vdC50b0VxdWFsKCcvdHJhY2snKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1swXSkudG9FcXVhbCgnL2N1c3RvbS10cmFjaycpO1xuICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzFdKS50b0VxdWFsKHsgJ2xvZ2luJzogMSB9KTtcbiAqICAgIH0pKTtcbiAqICB9KTtcbiAqIGBgYFxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjZmFjdG9yeVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgZmFjdG9yeSoqLCB3aGljaCB3aWxsIGJlIGNhbGxlZCB0byByZXR1cm4gdGhlIHNlcnZpY2UgaW5zdGFuY2UuXG4gKiBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzIHByb3ZpZGVyIGNvbnNpc3RzIG9mIG9ubHkgYSBgJGdldGAgcHJvcGVydHksXG4gKiB3aGljaCBpcyB0aGUgZ2l2ZW4gc2VydmljZSBmYWN0b3J5IGZ1bmN0aW9uLlxuICogWW91IHNob3VsZCB1c2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjZmFjdG9yeSAkcHJvdmlkZS5mYWN0b3J5KGdldEZuKX0gaWYgeW91IGRvIG5vdCBuZWVkIHRvXG4gKiBjb25maWd1cmUgeW91ciBzZXJ2aWNlIGluIGEgcHJvdmlkZXIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLlxuICogQHBhcmFtIHtGdW5jdGlvbnxBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gJGdldEZuIFRoZSBpbmplY3RhYmxlICRnZXRGbiBmb3IgdGhlIGluc3RhbmNlIGNyZWF0aW9uLlxuICogICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYWxseSB0aGlzIGlzIGEgc2hvcnQgaGFuZCBmb3IgYCRwcm92aWRlLnByb3ZpZGVyKG5hbWUsIHskZ2V0OiAkZ2V0Rm59KWAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiByZWdpc3RlcmluZyBhIHNlcnZpY2VcbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLmZhY3RvcnkoJ3BpbmcnLCBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcbiAqICAgICByZXR1cm4gZnVuY3Rpb24gcGluZygpIHtcbiAqICAgICAgIHJldHVybiAkaHR0cC5zZW5kKCcvcGluZycpO1xuICogICAgIH07XG4gKiAgIH1dKTtcbiAqIGBgYFxuICogWW91IHdvdWxkIHRoZW4gaW5qZWN0IGFuZCB1c2UgdGhpcyBzZXJ2aWNlIGxpa2UgdGhpczpcbiAqIGBgYGpzXG4gKiAgIHNvbWVNb2R1bGUuY29udHJvbGxlcignQ3RybCcsIFsncGluZycsIGZ1bmN0aW9uKHBpbmcpIHtcbiAqICAgICBwaW5nKCk7XG4gKiAgIH1dKTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNzZXJ2aWNlXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqc2VydmljZSBjb25zdHJ1Y3RvcioqLCB3aGljaCB3aWxsIGJlIGludm9rZWQgd2l0aCBgbmV3YCB0byBjcmVhdGUgdGhlIHNlcnZpY2VcbiAqIGluc3RhbmNlLlxuICogVGhpcyBpcyBzaG9ydCBmb3IgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHdoZXJlIGl0cyBwcm92aWRlcidzIGAkZ2V0YCBwcm9wZXJ0eSBpcyB0aGUgc2VydmljZVxuICogY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gaW5zdGFudGlhdGUgdGhlIHNlcnZpY2UgaW5zdGFuY2UuXG4gKlxuICogWW91IHNob3VsZCB1c2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKGNsYXNzKX0gaWYgeW91IGRlZmluZSB5b3VyIHNlcnZpY2VcbiAqIGFzIGEgdHlwZS9jbGFzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBjb25zdHJ1Y3RvciBBbiBpbmplY3RhYmxlIGNsYXNzIChjb25zdHJ1Y3RvciBmdW5jdGlvbilcbiAqICAgICB0aGF0IHdpbGwgYmUgaW5zdGFudGlhdGVkLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHVzaW5nXG4gKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlICRwcm92aWRlLnNlcnZpY2UoY2xhc3MpfS5cbiAqIGBgYGpzXG4gKiAgIHZhciBQaW5nID0gZnVuY3Rpb24oJGh0dHApIHtcbiAqICAgICB0aGlzLiRodHRwID0gJGh0dHA7XG4gKiAgIH07XG4gKlxuICogICBQaW5nLiRpbmplY3QgPSBbJyRodHRwJ107XG4gKlxuICogICBQaW5nLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgcmV0dXJuIHRoaXMuJGh0dHAuZ2V0KCcvcGluZycpO1xuICogICB9O1xuICogICAkcHJvdmlkZS5zZXJ2aWNlKCdwaW5nJywgUGluZyk7XG4gKiBgYGBcbiAqIFlvdSB3b3VsZCB0aGVuIGluamVjdCBhbmQgdXNlIHRoaXMgc2VydmljZSBsaWtlIHRoaXM6XG4gKiBgYGBqc1xuICogICBzb21lTW9kdWxlLmNvbnRyb2xsZXIoJ0N0cmwnLCBbJ3BpbmcnLCBmdW5jdGlvbihwaW5nKSB7XG4gKiAgICAgcGluZy5zZW5kKCk7XG4gKiAgIH1dKTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSN2YWx1ZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnZhbHVlIHNlcnZpY2UqKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSwgc3VjaCBhcyBhIHN0cmluZywgYVxuICogbnVtYmVyLCBhbiBhcnJheSwgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24uICBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzXG4gKiBwcm92aWRlcidzIGAkZ2V0YCBwcm9wZXJ0eSBpcyBhIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCB0YWtlcyBubyBhcmd1bWVudHMgYW5kIHJldHVybnMgdGhlICoqdmFsdWVcbiAqIHNlcnZpY2UqKi5cbiAqXG4gKiBWYWx1ZSBzZXJ2aWNlcyBhcmUgc2ltaWxhciB0byBjb25zdGFudCBzZXJ2aWNlcywgZXhjZXB0IHRoYXQgdGhleSBjYW5ub3QgYmUgaW5qZWN0ZWQgaW50byBhXG4gKiBtb2R1bGUgY29uZmlndXJhdGlvbiBmdW5jdGlvbiAoc2VlIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWd9KSBidXQgdGhleSBjYW4gYmUgb3ZlcnJpZGRlbiBieVxuICogYW4gQW5ndWxhclxuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yIGRlY29yYXRvcn0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgYXJlIHNvbWUgZXhhbXBsZXMgb2YgY3JlYXRpbmcgdmFsdWUgc2VydmljZXMuXG4gKiBgYGBqc1xuICogICAkcHJvdmlkZS52YWx1ZSgnQURNSU5fVVNFUicsICdhZG1pbicpO1xuICpcbiAqICAgJHByb3ZpZGUudmFsdWUoJ1JvbGVMb29rdXAnLCB7IGFkbWluOiAwLCB3cml0ZXI6IDEsIHJlYWRlcjogMiB9KTtcbiAqXG4gKiAgICRwcm92aWRlLnZhbHVlKCdoYWxmT2YnLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgIHJldHVybiB2YWx1ZSAvIDI7XG4gKiAgIH0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI2NvbnN0YW50XG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqY29uc3RhbnQgc2VydmljZSoqLCBzdWNoIGFzIGEgc3RyaW5nLCBhIG51bWJlciwgYW4gYXJyYXksIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLFxuICogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIFVubGlrZSB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSB2YWx1ZX0gaXQgY2FuIGJlXG4gKiBpbmplY3RlZCBpbnRvIGEgbW9kdWxlIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gKHNlZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnfSkgYW5kIGl0IGNhbm5vdFxuICogYmUgb3ZlcnJpZGRlbiBieSBhbiBBbmd1bGFyIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciBkZWNvcmF0b3J9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjb25zdGFudC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIGNvbnN0YW50IHZhbHVlLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGEgc29tZSBleGFtcGxlcyBvZiBjcmVhdGluZyBjb25zdGFudHM6XG4gKiBgYGBqc1xuICogICAkcHJvdmlkZS5jb25zdGFudCgnU0hBUkRfSEVJR0hUJywgMzA2KTtcbiAqXG4gKiAgICRwcm92aWRlLmNvbnN0YW50KCdNWV9DT0xPVVJTJywgWydyZWQnLCAnYmx1ZScsICdncmV5J10pO1xuICpcbiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ2RvdWJsZScsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlICogMjtcbiAqICAgfSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjZGVjb3JhdG9yXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqc2VydmljZSBkZWNvcmF0b3IqKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gQSBzZXJ2aWNlIGRlY29yYXRvclxuICogaW50ZXJjZXB0cyB0aGUgY3JlYXRpb24gb2YgYSBzZXJ2aWNlLCBhbGxvd2luZyBpdCB0byBvdmVycmlkZSBvciBtb2RpZnkgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogc2VydmljZS4gVGhlIG9iamVjdCByZXR1cm5lZCBieSB0aGUgZGVjb3JhdG9yIG1heSBiZSB0aGUgb3JpZ2luYWwgc2VydmljZSwgb3IgYSBuZXcgc2VydmljZVxuICogb2JqZWN0IHdoaWNoIHJlcGxhY2VzIG9yIHdyYXBzIGFuZCBkZWxlZ2F0ZXMgdG8gdGhlIG9yaWdpbmFsIHNlcnZpY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gZGVjb3JhdGUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBkZWNvcmF0b3IgVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgc2VydmljZSBuZWVkcyB0byBiZVxuICogICAgaW5zdGFudGlhdGVkIGFuZCBzaG91bGQgcmV0dXJuIHRoZSBkZWNvcmF0ZWQgc2VydmljZSBpbnN0YW5jZS4gVGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCB1c2luZ1xuICogICAgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciNpbnZva2UgaW5qZWN0b3IuaW52b2tlfSBtZXRob2QgYW5kIGlzIHRoZXJlZm9yZSBmdWxseSBpbmplY3RhYmxlLlxuICogICAgTG9jYWwgaW5qZWN0aW9uIGFyZ3VtZW50czpcbiAqXG4gKiAgICAqIGAkZGVsZWdhdGVgIC0gVGhlIG9yaWdpbmFsIHNlcnZpY2UgaW5zdGFuY2UsIHdoaWNoIGNhbiBiZSBtb25rZXkgcGF0Y2hlZCwgY29uZmlndXJlZCxcbiAqICAgICAgZGVjb3JhdGVkIG9yIGRlbGVnYXRlZCB0by5cbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSB3ZSBkZWNvcmF0ZSB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSB0byBjb252ZXJ0IHdhcm5pbmdzIHRvIGVycm9ycyBieSBpbnRlcmNlcHRpbmdcbiAqIGNhbGxzIHRvIHtAbGluayBuZy4kbG9nI2Vycm9yICRsb2cud2FybigpfS5cbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLmRlY29yYXRvcignJGxvZycsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24oJGRlbGVnYXRlKSB7XG4gKiAgICAgJGRlbGVnYXRlLndhcm4gPSAkZGVsZWdhdGUuZXJyb3I7XG4gKiAgICAgcmV0dXJuICRkZWxlZ2F0ZTtcbiAqICAgfV0pO1xuICogYGBgXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVJbmplY3Rvcihtb2R1bGVzVG9Mb2FkLCBzdHJpY3REaSkge1xuICBzdHJpY3REaSA9IChzdHJpY3REaSA9PT0gdHJ1ZSk7XG4gIHZhciBJTlNUQU5USUFUSU5HID0ge30sXG4gICAgICBwcm92aWRlclN1ZmZpeCA9ICdQcm92aWRlcicsXG4gICAgICBwYXRoID0gW10sXG4gICAgICBsb2FkZWRNb2R1bGVzID0gbmV3IEhhc2hNYXAoW10sIHRydWUpLFxuICAgICAgcHJvdmlkZXJDYWNoZSA9IHtcbiAgICAgICAgJHByb3ZpZGU6IHtcbiAgICAgICAgICAgIHByb3ZpZGVyOiBzdXBwb3J0T2JqZWN0KHByb3ZpZGVyKSxcbiAgICAgICAgICAgIGZhY3Rvcnk6IHN1cHBvcnRPYmplY3QoZmFjdG9yeSksXG4gICAgICAgICAgICBzZXJ2aWNlOiBzdXBwb3J0T2JqZWN0KHNlcnZpY2UpLFxuICAgICAgICAgICAgdmFsdWU6IHN1cHBvcnRPYmplY3QodmFsdWUpLFxuICAgICAgICAgICAgY29uc3RhbnQ6IHN1cHBvcnRPYmplY3QoY29uc3RhbnQpLFxuICAgICAgICAgICAgZGVjb3JhdG9yOiBkZWNvcmF0b3JcbiAgICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvdmlkZXJJbmplY3RvciA9IChwcm92aWRlckNhY2hlLiRpbmplY3RvciA9XG4gICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3Rvcihwcm92aWRlckNhY2hlLCBmdW5jdGlvbihzZXJ2aWNlTmFtZSwgY2FsbGVyKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhjYWxsZXIpKSB7XG4gICAgICAgICAgICAgIHBhdGgucHVzaChjYWxsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCd1bnByJywgXCJVbmtub3duIHByb3ZpZGVyOiB7MH1cIiwgcGF0aC5qb2luKCcgPC0gJykpO1xuICAgICAgICAgIH0pKSxcbiAgICAgIGluc3RhbmNlQ2FjaGUgPSB7fSxcbiAgICAgIGluc3RhbmNlSW5qZWN0b3IgPSAoaW5zdGFuY2VDYWNoZS4kaW5qZWN0b3IgPVxuICAgICAgICAgIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoaW5zdGFuY2VDYWNoZSwgZnVuY3Rpb24oc2VydmljZU5hbWUsIGNhbGxlcikge1xuICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoc2VydmljZU5hbWUgKyBwcm92aWRlclN1ZmZpeCwgY2FsbGVyKTtcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZUluamVjdG9yLmludm9rZShwcm92aWRlci4kZ2V0LCBwcm92aWRlciwgdW5kZWZpbmVkLCBzZXJ2aWNlTmFtZSk7XG4gICAgICAgICAgfSkpO1xuXG5cbiAgZm9yRWFjaChsb2FkTW9kdWxlcyhtb2R1bGVzVG9Mb2FkKSwgZnVuY3Rpb24oZm4pIHsgaWYgKGZuKSBpbnN0YW5jZUluamVjdG9yLmludm9rZShmbik7IH0pO1xuXG4gIHJldHVybiBpbnN0YW5jZUluamVjdG9yO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyAkcHJvdmlkZXJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgZnVuY3Rpb24gc3VwcG9ydE9iamVjdChkZWxlZ2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgICBmb3JFYWNoKGtleSwgcmV2ZXJzZVBhcmFtcyhkZWxlZ2F0ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlbGVnYXRlKGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwcm92aWRlcihuYW1lLCBwcm92aWRlcl8pIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnc2VydmljZScpO1xuICAgIGlmIChpc0Z1bmN0aW9uKHByb3ZpZGVyXykgfHwgaXNBcnJheShwcm92aWRlcl8pKSB7XG4gICAgICBwcm92aWRlcl8gPSBwcm92aWRlckluamVjdG9yLmluc3RhbnRpYXRlKHByb3ZpZGVyXyk7XG4gICAgfVxuICAgIGlmICghcHJvdmlkZXJfLiRnZXQpIHtcbiAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycigncGdldCcsIFwiUHJvdmlkZXIgJ3swfScgbXVzdCBkZWZpbmUgJGdldCBmYWN0b3J5IG1ldGhvZC5cIiwgbmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBwcm92aWRlckNhY2hlW25hbWUgKyBwcm92aWRlclN1ZmZpeF0gPSBwcm92aWRlcl87XG4gIH1cblxuICBmdW5jdGlvbiBlbmZvcmNlUmV0dXJuVmFsdWUobmFtZSwgZmFjdG9yeSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBlbmZvcmNlZFJldHVyblZhbHVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGZhY3RvcnksIHRoaXMpO1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCd1bmRlZicsIFwiUHJvdmlkZXIgJ3swfScgbXVzdCByZXR1cm4gYSB2YWx1ZSBmcm9tICRnZXQgZmFjdG9yeSBtZXRob2QuXCIsIG5hbWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZmFjdG9yeShuYW1lLCBmYWN0b3J5Rm4sIGVuZm9yY2UpIHtcbiAgICByZXR1cm4gcHJvdmlkZXIobmFtZSwge1xuICAgICAgJGdldDogZW5mb3JjZSAhPT0gZmFsc2UgPyBlbmZvcmNlUmV0dXJuVmFsdWUobmFtZSwgZmFjdG9yeUZuKSA6IGZhY3RvcnlGblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VydmljZShuYW1lLCBjb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBmYWN0b3J5KG5hbWUsIFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7XG4gICAgICByZXR1cm4gJGluamVjdG9yLmluc3RhbnRpYXRlKGNvbnN0cnVjdG9yKTtcbiAgICB9XSk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWx1ZShuYW1lLCB2YWwpIHsgcmV0dXJuIGZhY3RvcnkobmFtZSwgdmFsdWVGbih2YWwpLCBmYWxzZSk7IH1cblxuICBmdW5jdGlvbiBjb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdjb25zdGFudCcpO1xuICAgIHByb3ZpZGVyQ2FjaGVbbmFtZV0gPSB2YWx1ZTtcbiAgICBpbnN0YW5jZUNhY2hlW25hbWVdID0gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBkZWNvcmF0b3Ioc2VydmljZU5hbWUsIGRlY29yRm4pIHtcbiAgICB2YXIgb3JpZ1Byb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoc2VydmljZU5hbWUgKyBwcm92aWRlclN1ZmZpeCksXG4gICAgICAgIG9yaWckZ2V0ID0gb3JpZ1Byb3ZpZGVyLiRnZXQ7XG5cbiAgICBvcmlnUHJvdmlkZXIuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9yaWdJbnN0YW5jZSA9IGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKG9yaWckZ2V0LCBvcmlnUHJvdmlkZXIpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGRlY29yRm4sIG51bGwsIHskZGVsZWdhdGU6IG9yaWdJbnN0YW5jZX0pO1xuICAgIH07XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gTW9kdWxlIExvYWRpbmdcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIGZ1bmN0aW9uIGxvYWRNb2R1bGVzKG1vZHVsZXNUb0xvYWQpIHtcbiAgICBhc3NlcnRBcmcoaXNVbmRlZmluZWQobW9kdWxlc1RvTG9hZCkgfHwgaXNBcnJheShtb2R1bGVzVG9Mb2FkKSwgJ21vZHVsZXNUb0xvYWQnLCAnbm90IGFuIGFycmF5Jyk7XG4gICAgdmFyIHJ1bkJsb2NrcyA9IFtdLCBtb2R1bGVGbjtcbiAgICBmb3JFYWNoKG1vZHVsZXNUb0xvYWQsIGZ1bmN0aW9uKG1vZHVsZSkge1xuICAgICAgaWYgKGxvYWRlZE1vZHVsZXMuZ2V0KG1vZHVsZSkpIHJldHVybjtcbiAgICAgIGxvYWRlZE1vZHVsZXMucHV0KG1vZHVsZSwgdHJ1ZSk7XG5cbiAgICAgIGZ1bmN0aW9uIHJ1bkludm9rZVF1ZXVlKHF1ZXVlKSB7XG4gICAgICAgIHZhciBpLCBpaTtcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBxdWV1ZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFyIGludm9rZUFyZ3MgPSBxdWV1ZVtpXSxcbiAgICAgICAgICAgICAgcHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChpbnZva2VBcmdzWzBdKTtcblxuICAgICAgICAgIHByb3ZpZGVyW2ludm9rZUFyZ3NbMV1dLmFwcGx5KHByb3ZpZGVyLCBpbnZva2VBcmdzWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaXNTdHJpbmcobW9kdWxlKSkge1xuICAgICAgICAgIG1vZHVsZUZuID0gYW5ndWxhck1vZHVsZShtb2R1bGUpO1xuICAgICAgICAgIHJ1bkJsb2NrcyA9IHJ1bkJsb2Nrcy5jb25jYXQobG9hZE1vZHVsZXMobW9kdWxlRm4ucmVxdWlyZXMpKS5jb25jYXQobW9kdWxlRm4uX3J1bkJsb2Nrcyk7XG4gICAgICAgICAgcnVuSW52b2tlUXVldWUobW9kdWxlRm4uX2ludm9rZVF1ZXVlKTtcbiAgICAgICAgICBydW5JbnZva2VRdWV1ZShtb2R1bGVGbi5fY29uZmlnQmxvY2tzKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKG1vZHVsZSkpIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2gocHJvdmlkZXJJbmplY3Rvci5pbnZva2UobW9kdWxlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzZXJ0QXJnRm4obW9kdWxlLCAnbW9kdWxlJyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZVttb2R1bGUubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUubWVzc2FnZSAmJiBlLnN0YWNrICYmIGUuc3RhY2suaW5kZXhPZihlLm1lc3NhZ2UpID09IC0xKSB7XG4gICAgICAgICAgLy8gU2FmYXJpICYgRkYncyBzdGFjayB0cmFjZXMgZG9uJ3QgY29udGFpbiBlcnJvci5tZXNzYWdlIGNvbnRlbnRcbiAgICAgICAgICAvLyB1bmxpa2UgdGhvc2Ugb2YgQ2hyb21lIGFuZCBJRVxuICAgICAgICAgIC8vIFNvIGlmIHN0YWNrIGRvZXNuJ3QgY29udGFpbiBtZXNzYWdlLCB3ZSBjcmVhdGUgYSBuZXcgc3RyaW5nIHRoYXQgY29udGFpbnMgYm90aC5cbiAgICAgICAgICAvLyBTaW5jZSBlcnJvci5zdGFjayBpcyByZWFkLW9ubHkgaW4gU2FmYXJpLCBJJ20gb3ZlcnJpZGluZyBlIGFuZCBub3QgZS5zdGFjayBoZXJlLlxuICAgICAgICAgIC8qIGpzaGludCAtVzAyMiAqL1xuICAgICAgICAgIGUgPSBlLm1lc3NhZ2UgKyAnXFxuJyArIGUuc3RhY2s7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdtb2R1bGVycicsIFwiRmFpbGVkIHRvIGluc3RhbnRpYXRlIG1vZHVsZSB7MH0gZHVlIHRvOlxcbnsxfVwiLFxuICAgICAgICAgICAgICAgICAgbW9kdWxlLCBlLnN0YWNrIHx8IGUubWVzc2FnZSB8fCBlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcnVuQmxvY2tzO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIGludGVybmFsIEluamVjdG9yXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoY2FjaGUsIGZhY3RvcnkpIHtcblxuICAgIGZ1bmN0aW9uIGdldFNlcnZpY2Uoc2VydmljZU5hbWUsIGNhbGxlcikge1xuICAgICAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KHNlcnZpY2VOYW1lKSkge1xuICAgICAgICBpZiAoY2FjaGVbc2VydmljZU5hbWVdID09PSBJTlNUQU5USUFUSU5HKSB7XG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdjZGVwJywgJ0NpcmN1bGFyIGRlcGVuZGVuY3kgZm91bmQ6IHswfScsXG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lICsgJyA8LSAnICsgcGF0aC5qb2luKCcgPC0gJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHBhdGgudW5zaGlmdChzZXJ2aWNlTmFtZSk7XG4gICAgICAgICAgY2FjaGVbc2VydmljZU5hbWVdID0gSU5TVEFOVElBVElORztcbiAgICAgICAgICByZXR1cm4gY2FjaGVbc2VydmljZU5hbWVdID0gZmFjdG9yeShzZXJ2aWNlTmFtZSwgY2FsbGVyKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaWYgKGNhY2hlW3NlcnZpY2VOYW1lXSA9PT0gSU5TVEFOVElBVElORykge1xuICAgICAgICAgICAgZGVsZXRlIGNhY2hlW3NlcnZpY2VOYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHBhdGguc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludm9rZShmbiwgc2VsZiwgbG9jYWxzLCBzZXJ2aWNlTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiBsb2NhbHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNlcnZpY2VOYW1lID0gbG9jYWxzO1xuICAgICAgICBsb2NhbHMgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXJncyA9IFtdLFxuICAgICAgICAgICRpbmplY3QgPSBjcmVhdGVJbmplY3Rvci4kJGFubm90YXRlKGZuLCBzdHJpY3REaSwgc2VydmljZU5hbWUpLFxuICAgICAgICAgIGxlbmd0aCwgaSxcbiAgICAgICAgICBrZXk7XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9ICRpbmplY3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0gJGluamVjdFtpXTtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdpdGtuJyxcbiAgICAgICAgICAgICAgICAgICdJbmNvcnJlY3QgaW5qZWN0aW9uIHRva2VuISBFeHBlY3RlZCBzZXJ2aWNlIG5hbWUgYXMgc3RyaW5nLCBnb3QgezB9Jywga2V5KTtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLnB1c2goXG4gICAgICAgICAgbG9jYWxzICYmIGxvY2Fscy5oYXNPd25Qcm9wZXJ0eShrZXkpXG4gICAgICAgICAgPyBsb2NhbHNba2V5XVxuICAgICAgICAgIDogZ2V0U2VydmljZShrZXksIHNlcnZpY2VOYW1lKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgICAgIGZuID0gZm5bbGVuZ3RoXTtcbiAgICAgIH1cblxuICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhcmpzLWludm9rZS1hcHBseS12cy1zd2l0Y2hcbiAgICAgIC8vICM1Mzg4XG4gICAgICByZXR1cm4gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFudGlhdGUoVHlwZSwgbG9jYWxzLCBzZXJ2aWNlTmFtZSkge1xuICAgICAgLy8gQ2hlY2sgaWYgVHlwZSBpcyBhbm5vdGF0ZWQgYW5kIHVzZSBqdXN0IHRoZSBnaXZlbiBmdW5jdGlvbiBhdCBuLTEgYXMgcGFyYW1ldGVyXG4gICAgICAvLyBlLmcuIHNvbWVNb2R1bGUuZmFjdG9yeSgnZ3JlZXRlcicsIFsnJHdpbmRvdycsIGZ1bmN0aW9uKHJlbmFtZWQkd2luZG93KSB7fV0pO1xuICAgICAgLy8gT2JqZWN0IGNyZWF0aW9uOiBodHRwOi8vanNwZXJmLmNvbS9jcmVhdGUtY29uc3RydWN0b3IvMlxuICAgICAgdmFyIGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZSgoaXNBcnJheShUeXBlKSA/IFR5cGVbVHlwZS5sZW5ndGggLSAxXSA6IFR5cGUpLnByb3RvdHlwZSB8fCBudWxsKTtcbiAgICAgIHZhciByZXR1cm5lZFZhbHVlID0gaW52b2tlKFR5cGUsIGluc3RhbmNlLCBsb2NhbHMsIHNlcnZpY2VOYW1lKTtcblxuICAgICAgcmV0dXJuIGlzT2JqZWN0KHJldHVybmVkVmFsdWUpIHx8IGlzRnVuY3Rpb24ocmV0dXJuZWRWYWx1ZSkgPyByZXR1cm5lZFZhbHVlIDogaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGludm9rZTogaW52b2tlLFxuICAgICAgaW5zdGFudGlhdGU6IGluc3RhbnRpYXRlLFxuICAgICAgZ2V0OiBnZXRTZXJ2aWNlLFxuICAgICAgYW5ub3RhdGU6IGNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUsXG4gICAgICBoYXM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyQ2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSArIHByb3ZpZGVyU3VmZml4KSB8fCBjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbmNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUgPSBhbm5vdGF0ZTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRhbmNob3JTY3JvbGxQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIGAkYW5jaG9yU2Nyb2xsUHJvdmlkZXJgIHRvIGRpc2FibGUgYXV0b21hdGljIHNjcm9sbGluZyB3aGVuZXZlclxuICoge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IGNoYW5nZXMuXG4gKi9cbmZ1bmN0aW9uICRBbmNob3JTY3JvbGxQcm92aWRlcigpIHtcblxuICB2YXIgYXV0b1Njcm9sbGluZ0VuYWJsZWQgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmNob3JTY3JvbGxQcm92aWRlciNkaXNhYmxlQXV0b1Njcm9sbGluZ1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQnkgZGVmYXVsdCwge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwgJGFuY2hvclNjcm9sbCgpfSB3aWxsIGF1dG9tYXRpY2FsbHkgZGV0ZWN0IGNoYW5nZXMgdG9cbiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IGFuZCBzY3JvbGwgdG8gdGhlIGVsZW1lbnQgbWF0Y2hpbmcgdGhlIG5ldyBoYXNoLjxiciAvPlxuICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gZGlzYWJsZSBhdXRvbWF0aWMgc2Nyb2xsaW5nLlxuICAgKlxuICAgKiBJZiBhdXRvbWF0aWMgc2Nyb2xsaW5nIGlzIGRpc2FibGVkLCBvbmUgbXVzdCBleHBsaWNpdGx5IGNhbGxcbiAgICoge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwgJGFuY2hvclNjcm9sbCgpfSBpbiBvcmRlciB0byBzY3JvbGwgdG8gdGhlIGVsZW1lbnQgcmVsYXRlZCB0byB0aGVcbiAgICogY3VycmVudCBoYXNoLlxuICAgKi9cbiAgdGhpcy5kaXNhYmxlQXV0b1Njcm9sbGluZyA9IGZ1bmN0aW9uKCkge1xuICAgIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRhbmNob3JTY3JvbGxcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICogQHJlcXVpcmVzICR3aW5kb3dcbiAgICogQHJlcXVpcmVzICRsb2NhdGlvblxuICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogV2hlbiBjYWxsZWQsIGl0IHNjcm9sbHMgdG8gdGhlIGVsZW1lbnQgcmVsYXRlZCB0byB0aGUgc3BlY2lmaWVkIGBoYXNoYCBvciAoaWYgb21pdHRlZCkgdG8gdGhlXG4gICAqIGN1cnJlbnQgdmFsdWUgb2Yge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9LCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIHNwZWNpZmllZFxuICAgKiBpbiB0aGVcbiAgICogW0hUTUw1IHNwZWNdKGh0dHA6Ly93d3cudzMub3JnL2h0bWwvd2cvZHJhZnRzL2h0bWwvbWFzdGVyL2Jyb3dzZXJzLmh0bWwjdGhlLWluZGljYXRlZC1wYXJ0LW9mLXRoZS1kb2N1bWVudCkuXG4gICAqXG4gICAqIEl0IGFsc28gd2F0Y2hlcyB0aGUge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IGFuZCBhdXRvbWF0aWNhbGx5IHNjcm9sbHMgdG9cbiAgICogbWF0Y2ggYW55IGFuY2hvciB3aGVuZXZlciBpdCBjaGFuZ2VzLiBUaGlzIGNhbiBiZSBkaXNhYmxlZCBieSBjYWxsaW5nXG4gICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmcgJGFuY2hvclNjcm9sbFByb3ZpZGVyLmRpc2FibGVBdXRvU2Nyb2xsaW5nKCl9LlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gdXNlIGl0cyB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCN5T2Zmc2V0IHlPZmZzZXR9IHByb3BlcnR5IHRvIHNwZWNpZnkgYVxuICAgKiB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0IChlaXRoZXIgZml4ZWQgb3IgZHluYW1pYykuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gaGFzaCBUaGUgaGFzaCBzcGVjaWZ5aW5nIHRoZSBlbGVtZW50IHRvIHNjcm9sbCB0by4gSWYgb21pdHRlZCwgdGhlIHZhbHVlIG9mXG4gICAqICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiBAcHJvcGVydHkgeyhudW1iZXJ8ZnVuY3Rpb258anFMaXRlKX0geU9mZnNldFxuICAgKiBJZiBzZXQsIHNwZWNpZmllcyBhIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQuIFRoaXMgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gdGhlcmUgYXJlIGZpeGVkXG4gICAqIHBvc2l0aW9uZWQgZWxlbWVudHMgYXQgdGhlIHRvcCBvZiB0aGUgcGFnZSwgc3VjaCBhcyBuYXZiYXJzLCBoZWFkZXJzIGV0Yy5cbiAgICpcbiAgICogYHlPZmZzZXRgIGNhbiBiZSBzcGVjaWZpZWQgaW4gdmFyaW91cyB3YXlzOlxuICAgKiAtICoqbnVtYmVyKio6IEEgZml4ZWQgbnVtYmVyIG9mIHBpeGVscyB0byBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz48YnIgLz5cbiAgICogLSAqKmZ1bmN0aW9uKio6IEEgZ2V0dGVyIGZ1bmN0aW9uIGNhbGxlZCBldmVyeXRpbWUgYCRhbmNob3JTY3JvbGwoKWAgaXMgZXhlY3V0ZWQuIE11c3QgcmV0dXJuXG4gICAqICAgYSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvZmZzZXQgKGluIHBpeGVscykuPGJyIC8+PGJyIC8+XG4gICAqIC0gKipqcUxpdGUqKjogQSBqcUxpdGUvalF1ZXJ5IGVsZW1lbnQgdG8gYmUgdXNlZCBmb3Igc3BlY2lmeWluZyB0aGUgb2Zmc2V0LiBUaGUgZGlzdGFuY2UgZnJvbVxuICAgKiAgIHRoZSB0b3Agb2YgdGhlIHBhZ2UgdG8gdGhlIGVsZW1lbnQncyBib3R0b20gd2lsbCBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz5cbiAgICogICAqKk5vdGUqKjogVGhlIGVsZW1lbnQgd2lsbCBiZSB0YWtlbiBpbnRvIGFjY291bnQgb25seSBhcyBsb25nIGFzIGl0cyBgcG9zaXRpb25gIGlzIHNldCB0b1xuICAgKiAgIGBmaXhlZGAuIFRoaXMgb3B0aW9uIGlzIHVzZWZ1bCwgd2hlbiBkZWFsaW5nIHdpdGggcmVzcG9uc2l2ZSBuYXZiYXJzL2hlYWRlcnMgdGhhdCBhZGp1c3RcbiAgICogICB0aGVpciBoZWlnaHQgYW5kL29yIHBvc2l0aW9uaW5nIGFjY29yZGluZyB0byB0aGUgdmlld3BvcnQncyBzaXplLlxuICAgKlxuICAgKiA8YnIgLz5cbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogSW4gb3JkZXIgZm9yIGB5T2Zmc2V0YCB0byB3b3JrIHByb3Blcmx5LCBzY3JvbGxpbmcgc2hvdWxkIHRha2UgcGxhY2Ugb24gdGhlIGRvY3VtZW50J3Mgcm9vdCBhbmRcbiAgICogbm90IHNvbWUgY2hpbGQgZWxlbWVudC5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG1vZHVsZT1cImFuY2hvclNjcm9sbEV4YW1wbGVcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGRpdiBpZD1cInNjcm9sbEFyZWFcIiBuZy1jb250cm9sbGVyPVwiU2Nyb2xsQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8YSBuZy1jbGljaz1cImdvdG9Cb3R0b20oKVwiPkdvIHRvIGJvdHRvbTwvYT5cbiAgICAgICAgICAgPGEgaWQ9XCJib3R0b21cIj48L2E+IFlvdSdyZSBhdCB0aGUgYm90dG9tIVxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JTY3JvbGxFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdTY3JvbGxDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRhbmNob3JTY3JvbGwnLFxuICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJGFuY2hvclNjcm9sbCkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmdvdG9Cb3R0b20gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBsb2NhdGlvbi5oYXNoIHRvIHRoZSBpZCBvZlxuICAgICAgICAgICAgICAgICAvLyB0aGUgZWxlbWVudCB5b3Ugd2lzaCB0byBzY3JvbGwgdG8uXG4gICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdib3R0b20nKTtcblxuICAgICAgICAgICAgICAgICAvLyBjYWxsICRhbmNob3JTY3JvbGwoKVxuICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgICAgI3Njcm9sbEFyZWEge1xuICAgICAgICAgICBoZWlnaHQ6IDI4MHB4O1xuICAgICAgICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgICAgIH1cblxuICAgICAgICAgI2JvdHRvbSB7XG4gICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICBtYXJnaW4tdG9wOiAyMDAwcHg7XG4gICAgICAgICB9XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqXG4gICAqIDxociAvPlxuICAgKiBUaGUgZXhhbXBsZSBiZWxvdyBpbGx1c3RyYXRlcyB0aGUgdXNlIG9mIGEgdmVydGljYWwgc2Nyb2xsLW9mZnNldCAoc3BlY2lmaWVkIGFzIGEgZml4ZWQgdmFsdWUpLlxuICAgKiBTZWUge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwjeU9mZnNldCAkYW5jaG9yU2Nyb2xsLnlPZmZzZXR9IGZvciBtb3JlIGRldGFpbHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG1vZHVsZT1cImFuY2hvclNjcm9sbE9mZnNldEV4YW1wbGVcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGRpdiBjbGFzcz1cImZpeGVkLWhlYWRlclwiIG5nLWNvbnRyb2xsZXI9XCJoZWFkZXJDdHJsXCI+XG4gICAgICAgICAgIDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cImdvdG9BbmNob3IoeClcIiBuZy1yZXBlYXQ9XCJ4IGluIFsxLDIsMyw0LDVdXCI+XG4gICAgICAgICAgICAgR28gdG8gYW5jaG9yIHt7eH19XG4gICAgICAgICAgIDwvYT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgICAgPGRpdiBpZD1cImFuY2hvcnt7eH19XCIgY2xhc3M9XCJhbmNob3JcIiBuZy1yZXBlYXQ9XCJ4IGluIFsxLDIsMyw0LDVdXCI+XG4gICAgICAgICAgIEFuY2hvciB7e3h9fSBvZiA1XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2FuY2hvclNjcm9sbE9mZnNldEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLnJ1bihbJyRhbmNob3JTY3JvbGwnLCBmdW5jdGlvbigkYW5jaG9yU2Nyb2xsKSB7XG4gICAgICAgICAgICAgJGFuY2hvclNjcm9sbC55T2Zmc2V0ID0gNTA7ICAgLy8gYWx3YXlzIHNjcm9sbCBieSA1MCBleHRyYSBwaXhlbHNcbiAgICAgICAgICAgfV0pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdoZWFkZXJDdHJsJywgWyckYW5jaG9yU2Nyb2xsJywgJyRsb2NhdGlvbicsICckc2NvcGUnLFxuICAgICAgICAgICAgIGZ1bmN0aW9uICgkYW5jaG9yU2Nyb2xsLCAkbG9jYXRpb24sICRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmdvdG9BbmNob3IgPSBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgIHZhciBuZXdIYXNoID0gJ2FuY2hvcicgKyB4O1xuICAgICAgICAgICAgICAgICBpZiAoJGxvY2F0aW9uLmhhc2goKSAhPT0gbmV3SGFzaCkge1xuICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgJGxvY2F0aW9uLmhhc2ggdG8gYG5ld0hhc2hgIGFuZFxuICAgICAgICAgICAgICAgICAgIC8vICRhbmNob3JTY3JvbGwgd2lsbCBhdXRvbWF0aWNhbGx5IHNjcm9sbCB0byBpdFxuICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdhbmNob3InICsgeCk7XG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgLy8gY2FsbCAkYW5jaG9yU2Nyb2xsKCkgZXhwbGljaXRseSxcbiAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSAkbG9jYXRpb24uaGFzaCBoYXNuJ3QgY2hhbmdlZFxuICAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIF0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICBib2R5IHtcbiAgICAgICAgICAgcGFkZGluZy10b3A6IDUwcHg7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5hbmNob3Ige1xuICAgICAgICAgICBib3JkZXI6IDJweCBkYXNoZWQgRGFya09yY2hpZDtcbiAgICAgICAgICAgcGFkZGluZzogMTBweCAxMHB4IDIwMHB4IDEwcHg7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5maXhlZC1oZWFkZXIge1xuICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgICB0b3A6IDA7IGxlZnQ6IDA7IHJpZ2h0OiAwO1xuICAgICAgICAgfVxuXG4gICAgICAgICAuZml4ZWQtaGVhZGVyID4gYSB7XG4gICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgbWFyZ2luOiA1cHggMTVweDtcbiAgICAgICAgIH1cbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCR3aW5kb3csICRsb2NhdGlvbiwgJHJvb3RTY29wZSkge1xuICAgIHZhciBkb2N1bWVudCA9ICR3aW5kb3cuZG9jdW1lbnQ7XG5cbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGZpcnN0IGFuY2hvciBmcm9tIGEgTm9kZUxpc3RcbiAgICAvLyAodXNpbmcgYEFycmF5I3NvbWUoKWAgaW5zdGVhZCBvZiBgYW5ndWxhciNmb3JFYWNoKClgIHNpbmNlIGl0J3MgbW9yZSBwZXJmb3JtYW50XG4gICAgLy8gIGFuZCB3b3JraW5nIGluIGFsbCBzdXBwb3J0ZWQgYnJvd3NlcnMuKVxuICAgIGZ1bmN0aW9uIGdldEZpcnN0QW5jaG9yKGxpc3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChsaXN0LCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIGlmIChub2RlTmFtZV8oZWxlbWVudCkgPT09ICdhJykge1xuICAgICAgICAgIHJlc3VsdCA9IGVsZW1lbnQ7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRZT2Zmc2V0KCkge1xuXG4gICAgICB2YXIgb2Zmc2V0ID0gc2Nyb2xsLnlPZmZzZXQ7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0KCk7XG4gICAgICB9IGVsc2UgaWYgKGlzRWxlbWVudChvZmZzZXQpKSB7XG4gICAgICAgIHZhciBlbGVtID0gb2Zmc2V0WzBdO1xuICAgICAgICB2YXIgc3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSk7XG4gICAgICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWlzTnVtYmVyKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxUbyhlbGVtKSB7XG4gICAgICBpZiAoZWxlbSkge1xuICAgICAgICBlbGVtLnNjcm9sbEludG9WaWV3KCk7XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IGdldFlPZmZzZXQoKTtcblxuICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgLy8gYG9mZnNldGAgaXMgdGhlIG51bWJlciBvZiBwaXhlbHMgd2Ugc2hvdWxkIHNjcm9sbCBVUCBpbiBvcmRlciB0byBhbGlnbiBgZWxlbWAgcHJvcGVybHkuXG4gICAgICAgICAgLy8gVGhpcyBpcyB0cnVlIE9OTFkgaWYgdGhlIGNhbGwgdG8gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgaW5pdGlhbGx5IGFsaWducyBgZWxlbWAgYXQgdGhlXG4gICAgICAgICAgLy8gdG9wIG9mIHRoZSB2aWV3cG9ydC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIElGIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGZyb20gdGhlIHRvcCBvZiBgZWxlbWAgdG8gdGhlIGVuZCBvZiB0aGUgcGFnZSdzIGNvbnRlbnQgaXMgbGVzc1xuICAgICAgICAgIC8vIHRoYW4gdGhlIGhlaWdodCBvZiB0aGUgdmlld3BvcnQsIHRoZW4gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgd2lsbCBhbGlnbiB0aGUgYGVsZW1gIHNvbWVcbiAgICAgICAgICAvLyB3YXkgZG93biB0aGUgcGFnZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFRoaXMgaXMgb2Z0ZW4gdGhlIGNhc2UgZm9yIGVsZW1lbnRzIG5lYXIgdGhlIGJvdHRvbSBvZiB0aGUgcGFnZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIEluIHN1Y2ggY2FzZXMgd2UgZG8gbm90IG5lZWQgdG8gc2Nyb2xsIHRoZSB3aG9sZSBgb2Zmc2V0YCB1cCwganVzdCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuXG4gICAgICAgICAgLy8gdGhlIHRvcCBvZiB0aGUgZWxlbWVudCBhbmQgdGhlIG9mZnNldCwgd2hpY2ggaXMgZW5vdWdoIHRvIGFsaWduIHRoZSB0b3Agb2YgYGVsZW1gIGF0IHRoZVxuICAgICAgICAgIC8vIGRlc2lyZWQgcG9zaXRpb24uXG4gICAgICAgICAgdmFyIGVsZW1Ub3AgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAkd2luZG93LnNjcm9sbEJ5KDAsIGVsZW1Ub3AgLSBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbChoYXNoKSB7XG4gICAgICBoYXNoID0gaXNTdHJpbmcoaGFzaCkgPyBoYXNoIDogJGxvY2F0aW9uLmhhc2goKTtcbiAgICAgIHZhciBlbG07XG5cbiAgICAgIC8vIGVtcHR5IGhhc2gsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlXG4gICAgICBpZiAoIWhhc2gpIHNjcm9sbFRvKG51bGwpO1xuXG4gICAgICAvLyBlbGVtZW50IHdpdGggZ2l2ZW4gaWRcbiAgICAgIGVsc2UgaWYgKChlbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoKSkpIHNjcm9sbFRvKGVsbSk7XG5cbiAgICAgIC8vIGZpcnN0IGFuY2hvciB3aXRoIGdpdmVuIG5hbWUgOi1EXG4gICAgICBlbHNlIGlmICgoZWxtID0gZ2V0Rmlyc3RBbmNob3IoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaCkpKSkgc2Nyb2xsVG8oZWxtKTtcblxuICAgICAgLy8gbm8gZWxlbWVudCBhbmQgaGFzaCA9PSAndG9wJywgc2Nyb2xsIHRvIHRoZSB0b3Agb2YgdGhlIHBhZ2VcbiAgICAgIGVsc2UgaWYgKGhhc2ggPT09ICd0b3AnKSBzY3JvbGxUbyhudWxsKTtcbiAgICB9XG5cbiAgICAvLyBkb2VzIG5vdCBzY3JvbGwgd2hlbiB1c2VyIGNsaWNrcyBvbiBhbmNob3IgbGluayB0aGF0IGlzIGN1cnJlbnRseSBvblxuICAgIC8vIChubyB1cmwgY2hhbmdlLCBubyAkbG9jYXRpb24uaGFzaCgpIGNoYW5nZSksIGJyb3dzZXIgbmF0aXZlIGRvZXMgc2Nyb2xsXG4gICAgaWYgKGF1dG9TY3JvbGxpbmdFbmFibGVkKSB7XG4gICAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2goKSB7cmV0dXJuICRsb2NhdGlvbi5oYXNoKCk7fSxcbiAgICAgICAgZnVuY3Rpb24gYXV0b1Njcm9sbFdhdGNoQWN0aW9uKG5ld1ZhbCwgb2xkVmFsKSB7XG4gICAgICAgICAgLy8gc2tpcCB0aGUgaW5pdGlhbCBzY3JvbGwgaWYgJGxvY2F0aW9uLmhhc2ggaXMgZW1wdHlcbiAgICAgICAgICBpZiAobmV3VmFsID09PSBvbGRWYWwgJiYgbmV3VmFsID09PSAnJykgcmV0dXJuO1xuXG4gICAgICAgICAganFMaXRlRG9jdW1lbnRMb2FkZWQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoc2Nyb2xsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjcm9sbDtcbiAgfV07XG59XG5cbnZhciAkYW5pbWF0ZU1pbkVyciA9IG1pbkVycignJGFuaW1hdGUnKTtcbnZhciBFTEVNRU5UX05PREUgPSAxO1xudmFyIE5HX0FOSU1BVEVfQ0xBU1NOQU1FID0gJ25nLWFuaW1hdGUnO1xuXG5mdW5jdGlvbiBtZXJnZUNsYXNzZXMoYSxiKSB7XG4gIGlmICghYSAmJiAhYikgcmV0dXJuICcnO1xuICBpZiAoIWEpIHJldHVybiBiO1xuICBpZiAoIWIpIHJldHVybiBhO1xuICBpZiAoaXNBcnJheShhKSkgYSA9IGEuam9pbignICcpO1xuICBpZiAoaXNBcnJheShiKSkgYiA9IGIuam9pbignICcpO1xuICByZXR1cm4gYSArICcgJyArIGI7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlbG0gPSBlbGVtZW50W2ldO1xuICAgIGlmIChlbG0ubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgcmV0dXJuIGVsbTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3BsaXRDbGFzc2VzKGNsYXNzZXMpIHtcbiAgaWYgKGlzU3RyaW5nKGNsYXNzZXMpKSB7XG4gICAgY2xhc3NlcyA9IGNsYXNzZXMuc3BsaXQoJyAnKTtcbiAgfVxuXG4gIC8vIFVzZSBjcmVhdGVNYXAoKSB0byBwcmV2ZW50IGNsYXNzIGFzc3VtcHRpb25zIGludm9sdmluZyBwcm9wZXJ0eSBuYW1lcyBpblxuICAvLyBPYmplY3QucHJvdG90eXBlXG4gIHZhciBvYmogPSBjcmVhdGVNYXAoKTtcbiAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbihrbGFzcykge1xuICAgIC8vIHNvbWV0aW1lcyB0aGUgc3BsaXQgbGVhdmVzIGVtcHR5IHN0cmluZyB2YWx1ZXNcbiAgICAvLyBpbmNhc2UgZXh0cmEgc3BhY2VzIHdlcmUgYXBwbGllZCB0byB0aGUgb3B0aW9uc1xuICAgIGlmIChrbGFzcy5sZW5ndGgpIHtcbiAgICAgIG9ialtrbGFzc10gPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5cbi8vIGlmIGFueSBvdGhlciB0eXBlIG9mIG9wdGlvbnMgdmFsdWUgYmVzaWRlcyBhbiBPYmplY3QgdmFsdWUgaXNcbi8vIHBhc3NlZCBpbnRvIHRoZSAkYW5pbWF0ZS5tZXRob2QoKSBhbmltYXRpb24gdGhlbiB0aGlzIGhlbHBlciBjb2RlXG4vLyB3aWxsIGJlIHJ1biB3aGljaCB3aWxsIGlnbm9yZSBpdC4gV2hpbGUgdGhpcyBwYXRjaCBpcyBub3QgdGhlXG4vLyBncmVhdGVzdCBzb2x1dGlvbiB0byB0aGlzLCBhIGxvdCBvZiBleGlzdGluZyBwbHVnaW5zIGRlcGVuZCBvblxuLy8gJGFuaW1hdGUgdG8gZWl0aGVyIGNhbGwgdGhlIGNhbGxiYWNrICg8IDEuMikgb3IgcmV0dXJuIGEgcHJvbWlzZVxuLy8gdGhhdCBjYW4gYmUgY2hhbmdlZC4gVGhpcyBoZWxwZXIgZnVuY3Rpb24gZW5zdXJlcyB0aGF0IHRoZSBvcHRpb25zXG4vLyBhcmUgd2lwZWQgY2xlYW4gaW5jYXNlIGEgY2FsbGJhY2sgZnVuY3Rpb24gaXMgcHJvdmlkZWQuXG5mdW5jdGlvbiBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucykge1xuICByZXR1cm4gaXNPYmplY3Qob3B0aW9ucylcbiAgICAgID8gb3B0aW9uc1xuICAgICAgOiB7fTtcbn1cblxudmFyICQkQ29yZUFuaW1hdGVKc1Byb3ZpZGVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge307XG59O1xuXG4vLyB0aGlzIGlzIHByZWZpeGVkIHdpdGggQ29yZSBzaW5jZSBpdCBjb25mbGljdHMgd2l0aFxuLy8gdGhlIGFuaW1hdGVRdWV1ZVByb3ZpZGVyIGRlZmluZWQgaW4gbmdBbmltYXRlL2FuaW1hdGVRdWV1ZS5qc1xudmFyICQkQ29yZUFuaW1hdGVRdWV1ZVByb3ZpZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwb3N0RGlnZXN0UXVldWUgPSBuZXcgSGFzaE1hcCgpO1xuICB2YXIgcG9zdERpZ2VzdEVsZW1lbnRzID0gW107XG5cbiAgdGhpcy4kZ2V0ID0gWyckJEFuaW1hdGVSdW5uZXInLCAnJHJvb3RTY29wZScsXG4gICAgICAgZnVuY3Rpb24oJCRBbmltYXRlUnVubmVyLCAgICRyb290U2NvcGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZW5hYmxlZDogbm9vcCxcbiAgICAgIG9uOiBub29wLFxuICAgICAgb2ZmOiBub29wLFxuICAgICAgcGluOiBub29wLFxuXG4gICAgICBwdXNoOiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgb3B0aW9ucywgZG9tT3BlcmF0aW9uKSB7XG4gICAgICAgIGRvbU9wZXJhdGlvbiAgICAgICAgJiYgZG9tT3BlcmF0aW9uKCk7XG5cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIG9wdGlvbnMuZnJvbSAgICAgICAgJiYgZWxlbWVudC5jc3Mob3B0aW9ucy5mcm9tKTtcbiAgICAgICAgb3B0aW9ucy50byAgICAgICAgICAmJiBlbGVtZW50LmNzcyhvcHRpb25zLnRvKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5hZGRDbGFzcyB8fCBvcHRpb25zLnJlbW92ZUNsYXNzKSB7XG4gICAgICAgICAgYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QoZWxlbWVudCwgb3B0aW9ucy5hZGRDbGFzcywgb3B0aW9ucy5yZW1vdmVDbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcnVubmVyID0gbmV3ICQkQW5pbWF0ZVJ1bm5lcigpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblxuICAgICAgICAvLyBzaW5jZSB0aGVyZSBhcmUgbm8gYW5pbWF0aW9ucyB0byBydW4gdGhlIHJ1bm5lciBuZWVkcyB0byBiZVxuICAgICAgICAvLyBub3RpZmllZCB0aGF0IHRoZSBhbmltYXRpb24gY2FsbCBpcyBjb21wbGV0ZS5cbiAgICAgICAgcnVubmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgICB9XG4gICAgfTtcblxuXG4gICAgZnVuY3Rpb24gdXBkYXRlRGF0YShkYXRhLCBjbGFzc2VzLCB2YWx1ZSkge1xuICAgICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIGlmIChjbGFzc2VzKSB7XG4gICAgICAgIGNsYXNzZXMgPSBpc1N0cmluZyhjbGFzc2VzKSA/IGNsYXNzZXMuc3BsaXQoJyAnKSA6XG4gICAgICAgICAgICAgICAgICBpc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IFtdO1xuICAgICAgICBmb3JFYWNoKGNsYXNzZXMsIGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgZGF0YVtjbGFzc05hbWVdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUNTU0NsYXNzQ2hhbmdlcygpIHtcbiAgICAgIGZvckVhY2gocG9zdERpZ2VzdEVsZW1lbnRzLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHZhciBkYXRhID0gcG9zdERpZ2VzdFF1ZXVlLmdldChlbGVtZW50KTtcbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICB2YXIgZXhpc3RpbmcgPSBzcGxpdENsYXNzZXMoZWxlbWVudC5hdHRyKCdjbGFzcycpKTtcbiAgICAgICAgICB2YXIgdG9BZGQgPSAnJztcbiAgICAgICAgICB2YXIgdG9SZW1vdmUgPSAnJztcbiAgICAgICAgICBmb3JFYWNoKGRhdGEsIGZ1bmN0aW9uKHN0YXR1cywgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICB2YXIgaGFzQ2xhc3MgPSAhIWV4aXN0aW5nW2NsYXNzTmFtZV07XG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSBoYXNDbGFzcykge1xuICAgICAgICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgdG9BZGQgKz0gKHRvQWRkLmxlbmd0aCA/ICcgJyA6ICcnKSArIGNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0b1JlbW92ZSArPSAodG9SZW1vdmUubGVuZ3RoID8gJyAnIDogJycpICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uKGVsbSkge1xuICAgICAgICAgICAgdG9BZGQgICAgJiYganFMaXRlQWRkQ2xhc3MoZWxtLCB0b0FkZCk7XG4gICAgICAgICAgICB0b1JlbW92ZSAmJiBqcUxpdGVSZW1vdmVDbGFzcyhlbG0sIHRvUmVtb3ZlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwb3N0RGlnZXN0UXVldWUucmVtb3ZlKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHBvc3REaWdlc3RFbGVtZW50cy5sZW5ndGggPSAwO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QoZWxlbWVudCwgYWRkLCByZW1vdmUpIHtcbiAgICAgIHZhciBkYXRhID0gcG9zdERpZ2VzdFF1ZXVlLmdldChlbGVtZW50KSB8fCB7fTtcblxuICAgICAgdmFyIGNsYXNzZXNBZGRlZCA9IHVwZGF0ZURhdGEoZGF0YSwgYWRkLCB0cnVlKTtcbiAgICAgIHZhciBjbGFzc2VzUmVtb3ZlZCA9IHVwZGF0ZURhdGEoZGF0YSwgcmVtb3ZlLCBmYWxzZSk7XG5cbiAgICAgIGlmIChjbGFzc2VzQWRkZWQgfHwgY2xhc3Nlc1JlbW92ZWQpIHtcblxuICAgICAgICBwb3N0RGlnZXN0UXVldWUucHV0KGVsZW1lbnQsIGRhdGEpO1xuICAgICAgICBwb3N0RGlnZXN0RWxlbWVudHMucHVzaChlbGVtZW50KTtcblxuICAgICAgICBpZiAocG9zdERpZ2VzdEVsZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGhhbmRsZUNTU0NsYXNzQ2hhbmdlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgJGFuaW1hdGUgdGhhdCBkb2Vzbid0IHBlcmZvcm0gYW55IGFuaW1hdGlvbnMsIGluc3RlYWQganVzdFxuICogc3luY2hyb25vdXNseSBwZXJmb3JtcyBET00gdXBkYXRlcyBhbmQgcmVzb2x2ZXMgdGhlIHJldHVybmVkIHJ1bm5lciBwcm9taXNlLlxuICpcbiAqIEluIG9yZGVyIHRvIGVuYWJsZSBhbmltYXRpb25zIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaGFzIHRvIGJlIGxvYWRlZC5cbiAqXG4gKiBUbyBzZWUgdGhlIGZ1bmN0aW9uYWwgaW1wbGVtZW50YXRpb24gY2hlY2sgb3V0IGBzcmMvbmdBbmltYXRlL2FuaW1hdGUuanNgLlxuICovXG52YXIgJEFuaW1hdGVQcm92aWRlciA9IFsnJHByb3ZpZGUnLCBmdW5jdGlvbigkcHJvdmlkZSkge1xuICB2YXIgcHJvdmlkZXIgPSB0aGlzO1xuXG4gIHRoaXMuJCRyZWdpc3RlcmVkQW5pbWF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIG5ldyBpbmplY3RhYmxlIGFuaW1hdGlvbiBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBwcm9kdWNlcyB0aGVcbiAgICogYW5pbWF0aW9uIG9iamVjdCB3aGljaCBjb250YWlucyBjYWxsYmFjayBmdW5jdGlvbnMgZm9yIGVhY2ggZXZlbnQgdGhhdCBpcyBleHBlY3RlZCB0byBiZVxuICAgKiBhbmltYXRlZC5cbiAgICpcbiAgICogICAqIGBldmVudEZuYDogYGZ1bmN0aW9uKGVsZW1lbnQsIC4uLiAsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylgXG4gICAqICAgVGhlIGVsZW1lbnQgdG8gYW5pbWF0ZSwgdGhlIGBkb25lRnVuY3Rpb25gIGFuZCB0aGUgb3B0aW9ucyBmZWQgaW50byB0aGUgYW5pbWF0aW9uLiBEZXBlbmRpbmdcbiAgICogICBvbiB0aGUgdHlwZSBvZiBhbmltYXRpb24gYWRkaXRpb25hbCBhcmd1bWVudHMgd2lsbCBiZSBpbmplY3RlZCBpbnRvIHRoZSBhbmltYXRpb24gZnVuY3Rpb24uIFRoZVxuICAgKiAgIGxpc3QgYmVsb3cgZXhwbGFpbnMgdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZXMgZm9yIHRoZSBkaWZmZXJlbnQgYW5pbWF0aW9uIG1ldGhvZHM6XG4gICAqXG4gICAqICAgLSBzZXRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgYWRkZWRDbGFzc2VzLCByZW1vdmVkQ2xhc3NlcywgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZGVkQ2xhc3NlcywgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIHJlbW92ZWRDbGFzc2VzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqICAgLSBlbnRlciwgbGVhdmUsIG1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylcbiAgICogICAtIGFuaW1hdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb21TdHlsZXMsIHRvU3R5bGVzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqXG4gICAqICAgTWFrZSBzdXJlIHRvIHRyaWdnZXIgdGhlIGBkb25lRnVuY3Rpb25gIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBmdWxseSBjb21wbGV0ZS5cbiAgICpcbiAgICogYGBganNcbiAgICogICByZXR1cm4ge1xuICAgKiAgICAgLy9lbnRlciwgbGVhdmUsIG1vdmUgc2lnbmF0dXJlXG4gICAqICAgICBldmVudEZuIDogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSwgb3B0aW9ucykge1xuICAgKiAgICAgICAvL2NvZGUgdG8gcnVuIHRoZSBhbmltYXRpb25cbiAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcbiAgICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIGVuZEZ1bmN0aW9uKHdhc0NhbmNlbGxlZCkge1xuICAgKiAgICAgICAgIC8vY29kZSB0byBjYW5jZWwgdGhlIGFuaW1hdGlvblxuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGFuaW1hdGlvbiAodGhpcyBpcyB3aGF0IHRoZSBjbGFzcy1iYXNlZCBDU1MgdmFsdWUgd2lsbCBiZSBjb21wYXJlZCB0bykuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgVGhlIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHRvIHJldHVybiB0aGUgYW5pbWF0aW9uXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LlxuICAgKi9cbiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWUsIGZhY3RvcnkpIHtcbiAgICBpZiAobmFtZSAmJiBuYW1lLmNoYXJBdCgwKSAhPT0gJy4nKSB7XG4gICAgICB0aHJvdyAkYW5pbWF0ZU1pbkVycignbm90Y3NlbCcsIFwiRXhwZWN0aW5nIGNsYXNzIHNlbGVjdG9yIHN0YXJ0aW5nIHdpdGggJy4nIGdvdCAnezB9Jy5cIiwgbmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IG5hbWUgKyAnLWFuaW1hdGlvbic7XG4gICAgcHJvdmlkZXIuJCRyZWdpc3RlcmVkQW5pbWF0aW9uc1tuYW1lLnN1YnN0cigxKV0gPSBrZXk7XG4gICAgJHByb3ZpZGUuZmFjdG9yeShrZXksIGZhY3RvcnkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjY2xhc3NOYW1lRmlsdGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGFuZC9vciByZXR1cm5zIHRoZSBDU1MgY2xhc3MgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgY2hlY2tlZCB3aGVuIHBlcmZvcm1pbmdcbiAgICogYW4gYW5pbWF0aW9uLiBVcG9uIGJvb3RzdHJhcCB0aGUgY2xhc3NOYW1lRmlsdGVyIHZhbHVlIGlzIG5vdCBzZXQgYXQgYWxsIGFuZCB3aWxsXG4gICAqIHRoZXJlZm9yZSBlbmFibGUgJGFuaW1hdGUgdG8gYXR0ZW1wdCB0byBwZXJmb3JtIGFuIGFuaW1hdGlvbiBvbiBhbnkgZWxlbWVudCB0aGF0IGlzIHRyaWdnZXJlZC5cbiAgICogV2hlbiBzZXR0aW5nIHRoZSBgY2xhc3NOYW1lRmlsdGVyYCB2YWx1ZSwgYW5pbWF0aW9ucyB3aWxsIG9ubHkgYmUgcGVyZm9ybWVkIG9uIGVsZW1lbnRzXG4gICAqIHRoYXQgc3VjY2Vzc2Z1bGx5IG1hdGNoIHRoZSBmaWx0ZXIgZXhwcmVzc2lvbi4gVGhpcyBpbiB0dXJuIGNhbiBib29zdCBwZXJmb3JtYW5jZVxuICAgKiBmb3IgbG93LXBvd2VyZWQgZGV2aWNlcyBhcyB3ZWxsIGFzIGFwcGxpY2F0aW9ucyBjb250YWluaW5nIGEgbG90IG9mIHN0cnVjdHVyYWwgb3BlcmF0aW9ucy5cbiAgICogQHBhcmFtIHtSZWdFeHA9fSBleHByZXNzaW9uIFRoZSBjbGFzc05hbWUgZXhwcmVzc2lvbiB3aGljaCB3aWxsIGJlIGNoZWNrZWQgYWdhaW5zdCBhbGwgYW5pbWF0aW9uc1xuICAgKiBAcmV0dXJuIHtSZWdFeHB9IFRoZSBjdXJyZW50IENTUyBjbGFzc05hbWUgZXhwcmVzc2lvbiB2YWx1ZS4gSWYgbnVsbCB0aGVuIHRoZXJlIGlzIG5vIGV4cHJlc3Npb24gdmFsdWVcbiAgICovXG4gIHRoaXMuY2xhc3NOYW1lRmlsdGVyID0gZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLiQkY2xhc3NOYW1lRmlsdGVyID0gKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBSZWdFeHApID8gZXhwcmVzc2lvbiA6IG51bGw7XG4gICAgICBpZiAodGhpcy4kJGNsYXNzTmFtZUZpbHRlcikge1xuICAgICAgICB2YXIgcmVzZXJ2ZWRSZWdleCA9IG5ldyBSZWdFeHAoXCIoXFxcXHMrfFxcXFwvKVwiICsgTkdfQU5JTUFURV9DTEFTU05BTUUgKyBcIihcXFxccyt8XFxcXC8pXCIpO1xuICAgICAgICBpZiAocmVzZXJ2ZWRSZWdleC50ZXN0KHRoaXMuJCRjbGFzc05hbWVGaWx0ZXIudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICB0aHJvdyAkYW5pbWF0ZU1pbkVycignbm9uZ2NscycsJyRhbmltYXRlUHJvdmlkZXIuY2xhc3NOYW1lRmlsdGVyKHJlZ2V4KSBwcm9oaWJpdHMgYWNjZXB0aW5nIGEgcmVnZXggdmFsdWUgd2hpY2ggbWF0Y2hlcy9jb250YWlucyB0aGUgXCJ7MH1cIiBDU1MgY2xhc3MuJywgTkdfQU5JTUFURV9DTEFTU05BTUUpO1xuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuJCRjbGFzc05hbWVGaWx0ZXI7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gWyckJGFuaW1hdGVRdWV1ZScsIGZ1bmN0aW9uKCQkYW5pbWF0ZVF1ZXVlKSB7XG4gICAgZnVuY3Rpb24gZG9tSW5zZXJ0KGVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIGFmdGVyRWxlbWVudCkge1xuICAgICAgLy8gaWYgZm9yIHNvbWUgcmVhc29uIHRoZSBwcmV2aW91cyBlbGVtZW50IHdhcyByZW1vdmVkXG4gICAgICAvLyBmcm9tIHRoZSBkb20gc29tZXRpbWUgYmVmb3JlIHRoaXMgY29kZSBydW5zIHRoZW4gbGV0J3NcbiAgICAgIC8vIGp1c3Qgc3RpY2sgdG8gdXNpbmcgdGhlIHBhcmVudCBlbGVtZW50IGFzIHRoZSBhbmNob3JcbiAgICAgIGlmIChhZnRlckVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFmdGVyTm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShhZnRlckVsZW1lbnQpO1xuICAgICAgICBpZiAoYWZ0ZXJOb2RlICYmICFhZnRlck5vZGUucGFyZW50Tm9kZSAmJiAhYWZ0ZXJOb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICAgICAgICBhZnRlckVsZW1lbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhZnRlckVsZW1lbnQgPyBhZnRlckVsZW1lbnQuYWZ0ZXIoZWxlbWVudCkgOiBwYXJlbnRFbGVtZW50LnByZXBlbmQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkYW5pbWF0ZVxuICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgJGFuaW1hdGUgc2VydmljZSBleHBvc2VzIGEgc2VyaWVzIG9mIERPTSB1dGlsaXR5IG1ldGhvZHMgdGhhdCBwcm92aWRlIHN1cHBvcnRcbiAgICAgKiBmb3IgYW5pbWF0aW9uIGhvb2tzLiBUaGUgZGVmYXVsdCBiZWhhdmlvciBpcyB0aGUgYXBwbGljYXRpb24gb2YgRE9NIG9wZXJhdGlvbnMsIGhvd2V2ZXIsXG4gICAgICogd2hlbiBhbiBhbmltYXRpb24gaXMgZGV0ZWN0ZWQgKGFuZCBhbmltYXRpb25zIGFyZSBlbmFibGVkKSwgJGFuaW1hdGUgd2lsbCBkbyB0aGUgaGVhdnkgbGlmdGluZ1xuICAgICAqIHRvIGVuc3VyZSB0aGF0IGFuaW1hdGlvbiBydW5zIHdpdGggdGhlIHRyaWdnZXJlZCBET00gb3BlcmF0aW9uLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCAkYW5pbWF0ZSBkb2Vzbid0IHRyaWdnZXIgYW55IGFuaW1hdGlvbnMuIFRoaXMgaXMgYmVjYXVzZSB0aGUgYG5nQW5pbWF0ZWAgbW9kdWxlIGlzbid0XG4gICAgICogaW5jbHVkZWQgYW5kIG9ubHkgd2hlbiBpdCBpcyBhY3RpdmUgdGhlbiB0aGUgYW5pbWF0aW9uIGhvb2tzIHRoYXQgYCRhbmltYXRlYCB0cmlnZ2VycyB3aWxsIGJlXG4gICAgICogZnVuY3Rpb25hbC4gT25jZSBhY3RpdmUgdGhlbiBhbGwgc3RydWN0dXJhbCBgbmctYCBkaXJlY3RpdmVzIHdpbGwgdHJpZ2dlciBhbmltYXRpb25zIGFzIHRoZXkgcGVyZm9ybVxuICAgICAqIHRoZWlyIERPTS1yZWxhdGVkIG9wZXJhdGlvbnMgKGVudGVyLCBsZWF2ZSBhbmQgbW92ZSkuIE90aGVyIGRpcmVjdGl2ZXMgc3VjaCBhcyBgbmdDbGFzc2AsXG4gICAgICogYG5nU2hvd2AsIGBuZ0hpZGVgIGFuZCBgbmdNZXNzYWdlc2AgYWxzbyBwcm92aWRlIHN1cHBvcnQgZm9yIGFuaW1hdGlvbnMuXG4gICAgICpcbiAgICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHRoZWAkYW5pbWF0ZWAgc2VydmljZSBpcyBhbHdheXMgdXNlZCB3aGVuIGV4ZWN1dGluZyBET00tcmVsYXRlZCBwcm9jZWR1cmVzIHdpdGhpbiBkaXJlY3RpdmVzLlxuICAgICAqXG4gICAgICogVG8gbGVhcm4gbW9yZSBhYm91dCBlbmFibGluZyBhbmltYXRpb24gc3VwcG9ydCwgY2xpY2sgaGVyZSB0byB2aXNpdCB0aGVcbiAgICAgKiB7QGxpbmsgbmdBbmltYXRlIG5nQW5pbWF0ZSBtb2R1bGUgcGFnZX0uXG4gICAgICovXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIHdlIGRvbid0IGNhbGwgaXQgZGlyZWN0bHkgc2luY2Ugbm9uLWV4aXN0YW50IGFyZ3VtZW50cyBtYXlcbiAgICAgIC8vIGJlIGludGVycHJldGVkIGFzIG51bGwgd2l0aGluIHRoZSBzdWIgZW5hYmxlZCBmdW5jdGlvblxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBTZXRzIHVwIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGZpcmUgd2hlbmV2ZXIgdGhlIGFuaW1hdGlvbiBldmVudCAoZW50ZXIsIGxlYXZlLCBtb3ZlLCBldGMuLi4pXG4gICAgICAgKiAgICBoYXMgZmlyZWQgb24gdGhlIGdpdmVuIGVsZW1lbnQgb3IgYW1vbmcgYW55IG9mIGl0cyBjaGlsZHJlbi4gT25jZSB0aGUgbGlzdGVuZXIgaXMgZmlyZWQsIHRoZSBwcm92aWRlZCBjYWxsYmFja1xuICAgICAgICogICAgaXMgZmlyZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtczpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogJGFuaW1hdGUub24oJ2VudGVyJywgY29udGFpbmVyLFxuICAgICAgICogICAgZnVuY3Rpb24gY2FsbGJhY2soZWxlbWVudCwgcGhhc2UpIHtcbiAgICAgICAqICAgICAgLy8gY29vbCB3ZSBkZXRlY3RlZCBhbiBlbnRlciBhbmltYXRpb24gd2l0aGluIHRoZSBjb250YWluZXJcbiAgICAgICAqICAgIH1cbiAgICAgICAqICk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgdGhlIGFuaW1hdGlvbiBldmVudCB0aGF0IHdpbGwgYmUgY2FwdHVyZWQgKGUuZy4gZW50ZXIsIGxlYXZlLCBtb3ZlLCBhZGRDbGFzcywgcmVtb3ZlQ2xhc3MsIGV0Yy4uLilcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gY29udGFpbmVyIHRoZSBjb250YWluZXIgZWxlbWVudCB0aGF0IHdpbGwgY2FwdHVyZSBlYWNoIG9mIHRoZSBhbmltYXRpb24gZXZlbnRzIHRoYXQgYXJlIGZpcmVkIG9uIGl0c2VsZlxuICAgICAgICogICAgIGFzIHdlbGwgYXMgYW1vbmcgaXRzIGNoaWxkcmVuXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIGxpc3RlbmVyIGlzIHRyaWdnZXJlZFxuICAgICAgICpcbiAgICAgICAqIFRoZSBhcmd1bWVudHMgcHJlc2VudCBpbiB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gYXJlOlxuICAgICAgICogKiBgZWxlbWVudGAgLSBUaGUgY2FwdHVyZWQgRE9NIGVsZW1lbnQgdGhhdCB0aGUgYW5pbWF0aW9uIHdhcyBmaXJlZCBvbi5cbiAgICAgICAqICogYHBoYXNlYCAtIFRoZSBwaGFzZSBvZiB0aGUgYW5pbWF0aW9uLiBUaGUgdHdvIHBvc3NpYmxlIHBoYXNlcyBhcmUgKipzdGFydCoqICh3aGVuIHRoZSBhbmltYXRpb24gc3RhcnRzKSBhbmQgKipjbG9zZSoqICh3aGVuIGl0IGVuZHMpLlxuICAgICAgICovXG4gICAgICBvbjogJCRhbmltYXRlUXVldWUub24sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI29mZlxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBEZXJlZ2lzdGVycyBhbiBldmVudCBsaXN0ZW5lciBiYXNlZCBvbiB0aGUgZXZlbnQgd2hpY2ggaGFzIGJlZW4gYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm92aWRlZCBlbGVtZW50LiBUaGlzIG1ldGhvZFxuICAgICAgICogY2FuIGJlIHVzZWQgaW4gdGhyZWUgZGlmZmVyZW50IHdheXMgZGVwZW5kaW5nIG9uIHRoZSBhcmd1bWVudHM6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqIC8vIHJlbW92ZSBhbGwgdGhlIGFuaW1hdGlvbiBldmVudCBsaXN0ZW5lcnMgbGlzdGVuaW5nIGZvciBgZW50ZXJgXG4gICAgICAgKiAkYW5pbWF0ZS5vZmYoJ2VudGVyJyk7XG4gICAgICAgKlxuICAgICAgICogLy8gcmVtb3ZlIGFsbCB0aGUgYW5pbWF0aW9uIGV2ZW50IGxpc3RlbmVycyBsaXN0ZW5pbmcgZm9yIGBlbnRlcmAgb24gdGhlIGdpdmVuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlblxuICAgICAgICogJGFuaW1hdGUub2ZmKCdlbnRlcicsIGNvbnRhaW5lcik7XG4gICAgICAgKlxuICAgICAgICogLy8gcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciBmdW5jdGlvbiBwcm92aWRlZCBieSBgbGlzdGVuZXJGbmAgdGhhdCBpcyBzZXRcbiAgICAgICAqIC8vIHRvIGxpc3RlbiBmb3IgYGVudGVyYCBvbiB0aGUgZ2l2ZW4gYGVsZW1lbnRgIGFzIHdlbGwgYXMgaXRzIGNoaWxkcmVuXG4gICAgICAgKiAkYW5pbWF0ZS5vZmYoJ2VudGVyJywgY29udGFpbmVyLCBjYWxsYmFjayk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgdGhlIGFuaW1hdGlvbiBldmVudCAoZS5nLiBlbnRlciwgbGVhdmUsIG1vdmUsIGFkZENsYXNzLCByZW1vdmVDbGFzcywgZXRjLi4uKVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gY29udGFpbmVyIHRoZSBjb250YWluZXIgZWxlbWVudCB0aGUgZXZlbnQgbGlzdGVuZXIgd2FzIHBsYWNlZCBvblxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrIHRoZSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdhcyByZWdpc3RlcmVkIGFzIHRoZSBsaXN0ZW5lclxuICAgICAgICovXG4gICAgICBvZmY6ICQkYW5pbWF0ZVF1ZXVlLm9mZixcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNwaW5cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gQXNzb2NpYXRlcyB0aGUgcHJvdmlkZWQgZWxlbWVudCB3aXRoIGEgaG9zdCBwYXJlbnQgZWxlbWVudCB0byBhbGxvdyB0aGUgZWxlbWVudCB0byBiZSBhbmltYXRlZCBldmVuIGlmIGl0IGV4aXN0c1xuICAgICAgICogICAgb3V0c2lkZSBvZiB0aGUgRE9NIHN0cnVjdHVyZSBvZiB0aGUgQW5ndWxhciBhcHBsaWNhdGlvbi4gQnkgZG9pbmcgc28sIGFueSBhbmltYXRpb24gdHJpZ2dlcmVkIHZpYSBgJGFuaW1hdGVgIGNhbiBiZSBpc3N1ZWQgb24gdGhlXG4gICAgICAgKiAgICBlbGVtZW50IGRlc3BpdGUgYmVpbmcgb3V0c2lkZSB0aGUgcmVhbG0gb2YgdGhlIGFwcGxpY2F0aW9uIG9yIHdpdGhpbiBhbm90aGVyIGFwcGxpY2F0aW9uLiBTYXkgZm9yIGV4YW1wbGUgaWYgdGhlIGFwcGxpY2F0aW9uXG4gICAgICAgKiAgICB3YXMgYm9vdHN0cmFwcGVkIG9uIGFuIGVsZW1lbnQgdGhhdCBpcyBzb21ld2hlcmUgaW5zaWRlIG9mIHRoZSBgPGJvZHk+YCB0YWcsIGJ1dCB3ZSB3YW50ZWQgdG8gYWxsb3cgZm9yIGFuIGVsZW1lbnQgdG8gYmUgc2l0dWF0ZWRcbiAgICAgICAqICAgIGFzIGEgZGlyZWN0IGNoaWxkIG9mIGBkb2N1bWVudC5ib2R5YCwgdGhlbiB0aGlzIGNhbiBiZSBhY2hpZXZlZCBieSBwaW5uaW5nIHRoZSBlbGVtZW50IHZpYSBgJGFuaW1hdGUucGluKGVsZW1lbnQpYC4gS2VlcCBpbiBtaW5kXG4gICAgICAgKiAgICB0aGF0IGNhbGxpbmcgYCRhbmltYXRlLnBpbihlbGVtZW50LCBwYXJlbnRFbGVtZW50KWAgd2lsbCBub3QgYWN0dWFsbHkgaW5zZXJ0IGludG8gdGhlIERPTSBhbnl3aGVyZTsgaXQgd2lsbCBqdXN0IGNyZWF0ZSB0aGUgYXNzb2NpYXRpb24uXG4gICAgICAgKlxuICAgICAgICogICAgTm90ZSB0aGF0IHRoaXMgZmVhdHVyZSBpcyBvbmx5IGFjdGl2ZSB3aGVuIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaXMgdXNlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGV4dGVybmFsIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHBpbm5lZFxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnRFbGVtZW50IHRoZSBob3N0IHBhcmVudCBlbGVtZW50IHRoYXQgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGV4dGVybmFsIGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgcGluOiAkJGFuaW1hdGVRdWV1ZS5waW4sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2VuYWJsZWRcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVXNlZCB0byBnZXQgYW5kIHNldCB3aGV0aGVyIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgb3Igbm90IG9uIHRoZSBlbnRpcmUgYXBwbGljYXRpb24gb3Igb24gYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuLiBUaGlzXG4gICAgICAgKiBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGluIGZvdXIgd2F5czpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogLy8gcmV0dXJucyB0cnVlIG9yIGZhbHNlXG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKCk7XG4gICAgICAgKlxuICAgICAgICogLy8gY2hhbmdlcyB0aGUgZW5hYmxlZCBzdGF0ZSBmb3IgYWxsIGFuaW1hdGlvbnNcbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZmFsc2UpO1xuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZCh0cnVlKTtcbiAgICAgICAqXG4gICAgICAgKiAvLyByZXR1cm5zIHRydWUgb3IgZmFsc2UgaWYgYW5pbWF0aW9ucyBhcmUgZW5hYmxlZCBmb3IgYW4gZWxlbWVudFxuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZChlbGVtZW50KTtcbiAgICAgICAqXG4gICAgICAgKiAvLyBjaGFuZ2VzIHRoZSBlbmFibGVkIHN0YXRlIGZvciBhbiBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW5cbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGNvbnNpZGVyZWQgZm9yIGNoZWNraW5nL3NldHRpbmcgdGhlIGVuYWJsZWQgc3RhdGVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGVuYWJsZWQgd2hldGhlciBvciBub3QgdGhlIGFuaW1hdGlvbnMgd2lsbCBiZSBlbmFibGVkIGZvciB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IGFuaW1hdGlvbnMgYXJlIGVuYWJsZWRcbiAgICAgICAqL1xuICAgICAgZW5hYmxlZDogJCRhbmltYXRlUXVldWUuZW5hYmxlZCxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNjYW5jZWxcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gQ2FuY2VscyB0aGUgcHJvdmlkZWQgYW5pbWF0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7UHJvbWlzZX0gYW5pbWF0aW9uUHJvbWlzZSBUaGUgYW5pbWF0aW9uIHByb21pc2UgdGhhdCBpcyByZXR1cm5lZCB3aGVuIGFuIGFuaW1hdGlvbiBpcyBzdGFydGVkLlxuICAgICAgICovXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICBydW5uZXIuZW5kICYmIHJ1bm5lci5lbmQoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2VudGVyXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIEluc2VydHMgdGhlIGVsZW1lbnQgaW50byB0aGUgRE9NIGVpdGhlciBhZnRlciB0aGUgYGFmdGVyYCBlbGVtZW50IChpZiBwcm92aWRlZCkgb3JcbiAgICAgICAqICAgYXMgdGhlIGZpcnN0IGNoaWxkIHdpdGhpbiB0aGUgYHBhcmVudGAgZWxlbWVudCBhbmQgdGhlbiB0cmlnZ2VycyBhbiBhbmltYXRpb24uXG4gICAgICAgKiAgIEEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgZHVyaW5nIHRoZSBuZXh0IGRpZ2VzdCBvbmNlIHRoZSBhbmltYXRpb25cbiAgICAgICAqICAgaGFzIGNvbXBsZXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBpbnNlcnRlZCBpbnRvIHRoZSBET01cbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50IHRoZSBwYXJlbnQgZWxlbWVudCB3aGljaCB3aWxsIGFwcGVuZCB0aGUgZWxlbWVudCBhc1xuICAgICAgICogICBhIGNoaWxkIChzbyBsb25nIGFzIHRoZSBhZnRlciBlbGVtZW50IGlzIG5vdCBwcmVzZW50KVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gYWZ0ZXIgdGhlIHNpYmxpbmcgZWxlbWVudCBhZnRlciB3aGljaCB0aGUgZWxlbWVudCB3aWxsIGJlIGFwcGVuZGVkXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50LCBhZnRlciwgb3B0aW9ucykge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgJiYganFMaXRlKHBhcmVudCk7XG4gICAgICAgIGFmdGVyID0gYWZ0ZXIgJiYganFMaXRlKGFmdGVyKTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IGFmdGVyLnBhcmVudCgpO1xuICAgICAgICBkb21JbnNlcnQoZWxlbWVudCwgcGFyZW50LCBhZnRlcik7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdlbnRlcicsIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNtb3ZlXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIEluc2VydHMgKG1vdmVzKSB0aGUgZWxlbWVudCBpbnRvIGl0cyBuZXcgcG9zaXRpb24gaW4gdGhlIERPTSBlaXRoZXIgYWZ0ZXJcbiAgICAgICAqICAgdGhlIGBhZnRlcmAgZWxlbWVudCAoaWYgcHJvdmlkZWQpIG9yIGFzIHRoZSBmaXJzdCBjaGlsZCB3aXRoaW4gdGhlIGBwYXJlbnRgIGVsZW1lbnRcbiAgICAgICAqICAgYW5kIHRoZW4gdHJpZ2dlcnMgYW4gYW5pbWF0aW9uLiBBIHByb21pc2UgaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkXG4gICAgICAgKiAgIGR1cmluZyB0aGUgbmV4dCBkaWdlc3Qgb25jZSB0aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgbW92ZWQgaW50byB0aGUgbmV3IERPTSBwb3NpdGlvblxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnQgdGhlIHBhcmVudCBlbGVtZW50IHdoaWNoIHdpbGwgYXBwZW5kIHRoZSBlbGVtZW50IGFzXG4gICAgICAgKiAgIGEgY2hpbGQgKHNvIGxvbmcgYXMgdGhlIGFmdGVyIGVsZW1lbnQgaXMgbm90IHByZXNlbnQpXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBhZnRlciB0aGUgc2libGluZyBlbGVtZW50IGFmdGVyIHdoaWNoIHRoZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIG1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50ICYmIGpxTGl0ZShwYXJlbnQpO1xuICAgICAgICBhZnRlciA9IGFmdGVyICYmIGpxTGl0ZShhZnRlcik7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudCB8fCBhZnRlci5wYXJlbnQoKTtcbiAgICAgICAgZG9tSW5zZXJ0KGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnbW92ZScsIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2xlYXZlXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIFRyaWdnZXJzIGFuIGFuaW1hdGlvbiBhbmQgdGhlbiByZW1vdmVzIHRoZSBlbGVtZW50IGZyb20gdGhlIERPTS5cbiAgICAgICAqIFdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBhIHByb21pc2UgaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGR1cmluZyB0aGUgbmV4dFxuICAgICAgICogZGlnZXN0IG9uY2UgdGhlIGFuaW1hdGlvbiBoYXMgY29tcGxldGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBsZWF2ZTogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnbGVhdmUnLCBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNhZGRDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVHJpZ2dlcnMgYW4gYWRkQ2xhc3MgYW5pbWF0aW9uIHN1cnJvdW5kaW5nIHRoZSBhZGRpdGlvbiBvZiB0aGUgcHJvdmlkZWQgQ1NTIGNsYXNzKGVzKS4gVXBvblxuICAgICAgICogICBleGVjdXRpb24sIHRoZSBhZGRDbGFzcyBvcGVyYXRpb24gd2lsbCBvbmx5IGJlIGhhbmRsZWQgYWZ0ZXIgdGhlIG5leHQgZGlnZXN0IGFuZCBpdCB3aWxsIG5vdCB0cmlnZ2VyIGFuXG4gICAgICAgKiAgIGFuaW1hdGlvbiBpZiBlbGVtZW50IGFscmVhZHkgY29udGFpbnMgdGhlIENTUyBjbGFzcyBvciBpZiB0aGUgY2xhc3MgaXMgcmVtb3ZlZCBhdCBhIGxhdGVyIHN0ZXAuXG4gICAgICAgKiAgIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICogICAobGlrZSBlbnRlciwgbW92ZSBhbmQgbGVhdmUpIHNpbmNlIHRoZSBDU1MgY2xhc3NlcyBtYXkgYmUgYWRkZWQvcmVtb3ZlZCBhdCBkaWZmZXJlbnQgcG9pbnRzXG4gICAgICAgKiAgIGRlcGVuZGluZyBpZiBDU1Mgb3IgSmF2YVNjcmlwdCBhbmltYXRpb25zIGFyZSB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSBhZGRlZCAobXVsdGlwbGUgY2xhc3NlcyBhcmUgc2VwYXJhdGVkIHZpYSBzcGFjZXMpXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBhZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5hZGRjbGFzcywgY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ2FkZENsYXNzJywgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI3JlbW92ZUNsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUcmlnZ2VycyBhIHJlbW92ZUNsYXNzIGFuaW1hdGlvbiBzdXJyb3VuZGluZyB0aGUgcmVtb3ZhbCBvZiB0aGUgcHJvdmlkZWQgQ1NTIGNsYXNzKGVzKS4gVXBvblxuICAgICAgICogICBleGVjdXRpb24sIHRoZSByZW1vdmVDbGFzcyBvcGVyYXRpb24gd2lsbCBvbmx5IGJlIGhhbmRsZWQgYWZ0ZXIgdGhlIG5leHQgZGlnZXN0IGFuZCBpdCB3aWxsIG5vdCB0cmlnZ2VyIGFuXG4gICAgICAgKiAgIGFuaW1hdGlvbiBpZiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gdGhlIENTUyBjbGFzcyBvciBpZiB0aGUgY2xhc3MgaXMgYWRkZWQgYXQgYSBsYXRlciBzdGVwLlxuICAgICAgICogICBOb3RlIHRoYXQgY2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBhcmUgdHJlYXRlZCBkaWZmZXJlbnRseSBjb21wYXJlZCB0byBzdHJ1Y3R1cmFsIGFuaW1hdGlvbnNcbiAgICAgICAqICAgKGxpa2UgZW50ZXIsIG1vdmUgYW5kIGxlYXZlKSBzaW5jZSB0aGUgQ1NTIGNsYXNzZXMgbWF5IGJlIGFkZGVkL3JlbW92ZWQgYXQgZGlmZmVyZW50IHBvaW50c1xuICAgICAgICogICBkZXBlbmRpbmcgaWYgQ1NTIG9yIEphdmFTY3JpcHQgYW5pbWF0aW9ucyBhcmUgdXNlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggdGhlIENTUyBjbGFzc2VzIHdpbGwgYmUgYXBwbGllZCB0b1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzKGVzKSB0aGF0IHdpbGwgYmUgcmVtb3ZlZCAobXVsdGlwbGUgY2xhc3NlcyBhcmUgc2VwYXJhdGVkIHZpYSBzcGFjZXMpXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5yZW1vdmVDbGFzcywgY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ3JlbW92ZUNsYXNzJywgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI3NldENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBQZXJmb3JtcyBib3RoIHRoZSBhZGRpdGlvbiBhbmQgcmVtb3ZhbCBvZiBhIENTUyBjbGFzc2VzIG9uIGFuIGVsZW1lbnQgYW5kIChkdXJpbmcgdGhlIHByb2Nlc3MpXG4gICAgICAgKiAgICB0cmlnZ2VycyBhbiBhbmltYXRpb24gc3Vycm91bmRpbmcgdGhlIGNsYXNzIGFkZGl0aW9uL3JlbW92YWwuIE11Y2ggbGlrZSBgJGFuaW1hdGUuYWRkQ2xhc3NgIGFuZFxuICAgICAgICogICAgYCRhbmltYXRlLnJlbW92ZUNsYXNzYCwgYHNldENsYXNzYCB3aWxsIG9ubHkgZXZhbHVhdGUgdGhlIGNsYXNzZXMgYmVpbmcgYWRkZWQvcmVtb3ZlZCBvbmNlIGEgZGlnZXN0IGhhc1xuICAgICAgICogICAgcGFzc2VkLiBOb3RlIHRoYXQgY2xhc3MtYmFzZWQgYW5pbWF0aW9ucyBhcmUgdHJlYXRlZCBkaWZmZXJlbnRseSBjb21wYXJlZCB0byBzdHJ1Y3R1cmFsIGFuaW1hdGlvbnNcbiAgICAgICAqICAgIChsaWtlIGVudGVyLCBtb3ZlIGFuZCBsZWF2ZSkgc2luY2UgdGhlIENTUyBjbGFzc2VzIG1heSBiZSBhZGRlZC9yZW1vdmVkIGF0IGRpZmZlcmVudCBwb2ludHNcbiAgICAgICAqICAgIGRlcGVuZGluZyBpZiBDU1Mgb3IgSmF2YVNjcmlwdCBhbmltYXRpb25zIGFyZSB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSBhZGRlZCAobXVsdGlwbGUgY2xhc3NlcyBhcmUgc2VwYXJhdGVkIHZpYSBzcGFjZXMpXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVtb3ZlIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSByZW1vdmVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIHNldENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBhZGQsIHJlbW92ZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zLmFkZENsYXNzID0gbWVyZ2VDbGFzc2VzKG9wdGlvbnMuYWRkQ2xhc3MsIGFkZCk7XG4gICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5yZW1vdmVDbGFzcywgcmVtb3ZlKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ3NldENsYXNzJywgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2FuaW1hdGVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFBlcmZvcm1zIGFuIGlubGluZSBhbmltYXRpb24gb24gdGhlIGVsZW1lbnQgd2hpY2ggYXBwbGllcyB0aGUgcHJvdmlkZWQgdG8gYW5kIGZyb20gQ1NTIHN0eWxlcyB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqIElmIGFueSBkZXRlY3RlZCBDU1MgdHJhbnNpdGlvbiwga2V5ZnJhbWUgb3IgSmF2YVNjcmlwdCBtYXRjaGVzIHRoZSBwcm92aWRlZCBjbGFzc05hbWUgdmFsdWUsIHRoZW4gdGhlIGFuaW1hdGlvbiB3aWxsIHRha2VcbiAgICAgICAqIG9uIHRoZSBwcm92aWRlZCBzdHlsZXMuIEZvciBleGFtcGxlLCBpZiBhIHRyYW5zaXRpb24gYW5pbWF0aW9uIGlzIHNldCBmb3IgdGhlIGdpdmVuIGNsYXNzTmFtZSwgdGhlbiB0aGUgcHJvdmlkZWQgYGZyb21gIGFuZFxuICAgICAgICogYHRvYCBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIGFsb25nc2lkZSB0aGUgZ2l2ZW4gdHJhbnNpdGlvbi4gSWYgdGhlIENTUyBzdHlsZSBwcm92aWRlZCBpbiBgZnJvbWAgZG9lcyBub3QgaGF2ZSBhIGNvcnJlc3BvbmRpbmdcbiAgICAgICAqIHN0eWxlIGluIGB0b2AsIHRoZSBzdHlsZSBpbiBgZnJvbWAgaXMgYXBwbGllZCBpbW1lZGlhdGVseSwgYW5kIG5vIGFuaW1hdGlvbiBpcyBydW4uXG4gICAgICAgKiBJZiBhIEphdmFTY3JpcHQgYW5pbWF0aW9uIGlzIGRldGVjdGVkIHRoZW4gdGhlIHByb3ZpZGVkIHN0eWxlcyB3aWxsIGJlIGdpdmVuIGluIGFzIGZ1bmN0aW9uIHBhcmFtZXRlcnMgaW50byB0aGUgYGFuaW1hdGVgXG4gICAgICAgKiBtZXRob2QgKG9yIGFzIHBhcnQgb2YgdGhlIGBvcHRpb25zYCBwYXJhbWV0ZXIpOlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiBuZ01vZHVsZS5hbmltYXRpb24oJy5teS1pbmxpbmUtYW5pbWF0aW9uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgKiAgIHJldHVybiB7XG4gICAgICAgKiAgICAgYW5pbWF0ZSA6IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb20sIHRvLCBkb25lLCBvcHRpb25zKSB7XG4gICAgICAgKiAgICAgICAvL2FuaW1hdGlvblxuICAgICAgICogICAgICAgZG9uZSgpO1xuICAgICAgICogICAgIH1cbiAgICAgICAqICAgfVxuICAgICAgICogfSk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggdGhlIENTUyBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gZnJvbSB0aGUgZnJvbSAoc3RhcnRpbmcpIENTUyBzdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgYW5kIGFjcm9zcyB0aGUgYW5pbWF0aW9uLlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IHRvIHRoZSB0byAoZGVzdGluYXRpb24pIENTUyBzdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgYW5kIGFjcm9zcyB0aGUgYW5pbWF0aW9uLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBjbGFzc05hbWUgYW4gb3B0aW9uYWwgQ1NTIGNsYXNzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50IGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbi4gSWZcbiAgICAgICAqICAgIHRoaXMgdmFsdWUgaXMgbGVmdCBhcyBlbXB0eSB0aGVuIGEgQ1NTIGNsYXNzIG9mIGBuZy1pbmxpbmUtYW5pbWF0ZWAgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICAgKE5vdGUgdGhhdCBpZiBubyBhbmltYXRpb24gaXMgZGV0ZWN0ZWQgdGhlbiB0aGlzIHZhbHVlIHdpbGwgbm90IGJlIGFwcHBsaWVkIHRvIHRoZSBlbGVtZW50LilcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGFuaW1hdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb20sIHRvLCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5mcm9tID0gb3B0aW9ucy5mcm9tID8gZXh0ZW5kKG9wdGlvbnMuZnJvbSwgZnJvbSkgOiBmcm9tO1xuICAgICAgICBvcHRpb25zLnRvICAgPSBvcHRpb25zLnRvICAgPyBleHRlbmQob3B0aW9ucy50bywgdG8pICAgICA6IHRvO1xuXG4gICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZSB8fCAnbmctaW5saW5lLWFuaW1hdGUnO1xuICAgICAgICBvcHRpb25zLnRlbXBDbGFzc2VzID0gbWVyZ2VDbGFzc2VzKG9wdGlvbnMudGVtcENsYXNzZXMsIGNsYXNzTmFtZSk7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdhbmltYXRlJywgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG59XTtcblxudmFyICQkQW5pbWF0ZUFzeW5jUnVuRmFjdG9yeVByb3ZpZGVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFsnJCRyQUYnLCBmdW5jdGlvbigkJHJBRikge1xuICAgIHZhciB3YWl0UXVldWUgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHdhaXRGb3JUaWNrKGZuKSB7XG4gICAgICB3YWl0UXVldWUucHVzaChmbik7XG4gICAgICBpZiAod2FpdFF1ZXVlLmxlbmd0aCA+IDEpIHJldHVybjtcbiAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdhaXRRdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHdhaXRRdWV1ZVtpXSgpO1xuICAgICAgICB9XG4gICAgICAgIHdhaXRRdWV1ZSA9IFtdO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhc3NlZCA9IGZhbHNlO1xuICAgICAgd2FpdEZvclRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHBhc3NlZCA9IHRydWU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICBwYXNzZWQgPyBjYWxsYmFjaygpIDogd2FpdEZvclRpY2soY2FsbGJhY2spO1xuICAgICAgfTtcbiAgICB9O1xuICB9XTtcbn07XG5cbnZhciAkJEFuaW1hdGVSdW5uZXJGYWN0b3J5UHJvdmlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckcScsICckc25pZmZlcicsICckJGFuaW1hdGVBc3luY1J1bicsICckZG9jdW1lbnQnLCAnJHRpbWVvdXQnLFxuICAgICAgIGZ1bmN0aW9uKCRxLCAgICRzbmlmZmVyLCAgICQkYW5pbWF0ZUFzeW5jUnVuLCAgICRkb2N1bWVudCwgICAkdGltZW91dCkge1xuXG4gICAgdmFyIElOSVRJQUxfU1RBVEUgPSAwO1xuICAgIHZhciBET05FX1BFTkRJTkdfU1RBVEUgPSAxO1xuICAgIHZhciBET05FX0NPTVBMRVRFX1NUQVRFID0gMjtcblxuICAgIEFuaW1hdGVSdW5uZXIuY2hhaW4gPSBmdW5jdGlvbihjaGFpbiwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBpbmRleCA9IDA7XG5cbiAgICAgIG5leHQoKTtcbiAgICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gY2hhaW4ubGVuZ3RoKSB7XG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhaW5baW5kZXhdKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEFuaW1hdGVSdW5uZXIuYWxsID0gZnVuY3Rpb24ocnVubmVycywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICB2YXIgc3RhdHVzID0gdHJ1ZTtcbiAgICAgIGZvckVhY2gocnVubmVycywgZnVuY3Rpb24ocnVubmVyKSB7XG4gICAgICAgIHJ1bm5lci5kb25lKG9uUHJvZ3Jlc3MpO1xuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIG9uUHJvZ3Jlc3MocmVzcG9uc2UpIHtcbiAgICAgICAgc3RhdHVzID0gc3RhdHVzICYmIHJlc3BvbnNlO1xuICAgICAgICBpZiAoKytjb3VudCA9PT0gcnVubmVycy5sZW5ndGgpIHtcbiAgICAgICAgICBjYWxsYmFjayhzdGF0dXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIEFuaW1hdGVSdW5uZXIoaG9zdCkge1xuICAgICAgdGhpcy5zZXRIb3N0KGhvc3QpO1xuXG4gICAgICB2YXIgcmFmVGljayA9ICQkYW5pbWF0ZUFzeW5jUnVuKCk7XG4gICAgICB2YXIgdGltZW91dFRpY2sgPSBmdW5jdGlvbihmbikge1xuICAgICAgICAkdGltZW91dChmbiwgMCwgZmFsc2UpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fZG9uZUNhbGxiYWNrcyA9IFtdO1xuICAgICAgdGhpcy5fdGljayA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIHZhciBkb2MgPSAkZG9jdW1lbnRbMF07XG5cbiAgICAgICAgLy8gdGhlIGRvY3VtZW50IG1heSBub3QgYmUgcmVhZHkgb3IgYXR0YWNoZWRcbiAgICAgICAgLy8gdG8gdGhlIG1vZHVsZSBmb3Igc29tZSBpbnRlcm5hbCB0ZXN0c1xuICAgICAgICBpZiAoZG9jICYmIGRvYy5oaWRkZW4pIHtcbiAgICAgICAgICB0aW1lb3V0VGljayhmbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmFmVGljayhmbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLl9zdGF0ZSA9IDA7XG4gICAgfVxuXG4gICAgQW5pbWF0ZVJ1bm5lci5wcm90b3R5cGUgPSB7XG4gICAgICBzZXRIb3N0OiBmdW5jdGlvbihob3N0KSB7XG4gICAgICAgIHRoaXMuaG9zdCA9IGhvc3QgfHwge307XG4gICAgICB9LFxuXG4gICAgICBkb25lOiBmdW5jdGlvbihmbikge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IERPTkVfQ09NUExFVEVfU1RBVEUpIHtcbiAgICAgICAgICBmbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2RvbmVDYWxsYmFja3MucHVzaChmbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHByb2dyZXNzOiBub29wLFxuXG4gICAgICBnZXRQcm9taXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb21pc2UpIHtcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgdGhpcy5wcm9taXNlID0gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBzZWxmLmRvbmUoZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgICAgICAgIHN0YXR1cyA9PT0gZmFsc2UgPyByZWplY3QoKSA6IHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XG4gICAgICB9LFxuXG4gICAgICB0aGVuOiBmdW5jdGlvbihyZXNvbHZlSGFuZGxlciwgcmVqZWN0SGFuZGxlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlKCkudGhlbihyZXNvbHZlSGFuZGxlciwgcmVqZWN0SGFuZGxlcik7XG4gICAgICB9LFxuXG4gICAgICAnY2F0Y2gnOiBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFByb21pc2UoKVsnY2F0Y2gnXShoYW5kbGVyKTtcbiAgICAgIH0sXG5cbiAgICAgICdmaW5hbGx5JzogZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlKClbJ2ZpbmFsbHknXShoYW5kbGVyKTtcbiAgICAgIH0sXG5cbiAgICAgIHBhdXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaG9zdC5wYXVzZSkge1xuICAgICAgICAgIHRoaXMuaG9zdC5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICByZXN1bWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5ob3N0LnJlc3VtZSkge1xuICAgICAgICAgIHRoaXMuaG9zdC5yZXN1bWUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaG9zdC5lbmQpIHtcbiAgICAgICAgICB0aGlzLmhvc3QuZW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzb2x2ZSh0cnVlKTtcbiAgICAgIH0sXG5cbiAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmhvc3QuY2FuY2VsKSB7XG4gICAgICAgICAgdGhpcy5ob3N0LmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jlc29sdmUoZmFsc2UpO1xuICAgICAgfSxcblxuICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKHNlbGYuX3N0YXRlID09PSBJTklUSUFMX1NUQVRFKSB7XG4gICAgICAgICAgc2VsZi5fc3RhdGUgPSBET05FX1BFTkRJTkdfU1RBVEU7XG4gICAgICAgICAgc2VsZi5fdGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuX3Jlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBfcmVzb2x2ZTogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlICE9PSBET05FX0NPTVBMRVRFX1NUQVRFKSB7XG4gICAgICAgICAgZm9yRWFjaCh0aGlzLl9kb25lQ2FsbGJhY2tzLCBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgZm4ocmVzcG9uc2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuX2RvbmVDYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICAgICAgICB0aGlzLl9zdGF0ZSA9IERPTkVfQ09NUExFVEVfU1RBVEU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEFuaW1hdGVSdW5uZXI7XG4gIH1dO1xufTtcblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGFuaW1hdGVDc3NcbiAqIEBraW5kIG9iamVjdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBpcyB0aGUgY29yZSB2ZXJzaW9uIG9mIGAkYW5pbWF0ZUNzc2AuIEJ5IGRlZmF1bHQsIG9ubHkgd2hlbiB0aGUgYG5nQW5pbWF0ZWAgaXMgaW5jbHVkZWQsXG4gKiB0aGVuIHRoZSBgJGFuaW1hdGVDc3NgIHNlcnZpY2Ugd2lsbCBhY3R1YWxseSBwZXJmb3JtIGFuaW1hdGlvbnMuXG4gKlxuICogQ2xpY2sgaGVyZSB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlQ3NzIHRvIHJlYWQgdGhlIGRvY3VtZW50YXRpb24gZm9yICRhbmltYXRlQ3NzfS5cbiAqL1xudmFyICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFsnJCRyQUYnLCAnJHEnLCAnJCRBbmltYXRlUnVubmVyJywgZnVuY3Rpb24oJCRyQUYsICRxLCAkJEFuaW1hdGVSdW5uZXIpIHtcblxuICAgIHJldHVybiBmdW5jdGlvbihlbGVtZW50LCBpbml0aWFsT3B0aW9ucykge1xuICAgICAgLy8gYWxsIG9mIHRoZSBhbmltYXRpb24gZnVuY3Rpb25zIHNob3VsZCBjcmVhdGVcbiAgICAgIC8vIGEgY29weSBvZiB0aGUgb3B0aW9ucyBkYXRhLCBob3dldmVyLCBpZiBhXG4gICAgICAvLyBwYXJlbnQgc2VydmljZSBoYXMgYWxyZWFkeSBjcmVhdGVkIGEgY29weSB0aGVuXG4gICAgICAvLyB3ZSBzaG91bGQgc3RpY2sgdG8gdXNpbmcgdGhhdFxuICAgICAgdmFyIG9wdGlvbnMgPSBpbml0aWFsT3B0aW9ucyB8fCB7fTtcbiAgICAgIGlmICghb3B0aW9ucy4kJHByZXBhcmVkKSB7XG4gICAgICAgIG9wdGlvbnMgPSBjb3B5KG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICAvLyB0aGVyZSBpcyBubyBwb2ludCBpbiBhcHBseWluZyB0aGUgc3R5bGVzIHNpbmNlXG4gICAgICAvLyB0aGVyZSBpcyBubyBhbmltYXRpb24gdGhhdCBnb2VzIG9uIGF0IGFsbCBpblxuICAgICAgLy8gdGhpcyB2ZXJzaW9uIG9mICRhbmltYXRlQ3NzLlxuICAgICAgaWYgKG9wdGlvbnMuY2xlYW51cFN0eWxlcykge1xuICAgICAgICBvcHRpb25zLmZyb20gPSBvcHRpb25zLnRvID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZnJvbSkge1xuICAgICAgICBlbGVtZW50LmNzcyhvcHRpb25zLmZyb20pO1xuICAgICAgICBvcHRpb25zLmZyb20gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvKiBqc2hpbnQgbmV3Y2FwOiBmYWxzZSovXG4gICAgICB2YXIgY2xvc2VkLCBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogcnVuLFxuICAgICAgICBlbmQ6IHJ1blxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gcnVuKCkge1xuICAgICAgICAkJHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgICBhcHBseUFuaW1hdGlvbkNvbnRlbnRzKCk7XG4gICAgICAgICAgaWYgKCFjbG9zZWQpIHtcbiAgICAgICAgICAgIHJ1bm5lci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYXBwbHlBbmltYXRpb25Db250ZW50cygpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYWRkQ2xhc3MpIHtcbiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKG9wdGlvbnMuYWRkQ2xhc3MpO1xuICAgICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnJlbW92ZUNsYXNzKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhvcHRpb25zLnJlbW92ZUNsYXNzKTtcbiAgICAgICAgICBvcHRpb25zLnJlbW92ZUNsYXNzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy50bykge1xuICAgICAgICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMudG8pO1xuICAgICAgICAgIG9wdGlvbnMudG8gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG59O1xuXG4vKiBnbG9iYWwgc3RyaXBIYXNoOiB0cnVlICovXG5cbi8qKlxuICogISBUaGlzIGlzIGEgcHJpdmF0ZSB1bmRvY3VtZW50ZWQgc2VydmljZSAhXG4gKlxuICogQG5hbWUgJGJyb3dzZXJcbiAqIEByZXF1aXJlcyAkbG9nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgb2JqZWN0IGhhcyB0d28gZ29hbHM6XG4gKlxuICogLSBoaWRlIGFsbCB0aGUgZ2xvYmFsIHN0YXRlIGluIHRoZSBicm93c2VyIGNhdXNlZCBieSB0aGUgd2luZG93IG9iamVjdFxuICogLSBhYnN0cmFjdCBhd2F5IGFsbCB0aGUgYnJvd3NlciBzcGVjaWZpYyBmZWF0dXJlcyBhbmQgaW5jb25zaXN0ZW5jaWVzXG4gKlxuICogRm9yIHRlc3RzIHdlIHByb3ZpZGUge0BsaW5rIG5nTW9jay4kYnJvd3NlciBtb2NrIGltcGxlbWVudGF0aW9ufSBvZiB0aGUgYCRicm93c2VyYFxuICogc2VydmljZSwgd2hpY2ggY2FuIGJlIHVzZWQgZm9yIGNvbnZlbmllbnQgdGVzdGluZyBvZiB0aGUgYXBwbGljYXRpb24gd2l0aG91dCB0aGUgaW50ZXJhY3Rpb24gd2l0aFxuICogdGhlIHJlYWwgYnJvd3NlciBhcGlzLlxuICovXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSB3aW5kb3cgVGhlIGdsb2JhbCB3aW5kb3cgb2JqZWN0LlxuICogQHBhcmFtIHtvYmplY3R9IGRvY3VtZW50IGpRdWVyeSB3cmFwcGVkIGRvY3VtZW50LlxuICogQHBhcmFtIHtvYmplY3R9ICRsb2cgd2luZG93LmNvbnNvbGUgb3IgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgaW50ZXJmYWNlLlxuICogQHBhcmFtIHtvYmplY3R9ICRzbmlmZmVyICRzbmlmZmVyIHNlcnZpY2VcbiAqL1xuZnVuY3Rpb24gQnJvd3Nlcih3aW5kb3csIGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcikge1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICByYXdEb2N1bWVudCA9IGRvY3VtZW50WzBdLFxuICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICBoaXN0b3J5ID0gd2luZG93Lmhpc3RvcnksXG4gICAgICBzZXRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQsXG4gICAgICBjbGVhclRpbWVvdXQgPSB3aW5kb3cuY2xlYXJUaW1lb3V0LFxuICAgICAgcGVuZGluZ0RlZmVySWRzID0ge307XG5cbiAgc2VsZi5pc01vY2sgPSBmYWxzZTtcblxuICB2YXIgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSAwO1xuICB2YXIgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzID0gW107XG5cbiAgLy8gVE9ETyh2b2p0YSk6IHJlbW92ZSB0aGlzIHRlbXBvcmFyeSBhcGlcbiAgc2VsZi4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0ID0gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Q7XG4gIHNlbGYuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9IGZ1bmN0aW9uKCkgeyBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCsrOyB9O1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgYGZuYCBmdW5jdGlvbihzdXBwb3J0cyBjdXJyeWluZykgYW5kIGRlY3JlbWVudHMgdGhlIGBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3NgXG4gICAqIGNvdW50ZXIuIElmIHRoZSBjb3VudGVyIHJlYWNoZXMgMCwgYWxsIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYCBhcmUgZXhlY3V0ZWQuXG4gICAqL1xuICBmdW5jdGlvbiBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbi5hcHBseShudWxsLCBzbGljZUFyZ3MoYXJndW1lbnRzLCAxKSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50LS07XG4gICAgICBpZiAob3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPT09IDApIHtcbiAgICAgICAgd2hpbGUgKG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGxvZy5lcnJvcihlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRIYXNoKHVybCkge1xuICAgIHZhciBpbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgcmV0dXJuIGluZGV4ID09PSAtMSA/ICcnIDogdXJsLnN1YnN0cihpbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogTm90ZTogdGhpcyBtZXRob2QgaXMgdXNlZCBvbmx5IGJ5IHNjZW5hcmlvIHJ1bm5lclxuICAgKiBUT0RPKHZvanRhKTogcHJlZml4IHRoaXMgbWV0aG9kIHdpdGggJCQgP1xuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGNhbGxiYWNrIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiBubyBvdXRzdGFuZGluZyByZXF1ZXN0XG4gICAqL1xuICBzZWxmLm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBVUkwgQVBJXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgdmFyIGNhY2hlZFN0YXRlLCBsYXN0SGlzdG9yeVN0YXRlLFxuICAgICAgbGFzdEJyb3dzZXJVcmwgPSBsb2NhdGlvbi5ocmVmLFxuICAgICAgYmFzZUVsZW1lbnQgPSBkb2N1bWVudC5maW5kKCdiYXNlJyksXG4gICAgICBwZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gIGNhY2hlU3RhdGUoKTtcbiAgbGFzdEhpc3RvcnlTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciN1cmxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEdFVFRFUjpcbiAgICogV2l0aG91dCBhbnkgYXJndW1lbnQsIHRoaXMgbWV0aG9kIGp1c3QgcmV0dXJucyBjdXJyZW50IHZhbHVlIG9mIGxvY2F0aW9uLmhyZWYuXG4gICAqXG4gICAqIFNFVFRFUjpcbiAgICogV2l0aCBhdCBsZWFzdCBvbmUgYXJndW1lbnQsIHRoaXMgbWV0aG9kIHNldHMgdXJsIHRvIG5ldyB2YWx1ZS5cbiAgICogSWYgaHRtbDUgaGlzdG9yeSBhcGkgc3VwcG9ydGVkLCBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlIGlzIHVzZWQsIG90aGVyd2lzZVxuICAgKiBsb2NhdGlvbi5ocmVmL2xvY2F0aW9uLnJlcGxhY2UgaXMgdXNlZC5cbiAgICogUmV0dXJucyBpdHMgb3duIGluc3RhbmNlIHRvIGFsbG93IGNoYWluaW5nXG4gICAqXG4gICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSB0aGUgJGxvY2F0aW9uIHNlcnZpY2UuIFBsZWFzZSB1c2UgdGhlXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9uIHNlcnZpY2V9IHRvIGNoYW5nZSB1cmwuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgTmV3IHVybCAod2hlbiB1c2VkIGFzIHNldHRlcilcbiAgICogQHBhcmFtIHtib29sZWFuPX0gcmVwbGFjZSBTaG91bGQgbmV3IHVybCByZXBsYWNlIGN1cnJlbnQgaGlzdG9yeSByZWNvcmQ/XG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gc3RhdGUgb2JqZWN0IHRvIHVzZSB3aXRoIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGVcbiAgICovXG4gIHNlbGYudXJsID0gZnVuY3Rpb24odXJsLCByZXBsYWNlLCBzdGF0ZSkge1xuICAgIC8vIEluIG1vZGVybiBicm93c2VycyBgaGlzdG9yeS5zdGF0ZWAgaXMgYG51bGxgIGJ5IGRlZmF1bHQ7IHRyZWF0aW5nIGl0IHNlcGFyYXRlbHlcbiAgICAvLyBmcm9tIGB1bmRlZmluZWRgIHdvdWxkIGNhdXNlIGAkYnJvd3Nlci51cmwoJy9mb28nKWAgdG8gY2hhbmdlIGBoaXN0b3J5LnN0YXRlYFxuICAgIC8vIHRvIHVuZGVmaW5lZCB2aWEgYHB1c2hTdGF0ZWAuIEluc3RlYWQsIGxldCdzIGNoYW5nZSBgdW5kZWZpbmVkYCB0byBgbnVsbGAgaGVyZS5cbiAgICBpZiAoaXNVbmRlZmluZWQoc3RhdGUpKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gQW5kcm9pZCBCcm93c2VyIEJGQ2FjaGUgY2F1c2VzIGxvY2F0aW9uLCBoaXN0b3J5IHJlZmVyZW5jZSB0byBiZWNvbWUgc3RhbGUuXG4gICAgaWYgKGxvY2F0aW9uICE9PSB3aW5kb3cubG9jYXRpb24pIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgIGlmIChoaXN0b3J5ICE9PSB3aW5kb3cuaGlzdG9yeSkgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuXG4gICAgLy8gc2V0dGVyXG4gICAgaWYgKHVybCkge1xuICAgICAgdmFyIHNhbWVTdGF0ZSA9IGxhc3RIaXN0b3J5U3RhdGUgPT09IHN0YXRlO1xuXG4gICAgICAvLyBEb24ndCBjaGFuZ2UgYW55dGhpbmcgaWYgcHJldmlvdXMgYW5kIGN1cnJlbnQgVVJMcyBhbmQgc3RhdGVzIG1hdGNoLiBUaGlzIGFsc28gcHJldmVudHNcbiAgICAgIC8vIElFPDEwIGZyb20gZ2V0dGluZyBpbnRvIHJlZGlyZWN0IGxvb3Agd2hlbiBpbiBMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybCBtb2RlLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvY29tbWl0L2ZmYjI3MDFcbiAgICAgIGlmIChsYXN0QnJvd3NlclVybCA9PT0gdXJsICYmICghJHNuaWZmZXIuaGlzdG9yeSB8fCBzYW1lU3RhdGUpKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuICAgICAgdmFyIHNhbWVCYXNlID0gbGFzdEJyb3dzZXJVcmwgJiYgc3RyaXBIYXNoKGxhc3RCcm93c2VyVXJsKSA9PT0gc3RyaXBIYXNoKHVybCk7XG4gICAgICBsYXN0QnJvd3NlclVybCA9IHVybDtcbiAgICAgIGxhc3RIaXN0b3J5U3RhdGUgPSBzdGF0ZTtcbiAgICAgIC8vIERvbid0IHVzZSBoaXN0b3J5IEFQSSBpZiBvbmx5IHRoZSBoYXNoIGNoYW5nZWRcbiAgICAgIC8vIGR1ZSB0byBhIGJ1ZyBpbiBJRTEwL0lFMTEgd2hpY2ggbGVhZHNcbiAgICAgIC8vIHRvIG5vdCBmaXJpbmcgYSBgaGFzaGNoYW5nZWAgbm9yIGBwb3BzdGF0ZWAgZXZlbnRcbiAgICAgIC8vIGluIHNvbWUgY2FzZXMgKHNlZSAjOTE0MykuXG4gICAgICBpZiAoJHNuaWZmZXIuaGlzdG9yeSAmJiAoIXNhbWVCYXNlIHx8ICFzYW1lU3RhdGUpKSB7XG4gICAgICAgIGhpc3RvcnlbcmVwbGFjZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSddKHN0YXRlLCAnJywgdXJsKTtcbiAgICAgICAgY2FjaGVTdGF0ZSgpO1xuICAgICAgICAvLyBEbyB0aGUgYXNzaWdubWVudCBhZ2FpbiBzbyB0aGF0IHRob3NlIHR3byB2YXJpYWJsZXMgYXJlIHJlZmVyZW50aWFsbHkgaWRlbnRpY2FsLlxuICAgICAgICBsYXN0SGlzdG9yeVN0YXRlID0gY2FjaGVkU3RhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXNhbWVCYXNlIHx8IHBlbmRpbmdMb2NhdGlvbikge1xuICAgICAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IHVybDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgIGxvY2F0aW9uLnJlcGxhY2UodXJsKTtcbiAgICAgICAgfSBlbHNlIGlmICghc2FtZUJhc2UpIHtcbiAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvY2F0aW9uLmhhc2ggPSBnZXRIYXNoKHVybCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2F0aW9uLmhyZWYgIT09IHVybCkge1xuICAgICAgICAgIHBlbmRpbmdMb2NhdGlvbiA9IHVybDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgLy8gZ2V0dGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIC0gcGVuZGluZ0xvY2F0aW9uIGlzIG5lZWRlZCBhcyBicm93c2VycyBkb24ndCBhbGxvdyB0byByZWFkIG91dFxuICAgICAgLy8gICB0aGUgbmV3IGxvY2F0aW9uLmhyZWYgaWYgYSByZWxvYWQgaGFwcGVuZWQgb3IgaWYgdGhlcmUgaXMgYSBidWcgbGlrZSBpbiBpT1MgOSAoc2VlXG4gICAgICAvLyAgIGh0dHBzOi8vb3BlbnJhZGFyLmFwcHNwb3QuY29tLzIyMTg2MTA5KS5cbiAgICAgIC8vIC0gdGhlIHJlcGxhY2VtZW50IGlzIGEgd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDA3MTcyXG4gICAgICByZXR1cm4gcGVuZGluZ0xvY2F0aW9uIHx8IGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvJTI3L2csXCInXCIpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjc3RhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGEgZ2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gaGlzdG9yeS5zdGF0ZSBvciBudWxsIGlmIGhpc3Rvcnkuc3RhdGUgaXMgdW5kZWZpbmVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBzdGF0ZVxuICAgKi9cbiAgc2VsZi5zdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjYWNoZWRTdGF0ZTtcbiAgfTtcblxuICB2YXIgdXJsQ2hhbmdlTGlzdGVuZXJzID0gW10sXG4gICAgICB1cmxDaGFuZ2VJbml0ID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UoKSB7XG4gICAgcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcbiAgICBjYWNoZVN0YXRlKCk7XG4gICAgZmlyZVVybENoYW5nZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudFN0YXRlKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5zdGF0ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBNU0lFIGNhbiByZXBvcnRlZGx5IHRocm93IHdoZW4gdGhlcmUgaXMgbm8gc3RhdGUgKFVOQ09ORklSTUVEKS5cbiAgICB9XG4gIH1cblxuICAvLyBUaGlzIHZhcmlhYmxlIHNob3VsZCBiZSB1c2VkICpvbmx5KiBpbnNpZGUgdGhlIGNhY2hlU3RhdGUgZnVuY3Rpb24uXG4gIHZhciBsYXN0Q2FjaGVkU3RhdGUgPSBudWxsO1xuICBmdW5jdGlvbiBjYWNoZVN0YXRlKCkge1xuICAgIC8vIFRoaXMgc2hvdWxkIGJlIHRoZSBvbmx5IHBsYWNlIGluICRicm93c2VyIHdoZXJlIGBoaXN0b3J5LnN0YXRlYCBpcyByZWFkLlxuICAgIGNhY2hlZFN0YXRlID0gZ2V0Q3VycmVudFN0YXRlKCk7XG4gICAgY2FjaGVkU3RhdGUgPSBpc1VuZGVmaW5lZChjYWNoZWRTdGF0ZSkgPyBudWxsIDogY2FjaGVkU3RhdGU7XG5cbiAgICAvLyBQcmV2ZW50IGNhbGxiYWNrcyBmbyBmaXJlIHR3aWNlIGlmIGJvdGggaGFzaGNoYW5nZSAmIHBvcHN0YXRlIHdlcmUgZmlyZWQuXG4gICAgaWYgKGVxdWFscyhjYWNoZWRTdGF0ZSwgbGFzdENhY2hlZFN0YXRlKSkge1xuICAgICAgY2FjaGVkU3RhdGUgPSBsYXN0Q2FjaGVkU3RhdGU7XG4gICAgfVxuICAgIGxhc3RDYWNoZWRTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlyZVVybENoYW5nZSgpIHtcbiAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT09IHNlbGYudXJsKCkgJiYgbGFzdEhpc3RvcnlTdGF0ZSA9PT0gY2FjaGVkU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsYXN0QnJvd3NlclVybCA9IHNlbGYudXJsKCk7XG4gICAgbGFzdEhpc3RvcnlTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICAgIGZvckVhY2godXJsQ2hhbmdlTGlzdGVuZXJzLCBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoc2VsZi51cmwoKSwgY2FjaGVkU3RhdGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI29uVXJsQ2hhbmdlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlciBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkLCB3aGVuIHVybCBjaGFuZ2VzLlxuICAgKlxuICAgKiBJdCdzIG9ubHkgY2FsbGVkIHdoZW4gdGhlIHVybCBpcyBjaGFuZ2VkIGZyb20gb3V0c2lkZSBvZiBhbmd1bGFyOlxuICAgKiAtIHVzZXIgdHlwZXMgZGlmZmVyZW50IHVybCBpbnRvIGFkZHJlc3MgYmFyXG4gICAqIC0gdXNlciBjbGlja3Mgb24gaGlzdG9yeSAoZm9yd2FyZC9iYWNrKSBidXR0b25cbiAgICogLSB1c2VyIGNsaWNrcyBvbiBhIGxpbmtcbiAgICpcbiAgICogSXQncyBub3QgY2FsbGVkIHdoZW4gdXJsIGlzIGNoYW5nZWQgYnkgJGJyb3dzZXIudXJsKCkgbWV0aG9kXG4gICAqXG4gICAqIFRoZSBsaXN0ZW5lciBnZXRzIGNhbGxlZCB3aXRoIG5ldyB1cmwgYXMgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBtb25pdG9yIHVybCBjaGFuZ2VzIGluIGFuZ3VsYXIgYXBwcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcpfSBsaXN0ZW5lciBMaXN0ZW5lciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB1cmwgY2hhbmdlcy5cbiAgICogQHJldHVybiB7ZnVuY3Rpb24oc3RyaW5nKX0gUmV0dXJucyB0aGUgcmVnaXN0ZXJlZCBsaXN0ZW5lciBmbiAtIGhhbmR5IGlmIHRoZSBmbiBpcyBhbm9ueW1vdXMuXG4gICAqL1xuICBzZWxmLm9uVXJsQ2hhbmdlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPKHZvanRhKTogcmVmYWN0b3IgdG8gdXNlIG5vZGUncyBzeW50YXggZm9yIGV2ZW50c1xuICAgIGlmICghdXJsQ2hhbmdlSW5pdCkge1xuICAgICAgLy8gV2UgbGlzdGVuIG9uIGJvdGggKGhhc2hjaGFuZ2UvcG9wc3RhdGUpIHdoZW4gYXZhaWxhYmxlLCBhcyBzb21lIGJyb3dzZXJzIChlLmcuIE9wZXJhKVxuICAgICAgLy8gZG9uJ3QgZmlyZSBwb3BzdGF0ZSB3aGVuIHVzZXIgY2hhbmdlIHRoZSBhZGRyZXNzIGJhciBhbmQgZG9uJ3QgZmlyZSBoYXNoY2hhbmdlIHdoZW4gdXJsXG4gICAgICAvLyBjaGFuZ2VkIGJ5IHB1c2gvcmVwbGFjZVN0YXRlXG5cbiAgICAgIC8vIGh0bWw1IGhpc3RvcnkgYXBpIC0gcG9wc3RhdGUgZXZlbnRcbiAgICAgIGlmICgkc25pZmZlci5oaXN0b3J5KSBqcUxpdGUod2luZG93KS5vbigncG9wc3RhdGUnLCBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSk7XG4gICAgICAvLyBoYXNoY2hhbmdlIGV2ZW50XG4gICAgICBqcUxpdGUod2luZG93KS5vbignaGFzaGNoYW5nZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTtcblxuICAgICAgdXJsQ2hhbmdlSW5pdCA9IHRydWU7XG4gICAgfVxuXG4gICAgdXJsQ2hhbmdlTGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfTtcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogUmVtb3ZlIHBvcHN0YXRlIGFuZCBoYXNoY2hhbmdlIGhhbmRsZXIgZnJvbSB3aW5kb3cuXG4gICAqXG4gICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSAkcm9vdFNjb3BlLlxuICAgKi9cbiAgc2VsZi4kJGFwcGxpY2F0aW9uRGVzdHJveWVkID0gZnVuY3Rpb24oKSB7XG4gICAganFMaXRlKHdpbmRvdykub2ZmKCdoYXNoY2hhbmdlIHBvcHN0YXRlJywgY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciB0aGUgdXJsIGhhcyBjaGFuZ2VkIG91dHNpZGUgb2YgQW5ndWxhci5cbiAgICogTmVlZHMgdG8gYmUgZXhwb3J0ZWQgdG8gYmUgYWJsZSB0byBjaGVjayBmb3IgY2hhbmdlcyB0aGF0IGhhdmUgYmVlbiBkb25lIGluIHN5bmMsXG4gICAqIGFzIGhhc2hjaGFuZ2UvcG9wc3RhdGUgZXZlbnRzIGZpcmUgaW4gYXN5bmMuXG4gICAqL1xuICBzZWxmLiQkY2hlY2tVcmxDaGFuZ2UgPSBmaXJlVXJsQ2hhbmdlO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE1pc2MgQVBJXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI2Jhc2VIcmVmXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIGN1cnJlbnQgPGJhc2UgaHJlZj5cbiAgICogKGFsd2F5cyByZWxhdGl2ZSAtIHdpdGhvdXQgZG9tYWluKVxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY3VycmVudCBiYXNlIGhyZWZcbiAgICovXG4gIHNlbGYuYmFzZUhyZWYgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaHJlZiA9IGJhc2VFbGVtZW50LmF0dHIoJ2hyZWYnKTtcbiAgICByZXR1cm4gaHJlZiA/IGhyZWYucmVwbGFjZSgvXihodHRwcz9cXDopP1xcL1xcL1teXFwvXSovLCAnJykgOiAnJztcbiAgfTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjZGVmZXJcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBBIGZ1bmN0aW9uLCB3aG8ncyBleGVjdXRpb24gc2hvdWxkIGJlIGRlZmVycmVkLlxuICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBvZiBtaWxsaXNlY29uZHMgdG8gZGVmZXIgdGhlIGZ1bmN0aW9uIGV4ZWN1dGlvbi5cbiAgICogQHJldHVybnMgeyp9IERlZmVySWQgdGhhdCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgdGhlIHRhc2sgdmlhIGAkYnJvd3Nlci5kZWZlci5jYW5jZWwoKWAuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBFeGVjdXRlcyBhIGZuIGFzeW5jaHJvbm91c2x5IHZpYSBgc2V0VGltZW91dChmbiwgZGVsYXkpYC5cbiAgICpcbiAgICogVW5saWtlIHdoZW4gY2FsbGluZyBgc2V0VGltZW91dGAgZGlyZWN0bHksIGluIHRlc3QgdGhpcyBmdW5jdGlvbiBpcyBtb2NrZWQgYW5kIGluc3RlYWQgb2YgdXNpbmdcbiAgICogYHNldFRpbWVvdXRgIGluIHRlc3RzLCB0aGUgZm5zIGFyZSBxdWV1ZWQgaW4gYW4gYXJyYXksIHdoaWNoIGNhbiBiZSBwcm9ncmFtbWF0aWNhbGx5IGZsdXNoZWRcbiAgICogdmlhIGAkYnJvd3Nlci5kZWZlci5mbHVzaCgpYC5cbiAgICpcbiAgICovXG4gIHNlbGYuZGVmZXIgPSBmdW5jdGlvbihmbiwgZGVsYXkpIHtcbiAgICB2YXIgdGltZW91dElkO1xuICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50Kys7XG4gICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGRlbGV0ZSBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXTtcbiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KGZuKTtcbiAgICB9LCBkZWxheSB8fCAwKTtcbiAgICBwZW5kaW5nRGVmZXJJZHNbdGltZW91dElkXSA9IHRydWU7XG4gICAgcmV0dXJuIHRpbWVvdXRJZDtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNkZWZlci5jYW5jZWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENhbmNlbHMgYSBkZWZlcnJlZCB0YXNrIGlkZW50aWZpZWQgd2l0aCBgZGVmZXJJZGAuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZGVmZXJJZCBUb2tlbiByZXR1cm5lZCBieSB0aGUgYCRicm93c2VyLmRlZmVyYCBmdW5jdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHlcbiAgICogICAgICAgICAgICAgICAgICAgIGNhbmNlbGVkLlxuICAgKi9cbiAgc2VsZi5kZWZlci5jYW5jZWwgPSBmdW5jdGlvbihkZWZlcklkKSB7XG4gICAgaWYgKHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXSkge1xuICAgICAgZGVsZXRlIHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXTtcbiAgICAgIGNsZWFyVGltZW91dChkZWZlcklkKTtcbiAgICAgIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxufVxuXG5mdW5jdGlvbiAkQnJvd3NlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGxvZycsICckc25pZmZlcicsICckZG9jdW1lbnQnLFxuICAgICAgZnVuY3Rpb24oJHdpbmRvdywgJGxvZywgJHNuaWZmZXIsICRkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gbmV3IEJyb3dzZXIoJHdpbmRvdywgJGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcik7XG4gICAgICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGNhY2hlRmFjdG9yeVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmFjdG9yeSB0aGF0IGNvbnN0cnVjdHMge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdHMgYW5kIGdpdmVzIGFjY2VzcyB0b1xuICogdGhlbS5cbiAqXG4gKiBgYGBqc1xuICpcbiAqICB2YXIgY2FjaGUgPSAkY2FjaGVGYWN0b3J5KCdjYWNoZUlkJyk7XG4gKiAgZXhwZWN0KCRjYWNoZUZhY3RvcnkuZ2V0KCdjYWNoZUlkJykpLnRvQmUoY2FjaGUpO1xuICogIGV4cGVjdCgkY2FjaGVGYWN0b3J5LmdldCgnbm9TdWNoQ2FjaGVJZCcpKS5ub3QudG9CZURlZmluZWQoKTtcbiAqXG4gKiAgY2FjaGUucHV0KFwia2V5XCIsIFwidmFsdWVcIik7XG4gKiAgY2FjaGUucHV0KFwiYW5vdGhlciBrZXlcIiwgXCJhbm90aGVyIHZhbHVlXCIpO1xuICpcbiAqICAvLyBXZSd2ZSBzcGVjaWZpZWQgbm8gb3B0aW9ucyBvbiBjcmVhdGlvblxuICogIGV4cGVjdChjYWNoZS5pbmZvKCkpLnRvRXF1YWwoe2lkOiAnY2FjaGVJZCcsIHNpemU6IDJ9KTtcbiAqXG4gKiBgYGBcbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlSWQgTmFtZSBvciBpZCBvZiB0aGUgbmV3bHkgY3JlYXRlZCBjYWNoZS5cbiAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdCB0aGF0IHNwZWNpZmllcyB0aGUgY2FjaGUgYmVoYXZpb3IuIFByb3BlcnRpZXM6XG4gKlxuICogICAtIGB7bnVtYmVyPX1gIGBjYXBhY2l0eWAg4oCUIHR1cm5zIHRoZSBjYWNoZSBpbnRvIExSVSBjYWNoZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBOZXdseSBjcmVhdGVkIGNhY2hlIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgc2V0IG9mIG1ldGhvZHM6XG4gKlxuICogLSBge29iamVjdH1gIGBpbmZvKClgIOKAlCBSZXR1cm5zIGlkLCBzaXplLCBhbmQgb3B0aW9ucyBvZiBjYWNoZS5cbiAqIC0gYHt7Kn19YCBgcHV0KHtzdHJpbmd9IGtleSwgeyp9IHZhbHVlKWAg4oCUIFB1dHMgYSBuZXcga2V5LXZhbHVlIHBhaXIgaW50byB0aGUgY2FjaGUgYW5kIHJldHVybnNcbiAqICAgaXQuXG4gKiAtIGB7eyp9fWAgYGdldCh7c3RyaW5nfSBrZXkpYCDigJQgUmV0dXJucyBjYWNoZWQgdmFsdWUgZm9yIGBrZXlgIG9yIHVuZGVmaW5lZCBmb3IgY2FjaGUgbWlzcy5cbiAqIC0gYHt2b2lkfWAgYHJlbW92ZSh7c3RyaW5nfSBrZXkpYCDigJQgUmVtb3ZlcyBhIGtleS12YWx1ZSBwYWlyIGZyb20gdGhlIGNhY2hlLlxuICogLSBge3ZvaWR9YCBgcmVtb3ZlQWxsKClgIOKAlCBSZW1vdmVzIGFsbCBjYWNoZWQgdmFsdWVzLlxuICogLSBge3ZvaWR9YCBgZGVzdHJveSgpYCDigJQgUmVtb3ZlcyByZWZlcmVuY2VzIHRvIHRoaXMgY2FjaGUgZnJvbSAkY2FjaGVGYWN0b3J5LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJjYWNoZUV4YW1wbGVBcHBcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDYWNoZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cIm5ld0NhY2hlS2V5XCIgcGxhY2Vob2xkZXI9XCJLZXlcIj5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cIm5ld0NhY2hlVmFsdWVcIiBwbGFjZWhvbGRlcj1cIlZhbHVlXCI+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwicHV0KG5ld0NhY2hlS2V5LCBuZXdDYWNoZVZhbHVlKVwiPkNhY2hlPC9idXR0b24+XG5cbiAgICAgICAgIDxwIG5nLWlmPVwia2V5cy5sZW5ndGhcIj5DYWNoZWQgVmFsdWVzPC9wPlxuICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XCJrZXkgaW4ga2V5c1wiPlxuICAgICAgICAgICA8c3BhbiBuZy1iaW5kPVwia2V5XCI+PC9zcGFuPlxuICAgICAgICAgICA8c3Bhbj46IDwvc3Bhbj5cbiAgICAgICAgICAgPGIgbmctYmluZD1cImNhY2hlLmdldChrZXkpXCI+PC9iPlxuICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgIDxwPkNhY2hlIEluZm88L3A+XG4gICAgICAgICA8ZGl2IG5nLXJlcGVhdD1cIihrZXksIHZhbHVlKSBpbiBjYWNoZS5pbmZvKClcIj5cbiAgICAgICAgICAgPHNwYW4gbmctYmluZD1cImtleVwiPjwvc3Bhbj5cbiAgICAgICAgICAgPHNwYW4+OiA8L3NwYW4+XG4gICAgICAgICAgIDxiIG5nLWJpbmQ9XCJ2YWx1ZVwiPjwvYj5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnY2FjaGVFeGFtcGxlQXBwJywgW10pLlxuICAgICAgICAgY29udHJvbGxlcignQ2FjaGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRzY29wZSwgJGNhY2hlRmFjdG9yeSkge1xuICAgICAgICAgICAkc2NvcGUua2V5cyA9IFtdO1xuICAgICAgICAgICAkc2NvcGUuY2FjaGUgPSAkY2FjaGVGYWN0b3J5KCdjYWNoZUlkJyk7XG4gICAgICAgICAgICRzY29wZS5wdXQgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoJHNjb3BlLmNhY2hlLmdldChrZXkpKSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAkc2NvcGUuY2FjaGUucHV0KGtleSwgYW5ndWxhci5pc1VuZGVmaW5lZCh2YWx1ZSkgPyBudWxsIDogdmFsdWUpO1xuICAgICAgICAgICB9O1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICBwIHtcbiAgICAgICAgIG1hcmdpbjogMTBweCAwIDNweDtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gJENhY2hlRmFjdG9yeVByb3ZpZGVyKCkge1xuXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYWNoZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGNhY2hlRmFjdG9yeShjYWNoZUlkLCBvcHRpb25zKSB7XG4gICAgICBpZiAoY2FjaGVJZCBpbiBjYWNoZXMpIHtcbiAgICAgICAgdGhyb3cgbWluRXJyKCckY2FjaGVGYWN0b3J5JykoJ2lpZCcsIFwiQ2FjaGVJZCAnezB9JyBpcyBhbHJlYWR5IHRha2VuIVwiLCBjYWNoZUlkKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNpemUgPSAwLFxuICAgICAgICAgIHN0YXRzID0gZXh0ZW5kKHt9LCBvcHRpb25zLCB7aWQ6IGNhY2hlSWR9KSxcbiAgICAgICAgICBkYXRhID0gY3JlYXRlTWFwKCksXG4gICAgICAgICAgY2FwYWNpdHkgPSAob3B0aW9ucyAmJiBvcHRpb25zLmNhcGFjaXR5KSB8fCBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgIGxydUhhc2ggPSBjcmVhdGVNYXAoKSxcbiAgICAgICAgICBmcmVzaEVuZCA9IG51bGwsXG4gICAgICAgICAgc3RhbGVFbmQgPSBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIGNhY2hlIG9iamVjdCB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBkYXRhLCBwcmltYXJpbHkgdXNlZCBieVxuICAgICAgICoge0BsaW5rICRodHRwICRodHRwfSBhbmQgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6c2NyaXB0IHNjcmlwdH0gZGlyZWN0aXZlIHRvIGNhY2hlXG4gICAgICAgKiB0ZW1wbGF0ZXMgYW5kIG90aGVyIGRhdGEuXG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqICBhbmd1bGFyLm1vZHVsZSgnc3VwZXJDYWNoZScpXG4gICAgICAgKiAgICAuZmFjdG9yeSgnc3VwZXJDYWNoZScsIFsnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRjYWNoZUZhY3RvcnkpIHtcbiAgICAgICAqICAgICAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ3N1cGVyLWNhY2hlJyk7XG4gICAgICAgKiAgICB9XSk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBFeGFtcGxlIHRlc3Q6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqICBpdCgnc2hvdWxkIGJlaGF2ZSBsaWtlIGEgY2FjaGUnLCBpbmplY3QoZnVuY3Rpb24oc3VwZXJDYWNoZSkge1xuICAgICAgICogICAgc3VwZXJDYWNoZS5wdXQoJ2tleScsICd2YWx1ZScpO1xuICAgICAgICogICAgc3VwZXJDYWNoZS5wdXQoJ2Fub3RoZXIga2V5JywgJ2Fub3RoZXIgdmFsdWUnKTtcbiAgICAgICAqXG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5pbmZvKCkpLnRvRXF1YWwoe1xuICAgICAgICogICAgICBpZDogJ3N1cGVyLWNhY2hlJyxcbiAgICAgICAqICAgICAgc2l6ZTogMlxuICAgICAgICogICAgfSk7XG4gICAgICAgKlxuICAgICAgICogICAgc3VwZXJDYWNoZS5yZW1vdmUoJ2Fub3RoZXIga2V5Jyk7XG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5nZXQoJ2Fub3RoZXIga2V5JykpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgICAqXG4gICAgICAgKiAgICBzdXBlckNhY2hlLnJlbW92ZUFsbCgpO1xuICAgICAgICogICAgZXhwZWN0KHN1cGVyQ2FjaGUuaW5mbygpKS50b0VxdWFsKHtcbiAgICAgICAqICAgICAgaWQ6ICdzdXBlci1jYWNoZScsXG4gICAgICAgKiAgICAgIHNpemU6IDBcbiAgICAgICAqICAgIH0pO1xuICAgICAgICogIH0pKTtcbiAgICAgICAqIGBgYFxuICAgICAgICovXG4gICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdID0ge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjcHV0XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBJbnNlcnRzIGEgbmFtZWQgZW50cnkgaW50byB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdCB0byBiZVxuICAgICAgICAgKiByZXRyaWV2ZWQgbGF0ZXIsIGFuZCBpbmNyZW1lbnRpbmcgdGhlIHNpemUgb2YgdGhlIGNhY2hlIGlmIHRoZSBrZXkgd2FzIG5vdCBhbHJlYWR5XG4gICAgICAgICAqIHByZXNlbnQgaW4gdGhlIGNhY2hlLiBJZiBiZWhhdmluZyBsaWtlIGFuIExSVSBjYWNoZSwgaXQgd2lsbCBhbHNvIHJlbW92ZSBzdGFsZVxuICAgICAgICAgKiBlbnRyaWVzIGZyb20gdGhlIHNldC5cbiAgICAgICAgICpcbiAgICAgICAgICogSXQgd2lsbCBub3QgaW5zZXJ0IHVuZGVmaW5lZCB2YWx1ZXMgaW50byB0aGUgY2FjaGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSB1bmRlciB3aGljaCB0aGUgY2FjaGVkIGRhdGEgaXMgc3RvcmVkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIHRoZSB2YWx1ZSB0byBzdG9yZSBhbG9uZ3NpZGUgdGhlIGtleS4gSWYgaXQgaXMgdW5kZWZpbmVkLCB0aGUga2V5XG4gICAgICAgICAqICAgIHdpbGwgbm90IGJlIHN0b3JlZC5cbiAgICAgICAgICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBzdG9yZWQuXG4gICAgICAgICAqL1xuICAgICAgICBwdXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG4gICAgICAgICAgaWYgKGNhcGFjaXR5IDwgTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldIHx8IChscnVIYXNoW2tleV0gPSB7a2V5OiBrZXl9KTtcblxuICAgICAgICAgICAgcmVmcmVzaChscnVFbnRyeSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCEoa2V5IGluIGRhdGEpKSBzaXplKys7XG4gICAgICAgICAgZGF0YVtrZXldID0gdmFsdWU7XG5cbiAgICAgICAgICBpZiAoc2l6ZSA+IGNhcGFjaXR5KSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShzdGFsZUVuZC5rZXkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2dldFxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogUmV0cmlldmVzIG5hbWVkIGRhdGEgc3RvcmVkIGluIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgb2YgdGhlIGRhdGEgdG8gYmUgcmV0cmlldmVkXG4gICAgICAgICAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgc3RvcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICBpZiAoY2FwYWNpdHkgPCBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgICB2YXIgbHJ1RW50cnkgPSBscnVIYXNoW2tleV07XG5cbiAgICAgICAgICAgIGlmICghbHJ1RW50cnkpIHJldHVybjtcblxuICAgICAgICAgICAgcmVmcmVzaChscnVFbnRyeSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjcmVtb3ZlXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBSZW1vdmVzIGFuIGVudHJ5IGZyb20gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSBvZiB0aGUgZW50cnkgdG8gYmUgcmVtb3ZlZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICBpZiAoY2FwYWNpdHkgPCBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgICB2YXIgbHJ1RW50cnkgPSBscnVIYXNoW2tleV07XG5cbiAgICAgICAgICAgIGlmICghbHJ1RW50cnkpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKGxydUVudHJ5ID09IGZyZXNoRW5kKSBmcmVzaEVuZCA9IGxydUVudHJ5LnA7XG4gICAgICAgICAgICBpZiAobHJ1RW50cnkgPT0gc3RhbGVFbmQpIHN0YWxlRW5kID0gbHJ1RW50cnkubjtcbiAgICAgICAgICAgIGxpbmsobHJ1RW50cnkubixscnVFbnRyeS5wKTtcblxuICAgICAgICAgICAgZGVsZXRlIGxydUhhc2hba2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIShrZXkgaW4gZGF0YSkpIHJldHVybjtcblxuICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07XG4gICAgICAgICAgc2l6ZS0tO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmVBbGxcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIENsZWFycyB0aGUgY2FjaGUgb2JqZWN0IG9mIGFueSBlbnRyaWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlQWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkYXRhID0gY3JlYXRlTWFwKCk7XG4gICAgICAgICAgc2l6ZSA9IDA7XG4gICAgICAgICAgbHJ1SGFzaCA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIGZyZXNoRW5kID0gc3RhbGVFbmQgPSBudWxsO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNkZXN0cm95XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBEZXN0cm95cyB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdCBlbnRpcmVseSxcbiAgICAgICAgICogcmVtb3ZpbmcgaXQgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0gc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgICAgc3RhdHMgPSBudWxsO1xuICAgICAgICAgIGxydUhhc2ggPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBjYWNoZXNbY2FjaGVJZF07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2luZm9cbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJldHJpZXZlIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBhIHBhcnRpY3VsYXIge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgICAqICAgPHVsPlxuICAgICAgICAgKiAgICAgPGxpPioqaWQqKjogdGhlIGlkIG9mIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KipzaXplKio6IHRoZSBudW1iZXIgb2YgZW50cmllcyBrZXB0IGluIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KiouLi4qKjogYW55IGFkZGl0aW9uYWwgcHJvcGVydGllcyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCB3aGVuIGNyZWF0aW5nIHRoZVxuICAgICAgICAgKiAgICAgICBjYWNoZS48L2xpPlxuICAgICAgICAgKiAgIDwvdWw+XG4gICAgICAgICAqL1xuICAgICAgICBpbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBzdGF0cywge3NpemU6IHNpemV9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuXG4gICAgICAvKipcbiAgICAgICAqIG1ha2VzIHRoZSBgZW50cnlgIHRoZSBmcmVzaEVuZCBvZiB0aGUgTFJVIGxpbmtlZCBsaXN0XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlZnJlc2goZW50cnkpIHtcbiAgICAgICAgaWYgKGVudHJ5ICE9IGZyZXNoRW5kKSB7XG4gICAgICAgICAgaWYgKCFzdGFsZUVuZCkge1xuICAgICAgICAgICAgc3RhbGVFbmQgPSBlbnRyeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWxlRW5kID09IGVudHJ5KSB7XG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5Lm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluayhlbnRyeS5uLCBlbnRyeS5wKTtcbiAgICAgICAgICBsaW5rKGVudHJ5LCBmcmVzaEVuZCk7XG4gICAgICAgICAgZnJlc2hFbmQgPSBlbnRyeTtcbiAgICAgICAgICBmcmVzaEVuZC5uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogYmlkaXJlY3Rpb25hbGx5IGxpbmtzIHR3byBlbnRyaWVzIG9mIHRoZSBMUlUgbGlua2VkIGxpc3RcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gbGluayhuZXh0RW50cnksIHByZXZFbnRyeSkge1xuICAgICAgICBpZiAobmV4dEVudHJ5ICE9IHByZXZFbnRyeSkge1xuICAgICAgICAgIGlmIChuZXh0RW50cnkpIG5leHRFbnRyeS5wID0gcHJldkVudHJ5OyAvL3Agc3RhbmRzIGZvciBwcmV2aW91cywgJ3ByZXYnIGRpZG4ndCBtaW5pZnlcbiAgICAgICAgICBpZiAocHJldkVudHJ5KSBwcmV2RW50cnkubiA9IG5leHRFbnRyeTsgLy9uIHN0YW5kcyBmb3IgbmV4dCwgJ25leHQnIGRpZG4ndCBtaW5pZnlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjYWNoZUZhY3RvcnkjaW5mb1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCB0aGUgY2FjaGVzIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWRcbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gLSBrZXktdmFsdWUgbWFwIG9mIGBjYWNoZUlkYCB0byB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYGNhY2hlI2luZm9gXG4gICAqL1xuICAgIGNhY2hlRmFjdG9yeS5pbmZvID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaW5mbyA9IHt9O1xuICAgICAgZm9yRWFjaChjYWNoZXMsIGZ1bmN0aW9uKGNhY2hlLCBjYWNoZUlkKSB7XG4gICAgICAgIGluZm9bY2FjaGVJZF0gPSBjYWNoZS5pbmZvKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH07XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5I2dldFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogR2V0IGFjY2VzcyB0byBhIGNhY2hlIG9iamVjdCBieSB0aGUgYGNhY2hlSWRgIHVzZWQgd2hlbiBpdCB3YXMgY3JlYXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlSWQgTmFtZSBvciBpZCBvZiBhIGNhY2hlIHRvIGFjY2Vzcy5cbiAgICogQHJldHVybnMge29iamVjdH0gQ2FjaGUgb2JqZWN0IGlkZW50aWZpZWQgYnkgdGhlIGNhY2hlSWQgb3IgdW5kZWZpbmVkIGlmIG5vIHN1Y2ggY2FjaGUuXG4gICAqL1xuICAgIGNhY2hlRmFjdG9yeS5nZXQgPSBmdW5jdGlvbihjYWNoZUlkKSB7XG4gICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdO1xuICAgIH07XG5cblxuICAgIHJldHVybiBjYWNoZUZhY3Rvcnk7XG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR0ZW1wbGF0ZUNhY2hlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgZmlyc3QgdGltZSBhIHRlbXBsYXRlIGlzIHVzZWQsIGl0IGlzIGxvYWRlZCBpbiB0aGUgdGVtcGxhdGUgY2FjaGUgZm9yIHF1aWNrIHJldHJpZXZhbC4gWW91XG4gKiBjYW4gbG9hZCB0ZW1wbGF0ZXMgZGlyZWN0bHkgaW50byB0aGUgY2FjaGUgaW4gYSBgc2NyaXB0YCB0YWcsIG9yIGJ5IGNvbnN1bWluZyB0aGVcbiAqIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZSBkaXJlY3RseS5cbiAqXG4gKiBBZGRpbmcgdmlhIHRoZSBgc2NyaXB0YCB0YWc6XG4gKlxuICogYGBgaHRtbFxuICogICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L25nLXRlbXBsYXRlXCIgaWQ9XCJ0ZW1wbGF0ZUlkLmh0bWxcIj5cbiAqICAgICA8cD5UaGlzIGlzIHRoZSBjb250ZW50IG9mIHRoZSB0ZW1wbGF0ZTwvcD5cbiAqICAgPC9zY3JpcHQ+XG4gKiBgYGBcbiAqXG4gKiAqKk5vdGU6KiogdGhlIGBzY3JpcHRgIHRhZyBjb250YWluaW5nIHRoZSB0ZW1wbGF0ZSBkb2VzIG5vdCBuZWVkIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBgaGVhZGAgb2ZcbiAqIHRoZSBkb2N1bWVudCwgYnV0IGl0IG11c3QgYmUgYSBkZXNjZW5kZW50IG9mIHRoZSB7QGxpbmsgbmcuJHJvb3RFbGVtZW50ICRyb290RWxlbWVudH0gKElFLFxuICogZWxlbWVudCB3aXRoIG5nLWFwcCBhdHRyaWJ1dGUpLCBvdGhlcndpc2UgdGhlIHRlbXBsYXRlIHdpbGwgYmUgaWdub3JlZC5cbiAqXG4gKiBBZGRpbmcgdmlhIHRoZSBgJHRlbXBsYXRlQ2FjaGVgIHNlcnZpY2U6XG4gKlxuICogYGBganNcbiAqIHZhciBteUFwcCA9IGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKTtcbiAqIG15QXBwLnJ1bihmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICogICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3RlbXBsYXRlSWQuaHRtbCcsICdUaGlzIGlzIHRoZSBjb250ZW50IG9mIHRoZSB0ZW1wbGF0ZScpO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBUbyByZXRyaWV2ZSB0aGUgdGVtcGxhdGUgbGF0ZXIsIHNpbXBseSB1c2UgaXQgaW4geW91ciBIVE1MOlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1pbmNsdWRlPVwiICd0ZW1wbGF0ZUlkLmh0bWwnIFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogb3IgZ2V0IGl0IHZpYSBKYXZhc2NyaXB0OlxuICogYGBganNcbiAqICR0ZW1wbGF0ZUNhY2hlLmdldCgndGVtcGxhdGVJZC5odG1sJylcbiAqIGBgYFxuICpcbiAqIFNlZSB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSAkY2FjaGVGYWN0b3J5fS5cbiAqXG4gKi9cbmZ1bmN0aW9uICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRjYWNoZUZhY3RvcnkpIHtcbiAgICByZXR1cm4gJGNhY2hlRmFjdG9yeSgndGVtcGxhdGVzJyk7XG4gIH1dO1xufVxuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gKiAgICAgQW55IGNvbW1pdHMgdG8gdGhpcyBmaWxlIHNob3VsZCBiZSByZXZpZXdlZCB3aXRoIHNlY3VyaXR5IGluIG1pbmQuICAqXG4gKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgaXMgcmVxdWlyZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gKiAgICBPciBhbGxvd3MgZm9yIHNvbWVvbmUgdG8gY2hhbmdlIHRoZSBwcm90b3R5cGUgb2YgYnVpbHQtaW4gb2JqZWN0cz8gICAqXG4gKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKiAhIFZBUklBQkxFL0ZVTkNUSU9OIE5BTUlORyBDT05WRU5USU9OUyBUSEFUIEFQUExZIFRPIFRISVMgRklMRSFcbiAqXG4gKiBET00tcmVsYXRlZCB2YXJpYWJsZXM6XG4gKlxuICogLSBcIm5vZGVcIiAtIERPTSBOb2RlXG4gKiAtIFwiZWxlbWVudFwiIC0gRE9NIEVsZW1lbnQgb3IgTm9kZVxuICogLSBcIiRub2RlXCIgb3IgXCIkZWxlbWVudFwiIC0ganFMaXRlLXdyYXBwZWQgbm9kZSBvciBlbGVtZW50XG4gKlxuICpcbiAqIENvbXBpbGVyIHJlbGF0ZWQgc3R1ZmY6XG4gKlxuICogLSBcImxpbmtGblwiIC0gbGlua2luZyBmbiBvZiBhIHNpbmdsZSBkaXJlY3RpdmVcbiAqIC0gXCJub2RlTGlua0ZuXCIgLSBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBhIHBhcnRpY3VsYXIgbm9kZVxuICogLSBcImNoaWxkTGlua0ZuXCIgLSAgZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgY2hpbGQgbm9kZXMgb2YgYSBwYXJ0aWN1bGFyIG5vZGVcbiAqIC0gXCJjb21wb3NpdGVMaW5rRm5cIiAtIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGEgY29tcGlsYXRpb24gcm9vdCAobm9kZUxpc3QpXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkY29tcGlsZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBpbGVzIGFuIEhUTUwgc3RyaW5nIG9yIERPTSBpbnRvIGEgdGVtcGxhdGUgYW5kIHByb2R1Y2VzIGEgdGVtcGxhdGUgZnVuY3Rpb24sIHdoaWNoXG4gKiBjYW4gdGhlbiBiZSB1c2VkIHRvIGxpbmsge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgYHNjb3BlYH0gYW5kIHRoZSB0ZW1wbGF0ZSB0b2dldGhlci5cbiAqXG4gKiBUaGUgY29tcGlsYXRpb24gaXMgYSBwcm9jZXNzIG9mIHdhbGtpbmcgdGhlIERPTSB0cmVlIGFuZCBtYXRjaGluZyBET00gZWxlbWVudHMgdG9cbiAqIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIFRoaXMgZG9jdW1lbnQgaXMgYW4gaW4tZGVwdGggcmVmZXJlbmNlIG9mIGFsbCBkaXJlY3RpdmUgb3B0aW9ucy5cbiAqIEZvciBhIGdlbnRsZSBpbnRyb2R1Y3Rpb24gdG8gZGlyZWN0aXZlcyB3aXRoIGV4YW1wbGVzIG9mIGNvbW1vbiB1c2UgY2FzZXMsXG4gKiBzZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlIGd1aWRlfS5cbiAqIDwvZGl2PlxuICpcbiAqICMjIENvbXByZWhlbnNpdmUgRGlyZWN0aXZlIEFQSVxuICpcbiAqIFRoZXJlIGFyZSBtYW55IGRpZmZlcmVudCBvcHRpb25zIGZvciBhIGRpcmVjdGl2ZS5cbiAqXG4gKiBUaGUgZGlmZmVyZW5jZSByZXNpZGVzIGluIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiBZb3UgY2FuIGVpdGhlciByZXR1cm4gYSBcIkRpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdFwiIChzZWUgYmVsb3cpIHRoYXQgZGVmaW5lcyB0aGUgZGlyZWN0aXZlIHByb3BlcnRpZXMsXG4gKiBvciBqdXN0IHRoZSBgcG9zdExpbmtgIGZ1bmN0aW9uIChhbGwgb3RoZXIgcHJvcGVydGllcyB3aWxsIGhhdmUgdGhlIGRlZmF1bHQgdmFsdWVzKS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPlxuICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBcImRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdFwiIGZvcm0uXG4gKiA8L2Rpdj5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBkaXJlY3RpdmUgZGVjbGFyZWQgd2l0aCBhIERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdDpcbiAqXG4gKiBgYGBqc1xuICogICB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSguLi4pO1xuICpcbiAqICAgbXlNb2R1bGUuZGlyZWN0aXZlKCdkaXJlY3RpdmVOYW1lJywgZnVuY3Rpb24gZmFjdG9yeShpbmplY3RhYmxlcykge1xuICogICAgIHZhciBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0ID0ge1xuICogICAgICAgcHJpb3JpdHk6IDAsXG4gKiAgICAgICB0ZW1wbGF0ZTogJzxkaXY+PC9kaXY+JywgLy8gb3IgLy8gZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgeyAuLi4gfSxcbiAqICAgICAgIC8vIG9yXG4gKiAgICAgICAvLyB0ZW1wbGF0ZVVybDogJ2RpcmVjdGl2ZS5odG1sJywgLy8gb3IgLy8gZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgeyAuLi4gfSxcbiAqICAgICAgIHRyYW5zY2x1ZGU6IGZhbHNlLFxuICogICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAqICAgICAgIHRlbXBsYXRlTmFtZXNwYWNlOiAnaHRtbCcsXG4gKiAgICAgICBzY29wZTogZmFsc2UsXG4gKiAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICR0cmFuc2NsdWRlLCBvdGhlckluamVjdGFibGVzKSB7IC4uLiB9LFxuICogICAgICAgY29udHJvbGxlckFzOiAnc3RyaW5nSWRlbnRpZmllcicsXG4gKiAgICAgICBiaW5kVG9Db250cm9sbGVyOiBmYWxzZSxcbiAqICAgICAgIHJlcXVpcmU6ICdzaWJsaW5nRGlyZWN0aXZlTmFtZScsIC8vIG9yIC8vIFsnXnBhcmVudERpcmVjdGl2ZU5hbWUnLCAnP29wdGlvbmFsRGlyZWN0aXZlTmFtZScsICc/Xm9wdGlvbmFsUGFyZW50J10sXG4gKiAgICAgICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIHByZUxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH0sXG4gKiAgICAgICAgICAgcG9zdDogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH1cbiAqICAgICAgICAgfVxuICogICAgICAgICAvLyBvclxuICogICAgICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8gbGluazoge1xuICogICAgICAgLy8gIHByZTogZnVuY3Rpb24gcHJlTGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfSxcbiAqICAgICAgIC8vICBwb3N0OiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfVxuICogICAgICAgLy8gfVxuICogICAgICAgLy8gb3JcbiAqICAgICAgIC8vIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKCAuLi4gKSB7IC4uLiB9XG4gKiAgICAgfTtcbiAqICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIEFueSB1bnNwZWNpZmllZCBvcHRpb25zIHdpbGwgdXNlIHRoZSBkZWZhdWx0IHZhbHVlLiBZb3UgY2FuIHNlZSB0aGUgZGVmYXVsdCB2YWx1ZXMgYmVsb3cuXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGVyZWZvcmUgdGhlIGFib3ZlIGNhbiBiZSBzaW1wbGlmaWVkIGFzOlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKC4uLik7XG4gKlxuICogICBteU1vZHVsZS5kaXJlY3RpdmUoJ2RpcmVjdGl2ZU5hbWUnLCBmdW5jdGlvbiBmYWN0b3J5KGluamVjdGFibGVzKSB7XG4gKiAgICAgdmFyIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3QgPSB7XG4gKiAgICAgICBsaW5rOiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgeyAuLi4gfVxuICogICAgIH07XG4gKiAgICAgcmV0dXJuIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3Q7XG4gKiAgICAgLy8gb3JcbiAqICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMpIHsgLi4uIH1cbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKlxuICpcbiAqICMjIyBEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3RcbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0IHByb3ZpZGVzIGluc3RydWN0aW9ucyB0byB0aGUge0BsaW5rIG5nLiRjb21waWxlXG4gKiBjb21waWxlcn0uIFRoZSBhdHRyaWJ1dGVzIGFyZTpcbiAqXG4gKiAjIyMjIGBtdWx0aUVsZW1lbnRgXG4gKiBXaGVuIHRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIHRydWUsIHRoZSBIVE1MIGNvbXBpbGVyIHdpbGwgY29sbGVjdCBET00gbm9kZXMgYmV0d2VlblxuICogbm9kZXMgd2l0aCB0aGUgYXR0cmlidXRlcyBgZGlyZWN0aXZlLW5hbWUtc3RhcnRgIGFuZCBgZGlyZWN0aXZlLW5hbWUtZW5kYCwgYW5kIGdyb3VwIHRoZW1cbiAqIHRvZ2V0aGVyIGFzIHRoZSBkaXJlY3RpdmUgZWxlbWVudHMuIEl0IGlzIHJlY29tbWVuZGVkIHRoYXQgdGhpcyBmZWF0dXJlIGJlIHVzZWQgb24gZGlyZWN0aXZlc1xuICogd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBiZWhhdmlvdXJhbCAoc3VjaCBhcyB7QGxpbmsgbmdDbGlja30pLCBhbmQgd2hpY2hcbiAqIGRvIG5vdCBtYW5pcHVsYXRlIG9yIHJlcGxhY2UgY2hpbGQgbm9kZXMgKHN1Y2ggYXMge0BsaW5rIG5nSW5jbHVkZX0pLlxuICpcbiAqICMjIyMgYHByaW9yaXR5YFxuICogV2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgZGlyZWN0aXZlcyBkZWZpbmVkIG9uIGEgc2luZ2xlIERPTSBlbGVtZW50LCBzb21ldGltZXMgaXRcbiAqIGlzIG5lY2Vzc2FyeSB0byBzcGVjaWZ5IHRoZSBvcmRlciBpbiB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYXBwbGllZC4gVGhlIGBwcmlvcml0eWAgaXMgdXNlZFxuICogdG8gc29ydCB0aGUgZGlyZWN0aXZlcyBiZWZvcmUgdGhlaXIgYGNvbXBpbGVgIGZ1bmN0aW9ucyBnZXQgY2FsbGVkLiBQcmlvcml0eSBpcyBkZWZpbmVkIGFzIGFcbiAqIG51bWJlci4gRGlyZWN0aXZlcyB3aXRoIGdyZWF0ZXIgbnVtZXJpY2FsIGBwcmlvcml0eWAgYXJlIGNvbXBpbGVkIGZpcnN0LiBQcmUtbGluayBmdW5jdGlvbnNcbiAqIGFyZSBhbHNvIHJ1biBpbiBwcmlvcml0eSBvcmRlciwgYnV0IHBvc3QtbGluayBmdW5jdGlvbnMgYXJlIHJ1biBpbiByZXZlcnNlIG9yZGVyLiBUaGUgb3JkZXJcbiAqIG9mIGRpcmVjdGl2ZXMgd2l0aCB0aGUgc2FtZSBwcmlvcml0eSBpcyB1bmRlZmluZWQuIFRoZSBkZWZhdWx0IHByaW9yaXR5IGlzIGAwYC5cbiAqXG4gKiAjIyMjIGB0ZXJtaW5hbGBcbiAqIElmIHNldCB0byB0cnVlIHRoZW4gdGhlIGN1cnJlbnQgYHByaW9yaXR5YCB3aWxsIGJlIHRoZSBsYXN0IHNldCBvZiBkaXJlY3RpdmVzXG4gKiB3aGljaCB3aWxsIGV4ZWN1dGUgKGFueSBkaXJlY3RpdmVzIGF0IHRoZSBjdXJyZW50IHByaW9yaXR5IHdpbGwgc3RpbGwgZXhlY3V0ZVxuICogYXMgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiBvbiBzYW1lIGBwcmlvcml0eWAgaXMgdW5kZWZpbmVkKS4gTm90ZSB0aGF0IGV4cHJlc3Npb25zXG4gKiBhbmQgb3RoZXIgZGlyZWN0aXZlcyB1c2VkIGluIHRoZSBkaXJlY3RpdmUncyB0ZW1wbGF0ZSB3aWxsIGFsc28gYmUgZXhjbHVkZWQgZnJvbSBleGVjdXRpb24uXG4gKlxuICogIyMjIyBgc2NvcGVgXG4gKiBUaGUgc2NvcGUgcHJvcGVydHkgY2FuIGJlIGB0cnVlYCwgYW4gb2JqZWN0IG9yIGEgZmFsc3kgdmFsdWU6XG4gKlxuICogKiAqKmZhbHN5OioqIE5vIHNjb3BlIHdpbGwgYmUgY3JlYXRlZCBmb3IgdGhlIGRpcmVjdGl2ZS4gVGhlIGRpcmVjdGl2ZSB3aWxsIHVzZSBpdHMgcGFyZW50J3Mgc2NvcGUuXG4gKlxuICogKiAqKmB0cnVlYDoqKiBBIG5ldyBjaGlsZCBzY29wZSB0aGF0IHByb3RvdHlwaWNhbGx5IGluaGVyaXRzIGZyb20gaXRzIHBhcmVudCB3aWxsIGJlIGNyZWF0ZWQgZm9yXG4gKiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC4gSWYgbXVsdGlwbGUgZGlyZWN0aXZlcyBvbiB0aGUgc2FtZSBlbGVtZW50IHJlcXVlc3QgYSBuZXcgc2NvcGUsXG4gKiBvbmx5IG9uZSBuZXcgc2NvcGUgaXMgY3JlYXRlZC4gVGhlIG5ldyBzY29wZSBydWxlIGRvZXMgbm90IGFwcGx5IGZvciB0aGUgcm9vdCBvZiB0aGUgdGVtcGxhdGVcbiAqIHNpbmNlIHRoZSByb290IG9mIHRoZSB0ZW1wbGF0ZSBhbHdheXMgZ2V0cyBhIG5ldyBzY29wZS5cbiAqXG4gKiAqICoqYHsuLi59YCAoYW4gb2JqZWN0IGhhc2gpOioqIEEgbmV3IFwiaXNvbGF0ZVwiIHNjb3BlIGlzIGNyZWF0ZWQgZm9yIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LiBUaGVcbiAqICdpc29sYXRlJyBzY29wZSBkaWZmZXJzIGZyb20gbm9ybWFsIHNjb3BlIGluIHRoYXQgaXQgZG9lcyBub3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdCBmcm9tIGl0cyBwYXJlbnRcbiAqIHNjb3BlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGNyZWF0aW5nIHJldXNhYmxlIGNvbXBvbmVudHMsIHdoaWNoIHNob3VsZCBub3QgYWNjaWRlbnRhbGx5IHJlYWQgb3IgbW9kaWZ5XG4gKiBkYXRhIGluIHRoZSBwYXJlbnQgc2NvcGUuXG4gKlxuICogVGhlICdpc29sYXRlJyBzY29wZSBvYmplY3QgaGFzaCBkZWZpbmVzIGEgc2V0IG9mIGxvY2FsIHNjb3BlIHByb3BlcnRpZXMgZGVyaXZlZCBmcm9tIGF0dHJpYnV0ZXMgb24gdGhlXG4gKiBkaXJlY3RpdmUncyBlbGVtZW50LiBUaGVzZSBsb2NhbCBwcm9wZXJ0aWVzIGFyZSB1c2VmdWwgZm9yIGFsaWFzaW5nIHZhbHVlcyBmb3IgdGVtcGxhdGVzLiBUaGUga2V5cyBpblxuICogdGhlIG9iamVjdCBoYXNoIG1hcCB0byB0aGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgb24gdGhlIGlzb2xhdGUgc2NvcGU7IHRoZSB2YWx1ZXMgZGVmaW5lIGhvdyB0aGUgcHJvcGVydHlcbiAqIGlzIGJvdW5kIHRvIHRoZSBwYXJlbnQgc2NvcGUsIHZpYSBtYXRjaGluZyBhdHRyaWJ1dGVzIG9uIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50OlxuICpcbiAqICogYEBgIG9yIGBAYXR0cmAgLSBiaW5kIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgdG8gdGhlIHZhbHVlIG9mIERPTSBhdHRyaWJ1dGUuIFRoZSByZXN1bHQgaXNcbiAqICAgYWx3YXlzIGEgc3RyaW5nIHNpbmNlIERPTSBhdHRyaWJ1dGVzIGFyZSBzdHJpbmdzLiBJZiBubyBgYXR0cmAgbmFtZSBpcyBzcGVjaWZpZWQgIHRoZW4gdGhlXG4gKiAgIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUuXG4gKiAgIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9XCJoZWxsbyB7e25hbWV9fVwiPmAgYW5kIHdpZGdldCBkZWZpbml0aW9uXG4gKiAgIG9mIGBzY29wZTogeyBsb2NhbE5hbWU6J0BteUF0dHInIH1gLCB0aGVuIHdpZGdldCBzY29wZSBwcm9wZXJ0eSBgbG9jYWxOYW1lYCB3aWxsIHJlZmxlY3RcbiAqICAgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiBgaGVsbG8ge3tuYW1lfX1gLiBBcyB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBjaGFuZ2VzIHNvIHdpbGwgdGhlXG4gKiAgIGBsb2NhbE5hbWVgIHByb3BlcnR5IG9uIHRoZSB3aWRnZXQgc2NvcGUuIFRoZSBgbmFtZWAgaXMgcmVhZCBmcm9tIHRoZSBwYXJlbnQgc2NvcGUgKG5vdFxuICogICBjb21wb25lbnQgc2NvcGUpLlxuICpcbiAqICogYD1gIG9yIGA9YXR0cmAgLSBzZXQgdXAgYmktZGlyZWN0aW9uYWwgYmluZGluZyBiZXR3ZWVuIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgYW5kIHRoZVxuICogICBwYXJlbnQgc2NvcGUgcHJvcGVydHkgb2YgbmFtZSBkZWZpbmVkIHZpYSB0aGUgdmFsdWUgb2YgdGhlIGBhdHRyYCBhdHRyaWJ1dGUuIElmIG5vIGBhdHRyYFxuICogICBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLlxuICogICBHaXZlbiBgPHdpZGdldCBteS1hdHRyPVwicGFyZW50TW9kZWxcIj5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvbiBvZlxuICogICBgc2NvcGU6IHsgbG9jYWxNb2RlbDonPW15QXR0cicgfWAsIHRoZW4gd2lkZ2V0IHNjb3BlIHByb3BlcnR5IGBsb2NhbE1vZGVsYCB3aWxsIHJlZmxlY3QgdGhlXG4gKiAgIHZhbHVlIG9mIGBwYXJlbnRNb2RlbGAgb24gdGhlIHBhcmVudCBzY29wZS4gQW55IGNoYW5nZXMgdG8gYHBhcmVudE1vZGVsYCB3aWxsIGJlIHJlZmxlY3RlZFxuICogICBpbiBgbG9jYWxNb2RlbGAgYW5kIGFueSBjaGFuZ2VzIGluIGBsb2NhbE1vZGVsYCB3aWxsIHJlZmxlY3QgaW4gYHBhcmVudE1vZGVsYC4gSWYgdGhlIHBhcmVudFxuICogICBzY29wZSBwcm9wZXJ0eSBkb2Vzbid0IGV4aXN0LCBpdCB3aWxsIHRocm93IGEgTk9OX0FTU0lHTkFCTEVfTU9ERUxfRVhQUkVTU0lPTiBleGNlcHRpb24uIFlvdVxuICogICBjYW4gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2luZyBgPT9gIG9yIGA9P2F0dHJgIGluIG9yZGVyIHRvIGZsYWcgdGhlIHByb3BlcnR5IGFzIG9wdGlvbmFsLiBJZlxuICogICB5b3Ugd2FudCB0byBzaGFsbG93IHdhdGNoIGZvciBjaGFuZ2VzIChpLmUuICR3YXRjaENvbGxlY3Rpb24gaW5zdGVhZCBvZiAkd2F0Y2gpIHlvdSBjYW4gdXNlXG4gKiAgIGA9KmAgb3IgYD0qYXR0cmAgKGA9Kj9gIG9yIGA9Kj9hdHRyYCBpZiB0aGUgcHJvcGVydHkgaXMgb3B0aW9uYWwpLlxuICpcbiAqICogYCZgIG9yIGAmYXR0cmAgLSBwcm92aWRlcyBhIHdheSB0byBleGVjdXRlIGFuIGV4cHJlc3Npb24gaW4gdGhlIGNvbnRleHQgb2YgdGhlIHBhcmVudCBzY29wZS5cbiAqICAgSWYgbm8gYGF0dHJgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlXG4gKiAgIGxvY2FsIG5hbWUuIEdpdmVuIGA8d2lkZ2V0IG15LWF0dHI9XCJjb3VudCA9IGNvdW50ICsgdmFsdWVcIj5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvbiBvZlxuICogICBgc2NvcGU6IHsgbG9jYWxGbjonJm15QXR0cicgfWAsIHRoZW4gaXNvbGF0ZSBzY29wZSBwcm9wZXJ0eSBgbG9jYWxGbmAgd2lsbCBwb2ludCB0b1xuICogICBhIGZ1bmN0aW9uIHdyYXBwZXIgZm9yIHRoZSBgY291bnQgPSBjb3VudCArIHZhbHVlYCBleHByZXNzaW9uLiBPZnRlbiBpdCdzIGRlc2lyYWJsZSB0b1xuICogICBwYXNzIGRhdGEgZnJvbSB0aGUgaXNvbGF0ZWQgc2NvcGUgdmlhIGFuIGV4cHJlc3Npb24gdG8gdGhlIHBhcmVudCBzY29wZSwgdGhpcyBjYW4gYmVcbiAqICAgZG9uZSBieSBwYXNzaW5nIGEgbWFwIG9mIGxvY2FsIHZhcmlhYmxlIG5hbWVzIGFuZCB2YWx1ZXMgaW50byB0aGUgZXhwcmVzc2lvbiB3cmFwcGVyIGZuLlxuICogICBGb3IgZXhhbXBsZSwgaWYgdGhlIGV4cHJlc3Npb24gaXMgYGluY3JlbWVudChhbW91bnQpYCB0aGVuIHdlIGNhbiBzcGVjaWZ5IHRoZSBhbW91bnQgdmFsdWVcbiAqICAgYnkgY2FsbGluZyB0aGUgYGxvY2FsRm5gIGFzIGBsb2NhbEZuKHthbW91bnQ6IDIyfSlgLlxuICpcbiAqIEluIGdlbmVyYWwgaXQncyBwb3NzaWJsZSB0byBhcHBseSBtb3JlIHRoYW4gb25lIGRpcmVjdGl2ZSB0byBvbmUgZWxlbWVudCwgYnV0IHRoZXJlIG1pZ2h0IGJlIGxpbWl0YXRpb25zXG4gKiBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2Ygc2NvcGUgcmVxdWlyZWQgYnkgdGhlIGRpcmVjdGl2ZXMuIFRoZSBmb2xsb3dpbmcgcG9pbnRzIHdpbGwgaGVscCBleHBsYWluIHRoZXNlIGxpbWl0YXRpb25zLlxuICogRm9yIHNpbXBsaWNpdHkgb25seSB0d28gZGlyZWN0aXZlcyBhcmUgdGFrZW4gaW50byBhY2NvdW50LCBidXQgaXQgaXMgYWxzbyBhcHBsaWNhYmxlIGZvciBzZXZlcmFsIGRpcmVjdGl2ZXM6XG4gKlxuICogKiAqKm5vIHNjb3BlKiogKyAqKm5vIHNjb3BlKiogPT4gVHdvIGRpcmVjdGl2ZXMgd2hpY2ggZG9uJ3QgcmVxdWlyZSB0aGVpciBvd24gc2NvcGUgd2lsbCB1c2UgdGhlaXIgcGFyZW50J3Mgc2NvcGVcbiAqICogKipjaGlsZCBzY29wZSoqICsgKipubyBzY29wZSoqID0+ICBCb3RoIGRpcmVjdGl2ZXMgd2lsbCBzaGFyZSBvbmUgc2luZ2xlIGNoaWxkIHNjb3BlXG4gKiAqICoqY2hpbGQgc2NvcGUqKiArICoqY2hpbGQgc2NvcGUqKiA9PiAgQm90aCBkaXJlY3RpdmVzIHdpbGwgc2hhcmUgb25lIHNpbmdsZSBjaGlsZCBzY29wZVxuICogKiAqKmlzb2xhdGVkIHNjb3BlKiogKyAqKm5vIHNjb3BlKiogPT4gIFRoZSBpc29sYXRlZCBkaXJlY3RpdmUgd2lsbCB1c2UgaXQncyBvd24gY3JlYXRlZCBpc29sYXRlZCBzY29wZS4gVGhlIG90aGVyIGRpcmVjdGl2ZSB3aWxsIHVzZVxuICogaXRzIHBhcmVudCdzIHNjb3BlXG4gKiAqICoqaXNvbGF0ZWQgc2NvcGUqKiArICoqY2hpbGQgc2NvcGUqKiA9PiAgKipXb24ndCB3b3JrISoqIE9ubHkgb25lIHNjb3BlIGNhbiBiZSByZWxhdGVkIHRvIG9uZSBlbGVtZW50LiBUaGVyZWZvcmUgdGhlc2UgZGlyZWN0aXZlcyBjYW5ub3RcbiAqIGJlIGFwcGxpZWQgdG8gdGhlIHNhbWUgZWxlbWVudC5cbiAqICogKippc29sYXRlZCBzY29wZSoqICsgKippc29sYXRlZCBzY29wZSoqICA9PiAgKipXb24ndCB3b3JrISoqIE9ubHkgb25lIHNjb3BlIGNhbiBiZSByZWxhdGVkIHRvIG9uZSBlbGVtZW50LiBUaGVyZWZvcmUgdGhlc2UgZGlyZWN0aXZlc1xuICogY2Fubm90IGJlIGFwcGxpZWQgdG8gdGhlIHNhbWUgZWxlbWVudC5cbiAqXG4gKlxuICogIyMjIyBgYmluZFRvQ29udHJvbGxlcmBcbiAqIFRoaXMgcHJvcGVydHkgaXMgdXNlZCB0byBiaW5kIHNjb3BlIHByb3BlcnRpZXMgZGlyZWN0bHkgdG8gdGhlIGNvbnRyb2xsZXIuIEl0IGNhbiBiZSBlaXRoZXJcbiAqIGB0cnVlYCBvciBhbiBvYmplY3QgaGFzaCB3aXRoIHRoZSBzYW1lIGZvcm1hdCBhcyB0aGUgYHNjb3BlYCBwcm9wZXJ0eS4gQWRkaXRpb25hbGx5LCBhIGNvbnRyb2xsZXJcbiAqIGFsaWFzIG11c3QgYmUgc2V0LCBlaXRoZXIgYnkgdXNpbmcgYGNvbnRyb2xsZXJBczogJ215QWxpYXMnYCBvciBieSBzcGVjaWZ5aW5nIHRoZSBhbGlhcyBpbiB0aGUgY29udHJvbGxlclxuICogZGVmaW5pdGlvbjogYGNvbnRyb2xsZXI6ICdteUN0cmwgYXMgbXlBbGlhcydgLlxuICpcbiAqIFdoZW4gYW4gaXNvbGF0ZSBzY29wZSBpcyB1c2VkIGZvciBhIGRpcmVjdGl2ZSAoc2VlIGFib3ZlKSwgYGJpbmRUb0NvbnRyb2xsZXI6IHRydWVgIHdpbGxcbiAqIGFsbG93IGEgY29tcG9uZW50IHRvIGhhdmUgaXRzIHByb3BlcnRpZXMgYm91bmQgdG8gdGhlIGNvbnRyb2xsZXIsIHJhdGhlciB0aGFuIHRvIHNjb3BlLiBXaGVuIHRoZSBjb250cm9sbGVyXG4gKiBpcyBpbnN0YW50aWF0ZWQsIHRoZSBpbml0aWFsIHZhbHVlcyBvZiB0aGUgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBhcmUgYWxyZWFkeSBhdmFpbGFibGUuXG4gKlxuICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBzZXQgYGJpbmRUb0NvbnRyb2xsZXJgIHRvIGFuIG9iamVjdCBoYXNoIHdpdGggdGhlIHNhbWUgZm9ybWF0IGFzIHRoZSBgc2NvcGVgIHByb3BlcnR5LlxuICogVGhpcyB3aWxsIHNldCB1cCB0aGUgc2NvcGUgYmluZGluZ3MgdG8gdGhlIGNvbnRyb2xsZXIgZGlyZWN0bHkuIE5vdGUgdGhhdCBgc2NvcGVgIGNhbiBzdGlsbCBiZSB1c2VkXG4gKiB0byBkZWZpbmUgd2hpY2gga2luZCBvZiBzY29wZSBpcyBjcmVhdGVkLiBCeSBkZWZhdWx0LCBubyBzY29wZSBpcyBjcmVhdGVkLiBVc2UgYHNjb3BlOiB7fWAgdG8gY3JlYXRlIGFuIGlzb2xhdGVcbiAqIHNjb3BlICh1c2VmdWwgZm9yIGNvbXBvbmVudCBkaXJlY3RpdmVzKS5cbiAqXG4gKiBJZiBib3RoIGBiaW5kVG9Db250cm9sbGVyYCBhbmQgYHNjb3BlYCBhcmUgZGVmaW5lZCBhbmQgaGF2ZSBvYmplY3QgaGFzaGVzLCBgYmluZFRvQ29udHJvbGxlcmAgb3ZlcnJpZGVzIGBzY29wZWAuXG4gKlxuICpcbiAqICMjIyMgYGNvbnRyb2xsZXJgXG4gKiBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBUaGUgY29udHJvbGxlciBpcyBpbnN0YW50aWF0ZWQgYmVmb3JlIHRoZVxuICogcHJlLWxpbmtpbmcgcGhhc2UgYW5kIGNhbiBiZSBhY2Nlc3NlZCBieSBvdGhlciBkaXJlY3RpdmVzIChzZWVcbiAqIGByZXF1aXJlYCBhdHRyaWJ1dGUpLiBUaGlzIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byBjb21tdW5pY2F0ZSB3aXRoIGVhY2ggb3RoZXIgYW5kIGF1Z21lbnRcbiAqIGVhY2ggb3RoZXIncyBiZWhhdmlvci4gVGhlIGNvbnRyb2xsZXIgaXMgaW5qZWN0YWJsZSAoYW5kIHN1cHBvcnRzIGJyYWNrZXQgbm90YXRpb24pIHdpdGggdGhlIGZvbGxvd2luZyBsb2NhbHM6XG4gKlxuICogKiBgJHNjb3BlYCAtIEN1cnJlbnQgc2NvcGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gKiAqIGAkZWxlbWVudGAgLSBDdXJyZW50IGVsZW1lbnRcbiAqICogYCRhdHRyc2AgLSBDdXJyZW50IGF0dHJpYnV0ZXMgb2JqZWN0IGZvciB0aGUgZWxlbWVudFxuICogKiBgJHRyYW5zY2x1ZGVgIC0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb24gcHJlLWJvdW5kIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZTpcbiAqICAgYGZ1bmN0aW9uKFtzY29wZV0sIGNsb25lTGlua2luZ0ZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KWAuXG4gKiAgICAqIGBzY29wZWA6IG9wdGlvbmFsIGFyZ3VtZW50IHRvIG92ZXJyaWRlIHRoZSBzY29wZS5cbiAqICAgICogYGNsb25lTGlua2luZ0ZuYDogb3B0aW9uYWwgYXJndW1lbnQgdG8gY3JlYXRlIGNsb25lcyBvZiB0aGUgb3JpZ2luYWwgdHJhbnNjbHVkZWQgY29udGVudC5cbiAqICAgICogYGZ1dHVyZVBhcmVudEVsZW1lbnRgOlxuICogICAgICAgICogZGVmaW5lcyB0aGUgcGFyZW50IHRvIHdoaWNoIHRoZSBgY2xvbmVMaW5raW5nRm5gIHdpbGwgYWRkIHRoZSBjbG9uZWQgZWxlbWVudHMuXG4gKiAgICAgICAgKiBkZWZhdWx0OiBgJGVsZW1lbnQucGFyZW50KClgIHJlc3AuIGAkZWxlbWVudGAgZm9yIGB0cmFuc2NsdWRlOidlbGVtZW50J2AgcmVzcC4gYHRyYW5zY2x1ZGU6dHJ1ZWAuXG4gKiAgICAgICAgKiBvbmx5IG5lZWRlZCBmb3IgdHJhbnNjbHVkZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBjb250YWluIG5vbiBodG1sIGVsZW1lbnRzIChlLmcuIFNWRyBlbGVtZW50cylcbiAqICAgICAgICAgIGFuZCB3aGVuIHRoZSBgY2xvbmVMaW5raW5GbmAgaXMgcGFzc2VkLFxuICogICAgICAgICAgYXMgdGhvc2UgZWxlbWVudHMgbmVlZCB0byBjcmVhdGVkIGFuZCBjbG9uZWQgaW4gYSBzcGVjaWFsIHdheSB3aGVuIHRoZXkgYXJlIGRlZmluZWQgb3V0c2lkZSB0aGVpclxuICogICAgICAgICAgdXN1YWwgY29udGFpbmVycyAoZS5nLiBsaWtlIGA8c3ZnPmApLlxuICogICAgICAgICogU2VlIGFsc28gdGhlIGBkaXJlY3RpdmUudGVtcGxhdGVOYW1lc3BhY2VgIHByb3BlcnR5LlxuICpcbiAqXG4gKiAjIyMjIGByZXF1aXJlYFxuICogUmVxdWlyZSBhbm90aGVyIGRpcmVjdGl2ZSBhbmQgaW5qZWN0IGl0cyBjb250cm9sbGVyIGFzIHRoZSBmb3VydGggYXJndW1lbnQgdG8gdGhlIGxpbmtpbmcgZnVuY3Rpb24uIFRoZVxuICogYHJlcXVpcmVgIHRha2VzIGEgc3RyaW5nIG5hbWUgKG9yIGFycmF5IG9mIHN0cmluZ3MpIG9mIHRoZSBkaXJlY3RpdmUocykgdG8gcGFzcyBpbi4gSWYgYW4gYXJyYXkgaXMgdXNlZCwgdGhlXG4gKiBpbmplY3RlZCBhcmd1bWVudCB3aWxsIGJlIGFuIGFycmF5IGluIGNvcnJlc3BvbmRpbmcgb3JkZXIuIElmIG5vIHN1Y2ggZGlyZWN0aXZlIGNhbiBiZVxuICogZm91bmQsIG9yIGlmIHRoZSBkaXJlY3RpdmUgZG9lcyBub3QgaGF2ZSBhIGNvbnRyb2xsZXIsIHRoZW4gYW4gZXJyb3IgaXMgcmFpc2VkICh1bmxlc3Mgbm8gbGluayBmdW5jdGlvblxuICogaXMgc3BlY2lmaWVkLCBpbiB3aGljaCBjYXNlIGVycm9yIGNoZWNraW5nIGlzIHNraXBwZWQpLiBUaGUgbmFtZSBjYW4gYmUgcHJlZml4ZWQgd2l0aDpcbiAqXG4gKiAqIChubyBwcmVmaXgpIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC5cbiAqICogYD9gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgb3IgcGFzcyBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuXG4gKiAqIGBeYCAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQgYW5kIGl0cyBwYXJlbnRzLiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuXG4gKiAqIGBeXmAgLSBMb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50J3MgcGFyZW50cy4gVGhyb3cgYW4gZXJyb3IgaWYgbm90IGZvdW5kLlxuICogKiBgP15gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50IGFuZCBpdHMgcGFyZW50cyBvciBwYXNzXG4gKiAgIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAqICogYD9eXmAgLSBBdHRlbXB0IHRvIGxvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQncyBwYXJlbnRzLCBvciBwYXNzXG4gKiAgIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAqXG4gKlxuICogIyMjIyBgY29udHJvbGxlckFzYFxuICogSWRlbnRpZmllciBuYW1lIGZvciBhIHJlZmVyZW5jZSB0byB0aGUgY29udHJvbGxlciBpbiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUuXG4gKiBUaGlzIGFsbG93cyB0aGUgY29udHJvbGxlciB0byBiZSByZWZlcmVuY2VkIGZyb20gdGhlIGRpcmVjdGl2ZSB0ZW1wbGF0ZS4gVGhpcyBpcyBlc3BlY2lhbGx5XG4gKiB1c2VmdWwgd2hlbiBhIGRpcmVjdGl2ZSBpcyB1c2VkIGFzIGNvbXBvbmVudCwgaS5lLiB3aXRoIGFuIGBpc29sYXRlYCBzY29wZS4gSXQncyBhbHNvIHBvc3NpYmxlXG4gKiB0byB1c2UgaXQgaW4gYSBkaXJlY3RpdmUgd2l0aG91dCBhbiBgaXNvbGF0ZWAgLyBgbmV3YCBzY29wZSwgYnV0IHlvdSBuZWVkIHRvIGJlIGF3YXJlIHRoYXQgdGhlXG4gKiBgY29udHJvbGxlckFzYCByZWZlcmVuY2UgbWlnaHQgb3ZlcndyaXRlIGEgcHJvcGVydHkgdGhhdCBhbHJlYWR5IGV4aXN0cyBvbiB0aGUgcGFyZW50IHNjb3BlLlxuICpcbiAqXG4gKiAjIyMjIGByZXN0cmljdGBcbiAqIFN0cmluZyBvZiBzdWJzZXQgb2YgYEVBQ01gIHdoaWNoIHJlc3RyaWN0cyB0aGUgZGlyZWN0aXZlIHRvIGEgc3BlY2lmaWMgZGlyZWN0aXZlXG4gKiBkZWNsYXJhdGlvbiBzdHlsZS4gSWYgb21pdHRlZCwgdGhlIGRlZmF1bHRzIChlbGVtZW50cyBhbmQgYXR0cmlidXRlcykgYXJlIHVzZWQuXG4gKlxuICogKiBgRWAgLSBFbGVtZW50IG5hbWUgKGRlZmF1bHQpOiBgPG15LWRpcmVjdGl2ZT48L215LWRpcmVjdGl2ZT5gXG4gKiAqIGBBYCAtIEF0dHJpYnV0ZSAoZGVmYXVsdCk6IGA8ZGl2IG15LWRpcmVjdGl2ZT1cImV4cFwiPjwvZGl2PmBcbiAqICogYENgIC0gQ2xhc3M6IGA8ZGl2IGNsYXNzPVwibXktZGlyZWN0aXZlOiBleHA7XCI+PC9kaXY+YFxuICogKiBgTWAgLSBDb21tZW50OiBgPCEtLSBkaXJlY3RpdmU6IG15LWRpcmVjdGl2ZSBleHAgLS0+YFxuICpcbiAqXG4gKiAjIyMjIGB0ZW1wbGF0ZU5hbWVzcGFjZWBcbiAqIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIGRvY3VtZW50IHR5cGUgdXNlZCBieSB0aGUgbWFya3VwIGluIHRoZSB0ZW1wbGF0ZS5cbiAqIEFuZ3VsYXJKUyBuZWVkcyB0aGlzIGluZm9ybWF0aW9uIGFzIHRob3NlIGVsZW1lbnRzIG5lZWQgdG8gYmUgY3JlYXRlZCBhbmQgY2xvbmVkXG4gKiBpbiBhIHNwZWNpYWwgd2F5IHdoZW4gdGhleSBhcmUgZGVmaW5lZCBvdXRzaWRlIHRoZWlyIHVzdWFsIGNvbnRhaW5lcnMgbGlrZSBgPHN2Zz5gIGFuZCBgPG1hdGg+YC5cbiAqXG4gKiAqIGBodG1sYCAtIEFsbCByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgSFRNTC4gUm9vdCBub2RlcyBtYXkgYWxzbyBiZVxuICogICB0b3AtbGV2ZWwgZWxlbWVudHMgc3VjaCBhcyBgPHN2Zz5gIG9yIGA8bWF0aD5gLlxuICogKiBgc3ZnYCAtIFRoZSByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgU1ZHIGVsZW1lbnRzIChleGNsdWRpbmcgYDxtYXRoPmApLlxuICogKiBgbWF0aGAgLSBUaGUgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIE1hdGhNTCBlbGVtZW50cyAoZXhjbHVkaW5nIGA8c3ZnPmApLlxuICpcbiAqIElmIG5vIGB0ZW1wbGF0ZU5hbWVzcGFjZWAgaXMgc3BlY2lmaWVkLCB0aGVuIHRoZSBuYW1lc3BhY2UgaXMgY29uc2lkZXJlZCB0byBiZSBgaHRtbGAuXG4gKlxuICogIyMjIyBgdGVtcGxhdGVgXG4gKiBIVE1MIG1hcmt1cCB0aGF0IG1heTpcbiAqICogUmVwbGFjZSB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgKGRlZmF1bHQpLlxuICogKiBSZXBsYWNlIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IGl0c2VsZiAoaWYgYHJlcGxhY2VgIGlzIHRydWUgLSBERVBSRUNBVEVEKS5cbiAqICogV3JhcCB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgKGlmIGB0cmFuc2NsdWRlYCBpcyB0cnVlKS5cbiAqXG4gKiBWYWx1ZSBtYXkgYmU6XG4gKlxuICogKiBBIHN0cmluZy4gRm9yIGV4YW1wbGUgYDxkaXYgcmVkLW9uLWhvdmVyPnt7ZGVsZXRlX3N0cn19PC9kaXY+YC5cbiAqICogQSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0d28gYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYFxuICogICBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZCByZXR1cm5zIGEgc3RyaW5nIHZhbHVlLlxuICpcbiAqXG4gKiAjIyMjIGB0ZW1wbGF0ZVVybGBcbiAqIFRoaXMgaXMgc2ltaWxhciB0byBgdGVtcGxhdGVgIGJ1dCB0aGUgdGVtcGxhdGUgaXMgbG9hZGVkIGZyb20gdGhlIHNwZWNpZmllZCBVUkwsIGFzeW5jaHJvbm91c2x5LlxuICpcbiAqIEJlY2F1c2UgdGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgdGhlIGNvbXBpbGVyIHdpbGwgc3VzcGVuZCBjb21waWxhdGlvbiBvZiBkaXJlY3RpdmVzIG9uIHRoYXQgZWxlbWVudFxuICogZm9yIGxhdGVyIHdoZW4gdGhlIHRlbXBsYXRlIGhhcyBiZWVuIHJlc29sdmVkLiAgSW4gdGhlIG1lYW50aW1lIGl0IHdpbGwgY29udGludWUgdG8gY29tcGlsZSBhbmQgbGlua1xuICogc2libGluZyBhbmQgcGFyZW50IGVsZW1lbnRzIGFzIHRob3VnaCB0aGlzIGVsZW1lbnQgaGFkIG5vdCBjb250YWluZWQgYW55IGRpcmVjdGl2ZXMuXG4gKlxuICogVGhlIGNvbXBpbGVyIGRvZXMgbm90IHN1c3BlbmQgdGhlIGVudGlyZSBjb21waWxhdGlvbiB0byB3YWl0IGZvciB0ZW1wbGF0ZXMgdG8gYmUgbG9hZGVkIGJlY2F1c2UgdGhpc1xuICogd291bGQgcmVzdWx0IGluIHRoZSB3aG9sZSBhcHAgXCJzdGFsbGluZ1wiIHVudGlsIGFsbCB0ZW1wbGF0ZXMgYXJlIGxvYWRlZCBhc3luY2hyb25vdXNseSAtIGV2ZW4gaW4gdGhlXG4gKiBjYXNlIHdoZW4gb25seSBvbmUgZGVlcGx5IG5lc3RlZCBkaXJlY3RpdmUgaGFzIGB0ZW1wbGF0ZVVybGAuXG4gKlxuICogVGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgZXZlbiBpZiB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gcHJlbG9hZGVkIGludG8gdGhlIHtAbGluayAkdGVtcGxhdGVDYWNoZX1cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgYHRlbXBsYXRlVXJsYCBhcyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIFVSTCBvciBhcyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3b1xuICogYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYCBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZCByZXR1cm5zXG4gKiBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIHVybC4gIEluIGVpdGhlciBjYXNlLCB0aGUgdGVtcGxhdGUgVVJMIGlzIHBhc3NlZCB0aHJvdWdoIHtAbGlua1xuICogJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmwgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9LlxuICpcbiAqXG4gKiAjIyMjIGByZXBsYWNlYCAoWypERVBSRUNBVEVEKiFdLCB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtYWpvciByZWxlYXNlIC0gaS5lLiB2Mi4wKVxuICogc3BlY2lmeSB3aGF0IHRoZSB0ZW1wbGF0ZSBzaG91bGQgcmVwbGFjZS4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqXG4gKiAqIGB0cnVlYCAtIHRoZSB0ZW1wbGF0ZSB3aWxsIHJlcGxhY2UgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuXG4gKiAqIGBmYWxzZWAgLSB0aGUgdGVtcGxhdGUgd2lsbCByZXBsYWNlIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAqXG4gKiBUaGUgcmVwbGFjZW1lbnQgcHJvY2VzcyBtaWdyYXRlcyBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgLyBjbGFzc2VzIGZyb20gdGhlIG9sZCBlbGVtZW50IHRvIHRoZSBuZXdcbiAqIG9uZS4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI3RlbXBsYXRlLWV4cGFuZGluZy1kaXJlY3RpdmVcbiAqIERpcmVjdGl2ZXMgR3VpZGV9IGZvciBhbiBleGFtcGxlLlxuICpcbiAqIFRoZXJlIGFyZSB2ZXJ5IGZldyBzY2VuYXJpb3Mgd2hlcmUgZWxlbWVudCByZXBsYWNlbWVudCBpcyByZXF1aXJlZCBmb3IgdGhlIGFwcGxpY2F0aW9uIGZ1bmN0aW9uLFxuICogdGhlIG1haW4gb25lIGJlaW5nIHJldXNhYmxlIGN1c3RvbSBjb21wb25lbnRzIHRoYXQgYXJlIHVzZWQgd2l0aGluIFNWRyBjb250ZXh0c1xuICogKGJlY2F1c2UgU1ZHIGRvZXNuJ3Qgd29yayB3aXRoIGN1c3RvbSBlbGVtZW50cyBpbiB0aGUgRE9NIHRyZWUpLlxuICpcbiAqICMjIyMgYHRyYW5zY2x1ZGVgXG4gKiBFeHRyYWN0IHRoZSBjb250ZW50cyBvZiB0aGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGFwcGVhcnMgYW5kIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBkaXJlY3RpdmUuXG4gKiBUaGUgY29udGVudHMgYXJlIGNvbXBpbGVkIGFuZCBwcm92aWRlZCB0byB0aGUgZGlyZWN0aXZlIGFzIGEgKip0cmFuc2NsdXNpb24gZnVuY3Rpb24qKi4gU2VlIHRoZVxuICoge0BsaW5rICRjb21waWxlI3RyYW5zY2x1c2lvbiBUcmFuc2NsdXNpb259IHNlY3Rpb24gYmVsb3cuXG4gKlxuICogVGhlcmUgYXJlIHR3byBraW5kcyBvZiB0cmFuc2NsdXNpb24gZGVwZW5kaW5nIHVwb24gd2hldGhlciB5b3Ugd2FudCB0byB0cmFuc2NsdWRlIGp1c3QgdGhlIGNvbnRlbnRzIG9mIHRoZVxuICogZGlyZWN0aXZlJ3MgZWxlbWVudCBvciB0aGUgZW50aXJlIGVsZW1lbnQ6XG4gKlxuICogKiBgdHJ1ZWAgLSB0cmFuc2NsdWRlIHRoZSBjb250ZW50IChpLmUuIHRoZSBjaGlsZCBub2Rlcykgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuXG4gKiAqIGAnZWxlbWVudCdgIC0gdHJhbnNjbHVkZSB0aGUgd2hvbGUgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgaW5jbHVkaW5nIGFueSBkaXJlY3RpdmVzIG9uIHRoaXNcbiAqICAgZWxlbWVudCB0aGF0IGRlZmluZWQgYXQgYSBsb3dlciBwcmlvcml0eSB0aGFuIHRoaXMgZGlyZWN0aXZlLiBXaGVuIHVzZWQsIHRoZSBgdGVtcGxhdGVgXG4gKiAgIHByb3BlcnR5IGlzIGlnbm9yZWQuXG4gKlxuICpcbiAqICMjIyMgYGNvbXBpbGVgXG4gKlxuICogYGBganNcbiAqICAgZnVuY3Rpb24gY29tcGlsZSh0RWxlbWVudCwgdEF0dHJzLCB0cmFuc2NsdWRlKSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBkZWFscyB3aXRoIHRyYW5zZm9ybWluZyB0aGUgdGVtcGxhdGUgRE9NLiBTaW5jZSBtb3N0IGRpcmVjdGl2ZXMgZG8gbm90IGRvXG4gKiB0ZW1wbGF0ZSB0cmFuc2Zvcm1hdGlvbiwgaXQgaXMgbm90IHVzZWQgb2Z0ZW4uIFRoZSBjb21waWxlIGZ1bmN0aW9uIHRha2VzIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuICpcbiAqICAgKiBgdEVsZW1lbnRgIC0gdGVtcGxhdGUgZWxlbWVudCAtIFRoZSBlbGVtZW50IHdoZXJlIHRoZSBkaXJlY3RpdmUgaGFzIGJlZW4gZGVjbGFyZWQuIEl0IGlzXG4gKiAgICAgc2FmZSB0byBkbyB0ZW1wbGF0ZSB0cmFuc2Zvcm1hdGlvbiBvbiB0aGUgZWxlbWVudCBhbmQgY2hpbGQgZWxlbWVudHMgb25seS5cbiAqXG4gKiAgICogYHRBdHRyc2AgLSB0ZW1wbGF0ZSBhdHRyaWJ1dGVzIC0gTm9ybWFsaXplZCBsaXN0IG9mIGF0dHJpYnV0ZXMgZGVjbGFyZWQgb24gdGhpcyBlbGVtZW50IHNoYXJlZFxuICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBjb21waWxlIGZ1bmN0aW9ucy5cbiAqXG4gKiAgICogYHRyYW5zY2x1ZGVgIC0gIFsqREVQUkVDQVRFRCohXSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbjogYGZ1bmN0aW9uKHNjb3BlLCBjbG9uZUxpbmtpbmdGbilgXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGUgdGVtcGxhdGUgaW5zdGFuY2UgYW5kIHRoZSBsaW5rIGluc3RhbmNlIG1heSBiZSBkaWZmZXJlbnQgb2JqZWN0cyBpZiB0aGUgdGVtcGxhdGUgaGFzXG4gKiBiZWVuIGNsb25lZC4gRm9yIHRoaXMgcmVhc29uIGl0IGlzICoqbm90Kiogc2FmZSB0byBkbyBhbnl0aGluZyBvdGhlciB0aGFuIERPTSB0cmFuc2Zvcm1hdGlvbnMgdGhhdFxuICogYXBwbHkgdG8gYWxsIGNsb25lZCBET00gbm9kZXMgd2l0aGluIHRoZSBjb21waWxlIGZ1bmN0aW9uLiBTcGVjaWZpY2FsbHksIERPTSBsaXN0ZW5lciByZWdpc3RyYXRpb25cbiAqIHNob3VsZCBiZSBkb25lIGluIGEgbGlua2luZyBmdW5jdGlvbiByYXRoZXIgdGhhbiBpbiBhIGNvbXBpbGUgZnVuY3Rpb24uXG4gKiA8L2Rpdj5cblxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBjYW5ub3QgaGFuZGxlIGRpcmVjdGl2ZXMgdGhhdCByZWN1cnNpdmVseSB1c2UgdGhlbXNlbHZlcyBpbiB0aGVpclxuICogb3duIHRlbXBsYXRlcyBvciBjb21waWxlIGZ1bmN0aW9ucy4gQ29tcGlsaW5nIHRoZXNlIGRpcmVjdGl2ZXMgcmVzdWx0cyBpbiBhbiBpbmZpbml0ZSBsb29wIGFuZCBhXG4gKiBzdGFjayBvdmVyZmxvdyBlcnJvcnMuXG4gKlxuICogVGhpcyBjYW4gYmUgYXZvaWRlZCBieSBtYW51YWxseSB1c2luZyAkY29tcGlsZSBpbiB0aGUgcG9zdExpbmsgZnVuY3Rpb24gdG8gaW1wZXJhdGl2ZWx5IGNvbXBpbGVcbiAqIGEgZGlyZWN0aXZlJ3MgdGVtcGxhdGUgaW5zdGVhZCBvZiByZWx5aW5nIG9uIGF1dG9tYXRpYyB0ZW1wbGF0ZSBjb21waWxhdGlvbiB2aWEgYHRlbXBsYXRlYCBvclxuICogYHRlbXBsYXRlVXJsYCBkZWNsYXJhdGlvbiBvciBtYW51YWwgY29tcGlsYXRpb24gaW5zaWRlIHRoZSBjb21waWxlIGZ1bmN0aW9uLlxuICogPC9kaXY+XG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICogKipOb3RlOioqIFRoZSBgdHJhbnNjbHVkZWAgZnVuY3Rpb24gdGhhdCBpcyBwYXNzZWQgdG8gdGhlIGNvbXBpbGUgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgYXMgaXRcbiAqICAgZS5nLiBkb2VzIG5vdCBrbm93IGFib3V0IHRoZSByaWdodCBvdXRlciBzY29wZS4gUGxlYXNlIHVzZSB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiB0aGF0IGlzIHBhc3NlZFxuICogICB0byB0aGUgbGluayBmdW5jdGlvbiBpbnN0ZWFkLlxuICogPC9kaXY+XG5cbiAqIEEgY29tcGlsZSBmdW5jdGlvbiBjYW4gaGF2ZSBhIHJldHVybiB2YWx1ZSB3aGljaCBjYW4gYmUgZWl0aGVyIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0LlxuICpcbiAqICogcmV0dXJuaW5nIGEgKHBvc3QtbGluaykgZnVuY3Rpb24gLSBpcyBlcXVpdmFsZW50IHRvIHJlZ2lzdGVyaW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHZpYSB0aGVcbiAqICAgYGxpbmtgIHByb3BlcnR5IG9mIHRoZSBjb25maWcgb2JqZWN0IHdoZW4gdGhlIGNvbXBpbGUgZnVuY3Rpb24gaXMgZW1wdHkuXG4gKlxuICogKiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggZnVuY3Rpb24ocykgcmVnaXN0ZXJlZCB2aWEgYHByZWAgYW5kIGBwb3N0YCBwcm9wZXJ0aWVzIC0gYWxsb3dzIHlvdSB0b1xuICogICBjb250cm9sIHdoZW4gYSBsaW5raW5nIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlLiBTZWUgaW5mbyBhYm91dFxuICogICBwcmUtbGlua2luZyBhbmQgcG9zdC1saW5raW5nIGZ1bmN0aW9ucyBiZWxvdy5cbiAqXG4gKlxuICogIyMjIyBgbGlua2BcbiAqIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBvbmx5IGlmIHRoZSBgY29tcGlsZWAgcHJvcGVydHkgaXMgbm90IGRlZmluZWQuXG4gKlxuICogYGBganNcbiAqICAgZnVuY3Rpb24gbGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlciwgdHJhbnNjbHVkZUZuKSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgbGluayBmdW5jdGlvbiBpcyByZXNwb25zaWJsZSBmb3IgcmVnaXN0ZXJpbmcgRE9NIGxpc3RlbmVycyBhcyB3ZWxsIGFzIHVwZGF0aW5nIHRoZSBET00uIEl0IGlzXG4gKiBleGVjdXRlZCBhZnRlciB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gY2xvbmVkLiBUaGlzIGlzIHdoZXJlIG1vc3Qgb2YgdGhlIGRpcmVjdGl2ZSBsb2dpYyB3aWxsIGJlXG4gKiBwdXQuXG4gKlxuICogICAqIGBzY29wZWAgLSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gLSBUaGUgc2NvcGUgdG8gYmUgdXNlZCBieSB0aGVcbiAqICAgICBkaXJlY3RpdmUgZm9yIHJlZ2lzdGVyaW5nIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVzfS5cbiAqXG4gKiAgICogYGlFbGVtZW50YCAtIGluc3RhbmNlIGVsZW1lbnQgLSBUaGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGlzIHRvIGJlIHVzZWQuIEl0IGlzIHNhZmUgdG9cbiAqICAgICBtYW5pcHVsYXRlIHRoZSBjaGlsZHJlbiBvZiB0aGUgZWxlbWVudCBvbmx5IGluIGBwb3N0TGlua2AgZnVuY3Rpb24gc2luY2UgdGhlIGNoaWxkcmVuIGhhdmVcbiAqICAgICBhbHJlYWR5IGJlZW4gbGlua2VkLlxuICpcbiAqICAgKiBgaUF0dHJzYCAtIGluc3RhbmNlIGF0dHJpYnV0ZXMgLSBOb3JtYWxpemVkIGxpc3Qgb2YgYXR0cmlidXRlcyBkZWNsYXJlZCBvbiB0aGlzIGVsZW1lbnQgc2hhcmVkXG4gKiAgICAgYmV0d2VlbiBhbGwgZGlyZWN0aXZlIGxpbmtpbmcgZnVuY3Rpb25zLlxuICpcbiAqICAgKiBgY29udHJvbGxlcmAgLSB0aGUgZGlyZWN0aXZlJ3MgcmVxdWlyZWQgY29udHJvbGxlciBpbnN0YW5jZShzKSAtIEluc3RhbmNlcyBhcmUgc2hhcmVkXG4gKiAgICAgYW1vbmcgYWxsIGRpcmVjdGl2ZXMsIHdoaWNoIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byB1c2UgdGhlIGNvbnRyb2xsZXJzIGFzIGEgY29tbXVuaWNhdGlvblxuICogICAgIGNoYW5uZWwuIFRoZSBleGFjdCB2YWx1ZSBkZXBlbmRzIG9uIHRoZSBkaXJlY3RpdmUncyBgcmVxdWlyZWAgcHJvcGVydHk6XG4gKiAgICAgICAqIG5vIGNvbnRyb2xsZXIocykgcmVxdWlyZWQ6IHRoZSBkaXJlY3RpdmUncyBvd24gY29udHJvbGxlciwgb3IgYHVuZGVmaW5lZGAgaWYgaXQgZG9lc24ndCBoYXZlIG9uZVxuICogICAgICAgKiBgc3RyaW5nYDogdGhlIGNvbnRyb2xsZXIgaW5zdGFuY2VcbiAqICAgICAgICogYGFycmF5YDogYXJyYXkgb2YgY29udHJvbGxlciBpbnN0YW5jZXNcbiAqXG4gKiAgICAgSWYgYSByZXF1aXJlZCBjb250cm9sbGVyIGNhbm5vdCBiZSBmb3VuZCwgYW5kIGl0IGlzIG9wdGlvbmFsLCB0aGUgaW5zdGFuY2UgaXMgYG51bGxgLFxuICogICAgIG90aGVyd2lzZSB0aGUge0BsaW5rIGVycm9yOiRjb21waWxlOmN0cmVxIE1pc3NpbmcgUmVxdWlyZWQgQ29udHJvbGxlcn0gZXJyb3IgaXMgdGhyb3duLlxuICpcbiAqICAgICBOb3RlIHRoYXQgeW91IGNhbiBhbHNvIHJlcXVpcmUgdGhlIGRpcmVjdGl2ZSdzIG93biBjb250cm9sbGVyIC0gaXQgd2lsbCBiZSBtYWRlIGF2YWlsYWJsZSBsaWtlXG4gKiAgICAgYW55IG90aGVyIGNvbnRyb2xsZXIuXG4gKlxuICogICAqIGB0cmFuc2NsdWRlRm5gIC0gQSB0cmFuc2NsdWRlIGxpbmtpbmcgZnVuY3Rpb24gcHJlLWJvdW5kIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZS5cbiAqICAgICBUaGlzIGlzIHRoZSBzYW1lIGFzIHRoZSBgJHRyYW5zY2x1ZGVgXG4gKiAgICAgcGFyYW1ldGVyIG9mIGRpcmVjdGl2ZSBjb250cm9sbGVycywgc2VlIHRoZXJlIGZvciBkZXRhaWxzLlxuICogICAgIGBmdW5jdGlvbihbc2NvcGVdLCBjbG9uZUxpbmtpbmdGbiwgZnV0dXJlUGFyZW50RWxlbWVudClgLlxuICpcbiAqICMjIyMgUHJlLWxpbmtpbmcgZnVuY3Rpb25cbiAqXG4gKiBFeGVjdXRlZCBiZWZvcmUgdGhlIGNoaWxkIGVsZW1lbnRzIGFyZSBsaW5rZWQuIE5vdCBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBzaW5jZSB0aGVcbiAqIGNvbXBpbGVyIGxpbmtpbmcgZnVuY3Rpb24gd2lsbCBmYWlsIHRvIGxvY2F0ZSB0aGUgY29ycmVjdCBlbGVtZW50cyBmb3IgbGlua2luZy5cbiAqXG4gKiAjIyMjIFBvc3QtbGlua2luZyBmdW5jdGlvblxuICpcbiAqIEV4ZWN1dGVkIGFmdGVyIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgbGlua2VkLlxuICpcbiAqIE5vdGUgdGhhdCBjaGlsZCBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYHRlbXBsYXRlVXJsYCBkaXJlY3RpdmVzIHdpbGwgbm90IGhhdmUgYmVlbiBjb21waWxlZFxuICogYW5kIGxpbmtlZCBzaW5jZSB0aGV5IGFyZSB3YWl0aW5nIGZvciB0aGVpciB0ZW1wbGF0ZSB0byBsb2FkIGFzeW5jaHJvbm91c2x5IGFuZCB0aGVpciBvd25cbiAqIGNvbXBpbGF0aW9uIGFuZCBsaW5raW5nIGhhcyBiZWVuIHN1c3BlbmRlZCB1bnRpbCB0aGF0IG9jY3Vycy5cbiAqXG4gKiBJdCBpcyBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBpbiB0aGUgcG9zdC1saW5raW5nIGZ1bmN0aW9uIG9uIGVsZW1lbnRzIHRoYXQgYXJlIG5vdCB3YWl0aW5nXG4gKiBmb3IgdGhlaXIgYXN5bmMgdGVtcGxhdGVzIHRvIGJlIHJlc29sdmVkLlxuICpcbiAqXG4gKiAjIyMgVHJhbnNjbHVzaW9uXG4gKlxuICogVHJhbnNjbHVzaW9uIGlzIHRoZSBwcm9jZXNzIG9mIGV4dHJhY3RpbmcgYSBjb2xsZWN0aW9uIG9mIERPTSBlbGVtZW50cyBmcm9tIG9uZSBwYXJ0IG9mIHRoZSBET00gYW5kXG4gKiBjb3B5aW5nIHRoZW0gdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBET00sIHdoaWxlIG1haW50YWluaW5nIHRoZWlyIGNvbm5lY3Rpb24gdG8gdGhlIG9yaWdpbmFsIEFuZ3VsYXJKU1xuICogc2NvcGUgZnJvbSB3aGVyZSB0aGV5IHdlcmUgdGFrZW4uXG4gKlxuICogVHJhbnNjbHVzaW9uIGlzIHVzZWQgKG9mdGVuIHdpdGgge0BsaW5rIG5nVHJhbnNjbHVkZX0pIHRvIGluc2VydCB0aGVcbiAqIG9yaWdpbmFsIGNvbnRlbnRzIG9mIGEgZGlyZWN0aXZlJ3MgZWxlbWVudCBpbnRvIGEgc3BlY2lmaWVkIHBsYWNlIGluIHRoZSB0ZW1wbGF0ZSBvZiB0aGUgZGlyZWN0aXZlLlxuICogVGhlIGJlbmVmaXQgb2YgdHJhbnNjbHVzaW9uLCBvdmVyIHNpbXBseSBtb3ZpbmcgdGhlIERPTSBlbGVtZW50cyBtYW51YWxseSwgaXMgdGhhdCB0aGUgdHJhbnNjbHVkZWRcbiAqIGNvbnRlbnQgaGFzIGFjY2VzcyB0byB0aGUgcHJvcGVydGllcyBvbiB0aGUgc2NvcGUgZnJvbSB3aGljaCBpdCB3YXMgdGFrZW4sIGV2ZW4gaWYgdGhlIGRpcmVjdGl2ZVxuICogaGFzIGlzb2xhdGVkIHNjb3BlLlxuICogU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI2NyZWF0aW5nLWEtZGlyZWN0aXZlLXRoYXQtd3JhcHMtb3RoZXItZWxlbWVudHMgRGlyZWN0aXZlcyBHdWlkZX0uXG4gKlxuICogVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgdGhlIHdpZGdldCB0byBoYXZlIHByaXZhdGUgc3RhdGUgZm9yIGl0cyB0ZW1wbGF0ZSwgd2hpbGUgdGhlIHRyYW5zY2x1ZGVkXG4gKiBjb250ZW50IGhhcyBhY2Nlc3MgdG8gaXRzIG9yaWdpbmF0aW5nIHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogV2hlbiB0ZXN0aW5nIGFuIGVsZW1lbnQgdHJhbnNjbHVkZSBkaXJlY3RpdmUgeW91IG11c3Qgbm90IHBsYWNlIHRoZSBkaXJlY3RpdmUgYXQgdGhlIHJvb3Qgb2YgdGhlXG4gKiBET00gZnJhZ21lbnQgdGhhdCBpcyBiZWluZyBjb21waWxlZC4gU2VlIHtAbGluayBndWlkZS91bml0LXRlc3RpbmcjdGVzdGluZy10cmFuc2NsdXNpb24tZGlyZWN0aXZlc1xuICogVGVzdGluZyBUcmFuc2NsdXNpb24gRGlyZWN0aXZlc30uXG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyMjIFRyYW5zY2x1c2lvbiBGdW5jdGlvbnNcbiAqXG4gKiBXaGVuIGEgZGlyZWN0aXZlIHJlcXVlc3RzIHRyYW5zY2x1c2lvbiwgdGhlIGNvbXBpbGVyIGV4dHJhY3RzIGl0cyBjb250ZW50cyBhbmQgcHJvdmlkZXMgYSAqKnRyYW5zY2x1c2lvblxuICogZnVuY3Rpb24qKiB0byB0aGUgZGlyZWN0aXZlJ3MgYGxpbmtgIGZ1bmN0aW9uIGFuZCBgY29udHJvbGxlcmAuIFRoaXMgdHJhbnNjbHVzaW9uIGZ1bmN0aW9uIGlzIGEgc3BlY2lhbFxuICogKipsaW5raW5nIGZ1bmN0aW9uKiogdGhhdCB3aWxsIHJldHVybiB0aGUgY29tcGlsZWQgY29udGVudHMgbGlua2VkIHRvIGEgbmV3IHRyYW5zY2x1c2lvbiBzY29wZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogSWYgeW91IGFyZSBqdXN0IHVzaW5nIHtAbGluayBuZ1RyYW5zY2x1ZGV9IHRoZW4geW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhpcyBmdW5jdGlvbiwgc2luY2VcbiAqIG5nVHJhbnNjbHVkZSB3aWxsIGRlYWwgd2l0aCBpdCBmb3IgdXMuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJZiB5b3Ugd2FudCB0byBtYW51YWxseSBjb250cm9sIHRoZSBpbnNlcnRpb24gYW5kIHJlbW92YWwgb2YgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaW4geW91ciBkaXJlY3RpdmVcbiAqIHRoZW4geW91IG11c3QgdXNlIHRoaXMgdHJhbnNjbHVkZSBmdW5jdGlvbi4gV2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1ZGUgZnVuY3Rpb24gaXQgcmV0dXJucyBhIGEganFMaXRlL0pRdWVyeVxuICogb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGNvbXBpbGVkIERPTSwgd2hpY2ggaXMgbGlua2VkIHRvIHRoZSBjb3JyZWN0IHRyYW5zY2x1c2lvbiBzY29wZS5cbiAqXG4gKiBXaGVuIHlvdSBjYWxsIGEgdHJhbnNjbHVzaW9uIGZ1bmN0aW9uIHlvdSBjYW4gcGFzcyBpbiBhICoqY2xvbmUgYXR0YWNoIGZ1bmN0aW9uKiouIFRoaXMgZnVuY3Rpb24gYWNjZXB0c1xuICogdHdvIHBhcmFtZXRlcnMsIGBmdW5jdGlvbihjbG9uZSwgc2NvcGUpIHsgLi4uIH1gLCB3aGVyZSB0aGUgYGNsb25lYCBpcyBhIGZyZXNoIGNvbXBpbGVkIGNvcHkgb2YgeW91ciB0cmFuc2NsdWRlZFxuICogY29udGVudCBhbmQgdGhlIGBzY29wZWAgaXMgdGhlIG5ld2x5IGNyZWF0ZWQgdHJhbnNjbHVzaW9uIHNjb3BlLCB0byB3aGljaCB0aGUgY2xvbmUgaXMgYm91bmQuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqQmVzdCBQcmFjdGljZSoqOiBBbHdheXMgcHJvdmlkZSBhIGBjbG9uZUZuYCAoY2xvbmUgYXR0YWNoIGZ1bmN0aW9uKSB3aGVuIHlvdSBjYWxsIGEgdHJhbnNsdWRlIGZ1bmN0aW9uXG4gKiBzaW5jZSB5b3UgdGhlbiBnZXQgYSBmcmVzaCBjbG9uZSBvZiB0aGUgb3JpZ2luYWwgRE9NIGFuZCBhbHNvIGhhdmUgYWNjZXNzIHRvIHRoZSBuZXcgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICogPC9kaXY+XG4gKlxuICogSXQgaXMgbm9ybWFsIHByYWN0aWNlIHRvIGF0dGFjaCB5b3VyIHRyYW5zY2x1ZGVkIGNvbnRlbnQgKGBjbG9uZWApIHRvIHRoZSBET00gaW5zaWRlIHlvdXIgKipjbG9uZVxuICogYXR0YWNoIGZ1bmN0aW9uKio6XG4gKlxuICogYGBganNcbiAqIHZhciB0cmFuc2NsdWRlZENvbnRlbnQsIHRyYW5zY2x1c2lvblNjb3BlO1xuICpcbiAqICR0cmFuc2NsdWRlKGZ1bmN0aW9uKGNsb25lLCBzY29wZSkge1xuICogICBlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gKiAgIHRyYW5zY2x1ZGVkQ29udGVudCA9IGNsb25lO1xuICogICB0cmFuc2NsdXNpb25TY29wZSA9IHNjb3BlO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBMYXRlciwgaWYgeW91IHdhbnQgdG8gcmVtb3ZlIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGZyb20geW91ciBET00gdGhlbiB5b3Ugc2hvdWxkIGFsc28gZGVzdHJveSB0aGVcbiAqIGFzc29jaWF0ZWQgdHJhbnNjbHVzaW9uIHNjb3BlOlxuICpcbiAqIGBgYGpzXG4gKiB0cmFuc2NsdWRlZENvbnRlbnQucmVtb3ZlKCk7XG4gKiB0cmFuc2NsdXNpb25TY29wZS4kZGVzdHJveSgpO1xuICogYGBgXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqQmVzdCBQcmFjdGljZSoqOiBpZiB5b3UgaW50ZW5kIHRvIGFkZCBhbmQgcmVtb3ZlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgbWFudWFsbHkgaW4geW91ciBkaXJlY3RpdmVcbiAqIChieSBjYWxsaW5nIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIHRvIGdldCB0aGUgRE9NIGFuZCBjYWxsaW5nIGBlbGVtZW50LnJlbW92ZSgpYCB0byByZW1vdmUgaXQpLFxuICogdGhlbiB5b3UgYXJlIGFsc28gcmVzcG9uc2libGUgZm9yIGNhbGxpbmcgYCRkZXN0cm95YCBvbiB0aGUgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICogPC9kaXY+XG4gKlxuICogVGhlIGJ1aWx0LWluIERPTSBtYW5pcHVsYXRpb24gZGlyZWN0aXZlcywgc3VjaCBhcyB7QGxpbmsgbmdJZn0sIHtAbGluayBuZ1N3aXRjaH0gYW5kIHtAbGluayBuZ1JlcGVhdH1cbiAqIGF1dG9tYXRpY2FsbHkgZGVzdHJveSB0aGVpciB0cmFuc2x1ZGVkIGNsb25lcyBhcyBuZWNlc3Nhcnkgc28geW91IGRvIG5vdCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoaXMgaWZcbiAqIHlvdSBhcmUgc2ltcGx5IHVzaW5nIHtAbGluayBuZ1RyYW5zY2x1ZGV9IHRvIGluamVjdCB0aGUgdHJhbnNjbHVzaW9uIGludG8geW91ciBkaXJlY3RpdmUuXG4gKlxuICpcbiAqICMjIyMgVHJhbnNjbHVzaW9uIFNjb3Blc1xuICpcbiAqIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGl0IHJldHVybnMgYSBET00gZnJhZ21lbnQgdGhhdCBpcyBwcmUtYm91bmQgdG8gYSAqKnRyYW5zY2x1c2lvblxuICogc2NvcGUqKi4gVGhpcyBzY29wZSBpcyBzcGVjaWFsLCBpbiB0aGF0IGl0IGlzIGEgY2hpbGQgb2YgdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIChhbmQgc28gZ2V0cyBkZXN0cm95ZWRcbiAqIHdoZW4gdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIGdldHMgZGVzdHJveWVkKSBidXQgaXQgaW5oZXJpdHMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHNjb3BlIGZyb20gd2hpY2ggaXRcbiAqIHdhcyB0YWtlbi5cbiAqXG4gKiBGb3IgZXhhbXBsZSBjb25zaWRlciBhIGRpcmVjdGl2ZSB0aGF0IHVzZXMgdHJhbnNjbHVzaW9uIGFuZCBpc29sYXRlZCBzY29wZS4gVGhlIERPTSBoaWVyYXJjaHkgbWlnaHQgbG9va1xuICogbGlrZSB0aGlzOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctYXBwPlxuICogICA8ZGl2IGlzb2xhdGU+XG4gKiAgICAgPGRpdiB0cmFuc2NsdXNpb24+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBUaGUgYCRwYXJlbnRgIHNjb3BlIGhpZXJhcmNoeSB3aWxsIGxvb2sgbGlrZSB0aGlzOlxuICpcbiAgIGBgYFxuICAgLSAkcm9vdFNjb3BlXG4gICAgIC0gaXNvbGF0ZVxuICAgICAgIC0gdHJhbnNjbHVzaW9uXG4gICBgYGBcbiAqXG4gKiBidXQgdGhlIHNjb3BlcyB3aWxsIGluaGVyaXQgcHJvdG90eXBpY2FsbHkgZnJvbSBkaWZmZXJlbnQgc2NvcGVzIHRvIHRoZWlyIGAkcGFyZW50YC5cbiAqXG4gICBgYGBcbiAgIC0gJHJvb3RTY29wZVxuICAgICAtIHRyYW5zY2x1c2lvblxuICAgLSBpc29sYXRlXG4gICBgYGBcbiAqXG4gKlxuICogIyMjIEF0dHJpYnV0ZXNcbiAqXG4gKiBUaGUge0BsaW5rIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIEF0dHJpYnV0ZXN9IG9iamVjdCAtIHBhc3NlZCBhcyBhIHBhcmFtZXRlciBpbiB0aGVcbiAqIGBsaW5rKClgIG9yIGBjb21waWxlKClgIGZ1bmN0aW9ucy4gSXQgaGFzIGEgdmFyaWV0eSBvZiB1c2VzLlxuICpcbiAqIGFjY2Vzc2luZyAqTm9ybWFsaXplZCBhdHRyaWJ1dGUgbmFtZXM6KlxuICogRGlyZWN0aXZlcyBsaWtlICduZ0JpbmQnIGNhbiBiZSBleHByZXNzZWQgaW4gbWFueSB3YXlzOiAnbmc6YmluZCcsIGBkYXRhLW5nLWJpbmRgLCBvciAneC1uZy1iaW5kJy5cbiAqIHRoZSBhdHRyaWJ1dGVzIG9iamVjdCBhbGxvd3MgZm9yIG5vcm1hbGl6ZWQgYWNjZXNzIHRvXG4gKiAgIHRoZSBhdHRyaWJ1dGVzLlxuICpcbiAqICogKkRpcmVjdGl2ZSBpbnRlci1jb21tdW5pY2F0aW9uOiogQWxsIGRpcmVjdGl2ZXMgc2hhcmUgdGhlIHNhbWUgaW5zdGFuY2Ugb2YgdGhlIGF0dHJpYnV0ZXNcbiAqICAgb2JqZWN0IHdoaWNoIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byB1c2UgdGhlIGF0dHJpYnV0ZXMgb2JqZWN0IGFzIGludGVyIGRpcmVjdGl2ZVxuICogICBjb21tdW5pY2F0aW9uLlxuICpcbiAqICogKlN1cHBvcnRzIGludGVycG9sYXRpb246KiBJbnRlcnBvbGF0aW9uIGF0dHJpYnV0ZXMgYXJlIGFzc2lnbmVkIHRvIHRoZSBhdHRyaWJ1dGUgb2JqZWN0XG4gKiAgIGFsbG93aW5nIG90aGVyIGRpcmVjdGl2ZXMgdG8gcmVhZCB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlLlxuICpcbiAqICogKk9ic2VydmluZyBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlczoqIFVzZSBgJG9ic2VydmVgIHRvIG9ic2VydmUgdGhlIHZhbHVlIGNoYW5nZXMgb2YgYXR0cmlidXRlc1xuICogICB0aGF0IGNvbnRhaW4gaW50ZXJwb2xhdGlvbiAoZS5nLiBgc3JjPVwie3tiYXJ9fVwiYCkuIE5vdCBvbmx5IGlzIHRoaXMgdmVyeSBlZmZpY2llbnQgYnV0IGl0J3MgYWxzb1xuICogICB0aGUgb25seSB3YXkgdG8gZWFzaWx5IGdldCB0aGUgYWN0dWFsIHZhbHVlIGJlY2F1c2UgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlIHRoZSBpbnRlcnBvbGF0aW9uXG4gKiAgIGhhc24ndCBiZWVuIGV2YWx1YXRlZCB5ZXQgYW5kIHNvIHRoZSB2YWx1ZSBpcyBhdCB0aGlzIHRpbWUgc2V0IHRvIGB1bmRlZmluZWRgLlxuICpcbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiBsaW5raW5nRm4oc2NvcGUsIGVsbSwgYXR0cnMsIGN0cmwpIHtcbiAqICAgLy8gZ2V0IHRoZSBhdHRyaWJ1dGUgdmFsdWVcbiAqICAgY29uc29sZS5sb2coYXR0cnMubmdNb2RlbCk7XG4gKlxuICogICAvLyBjaGFuZ2UgdGhlIGF0dHJpYnV0ZVxuICogICBhdHRycy4kc2V0KCduZ01vZGVsJywgJ25ldyB2YWx1ZScpO1xuICpcbiAqICAgLy8gb2JzZXJ2ZSBjaGFuZ2VzIHRvIGludGVycG9sYXRlZCBhdHRyaWJ1dGVcbiAqICAgYXR0cnMuJG9ic2VydmUoJ25nTW9kZWwnLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgIGNvbnNvbGUubG9nKCduZ01vZGVsIGhhcyBjaGFuZ2VkIHZhbHVlIHRvICcgKyB2YWx1ZSk7XG4gKiAgIH0pO1xuICogfVxuICogYGBgXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGUqKjogVHlwaWNhbGx5IGRpcmVjdGl2ZXMgYXJlIHJlZ2lzdGVyZWQgd2l0aCBgbW9kdWxlLmRpcmVjdGl2ZWAuIFRoZSBleGFtcGxlIGJlbG93IGlzXG4gKiB0byBpbGx1c3RyYXRlIGhvdyBgJGNvbXBpbGVgIHdvcmtzLlxuICogPC9kaXY+XG4gKlxuIDxleGFtcGxlIG1vZHVsZT1cImNvbXBpbGVFeGFtcGxlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgIDxzY3JpcHQ+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnY29tcGlsZUV4YW1wbGUnLCBbXSwgZnVuY3Rpb24oJGNvbXBpbGVQcm92aWRlcikge1xuICAgICAgICAvLyBjb25maWd1cmUgbmV3ICdjb21waWxlJyBkaXJlY3RpdmUgYnkgcGFzc2luZyBhIGRpcmVjdGl2ZVxuICAgICAgICAvLyBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBpbmplY3RzIHRoZSAnJGNvbXBpbGUnXG4gICAgICAgICRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlKCdjb21waWxlJywgZnVuY3Rpb24oJGNvbXBpbGUpIHtcbiAgICAgICAgICAvLyBkaXJlY3RpdmUgZmFjdG9yeSBjcmVhdGVzIGEgbGluayBmdW5jdGlvblxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICAgZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAgLy8gd2F0Y2ggdGhlICdjb21waWxlJyBleHByZXNzaW9uIGZvciBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiRldmFsKGF0dHJzLmNvbXBpbGUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlICdjb21waWxlJyBleHByZXNzaW9uIGNoYW5nZXNcbiAgICAgICAgICAgICAgICAvLyBhc3NpZ24gaXQgaW50byB0aGUgY3VycmVudCBET01cbiAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwodmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZSB0aGUgbmV3IERPTSBhbmQgbGluayBpdCB0byB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgIC8vIHNjb3BlLlxuICAgICAgICAgICAgICAgIC8vIE5PVEU6IHdlIG9ubHkgY29tcGlsZSAuY2hpbGROb2RlcyBzbyB0aGF0XG4gICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgZ2V0IGludG8gaW5maW5pdGUgbG9vcCBjb21waWxpbmcgb3Vyc2VsdmVzXG4gICAgICAgICAgICAgICAgJGNvbXBpbGUoZWxlbWVudC5jb250ZW50cygpKShzY29wZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNvbnRyb2xsZXIoJ0dyZWV0ZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLm5hbWUgPSAnQW5ndWxhcic7XG4gICAgICAgICRzY29wZS5odG1sID0gJ0hlbGxvIHt7bmFtZX19JztcbiAgICAgIH1dKTtcbiAgICA8L3NjcmlwdD5cbiAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJHcmVldGVyQ29udHJvbGxlclwiPlxuICAgICAgPGlucHV0IG5nLW1vZGVsPVwibmFtZVwiPiA8YnIvPlxuICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPVwiaHRtbFwiPjwvdGV4dGFyZWE+IDxici8+XG4gICAgICA8ZGl2IGNvbXBpbGU9XCJodG1sXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgIGl0KCdzaG91bGQgYXV0byBjb21waWxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgdmFyIHRleHRhcmVhID0gJCgndGV4dGFyZWEnKTtcbiAgICAgICB2YXIgb3V0cHV0ID0gJCgnZGl2W2NvbXBpbGVdJyk7XG4gICAgICAgLy8gVGhlIGluaXRpYWwgc3RhdGUgcmVhZHMgJ0hlbGxvIEFuZ3VsYXInLlxuICAgICAgIGV4cGVjdChvdXRwdXQuZ2V0VGV4dCgpKS50b0JlKCdIZWxsbyBBbmd1bGFyJyk7XG4gICAgICAgdGV4dGFyZWEuY2xlYXIoKTtcbiAgICAgICB0ZXh0YXJlYS5zZW5kS2V5cygne3tuYW1lfX0hJyk7XG4gICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQmUoJ0FuZ3VsYXIhJyk7XG4gICAgIH0pO1xuICAgPC9maWxlPlxuIDwvZXhhbXBsZT5cblxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgdG8gY29tcGlsZSBpbnRvIGEgdGVtcGxhdGUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZSBmdW5jdGlvbiBhdmFpbGFibGUgdG8gZGlyZWN0aXZlcyAtIERFUFJFQ0FURUQuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICogKipOb3RlOioqIFBhc3NpbmcgYSBgdHJhbnNjbHVkZWAgZnVuY3Rpb24gdG8gdGhlICRjb21waWxlIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQsIGFzIGl0XG4gKiAgIGUuZy4gd2lsbCBub3QgdXNlIHRoZSByaWdodCBvdXRlciBzY29wZS4gUGxlYXNlIHBhc3MgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gYXMgYVxuICogICBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIHRvIHRoZSBsaW5rIGZ1bmN0aW9uIGluc3RlYWQuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4UHJpb3JpdHkgb25seSBhcHBseSBkaXJlY3RpdmVzIGxvd2VyIHRoYW4gZ2l2ZW4gcHJpb3JpdHkgKE9ubHkgZWZmZWN0cyB0aGVcbiAqICAgICAgICAgICAgICAgICByb290IGVsZW1lbnQocyksIG5vdCB0aGVpciBjaGlsZHJlbilcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzY29wZSwgY2xvbmVBdHRhY2hGbj0sIG9wdGlvbnM9KX0gYSBsaW5rIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gYmluZCB0ZW1wbGF0ZVxuICogKGEgRE9NIGVsZW1lbnQvdHJlZSkgdG8gYSBzY29wZS4gV2hlcmU6XG4gKlxuICogICogYHNjb3BlYCAtIEEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgU2NvcGV9IHRvIGJpbmQgdG8uXG4gKiAgKiBgY2xvbmVBdHRhY2hGbmAgLSBJZiBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGxpbmsgZnVuY3Rpb24gd2lsbCBjbG9uZSB0aGVcbiAqICBgdGVtcGxhdGVgIGFuZCBjYWxsIHRoZSBgY2xvbmVBdHRhY2hGbmAgZnVuY3Rpb24gYWxsb3dpbmcgdGhlIGNhbGxlciB0byBhdHRhY2ggdGhlXG4gKiAgY2xvbmVkIGVsZW1lbnRzIHRvIHRoZSBET00gZG9jdW1lbnQgYXQgdGhlIGFwcHJvcHJpYXRlIHBsYWNlLiBUaGUgYGNsb25lQXR0YWNoRm5gIGlzXG4gKiAgY2FsbGVkIGFzOiA8YnIvPiBgY2xvbmVBdHRhY2hGbihjbG9uZWRFbGVtZW50LCBzY29wZSlgIHdoZXJlOlxuICpcbiAqICAgICAgKiBgY2xvbmVkRWxlbWVudGAgLSBpcyBhIGNsb25lIG9mIHRoZSBvcmlnaW5hbCBgZWxlbWVudGAgcGFzc2VkIGludG8gdGhlIGNvbXBpbGVyLlxuICogICAgICAqIGBzY29wZWAgLSBpcyB0aGUgY3VycmVudCBzY29wZSB3aXRoIHdoaWNoIHRoZSBsaW5raW5nIGZ1bmN0aW9uIGlzIHdvcmtpbmcgd2l0aC5cbiAqXG4gKiAgKiBgb3B0aW9uc2AgLSBBbiBvcHRpb25hbCBvYmplY3QgaGFzaCB3aXRoIGxpbmtpbmcgb3B0aW9ucy4gSWYgYG9wdGlvbnNgIGlzIHByb3ZpZGVkLCB0aGVuIHRoZSBmb2xsb3dpbmdcbiAqICBrZXlzIG1heSBiZSB1c2VkIHRvIGNvbnRyb2wgbGlua2luZyBiZWhhdmlvcjpcbiAqXG4gKiAgICAgICogYHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuYCAtIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIG1hZGUgYXZhaWxhYmxlIHRvXG4gKiAgICAgICAgZGlyZWN0aXZlczsgaWYgZ2l2ZW4sIGl0IHdpbGwgYmUgcGFzc2VkIHRocm91Z2ggdG8gdGhlIGxpbmsgZnVuY3Rpb25zIG9mXG4gKiAgICAgICAgZGlyZWN0aXZlcyBmb3VuZCBpbiBgZWxlbWVudGAgZHVyaW5nIGNvbXBpbGF0aW9uLlxuICogICAgICAqIGB0cmFuc2NsdWRlQ29udHJvbGxlcnNgIC0gYW4gb2JqZWN0IGhhc2ggd2l0aCBrZXlzIHRoYXQgbWFwIGNvbnRyb2xsZXIgbmFtZXNcbiAqICAgICAgICB0byBhIGhhc2ggd2l0aCB0aGUga2V5IGBpbnN0YW5jZWAsIHdoaWNoIG1hcHMgdG8gdGhlIGNvbnRyb2xsZXIgaW5zdGFuY2U7XG4gKiAgICAgICAgaWYgZ2l2ZW4sIGl0IHdpbGwgbWFrZSB0aGUgY29udHJvbGxlcnMgYXZhaWxhYmxlIHRvIGRpcmVjdGl2ZXMgb24gdGhlIGNvbXBpbGVOb2RlOlxuICogICAgICAgIGBgYFxuICogICAgICAgIHtcbiAqICAgICAgICAgIHBhcmVudDoge1xuICogICAgICAgICAgICBpbnN0YW5jZTogcGFyZW50Q29udHJvbGxlckluc3RhbmNlXG4gKiAgICAgICAgICB9XG4gKiAgICAgICAgfVxuICogICAgICAgIGBgYFxuICogICAgICAqIGBmdXR1cmVQYXJlbnRFbGVtZW50YCAtIGRlZmluZXMgdGhlIHBhcmVudCB0byB3aGljaCB0aGUgYGNsb25lQXR0YWNoRm5gIHdpbGwgYWRkXG4gKiAgICAgICAgdGhlIGNsb25lZCBlbGVtZW50czsgb25seSBuZWVkZWQgZm9yIHRyYW5zY2x1ZGVzIHRoYXQgYXJlIGFsbG93ZWQgdG8gY29udGFpbiBub24gaHRtbFxuICogICAgICAgIGVsZW1lbnRzIChlLmcuIFNWRyBlbGVtZW50cykuIFNlZSBhbHNvIHRoZSBkaXJlY3RpdmUuY29udHJvbGxlciBwcm9wZXJ0eS5cbiAqXG4gKiBDYWxsaW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHRlbXBsYXRlLiBJdCBpcyBlaXRoZXIgdGhlIG9yaWdpbmFsXG4gKiBlbGVtZW50IHBhc3NlZCBpbiwgb3IgdGhlIGNsb25lIG9mIHRoZSBlbGVtZW50IGlmIHRoZSBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQuXG4gKlxuICogQWZ0ZXIgbGlua2luZyB0aGUgdmlldyBpcyBub3QgdXBkYXRlZCB1bnRpbCBhZnRlciBhIGNhbGwgdG8gJGRpZ2VzdCB3aGljaCB0eXBpY2FsbHkgaXMgZG9uZSBieVxuICogQW5ndWxhciBhdXRvbWF0aWNhbGx5LlxuICpcbiAqIElmIHlvdSBuZWVkIGFjY2VzcyB0byB0aGUgYm91bmQgdmlldywgdGhlcmUgYXJlIHR3byB3YXlzIHRvIGRvIGl0OlxuICpcbiAqIC0gSWYgeW91IGFyZSBub3QgYXNraW5nIHRoZSBsaW5raW5nIGZ1bmN0aW9uIHRvIGNsb25lIHRoZSB0ZW1wbGF0ZSwgY3JlYXRlIHRoZSBET00gZWxlbWVudChzKVxuICogICBiZWZvcmUgeW91IHNlbmQgdGhlbSB0byB0aGUgY29tcGlsZXIgYW5kIGtlZXAgdGhpcyByZWZlcmVuY2UgYXJvdW5kLlxuICogICBgYGBqc1xuICogICAgIHZhciBlbGVtZW50ID0gJGNvbXBpbGUoJzxwPnt7dG90YWx9fTwvcD4nKShzY29wZSk7XG4gKiAgIGBgYFxuICpcbiAqIC0gaWYgb24gdGhlIG90aGVyIGhhbmQsIHlvdSBuZWVkIHRoZSBlbGVtZW50IHRvIGJlIGNsb25lZCwgdGhlIHZpZXcgcmVmZXJlbmNlIGZyb20gdGhlIG9yaWdpbmFsXG4gKiAgIGV4YW1wbGUgd291bGQgbm90IHBvaW50IHRvIHRoZSBjbG9uZSwgYnV0IHJhdGhlciB0byB0aGUgb3JpZ2luYWwgdGVtcGxhdGUgdGhhdCB3YXMgY2xvbmVkLiBJblxuICogICB0aGlzIGNhc2UsIHlvdSBjYW4gYWNjZXNzIHRoZSBjbG9uZSB2aWEgdGhlIGNsb25lQXR0YWNoRm46XG4gKiAgIGBgYGpzXG4gKiAgICAgdmFyIHRlbXBsYXRlRWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgnPHA+e3t0b3RhbH19PC9wPicpLFxuICogICAgICAgICBzY29wZSA9IC4uLi47XG4gKlxuICogICAgIHZhciBjbG9uZWRFbGVtZW50ID0gJGNvbXBpbGUodGVtcGxhdGVFbGVtZW50KShzY29wZSwgZnVuY3Rpb24oY2xvbmVkRWxlbWVudCwgc2NvcGUpIHtcbiAqICAgICAgIC8vYXR0YWNoIHRoZSBjbG9uZSB0byBET00gZG9jdW1lbnQgYXQgdGhlIHJpZ2h0IHBsYWNlXG4gKiAgICAgfSk7XG4gKlxuICogICAgIC8vbm93IHdlIGhhdmUgcmVmZXJlbmNlIHRvIHRoZSBjbG9uZWQgRE9NIHZpYSBgY2xvbmVkRWxlbWVudGBcbiAqICAgYGBgXG4gKlxuICpcbiAqIEZvciBpbmZvcm1hdGlvbiBvbiBob3cgdGhlIGNvbXBpbGVyIHdvcmtzLCBzZWUgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvY29tcGlsZXIgQW5ndWxhciBIVE1MIENvbXBpbGVyfSBzZWN0aW9uIG9mIHRoZSBEZXZlbG9wZXIgR3VpZGUuXG4gKi9cblxudmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGNvbXBpbGVQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICovXG4kQ29tcGlsZVByb3ZpZGVyLiRpbmplY3QgPSBbJyRwcm92aWRlJywgJyQkc2FuaXRpemVVcmlQcm92aWRlciddO1xuZnVuY3Rpb24gJENvbXBpbGVQcm92aWRlcigkcHJvdmlkZSwgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyKSB7XG4gIHZhciBoYXNEaXJlY3RpdmVzID0ge30sXG4gICAgICBTdWZmaXggPSAnRGlyZWN0aXZlJyxcbiAgICAgIENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUCA9IC9eXFxzKmRpcmVjdGl2ZVxcOlxccyooW1xcd1xcLV0rKVxccysoLiopJC8sXG4gICAgICBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQID0gLygoW1xcd1xcLV0rKSg/OlxcOihbXjtdKykpPzs/KS8sXG4gICAgICBBTExfT1JfTk9USElOR19BVFRSUyA9IG1ha2VNYXAoJ25nU3JjLG5nU3Jjc2V0LHNyYyxzcmNzZXQnKSxcbiAgICAgIFJFUVVJUkVfUFJFRklYX1JFR0VYUCA9IC9eKD86KFxcXlxcXj8pPyhcXD8pPyhcXF5cXF4/KT8pPy87XG5cbiAgLy8gUmVmOiBodHRwOi8vZGV2ZWxvcGVycy53aGF0d2cub3JnL3dlYmFwcGFwaXMuaHRtbCNldmVudC1oYW5kbGVyLWlkbC1hdHRyaWJ1dGVzXG4gIC8vIFRoZSBhc3N1bXB0aW9uIGlzIHRoYXQgZnV0dXJlIERPTSBldmVudCBhdHRyaWJ1dGUgbmFtZXMgd2lsbCBiZWdpbiB3aXRoXG4gIC8vICdvbicgYW5kIGJlIGNvbXBvc2VkIG9mIG9ubHkgRW5nbGlzaCBsZXR0ZXJzLlxuICB2YXIgRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUCA9IC9eKG9uW2Etel0rfGZvcm1hY3Rpb24pJC87XG5cbiAgZnVuY3Rpb24gcGFyc2VJc29sYXRlQmluZGluZ3Moc2NvcGUsIGRpcmVjdGl2ZU5hbWUsIGlzQ29udHJvbGxlcikge1xuICAgIHZhciBMT0NBTF9SRUdFWFAgPSAvXlxccyooW0AmXXw9KFxcKj8pKShcXD8/KVxccyooXFx3KilcXHMqJC87XG5cbiAgICB2YXIgYmluZGluZ3MgPSB7fTtcblxuICAgIGZvckVhY2goc2NvcGUsIGZ1bmN0aW9uKGRlZmluaXRpb24sIHNjb3BlTmFtZSkge1xuICAgICAgdmFyIG1hdGNoID0gZGVmaW5pdGlvbi5tYXRjaChMT0NBTF9SRUdFWFApO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdpc2NwJyxcbiAgICAgICAgICAgIFwiSW52YWxpZCB7M30gZm9yIGRpcmVjdGl2ZSAnezB9Jy5cIiArXG4gICAgICAgICAgICBcIiBEZWZpbml0aW9uOiB7Li4uIHsxfTogJ3syfScgLi4ufVwiLFxuICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgc2NvcGVOYW1lLCBkZWZpbml0aW9uLFxuICAgICAgICAgICAgKGlzQ29udHJvbGxlciA/IFwiY29udHJvbGxlciBiaW5kaW5ncyBkZWZpbml0aW9uXCIgOlxuICAgICAgICAgICAgXCJpc29sYXRlIHNjb3BlIGRlZmluaXRpb25cIikpO1xuICAgICAgfVxuXG4gICAgICBiaW5kaW5nc1tzY29wZU5hbWVdID0ge1xuICAgICAgICBtb2RlOiBtYXRjaFsxXVswXSxcbiAgICAgICAgY29sbGVjdGlvbjogbWF0Y2hbMl0gPT09ICcqJyxcbiAgICAgICAgb3B0aW9uYWw6IG1hdGNoWzNdID09PSAnPycsXG4gICAgICAgIGF0dHJOYW1lOiBtYXRjaFs0XSB8fCBzY29wZU5hbWVcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYmluZGluZ3M7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZURpcmVjdGl2ZUJpbmRpbmdzKGRpcmVjdGl2ZSwgZGlyZWN0aXZlTmFtZSkge1xuICAgIHZhciBiaW5kaW5ncyA9IHtcbiAgICAgIGlzb2xhdGVTY29wZTogbnVsbCxcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IG51bGxcbiAgICB9O1xuICAgIGlmIChpc09iamVjdChkaXJlY3RpdmUuc2NvcGUpKSB7XG4gICAgICBpZiAoZGlyZWN0aXZlLmJpbmRUb0NvbnRyb2xsZXIgPT09IHRydWUpIHtcbiAgICAgICAgYmluZGluZ3MuYmluZFRvQ29udHJvbGxlciA9IHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5zY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsIHRydWUpO1xuICAgICAgICBiaW5kaW5ncy5pc29sYXRlU2NvcGUgPSB7fTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpbmRpbmdzLmlzb2xhdGVTY29wZSA9IHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5zY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNPYmplY3QoZGlyZWN0aXZlLmJpbmRUb0NvbnRyb2xsZXIpKSB7XG4gICAgICBiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyID1cbiAgICAgICAgICBwYXJzZUlzb2xhdGVCaW5kaW5ncyhkaXJlY3RpdmUuYmluZFRvQ29udHJvbGxlciwgZGlyZWN0aXZlTmFtZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyKSkge1xuICAgICAgdmFyIGNvbnRyb2xsZXIgPSBkaXJlY3RpdmUuY29udHJvbGxlcjtcbiAgICAgIHZhciBjb250cm9sbGVyQXMgPSBkaXJlY3RpdmUuY29udHJvbGxlckFzO1xuICAgICAgaWYgKCFjb250cm9sbGVyKSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIGNvbnRyb2xsZXIsIHRoZXJlIG1heSBvciBtYXkgbm90IGJlIGEgY29udHJvbGxlckFzIHByb3BlcnR5XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub2N0cmwnLFxuICAgICAgICAgICAgICBcIkNhbm5vdCBiaW5kIHRvIGNvbnRyb2xsZXIgd2l0aG91dCBkaXJlY3RpdmUgJ3swfSdzIGNvbnRyb2xsZXIuXCIsXG4gICAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgfSBlbHNlIGlmICghaWRlbnRpZmllckZvckNvbnRyb2xsZXIoY29udHJvbGxlciwgY29udHJvbGxlckFzKSkge1xuICAgICAgICAvLyBUaGVyZSBpcyBhIGNvbnRyb2xsZXIsIGJ1dCBubyBpZGVudGlmaWVyIG9yIGNvbnRyb2xsZXJBcyBwcm9wZXJ0eVxuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9pZGVudCcsXG4gICAgICAgICAgICAgIFwiQ2Fubm90IGJpbmQgdG8gY29udHJvbGxlciB3aXRob3V0IGlkZW50aWZpZXIgZm9yIGRpcmVjdGl2ZSAnezB9Jy5cIixcbiAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiaW5kaW5ncztcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydFZhbGlkRGlyZWN0aXZlTmFtZShuYW1lKSB7XG4gICAgdmFyIGxldHRlciA9IG5hbWUuY2hhckF0KDApO1xuICAgIGlmICghbGV0dGVyIHx8IGxldHRlciAhPT0gbG93ZXJjYXNlKGxldHRlcikpIHtcbiAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdiYWRkaXInLCBcIkRpcmVjdGl2ZSBuYW1lICd7MH0nIGlzIGludmFsaWQuIFRoZSBmaXJzdCBjaGFyYWN0ZXIgbXVzdCBiZSBhIGxvd2VyY2FzZSBsZXR0ZXJcIiwgbmFtZSk7XG4gICAgfVxuICAgIGlmIChuYW1lICE9PSBuYW1lLnRyaW0oKSkge1xuICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2JhZGRpcicsXG4gICAgICAgICAgICBcIkRpcmVjdGl2ZSBuYW1lICd7MH0nIGlzIGludmFsaWQuIFRoZSBuYW1lIHNob3VsZCBub3QgY29udGFpbiBsZWFkaW5nIG9yIHRyYWlsaW5nIHdoaXRlc3BhY2VzXCIsXG4gICAgICAgICAgICBuYW1lKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZVxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXIgYSBuZXcgZGlyZWN0aXZlIHdpdGggdGhlIGNvbXBpbGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgTmFtZSBvZiB0aGUgZGlyZWN0aXZlIGluIGNhbWVsLWNhc2UgKGkuZS4gPGNvZGU+bmdCaW5kPC9jb2RlPiB3aGljaFxuICAgKiAgICB3aWxsIG1hdGNoIGFzIDxjb2RlPm5nLWJpbmQ8L2NvZGU+KSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZSBrZXlzIGFyZSB0aGVcbiAgICogICAgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmYWN0b3JpZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGRpcmVjdGl2ZUZhY3RvcnkgQW4gaW5qZWN0YWJsZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbi4gU2VlXG4gICAqICAgIHtAbGluayBndWlkZS9kaXJlY3RpdmV9IGZvciBtb3JlIGluZm8uXG4gICAqIEByZXR1cm5zIHtuZy4kY29tcGlsZVByb3ZpZGVyfSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICovXG4gICB0aGlzLmRpcmVjdGl2ZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZUZhY3RvcnkpIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnZGlyZWN0aXZlJyk7XG4gICAgaWYgKGlzU3RyaW5nKG5hbWUpKSB7XG4gICAgICBhc3NlcnRWYWxpZERpcmVjdGl2ZU5hbWUobmFtZSk7XG4gICAgICBhc3NlcnRBcmcoZGlyZWN0aXZlRmFjdG9yeSwgJ2RpcmVjdGl2ZUZhY3RvcnknKTtcbiAgICAgIGlmICghaGFzRGlyZWN0aXZlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBoYXNEaXJlY3RpdmVzW25hbWVdID0gW107XG4gICAgICAgICRwcm92aWRlLmZhY3RvcnkobmFtZSArIFN1ZmZpeCwgWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLFxuICAgICAgICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgICAgIHZhciBkaXJlY3RpdmVzID0gW107XG4gICAgICAgICAgICBmb3JFYWNoKGhhc0RpcmVjdGl2ZXNbbmFtZV0sIGZ1bmN0aW9uKGRpcmVjdGl2ZUZhY3RvcnksIGluZGV4KSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZSA9ICRpbmplY3Rvci5pbnZva2UoZGlyZWN0aXZlRmFjdG9yeSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlID0geyBjb21waWxlOiB2YWx1ZUZuKGRpcmVjdGl2ZSkgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFkaXJlY3RpdmUuY29tcGlsZSAmJiBkaXJlY3RpdmUubGluaykge1xuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLmNvbXBpbGUgPSB2YWx1ZUZuKGRpcmVjdGl2ZS5saW5rKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5IHx8IDA7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLmluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLm5hbWUgPSBkaXJlY3RpdmUubmFtZSB8fCBuYW1lO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmUgfHwgKGRpcmVjdGl2ZS5jb250cm9sbGVyICYmIGRpcmVjdGl2ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0VBJztcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZ3MgPSBkaXJlY3RpdmUuJCRiaW5kaW5ncyA9XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRGlyZWN0aXZlQmluZGluZ3MoZGlyZWN0aXZlLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGJpbmRpbmdzLmlzb2xhdGVTY29wZSkpIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncyA9IGJpbmRpbmdzLmlzb2xhdGVTY29wZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLiQkbW9kdWxlTmFtZSA9IGRpcmVjdGl2ZUZhY3RvcnkuJCRtb2R1bGVOYW1lO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7XG4gICAgICAgICAgfV0pO1xuICAgICAgfVxuICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXS5wdXNoKGRpcmVjdGl2ZUZhY3RvcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JFYWNoKG5hbWUsIHJldmVyc2VQYXJhbXMocmVnaXN0ZXJEaXJlY3RpdmUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2FIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGFbaHJlZl0gc2FuaXRpemF0aW9uLlxuICAgKlxuICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50aW5nIFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLlxuICAgKlxuICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGFbaHJlZl0gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50b1xuICAgKiBhbiBhYnNvbHV0ZSB1cmwuIEFmdGVyd2FyZHMsIHRoZSB1cmwgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7XG4gICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7XG4gICAgICAkJHNhbml0aXplVXJpUHJvdmlkZXIuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QocmVnZXhwKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmVcbiAgICogdXJscyBkdXJpbmcgaW1nW3NyY10gc2FuaXRpemF0aW9uLlxuICAgKlxuICAgKiBUaGUgc2FuaXRpemF0aW9uIGlzIGEgc2VjdXJpdHkgbWVhc3VyZSBhaW1lZCBhdCBwcmV2ZW50IFhTUyBhdHRhY2tzIHZpYSBodG1sIGxpbmtzLlxuICAgKlxuICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGltZ1tzcmNdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdGBcbiAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsXG4gICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLlxuICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7XG4gICAgaWYgKGlzRGVmaW5lZChyZWdleHApKSB7XG4gICAgICAkJHNhbml0aXplVXJpUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KHJlZ2V4cCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQkc2FuaXRpemVVcmlQcm92aWRlci5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgICRjb21waWxlUHJvdmlkZXIjZGVidWdJbmZvRW5hYmxlZFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHVwZGF0ZSB0aGUgZGVidWdJbmZvRW5hYmxlZCBzdGF0ZSBpZiBwcm92aWRlZCwgb3RoZXJ3aXNlIGp1c3QgcmV0dXJuIHRoZVxuICAgKiBjdXJyZW50IGRlYnVnSW5mb0VuYWJsZWQgc3RhdGVcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICpcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENhbGwgdGhpcyBtZXRob2QgdG8gZW5hYmxlL2Rpc2FibGUgdmFyaW91cyBkZWJ1ZyBydW50aW1lIGluZm9ybWF0aW9uIGluIHRoZSBjb21waWxlciBzdWNoIGFzIGFkZGluZ1xuICAgKiBiaW5kaW5nIGluZm9ybWF0aW9uIGFuZCBhIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBzY29wZSBvbiB0byBET00gZWxlbWVudHMuXG4gICAqIElmIGVuYWJsZWQsIHRoZSBjb21waWxlciB3aWxsIGFkZCB0aGUgZm9sbG93aW5nIHRvIERPTSBlbGVtZW50cyB0aGF0IGhhdmUgYmVlbiBib3VuZCB0byB0aGUgc2NvcGVcbiAgICogKiBgbmctYmluZGluZ2AgQ1NTIGNsYXNzXG4gICAqICogYCRiaW5kaW5nYCBkYXRhIHByb3BlcnR5IGNvbnRhaW5pbmcgYW4gYXJyYXkgb2YgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbnNcbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhpcyBpbiBwcm9kdWN0aW9uIGZvciBhIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGJvb3N0LiBTZWVcbiAgICoge0BsaW5rIGd1aWRlL3Byb2R1Y3Rpb24jZGlzYWJsaW5nLWRlYnVnLWRhdGEgRGlzYWJsaW5nIERlYnVnIERhdGF9IGZvciBtb3JlLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKi9cbiAgdmFyIGRlYnVnSW5mb0VuYWJsZWQgPSB0cnVlO1xuICB0aGlzLmRlYnVnSW5mb0VuYWJsZWQgPSBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgaWYgKGlzRGVmaW5lZChlbmFibGVkKSkge1xuICAgICAgZGVidWdJbmZvRW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGRlYnVnSW5mb0VuYWJsZWQ7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gW1xuICAgICAgICAgICAgJyRpbmplY3RvcicsICckaW50ZXJwb2xhdGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHRlbXBsYXRlUmVxdWVzdCcsICckcGFyc2UnLFxuICAgICAgICAgICAgJyRjb250cm9sbGVyJywgJyRyb290U2NvcGUnLCAnJHNjZScsICckYW5pbWF0ZScsICckJHNhbml0aXplVXJpJyxcbiAgICBmdW5jdGlvbigkaW5qZWN0b3IsICAgJGludGVycG9sYXRlLCAgICRleGNlcHRpb25IYW5kbGVyLCAgICR0ZW1wbGF0ZVJlcXVlc3QsICAgJHBhcnNlLFxuICAgICAgICAgICAgICRjb250cm9sbGVyLCAgICRyb290U2NvcGUsICAgJHNjZSwgICAkYW5pbWF0ZSwgICAkJHNhbml0aXplVXJpKSB7XG5cbiAgICB2YXIgQXR0cmlidXRlcyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJpYnV0ZXNUb0NvcHkpIHtcbiAgICAgIGlmIChhdHRyaWJ1dGVzVG9Db3B5KSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlc1RvQ29weSk7XG4gICAgICAgIHZhciBpLCBsLCBrZXk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICB0aGlzW2tleV0gPSBhdHRyaWJ1dGVzVG9Db3B5W2tleV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGF0dHIgPSB7fTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIH07XG5cbiAgICBBdHRyaWJ1dGVzLnByb3RvdHlwZSA9IHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJG5vcm1hbGl6ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIENvbnZlcnRzIGFuIGF0dHJpYnV0ZSBuYW1lIChlLmcuIGRhc2gvY29sb24vdW5kZXJzY29yZS1kZWxpbWl0ZWQgc3RyaW5nLCBvcHRpb25hbGx5IHByZWZpeGVkIHdpdGggYHgtYCBvclxuICAgICAgICogYGRhdGEtYCkgdG8gaXRzIG5vcm1hbGl6ZWQsIGNhbWVsQ2FzZSBmb3JtLlxuICAgICAgICpcbiAgICAgICAqIEFsc28gdGhlcmUgaXMgc3BlY2lhbCBjYXNlIGZvciBNb3ogcHJlZml4IHN0YXJ0aW5nIHdpdGggdXBwZXIgY2FzZSBsZXR0ZXIuXG4gICAgICAgKlxuICAgICAgICogRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gY2hlY2sgb3V0IHRoZSBndWlkZSBvbiB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI21hdGNoaW5nLWRpcmVjdGl2ZXMgTWF0Y2hpbmcgRGlyZWN0aXZlc31cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZVxuICAgICAgICovXG4gICAgICAkbm9ybWFsaXplOiBkaXJlY3RpdmVOb3JtYWxpemUsXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYWRkQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBZGRzIHRoZSBDU1MgY2xhc3MgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBjbGFzc1ZhbCBwYXJhbWV0ZXIgdG8gdGhlIGVsZW1lbnQuIElmIGFuaW1hdGlvbnNcbiAgICAgICAqIGFyZSBlbmFibGVkIHRoZW4gYW4gYW5pbWF0aW9uIHdpbGwgYmUgdHJpZ2dlcmVkIGZvciB0aGUgY2xhc3MgYWRkaXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzVmFsIFRoZSBjbGFzc05hbWUgdmFsdWUgdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKi9cbiAgICAgICRhZGRDbGFzczogZnVuY3Rpb24oY2xhc3NWYWwpIHtcbiAgICAgICAgaWYgKGNsYXNzVmFsICYmIGNsYXNzVmFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgY2xhc3NWYWwpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRyZW1vdmVDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlbW92ZXMgdGhlIENTUyBjbGFzcyB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGNsYXNzVmFsIHBhcmFtZXRlciBmcm9tIHRoZSBlbGVtZW50LiBJZlxuICAgICAgICogYW5pbWF0aW9ucyBhcmUgZW5hYmxlZCB0aGVuIGFuIGFuaW1hdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGNsYXNzIHJlbW92YWwuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzVmFsIFRoZSBjbGFzc05hbWUgdmFsdWUgdGhhdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICAgICAgICovXG4gICAgICAkcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzVmFsKSB7XG4gICAgICAgIGlmIChjbGFzc1ZhbCAmJiBjbGFzc1ZhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIGNsYXNzVmFsKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkdXBkYXRlQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBZGRzIGFuZCByZW1vdmVzIHRoZSBhcHByb3ByaWF0ZSBDU1MgY2xhc3MgdmFsdWVzIHRvIHRoZSBlbGVtZW50IGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlXG4gICAgICAgKiBiZXR3ZWVuIHRoZSBuZXcgYW5kIG9sZCBDU1MgY2xhc3MgdmFsdWVzIChzcGVjaWZpZWQgYXMgbmV3Q2xhc3NlcyBhbmQgb2xkQ2xhc3NlcykuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0NsYXNzZXMgVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSB2YWx1ZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG9sZENsYXNzZXMgVGhlIGZvcm1lciBDU1MgY2xhc3NOYW1lIHZhbHVlXG4gICAgICAgKi9cbiAgICAgICR1cGRhdGVDbGFzczogZnVuY3Rpb24obmV3Q2xhc3Nlcywgb2xkQ2xhc3Nlcykge1xuICAgICAgICB2YXIgdG9BZGQgPSB0b2tlbkRpZmZlcmVuY2UobmV3Q2xhc3Nlcywgb2xkQ2xhc3Nlcyk7XG4gICAgICAgIGlmICh0b0FkZCAmJiB0b0FkZC5sZW5ndGgpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgdG9BZGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvUmVtb3ZlID0gdG9rZW5EaWZmZXJlbmNlKG9sZENsYXNzZXMsIG5ld0NsYXNzZXMpO1xuICAgICAgICBpZiAodG9SZW1vdmUgJiYgdG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIHRvUmVtb3ZlKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgYSBub3JtYWxpemVkIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBpbiBhIHdheSBzdWNoIHRoYXQgYWxsIGRpcmVjdGl2ZXNcbiAgICAgICAqIGNhbiBzaGFyZSB0aGUgYXR0cmlidXRlLiBUaGlzIGZ1bmN0aW9uIHByb3Blcmx5IGhhbmRsZXMgYm9vbGVhbiBhdHRyaWJ1dGVzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBOb3JtYWxpemVkIGtleS4gKGllIG5nQXR0cmlidXRlKVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8Ym9vbGVhbn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC4gSWYgYG51bGxgIGF0dHJpYnV0ZSB3aWxsIGJlIGRlbGV0ZWQuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB3cml0ZUF0dHIgSWYgZmFsc2UsIGRvZXMgbm90IHdyaXRlIHRoZSB2YWx1ZSB0byBET00gZWxlbWVudCBhdHRyaWJ1dGUuXG4gICAgICAgKiAgICAgRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gYXR0ck5hbWUgT3B0aW9uYWwgbm9uZSBub3JtYWxpemVkIG5hbWUuIERlZmF1bHRzIHRvIGtleS5cbiAgICAgICAqL1xuICAgICAgJHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSwgd3JpdGVBdHRyLCBhdHRyTmFtZSkge1xuICAgICAgICAvLyBUT0RPOiBkZWNpZGUgd2hldGhlciBvciBub3QgdG8gdGhyb3cgYW4gZXJyb3IgaWYgXCJjbGFzc1wiXG4gICAgICAgIC8vaXMgc2V0IHRocm91Z2ggdGhpcyBmdW5jdGlvbiBzaW5jZSBpdCBtYXkgY2F1c2UgJHVwZGF0ZUNsYXNzIHRvXG4gICAgICAgIC8vYmVjb21lIHVuc3RhYmxlLlxuXG4gICAgICAgIHZhciBub2RlID0gdGhpcy4kJGVsZW1lbnRbMF0sXG4gICAgICAgICAgICBib29sZWFuS2V5ID0gZ2V0Qm9vbGVhbkF0dHJOYW1lKG5vZGUsIGtleSksXG4gICAgICAgICAgICBhbGlhc2VkS2V5ID0gZ2V0QWxpYXNlZEF0dHJOYW1lKGtleSksXG4gICAgICAgICAgICBvYnNlcnZlciA9IGtleSxcbiAgICAgICAgICAgIG5vZGVOYW1lO1xuXG4gICAgICAgIGlmIChib29sZWFuS2V5KSB7XG4gICAgICAgICAgdGhpcy4kJGVsZW1lbnQucHJvcChrZXksIHZhbHVlKTtcbiAgICAgICAgICBhdHRyTmFtZSA9IGJvb2xlYW5LZXk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWxpYXNlZEtleSkge1xuICAgICAgICAgIHRoaXNbYWxpYXNlZEtleV0gPSB2YWx1ZTtcbiAgICAgICAgICBvYnNlcnZlciA9IGFsaWFzZWRLZXk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcblxuICAgICAgICAvLyB0cmFuc2xhdGUgbm9ybWFsaXplZCBrZXkgdG8gYWN0dWFsIGtleVxuICAgICAgICBpZiAoYXR0ck5hbWUpIHtcbiAgICAgICAgICB0aGlzLiRhdHRyW2tleV0gPSBhdHRyTmFtZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdHRyTmFtZSA9IHRoaXMuJGF0dHJba2V5XTtcbiAgICAgICAgICBpZiAoIWF0dHJOYW1lKSB7XG4gICAgICAgICAgICB0aGlzLiRhdHRyW2tleV0gPSBhdHRyTmFtZSA9IHNuYWtlX2Nhc2Uoa2V5LCAnLScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGVOYW1lID0gbm9kZU5hbWVfKHRoaXMuJCRlbGVtZW50KTtcblxuICAgICAgICBpZiAoKG5vZGVOYW1lID09PSAnYScgJiYga2V5ID09PSAnaHJlZicpIHx8XG4gICAgICAgICAgICAobm9kZU5hbWUgPT09ICdpbWcnICYmIGtleSA9PT0gJ3NyYycpKSB7XG4gICAgICAgICAgLy8gc2FuaXRpemUgYVtocmVmXSBhbmQgaW1nW3NyY10gdmFsdWVzXG4gICAgICAgICAgdGhpc1trZXldID0gdmFsdWUgPSAkJHNhbml0aXplVXJpKHZhbHVlLCBrZXkgPT09ICdzcmMnKTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlTmFtZSA9PT0gJ2ltZycgJiYga2V5ID09PSAnc3Jjc2V0Jykge1xuICAgICAgICAgIC8vIHNhbml0aXplIGltZ1tzcmNzZXRdIHZhbHVlc1xuICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuXG4gICAgICAgICAgLy8gZmlyc3QgY2hlY2sgaWYgdGhlcmUgYXJlIHNwYWNlcyBiZWNhdXNlIGl0J3Mgbm90IHRoZSBzYW1lIHBhdHRlcm5cbiAgICAgICAgICB2YXIgdHJpbW1lZFNyY3NldCA9IHRyaW0odmFsdWUpO1xuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICggICA5OTl4ICAgLHwgICA5OTl3ICAgLHwgICAsfCwgICApXG4gICAgICAgICAgdmFyIHNyY1BhdHRlcm4gPSAvKFxccytcXGQreFxccyosfFxccytcXGQrd1xccyosfFxccyssfCxcXHMrKS87XG4gICAgICAgICAgdmFyIHBhdHRlcm4gPSAvXFxzLy50ZXN0KHRyaW1tZWRTcmNzZXQpID8gc3JjUGF0dGVybiA6IC8oLCkvO1xuXG4gICAgICAgICAgLy8gc3BsaXQgc3Jjc2V0IGludG8gdHVwbGUgb2YgdXJpIGFuZCBkZXNjcmlwdG9yIGV4Y2VwdCBmb3IgdGhlIGxhc3QgaXRlbVxuICAgICAgICAgIHZhciByYXdVcmlzID0gdHJpbW1lZFNyY3NldC5zcGxpdChwYXR0ZXJuKTtcblxuICAgICAgICAgIC8vIGZvciBlYWNoIHR1cGxlc1xuICAgICAgICAgIHZhciBuYnJVcmlzV2l0aDJwYXJ0cyA9IE1hdGguZmxvb3IocmF3VXJpcy5sZW5ndGggLyAyKTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5iclVyaXNXaXRoMnBhcnRzOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpbm5lcklkeCA9IGkgKiAyO1xuICAgICAgICAgICAgLy8gc2FuaXRpemUgdGhlIHVyaVxuICAgICAgICAgICAgcmVzdWx0ICs9ICQkc2FuaXRpemVVcmkodHJpbShyYXdVcmlzW2lubmVySWR4XSksIHRydWUpO1xuICAgICAgICAgICAgLy8gYWRkIHRoZSBkZXNjcmlwdG9yXG4gICAgICAgICAgICByZXN1bHQgKz0gKFwiIFwiICsgdHJpbShyYXdVcmlzW2lubmVySWR4ICsgMV0pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzcGxpdCB0aGUgbGFzdCBpdGVtIGludG8gdXJpIGFuZCBkZXNjcmlwdG9yXG4gICAgICAgICAgdmFyIGxhc3RUdXBsZSA9IHRyaW0ocmF3VXJpc1tpICogMl0pLnNwbGl0KC9cXHMvKTtcblxuICAgICAgICAgIC8vIHNhbml0aXplIHRoZSBsYXN0IHVyaVxuICAgICAgICAgIHJlc3VsdCArPSAkJHNhbml0aXplVXJpKHRyaW0obGFzdFR1cGxlWzBdKSwgdHJ1ZSk7XG5cbiAgICAgICAgICAvLyBhbmQgYWRkIHRoZSBsYXN0IGRlc2NyaXB0b3IgaWYgYW55XG4gICAgICAgICAgaWYgKGxhc3RUdXBsZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAoXCIgXCIgKyB0cmltKGxhc3RUdXBsZVsxXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZSA9IHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3cml0ZUF0dHIgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy4kJGVsZW1lbnQucmVtb3ZlQXR0cihhdHRyTmFtZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LmF0dHIoYXR0ck5hbWUsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaXJlIG9ic2VydmVyc1xuICAgICAgICB2YXIgJCRvYnNlcnZlcnMgPSB0aGlzLiQkb2JzZXJ2ZXJzO1xuICAgICAgICAkJG9ic2VydmVycyAmJiBmb3JFYWNoKCQkb2JzZXJ2ZXJzW29ic2VydmVyXSwgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4odmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJG9ic2VydmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBPYnNlcnZlcyBhbiBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBvYnNlcnZlciBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgb25jZSBkdXJpbmcgdGhlIG5leHQgYCRkaWdlc3RgIGZvbGxvd2luZ1xuICAgICAgICogY29tcGlsYXRpb24uIFRoZSBvYnNlcnZlciBpcyB0aGVuIGludm9rZWQgd2hlbmV2ZXIgdGhlIGludGVycG9sYXRlZCB2YWx1ZVxuICAgICAgICogY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IE5vcm1hbGl6ZWQga2V5LiAoaWUgbmdBdHRyaWJ1dGUpIC5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oaW50ZXJwb2xhdGVkVmFsdWUpfSBmbiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyXG4gICAgICAgICAgICAgICAgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIGNoYW5nZXMuXG4gICAgICAgKiAgICAgICAgU2VlIHRoZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiNob3ctdGV4dC1hbmQtYXR0cmlidXRlLWJpbmRpbmdzLXdvcmsgSW50ZXJwb2xhdGlvblxuICAgICAgICogICAgICAgIGd1aWRlfSBmb3IgbW9yZSBpbmZvLlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBvYnNlcnZlci5cbiAgICAgICAqL1xuICAgICAgJG9ic2VydmU6IGZ1bmN0aW9uKGtleSwgZm4pIHtcbiAgICAgICAgdmFyIGF0dHJzID0gdGhpcyxcbiAgICAgICAgICAgICQkb2JzZXJ2ZXJzID0gKGF0dHJzLiQkb2JzZXJ2ZXJzIHx8IChhdHRycy4kJG9ic2VydmVycyA9IGNyZWF0ZU1hcCgpKSksXG4gICAgICAgICAgICBsaXN0ZW5lcnMgPSAoJCRvYnNlcnZlcnNba2V5XSB8fCAoJCRvYnNlcnZlcnNba2V5XSA9IFtdKSk7XG5cbiAgICAgICAgbGlzdGVuZXJzLnB1c2goZm4pO1xuICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCFsaXN0ZW5lcnMuJCRpbnRlciAmJiBhdHRycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICFpc1VuZGVmaW5lZChhdHRyc1trZXldKSkge1xuICAgICAgICAgICAgLy8gbm8gb25lIHJlZ2lzdGVyZWQgYXR0cmlidXRlIGludGVycG9sYXRpb24gZnVuY3Rpb24sIHNvIGxldHMgY2FsbCBpdCBtYW51YWxseVxuICAgICAgICAgICAgZm4oYXR0cnNba2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJzLCBmbik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuXG4gICAgZnVuY3Rpb24gc2FmZUFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgICRlbGVtZW50LmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlnbm9yZSwgc2luY2UgaXQgbWVhbnMgdGhhdCB3ZSBhcmUgdHJ5aW5nIHRvIHNldCBjbGFzcyBvblxuICAgICAgICAvLyBTVkcgZWxlbWVudCwgd2hlcmUgY2xhc3MgbmFtZSBpcyByZWFkLW9ubHkuXG4gICAgICB9XG4gICAgfVxuXG5cbiAgICB2YXIgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcbiAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLFxuICAgICAgICBkZW5vcm1hbGl6ZVRlbXBsYXRlID0gKHN0YXJ0U3ltYm9sID09ICd7eycgfHwgZW5kU3ltYm9sICA9PSAnfX0nKVxuICAgICAgICAgICAgPyBpZGVudGl0eVxuICAgICAgICAgICAgOiBmdW5jdGlvbiBkZW5vcm1hbGl6ZVRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtcXHsvZywgc3RhcnRTeW1ib2wpLnJlcGxhY2UoL319L2csIGVuZFN5bWJvbCk7XG4gICAgICAgIH0sXG4gICAgICAgIE5HX0FUVFJfQklORElORyA9IC9ebmdBdHRyW0EtWl0vO1xuICAgIHZhciBNVUxUSV9FTEVNRU5UX0RJUl9SRSA9IC9eKC4rKVN0YXJ0JC87XG5cbiAgICBjb21waWxlLiQkYWRkQmluZGluZ0luZm8gPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRCaW5kaW5nSW5mbygkZWxlbWVudCwgYmluZGluZykge1xuICAgICAgdmFyIGJpbmRpbmdzID0gJGVsZW1lbnQuZGF0YSgnJGJpbmRpbmcnKSB8fCBbXTtcblxuICAgICAgaWYgKGlzQXJyYXkoYmluZGluZykpIHtcbiAgICAgICAgYmluZGluZ3MgPSBiaW5kaW5ncy5jb25jYXQoYmluZGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xuICAgICAgfVxuXG4gICAgICAkZWxlbWVudC5kYXRhKCckYmluZGluZycsIGJpbmRpbmdzKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3MgPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRCaW5kaW5nQ2xhc3MoJGVsZW1lbnQpIHtcbiAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgJ25nLWJpbmRpbmcnKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8gPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRTY29wZUluZm8oJGVsZW1lbnQsIHNjb3BlLCBpc29sYXRlZCwgbm9UZW1wbGF0ZSkge1xuICAgICAgdmFyIGRhdGFOYW1lID0gaXNvbGF0ZWQgPyAobm9UZW1wbGF0ZSA/ICckaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZScgOiAnJGlzb2xhdGVTY29wZScpIDogJyRzY29wZSc7XG4gICAgICAkZWxlbWVudC5kYXRhKGRhdGFOYW1lLCBzY29wZSk7XG4gICAgfSA6IG5vb3A7XG5cbiAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZFNjb3BlQ2xhc3MoJGVsZW1lbnQsIGlzb2xhdGVkKSB7XG4gICAgICBzYWZlQWRkQ2xhc3MoJGVsZW1lbnQsIGlzb2xhdGVkID8gJ25nLWlzb2xhdGUtc2NvcGUnIDogJ25nLXNjb3BlJyk7XG4gICAgfSA6IG5vb3A7XG5cbiAgICByZXR1cm4gY29tcGlsZTtcblxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIGZ1bmN0aW9uIGNvbXBpbGUoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgaWYgKCEoJGNvbXBpbGVOb2RlcyBpbnN0YW5jZW9mIGpxTGl0ZSkpIHtcbiAgICAgICAgLy8ganF1ZXJ5IGFsd2F5cyByZXdyYXBzLCB3aGVyZWFzIHdlIG5lZWQgdG8gcHJlc2VydmUgdGhlIG9yaWdpbmFsIHNlbGVjdG9yIHNvIHRoYXQgd2UgY2FuXG4gICAgICAgIC8vIG1vZGlmeSBpdC5cbiAgICAgICAgJGNvbXBpbGVOb2RlcyA9IGpxTGl0ZSgkY29tcGlsZU5vZGVzKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGNhbiBub3QgY29tcGlsZSB0b3AgbGV2ZWwgdGV4dCBlbGVtZW50cyBzaW5jZSB0ZXh0IG5vZGVzIGNhbiBiZSBtZXJnZWQgYW5kIHdlIHdpbGxcbiAgICAgIC8vIG5vdCBiZSBhYmxlIHRvIGF0dGFjaCBzY29wZSBkYXRhIHRvIHRoZW0sIHNvIHdlIHdpbGwgd3JhcCB0aGVtIGluIDxzcGFuPlxuICAgICAgZm9yRWFjaCgkY29tcGlsZU5vZGVzLCBmdW5jdGlvbihub2RlLCBpbmRleCkge1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSBOT0RFX1RZUEVfVEVYVCAmJiBub2RlLm5vZGVWYWx1ZS5tYXRjaCgvXFxTKy8pIC8qIG5vbi1lbXB0eSAqLyApIHtcbiAgICAgICAgICAkY29tcGlsZU5vZGVzW2luZGV4XSA9IGpxTGl0ZShub2RlKS53cmFwKCc8c3Bhbj48L3NwYW4+JykucGFyZW50KClbMF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbXBvc2l0ZUxpbmtGbiA9XG4gICAgICAgICAgICAgIGNvbXBpbGVOb2RlcygkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sICRjb21waWxlTm9kZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KTtcbiAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzKCRjb21waWxlTm9kZXMpO1xuICAgICAgdmFyIG5hbWVzcGFjZSA9IG51bGw7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gcHVibGljTGlua0ZuKHNjb3BlLCBjbG9uZUNvbm5lY3RGbiwgb3B0aW9ucykge1xuICAgICAgICBhc3NlcnRBcmcoc2NvcGUsICdzY29wZScpO1xuXG4gICAgICAgIGlmIChwcmV2aW91c0NvbXBpbGVDb250ZXh0ICYmIHByZXZpb3VzQ29tcGlsZUNvbnRleHQubmVlZHNOZXdTY29wZSkge1xuICAgICAgICAgIC8vIEEgcGFyZW50IGRpcmVjdGl2ZSBkaWQgYSByZXBsYWNlIGFuZCBhIGRpcmVjdGl2ZSBvbiB0aGlzIGVsZW1lbnQgYXNrZWRcbiAgICAgICAgICAvLyBmb3IgdHJhbnNjbHVzaW9uLCB3aGljaCBjYXVzZWQgdXMgdG8gbG9zZSBhIGxheWVyIG9mIGVsZW1lbnQgb24gd2hpY2hcbiAgICAgICAgICAvLyB3ZSBjb3VsZCBob2xkIHRoZSBuZXcgdHJhbnNjbHVzaW9uIHNjb3BlLCBzbyB3ZSB3aWxsIGNyZWF0ZSBpdCBtYW51YWxseVxuICAgICAgICAgIC8vIGhlcmUuXG4gICAgICAgICAgc2NvcGUgPSBzY29wZS4kcGFyZW50LiRuZXcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gPSBvcHRpb25zLnBhcmVudEJvdW5kVHJhbnNjbHVkZUZuLFxuICAgICAgICAgIHRyYW5zY2x1ZGVDb250cm9sbGVycyA9IG9wdGlvbnMudHJhbnNjbHVkZUNvbnRyb2xsZXJzLFxuICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBvcHRpb25zLmZ1dHVyZVBhcmVudEVsZW1lbnQ7XG5cbiAgICAgICAgLy8gV2hlbiBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIGlzIHBhc3NlZCwgaXQgaXMgYVxuICAgICAgICAvLyBgY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGVgIGZ1bmN0aW9uIChpdCB3YXMgcHJldmlvdXNseSBwYXNzZWRcbiAgICAgICAgLy8gYXMgYHRyYW5zY2x1ZGVgIHRvIGRpcmVjdGl2ZS5saW5rKSBzbyB3ZSBtdXN0IHVud3JhcCBpdCB0byBnZXRcbiAgICAgICAgLy8gaXRzIGBib3VuZFRyYW5zY2x1ZGVGbmBcbiAgICAgICAgaWYgKHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuICYmIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuLiQkYm91bmRUcmFuc2NsdWRlKSB7XG4gICAgICAgICAgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gPSBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbmFtZXNwYWNlKSB7XG4gICAgICAgICAgbmFtZXNwYWNlID0gZGV0ZWN0TmFtZXNwYWNlRm9yQ2hpbGRFbGVtZW50cyhmdXR1cmVQYXJlbnRFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgJGxpbmtOb2RlO1xuICAgICAgICBpZiAobmFtZXNwYWNlICE9PSAnaHRtbCcpIHtcbiAgICAgICAgICAvLyBXaGVuIHVzaW5nIGEgZGlyZWN0aXZlIHdpdGggcmVwbGFjZTp0cnVlIGFuZCB0ZW1wbGF0ZVVybCB0aGUgJGNvbXBpbGVOb2Rlc1xuICAgICAgICAgIC8vIChvciBhIGNoaWxkIGVsZW1lbnQgaW5zaWRlIG9mIHRoZW0pXG4gICAgICAgICAgLy8gbWlnaHQgY2hhbmdlLCBzbyB3ZSBuZWVkIHRvIHJlY3JlYXRlIHRoZSBuYW1lc3BhY2UgYWRhcHRlZCBjb21waWxlTm9kZXNcbiAgICAgICAgICAvLyBmb3IgY2FsbCB0byB0aGUgbGluayBmdW5jdGlvbi5cbiAgICAgICAgICAvLyBOb3RlOiBUaGlzIHdpbGwgYWxyZWFkeSBjbG9uZSB0aGUgbm9kZXMuLi5cbiAgICAgICAgICAkbGlua05vZGUgPSBqcUxpdGUoXG4gICAgICAgICAgICB3cmFwVGVtcGxhdGUobmFtZXNwYWNlLCBqcUxpdGUoJzxkaXY+JykuYXBwZW5kKCRjb21waWxlTm9kZXMpLmh0bWwoKSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKGNsb25lQ29ubmVjdEZuKSB7XG4gICAgICAgICAgLy8gaW1wb3J0YW50ISE6IHdlIG11c3QgY2FsbCBvdXIganFMaXRlLmNsb25lKCkgc2luY2UgdGhlIGpRdWVyeSBvbmUgaXMgdHJ5aW5nIHRvIGJlIHNtYXJ0XG4gICAgICAgICAgLy8gYW5kIHNvbWV0aW1lcyBjaGFuZ2VzIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIERPTS5cbiAgICAgICAgICAkbGlua05vZGUgPSBKUUxpdGVQcm90b3R5cGUuY2xvbmUuY2FsbCgkY29tcGlsZU5vZGVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkbGlua05vZGUgPSAkY29tcGlsZU5vZGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zY2x1ZGVDb250cm9sbGVycykge1xuICAgICAgICAgIGZvciAodmFyIGNvbnRyb2xsZXJOYW1lIGluIHRyYW5zY2x1ZGVDb250cm9sbGVycykge1xuICAgICAgICAgICAgJGxpbmtOb2RlLmRhdGEoJyQnICsgY29udHJvbGxlck5hbWUgKyAnQ29udHJvbGxlcicsIHRyYW5zY2x1ZGVDb250cm9sbGVyc1tjb250cm9sbGVyTmFtZV0uaW5zdGFuY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oJGxpbmtOb2RlLCBzY29wZSk7XG5cbiAgICAgICAgaWYgKGNsb25lQ29ubmVjdEZuKSBjbG9uZUNvbm5lY3RGbigkbGlua05vZGUsIHNjb3BlKTtcbiAgICAgICAgaWYgKGNvbXBvc2l0ZUxpbmtGbikgY29tcG9zaXRlTGlua0ZuKHNjb3BlLCAkbGlua05vZGUsICRsaW5rTm9kZSwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICByZXR1cm4gJGxpbmtOb2RlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzKHBhcmVudEVsZW1lbnQpIHtcbiAgICAgIC8vIFRPRE86IE1ha2UgdGhpcyBkZXRlY3QgTWF0aE1MIGFzIHdlbGwuLi5cbiAgICAgIHZhciBub2RlID0gcGFyZW50RWxlbWVudCAmJiBwYXJlbnRFbGVtZW50WzBdO1xuICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgIHJldHVybiAnaHRtbCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbm9kZU5hbWVfKG5vZGUpICE9PSAnZm9yZWlnbm9iamVjdCcgJiYgbm9kZS50b1N0cmluZygpLm1hdGNoKC9TVkcvKSA/ICdzdmcnIDogJ2h0bWwnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBpbGUgZnVuY3Rpb24gbWF0Y2hlcyBlYWNoIG5vZGUgaW4gbm9kZUxpc3QgYWdhaW5zdCB0aGUgZGlyZWN0aXZlcy4gT25jZSBhbGwgZGlyZWN0aXZlc1xuICAgICAqIGZvciBhIHBhcnRpY3VsYXIgbm9kZSBhcmUgY29sbGVjdGVkIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb25zIGFyZSBleGVjdXRlZC4gVGhlIGNvbXBpbGVcbiAgICAgKiBmdW5jdGlvbnMgcmV0dXJuIHZhbHVlcyAtIHRoZSBsaW5raW5nIGZ1bmN0aW9ucyAtIGFyZSBjb21iaW5lZCBpbnRvIGEgY29tcG9zaXRlIGxpbmtpbmdcbiAgICAgKiBmdW5jdGlvbiwgd2hpY2ggaXMgdGhlIGEgbGlua2luZyBmdW5jdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge05vZGVMaXN0fSBub2RlTGlzdCBhbiBhcnJheSBvZiBub2RlcyBvciBOb2RlTGlzdCB0byBjb21waWxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZVxuICAgICAqICAgICAgICBzY29wZSBhcmd1bWVudCBpcyBhdXRvLWdlbmVyYXRlZCB0byB0aGUgbmV3IGNoaWxkIG9mIHRoZSB0cmFuc2NsdWRlZCBwYXJlbnQgc2NvcGUuXG4gICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gJHJvb3RFbGVtZW50IElmIHRoZSBub2RlTGlzdCBpcyB0aGUgcm9vdCBvZiB0aGUgY29tcGlsYXRpb24gdHJlZSB0aGVuXG4gICAgICogICAgICAgIHRoZSByb290RWxlbWVudCBtdXN0IGJlIHNldCB0aGUganFMaXRlIGNvbGxlY3Rpb24gb2YgdGhlIGNvbXBpbGUgcm9vdC4gVGhpcyBpc1xuICAgICAqICAgICAgICBuZWVkZWQgc28gdGhhdCB0aGUganFMaXRlIGNvbGxlY3Rpb24gaXRlbXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggd2lkZ2V0cy5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG1heFByaW9yaXR5IE1heCBkaXJlY3RpdmUgcHJpb3JpdHkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGNvbXBvc2l0ZSBsaW5raW5nIGZ1bmN0aW9uIG9mIGFsbCBvZiB0aGUgbWF0Y2hlZCBkaXJlY3RpdmVzIG9yIG51bGwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGlsZU5vZGVzKG5vZGVMaXN0LCB0cmFuc2NsdWRlRm4sICRyb290RWxlbWVudCwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICB2YXIgbGlua0ZucyA9IFtdLFxuICAgICAgICAgIGF0dHJzLCBkaXJlY3RpdmVzLCBub2RlTGlua0ZuLCBjaGlsZE5vZGVzLCBjaGlsZExpbmtGbiwgbGlua0ZuRm91bmQsIG5vZGVMaW5rRm5Gb3VuZDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBhdHRycyA9IG5ldyBBdHRyaWJ1dGVzKCk7XG5cbiAgICAgICAgLy8gd2UgbXVzdCBhbHdheXMgcmVmZXIgdG8gbm9kZUxpc3RbaV0gc2luY2UgdGhlIG5vZGVzIGNhbiBiZSByZXBsYWNlZCB1bmRlcm5lYXRoIHVzLlxuICAgICAgICBkaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMobm9kZUxpc3RbaV0sIFtdLCBhdHRycywgaSA9PT0gMCA/IG1heFByaW9yaXR5IDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZURpcmVjdGl2ZSk7XG5cbiAgICAgICAgbm9kZUxpbmtGbiA9IChkaXJlY3RpdmVzLmxlbmd0aClcbiAgICAgICAgICAgID8gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIG5vZGVMaXN0W2ldLCBhdHRycywgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsIFtdLCBbXSwgcHJldmlvdXNDb21waWxlQ29udGV4dClcbiAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICBpZiAobm9kZUxpbmtGbiAmJiBub2RlTGlua0ZuLnNjb3BlKSB7XG4gICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoYXR0cnMuJCRlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkTGlua0ZuID0gKG5vZGVMaW5rRm4gJiYgbm9kZUxpbmtGbi50ZXJtaW5hbCB8fFxuICAgICAgICAgICAgICAgICAgICAgICEoY2hpbGROb2RlcyA9IG5vZGVMaXN0W2ldLmNoaWxkTm9kZXMpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgIWNoaWxkTm9kZXMubGVuZ3RoKVxuICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICA6IGNvbXBpbGVOb2RlcyhjaGlsZE5vZGVzLFxuICAgICAgICAgICAgICAgICBub2RlTGlua0ZuID8gKFxuICAgICAgICAgICAgICAgICAgKG5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQgfHwgIW5vZGVMaW5rRm4udGVtcGxhdGVPblRoaXNFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgJiYgbm9kZUxpbmtGbi50cmFuc2NsdWRlKSA6IHRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgaWYgKG5vZGVMaW5rRm4gfHwgY2hpbGRMaW5rRm4pIHtcbiAgICAgICAgICBsaW5rRm5zLnB1c2goaSwgbm9kZUxpbmtGbiwgY2hpbGRMaW5rRm4pO1xuICAgICAgICAgIGxpbmtGbkZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBub2RlTGlua0ZuRm91bmQgPSBub2RlTGlua0ZuRm91bmQgfHwgbm9kZUxpbmtGbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdXNlIHRoZSBwcmV2aW91cyBjb250ZXh0IG9ubHkgZm9yIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSB2aXJ0dWFsIGdyb3VwXG4gICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyByZXR1cm4gYSBsaW5raW5nIGZ1bmN0aW9uIGlmIHdlIGhhdmUgZm91bmQgYW55dGhpbmcsIG51bGwgb3RoZXJ3aXNlXG4gICAgICByZXR1cm4gbGlua0ZuRm91bmQgPyBjb21wb3NpdGVMaW5rRm4gOiBudWxsO1xuXG4gICAgICBmdW5jdGlvbiBjb21wb3NpdGVMaW5rRm4oc2NvcGUsIG5vZGVMaXN0LCAkcm9vdEVsZW1lbnQsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBub2RlTGlua0ZuLCBjaGlsZExpbmtGbiwgbm9kZSwgY2hpbGRTY29wZSwgaSwgaWksIGlkeCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbjtcbiAgICAgICAgdmFyIHN0YWJsZU5vZGVMaXN0O1xuXG5cbiAgICAgICAgaWYgKG5vZGVMaW5rRm5Gb3VuZCkge1xuICAgICAgICAgIC8vIGNvcHkgbm9kZUxpc3Qgc28gdGhhdCBpZiBhIG5vZGVMaW5rRm4gcmVtb3ZlcyBvciBhZGRzIGFuIGVsZW1lbnQgYXQgdGhpcyBET00gbGV2ZWwgb3VyXG4gICAgICAgICAgLy8gb2Zmc2V0cyBkb24ndCBnZXQgc2NyZXdlZCB1cFxuICAgICAgICAgIHZhciBub2RlTGlzdExlbmd0aCA9IG5vZGVMaXN0Lmxlbmd0aDtcbiAgICAgICAgICBzdGFibGVOb2RlTGlzdCA9IG5ldyBBcnJheShub2RlTGlzdExlbmd0aCk7XG5cbiAgICAgICAgICAvLyBjcmVhdGUgYSBzcGFyc2UgYXJyYXkgYnkgb25seSBjb3B5aW5nIHRoZSBlbGVtZW50cyB3aGljaCBoYXZlIGEgbGlua0ZuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpbmtGbnMubGVuZ3RoOyBpKz0zKSB7XG4gICAgICAgICAgICBpZHggPSBsaW5rRm5zW2ldO1xuICAgICAgICAgICAgc3RhYmxlTm9kZUxpc3RbaWR4XSA9IG5vZGVMaXN0W2lkeF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YWJsZU5vZGVMaXN0ID0gbm9kZUxpc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGxpbmtGbnMubGVuZ3RoOyBpIDwgaWk7KSB7XG4gICAgICAgICAgbm9kZSA9IHN0YWJsZU5vZGVMaXN0W2xpbmtGbnNbaSsrXV07XG4gICAgICAgICAgbm9kZUxpbmtGbiA9IGxpbmtGbnNbaSsrXTtcbiAgICAgICAgICBjaGlsZExpbmtGbiA9IGxpbmtGbnNbaSsrXTtcblxuICAgICAgICAgIGlmIChub2RlTGlua0ZuKSB7XG4gICAgICAgICAgICBpZiAobm9kZUxpbmtGbi5zY29wZSkge1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGUuJG5ldygpO1xuICAgICAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVJbmZvKGpxTGl0ZShub2RlKSwgY2hpbGRTY29wZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChub2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihcbiAgICAgICAgICAgICAgICAgIHNjb3BlLCBub2RlTGlua0ZuLnRyYW5zY2x1ZGUsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICghbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQgJiYgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiAmJiB0cmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgY2hpbGRTY29wZSwgbm9kZSwgJHJvb3RFbGVtZW50LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRMaW5rRm4pIHtcbiAgICAgICAgICAgIGNoaWxkTGlua0ZuKHNjb3BlLCBub2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4sIHByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4pIHtcblxuICAgICAgdmFyIGJvdW5kVHJhbnNjbHVkZUZuID0gZnVuY3Rpb24odHJhbnNjbHVkZWRTY29wZSwgY2xvbmVGbiwgY29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIGNvbnRhaW5pbmdTY29wZSkge1xuXG4gICAgICAgIGlmICghdHJhbnNjbHVkZWRTY29wZSkge1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUgPSBzY29wZS4kbmV3KGZhbHNlLCBjb250YWluaW5nU2NvcGUpO1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJCR0cmFuc2NsdWRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVkU2NvcGUsIGNsb25lRm4sIHtcbiAgICAgICAgICBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjogcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnM6IGNvbnRyb2xsZXJzLFxuICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQ6IGZ1dHVyZVBhcmVudEVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9va3MgZm9yIGRpcmVjdGl2ZXMgb24gdGhlIGdpdmVuIG5vZGUgYW5kIGFkZHMgdGhlbSB0byB0aGUgZGlyZWN0aXZlIGNvbGxlY3Rpb24gd2hpY2ggaXNcbiAgICAgKiBzb3J0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZSBOb2RlIHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0gZGlyZWN0aXZlcyBBbiBhcnJheSB0byB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYWRkZWQgdG8uIFRoaXMgYXJyYXkgaXMgc29ydGVkIGJlZm9yZVxuICAgICAqICAgICAgICB0aGUgZnVuY3Rpb24gcmV0dXJucy5cbiAgICAgKiBAcGFyYW0gYXR0cnMgVGhlIHNoYXJlZCBhdHRycyBvYmplY3Qgd2hpY2ggaXMgdXNlZCB0byBwb3B1bGF0ZSB0aGUgbm9ybWFsaXplZCBhdHRyaWJ1dGVzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb2xsZWN0RGlyZWN0aXZlcyhub2RlLCBkaXJlY3RpdmVzLCBhdHRycywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkge1xuICAgICAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZSxcbiAgICAgICAgICBhdHRyc01hcCA9IGF0dHJzLiRhdHRyLFxuICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgIGNsYXNzTmFtZTtcblxuICAgICAgc3dpdGNoIChub2RlVHlwZSkge1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9FTEVNRU5UOiAvKiBFbGVtZW50ICovXG4gICAgICAgICAgLy8gdXNlIHRoZSBub2RlIG5hbWU6IDxkaXJlY3RpdmU+XG4gICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsXG4gICAgICAgICAgICAgIGRpcmVjdGl2ZU5vcm1hbGl6ZShub2RlTmFtZV8obm9kZSkpLCAnRScsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpO1xuXG4gICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBhdHRyaWJ1dGVzXG4gICAgICAgICAgZm9yICh2YXIgYXR0ciwgbmFtZSwgbk5hbWUsIG5nQXR0ck5hbWUsIHZhbHVlLCBpc05nQXR0ciwgbkF0dHJzID0gbm9kZS5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgIGogPSAwLCBqaiA9IG5BdHRycyAmJiBuQXR0cnMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgdmFyIGF0dHJTdGFydE5hbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBhdHRyRW5kTmFtZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBhdHRyID0gbkF0dHJzW2pdO1xuICAgICAgICAgICAgbmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgICAgIHZhbHVlID0gdHJpbShhdHRyLnZhbHVlKTtcblxuICAgICAgICAgICAgLy8gc3VwcG9ydCBuZ0F0dHIgYXR0cmlidXRlIGJpbmRpbmdcbiAgICAgICAgICAgIG5nQXR0ck5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobmFtZSk7XG4gICAgICAgICAgICBpZiAoaXNOZ0F0dHIgPSBOR19BVFRSX0JJTkRJTkcudGVzdChuZ0F0dHJOYW1lKSkge1xuICAgICAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKFBSRUZJWF9SRUdFWFAsICcnKVxuICAgICAgICAgICAgICAgIC5zdWJzdHIoOCkucmVwbGFjZSgvXyguKS9nLCBmdW5jdGlvbihtYXRjaCwgbGV0dGVyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBtdWx0aUVsZW1lbnRNYXRjaCA9IG5nQXR0ck5hbWUubWF0Y2goTVVMVElfRUxFTUVOVF9ESVJfUkUpO1xuICAgICAgICAgICAgaWYgKG11bHRpRWxlbWVudE1hdGNoICYmIGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KG11bHRpRWxlbWVudE1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICBhdHRyU3RhcnROYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgYXR0ckVuZE5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDUpICsgJ2VuZCc7XG4gICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgYXR0cnNNYXBbbk5hbWVdID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChpc05nQXR0ciB8fCAhYXR0cnMuaGFzT3duUHJvcGVydHkobk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGdldEJvb2xlYW5BdHRyTmFtZShub2RlLCBuTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRydWU7IC8vIHByZXNlbmNlIG1lYW5zIHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUobm9kZSwgZGlyZWN0aXZlcywgdmFsdWUsIG5OYW1lLCBpc05nQXR0cik7XG4gICAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdBJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgYXR0clN0YXJ0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ckVuZE5hbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHVzZSBjbGFzcyBhcyBkaXJlY3RpdmVcbiAgICAgICAgICBjbGFzc05hbWUgPSBub2RlLmNsYXNzTmFtZTtcbiAgICAgICAgICBpZiAoaXNPYmplY3QoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAvLyBNYXliZSBTVkdBbmltYXRlZFN0cmluZ1xuICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUuYW5pbVZhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzU3RyaW5nKGNsYXNzTmFtZSkgJiYgY2xhc3NOYW1lICE9PSAnJykge1xuICAgICAgICAgICAgd2hpbGUgKG1hdGNoID0gQ0xBU1NfRElSRUNUSVZFX1JFR0VYUC5leGVjKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMl0pO1xuICAgICAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQycsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFszXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnN1YnN0cihtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9URVhUOiAvKiBUZXh0IE5vZGUgKi9cbiAgICAgICAgICBpZiAobXNpZSA9PT0gMTEpIHtcbiAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yICMxMTc4MVxuICAgICAgICAgICAgd2hpbGUgKG5vZGUucGFyZW50Tm9kZSAmJiBub2RlLm5leHRTaWJsaW5nICYmIG5vZGUubmV4dFNpYmxpbmcubm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUKSB7XG4gICAgICAgICAgICAgIG5vZGUubm9kZVZhbHVlID0gbm9kZS5ub2RlVmFsdWUgKyBub2RlLm5leHRTaWJsaW5nLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgbm9kZS5ub2RlVmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9DT01NRU5UOiAvKiBDb21tZW50ICovXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG1hdGNoID0gQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMobm9kZS5ub2RlVmFsdWUpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzFdKTtcbiAgICAgICAgICAgICAgaWYgKGFkZERpcmVjdGl2ZShkaXJlY3RpdmVzLCBuTmFtZSwgJ00nLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbMl0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gdHVybnMgb3V0IHRoYXQgdW5kZXIgc29tZSBjaXJjdW1zdGFuY2VzIElFOSB0aHJvd3MgZXJyb3JzIHdoZW4gb25lIGF0dGVtcHRzIHRvIHJlYWRcbiAgICAgICAgICAgIC8vIGNvbW1lbnQncyBub2RlIHZhbHVlLlxuICAgICAgICAgICAgLy8gSnVzdCBpZ25vcmUgaXQgYW5kIGNvbnRpbnVlLiAoQ2FuJ3Qgc2VlbSB0byByZXByb2R1Y2UgaW4gdGVzdCBjYXNlLilcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRpcmVjdGl2ZXMuc29ydChieVByaW9yaXR5KTtcbiAgICAgIHJldHVybiBkaXJlY3RpdmVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgbm9kZSB3aXRoIGFuIGRpcmVjdGl2ZS1zdGFydCBpdCBjb2xsZWN0cyBhbGwgb2YgdGhlIHNpYmxpbmdzIHVudGlsIGl0IGZpbmRzXG4gICAgICogZGlyZWN0aXZlLWVuZC5cbiAgICAgKiBAcGFyYW0gbm9kZVxuICAgICAqIEBwYXJhbSBhdHRyU3RhcnRcbiAgICAgKiBAcGFyYW0gYXR0ckVuZFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdyb3VwU2Nhbihub2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgdmFyIGRlcHRoID0gMDtcbiAgICAgIGlmIChhdHRyU3RhcnQgJiYgbm9kZS5oYXNBdHRyaWJ1dGUgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoYXR0clN0YXJ0KSkge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndXRlcmRpcicsXG4gICAgICAgICAgICAgICAgICAgICAgXCJVbnRlcm1pbmF0ZWQgYXR0cmlidXRlLCBmb3VuZCAnezB9JyBidXQgbm8gbWF0Y2hpbmcgJ3sxfScgZm91bmQuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyU3RhcnQpKSBkZXB0aCsrO1xuICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKGF0dHJFbmQpKSBkZXB0aC0tO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICB9IHdoaWxlIChkZXB0aCA+IDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGpxTGl0ZShub2Rlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV3JhcHBlciBmb3IgbGlua2luZyBmdW5jdGlvbiB3aGljaCBjb252ZXJ0cyBub3JtYWwgbGlua2luZyBmdW5jdGlvbiBpbnRvIGEgZ3JvdXBlZFxuICAgICAqIGxpbmtpbmcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIGxpbmtGblxuICAgICAqIEBwYXJhbSBhdHRyU3RhcnRcbiAgICAgKiBAcGFyYW0gYXR0ckVuZFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihsaW5rRm4sIGF0dHJTdGFydCwgYXR0ckVuZCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbikge1xuICAgICAgICBlbGVtZW50ID0gZ3JvdXBTY2FuKGVsZW1lbnRbMF0sIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgIHJldHVybiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT25jZSB0aGUgZGlyZWN0aXZlcyBoYXZlIGJlZW4gY29sbGVjdGVkLCB0aGVpciBjb21waWxlIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQuIFRoaXMgbWV0aG9kXG4gICAgICogaXMgcmVzcG9uc2libGUgZm9yIGlubGluaW5nIGRpcmVjdGl2ZSB0ZW1wbGF0ZXMgYXMgd2VsbCBhcyB0ZXJtaW5hdGluZyB0aGUgYXBwbGljYXRpb25cbiAgICAgKiBvZiB0aGUgZGlyZWN0aXZlcyBpZiB0aGUgdGVybWluYWwgZGlyZWN0aXZlIGhhcyBiZWVuIHJlYWNoZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkaXJlY3RpdmVzIEFycmF5IG9mIGNvbGxlY3RlZCBkaXJlY3RpdmVzIHRvIGV4ZWN1dGUgdGhlaXIgY29tcGlsZSBmdW5jdGlvbi5cbiAgICAgKiAgICAgICAgdGhpcyBuZWVkcyB0byBiZSBwcmUtc29ydGVkIGJ5IHByaW9yaXR5IG9yZGVyLlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gY29tcGlsZU5vZGUgVGhlIHJhdyBET00gbm9kZSB0byBhcHBseSB0aGUgY29tcGlsZSBmdW5jdGlvbnMgdG9cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVBdHRycyBUaGUgc2hhcmVkIGF0dHJpYnV0ZSBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZSwgY2xvbmVBdHRhY2hGbj0pfSB0cmFuc2NsdWRlRm4gQSBsaW5raW5nIGZ1bmN0aW9uLCB3aGVyZSB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUgYXJndW1lbnQgaXMgYXV0by1nZW5lcmF0ZWQgdG8gdGhlIG5ld1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCBvZiB0aGUgdHJhbnNjbHVkZWQgcGFyZW50IHNjb3BlLlxuICAgICAqIEBwYXJhbSB7SlFMaXRlfSBqcUNvbGxlY3Rpb24gSWYgd2UgYXJlIHdvcmtpbmcgb24gdGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGUgdHJlZSB0aGVuIHRoaXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50IGhhcyB0aGUgcm9vdCBqcUxpdGUgYXJyYXkgc28gdGhhdCB3ZSBjYW4gcmVwbGFjZSBub2Rlc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gaXQuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcmlnaW5hbFJlcGxhY2VEaXJlY3RpdmUgQW4gb3B0aW9uYWwgZGlyZWN0aXZlIHRoYXQgd2lsbCBiZSBpZ25vcmVkIHdoZW5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21waWxpbmcgdGhlIHRyYW5zY2x1c2lvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5LjxGdW5jdGlvbj59IHByZUxpbmtGbnNcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxGdW5jdGlvbj59IHBvc3RMaW5rRm5zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQgQ29udGV4dCB1c2VkIGZvciBwcmV2aW91cyBjb21waWxhdGlvbiBvZiB0aGUgY3VycmVudFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IGxpbmtGblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgdHJhbnNjbHVkZUZuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqcUNvbGxlY3Rpb24sIG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0IHx8IHt9O1xuXG4gICAgICB2YXIgdGVybWluYWxQcmlvcml0eSA9IC1OdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5uZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlcyA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQuY29udHJvbGxlckRpcmVjdGl2ZXMsXG4gICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5uZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0LnRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IGZhbHNlLFxuICAgICAgICAgIGhhc1RlbXBsYXRlID0gZmFsc2UsXG4gICAgICAgICAgaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID0ganFMaXRlKGNvbXBpbGVOb2RlKSxcbiAgICAgICAgICBkaXJlY3RpdmUsXG4gICAgICAgICAgZGlyZWN0aXZlTmFtZSxcbiAgICAgICAgICAkdGVtcGxhdGUsXG4gICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSxcbiAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiA9IHRyYW5zY2x1ZGVGbixcbiAgICAgICAgICBsaW5rRm4sXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWU7XG5cbiAgICAgIC8vIGV4ZWN1dGVzIGFsbCBkaXJlY3RpdmVzIG9uIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICB2YXIgYXR0clN0YXJ0ID0gZGlyZWN0aXZlLiQkc3RhcnQ7XG4gICAgICAgIHZhciBhdHRyRW5kID0gZGlyZWN0aXZlLiQkZW5kO1xuXG4gICAgICAgIC8vIGNvbGxlY3QgbXVsdGlibG9jayBzZWN0aW9uc1xuICAgICAgICBpZiAoYXR0clN0YXJ0KSB7XG4gICAgICAgICAgJGNvbXBpbGVOb2RlID0gZ3JvdXBTY2FuKGNvbXBpbGVOb2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICB9XG4gICAgICAgICR0ZW1wbGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAodGVybWluYWxQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkge1xuICAgICAgICAgIGJyZWFrOyAvLyBwcmV2ZW50IGZ1cnRoZXIgcHJvY2Vzc2luZyBvZiBkaXJlY3RpdmVzXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUuc2NvcGUpIHtcblxuICAgICAgICAgIC8vIHNraXAgdGhlIGNoZWNrIGZvciBkaXJlY3RpdmVzIHdpdGggYXN5bmMgdGVtcGxhdGVzLCB3ZSdsbCBjaGVjayB0aGUgZGVyaXZlZCBzeW5jXG4gICAgICAgICAgLy8gZGlyZWN0aXZlIHdoZW4gdGhlIHRlbXBsYXRlIGFycml2ZXNcbiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGFuIGlzb2xhdGVkIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZXJlIGlzIG5vIHNjb3BlIG9mIGFueSBraW5kIGFscmVhZHlcbiAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ25ldy9pc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBuZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGEgY2hpbGQgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlcmUgaXMgbm8gaXNvbGF0ZWQgc2NvcGUgYWxyZWFkeVxuICAgICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnbmV3L2lzb2xhdGVkIHNjb3BlJywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLCBkaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBuZXdTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlLm5hbWU7XG5cbiAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwgJiYgZGlyZWN0aXZlLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS5jb250cm9sbGVyO1xuICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzID0gY29udHJvbGxlckRpcmVjdGl2ZXMgfHwgY3JlYXRlTWFwKCk7XG4gICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoXCInXCIgKyBkaXJlY3RpdmVOYW1lICsgXCInIGNvbnRyb2xsZXJcIixcbiAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0sIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS50cmFuc2NsdWRlKSB7XG4gICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgbmdJZiBhbmQgbmdSZXBlYXQgc28gdGhhdCB3ZSBkb24ndCBjb21wbGFpbiBhYm91dCBkdXBsaWNhdGUgdHJhbnNjbHVzaW9uLlxuICAgICAgICAgIC8vIFRoaXMgb3B0aW9uIHNob3VsZCBvbmx5IGJlIHVzZWQgYnkgZGlyZWN0aXZlcyB0aGF0IGtub3cgaG93IHRvIHNhZmVseSBoYW5kbGUgZWxlbWVudCB0cmFuc2NsdXNpb24sXG4gICAgICAgICAgLy8gd2hlcmUgdGhlIHRyYW5zY2x1ZGVkIG5vZGVzIGFyZSBhZGRlZCBvciByZXBsYWNlZCBhZnRlciBsaW5raW5nLlxuICAgICAgICAgIGlmICghZGlyZWN0aXZlLiQkdGxiKSB7XG4gICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndHJhbnNjbHVzaW9uJywgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPT0gJ2VsZW1lbnQnKSB7XG4gICAgICAgICAgICBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5O1xuICAgICAgICAgICAgJHRlbXBsYXRlID0gJGNvbXBpbGVOb2RlO1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPVxuICAgICAgICAgICAgICAgIGpxTGl0ZShkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgJyArIGRpcmVjdGl2ZU5hbWUgKyAnOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZUF0dHJzW2RpcmVjdGl2ZU5hbWVdICsgJyAnKSk7XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXTtcbiAgICAgICAgICAgIHJlcGxhY2VXaXRoKGpxQ29sbGVjdGlvbiwgc2xpY2VBcmdzKCR0ZW1wbGF0ZSksIGNvbXBpbGVOb2RlKTtcblxuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuLCB0ZXJtaW5hbFByaW9yaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgJiYgcmVwbGFjZURpcmVjdGl2ZS5uYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBwYXNzIGluOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBjb250cm9sbGVyRGlyZWN0aXZlcyAtIG90aGVyd2lzZSB3ZSdsbCBjcmVhdGUgZHVwbGljYXRlcyBjb250cm9sbGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgb3IgdGVtcGxhdGVEaXJlY3RpdmUgLSBjb21iaW5pbmcgdGVtcGxhdGVzIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZWxlbWVudCB0cmFuc2NsdXNpb24gZG9lc24ndCBtYWtlIHNlbnNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgb25seSBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlIHNvIHRoYXQgd2UgcHJldmVudCBwdXR0aW5nIHRyYW5zY2x1c2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb24gdGhlIHNhbWUgZWxlbWVudCBtb3JlIHRoYW4gb25jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHRlbXBsYXRlID0ganFMaXRlKGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKSkuY29udGVudHMoKTtcbiAgICAgICAgICAgICRjb21waWxlTm9kZS5lbXB0eSgpOyAvLyBjbGVhciBjb250ZW50c1xuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuLCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLCB7IG5lZWRzTmV3U2NvcGU6IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSB8fCBkaXJlY3RpdmUuJCRuZXdTY29wZX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmUudGVtcGxhdGUpIHtcbiAgICAgICAgICBoYXNUZW1wbGF0ZSA9IHRydWU7XG4gICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RlbXBsYXRlJywgdGVtcGxhdGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcblxuICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlID0gKGlzRnVuY3Rpb24oZGlyZWN0aXZlLnRlbXBsYXRlKSlcbiAgICAgICAgICAgICAgPyBkaXJlY3RpdmUudGVtcGxhdGUoJGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzKVxuICAgICAgICAgICAgICA6IGRpcmVjdGl2ZS50ZW1wbGF0ZTtcblxuICAgICAgICAgIGRpcmVjdGl2ZVZhbHVlID0gZGVub3JtYWxpemVUZW1wbGF0ZShkaXJlY3RpdmVWYWx1ZSk7XG5cbiAgICAgICAgICBpZiAoZGlyZWN0aXZlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgICBpZiAoanFMaXRlSXNUZXh0Tm9kZShkaXJlY3RpdmVWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gW107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSByZW1vdmVDb21tZW50cyh3cmFwVGVtcGxhdGUoZGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlLCB0cmltKGRpcmVjdGl2ZVZhbHVlKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkdGVtcGxhdGVbMF07XG5cbiAgICAgICAgICAgIGlmICgkdGVtcGxhdGUubGVuZ3RoICE9IDEgfHwgY29tcGlsZU5vZGUubm9kZVR5cGUgIT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCd0cGxydCcsXG4gICAgICAgICAgICAgICAgICBcIlRlbXBsYXRlIGZvciBkaXJlY3RpdmUgJ3swfScgbXVzdCBoYXZlIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gezF9XCIsXG4gICAgICAgICAgICAgICAgICBkaXJlY3RpdmVOYW1lLCAnJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlcGxhY2VXaXRoKGpxQ29sbGVjdGlvbiwgJGNvbXBpbGVOb2RlLCBjb21waWxlTm9kZSk7XG5cbiAgICAgICAgICAgIHZhciBuZXdUZW1wbGF0ZUF0dHJzID0geyRhdHRyOiB7fX07XG5cbiAgICAgICAgICAgIC8vIGNvbWJpbmUgZGlyZWN0aXZlcyBmcm9tIHRoZSBvcmlnaW5hbCBub2RlIGFuZCBmcm9tIHRoZSB0ZW1wbGF0ZTpcbiAgICAgICAgICAgIC8vIC0gdGFrZSB0aGUgYXJyYXkgb2YgZGlyZWN0aXZlcyBmb3IgdGhpcyBlbGVtZW50XG4gICAgICAgICAgICAvLyAtIHNwbGl0IGl0IGludG8gdHdvIHBhcnRzLCB0aG9zZSB0aGF0IGFscmVhZHkgYXBwbGllZCAocHJvY2Vzc2VkKSBhbmQgdGhvc2UgdGhhdCB3ZXJlbid0ICh1bnByb2Nlc3NlZClcbiAgICAgICAgICAgIC8vIC0gY29sbGVjdCBkaXJlY3RpdmVzIGZyb20gdGhlIHRlbXBsYXRlIGFuZCBzb3J0IHRoZW0gYnkgcHJpb3JpdHlcbiAgICAgICAgICAgIC8vIC0gY29tYmluZSBkaXJlY3RpdmVzIGFzOiBwcm9jZXNzZWQgKyB0ZW1wbGF0ZSArIHVucHJvY2Vzc2VkXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMoY29tcGlsZU5vZGUsIFtdLCBuZXdUZW1wbGF0ZUF0dHJzKTtcbiAgICAgICAgICAgIHZhciB1bnByb2Nlc3NlZERpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLnNwbGljZShpICsgMSwgZGlyZWN0aXZlcy5sZW5ndGggLSAoaSArIDEpKTtcblxuICAgICAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBuZXdTY29wZURpcmVjdGl2ZSkge1xuICAgICAgICAgICAgICAvLyBUaGUgb3JpZ2luYWwgZGlyZWN0aXZlIGNhdXNlZCB0aGUgY3VycmVudCBlbGVtZW50IHRvIGJlIHJlcGxhY2VkIGJ1dCB0aGlzIGVsZW1lbnRcbiAgICAgICAgICAgICAgLy8gYWxzbyBuZWVkcyB0byBoYXZlIGEgbmV3IHNjb3BlLCBzbyB3ZSBuZWVkIHRvIHRlbGwgdGhlIHRlbXBsYXRlIGRpcmVjdGl2ZXNcbiAgICAgICAgICAgICAgLy8gdGhhdCB0aGV5IHdvdWxkIG5lZWQgdG8gZ2V0IHRoZWlyIHNjb3BlIGZyb20gZnVydGhlciB1cCwgaWYgdGhleSByZXF1aXJlIHRyYW5zY2x1c2lvblxuICAgICAgICAgICAgICBtYXJrRGlyZWN0aXZlU2NvcGUodGVtcGxhdGVEaXJlY3RpdmVzLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsIG5ld1Njb3BlRGlyZWN0aXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLmNvbmNhdCh0ZW1wbGF0ZURpcmVjdGl2ZXMpLmNvbmNhdCh1bnByb2Nlc3NlZERpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXModGVtcGxhdGVBdHRycywgbmV3VGVtcGxhdGVBdHRycyk7XG5cbiAgICAgICAgICAgIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKGRpcmVjdGl2ZVZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlVXJsKSB7XG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0ZW1wbGF0ZScsIHRlbXBsYXRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG5cbiAgICAgICAgICBpZiAoZGlyZWN0aXZlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbm9kZUxpbmtGbiA9IGNvbXBpbGVUZW1wbGF0ZVVybChkaXJlY3RpdmVzLnNwbGljZShpLCBkaXJlY3RpdmVzLmxlbmd0aCAtIGkpLCAkY29tcGlsZU5vZGUsXG4gICAgICAgICAgICAgIHRlbXBsYXRlQXR0cnMsIGpxQ29sbGVjdGlvbiwgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSAmJiBjaGlsZFRyYW5zY2x1ZGVGbiwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlczogY29udHJvbGxlckRpcmVjdGl2ZXMsXG4gICAgICAgICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmU6IChuZXdTY29wZURpcmVjdGl2ZSAhPT0gZGlyZWN0aXZlKSAmJiBuZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmU6IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZTogdGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZTogbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoO1xuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGl2ZS5jb21waWxlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxpbmtGbiA9IGRpcmVjdGl2ZS5jb21waWxlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycywgY2hpbGRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlua0ZuKSkge1xuICAgICAgICAgICAgICBhZGRMaW5rRm5zKG51bGwsIGxpbmtGbiwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlua0ZuKSB7XG4gICAgICAgICAgICAgIGFkZExpbmtGbnMobGlua0ZuLnByZSwgbGlua0ZuLnBvc3QsIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSwgc3RhcnRpbmdUYWcoJGNvbXBpbGVOb2RlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZXJtaW5hbCkge1xuICAgICAgICAgIG5vZGVMaW5rRm4udGVybWluYWwgPSB0cnVlO1xuICAgICAgICAgIHRlcm1pbmFsUHJpb3JpdHkgPSBNYXRoLm1heCh0ZXJtaW5hbFByaW9yaXR5LCBkaXJlY3RpdmUucHJpb3JpdHkpO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgbm9kZUxpbmtGbi5zY29wZSA9IG5ld1Njb3BlRGlyZWN0aXZlICYmIG5ld1Njb3BlRGlyZWN0aXZlLnNjb3BlID09PSB0cnVlO1xuICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCA9IGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmU7XG4gICAgICBub2RlTGlua0ZuLnRlbXBsYXRlT25UaGlzRWxlbWVudCA9IGhhc1RlbXBsYXRlO1xuICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlID0gY2hpbGRUcmFuc2NsdWRlRm47XG5cbiAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZTtcblxuICAgICAgLy8gbWlnaHQgYmUgbm9ybWFsIG9yIGRlbGF5ZWQgbm9kZUxpbmtGbiBkZXBlbmRpbmcgb24gaWYgdGVtcGxhdGVVcmwgaXMgcHJlc2VudFxuICAgICAgcmV0dXJuIG5vZGVMaW5rRm47XG5cbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgIGZ1bmN0aW9uIGFkZExpbmtGbnMocHJlLCBwb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgICAgaWYgKHByZSkge1xuICAgICAgICAgIGlmIChhdHRyU3RhcnQpIHByZSA9IGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKHByZSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICBwcmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlO1xuICAgICAgICAgIHByZS5kaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTmFtZTtcbiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID09PSBkaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlKSB7XG4gICAgICAgICAgICBwcmUgPSBjbG9uZUFuZEFubm90YXRlRm4ocHJlLCB7aXNvbGF0ZVNjb3BlOiB0cnVlfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZUxpbmtGbnMucHVzaChwcmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3N0KSB7XG4gICAgICAgICAgaWYgKGF0dHJTdGFydCkgcG9zdCA9IGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKHBvc3QsIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgcG9zdC5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmU7XG4gICAgICAgICAgcG9zdC5kaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTmFtZTtcbiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID09PSBkaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlKSB7XG4gICAgICAgICAgICBwb3N0ID0gY2xvbmVBbmRBbm5vdGF0ZUZuKHBvc3QsIHtpc29sYXRlU2NvcGU6IHRydWV9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9zdExpbmtGbnMucHVzaChwb3N0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIGZ1bmN0aW9uIGdldENvbnRyb2xsZXJzKGRpcmVjdGl2ZU5hbWUsIHJlcXVpcmUsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpIHtcbiAgICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICAgIGlmIChpc1N0cmluZyhyZXF1aXJlKSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IHJlcXVpcmUubWF0Y2goUkVRVUlSRV9QUkVGSVhfUkVHRVhQKTtcbiAgICAgICAgICB2YXIgbmFtZSA9IHJlcXVpcmUuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgdmFyIGluaGVyaXRUeXBlID0gbWF0Y2hbMV0gfHwgbWF0Y2hbM107XG4gICAgICAgICAgdmFyIG9wdGlvbmFsID0gbWF0Y2hbMl0gPT09ICc/JztcblxuICAgICAgICAgIC8vSWYgb25seSBwYXJlbnRzIHRoZW4gc3RhcnQgYXQgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICAgICAgaWYgKGluaGVyaXRUeXBlID09PSAnXl4nKSB7XG4gICAgICAgICAgICAkZWxlbWVudCA9ICRlbGVtZW50LnBhcmVudCgpO1xuICAgICAgICAgIC8vT3RoZXJ3aXNlIGF0dGVtcHQgZ2V0dGluZyB0aGUgY29udHJvbGxlciBmcm9tIGVsZW1lbnRDb250cm9sbGVycyBpbiBjYXNlXG4gICAgICAgICAgLy90aGUgZWxlbWVudCBpcyB0cmFuc2NsdWRlZCAoYW5kIGhhcyBubyBkYXRhKSBhbmQgdG8gYXZvaWQgLmRhdGEgaWYgcG9zc2libGVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBlbGVtZW50Q29udHJvbGxlcnMgJiYgZWxlbWVudENvbnRyb2xsZXJzW25hbWVdO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAmJiB2YWx1ZS5pbnN0YW5jZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZGF0YU5hbWUgPSAnJCcgKyBuYW1lICsgJ0NvbnRyb2xsZXInO1xuICAgICAgICAgICAgdmFsdWUgPSBpbmhlcml0VHlwZSA/ICRlbGVtZW50LmluaGVyaXRlZERhdGEoZGF0YU5hbWUpIDogJGVsZW1lbnQuZGF0YShkYXRhTmFtZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF2YWx1ZSAmJiAhb3B0aW9uYWwpIHtcbiAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdjdHJlcScsXG4gICAgICAgICAgICAgICAgXCJDb250cm9sbGVyICd7MH0nLCByZXF1aXJlZCBieSBkaXJlY3RpdmUgJ3sxfScsIGNhbid0IGJlIGZvdW5kIVwiLFxuICAgICAgICAgICAgICAgIG5hbWUsIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KHJlcXVpcmUpKSB7XG4gICAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSByZXF1aXJlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIHZhbHVlW2ldID0gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgcmVxdWlyZVtpXSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldHVwQ29udHJvbGxlcnMoJGVsZW1lbnQsIGF0dHJzLCB0cmFuc2NsdWRlRm4sIGNvbnRyb2xsZXJEaXJlY3RpdmVzLCBpc29sYXRlU2NvcGUsIHNjb3BlKSB7XG4gICAgICAgIHZhciBlbGVtZW50Q29udHJvbGxlcnMgPSBjcmVhdGVNYXAoKTtcbiAgICAgICAgZm9yICh2YXIgY29udHJvbGxlcktleSBpbiBjb250cm9sbGVyRGlyZWN0aXZlcykge1xuICAgICAgICAgIHZhciBkaXJlY3RpdmUgPSBjb250cm9sbGVyRGlyZWN0aXZlc1tjb250cm9sbGVyS2V5XTtcbiAgICAgICAgICB2YXIgbG9jYWxzID0ge1xuICAgICAgICAgICAgJHNjb3BlOiBkaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUgPyBpc29sYXRlU2NvcGUgOiBzY29wZSxcbiAgICAgICAgICAgICRlbGVtZW50OiAkZWxlbWVudCxcbiAgICAgICAgICAgICRhdHRyczogYXR0cnMsXG4gICAgICAgICAgICAkdHJhbnNjbHVkZTogdHJhbnNjbHVkZUZuXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciBjb250cm9sbGVyID0gZGlyZWN0aXZlLmNvbnRyb2xsZXI7XG4gICAgICAgICAgaWYgKGNvbnRyb2xsZXIgPT0gJ0AnKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyID0gYXR0cnNbZGlyZWN0aXZlLm5hbWVdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSAkY29udHJvbGxlcihjb250cm9sbGVyLCBsb2NhbHMsIHRydWUsIGRpcmVjdGl2ZS5jb250cm9sbGVyQXMpO1xuXG4gICAgICAgICAgLy8gRm9yIGRpcmVjdGl2ZXMgd2l0aCBlbGVtZW50IHRyYW5zY2x1c2lvbiB0aGUgZWxlbWVudCBpcyBhIGNvbW1lbnQsXG4gICAgICAgICAgLy8gYnV0IGpRdWVyeSAuZGF0YSBkb2Vzbid0IHN1cHBvcnQgYXR0YWNoaW5nIGRhdGEgdG8gY29tbWVudCBub2RlcyBhcyBpdCdzIGhhcmQgdG9cbiAgICAgICAgICAvLyBjbGVhbiB1cCAoaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvODMzNSkuXG4gICAgICAgICAgLy8gSW5zdGVhZCwgd2Ugc2F2ZSB0aGUgY29udHJvbGxlcnMgZm9yIHRoZSBlbGVtZW50IGluIGEgbG9jYWwgaGFzaCBhbmQgYXR0YWNoIHRvIC5kYXRhXG4gICAgICAgICAgLy8gbGF0ZXIsIG9uY2Ugd2UgaGF2ZSB0aGUgYWN0dWFsIGVsZW1lbnQuXG4gICAgICAgICAgZWxlbWVudENvbnRyb2xsZXJzW2RpcmVjdGl2ZS5uYW1lXSA9IGNvbnRyb2xsZXJJbnN0YW5jZTtcbiAgICAgICAgICBpZiAoIWhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5kYXRhKCckJyArIGRpcmVjdGl2ZS5uYW1lICsgJ0NvbnRyb2xsZXInLCBjb250cm9sbGVySW5zdGFuY2UuaW5zdGFuY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudENvbnRyb2xsZXJzO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdmFyIGxpbmtGbiwgaXNvbGF0ZVNjb3BlLCBjb250cm9sbGVyU2NvcGUsIGVsZW1lbnRDb250cm9sbGVycywgdHJhbnNjbHVkZUZuLCAkZWxlbWVudCxcbiAgICAgICAgICAgIGF0dHJzLCByZW1vdmVTY29wZUJpbmRpbmdXYXRjaGVzLCByZW1vdmVDb250cm9sbGVyQmluZGluZ1dhdGNoZXM7XG5cbiAgICAgICAgaWYgKGNvbXBpbGVOb2RlID09PSBsaW5rTm9kZSkge1xuICAgICAgICAgIGF0dHJzID0gdGVtcGxhdGVBdHRycztcbiAgICAgICAgICAkZWxlbWVudCA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRlbGVtZW50ID0ganFMaXRlKGxpbmtOb2RlKTtcbiAgICAgICAgICBhdHRycyA9IG5ldyBBdHRyaWJ1dGVzKCRlbGVtZW50LCB0ZW1wbGF0ZUF0dHJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRyb2xsZXJTY29wZSA9IHNjb3BlO1xuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgaXNvbGF0ZVNjb3BlID0gc2NvcGUuJG5ldyh0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChuZXdTY29wZURpcmVjdGl2ZSkge1xuICAgICAgICAgIGNvbnRyb2xsZXJTY29wZSA9IHNjb3BlLiRwYXJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAvLyB0cmFjayBgYm91bmRUcmFuc2NsdWRlRm5gIHNvIGl0IGNhbiBiZSB1bndyYXBwZWQgaWYgYHRyYW5zY2x1ZGVGbmBcbiAgICAgICAgICAvLyBpcyBsYXRlciBwYXNzZWQgYXMgYHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuYCB0byBgcHVibGljTGlua0ZuYFxuICAgICAgICAgIHRyYW5zY2x1ZGVGbiA9IGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlO1xuICAgICAgICAgIHRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZSA9IGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRyb2xsZXJEaXJlY3RpdmVzKSB7XG4gICAgICAgICAgZWxlbWVudENvbnRyb2xsZXJzID0gc2V0dXBDb250cm9sbGVycygkZWxlbWVudCwgYXR0cnMsIHRyYW5zY2x1ZGVGbiwgY29udHJvbGxlckRpcmVjdGl2ZXMsIGlzb2xhdGVTY29wZSwgc2NvcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSkge1xuICAgICAgICAgIC8vIEluaXRpYWxpemUgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBmb3IgbmV3IGlzb2xhdGUgc2NvcGUgZGlyZWN0aXZlLlxuICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oJGVsZW1lbnQsIGlzb2xhdGVTY29wZSwgdHJ1ZSwgISh0ZW1wbGF0ZURpcmVjdGl2ZSAmJiAodGVtcGxhdGVEaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fFxuICAgICAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLiQkb3JpZ2luYWxEaXJlY3RpdmUpKSk7XG4gICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoJGVsZW1lbnQsIHRydWUpO1xuICAgICAgICAgIGlzb2xhdGVTY29wZS4kJGlzb2xhdGVCaW5kaW5ncyA9XG4gICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncztcbiAgICAgICAgICByZW1vdmVTY29wZUJpbmRpbmdXYXRjaGVzID0gaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKHNjb3BlLCBhdHRycywgaXNvbGF0ZVNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGVTY29wZS4kJGlzb2xhdGVCaW5kaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpO1xuICAgICAgICAgIGlmIChyZW1vdmVTY29wZUJpbmRpbmdXYXRjaGVzKSB7XG4gICAgICAgICAgICBpc29sYXRlU2NvcGUuJG9uKCckZGVzdHJveScsIHJlbW92ZVNjb3BlQmluZGluZ1dhdGNoZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemUgYmluZFRvQ29udHJvbGxlciBiaW5kaW5nc1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIGVsZW1lbnRDb250cm9sbGVycykge1xuICAgICAgICAgIHZhciBjb250cm9sbGVyRGlyZWN0aXZlID0gY29udHJvbGxlckRpcmVjdGl2ZXNbbmFtZV07XG4gICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBlbGVtZW50Q29udHJvbGxlcnNbbmFtZV07XG4gICAgICAgICAgdmFyIGJpbmRpbmdzID0gY29udHJvbGxlckRpcmVjdGl2ZS4kJGJpbmRpbmdzLmJpbmRUb0NvbnRyb2xsZXI7XG5cbiAgICAgICAgICBpZiAoY29udHJvbGxlci5pZGVudGlmaWVyICYmIGJpbmRpbmdzKSB7XG4gICAgICAgICAgICByZW1vdmVDb250cm9sbGVyQmluZGluZ1dhdGNoZXMgPVxuICAgICAgICAgICAgICBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3MoY29udHJvbGxlclNjb3BlLCBhdHRycywgY29udHJvbGxlci5pbnN0YW5jZSwgYmluZGluZ3MsIGNvbnRyb2xsZXJEaXJlY3RpdmUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjb250cm9sbGVyUmVzdWx0ID0gY29udHJvbGxlcigpO1xuICAgICAgICAgIGlmIChjb250cm9sbGVyUmVzdWx0ICE9PSBjb250cm9sbGVyLmluc3RhbmNlKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgY29udHJvbGxlciBjb25zdHJ1Y3RvciBoYXMgYSByZXR1cm4gdmFsdWUsIG92ZXJ3cml0ZSB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgIC8vIGZyb20gc2V0dXBDb250cm9sbGVyc1xuICAgICAgICAgICAgY29udHJvbGxlci5pbnN0YW5jZSA9IGNvbnRyb2xsZXJSZXN1bHQ7XG4gICAgICAgICAgICAkZWxlbWVudC5kYXRhKCckJyArIGNvbnRyb2xsZXJEaXJlY3RpdmUubmFtZSArICdDb250cm9sbGVyJywgY29udHJvbGxlclJlc3VsdCk7XG4gICAgICAgICAgICByZW1vdmVDb250cm9sbGVyQmluZGluZ1dhdGNoZXMgJiYgcmVtb3ZlQ29udHJvbGxlckJpbmRpbmdXYXRjaGVzKCk7XG4gICAgICAgICAgICByZW1vdmVDb250cm9sbGVyQmluZGluZ1dhdGNoZXMgPVxuICAgICAgICAgICAgICBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3MoY29udHJvbGxlclNjb3BlLCBhdHRycywgY29udHJvbGxlci5pbnN0YW5jZSwgYmluZGluZ3MsIGNvbnRyb2xsZXJEaXJlY3RpdmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBSRUxJTktJTkdcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBwcmVMaW5rRm5zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBsaW5rRm4gPSBwcmVMaW5rRm5zW2ldO1xuICAgICAgICAgIGludm9rZUxpbmtGbihsaW5rRm4sXG4gICAgICAgICAgICAgIGxpbmtGbi5pc29sYXRlU2NvcGUgPyBpc29sYXRlU2NvcGUgOiBzY29wZSxcbiAgICAgICAgICAgICAgJGVsZW1lbnQsXG4gICAgICAgICAgICAgIGF0dHJzLFxuICAgICAgICAgICAgICBsaW5rRm4ucmVxdWlyZSAmJiBnZXRDb250cm9sbGVycyhsaW5rRm4uZGlyZWN0aXZlTmFtZSwgbGlua0ZuLnJlcXVpcmUsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpLFxuICAgICAgICAgICAgICB0cmFuc2NsdWRlRm5cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUkVDVVJTSU9OXG4gICAgICAgIC8vIFdlIG9ubHkgcGFzcyB0aGUgaXNvbGF0ZSBzY29wZSwgaWYgdGhlIGlzb2xhdGUgZGlyZWN0aXZlIGhhcyBhIHRlbXBsYXRlLFxuICAgICAgICAvLyBvdGhlcndpc2UgdGhlIGNoaWxkIGVsZW1lbnRzIGRvIG5vdCBiZWxvbmcgdG8gdGhlIGlzb2xhdGUgZGlyZWN0aXZlLlxuICAgICAgICB2YXIgc2NvcGVUb0NoaWxkID0gc2NvcGU7XG4gICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgJiYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS50ZW1wbGF0ZSB8fCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUudGVtcGxhdGVVcmwgPT09IG51bGwpKSB7XG4gICAgICAgICAgc2NvcGVUb0NoaWxkID0gaXNvbGF0ZVNjb3BlO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkTGlua0ZuICYmIGNoaWxkTGlua0ZuKHNjb3BlVG9DaGlsZCwgbGlua05vZGUuY2hpbGROb2RlcywgdW5kZWZpbmVkLCBib3VuZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgLy8gUE9TVExJTktJTkdcbiAgICAgICAgZm9yIChpID0gcG9zdExpbmtGbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBsaW5rRm4gPSBwb3N0TGlua0Zuc1tpXTtcbiAgICAgICAgICBpbnZva2VMaW5rRm4obGlua0ZuLFxuICAgICAgICAgICAgICBsaW5rRm4uaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICAgICBhdHRycyxcbiAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLmRpcmVjdGl2ZU5hbWUsIGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSxcbiAgICAgICAgICAgICAgdHJhbnNjbHVkZUZuXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgaXMgaW5qZWN0ZWQgYXMgYCR0cmFuc2NsdWRlYC5cbiAgICAgICAgLy8gTm90ZTogYWxsIGFyZ3VtZW50cyBhcmUgb3B0aW9uYWwhXG4gICAgICAgIGZ1bmN0aW9uIGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlKHNjb3BlLCBjbG9uZUF0dGFjaEZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgdmFyIHRyYW5zY2x1ZGVDb250cm9sbGVycztcblxuICAgICAgICAgIC8vIE5vIHNjb3BlIHBhc3NlZCBpbjpcbiAgICAgICAgICBpZiAoIWlzU2NvcGUoc2NvcGUpKSB7XG4gICAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gY2xvbmVBdHRhY2hGbjtcbiAgICAgICAgICAgIGNsb25lQXR0YWNoRm4gPSBzY29wZTtcbiAgICAgICAgICAgIHNjb3BlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSkge1xuICAgICAgICAgICAgdHJhbnNjbHVkZUNvbnRyb2xsZXJzID0gZWxlbWVudENvbnRyb2xsZXJzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWZ1dHVyZVBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA/ICRlbGVtZW50LnBhcmVudCgpIDogJGVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBib3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgY2xvbmVBdHRhY2hGbiwgdHJhbnNjbHVkZUNvbnRyb2xsZXJzLCBmdXR1cmVQYXJlbnRFbGVtZW50LCBzY29wZVRvQ2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVwZW5kaW5nIHVwb24gdGhlIGNvbnRleHQgaW4gd2hpY2ggYSBkaXJlY3RpdmUgZmluZHMgaXRzZWxmIGl0IG1pZ2h0IG5lZWQgdG8gaGF2ZSBhIG5ldyBpc29sYXRlZFxuICAgIC8vIG9yIGNoaWxkIHNjb3BlIGNyZWF0ZWQuIEZvciBpbnN0YW5jZTpcbiAgICAvLyAqIGlmIHRoZSBkaXJlY3RpdmUgaGFzIGJlZW4gcHVsbGVkIGludG8gYSB0ZW1wbGF0ZSBiZWNhdXNlIGFub3RoZXIgZGlyZWN0aXZlIHdpdGggYSBoaWdoZXIgcHJpb3JpdHlcbiAgICAvLyBhc2tlZCBmb3IgZWxlbWVudCB0cmFuc2NsdXNpb25cbiAgICAvLyAqIGlmIHRoZSBkaXJlY3RpdmUgaXRzZWxmIGFza3MgZm9yIHRyYW5zY2x1c2lvbiBidXQgaXQgaXMgYXQgdGhlIHJvb3Qgb2YgYSB0ZW1wbGF0ZSBhbmQgdGhlIG9yaWdpbmFsXG4gICAgLy8gZWxlbWVudCB3YXMgcmVwbGFjZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xMjkzNlxuICAgIGZ1bmN0aW9uIG1hcmtEaXJlY3RpdmVTY29wZShkaXJlY3RpdmVzLCBpc29sYXRlU2NvcGUsIG5ld1Njb3BlKSB7XG4gICAgICBmb3IgKHZhciBqID0gMCwgamogPSBkaXJlY3RpdmVzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgZGlyZWN0aXZlc1tqXSA9IGluaGVyaXQoZGlyZWN0aXZlc1tqXSwgeyQkaXNvbGF0ZVNjb3BlOiBpc29sYXRlU2NvcGUsICQkbmV3U2NvcGU6IG5ld1Njb3BlfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbG9va3MgdXAgdGhlIGRpcmVjdGl2ZSBhbmQgZGVjb3JhdGVzIGl0IHdpdGggZXhjZXB0aW9uIGhhbmRsaW5nIGFuZCBwcm9wZXIgcGFyYW1ldGVycy4gV2VcbiAgICAgKiBjYWxsIHRoaXMgdGhlIGJvdW5kRGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgZGlyZWN0aXZlIHRvIGxvb2sgdXAuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIFRoZSBkaXJlY3RpdmUgbXVzdCBiZSBmb3VuZCBpbiBzcGVjaWZpYyBmb3JtYXQuXG4gICAgICogICBTdHJpbmcgY29udGFpbmluZyBhbnkgb2YgdGhlc2VzIGNoYXJhY3RlcnM6XG4gICAgICpcbiAgICAgKiAgICogYEVgOiBlbGVtZW50IG5hbWVcbiAgICAgKiAgICogYEEnOiBhdHRyaWJ1dGVcbiAgICAgKiAgICogYENgOiBjbGFzc1xuICAgICAqICAgKiBgTWA6IGNvbW1lbnRcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBkaXJlY3RpdmUgd2FzIGFkZGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZERpcmVjdGl2ZSh0RGlyZWN0aXZlcywgbmFtZSwgbG9jYXRpb24sIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHN0YXJ0QXR0ck5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEF0dHJOYW1lKSB7XG4gICAgICBpZiAobmFtZSA9PT0gaWdub3JlRGlyZWN0aXZlKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBtYXRjaCA9IG51bGw7XG4gICAgICBpZiAoaGFzRGlyZWN0aXZlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBmb3IgKHZhciBkaXJlY3RpdmUsIGRpcmVjdGl2ZXMgPSAkaW5qZWN0b3IuZ2V0KG5hbWUgKyBTdWZmaXgpLFxuICAgICAgICAgICAgaSA9IDAsIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgICAgICBpZiAoKGlzVW5kZWZpbmVkKG1heFByaW9yaXR5KSB8fCBtYXhQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkgJiZcbiAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0LmluZGV4T2YobG9jYXRpb24pICE9IC0xKSB7XG4gICAgICAgICAgICAgIGlmIChzdGFydEF0dHJOYW1lKSB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlID0gaW5oZXJpdChkaXJlY3RpdmUsIHskJHN0YXJ0OiBzdGFydEF0dHJOYW1lLCAkJGVuZDogZW5kQXR0ck5hbWV9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0RGlyZWN0aXZlcy5wdXNoKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgIG1hdGNoID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogbG9va3MgdXAgdGhlIGRpcmVjdGl2ZSBhbmQgcmV0dXJucyB0cnVlIGlmIGl0IGlzIGEgbXVsdGktZWxlbWVudCBkaXJlY3RpdmUsXG4gICAgICogYW5kIHRoZXJlZm9yZSByZXF1aXJlcyBET00gbm9kZXMgYmV0d2VlbiAtc3RhcnQgYW5kIC1lbmQgbWFya2VycyB0byBiZSBncm91cGVkXG4gICAgICogdG9nZXRoZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gbG9vayB1cC5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGRpcmVjdGl2ZSB3YXMgcmVnaXN0ZXJlZCBhcyBtdWx0aS1lbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KG5hbWUpIHtcbiAgICAgIGlmIChoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGZvciAodmFyIGRpcmVjdGl2ZSwgZGlyZWN0aXZlcyA9ICRpbmplY3Rvci5nZXQobmFtZSArIFN1ZmZpeCksXG4gICAgICAgICAgICBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICAgIGlmIChkaXJlY3RpdmUubXVsdGlFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBlbGVtZW50IGlzIHJlcGxhY2VkIHdpdGggSFRNTCB0ZW1wbGF0ZSB0aGVuIHRoZSBuZXcgYXR0cmlidXRlc1xuICAgICAqIG9uIHRoZSB0ZW1wbGF0ZSBuZWVkIHRvIGJlIG1lcmdlZCB3aXRoIHRoZSBleGlzdGluZyBhdHRyaWJ1dGVzIGluIHRoZSBET00uXG4gICAgICogVGhlIGRlc2lyZWQgZWZmZWN0IGlzIHRvIGhhdmUgYm90aCBvZiB0aGUgYXR0cmlidXRlcyBwcmVzZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRzdCBkZXN0aW5hdGlvbiBhdHRyaWJ1dGVzIChvcmlnaW5hbCBET00pXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHNyYyBzb3VyY2UgYXR0cmlidXRlcyAoZnJvbSB0aGUgZGlyZWN0aXZlIHRlbXBsYXRlKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKGRzdCwgc3JjKSB7XG4gICAgICB2YXIgc3JjQXR0ciA9IHNyYy4kYXR0cixcbiAgICAgICAgICBkc3RBdHRyID0gZHN0LiRhdHRyLFxuICAgICAgICAgICRlbGVtZW50ID0gZHN0LiQkZWxlbWVudDtcblxuICAgICAgLy8gcmVhcHBseSB0aGUgb2xkIGF0dHJpYnV0ZXMgdG8gdGhlIG5ldyBlbGVtZW50XG4gICAgICBmb3JFYWNoKGRzdCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSAhPSAnJCcpIHtcbiAgICAgICAgICBpZiAoc3JjW2tleV0gJiYgc3JjW2tleV0gIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSArPSAoa2V5ID09PSAnc3R5bGUnID8gJzsnIDogJyAnKSArIHNyY1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkc3QuJHNldChrZXksIHZhbHVlLCB0cnVlLCBzcmNBdHRyW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gY29weSB0aGUgbmV3IGF0dHJpYnV0ZXMgb24gdGhlIG9sZCBhdHRycyBvYmplY3RcbiAgICAgIGZvckVhY2goc3JjLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT0gJ2NsYXNzJykge1xuICAgICAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgdmFsdWUpO1xuICAgICAgICAgIGRzdFsnY2xhc3MnXSA9IChkc3RbJ2NsYXNzJ10gPyBkc3RbJ2NsYXNzJ10gKyAnICcgOiAnJykgKyB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT0gJ3N0eWxlJykge1xuICAgICAgICAgICRlbGVtZW50LmF0dHIoJ3N0eWxlJywgJGVsZW1lbnQuYXR0cignc3R5bGUnKSArICc7JyArIHZhbHVlKTtcbiAgICAgICAgICBkc3RbJ3N0eWxlJ10gPSAoZHN0WydzdHlsZSddID8gZHN0WydzdHlsZSddICsgJzsnIDogJycpICsgdmFsdWU7XG4gICAgICAgICAgLy8gYGRzdGAgd2lsbCBuZXZlciBjb250YWluIGhhc093blByb3BlcnR5IGFzIERPTSBwYXJzZXIgd29uJ3QgbGV0IGl0LlxuICAgICAgICAgIC8vIFlvdSB3aWxsIGdldCBhbiBcIkludmFsaWRDaGFyYWN0ZXJFcnJvcjogRE9NIEV4Y2VwdGlvbiA1XCIgZXJyb3IgaWYgeW91XG4gICAgICAgICAgLy8gaGF2ZSBhbiBhdHRyaWJ1dGUgbGlrZSBcImhhcy1vd24tcHJvcGVydHlcIiBvciBcImRhdGEtaGFzLW93bi1wcm9wZXJ0eVwiLCBldGMuXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5LmNoYXJBdCgwKSAhPSAnJCcgJiYgIWRzdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICBkc3RBdHRyW2tleV0gPSBzcmNBdHRyW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY29tcGlsZVRlbXBsYXRlVXJsKGRpcmVjdGl2ZXMsICRjb21waWxlTm9kZSwgdEF0dHJzLFxuICAgICAgICAkcm9vdEVsZW1lbnQsIGNoaWxkVHJhbnNjbHVkZUZuLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucywgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgdmFyIGxpbmtRdWV1ZSA9IFtdLFxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLFxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbixcbiAgICAgICAgICBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlID0gJGNvbXBpbGVOb2RlWzBdLFxuICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZSA9IGRpcmVjdGl2ZXMuc2hpZnQoKSxcbiAgICAgICAgICBkZXJpdmVkU3luY0RpcmVjdGl2ZSA9IGluaGVyaXQob3JpZ0FzeW5jRGlyZWN0aXZlLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogbnVsbCwgdHJhbnNjbHVkZTogbnVsbCwgcmVwbGFjZTogbnVsbCwgJCRvcmlnaW5hbERpcmVjdGl2ZTogb3JpZ0FzeW5jRGlyZWN0aXZlXG4gICAgICAgICAgfSksXG4gICAgICAgICAgdGVtcGxhdGVVcmwgPSAoaXNGdW5jdGlvbihvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwpKVxuICAgICAgICAgICAgICA/IG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZVVybCgkY29tcGlsZU5vZGUsIHRBdHRycylcbiAgICAgICAgICAgICAgOiBvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwsXG4gICAgICAgICAgdGVtcGxhdGVOYW1lc3BhY2UgPSBvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVOYW1lc3BhY2U7XG5cbiAgICAgICRjb21waWxlTm9kZS5lbXB0eSgpO1xuXG4gICAgICAkdGVtcGxhdGVSZXF1ZXN0KHRlbXBsYXRlVXJsKVxuICAgICAgICAudGhlbihmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICAgICAgdmFyIGNvbXBpbGVOb2RlLCB0ZW1wVGVtcGxhdGVBdHRycywgJHRlbXBsYXRlLCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuO1xuXG4gICAgICAgICAgY29udGVudCA9IGRlbm9ybWFsaXplVGVtcGxhdGUoY29udGVudCk7XG5cbiAgICAgICAgICBpZiAob3JpZ0FzeW5jRGlyZWN0aXZlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIGlmIChqcUxpdGVJc1RleHROb2RlKGNvbnRlbnQpKSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gcmVtb3ZlQ29tbWVudHMod3JhcFRlbXBsYXRlKHRlbXBsYXRlTmFtZXNwYWNlLCB0cmltKGNvbnRlbnQpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICR0ZW1wbGF0ZVswXTtcblxuICAgICAgICAgICAgaWYgKCR0ZW1wbGF0ZS5sZW5ndGggIT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JyxcbiAgICAgICAgICAgICAgICAgIFwiVGVtcGxhdGUgZm9yIGRpcmVjdGl2ZSAnezB9JyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX1cIixcbiAgICAgICAgICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZS5uYW1lLCB0ZW1wbGF0ZVVybCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRlbXBUZW1wbGF0ZUF0dHJzID0geyRhdHRyOiB7fX07XG4gICAgICAgICAgICByZXBsYWNlV2l0aCgkcm9vdEVsZW1lbnQsICRjb21waWxlTm9kZSwgY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKGNvbXBpbGVOb2RlLCBbXSwgdGVtcFRlbXBsYXRlQXR0cnMpO1xuXG4gICAgICAgICAgICBpZiAoaXNPYmplY3Qob3JpZ0FzeW5jRGlyZWN0aXZlLnNjb3BlKSkge1xuICAgICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgZGlyZWN0aXZlIHRoYXQgY2F1c2VkIHRoZSB0ZW1wbGF0ZSB0byBiZSBsb2FkZWQgYXN5bmMgcmVxdWlyZWRcbiAgICAgICAgICAgICAgLy8gYW4gaXNvbGF0ZSBzY29wZVxuICAgICAgICAgICAgICBtYXJrRGlyZWN0aXZlU2NvcGUodGVtcGxhdGVEaXJlY3RpdmVzLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpcmVjdGl2ZXMgPSB0ZW1wbGF0ZURpcmVjdGl2ZXMuY29uY2F0KGRpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXModEF0dHJzLCB0ZW1wVGVtcGxhdGVBdHRycyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZTtcbiAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKGNvbnRlbnQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpcmVjdGl2ZXMudW5zaGlmdChkZXJpdmVkU3luY0RpcmVjdGl2ZSk7XG5cbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbiA9IGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBjb21waWxlTm9kZSwgdEF0dHJzLFxuICAgICAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiwgJGNvbXBpbGVOb2RlLCBvcmlnQXN5bmNEaXJlY3RpdmUsIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLFxuICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KTtcbiAgICAgICAgICBmb3JFYWNoKCRyb290RWxlbWVudCwgZnVuY3Rpb24obm9kZSwgaSkge1xuICAgICAgICAgICAgaWYgKG5vZGUgPT0gY29tcGlsZU5vZGUpIHtcbiAgICAgICAgICAgICAgJHJvb3RFbGVtZW50W2ldID0gJGNvbXBpbGVOb2RlWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiA9IGNvbXBpbGVOb2RlcygkY29tcGlsZU5vZGVbMF0uY2hpbGROb2RlcywgY2hpbGRUcmFuc2NsdWRlRm4pO1xuXG4gICAgICAgICAgd2hpbGUgKGxpbmtRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBzY29wZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGJlZm9yZVRlbXBsYXRlTGlua05vZGUgPSBsaW5rUXVldWUuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICBsaW5rUm9vdEVsZW1lbnQgPSBsaW5rUXVldWUuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICBib3VuZFRyYW5zY2x1ZGVGbiA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGxpbmtOb2RlID0gJGNvbXBpbGVOb2RlWzBdO1xuXG4gICAgICAgICAgICBpZiAoc2NvcGUuJCRkZXN0cm95ZWQpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAoYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSAhPT0gYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSkge1xuICAgICAgICAgICAgICB2YXIgb2xkQ2xhc3NlcyA9IGJlZm9yZVRlbXBsYXRlTGlua05vZGUuY2xhc3NOYW1lO1xuXG4gICAgICAgICAgICAgIGlmICghKHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgJiZcbiAgICAgICAgICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZS5yZXBsYWNlKSkge1xuICAgICAgICAgICAgICAgIC8vIGl0IHdhcyBjbG9uZWQgdGhlcmVmb3JlIHdlIGhhdmUgdG8gY2xvbmUgYXMgd2VsbC5cbiAgICAgICAgICAgICAgICBsaW5rTm9kZSA9IGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXBsYWNlV2l0aChsaW5rUm9vdEVsZW1lbnQsIGpxTGl0ZShiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlKSwgbGlua05vZGUpO1xuXG4gICAgICAgICAgICAgIC8vIENvcHkgaW4gQ1NTIGNsYXNzZXMgZnJvbSBvcmlnaW5hbCBub2RlXG4gICAgICAgICAgICAgIHNhZmVBZGRDbGFzcyhqcUxpdGUobGlua05vZGUpLCBvbGRDbGFzc2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGUsIGJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBib3VuZFRyYW5zY2x1ZGVGbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuKGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsXG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsaW5rUXVldWUgPSBudWxsO1xuICAgICAgICB9KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGF5ZWROb2RlTGlua0ZuKGlnbm9yZUNoaWxkTGlua0ZuLCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAobGlua1F1ZXVlKSB7XG4gICAgICAgICAgbGlua1F1ZXVlLnB1c2goc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICByb290RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbihhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTb3J0aW5nIGZ1bmN0aW9uIGZvciBib3VuZCBkaXJlY3RpdmVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJ5UHJpb3JpdHkoYSwgYikge1xuICAgICAgdmFyIGRpZmYgPSBiLnByaW9yaXR5IC0gYS5wcmlvcml0eTtcbiAgICAgIGlmIChkaWZmICE9PSAwKSByZXR1cm4gZGlmZjtcbiAgICAgIGlmIChhLm5hbWUgIT09IGIubmFtZSkgcmV0dXJuIChhLm5hbWUgPCBiLm5hbWUpID8gLTEgOiAxO1xuICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzc2VydE5vRHVwbGljYXRlKHdoYXQsIHByZXZpb3VzRGlyZWN0aXZlLCBkaXJlY3RpdmUsIGVsZW1lbnQpIHtcblxuICAgICAgZnVuY3Rpb24gd3JhcE1vZHVsZU5hbWVJZkRlZmluZWQobW9kdWxlTmFtZSkge1xuICAgICAgICByZXR1cm4gbW9kdWxlTmFtZSA/XG4gICAgICAgICAgKCcgKG1vZHVsZTogJyArIG1vZHVsZU5hbWUgKyAnKScpIDpcbiAgICAgICAgICAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZpb3VzRGlyZWN0aXZlKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdtdWx0aWRpcicsICdNdWx0aXBsZSBkaXJlY3RpdmVzIFt7MH17MX0sIHsyfXszfV0gYXNraW5nIGZvciB7NH0gb246IHs1fScsXG4gICAgICAgICAgICBwcmV2aW91c0RpcmVjdGl2ZS5uYW1lLCB3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZChwcmV2aW91c0RpcmVjdGl2ZS4kJG1vZHVsZU5hbWUpLFxuICAgICAgICAgICAgZGlyZWN0aXZlLm5hbWUsIHdyYXBNb2R1bGVOYW1lSWZEZWZpbmVkKGRpcmVjdGl2ZS4kJG1vZHVsZU5hbWUpLCB3aGF0LCBzdGFydGluZ1RhZyhlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgdGV4dCkge1xuICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodGV4dCwgdHJ1ZSk7XG4gICAgICBpZiAoaW50ZXJwb2xhdGVGbikge1xuICAgICAgICBkaXJlY3RpdmVzLnB1c2goe1xuICAgICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZUNvbXBpbGVGbih0ZW1wbGF0ZU5vZGUpIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZU5vZGVQYXJlbnQgPSB0ZW1wbGF0ZU5vZGUucGFyZW50KCksXG4gICAgICAgICAgICAgICAgaGFzQ29tcGlsZVBhcmVudCA9ICEhdGVtcGxhdGVOb2RlUGFyZW50Lmxlbmd0aDtcblxuICAgICAgICAgICAgLy8gV2hlbiB0cmFuc2NsdWRpbmcgYSB0ZW1wbGF0ZSB0aGF0IGhhcyBiaW5kaW5ncyBpbiB0aGUgcm9vdFxuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSBhIHBhcmVudCBhbmQgdGh1cyBuZWVkIHRvIGFkZCB0aGUgY2xhc3MgZHVyaW5nIGxpbmtpbmcgZm4uXG4gICAgICAgICAgICBpZiAoaGFzQ29tcGlsZVBhcmVudCkgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZU5vZGVQYXJlbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGV4dEludGVycG9sYXRlTGlua0ZuKHNjb3BlLCBub2RlKSB7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudCgpO1xuICAgICAgICAgICAgICBpZiAoIWhhc0NvbXBpbGVQYXJlbnQpIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3MocGFyZW50KTtcbiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKHBhcmVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7XG4gICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBub2RlWzBdLm5vZGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHdyYXBUZW1wbGF0ZSh0eXBlLCB0ZW1wbGF0ZSkge1xuICAgICAgdHlwZSA9IGxvd2VyY2FzZSh0eXBlIHx8ICdodG1sJyk7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3N2Zyc6XG4gICAgICBjYXNlICdtYXRoJzpcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgd3JhcHBlci5pbm5lckhUTUwgPSAnPCcgKyB0eXBlICsgJz4nICsgdGVtcGxhdGUgKyAnPC8nICsgdHlwZSArICc+JztcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gZ2V0VHJ1c3RlZENvbnRleHQobm9kZSwgYXR0ck5vcm1hbGl6ZWROYW1lKSB7XG4gICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09IFwic3JjZG9jXCIpIHtcbiAgICAgICAgcmV0dXJuICRzY2UuSFRNTDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBub2RlTmFtZV8obm9kZSk7XG4gICAgICAvLyBtYWN0aW9uW3hsaW5rOmhyZWZdIGNhbiBzb3VyY2UgU1ZHLiAgSXQncyBub3QgbGltaXRlZCB0byA8bWFjdGlvbj4uXG4gICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09IFwieGxpbmtIcmVmXCIgfHxcbiAgICAgICAgICAodGFnID09IFwiZm9ybVwiICYmIGF0dHJOb3JtYWxpemVkTmFtZSA9PSBcImFjdGlvblwiKSB8fFxuICAgICAgICAgICh0YWcgIT0gXCJpbWdcIiAmJiAoYXR0ck5vcm1hbGl6ZWROYW1lID09IFwic3JjXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyTm9ybWFsaXplZE5hbWUgPT0gXCJuZ1NyY1wiKSkpIHtcbiAgICAgICAgcmV0dXJuICRzY2UuUkVTT1VSQ0VfVVJMO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuYW1lLCBhbGxPck5vdGhpbmcpIHtcbiAgICAgIHZhciB0cnVzdGVkQ29udGV4dCA9IGdldFRydXN0ZWRDb250ZXh0KG5vZGUsIG5hbWUpO1xuICAgICAgYWxsT3JOb3RoaW5nID0gQUxMX09SX05PVEhJTkdfQVRUUlNbbmFtZV0gfHwgYWxsT3JOb3RoaW5nO1xuXG4gICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh2YWx1ZSwgdHJ1ZSwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZyk7XG5cbiAgICAgIC8vIG5vIGludGVycG9sYXRpb24gZm91bmQgLT4gaWdub3JlXG4gICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjtcblxuXG4gICAgICBpZiAobmFtZSA9PT0gXCJtdWx0aXBsZVwiICYmIG5vZGVOYW1lXyhub2RlKSA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycihcInNlbG11bHRpXCIsXG4gICAgICAgICAgICBcIkJpbmRpbmcgdG8gdGhlICdtdWx0aXBsZScgYXR0cmlidXRlIGlzIG5vdCBzdXBwb3J0ZWQuIEVsZW1lbnQ6IHswfVwiLFxuICAgICAgICAgICAgc3RhcnRpbmdUYWcobm9kZSkpO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVzLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHByZTogZnVuY3Rpb24gYXR0ckludGVycG9sYXRlUHJlTGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gKGF0dHIuJCRvYnNlcnZlcnMgfHwgKGF0dHIuJCRvYnNlcnZlcnMgPSBjcmVhdGVNYXAoKSkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKEVWRU5UX0hBTkRMRVJfQVRUUl9SRUdFWFAudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vZG9tZXZlbnRzJyxcbiAgICAgICAgICAgICAgICAgICAgICBcIkludGVycG9sYXRpb25zIGZvciBIVE1MIERPTSBldmVudCBhdHRyaWJ1dGVzIGFyZSBkaXNhbGxvd2VkLiAgUGxlYXNlIHVzZSB0aGUgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5nLSB2ZXJzaW9ucyAoc3VjaCBhcyBuZy1jbGljayBpbnN0ZWFkIG9mIG9uY2xpY2spIGluc3RlYWQuXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQgc2luY2UgbGFzdCAkaW50ZXJwb2xhdGUoKWVkXG4gICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gYXR0cltuYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGludGVycG9sYXRlIGFnYWluIHNpbmNlIHRoZSBhdHRyaWJ1dGUgdmFsdWUgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgICAgICAgICAgICAgLy8gKGUuZy4gYnkgYW5vdGhlciBkaXJlY3RpdmUncyBjb21waWxlIGZ1bmN0aW9uKVxuICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIHVuc2V0L2VtcHR5IHZhbHVlcyBtYWtlIGludGVycG9sYXRlRm4gZmFsc3lcbiAgICAgICAgICAgICAgICAgIGludGVycG9sYXRlRm4gPSBuZXdWYWx1ZSAmJiAkaW50ZXJwb2xhdGUobmV3VmFsdWUsIHRydWUsIHRydXN0ZWRDb250ZXh0LCBhbGxPck5vdGhpbmcpO1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBhdHRyaWJ1dGUgd2FzIHVwZGF0ZWQgc28gdGhhdCB0aGVyZSBpcyBubyBpbnRlcnBvbGF0aW9uIGdvaW5nIG9uIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgICAgICAgICAvLyByZWdpc3RlciBhbnkgb2JzZXJ2ZXJzXG4gICAgICAgICAgICAgICAgaWYgKCFpbnRlcnBvbGF0ZUZuKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIGF0dHIgb2JqZWN0IHNvIHRoYXQgaXQncyByZWFkeSBpbiBjYXNlIHdlIG5lZWQgdGhlIHZhbHVlIGZvciBpc29sYXRlXG4gICAgICAgICAgICAgICAgLy8gc2NvcGUgaW5pdGlhbGl6YXRpb24sIG90aGVyd2lzZSB0aGUgdmFsdWUgd291bGQgbm90IGJlIGF2YWlsYWJsZSBmcm9tIGlzb2xhdGVcbiAgICAgICAgICAgICAgICAvLyBkaXJlY3RpdmUncyBsaW5raW5nIGZuIGR1cmluZyBsaW5raW5nIHBoYXNlXG4gICAgICAgICAgICAgICAgYXR0cltuYW1lXSA9IGludGVycG9sYXRlRm4oc2NvcGUpO1xuXG4gICAgICAgICAgICAgICAgKCQkb2JzZXJ2ZXJzW25hbWVdIHx8ICgkJG9ic2VydmVyc1tuYW1lXSA9IFtdKSkuJCRpbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgKGF0dHIuJCRvYnNlcnZlcnMgJiYgYXR0ci4kJG9ic2VydmVyc1tuYW1lXS4kJHNjb3BlIHx8IHNjb3BlKS5cbiAgICAgICAgICAgICAgICAgICR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciBjbGFzcyBhdHRyaWJ1dGUgYWRkaXRpb24gKyByZW1vdmFsXG4gICAgICAgICAgICAgICAgICAgIC8vc28gdGhhdCBjbGFzcyBjaGFuZ2VzIGNhbiB0YXAgaW50byB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vaG9va3MgcHJvdmlkZWQgYnkgdGhlICRhbmltYXRlIHNlcnZpY2UuIEJlIHN1cmUgdG9cbiAgICAgICAgICAgICAgICAgICAgLy9za2lwIGFuaW1hdGlvbnMgd2hlbiB0aGUgZmlyc3QgZGlnZXN0IG9jY3VycyAod2hlblxuICAgICAgICAgICAgICAgICAgICAvL2JvdGggdGhlIG5ldyBhbmQgdGhlIG9sZCB2YWx1ZXMgYXJlIHRoZSBzYW1lKSBzaW5jZVxuICAgICAgICAgICAgICAgICAgICAvL3RoZSBDU1MgY2xhc3NlcyBhcmUgdGhlIG5vbi1pbnRlcnBvbGF0ZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnY2xhc3MnICYmIG5ld1ZhbHVlICE9IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0ci4kdXBkYXRlQ2xhc3MobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBzcGVjaWFsIGpxTGl0ZS5yZXBsYWNlV2l0aCwgd2hpY2ggY2FuIHJlcGxhY2UgaXRlbXMgd2hpY2hcbiAgICAgKiBoYXZlIG5vIHBhcmVudHMsIHByb3ZpZGVkIHRoYXQgdGhlIGNvbnRhaW5pbmcganFMaXRlIGNvbGxlY3Rpb24gaXMgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0pxTGl0ZT19ICRyb290RWxlbWVudCBUaGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlLiBVc2VkIHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcm9vdCBvZiB0aGUgdHJlZS5cbiAgICAgKiBAcGFyYW0ge0pxTGl0ZX0gZWxlbWVudHNUb1JlbW92ZSBUaGUganFMaXRlIGVsZW1lbnQgd2hpY2ggd2UgYXJlIGdvaW5nIHRvIHJlcGxhY2UuIFdlIGtlZXBcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2hlbGwsIGJ1dCByZXBsYWNlIGl0cyBET00gbm9kZSByZWZlcmVuY2UuXG4gICAgICogQHBhcmFtIHtOb2RlfSBuZXdOb2RlIFRoZSBuZXcgRE9NIG5vZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCBlbGVtZW50c1RvUmVtb3ZlLCBuZXdOb2RlKSB7XG4gICAgICB2YXIgZmlyc3RFbGVtZW50VG9SZW1vdmUgPSBlbGVtZW50c1RvUmVtb3ZlWzBdLFxuICAgICAgICAgIHJlbW92ZUNvdW50ID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGgsXG4gICAgICAgICAgcGFyZW50ID0gZmlyc3RFbGVtZW50VG9SZW1vdmUucGFyZW50Tm9kZSxcbiAgICAgICAgICBpLCBpaTtcblxuICAgICAgaWYgKCRyb290RWxlbWVudCkge1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9ICRyb290RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgaWYgKCRyb290RWxlbWVudFtpXSA9PSBmaXJzdEVsZW1lbnRUb1JlbW92ZSkge1xuICAgICAgICAgICAgJHJvb3RFbGVtZW50W2krK10gPSBuZXdOb2RlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGksIGoyID0gaiArIHJlbW92ZUNvdW50IC0gMSxcbiAgICAgICAgICAgICAgICAgICAgIGpqID0gJHJvb3RFbGVtZW50Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgaiA8IGpqOyBqKyssIGoyKyspIHtcbiAgICAgICAgICAgICAgaWYgKGoyIDwgamopIHtcbiAgICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbal0gPSAkcm9vdEVsZW1lbnRbajJdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkcm9vdEVsZW1lbnRbal07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRyb290RWxlbWVudC5sZW5ndGggLT0gcmVtb3ZlQ291bnQgLSAxO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgcmVwbGFjZWQgZWxlbWVudCBpcyBhbHNvIHRoZSBqUXVlcnkgLmNvbnRleHQgdGhlbiByZXBsYWNlIGl0XG4gICAgICAgICAgICAvLyAuY29udGV4dCBpcyBhIGRlcHJlY2F0ZWQgalF1ZXJ5IGFwaSwgc28gd2Ugc2hvdWxkIHNldCBpdCBvbmx5IHdoZW4galF1ZXJ5IHNldCBpdFxuICAgICAgICAgICAgLy8gaHR0cDovL2FwaS5qcXVlcnkuY29tL2NvbnRleHQvXG4gICAgICAgICAgICBpZiAoJHJvb3RFbGVtZW50LmNvbnRleHQgPT09IGZpcnN0RWxlbWVudFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAgICRyb290RWxlbWVudC5jb250ZXh0ID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgZmlyc3RFbGVtZW50VG9SZW1vdmUpO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPKHBlcmYpOiB3aGF0J3MgdGhpcyBkb2N1bWVudCBmcmFnbWVudCBmb3I/IGlzIGl0IG5lZWRlZD8gY2FuIHdlIGF0IGxlYXN0IHJldXNlIGl0P1xuICAgICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZmlyc3RFbGVtZW50VG9SZW1vdmUpO1xuXG4gICAgICBpZiAoanFMaXRlLmhhc0RhdGEoZmlyc3RFbGVtZW50VG9SZW1vdmUpKSB7XG4gICAgICAgIC8vIENvcHkgb3ZlciB1c2VyIGRhdGEgKHRoYXQgaW5jbHVkZXMgQW5ndWxhcidzICRzY29wZSBldGMuKS4gRG9uJ3QgY29weSBwcml2YXRlXG4gICAgICAgIC8vIGRhdGEgaGVyZSBiZWNhdXNlIHRoZXJlJ3Mgbm8gcHVibGljIGludGVyZmFjZSBpbiBqUXVlcnkgdG8gZG8gdGhhdCBhbmQgY29weWluZyBvdmVyXG4gICAgICAgIC8vIGV2ZW50IGxpc3RlbmVycyAod2hpY2ggaXMgdGhlIG1haW4gdXNlIG9mIHByaXZhdGUgZGF0YSkgd291bGRuJ3Qgd29yayBhbnl3YXkuXG4gICAgICAgIGpxTGl0ZS5kYXRhKG5ld05vZGUsIGpxTGl0ZS5kYXRhKGZpcnN0RWxlbWVudFRvUmVtb3ZlKSk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGRhdGEgb2YgdGhlIHJlcGxhY2VkIGVsZW1lbnQuIFdlIGNhbm5vdCBqdXN0IGNhbGwgLnJlbW92ZSgpXG4gICAgICAgIC8vIG9uIHRoZSBlbGVtZW50IGl0IHNpbmNlIHRoYXQgd291bGQgZGVhbGxvY2F0ZSBzY29wZSB0aGF0IGlzIG5lZWRlZFxuICAgICAgICAvLyBmb3IgdGhlIG5ldyBub2RlLiBJbnN0ZWFkLCByZW1vdmUgdGhlIGRhdGEgXCJtYW51YWxseVwiLlxuICAgICAgICBpZiAoIWpRdWVyeSkge1xuICAgICAgICAgIGRlbGV0ZSBqcUxpdGUuY2FjaGVbZmlyc3RFbGVtZW50VG9SZW1vdmVbanFMaXRlLmV4cGFuZG9dXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBqUXVlcnkgMi54IGRvZXNuJ3QgZXhwb3NlIHRoZSBkYXRhIHN0b3JhZ2UuIFVzZSBqUXVlcnkuY2xlYW5EYXRhIHRvIGNsZWFuIHVwIGFmdGVyXG4gICAgICAgICAgLy8gdGhlIHJlcGxhY2VkIGVsZW1lbnQuIFRoZSBjbGVhbkRhdGEgdmVyc2lvbiBtb25rZXktcGF0Y2hlZCBieSBBbmd1bGFyIHdvdWxkIGNhdXNlXG4gICAgICAgICAgLy8gdGhlIHNjb3BlIHRvIGJlIHRyYXNoZWQgYW5kIHdlIGRvIG5lZWQgdGhlIHZlcnkgc2FtZSBzY29wZSB0byB3b3JrIHdpdGggdGhlIG5ld1xuICAgICAgICAgIC8vIGVsZW1lbnQuIEhvd2V2ZXIsIHdlIGNhbm5vdCBqdXN0IGNhY2hlIHRoZSBub24tcGF0Y2hlZCB2ZXJzaW9uIGFuZCB1c2UgaXQgaGVyZSBhc1xuICAgICAgICAgIC8vIHRoYXQgd291bGQgYnJlYWsgaWYgYW5vdGhlciBsaWJyYXJ5IHBhdGNoZXMgdGhlIG1ldGhvZCBhZnRlciBBbmd1bGFyIGRvZXMgKG9uZVxuICAgICAgICAgIC8vIGV4YW1wbGUgaXMgalF1ZXJ5IFVJKS4gSW5zdGVhZCwgc2V0IGEgZmxhZyBpbmRpY2F0aW5nIHNjb3BlIGRlc3Ryb3lpbmcgc2hvdWxkIGJlXG4gICAgICAgICAgLy8gc2tpcHBlZCB0aGlzIG9uZSB0aW1lLlxuICAgICAgICAgIHNraXBEZXN0cm95T25OZXh0SlF1ZXJ5Q2xlYW5EYXRhID0gdHJ1ZTtcbiAgICAgICAgICBqUXVlcnkuY2xlYW5EYXRhKFtmaXJzdEVsZW1lbnRUb1JlbW92ZV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGsgPSAxLCBrayA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoOyBrIDwga2s7IGsrKykge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGVsZW1lbnRzVG9SZW1vdmVba107XG4gICAgICAgIGpxTGl0ZShlbGVtZW50KS5yZW1vdmUoKTsgLy8gbXVzdCBkbyB0aGlzIHdheSB0byBjbGVhbiB1cCBleHBhbmRvXG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICBkZWxldGUgZWxlbWVudHNUb1JlbW92ZVtrXTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudHNUb1JlbW92ZVswXSA9IG5ld05vZGU7XG4gICAgICBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aCA9IDE7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjbG9uZUFuZEFubm90YXRlRm4oZm4sIGFubm90YXRpb24pIHtcbiAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oKSB7IHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9LCBmbiwgYW5ub3RhdGlvbik7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbnZva2VMaW5rRm4obGlua0ZuLCBzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsaW5rRm4oc2NvcGUsICRlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBTZXQgdXAgJHdhdGNoZXMgZm9yIGlzb2xhdGUgc2NvcGUgYW5kIGNvbnRyb2xsZXIgYmluZGluZ3MuIFRoaXMgcHJvY2Vzc1xuICAgIC8vIG9ubHkgb2NjdXJzIGZvciBpc29sYXRlIHNjb3BlcyBhbmQgbmV3IHNjb3BlcyB3aXRoIGNvbnRyb2xsZXJBcy5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3Moc2NvcGUsIGF0dHJzLCBkZXN0aW5hdGlvbiwgYmluZGluZ3MsIGRpcmVjdGl2ZSkge1xuICAgICAgdmFyIHJlbW92ZVdhdGNoQ29sbGVjdGlvbiA9IFtdO1xuICAgICAgZm9yRWFjaChiaW5kaW5ncywgZnVuY3Rpb24oZGVmaW5pdGlvbiwgc2NvcGVOYW1lKSB7XG4gICAgICAgIHZhciBhdHRyTmFtZSA9IGRlZmluaXRpb24uYXR0ck5hbWUsXG4gICAgICAgIG9wdGlvbmFsID0gZGVmaW5pdGlvbi5vcHRpb25hbCxcbiAgICAgICAgbW9kZSA9IGRlZmluaXRpb24ubW9kZSwgLy8gQCwgPSwgb3IgJlxuICAgICAgICBsYXN0VmFsdWUsXG4gICAgICAgIHBhcmVudEdldCwgcGFyZW50U2V0LCBjb21wYXJlO1xuXG4gICAgICAgIHN3aXRjaCAobW9kZSkge1xuXG4gICAgICAgICAgY2FzZSAnQCc6XG4gICAgICAgICAgICBpZiAoIW9wdGlvbmFsICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKGF0dHJzLCBhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXSA9IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKGF0dHJOYW1lLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF0dHJzLiQkb2JzZXJ2ZXJzW2F0dHJOYW1lXS4kJHNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgICBpZiAoaXNTdHJpbmcoYXR0cnNbYXR0ck5hbWVdKSkge1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgYXR0cmlidXRlIGhhcyBiZWVuIHByb3ZpZGVkIHRoZW4gd2UgdHJpZ2dlciBhbiBpbnRlcnBvbGF0aW9uIHRvIGVuc3VyZVxuICAgICAgICAgICAgICAvLyB0aGUgdmFsdWUgaXMgdGhlcmUgZm9yIHVzZSBpbiB0aGUgbGluayBmblxuICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gJGludGVycG9sYXRlKGF0dHJzW2F0dHJOYW1lXSkoc2NvcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICc9JzpcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChhdHRycywgYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgIGlmIChvcHRpb25hbCkgYnJlYWs7XG4gICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSA9IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25hbCAmJiAhYXR0cnNbYXR0ck5hbWVdKSBicmVhaztcblxuICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICAgICAgICBpZiAocGFyZW50R2V0LmxpdGVyYWwpIHtcbiAgICAgICAgICAgICAgY29tcGFyZSA9IGVxdWFscztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbXBhcmUgPSBmdW5jdGlvbihhLCBiKSB7IHJldHVybiBhID09PSBiIHx8IChhICE9PSBhICYmIGIgIT09IGIpOyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50U2V0ID0gcGFyZW50R2V0LmFzc2lnbiB8fCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgLy8gcmVzZXQgdGhlIGNoYW5nZSwgb3Igd2Ugd2lsbCB0aHJvdyB0aGlzIGV4Y2VwdGlvbiBvbiBldmVyeSAkZGlnZXN0XG4gICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQoc2NvcGUpO1xuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9uYXNzaWduJyxcbiAgICAgICAgICAgICAgICAgIFwiRXhwcmVzc2lvbiAnezB9JyB1c2VkIHdpdGggZGlyZWN0aXZlICd7MX0nIGlzIG5vbi1hc3NpZ25hYmxlIVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnNbYXR0ck5hbWVdLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGFzdFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudEdldChzY29wZSk7XG4gICAgICAgICAgICB2YXIgcGFyZW50VmFsdWVXYXRjaCA9IGZ1bmN0aW9uIHBhcmVudFZhbHVlV2F0Y2gocGFyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBkZXN0aW5hdGlvbltzY29wZU5hbWVdKSkge1xuICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBvdXQgb2Ygc3luYyBhbmQgbmVlZCB0byBjb3B5XG4gICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBwYXJlbnQgY2hhbmdlZCBhbmQgaXQgaGFzIHByZWNlZGVuY2VcbiAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBwYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHBhcmVudCBjYW4gYmUgYXNzaWduZWQgdGhlbiBkbyBzb1xuICAgICAgICAgICAgICAgICAgcGFyZW50U2V0KHNjb3BlLCBwYXJlbnRWYWx1ZSA9IGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gbGFzdFZhbHVlID0gcGFyZW50VmFsdWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcGFyZW50VmFsdWVXYXRjaC4kc3RhdGVmdWwgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIHJlbW92ZVdhdGNoO1xuICAgICAgICAgICAgaWYgKGRlZmluaXRpb24uY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICByZW1vdmVXYXRjaCA9IHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oYXR0cnNbYXR0ck5hbWVdLCBwYXJlbnRWYWx1ZVdhdGNoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlbW92ZVdhdGNoID0gc2NvcGUuJHdhdGNoKCRwYXJzZShhdHRyc1thdHRyTmFtZV0sIHBhcmVudFZhbHVlV2F0Y2gpLCBudWxsLCBwYXJlbnRHZXQubGl0ZXJhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1vdmVXYXRjaENvbGxlY3Rpb24ucHVzaChyZW1vdmVXYXRjaCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJyYnOlxuICAgICAgICAgICAgLy8gRG9uJ3QgYXNzaWduIE9iamVjdC5wcm90b3R5cGUgbWV0aG9kIHRvIHNjb3BlXG4gICAgICAgICAgICBwYXJlbnRHZXQgPSBhdHRycy5oYXNPd25Qcm9wZXJ0eShhdHRyTmFtZSkgPyAkcGFyc2UoYXR0cnNbYXR0ck5hbWVdKSA6IG5vb3A7XG5cbiAgICAgICAgICAgIC8vIERvbid0IGFzc2lnbiBub29wIHRvIGRlc3RpbmF0aW9uIGlmIGV4cHJlc3Npb24gaXMgbm90IHZhbGlkXG4gICAgICAgICAgICBpZiAocGFyZW50R2V0ID09PSBub29wICYmIG9wdGlvbmFsKSBicmVhaztcblxuICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgICAgICAgICAgICByZXR1cm4gcGFyZW50R2V0KHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5sZW5ndGggJiYgZnVuY3Rpb24gcmVtb3ZlV2F0Y2hlcygpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVtb3ZlV2F0Y2hDb2xsZWN0aW9uLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICByZW1vdmVXYXRjaENvbGxlY3Rpb25baV0oKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1dO1xufVxuXG52YXIgUFJFRklYX1JFR0VYUCA9IC9eKCg/Onh8ZGF0YSlbXFw6XFwtX10pL2k7XG4vKipcbiAqIENvbnZlcnRzIGFsbCBhY2NlcHRlZCBkaXJlY3RpdmVzIGZvcm1hdCBpbnRvIHByb3BlciBkaXJlY3RpdmUgbmFtZS5cbiAqIEBwYXJhbSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gKi9cbmZ1bmN0aW9uIGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lKSB7XG4gIHJldHVybiBjYW1lbENhc2UobmFtZS5yZXBsYWNlKFBSRUZJWF9SRUdFWFAsICcnKSk7XG59XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHNoYXJlZCBvYmplY3QgYmV0d2VlbiBkaXJlY3RpdmUgY29tcGlsZSAvIGxpbmtpbmcgZnVuY3Rpb25zIHdoaWNoIGNvbnRhaW5zIG5vcm1hbGl6ZWQgRE9NXG4gKiBlbGVtZW50IGF0dHJpYnV0ZXMuIFRoZSB2YWx1ZXMgcmVmbGVjdCBjdXJyZW50IGJpbmRpbmcgc3RhdGUgYHt7IH19YC4gVGhlIG5vcm1hbGl6YXRpb24gaXNcbiAqIG5lZWRlZCBzaW5jZSBhbGwgb2YgdGhlc2UgYXJlIHRyZWF0ZWQgYXMgZXF1aXZhbGVudCBpbiBBbmd1bGFyOlxuICpcbiAqIGBgYFxuICogICAgPHNwYW4gbmc6YmluZD1cImFcIiBuZy1iaW5kPVwiYVwiIGRhdGEtbmctYmluZD1cImFcIiB4LW5nLWJpbmQ9XCJhXCI+XG4gKiBgYGBcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm9wZXJ0eVxuICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGF0dHJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgbWFwIG9mIERPTSBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lcyB0byB0aGUgbm9ybWFsaXplZCBuYW1lLiBUaGlzIGlzXG4gKiBuZWVkZWQgdG8gZG8gcmV2ZXJzZSBsb29rdXAgZnJvbSBub3JtYWxpemVkIG5hbWUgYmFjayB0byBhY3R1YWwgbmFtZS5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHNldFxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNldCBET00gZWxlbWVudCBhdHRyaWJ1dGUgdmFsdWUuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5vcm1hbGl6ZWQgZWxlbWVudCBhdHRyaWJ1dGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gbW9kaWZ5LiBUaGUgbmFtZSBpc1xuICogICAgICAgICAgcmV2ZXJzZS10cmFuc2xhdGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGF0dHIgJGF0dHJ9XG4gKiAgICAgICAgICBwcm9wZXJ0eSB0byB0aGUgb3JpZ2luYWwgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byBzZXQgdGhlIGF0dHJpYnV0ZSB0by4gVGhlIHZhbHVlIGNhbiBiZSBhbiBpbnRlcnBvbGF0ZWQgc3RyaW5nLlxuICovXG5cblxuXG4vKipcbiAqIENsb3N1cmUgY29tcGlsZXIgdHlwZSBpbmZvcm1hdGlvblxuICovXG5cbmZ1bmN0aW9uIG5vZGVzZXRMaW5raW5nRm4oXG4gIC8qIGFuZ3VsYXIuU2NvcGUgKi8gc2NvcGUsXG4gIC8qIE5vZGVMaXN0ICovIG5vZGVMaXN0LFxuICAvKiBFbGVtZW50ICovIHJvb3RFbGVtZW50LFxuICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi8gYm91bmRUcmFuc2NsdWRlRm5cbikge31cblxuZnVuY3Rpb24gZGlyZWN0aXZlTGlua2luZ0ZuKFxuICAvKiBub2Rlc2V0TGlua2luZ0ZuICovIG5vZGVzZXRMaW5raW5nRm4sXG4gIC8qIGFuZ3VsYXIuU2NvcGUgKi8gc2NvcGUsXG4gIC8qIE5vZGUgKi8gbm9kZSxcbiAgLyogRWxlbWVudCAqLyByb290RWxlbWVudCxcbiAgLyogZnVuY3Rpb24oRnVuY3Rpb24pICovIGJvdW5kVHJhbnNjbHVkZUZuXG4pIHt9XG5cbmZ1bmN0aW9uIHRva2VuRGlmZmVyZW5jZShzdHIxLCBzdHIyKSB7XG4gIHZhciB2YWx1ZXMgPSAnJyxcbiAgICAgIHRva2VuczEgPSBzdHIxLnNwbGl0KC9cXHMrLyksXG4gICAgICB0b2tlbnMyID0gc3RyMi5zcGxpdCgvXFxzKy8pO1xuXG4gIG91dGVyOlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnMxW2ldO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdG9rZW5zMi5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKHRva2VuID09IHRva2VuczJbal0pIGNvbnRpbnVlIG91dGVyO1xuICAgIH1cbiAgICB2YWx1ZXMgKz0gKHZhbHVlcy5sZW5ndGggPiAwID8gJyAnIDogJycpICsgdG9rZW47XG4gIH1cbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ29tbWVudHMoanFOb2Rlcykge1xuICBqcU5vZGVzID0ganFMaXRlKGpxTm9kZXMpO1xuICB2YXIgaSA9IGpxTm9kZXMubGVuZ3RoO1xuXG4gIGlmIChpIDw9IDEpIHtcbiAgICByZXR1cm4ganFOb2RlcztcbiAgfVxuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgbm9kZSA9IGpxTm9kZXNbaV07XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UKSB7XG4gICAgICBzcGxpY2UuY2FsbChqcU5vZGVzLCBpLCAxKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGpxTm9kZXM7XG59XG5cbnZhciAkY29udHJvbGxlck1pbkVyciA9IG1pbkVycignJGNvbnRyb2xsZXInKTtcblxuXG52YXIgQ05UUkxfUkVHID0gL14oXFxTKykoXFxzK2FzXFxzKyhbXFx3JF0rKSk/JC87XG5mdW5jdGlvbiBpZGVudGlmaWVyRm9yQ29udHJvbGxlcihjb250cm9sbGVyLCBpZGVudCkge1xuICBpZiAoaWRlbnQgJiYgaXNTdHJpbmcoaWRlbnQpKSByZXR1cm4gaWRlbnQ7XG4gIGlmIChpc1N0cmluZyhjb250cm9sbGVyKSkge1xuICAgIHZhciBtYXRjaCA9IENOVFJMX1JFRy5leGVjKGNvbnRyb2xsZXIpO1xuICAgIGlmIChtYXRjaCkgcmV0dXJuIG1hdGNoWzNdO1xuICB9XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRjb250cm9sbGVyUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIHtAbGluayBuZy4kY29udHJvbGxlciAkY29udHJvbGxlciBzZXJ2aWNlfSBpcyB1c2VkIGJ5IEFuZ3VsYXIgdG8gY3JlYXRlIG5ld1xuICogY29udHJvbGxlcnMuXG4gKlxuICogVGhpcyBwcm92aWRlciBhbGxvd3MgY29udHJvbGxlciByZWdpc3RyYXRpb24gdmlhIHRoZVxuICoge0BsaW5rIG5nLiRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXIgcmVnaXN0ZXJ9IG1ldGhvZC5cbiAqL1xuZnVuY3Rpb24gJENvbnRyb2xsZXJQcm92aWRlcigpIHtcbiAgdmFyIGNvbnRyb2xsZXJzID0ge30sXG4gICAgICBnbG9iYWxzID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlclxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgQ29udHJvbGxlciBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGNvbnRyb2xsZXJzIHdoZXJlIHRoZSBrZXlzIGFyZVxuICAgKiAgICB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjb25zdHJ1Y3RvcnMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZm4gKG9wdGlvbmFsbHkgZGVjb3JhdGVkIHdpdGggRElcbiAgICogICAgYW5ub3RhdGlvbnMgaW4gdGhlIGFycmF5IG5vdGF0aW9uKS5cbiAgICovXG4gIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lLCBjb25zdHJ1Y3Rvcikge1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdjb250cm9sbGVyJyk7XG4gICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICBleHRlbmQoY29udHJvbGxlcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250cm9sbGVyc1tuYW1lXSA9IGNvbnN0cnVjdG9yO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFsc1xuICAgKiBAZGVzY3JpcHRpb24gSWYgY2FsbGVkLCBhbGxvd3MgYCRjb250cm9sbGVyYCB0byBmaW5kIGNvbnRyb2xsZXIgY29uc3RydWN0b3JzIG9uIGB3aW5kb3dgXG4gICAqL1xuICB0aGlzLmFsbG93R2xvYmFscyA9IGZ1bmN0aW9uKCkge1xuICAgIGdsb2JhbHMgPSB0cnVlO1xuICB9O1xuXG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRpbmplY3RvciwgJHdpbmRvdykge1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkY29udHJvbGxlclxuICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBjb25zdHJ1Y3RvciBJZiBjYWxsZWQgd2l0aCBhIGZ1bmN0aW9uIHRoZW4gaXQncyBjb25zaWRlcmVkIHRvIGJlIHRoZVxuICAgICAqICAgIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIE90aGVyd2lzZSBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgYSBzdHJpbmcgd2hpY2ggaXMgdXNlZFxuICAgICAqICAgIHRvIHJldHJpZXZlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIHVzaW5nIHRoZSBmb2xsb3dpbmcgc3RlcHM6XG4gICAgICpcbiAgICAgKiAgICAqIGNoZWNrIGlmIGEgY29udHJvbGxlciB3aXRoIGdpdmVuIG5hbWUgaXMgcmVnaXN0ZXJlZCB2aWEgYCRjb250cm9sbGVyUHJvdmlkZXJgXG4gICAgICogICAgKiBjaGVjayBpZiBldmFsdWF0aW5nIHRoZSBzdHJpbmcgb24gdGhlIGN1cnJlbnQgc2NvcGUgcmV0dXJucyBhIGNvbnN0cnVjdG9yXG4gICAgICogICAgKiBpZiAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFscywgY2hlY2sgYHdpbmRvd1tjb25zdHJ1Y3Rvcl1gIG9uIHRoZSBnbG9iYWxcbiAgICAgKiAgICAgIGB3aW5kb3dgIG9iamVjdCAobm90IHJlY29tbWVuZGVkKVxuICAgICAqXG4gICAgICogICAgVGhlIHN0cmluZyBjYW4gdXNlIHRoZSBgY29udHJvbGxlciBhcyBwcm9wZXJ0eWAgc3ludGF4LCB3aGVyZSB0aGUgY29udHJvbGxlciBpbnN0YW5jZSBpcyBwdWJsaXNoZWRcbiAgICAgKiAgICBhcyB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IG9uIHRoZSBgc2NvcGVgOyB0aGUgYHNjb3BlYCBtdXN0IGJlIGluamVjdGVkIGludG8gYGxvY2Fsc2AgcGFyYW0gZm9yIHRoaXNcbiAgICAgKiAgICB0byB3b3JrIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhbHMgSW5qZWN0aW9uIGxvY2FscyBmb3IgQ29udHJvbGxlci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEluc3RhbmNlIG9mIGdpdmVuIGNvbnRyb2xsZXIuXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBgJGNvbnRyb2xsZXJgIHNlcnZpY2UgaXMgcmVzcG9uc2libGUgZm9yIGluc3RhbnRpYXRpbmcgY29udHJvbGxlcnMuXG4gICAgICpcbiAgICAgKiBJdCdzIGp1c3QgYSBzaW1wbGUgY2FsbCB0byB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSwgYnV0IGV4dHJhY3RlZCBpbnRvXG4gICAgICogYSBzZXJ2aWNlLCBzbyB0aGF0IG9uZSBjYW4gb3ZlcnJpZGUgdGhpcyBzZXJ2aWNlIHdpdGggW0JDIHZlcnNpb25dKGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzE2NDk3ODgpLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbihleHByZXNzaW9uLCBsb2NhbHMsIGxhdGVyLCBpZGVudCkge1xuICAgICAgLy8gUFJJVkFURSBBUEk6XG4gICAgICAvLyAgIHBhcmFtIGBsYXRlcmAgLS0tIGluZGljYXRlcyB0aGF0IHRoZSBjb250cm9sbGVyJ3MgY29uc3RydWN0b3IgaXMgaW52b2tlZCBhdCBhIGxhdGVyIHRpbWUuXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIElmIHRydWUsICRjb250cm9sbGVyIHdpbGwgYWxsb2NhdGUgdGhlIG9iamVjdCB3aXRoIHRoZSBjb3JyZWN0XG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHByb3RvdHlwZSBjaGFpbiwgYnV0IHdpbGwgbm90IGludm9rZSB0aGUgY29udHJvbGxlciB1bnRpbCBhIHJldHVybmVkXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrIGlzIGludm9rZWQuXG4gICAgICAvLyAgIHBhcmFtIGBpZGVudGAgLS0tIEFuIG9wdGlvbmFsIGxhYmVsIHdoaWNoIG92ZXJyaWRlcyB0aGUgbGFiZWwgcGFyc2VkIGZyb20gdGhlIGNvbnRyb2xsZXJcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbiwgaWYgYW55LlxuICAgICAgdmFyIGluc3RhbmNlLCBtYXRjaCwgY29uc3RydWN0b3IsIGlkZW50aWZpZXI7XG4gICAgICBsYXRlciA9IGxhdGVyID09PSB0cnVlO1xuICAgICAgaWYgKGlkZW50ICYmIGlzU3RyaW5nKGlkZW50KSkge1xuICAgICAgICBpZGVudGlmaWVyID0gaWRlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZyhleHByZXNzaW9uKSkge1xuICAgICAgICBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goQ05UUkxfUkVHKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgIHRocm93ICRjb250cm9sbGVyTWluRXJyKCdjdHJsZm10JyxcbiAgICAgICAgICAgIFwiQmFkbHkgZm9ybWVkIGNvbnRyb2xsZXIgc3RyaW5nICd7MH0nLiBcIiArXG4gICAgICAgICAgICBcIk11c3QgbWF0Y2ggYF9fbmFtZV9fIGFzIF9faWRfX2Agb3IgYF9fbmFtZV9fYC5cIiwgZXhwcmVzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3RydWN0b3IgPSBtYXRjaFsxXSxcbiAgICAgICAgaWRlbnRpZmllciA9IGlkZW50aWZpZXIgfHwgbWF0Y2hbM107XG4gICAgICAgIGV4cHJlc3Npb24gPSBjb250cm9sbGVycy5oYXNPd25Qcm9wZXJ0eShjb25zdHJ1Y3RvcilcbiAgICAgICAgICAgID8gY29udHJvbGxlcnNbY29uc3RydWN0b3JdXG4gICAgICAgICAgICA6IGdldHRlcihsb2NhbHMuJHNjb3BlLCBjb25zdHJ1Y3RvciwgdHJ1ZSkgfHxcbiAgICAgICAgICAgICAgICAoZ2xvYmFscyA/IGdldHRlcigkd2luZG93LCBjb25zdHJ1Y3RvciwgdHJ1ZSkgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgIGFzc2VydEFyZ0ZuKGV4cHJlc3Npb24sIGNvbnN0cnVjdG9yLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxhdGVyKSB7XG4gICAgICAgIC8vIEluc3RhbnRpYXRlIGNvbnRyb2xsZXIgbGF0ZXI6XG4gICAgICAgIC8vIFRoaXMgbWFjaGluZXJ5IGlzIHVzZWQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBvYmplY3QgYmVmb3JlIGNhbGxpbmcgdGhlXG4gICAgICAgIC8vIGNvbnRyb2xsZXIncyBjb25zdHJ1Y3RvciBpdHNlbGYuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoaXMgYWxsb3dzIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXIgYmVmb3JlIHRoZSBjb25zdHJ1Y3RvciBpc1xuICAgICAgICAvLyBpbnZva2VkLiBQcmltYXJpbHksIHRoaXMgaXMgdXNlZCBmb3IgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBpbiAkY29tcGlsZS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBmZWF0dXJlIGlzIG5vdCBpbnRlbmRlZCBmb3IgdXNlIGJ5IGFwcGxpY2F0aW9ucywgYW5kIGlzIHRodXMgbm90IGRvY3VtZW50ZWRcbiAgICAgICAgLy8gcHVibGljbHkuXG4gICAgICAgIC8vIE9iamVjdCBjcmVhdGlvbjogaHR0cDovL2pzcGVyZi5jb20vY3JlYXRlLWNvbnN0cnVjdG9yLzJcbiAgICAgICAgdmFyIGNvbnRyb2xsZXJQcm90b3R5cGUgPSAoaXNBcnJheShleHByZXNzaW9uKSA/XG4gICAgICAgICAgZXhwcmVzc2lvbltleHByZXNzaW9uLmxlbmd0aCAtIDFdIDogZXhwcmVzc2lvbikucHJvdG90eXBlO1xuICAgICAgICBpbnN0YW5jZSA9IE9iamVjdC5jcmVhdGUoY29udHJvbGxlclByb3RvdHlwZSB8fCBudWxsKTtcblxuICAgICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICAgIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbnN0YW50aWF0ZTtcbiAgICAgICAgcmV0dXJuIGluc3RhbnRpYXRlID0gZXh0ZW5kKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSAkaW5qZWN0b3IuaW52b2tlKGV4cHJlc3Npb24sIGluc3RhbmNlLCBsb2NhbHMsIGNvbnN0cnVjdG9yKTtcbiAgICAgICAgICBpZiAocmVzdWx0ICE9PSBpbnN0YW5jZSAmJiAoaXNPYmplY3QocmVzdWx0KSB8fCBpc0Z1bmN0aW9uKHJlc3VsdCkpKSB7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IHJlc3VsdDtcbiAgICAgICAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgICAgICAgIC8vIElmIHJlc3VsdCBjaGFuZ2VkLCByZS1hc3NpZ24gY29udHJvbGxlckFzIHZhbHVlIHRvIHNjb3BlLlxuICAgICAgICAgICAgICBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIGNvbnN0cnVjdG9yIHx8IGV4cHJlc3Npb24ubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgfSwge1xuICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpbnN0YW5jZSA9ICRpbmplY3Rvci5pbnN0YW50aWF0ZShleHByZXNzaW9uLCBsb2NhbHMsIGNvbnN0cnVjdG9yKTtcblxuICAgICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBjb25zdHJ1Y3RvciB8fCBleHByZXNzaW9uLm5hbWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgbmFtZSkge1xuICAgICAgaWYgKCEobG9jYWxzICYmIGlzT2JqZWN0KGxvY2Fscy4kc2NvcGUpKSkge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJyRjb250cm9sbGVyJykoJ25vc2NwJyxcbiAgICAgICAgICBcIkNhbm5vdCBleHBvcnQgY29udHJvbGxlciAnezB9JyBhcyAnezF9JyEgTm8gJHNjb3BlIG9iamVjdCBwcm92aWRlZCB2aWEgYGxvY2Fsc2AuXCIsXG4gICAgICAgICAgbmFtZSwgaWRlbnRpZmllcik7XG4gICAgICB9XG5cbiAgICAgIGxvY2Fscy4kc2NvcGVbaWRlbnRpZmllcl0gPSBpbnN0YW5jZTtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkZG9jdW1lbnRcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHtAbGluayBhbmd1bGFyLmVsZW1lbnQgalF1ZXJ5IG9yIGpxTGl0ZX0gd3JhcHBlciBmb3IgdGhlIGJyb3dzZXIncyBgd2luZG93LmRvY3VtZW50YCBvYmplY3QuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImRvY3VtZW50RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8cD4kZG9jdW1lbnQgdGl0bGU6IDxiIG5nLWJpbmQ9XCJ0aXRsZVwiPjwvYj48L3A+XG4gICAgICAgICA8cD53aW5kb3cuZG9jdW1lbnQgdGl0bGU6IDxiIG5nLWJpbmQ9XCJ3aW5kb3dUaXRsZVwiPjwvYj48L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdkb2N1bWVudEV4YW1wbGUnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRzY29wZSwgJGRvY3VtZW50KSB7XG4gICAgICAgICAgICRzY29wZS50aXRsZSA9ICRkb2N1bWVudFswXS50aXRsZTtcbiAgICAgICAgICAgJHNjb3BlLndpbmRvd1RpdGxlID0gYW5ndWxhci5lbGVtZW50KHdpbmRvdy5kb2N1bWVudClbMF0udGl0bGU7XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gJERvY3VtZW50UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsIGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIHJldHVybiBqcUxpdGUod2luZG93LmRvY3VtZW50KTtcbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRleGNlcHRpb25IYW5kbGVyXG4gKiBAcmVxdWlyZXMgbmcuJGxvZ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQW55IHVuY2F1Z2h0IGV4Y2VwdGlvbiBpbiBhbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRlbGVnYXRlZCB0byB0aGlzIHNlcnZpY2UuXG4gKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzaW1wbHkgZGVsZWdhdGVzIHRvIGAkbG9nLmVycm9yYCB3aGljaCBsb2dzIGl0IGludG9cbiAqIHRoZSBicm93c2VyIGNvbnNvbGUuXG4gKlxuICogSW4gdW5pdCB0ZXN0cywgaWYgYGFuZ3VsYXItbW9ja3MuanNgIGlzIGxvYWRlZCwgdGhpcyBzZXJ2aWNlIGlzIG92ZXJyaWRkZW4gYnlcbiAqIHtAbGluayBuZ01vY2suJGV4Y2VwdGlvbkhhbmRsZXIgbW9jayAkZXhjZXB0aW9uSGFuZGxlcn0gd2hpY2ggYWlkcyBpbiB0ZXN0aW5nLlxuICpcbiAqICMjIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqICAgYW5ndWxhci5tb2R1bGUoJ2V4Y2VwdGlvbk92ZXJyaWRlJywgW10pLmZhY3RvcnkoJyRleGNlcHRpb25IYW5kbGVyJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgcmV0dXJuIGZ1bmN0aW9uKGV4Y2VwdGlvbiwgY2F1c2UpIHtcbiAqICAgICAgIGV4Y2VwdGlvbi5tZXNzYWdlICs9ICcgKGNhdXNlZCBieSBcIicgKyBjYXVzZSArICdcIiknO1xuICogICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICogICAgIH07XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogVGhpcyBleGFtcGxlIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbCBhY3Rpb24gb2YgYCRleGNlcHRpb25IYW5kbGVyYCwgdG8gbWFrZSBhbmd1bGFyXG4gKiBleGNlcHRpb25zIGZhaWwgaGFyZCB3aGVuIHRoZXkgaGFwcGVuLCBpbnN0ZWFkIG9mIGp1c3QgbG9nZ2luZyB0byB0aGUgY29uc29sZS5cbiAqXG4gKiA8aHIgLz5cbiAqIE5vdGUsIHRoYXQgY29kZSBleGVjdXRlZCBpbiBldmVudC1saXN0ZW5lcnMgKGV2ZW4gdGhvc2UgcmVnaXN0ZXJlZCB1c2luZyBqcUxpdGUncyBgb25gL2BiaW5kYFxuICogbWV0aG9kcykgZG9lcyBub3QgZGVsZWdhdGUgZXhjZXB0aW9ucyB0byB0aGUge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfVxuICogKHVubGVzcyBleGVjdXRlZCBkdXJpbmcgYSBkaWdlc3QpLlxuICpcbiAqIElmIHlvdSB3aXNoLCB5b3UgY2FuIG1hbnVhbGx5IGRlbGVnYXRlIGV4Y2VwdGlvbnMsIGUuZy5cbiAqIGB0cnkgeyAuLi4gfSBjYXRjaChlKSB7ICRleGNlcHRpb25IYW5kbGVyKGUpOyB9YFxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGV4Y2VwdGlvbiBFeGNlcHRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBlcnJvci5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gY2F1c2Ugb3B0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbnRleHQgaW4gd2hpY2hcbiAqICAgICAgIHRoZSBlcnJvciB3YXMgdGhyb3duLlxuICpcbiAqL1xuZnVuY3Rpb24gJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckbG9nJywgZnVuY3Rpb24oJGxvZykge1xuICAgIHJldHVybiBmdW5jdGlvbihleGNlcHRpb24sIGNhdXNlKSB7XG4gICAgICAkbG9nLmVycm9yLmFwcGx5KCRsb2csIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfV07XG59XG5cbnZhciAkJEZvcmNlUmVmbG93UHJvdmlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckZG9jdW1lbnQnLCBmdW5jdGlvbigkZG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZG9tTm9kZSkge1xuICAgICAgLy90aGUgbGluZSBiZWxvdyB3aWxsIGZvcmNlIHRoZSBicm93c2VyIHRvIHBlcmZvcm0gYSByZXBhaW50IHNvXG4gICAgICAvL3RoYXQgYWxsIHRoZSBhbmltYXRlZCBlbGVtZW50cyB3aXRoaW4gdGhlIGFuaW1hdGlvbiBmcmFtZSB3aWxsXG4gICAgICAvL2JlIHByb3Blcmx5IHVwZGF0ZWQgYW5kIGRyYXduIG9uIHNjcmVlbi4gVGhpcyBpcyByZXF1aXJlZCB0b1xuICAgICAgLy9lbnN1cmUgdGhhdCB0aGUgcHJlcGFyYXRpb24gYW5pbWF0aW9uIGlzIHByb3Blcmx5IGZsdXNoZWQgc28gdGhhdFxuICAgICAgLy90aGUgYWN0aXZlIHN0YXRlIHBpY2tzIHVwIGZyb20gdGhlcmUuIERPIE5PVCBSRU1PVkUgVEhJUyBMSU5FLlxuICAgICAgLy9ETyBOT1QgT1BUSU1JWkUgVEhJUyBMSU5FLiBUSEUgTUlOSUZJRVIgV0lMTCBSRU1PVkUgSVQgT1RIRVJXSVNFIFdISUNIXG4gICAgICAvL1dJTEwgUkVTVUxUIElOIEFOIFVOUFJFRElDVEFCTEUgQlVHIFRIQVQgSVMgVkVSWSBIQVJEIFRPIFRSQUNLIERPV04gQU5EXG4gICAgICAvL1dJTEwgVEFLRSBZRUFSUyBBV0FZIEZST00gWU9VUiBMSUZFLlxuICAgICAgaWYgKGRvbU5vZGUpIHtcbiAgICAgICAgaWYgKCFkb21Ob2RlLm5vZGVUeXBlICYmIGRvbU5vZGUgaW5zdGFuY2VvZiBqcUxpdGUpIHtcbiAgICAgICAgICBkb21Ob2RlID0gZG9tTm9kZVswXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9tTm9kZSA9ICRkb2N1bWVudFswXS5ib2R5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvbU5vZGUub2Zmc2V0V2lkdGggKyAxO1xuICAgIH07XG4gIH1dO1xufTtcblxudmFyIEFQUExJQ0FUSU9OX0pTT04gPSAnYXBwbGljYXRpb24vanNvbic7XG52YXIgQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04gPSB7J0NvbnRlbnQtVHlwZSc6IEFQUExJQ0FUSU9OX0pTT04gKyAnO2NoYXJzZXQ9dXRmLTgnfTtcbnZhciBKU09OX1NUQVJUID0gL15cXFt8Xlxceyg/IVxceykvO1xudmFyIEpTT05fRU5EUyA9IHtcbiAgJ1snOiAvXSQvLFxuICAneyc6IC99JC9cbn07XG52YXIgSlNPTl9QUk9URUNUSU9OX1BSRUZJWCA9IC9eXFwpXFxdXFx9Jyw/XFxuLztcbnZhciAkaHR0cE1pbkVyciA9IG1pbkVycignJGh0dHAnKTtcbnZhciAkaHR0cE1pbkVyckxlZ2FjeUZuID0gZnVuY3Rpb24obWV0aG9kKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyAkaHR0cE1pbkVycignbGVnYWN5JywgJ1RoZSBtZXRob2QgYHswfWAgb24gdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbSBgJGh0dHBgIGhhcyBiZWVuIGRpc2FibGVkLicsIG1ldGhvZCk7XG4gIH07XG59O1xuXG5mdW5jdGlvbiBzZXJpYWxpemVWYWx1ZSh2KSB7XG4gIGlmIChpc09iamVjdCh2KSkge1xuICAgIHJldHVybiBpc0RhdGUodikgPyB2LnRvSVNPU3RyaW5nKCkgOiB0b0pzb24odik7XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cblxuZnVuY3Rpb24gJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlcigpIHtcbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRodHRwUGFyYW1TZXJpYWxpemVyXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZhdWx0IHtAbGluayAkaHR0cCBgJGh0dHBgfSBwYXJhbXMgc2VyaWFsaXplciB0aGF0IGNvbnZlcnRzIG9iamVjdHMgdG8gc3RyaW5nc1xuICAgKiBhY2NvcmRpbmcgdG8gdGhlIGZvbGxvd2luZyBydWxlczpcbiAgICpcbiAgICogKiBgeydmb28nOiAnYmFyJ31gIHJlc3VsdHMgaW4gYGZvbz1iYXJgXG4gICAqICogYHsnZm9vJzogRGF0ZS5ub3coKX1gIHJlc3VsdHMgaW4gYGZvbz0yMDE1LTA0LTAxVDA5JTNBNTAlM0E0OS4yNjJaYCAoYHRvSVNPU3RyaW5nKClgIGFuZCBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIGEgRGF0ZSBvYmplY3QpXG4gICAqICogYHsnZm9vJzogWydiYXInLCAnYmF6J119YCByZXN1bHRzIGluIGBmb289YmFyJmZvbz1iYXpgIChyZXBlYXRlZCBrZXkgZm9yIGVhY2ggYXJyYXkgZWxlbWVudClcbiAgICogKiBgeydmb28nOiB7J2Jhcic6J2Jheid9fWAgcmVzdWx0cyBpbiBgZm9vPSU3QiUyMmJhciUyMiUzQSUyMmJheiUyMiU3RFwiYCAoc3RyaW5naWZpZWQgYW5kIGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0KVxuICAgKlxuICAgKiBOb3RlIHRoYXQgc2VyaWFsaXplciB3aWxsIHNvcnQgdGhlIHJlcXVlc3QgcGFyYW1ldGVycyBhbHBoYWJldGljYWxseS5cbiAgICogKi9cblxuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbmdQYXJhbVNlcmlhbGl6ZXIocGFyYW1zKSB7XG4gICAgICBpZiAoIXBhcmFtcykgcmV0dXJuICcnO1xuICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICBmb3JFYWNoU29ydGVkKHBhcmFtcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKHYsIGspIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5KSAgKyAnPScgKyBlbmNvZGVVcmlRdWVyeShzZXJpYWxpemVWYWx1ZSh2KSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5KSArICc9JyArIGVuY29kZVVyaVF1ZXJ5KHNlcmlhbGl6ZVZhbHVlKHZhbHVlKSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJyYnKTtcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyKCkge1xuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEFsdGVybmF0aXZlIHtAbGluayAkaHR0cCBgJGh0dHBgfSBwYXJhbXMgc2VyaWFsaXplciB0aGF0IGZvbGxvd3NcbiAgICogalF1ZXJ5J3MgW2BwYXJhbSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2pxdWVyeS5wYXJhbS8pIG1ldGhvZCBsb2dpYy5cbiAgICogVGhlIHNlcmlhbGl6ZXIgd2lsbCBhbHNvIHNvcnQgdGhlIHBhcmFtcyBhbHBoYWJldGljYWxseS5cbiAgICpcbiAgICogVG8gdXNlIGl0IGZvciBzZXJpYWxpemluZyBgJGh0dHBgIHJlcXVlc3QgcGFyYW1ldGVycywgc2V0IGl0IGFzIHRoZSBgcGFyYW1TZXJpYWxpemVyYCBwcm9wZXJ0eTpcbiAgICpcbiAgICogYGBganNcbiAgICogJGh0dHAoe1xuICAgKiAgIHVybDogbXlVcmwsXG4gICAqICAgbWV0aG9kOiAnR0VUJyxcbiAgICogICBwYXJhbXM6IG15UGFyYW1zLFxuICAgKiAgIHBhcmFtU2VyaWFsaXplcjogJyRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlJ1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gc2V0IGl0IGFzIHRoZSBkZWZhdWx0IGBwYXJhbVNlcmlhbGl6ZXJgIGluIHRoZVxuICAgKiB7QGxpbmsgJGh0dHBQcm92aWRlciNkZWZhdWx0cyBgJGh0dHBQcm92aWRlcmB9LlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gaW5qZWN0IHRoZSBzZXJpYWxpemVyIGFuZCB1c2UgaXQgZXhwbGljaXRseSwgZm9yIGV4YW1wbGUgdG8gc2VyaWFsaXplXG4gICAqIGZvcm0gZGF0YSBmb3Igc3VibWlzc2lvbjpcbiAgICpcbiAgICogYGBganNcbiAgICogLmNvbnRyb2xsZXIoZnVuY3Rpb24oJGh0dHAsICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlKSB7XG4gICAqICAgLy8uLi5cbiAgICpcbiAgICogICAkaHR0cCh7XG4gICAqICAgICB1cmw6IG15VXJsLFxuICAgKiAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAqICAgICBkYXRhOiAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZShteURhdGEpLFxuICAgKiAgICAgaGVhZGVyczoge1xuICAgKiAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICpcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiAqL1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24galF1ZXJ5TGlrZVBhcmFtU2VyaWFsaXplcihwYXJhbXMpIHtcbiAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gJyc7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgIHNlcmlhbGl6ZShwYXJhbXMsICcnLCB0cnVlKTtcbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcmJyk7XG5cbiAgICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZSh0b1NlcmlhbGl6ZSwgcHJlZml4LCB0b3BMZXZlbCkge1xuICAgICAgICBpZiAodG9TZXJpYWxpemUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodG9TZXJpYWxpemUpKSByZXR1cm47XG4gICAgICAgIGlmIChpc0FycmF5KHRvU2VyaWFsaXplKSkge1xuICAgICAgICAgIGZvckVhY2godG9TZXJpYWxpemUsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgc2VyaWFsaXplKHZhbHVlLCBwcmVmaXggKyAnWycgKyAoaXNPYmplY3QodmFsdWUpID8gaW5kZXggOiAnJykgKyAnXScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRvU2VyaWFsaXplKSAmJiAhaXNEYXRlKHRvU2VyaWFsaXplKSkge1xuICAgICAgICAgIGZvckVhY2hTb3J0ZWQodG9TZXJpYWxpemUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIHNlcmlhbGl6ZSh2YWx1ZSwgcHJlZml4ICtcbiAgICAgICAgICAgICAgICAodG9wTGV2ZWwgPyAnJyA6ICdbJykgK1xuICAgICAgICAgICAgICAgIGtleSArXG4gICAgICAgICAgICAgICAgKHRvcExldmVsID8gJycgOiAnXScpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KHByZWZpeCkgKyAnPScgKyBlbmNvZGVVcmlRdWVyeShzZXJpYWxpemVWYWx1ZSh0b1NlcmlhbGl6ZSkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0oZGF0YSwgaGVhZGVycykge1xuICBpZiAoaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAvLyBTdHJpcCBqc29uIHZ1bG5lcmFiaWxpdHkgcHJvdGVjdGlvbiBwcmVmaXggYW5kIHRyaW0gd2hpdGVzcGFjZVxuICAgIHZhciB0ZW1wRGF0YSA9IGRhdGEucmVwbGFjZShKU09OX1BST1RFQ1RJT05fUFJFRklYLCAnJykudHJpbSgpO1xuXG4gICAgaWYgKHRlbXBEYXRhKSB7XG4gICAgICB2YXIgY29udGVudFR5cGUgPSBoZWFkZXJzKCdDb250ZW50LVR5cGUnKTtcbiAgICAgIGlmICgoY29udGVudFR5cGUgJiYgKGNvbnRlbnRUeXBlLmluZGV4T2YoQVBQTElDQVRJT05fSlNPTikgPT09IDApKSB8fCBpc0pzb25MaWtlKHRlbXBEYXRhKSkge1xuICAgICAgICBkYXRhID0gZnJvbUpzb24odGVtcERhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBpc0pzb25MaWtlKHN0cikge1xuICAgIHZhciBqc29uU3RhcnQgPSBzdHIubWF0Y2goSlNPTl9TVEFSVCk7XG4gICAgcmV0dXJuIGpzb25TdGFydCAmJiBKU09OX0VORFNbanNvblN0YXJ0WzBdXS50ZXN0KHN0cik7XG59XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGtleSB2YWx1ZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaGVhZGVycyBSYXcgaGVhZGVycyBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge09iamVjdH0gUGFyc2VkIGhlYWRlcnMgYXMga2V5IHZhbHVlIG9iamVjdFxuICovXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0gY3JlYXRlTWFwKCksIGk7XG5cbiAgZnVuY3Rpb24gZmlsbEluUGFyc2VkKGtleSwgdmFsKSB7XG4gICAgaWYgKGtleSkge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH1cblxuICBpZiAoaXNTdHJpbmcoaGVhZGVycykpIHtcbiAgICBmb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbihsaW5lKSB7XG4gICAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAgICBmaWxsSW5QYXJzZWQobG93ZXJjYXNlKHRyaW0obGluZS5zdWJzdHIoMCwgaSkpKSwgdHJpbShsaW5lLnN1YnN0cihpICsgMSkpKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChpc09iamVjdChoZWFkZXJzKSkge1xuICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24oaGVhZGVyVmFsLCBoZWFkZXJLZXkpIHtcbiAgICAgIGZpbGxJblBhcnNlZChsb3dlcmNhc2UoaGVhZGVyS2V5KSwgdHJpbShoZWFkZXJWYWwpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZWQ7XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gcGFyc2VkIGhlYWRlcnMuXG4gKlxuICogSGVhZGVycyBhcmUgbGF6eSBwYXJzZWQgd2hlbiBmaXJzdCByZXF1ZXN0ZWQuXG4gKiBAc2VlIHBhcnNlSGVhZGVyc1xuICpcbiAqIEBwYXJhbSB7KHN0cmluZ3xPYmplY3QpfSBoZWFkZXJzIEhlYWRlcnMgdG8gcHJvdmlkZSBhY2Nlc3MgdG8uXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nPSl9IFJldHVybnMgYSBnZXR0ZXIgZnVuY3Rpb24gd2hpY2ggaWYgY2FsbGVkIHdpdGg6XG4gKlxuICogICAtIGlmIGNhbGxlZCB3aXRoIHNpbmdsZSBhbiBhcmd1bWVudCByZXR1cm5zIGEgc2luZ2xlIGhlYWRlciB2YWx1ZSBvciBudWxsXG4gKiAgIC0gaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGhlYWRlcnMuXG4gKi9cbmZ1bmN0aW9uIGhlYWRlcnNHZXR0ZXIoaGVhZGVycykge1xuICB2YXIgaGVhZGVyc09iajtcblxuICByZXR1cm4gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICghaGVhZGVyc09iaikgaGVhZGVyc09iaiA9ICBwYXJzZUhlYWRlcnMoaGVhZGVycyk7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gaGVhZGVyc09ialtsb3dlcmNhc2UobmFtZSldO1xuICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBoZWFkZXJzT2JqO1xuICB9O1xufVxuXG5cbi8qKlxuICogQ2hhaW4gYWxsIGdpdmVuIGZ1bmN0aW9uc1xuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBmb3IgYm90aCByZXF1ZXN0IGFuZCByZXNwb25zZSB0cmFuc2Zvcm1pbmdcbiAqXG4gKiBAcGFyYW0geyp9IGRhdGEgRGF0YSB0byB0cmFuc2Zvcm0uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZz0pfSBoZWFkZXJzIEhUVFAgaGVhZGVycyBnZXR0ZXIgZm4uXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhdHVzIEhUVFAgc3RhdHVzIGNvZGUgb2YgdGhlIHJlc3BvbnNlLlxuICogQHBhcmFtIHsoRnVuY3Rpb258QXJyYXkuPEZ1bmN0aW9uPil9IGZucyBGdW5jdGlvbiBvciBhbiBhcnJheSBvZiBmdW5jdGlvbnMuXG4gKiBAcmV0dXJucyB7Kn0gVHJhbnNmb3JtZWQgZGF0YS5cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBzdGF0dXMsIGZucykge1xuICBpZiAoaXNGdW5jdGlvbihmbnMpKSB7XG4gICAgcmV0dXJuIGZucyhkYXRhLCBoZWFkZXJzLCBzdGF0dXMpO1xuICB9XG5cbiAgZm9yRWFjaChmbnMsIGZ1bmN0aW9uKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMsIHN0YXR1cyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5cbmZ1bmN0aW9uIGlzU3VjY2VzcyhzdGF0dXMpIHtcbiAgcmV0dXJuIDIwMCA8PSBzdGF0dXMgJiYgc3RhdHVzIDwgMzAwO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkaHR0cFByb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSBgJGh0dHBQcm92aWRlcmAgdG8gY2hhbmdlIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IHNlcnZpY2UuXG4gKiAqL1xuZnVuY3Rpb24gJEh0dHBQcm92aWRlcigpIHtcbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI2RlZmF1bHRzXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmplY3QgY29udGFpbmluZyBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gcmVxdWVzdHMuXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMuY2FjaGVgKiogLSB7T2JqZWN0fSAtIGFuIG9iamVjdCBidWlsdCB3aXRoIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH1cbiAgICogdGhhdCB3aWxsIHByb3ZpZGUgdGhlIGNhY2hlIGZvciBhbGwgcmVxdWVzdHMgd2hvIHNldCB0aGVpciBgY2FjaGVgIHByb3BlcnR5IHRvIGB0cnVlYC5cbiAgICogSWYgeW91IHNldCB0aGUgYGRlZmF1bHRzLmNhY2hlID0gZmFsc2VgIHRoZW4gb25seSByZXF1ZXN0cyB0aGF0IHNwZWNpZnkgdGhlaXIgb3duIGN1c3RvbVxuICAgKiBjYWNoZSBvYmplY3Qgd2lsbCBiZSBjYWNoZWQuIFNlZSB7QGxpbmsgJGh0dHAjY2FjaGluZyAkaHR0cCBDYWNoaW5nfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy54c3JmQ29va2llTmFtZWAqKiAtIHtzdHJpbmd9IC0gTmFtZSBvZiBjb29raWUgY29udGFpbmluZyB0aGUgWFNSRiB0b2tlbi5cbiAgICogRGVmYXVsdHMgdmFsdWUgaXMgYCdYU1JGLVRPS0VOJ2AuXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMueHNyZkhlYWRlck5hbWVgKiogLSB7c3RyaW5nfSAtIE5hbWUgb2YgSFRUUCBoZWFkZXIgdG8gcG9wdWxhdGUgd2l0aCB0aGVcbiAgICogWFNSRiB0b2tlbi4gRGVmYXVsdHMgdmFsdWUgaXMgYCdYLVhTUkYtVE9LRU4nYC5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5oZWFkZXJzYCoqIC0ge09iamVjdH0gLSBEZWZhdWx0IGhlYWRlcnMgZm9yIGFsbCAkaHR0cCByZXF1ZXN0cy5cbiAgICogUmVmZXIgdG8ge0BsaW5rIG5nLiRodHRwI3NldHRpbmctaHR0cC1oZWFkZXJzICRodHRwfSBmb3IgZG9jdW1lbnRhdGlvbiBvblxuICAgKiBzZXR0aW5nIGRlZmF1bHQgaGVhZGVycy5cbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5jb21tb25gKipcbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wb3N0YCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucHV0YCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucGF0Y2hgKipcbiAgICpcbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXJgKiogLSBge3N0cmluZ3xmdW5jdGlvbihPYmplY3Q8c3RyaW5nLHN0cmluZz4pOnN0cmluZ31gIC0gQSBmdW5jdGlvblxuICAgKiAgdXNlZCB0byB0aGUgcHJlcGFyZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgcmVxdWVzdCBwYXJhbWV0ZXJzIChzcGVjaWZpZWQgYXMgYW4gb2JqZWN0KS5cbiAgICogIElmIHNwZWNpZmllZCBhcyBzdHJpbmcsIGl0IGlzIGludGVycHJldGVkIGFzIGEgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAgICogIERlZmF1bHRzIHRvIHtAbGluayBuZy4kaHR0cFBhcmFtU2VyaWFsaXplciAkaHR0cFBhcmFtU2VyaWFsaXplcn0uXG4gICAqXG4gICAqKi9cbiAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAvLyB0cmFuc2Zvcm0gaW5jb21pbmcgcmVzcG9uc2UgZGF0YVxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBbZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybV0sXG5cbiAgICAvLyB0cmFuc2Zvcm0gb3V0Z29pbmcgcmVxdWVzdCBkYXRhXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uKGQpIHtcbiAgICAgIHJldHVybiBpc09iamVjdChkKSAmJiAhaXNGaWxlKGQpICYmICFpc0Jsb2IoZCkgJiYgIWlzRm9ybURhdGEoZCkgPyB0b0pzb24oZCkgOiBkO1xuICAgIH1dLFxuXG4gICAgLy8gZGVmYXVsdCBoZWFkZXJzXG4gICAgaGVhZGVyczoge1xuICAgICAgY29tbW9uOiB7XG4gICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICAgICAgfSxcbiAgICAgIHBvc3Q6ICAgc2hhbGxvd0NvcHkoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pLFxuICAgICAgcHV0OiAgICBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiksXG4gICAgICBwYXRjaDogIHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKVxuICAgIH0sXG5cbiAgICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICAgIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICAgIHBhcmFtU2VyaWFsaXplcjogJyRodHRwUGFyYW1TZXJpYWxpemVyJ1xuICB9O1xuXG4gIHZhciB1c2VBcHBseUFzeW5jID0gZmFsc2U7XG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwUHJvdmlkZXIjdXNlQXBwbHlBc3luY1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQ29uZmlndXJlICRodHRwIHNlcnZpY2UgdG8gY29tYmluZSBwcm9jZXNzaW5nIG9mIG11bHRpcGxlIGh0dHAgcmVzcG9uc2VzIHJlY2VpdmVkIGF0IGFyb3VuZFxuICAgKiB0aGUgc2FtZSB0aW1lIHZpYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHlBc3luYyAkcm9vdFNjb3BlLiRhcHBseUFzeW5jfS4gVGhpcyBjYW4gcmVzdWx0IGluXG4gICAqIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIGltcHJvdmVtZW50IGZvciBiaWdnZXIgYXBwbGljYXRpb25zIHRoYXQgbWFrZSBtYW55IEhUVFAgcmVxdWVzdHNcbiAgICogY29uY3VycmVudGx5IChjb21tb24gZHVyaW5nIGFwcGxpY2F0aW9uIGJvb3RzdHJhcCkuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvIGZhbHNlLiBJZiBubyB2YWx1ZSBpcyBzcGVjaWZpZWQsIHJldHVybnMgdGhlIGN1cnJlbnQgY29uZmlndXJlZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgSWYgdHJ1ZSwgd2hlbiByZXF1ZXN0cyBhcmUgbG9hZGVkLCB0aGV5IHdpbGwgc2NoZWR1bGUgYSBkZWZlcnJlZFxuICAgKiAgICBcImFwcGx5XCIgb24gdGhlIG5leHQgdGljaywgZ2l2aW5nIHRpbWUgZm9yIHN1YnNlcXVlbnQgcmVxdWVzdHMgaW4gYSByb3VnaGx5IH4xMG1zIHdpbmRvd1xuICAgKiAgICB0byBsb2FkIGFuZCBzaGFyZSB0aGUgc2FtZSBkaWdlc3QgY3ljbGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufE9iamVjdH0gSWYgYSB2YWx1ZSBpcyBzcGVjaWZpZWQsIHJldHVybnMgdGhlICRodHRwUHJvdmlkZXIgZm9yIGNoYWluaW5nLlxuICAgKiAgICBvdGhlcndpc2UsIHJldHVybnMgdGhlIGN1cnJlbnQgY29uZmlndXJlZCB2YWx1ZS5cbiAgICoqL1xuICB0aGlzLnVzZUFwcGx5QXN5bmMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICB1c2VBcHBseUFzeW5jID0gISF2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdXNlQXBwbHlBc3luYztcbiAgfTtcblxuICB2YXIgdXNlTGVnYWN5UHJvbWlzZSA9IHRydWU7XG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwUHJvdmlkZXIjdXNlTGVnYWN5UHJvbWlzZUV4dGVuc2lvbnNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIENvbmZpZ3VyZSBgJGh0dHBgIHNlcnZpY2UgdG8gcmV0dXJuIHByb21pc2VzIHdpdGhvdXQgdGhlIHNob3J0aGFuZCBtZXRob2RzIGBzdWNjZXNzYCBhbmQgYGVycm9yYC5cbiAgICogVGhpcyBzaG91bGQgYmUgdXNlZCB0byBtYWtlIHN1cmUgdGhhdCBhcHBsaWNhdGlvbnMgd29yayB3aXRob3V0IHRoZXNlIG1ldGhvZHMuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvIHRydWUuIElmIG5vIHZhbHVlIGlzIHNwZWNpZmllZCwgcmV0dXJucyB0aGUgY3VycmVudCBjb25maWd1cmVkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB2YWx1ZSBJZiB0cnVlLCBgJGh0dHBgIHdpbGwgcmV0dXJuIGEgcHJvbWlzZSB3aXRoIHRoZSBkZXByZWNhdGVkIGxlZ2FjeSBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAgbWV0aG9kcy5cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW58T2JqZWN0fSBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCwgcmV0dXJucyB0aGUgJGh0dHBQcm92aWRlciBmb3IgY2hhaW5pbmcuXG4gICAqICAgIG90aGVyd2lzZSwgcmV0dXJucyB0aGUgY3VycmVudCBjb25maWd1cmVkIHZhbHVlLlxuICAgKiovXG4gIHRoaXMudXNlTGVnYWN5UHJvbWlzZUV4dGVuc2lvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICB1c2VMZWdhY3lQcm9taXNlID0gISF2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdXNlTGVnYWN5UHJvbWlzZTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIHByb3BlcnR5XG4gICAqIEBuYW1lICRodHRwUHJvdmlkZXIjaW50ZXJjZXB0b3JzXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBcnJheSBjb250YWluaW5nIHNlcnZpY2UgZmFjdG9yaWVzIGZvciBhbGwgc3luY2hyb25vdXMgb3IgYXN5bmNocm9ub3VzIHtAbGluayBuZy4kaHR0cCAkaHR0cH1cbiAgICogcHJlLXByb2Nlc3Npbmcgb2YgcmVxdWVzdCBvciBwb3N0cHJvY2Vzc2luZyBvZiByZXNwb25zZXMuXG4gICAqXG4gICAqIFRoZXNlIHNlcnZpY2UgZmFjdG9yaWVzIGFyZSBvcmRlcmVkIGJ5IHJlcXVlc3QsIGkuZS4gdGhleSBhcmUgYXBwbGllZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbiAgICogYXJyYXksIG9uIHJlcXVlc3QsIGJ1dCByZXZlcnNlIG9yZGVyLCBvbiByZXNwb25zZS5cbiAgICpcbiAgICoge0BsaW5rIG5nLiRodHRwI2ludGVyY2VwdG9ycyBJbnRlcmNlcHRvcnMgZGV0YWlsZWQgaW5mb31cbiAgICoqL1xuICB2YXIgaW50ZXJjZXB0b3JGYWN0b3JpZXMgPSB0aGlzLmludGVyY2VwdG9ycyA9IFtdO1xuXG4gIHRoaXMuJGdldCA9IFsnJGh0dHBCYWNrZW5kJywgJyQkY29va2llUmVhZGVyJywgJyRjYWNoZUZhY3RvcnknLCAnJHJvb3RTY29wZScsICckcScsICckaW5qZWN0b3InLFxuICAgICAgZnVuY3Rpb24oJGh0dHBCYWNrZW5kLCAkJGNvb2tpZVJlYWRlciwgJGNhY2hlRmFjdG9yeSwgJHJvb3RTY29wZSwgJHEsICRpbmplY3Rvcikge1xuXG4gICAgdmFyIGRlZmF1bHRDYWNoZSA9ICRjYWNoZUZhY3RvcnkoJyRodHRwJyk7XG5cbiAgICAvKipcbiAgICAgKiBNYWtlIHN1cmUgdGhhdCBkZWZhdWx0IHBhcmFtIHNlcmlhbGl6ZXIgaXMgZXhwb3NlZCBhcyBhIGZ1bmN0aW9uXG4gICAgICovXG4gICAgZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyID0gaXNTdHJpbmcoZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyKSA/XG4gICAgICAkaW5qZWN0b3IuZ2V0KGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcikgOiBkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXI7XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcmNlcHRvcnMgc3RvcmVkIGluIHJldmVyc2Ugb3JkZXIuIElubmVyIGludGVyY2VwdG9ycyBiZWZvcmUgb3V0ZXIgaW50ZXJjZXB0b3JzLlxuICAgICAqIFRoZSByZXZlcnNhbCBpcyBuZWVkZWQgc28gdGhhdCB3ZSBjYW4gYnVpbGQgdXAgdGhlIGludGVyY2VwdGlvbiBjaGFpbiBhcm91bmQgdGhlXG4gICAgICogc2VydmVyIHJlcXVlc3QuXG4gICAgICovXG4gICAgdmFyIHJldmVyc2VkSW50ZXJjZXB0b3JzID0gW107XG5cbiAgICBmb3JFYWNoKGludGVyY2VwdG9yRmFjdG9yaWVzLCBmdW5jdGlvbihpbnRlcmNlcHRvckZhY3RvcnkpIHtcbiAgICAgIHJldmVyc2VkSW50ZXJjZXB0b3JzLnVuc2hpZnQoaXNTdHJpbmcoaW50ZXJjZXB0b3JGYWN0b3J5KVxuICAgICAgICAgID8gJGluamVjdG9yLmdldChpbnRlcmNlcHRvckZhY3RvcnkpIDogJGluamVjdG9yLmludm9rZShpbnRlcmNlcHRvckZhY3RvcnkpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSAkaHR0cFxuICAgICAqIEByZXF1aXJlcyBuZy4kaHR0cEJhY2tlbmRcbiAgICAgKiBAcmVxdWlyZXMgJGNhY2hlRmFjdG9yeVxuICAgICAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gICAgICogQHJlcXVpcmVzICRxXG4gICAgICogQHJlcXVpcmVzICRpbmplY3RvclxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGhlIGAkaHR0cGAgc2VydmljZSBpcyBhIGNvcmUgQW5ndWxhciBzZXJ2aWNlIHRoYXQgZmFjaWxpdGF0ZXMgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSByZW1vdGVcbiAgICAgKiBIVFRQIHNlcnZlcnMgdmlhIHRoZSBicm93c2VyJ3MgW1hNTEh0dHBSZXF1ZXN0XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi94bWxodHRwcmVxdWVzdClcbiAgICAgKiBvYmplY3Qgb3IgdmlhIFtKU09OUF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OUCkuXG4gICAgICpcbiAgICAgKiBGb3IgdW5pdCB0ZXN0aW5nIGFwcGxpY2F0aW9ucyB0aGF0IHVzZSBgJGh0dHBgIHNlcnZpY2UsIHNlZVxuICAgICAqIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kICRodHRwQmFja2VuZCBtb2NrfS5cbiAgICAgKlxuICAgICAqIEZvciBhIGhpZ2hlciBsZXZlbCBvZiBhYnN0cmFjdGlvbiwgcGxlYXNlIGNoZWNrIG91dCB0aGUge0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlXG4gICAgICogJHJlc291cmNlfSBzZXJ2aWNlLlxuICAgICAqXG4gICAgICogVGhlICRodHRwIEFQSSBpcyBiYXNlZCBvbiB0aGUge0BsaW5rIG5nLiRxIGRlZmVycmVkL3Byb21pc2UgQVBJc30gZXhwb3NlZCBieVxuICAgICAqIHRoZSAkcSBzZXJ2aWNlLiBXaGlsZSBmb3Igc2ltcGxlIHVzYWdlIHBhdHRlcm5zIHRoaXMgZG9lc24ndCBtYXR0ZXIgbXVjaCwgZm9yIGFkdmFuY2VkIHVzYWdlXG4gICAgICogaXQgaXMgaW1wb3J0YW50IHRvIGZhbWlsaWFyaXplIHlvdXJzZWxmIHdpdGggdGhlc2UgQVBJcyBhbmQgdGhlIGd1YXJhbnRlZXMgdGhleSBwcm92aWRlLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBHZW5lcmFsIHVzYWdlXG4gICAgICogVGhlIGAkaHR0cGAgc2VydmljZSBpcyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIGEgc2luZ2xlIGFyZ3VtZW50IOKAlCBhIHtAbGluayAkaHR0cCN1c2FnZSBjb25maWd1cmF0aW9uIG9iamVjdH0g4oCUXG4gICAgICogdGhhdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGFuIEhUVFAgcmVxdWVzdCBhbmQgcmV0dXJucyAgYSB7QGxpbmsgbmcuJHEgcHJvbWlzZX0uXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgLy8gU2ltcGxlIEdFVCByZXF1ZXN0IGV4YW1wbGU6XG4gICAgICogICAkaHR0cCh7XG4gICAgICogICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICogICAgIHVybDogJy9zb21lVXJsJ1xuICAgICAqICAgfSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgKiAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlXG4gICAgICogICAgIH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2socmVzcG9uc2UpIHtcbiAgICAgKiAgICAgICAvLyBjYWxsZWQgYXN5bmNocm9ub3VzbHkgaWYgYW4gZXJyb3Igb2NjdXJzXG4gICAgICogICAgICAgLy8gb3Igc2VydmVyIHJldHVybnMgcmVzcG9uc2Ugd2l0aCBhbiBlcnJvciBzdGF0dXMuXG4gICAgICogICAgIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlIHJlc3BvbnNlIG9iamVjdCBoYXMgdGhlc2UgcHJvcGVydGllczpcbiAgICAgKlxuICAgICAqICAgLSAqKmRhdGEqKiDigJMgYHtzdHJpbmd8T2JqZWN0fWAg4oCTIFRoZSByZXNwb25zZSBib2R5IHRyYW5zZm9ybWVkIHdpdGggdGhlIHRyYW5zZm9ybVxuICAgICAqICAgICBmdW5jdGlvbnMuXG4gICAgICogICAtICoqc3RhdHVzKiog4oCTIGB7bnVtYmVyfWAg4oCTIEhUVFAgc3RhdHVzIGNvZGUgb2YgdGhlIHJlc3BvbnNlLlxuICAgICAqICAgLSAqKmhlYWRlcnMqKiDigJMgYHtmdW5jdGlvbihbaGVhZGVyTmFtZV0pfWAg4oCTIEhlYWRlciBnZXR0ZXIgZnVuY3Rpb24uXG4gICAgICogICAtICoqY29uZmlnKiog4oCTIGB7T2JqZWN0fWAg4oCTIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IHdhcyB1c2VkIHRvIGdlbmVyYXRlIHRoZSByZXF1ZXN0LlxuICAgICAqICAgLSAqKnN0YXR1c1RleHQqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBzdGF0dXMgdGV4dCBvZiB0aGUgcmVzcG9uc2UuXG4gICAgICpcbiAgICAgKiBBIHJlc3BvbnNlIHN0YXR1cyBjb2RlIGJldHdlZW4gMjAwIGFuZCAyOTkgaXMgY29uc2lkZXJlZCBhIHN1Y2Nlc3Mgc3RhdHVzIGFuZFxuICAgICAqIHdpbGwgcmVzdWx0IGluIHRoZSBzdWNjZXNzIGNhbGxiYWNrIGJlaW5nIGNhbGxlZC4gTm90ZSB0aGF0IGlmIHRoZSByZXNwb25zZSBpcyBhIHJlZGlyZWN0LFxuICAgICAqIFhNTEh0dHBSZXF1ZXN0IHdpbGwgdHJhbnNwYXJlbnRseSBmb2xsb3cgaXQsIG1lYW5pbmcgdGhhdCB0aGUgZXJyb3IgY2FsbGJhY2sgd2lsbCBub3QgYmVcbiAgICAgKiBjYWxsZWQgZm9yIHN1Y2ggcmVzcG9uc2VzLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBTaG9ydGN1dCBtZXRob2RzXG4gICAgICpcbiAgICAgKiBTaG9ydGN1dCBtZXRob2RzIGFyZSBhbHNvIGF2YWlsYWJsZS4gQWxsIHNob3J0Y3V0IG1ldGhvZHMgcmVxdWlyZSBwYXNzaW5nIGluIHRoZSBVUkwsIGFuZFxuICAgICAqIHJlcXVlc3QgZGF0YSBtdXN0IGJlIHBhc3NlZCBpbiBmb3IgUE9TVC9QVVQgcmVxdWVzdHMuIEFuIG9wdGlvbmFsIGNvbmZpZyBjYW4gYmUgcGFzc2VkIGFzIHRoZVxuICAgICAqIGxhc3QgYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgJGh0dHAuZ2V0KCcvc29tZVVybCcsIGNvbmZpZykudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgICAqICAgJGh0dHAucG9zdCgnL3NvbWVVcmwnLCBkYXRhLCBjb25maWcpLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIENvbXBsZXRlIGxpc3Qgb2Ygc2hvcnRjdXQgbWV0aG9kczpcbiAgICAgKlxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2dldCAkaHR0cC5nZXR9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjaGVhZCAkaHR0cC5oZWFkfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3Bvc3QgJGh0dHAucG9zdH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwdXQgJGh0dHAucHV0fVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2RlbGV0ZSAkaHR0cC5kZWxldGV9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjanNvbnAgJGh0dHAuanNvbnB9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcGF0Y2ggJGh0dHAucGF0Y2h9XG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIFdyaXRpbmcgVW5pdCBUZXN0cyB0aGF0IHVzZSAkaHR0cFxuICAgICAqIFdoZW4gdW5pdCB0ZXN0aW5nICh1c2luZyB7QGxpbmsgbmdNb2NrIG5nTW9ja30pLCBpdCBpcyBuZWNlc3NhcnkgdG8gY2FsbFxuICAgICAqIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kI2ZsdXNoICRodHRwQmFja2VuZC5mbHVzaCgpfSB0byBmbHVzaCBlYWNoIHBlbmRpbmdcbiAgICAgKiByZXF1ZXN0IHVzaW5nIHRyYWluZWQgcmVzcG9uc2VzLlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogJGh0dHBCYWNrZW5kLmV4cGVjdEdFVCguLi4pO1xuICAgICAqICRodHRwLmdldCguLi4pO1xuICAgICAqICRodHRwQmFja2VuZC5mbHVzaCgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMgRGVwcmVjYXRpb24gTm90aWNlXG4gICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICAgICAqICAgVGhlIGAkaHR0cGAgbGVnYWN5IHByb21pc2UgbWV0aG9kcyBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAgaGF2ZSBiZWVuIGRlcHJlY2F0ZWQuXG4gICAgICogICBVc2UgdGhlIHN0YW5kYXJkIGB0aGVuYCBtZXRob2QgaW5zdGVhZC5cbiAgICAgKiAgIElmIHtAbGluayAkaHR0cFByb3ZpZGVyI3VzZUxlZ2FjeVByb21pc2VFeHRlbnNpb25zIGAkaHR0cFByb3ZpZGVyLnVzZUxlZ2FjeVByb21pc2VFeHRlbnNpb25zYH0gaXMgc2V0IHRvXG4gICAgICogICBgZmFsc2VgIHRoZW4gdGhlc2UgbWV0aG9kcyB3aWxsIHRocm93IHtAbGluayAkaHR0cDpsZWdhY3kgYCRodHRwL2xlZ2FjeWB9IGVycm9yLlxuICAgICAqIDwvZGl2PlxuICAgICAqXG4gICAgICogIyMgU2V0dGluZyBIVFRQIEhlYWRlcnNcbiAgICAgKlxuICAgICAqIFRoZSAkaHR0cCBzZXJ2aWNlIHdpbGwgYXV0b21hdGljYWxseSBhZGQgY2VydGFpbiBIVFRQIGhlYWRlcnMgdG8gYWxsIHJlcXVlc3RzLiBUaGVzZSBkZWZhdWx0c1xuICAgICAqIGNhbiBiZSBmdWxseSBjb25maWd1cmVkIGJ5IGFjY2Vzc2luZyB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVyc2AgY29uZmlndXJhdGlvblxuICAgICAqIG9iamVjdCwgd2hpY2ggY3VycmVudGx5IGNvbnRhaW5zIHRoaXMgZGVmYXVsdCBjb25maWd1cmF0aW9uOlxuICAgICAqXG4gICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbmAgKGhlYWRlcnMgdGhhdCBhcmUgY29tbW9uIGZvciBhbGwgcmVxdWVzdHMpOlxuICAgICAqICAgLSBgQWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqIC8gKmBcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucG9zdGA6IChoZWFkZXIgZGVmYXVsdHMgZm9yIFBPU1QgcmVxdWVzdHMpXG4gICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gXG4gICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnB1dGAgKGhlYWRlciBkZWZhdWx0cyBmb3IgUFVUIHJlcXVlc3RzKVxuICAgICAqICAgLSBgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uYFxuICAgICAqXG4gICAgICogVG8gYWRkIG9yIG92ZXJ3cml0ZSB0aGVzZSBkZWZhdWx0cywgc2ltcGx5IGFkZCBvciByZW1vdmUgYSBwcm9wZXJ0eSBmcm9tIHRoZXNlIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBvYmplY3RzLiBUbyBhZGQgaGVhZGVycyBmb3IgYW4gSFRUUCBtZXRob2Qgb3RoZXIgdGhhbiBQT1NUIG9yIFBVVCwgc2ltcGx5IGFkZCBhIG5ldyBvYmplY3RcbiAgICAgKiB3aXRoIHRoZSBsb3dlcmNhc2VkIEhUVFAgbWV0aG9kIG5hbWUgYXMgdGhlIGtleSwgZS5nLlxuICAgICAqIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0ID0geyAnTXktSGVhZGVyJyA6ICd2YWx1ZScgfWAuXG4gICAgICpcbiAgICAgKiBUaGUgZGVmYXVsdHMgY2FuIGFsc28gYmUgc2V0IGF0IHJ1bnRpbWUgdmlhIHRoZSBgJGh0dHAuZGVmYXVsdHNgIG9iamVjdCBpbiB0aGUgc2FtZVxuICAgICAqIGZhc2hpb24uIEZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogbW9kdWxlLnJ1bihmdW5jdGlvbigkaHR0cCkge1xuICAgICAqICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyBZbVZsY0RwaWIyOXcnXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiwgeW91IGNhbiBzdXBwbHkgYSBgaGVhZGVyc2AgcHJvcGVydHkgaW4gdGhlIGNvbmZpZyBvYmplY3QgcGFzc2VkIHdoZW5cbiAgICAgKiBjYWxsaW5nIGAkaHR0cChjb25maWcpYCwgd2hpY2ggb3ZlcnJpZGVzIHRoZSBkZWZhdWx0cyB3aXRob3V0IGNoYW5naW5nIHRoZW0gZ2xvYmFsbHkuXG4gICAgICpcbiAgICAgKiBUbyBleHBsaWNpdGx5IHJlbW92ZSBhIGhlYWRlciBhdXRvbWF0aWNhbGx5IGFkZGVkIHZpYSAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMgb24gYSBwZXIgcmVxdWVzdCBiYXNpcyxcbiAgICAgKiBVc2UgdGhlIGBoZWFkZXJzYCBwcm9wZXJ0eSwgc2V0dGluZyB0aGUgZGVzaXJlZCBoZWFkZXIgdG8gYHVuZGVmaW5lZGAuIEZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiB2YXIgcmVxID0ge1xuICAgICAqICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgKiAgdXJsOiAnaHR0cDovL2V4YW1wbGUuY29tJyxcbiAgICAgKiAgaGVhZGVyczoge1xuICAgICAqICAgICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWRcbiAgICAgKiAgfSxcbiAgICAgKiAgZGF0YTogeyB0ZXN0OiAndGVzdCcgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqICRodHRwKHJlcSkudGhlbihmdW5jdGlvbigpey4uLn0sIGZ1bmN0aW9uKCl7Li4ufSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyBUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlc1xuICAgICAqXG4gICAgICogQm90aCByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzIGNhbiBiZSB0cmFuc2Zvcm1lZCB1c2luZyB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnM6IGB0cmFuc2Zvcm1SZXF1ZXN0YFxuICAgICAqIGFuZCBgdHJhbnNmb3JtUmVzcG9uc2VgLiBUaGVzZSBwcm9wZXJ0aWVzIGNhbiBiZSBhIHNpbmdsZSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdHJhbnNmb3JtZWQgdmFsdWUgKGBmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpYCkgb3IgYW4gYXJyYXkgb2Ygc3VjaCB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnMsXG4gICAgICogd2hpY2ggYWxsb3dzIHlvdSB0byBgcHVzaGAgb3IgYHVuc2hpZnRgIGEgbmV3IHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIGludG8gdGhlIHRyYW5zZm9ybWF0aW9uIGNoYWluLlxuICAgICAqXG4gICAgICogIyMjIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zXG4gICAgICpcbiAgICAgKiBUaGUgYCRodHRwUHJvdmlkZXJgIHByb3ZpZGVyIGFuZCBgJGh0dHBgIHNlcnZpY2UgZXhwb3NlIGBkZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0YCBhbmRcbiAgICAgKiBgZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgIHByb3BlcnRpZXMuIElmIGEgcmVxdWVzdCBkb2VzIG5vdCBwcm92aWRlIGl0cyBvd24gdHJhbnNmb3JtYXRpb25zXG4gICAgICogdGhlbiB0aGVzZSB3aWxsIGJlIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIGF1Z21lbnQgb3IgcmVwbGFjZSB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnMgYnkgbW9kaWZ5aW5nIHRoZXNlIHByb3BlcnRpZXMgYnkgYWRkaW5nIHRvIG9yXG4gICAgICogcmVwbGFjaW5nIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEFuZ3VsYXIgcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBkZWZhdWx0IHRyYW5zZm9ybWF0aW9uczpcbiAgICAgKlxuICAgICAqIFJlcXVlc3QgdHJhbnNmb3JtYXRpb25zIChgJGh0dHBQcm92aWRlci5kZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0YCBhbmQgYCRodHRwLmRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgKTpcbiAgICAgKlxuICAgICAqIC0gSWYgdGhlIGBkYXRhYCBwcm9wZXJ0eSBvZiB0aGUgcmVxdWVzdCBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWlucyBhbiBvYmplY3QsIHNlcmlhbGl6ZSBpdFxuICAgICAqICAgaW50byBKU09OIGZvcm1hdC5cbiAgICAgKlxuICAgICAqIFJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucyAoYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgIGFuZCBgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgKTpcbiAgICAgKlxuICAgICAqICAtIElmIFhTUkYgcHJlZml4IGlzIGRldGVjdGVkLCBzdHJpcCBpdCAoc2VlIFNlY3VyaXR5IENvbnNpZGVyYXRpb25zIHNlY3Rpb24gYmVsb3cpLlxuICAgICAqICAtIElmIEpTT04gcmVzcG9uc2UgaXMgZGV0ZWN0ZWQsIGRlc2VyaWFsaXplIGl0IHVzaW5nIGEgSlNPTiBwYXJzZXIuXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIyBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9ucyBQZXIgUmVxdWVzdFxuICAgICAqXG4gICAgICogSWYgeW91IHdpc2ggb3ZlcnJpZGUgdGhlIHJlcXVlc3QvcmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zIG9ubHkgZm9yIGEgc2luZ2xlIHJlcXVlc3QgdGhlbiBwcm92aWRlXG4gICAgICogYHRyYW5zZm9ybVJlcXVlc3RgIGFuZC9vciBgdHJhbnNmb3JtUmVzcG9uc2VgIHByb3BlcnRpZXMgb24gdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHBhc3NlZFxuICAgICAqIGludG8gYCRodHRwYC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBpZiB5b3UgcHJvdmlkZSB0aGVzZSBwcm9wZXJ0aWVzIG9uIHRoZSBjb25maWcgb2JqZWN0IHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyB3aWxsIGJlXG4gICAgICogb3ZlcndyaXR0ZW4uIElmIHlvdSB3aXNoIHRvIGF1Z21lbnQgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIHRoZW4geW91IG11c3QgaW5jbHVkZSB0aGVtIGluIHlvdXJcbiAgICAgKiBsb2NhbCB0cmFuc2Zvcm1hdGlvbiBhcnJheS5cbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgY29kZSBkZW1vbnN0cmF0ZXMgYWRkaW5nIGEgbmV3IHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9uIHRvIGJlIHJ1biBhZnRlciB0aGUgZGVmYXVsdCByZXNwb25zZVxuICAgICAqIHRyYW5zZm9ybWF0aW9ucyBoYXZlIGJlZW4gcnVuLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBmdW5jdGlvbiBhcHBlbmRUcmFuc2Zvcm0oZGVmYXVsdHMsIHRyYW5zZm9ybSkge1xuICAgICAqXG4gICAgICogICAvLyBXZSBjYW4ndCBndWFyYW50ZWUgdGhhdCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbiBpcyBhbiBhcnJheVxuICAgICAqICAgZGVmYXVsdHMgPSBhbmd1bGFyLmlzQXJyYXkoZGVmYXVsdHMpID8gZGVmYXVsdHMgOiBbZGVmYXVsdHNdO1xuICAgICAqXG4gICAgICogICAvLyBBcHBlbmQgdGhlIG5ldyB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgZGVmYXVsdHNcbiAgICAgKiAgIHJldHVybiBkZWZhdWx0cy5jb25jYXQodHJhbnNmb3JtKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiAkaHR0cCh7XG4gICAgICogICB1cmw6ICcuLi4nLFxuICAgICAqICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgKiAgIHRyYW5zZm9ybVJlc3BvbnNlOiBhcHBlbmRUcmFuc2Zvcm0oJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2UsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgIHJldHVybiBkb1RyYW5zZm9ybSh2YWx1ZSk7XG4gICAgICogICB9KVxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBDYWNoaW5nXG4gICAgICpcbiAgICAgKiBUbyBlbmFibGUgY2FjaGluZywgc2V0IHRoZSByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gYGNhY2hlYCBwcm9wZXJ0eSB0byBgdHJ1ZWAgKHRvIHVzZSBkZWZhdWx0XG4gICAgICogY2FjaGUpIG9yIHRvIGEgY3VzdG9tIGNhY2hlIG9iamVjdCAoYnVpbHQgd2l0aCB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSBgJGNhY2hlRmFjdG9yeWB9KS5cbiAgICAgKiBXaGVuIHRoZSBjYWNoZSBpcyBlbmFibGVkLCBgJGh0dHBgIHN0b3JlcyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIGluIHRoZSBzcGVjaWZpZWRcbiAgICAgKiBjYWNoZS4gVGhlIG5leHQgdGltZSB0aGUgc2FtZSByZXF1ZXN0IGlzIG1hZGUsIHRoZSByZXNwb25zZSBpcyBzZXJ2ZWQgZnJvbSB0aGUgY2FjaGUgd2l0aG91dFxuICAgICAqIHNlbmRpbmcgYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgZXZlbiBpZiB0aGUgcmVzcG9uc2UgaXMgc2VydmVkIGZyb20gY2FjaGUsIGRlbGl2ZXJ5IG9mIHRoZSBkYXRhIGlzIGFzeW5jaHJvbm91cyBpblxuICAgICAqIHRoZSBzYW1lIHdheSB0aGF0IHJlYWwgcmVxdWVzdHMgYXJlLlxuICAgICAqXG4gICAgICogSWYgdGhlcmUgYXJlIG11bHRpcGxlIEdFVCByZXF1ZXN0cyBmb3IgdGhlIHNhbWUgVVJMIHRoYXQgc2hvdWxkIGJlIGNhY2hlZCB1c2luZyB0aGUgc2FtZVxuICAgICAqIGNhY2hlLCBidXQgdGhlIGNhY2hlIGlzIG5vdCBwb3B1bGF0ZWQgeWV0LCBvbmx5IG9uZSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgd2lsbCBiZSBtYWRlIGFuZFxuICAgICAqIHRoZSByZW1haW5pbmcgcmVxdWVzdHMgd2lsbCBiZSBmdWxmaWxsZWQgdXNpbmcgdGhlIHJlc3BvbnNlIGZyb20gdGhlIGZpcnN0IHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIGNoYW5nZSB0aGUgZGVmYXVsdCBjYWNoZSB0byBhIG5ldyBvYmplY3QgKGJ1aWx0IHdpdGhcbiAgICAgKiB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSBgJGNhY2hlRmFjdG9yeWB9KSBieSB1cGRhdGluZyB0aGVcbiAgICAgKiB7QGxpbmsgbmcuJGh0dHAjZGVmYXVsdHMgYCRodHRwLmRlZmF1bHRzLmNhY2hlYH0gcHJvcGVydHkuIEFsbCByZXF1ZXN0cyB3aG8gc2V0XG4gICAgICogdGhlaXIgYGNhY2hlYCBwcm9wZXJ0eSB0byBgdHJ1ZWAgd2lsbCBub3cgdXNlIHRoaXMgY2FjaGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogSWYgeW91IHNldCB0aGUgZGVmYXVsdCBjYWNoZSB0byBgZmFsc2VgIHRoZW4gb25seSByZXF1ZXN0cyB0aGF0IHNwZWNpZnkgdGhlaXIgb3duIGN1c3RvbVxuICAgICAqIGNhY2hlIG9iamVjdCB3aWxsIGJlIGNhY2hlZC5cbiAgICAgKlxuICAgICAqICMjIEludGVyY2VwdG9yc1xuICAgICAqXG4gICAgICogQmVmb3JlIHlvdSBzdGFydCBjcmVhdGluZyBpbnRlcmNlcHRvcnMsIGJlIHN1cmUgdG8gdW5kZXJzdGFuZCB0aGVcbiAgICAgKiB7QGxpbmsgbmcuJHEgJHEgYW5kIGRlZmVycmVkL3Byb21pc2UgQVBJc30uXG4gICAgICpcbiAgICAgKiBGb3IgcHVycG9zZXMgb2YgZ2xvYmFsIGVycm9yIGhhbmRsaW5nLCBhdXRoZW50aWNhdGlvbiwgb3IgYW55IGtpbmQgb2Ygc3luY2hyb25vdXMgb3JcbiAgICAgKiBhc3luY2hyb25vdXMgcHJlLXByb2Nlc3Npbmcgb2YgcmVxdWVzdCBvciBwb3N0cHJvY2Vzc2luZyBvZiByZXNwb25zZXMsIGl0IGlzIGRlc2lyYWJsZSB0byBiZVxuICAgICAqIGFibGUgdG8gaW50ZXJjZXB0IHJlcXVlc3RzIGJlZm9yZSB0aGV5IGFyZSBoYW5kZWQgdG8gdGhlIHNlcnZlciBhbmRcbiAgICAgKiByZXNwb25zZXMgYmVmb3JlIHRoZXkgYXJlIGhhbmRlZCBvdmVyIHRvIHRoZSBhcHBsaWNhdGlvbiBjb2RlIHRoYXRcbiAgICAgKiBpbml0aWF0ZWQgdGhlc2UgcmVxdWVzdHMuIFRoZSBpbnRlcmNlcHRvcnMgbGV2ZXJhZ2UgdGhlIHtAbGluayBuZy4kcVxuICAgICAqIHByb21pc2UgQVBJc30gdG8gZnVsZmlsbCB0aGlzIG5lZWQgZm9yIGJvdGggc3luY2hyb25vdXMgYW5kIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZy5cbiAgICAgKlxuICAgICAqIFRoZSBpbnRlcmNlcHRvcnMgYXJlIHNlcnZpY2UgZmFjdG9yaWVzIHRoYXQgYXJlIHJlZ2lzdGVyZWQgd2l0aCB0aGUgYCRodHRwUHJvdmlkZXJgIGJ5XG4gICAgICogYWRkaW5nIHRoZW0gdG8gdGhlIGAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9yc2AgYXJyYXkuIFRoZSBmYWN0b3J5IGlzIGNhbGxlZCBhbmRcbiAgICAgKiBpbmplY3RlZCB3aXRoIGRlcGVuZGVuY2llcyAoaWYgc3BlY2lmaWVkKSBhbmQgcmV0dXJucyB0aGUgaW50ZXJjZXB0b3IuXG4gICAgICpcbiAgICAgKiBUaGVyZSBhcmUgdHdvIGtpbmRzIG9mIGludGVyY2VwdG9ycyAoYW5kIHR3byBraW5kcyBvZiByZWplY3Rpb24gaW50ZXJjZXB0b3JzKTpcbiAgICAgKlxuICAgICAqICAgKiBgcmVxdWVzdGA6IGludGVyY2VwdG9ycyBnZXQgY2FsbGVkIHdpdGggYSBodHRwIHtAbGluayAkaHR0cCN1c2FnZSBjb25maWd9IG9iamVjdC4gVGhlIGZ1bmN0aW9uIGlzIGZyZWUgdG9cbiAgICAgKiAgICAgbW9kaWZ5IHRoZSBgY29uZmlnYCBvYmplY3Qgb3IgY3JlYXRlIGEgbmV3IG9uZS4gVGhlIGZ1bmN0aW9uIG5lZWRzIHRvIHJldHVybiB0aGUgYGNvbmZpZ2BcbiAgICAgKiAgICAgb2JqZWN0IGRpcmVjdGx5LCBvciBhIHByb21pc2UgY29udGFpbmluZyB0aGUgYGNvbmZpZ2Agb3IgYSBuZXcgYGNvbmZpZ2Agb2JqZWN0LlxuICAgICAqICAgKiBgcmVxdWVzdEVycm9yYDogaW50ZXJjZXB0b3IgZ2V0cyBjYWxsZWQgd2hlbiBhIHByZXZpb3VzIGludGVyY2VwdG9yIHRocmV3IGFuIGVycm9yIG9yXG4gICAgICogICAgIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uXG4gICAgICogICAqIGByZXNwb25zZWA6IGludGVyY2VwdG9ycyBnZXQgY2FsbGVkIHdpdGggaHR0cCBgcmVzcG9uc2VgIG9iamVjdC4gVGhlIGZ1bmN0aW9uIGlzIGZyZWUgdG9cbiAgICAgKiAgICAgbW9kaWZ5IHRoZSBgcmVzcG9uc2VgIG9iamVjdCBvciBjcmVhdGUgYSBuZXcgb25lLiBUaGUgZnVuY3Rpb24gbmVlZHMgdG8gcmV0dXJuIHRoZSBgcmVzcG9uc2VgXG4gICAgICogICAgIG9iamVjdCBkaXJlY3RseSwgb3IgYXMgYSBwcm9taXNlIGNvbnRhaW5pbmcgdGhlIGByZXNwb25zZWAgb3IgYSBuZXcgYHJlc3BvbnNlYCBvYmplY3QuXG4gICAgICogICAqIGByZXNwb25zZUVycm9yYDogaW50ZXJjZXB0b3IgZ2V0cyBjYWxsZWQgd2hlbiBhIHByZXZpb3VzIGludGVyY2VwdG9yIHRocmV3IGFuIGVycm9yIG9yXG4gICAgICogICAgIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uXG4gICAgICpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICAvLyByZWdpc3RlciB0aGUgaW50ZXJjZXB0b3IgYXMgYSBzZXJ2aWNlXG4gICAgICogICAkcHJvdmlkZS5mYWN0b3J5KCdteUh0dHBJbnRlcmNlcHRvcicsIGZ1bmN0aW9uKCRxLCBkZXBlbmRlbmN5MSwgZGVwZW5kZW5jeTIpIHtcbiAgICAgKiAgICAgcmV0dXJuIHtcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcbiAgICAgKiAgICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3NcbiAgICAgKiAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgJ3JlcXVlc3RFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yXG4gICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZWplY3Rpb24pKSB7XG4gICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZVxuICAgICAqICAgICAgICAgfVxuICAgICAqICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAqICAgICAgIH0sXG4gICAgICpcbiAgICAgKlxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAgJ3Jlc3BvbnNlJzogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBzdWNjZXNzXG4gICAgICogICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgJ3Jlc3BvbnNlRXJyb3InOiBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBlcnJvclxuICAgICAqICAgICAgICAgaWYgKGNhblJlY292ZXIocmVqZWN0aW9uKSkge1xuICAgICAqICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VPck5ld1Byb21pc2VcbiAgICAgKiAgICAgICAgIH1cbiAgICAgKiAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH07XG4gICAgICogICB9KTtcbiAgICAgKlxuICAgICAqICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnbXlIdHRwSW50ZXJjZXB0b3InKTtcbiAgICAgKlxuICAgICAqXG4gICAgICogICAvLyBhbHRlcm5hdGl2ZWx5LCByZWdpc3RlciB0aGUgaW50ZXJjZXB0b3IgdmlhIGFuIGFub255bW91cyBmYWN0b3J5XG4gICAgICogICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKGZ1bmN0aW9uKCRxLCBkZXBlbmRlbmN5MSwgZGVwZW5kZW5jeTIpIHtcbiAgICAgKiAgICAgcmV0dXJuIHtcbiAgICAgKiAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZVxuICAgICAqICAgICAgIH0sXG4gICAgICpcbiAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAqICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmVcbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH07XG4gICAgICogICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIFNlY3VyaXR5IENvbnNpZGVyYXRpb25zXG4gICAgICpcbiAgICAgKiBXaGVuIGRlc2lnbmluZyB3ZWIgYXBwbGljYXRpb25zLCBjb25zaWRlciBzZWN1cml0eSB0aHJlYXRzIGZyb206XG4gICAgICpcbiAgICAgKiAtIFtKU09OIHZ1bG5lcmFiaWxpdHldKGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweClcbiAgICAgKiAtIFtYU1JGXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb3NzLXNpdGVfcmVxdWVzdF9mb3JnZXJ5KVxuICAgICAqXG4gICAgICogQm90aCBzZXJ2ZXIgYW5kIHRoZSBjbGllbnQgbXVzdCBjb29wZXJhdGUgaW4gb3JkZXIgdG8gZWxpbWluYXRlIHRoZXNlIHRocmVhdHMuIEFuZ3VsYXIgY29tZXNcbiAgICAgKiBwcmUtY29uZmlndXJlZCB3aXRoIHN0cmF0ZWdpZXMgdGhhdCBhZGRyZXNzIHRoZXNlIGlzc3VlcywgYnV0IGZvciB0aGlzIHRvIHdvcmsgYmFja2VuZCBzZXJ2ZXJcbiAgICAgKiBjb29wZXJhdGlvbiBpcyByZXF1aXJlZC5cbiAgICAgKlxuICAgICAqICMjIyBKU09OIFZ1bG5lcmFiaWxpdHkgUHJvdGVjdGlvblxuICAgICAqXG4gICAgICogQSBbSlNPTiB2dWxuZXJhYmlsaXR5XShodHRwOi8vaGFhY2tlZC5jb20vYXJjaGl2ZS8yMDA4LzExLzIwL2FuYXRvbXktb2YtYS1zdWJ0bGUtanNvbi12dWxuZXJhYmlsaXR5LmFzcHgpXG4gICAgICogYWxsb3dzIHRoaXJkIHBhcnR5IHdlYnNpdGUgdG8gdHVybiB5b3VyIEpTT04gcmVzb3VyY2UgVVJMIGludG9cbiAgICAgKiBbSlNPTlBdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlApIHJlcXVlc3QgdW5kZXIgc29tZSBjb25kaXRpb25zLiBUb1xuICAgICAqIGNvdW50ZXIgdGhpcyB5b3VyIHNlcnZlciBjYW4gcHJlZml4IGFsbCBKU09OIHJlcXVlc3RzIHdpdGggZm9sbG93aW5nIHN0cmluZyBgXCIpXX0nLFxcblwiYC5cbiAgICAgKiBBbmd1bGFyIHdpbGwgYXV0b21hdGljYWxseSBzdHJpcCB0aGUgcHJlZml4IGJlZm9yZSBwcm9jZXNzaW5nIGl0IGFzIEpTT04uXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZSBpZiB5b3VyIHNlcnZlciBuZWVkcyB0byByZXR1cm46XG4gICAgICogYGBganNcbiAgICAgKiBbJ29uZScsJ3R3byddXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiB3aGljaCBpcyB2dWxuZXJhYmxlIHRvIGF0dGFjaywgeW91ciBzZXJ2ZXIgY2FuIHJldHVybjpcbiAgICAgKiBgYGBqc1xuICAgICAqICldfScsXG4gICAgICogWydvbmUnLCd0d28nXVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQW5ndWxhciB3aWxsIHN0cmlwIHRoZSBwcmVmaXgsIGJlZm9yZSBwcm9jZXNzaW5nIHRoZSBKU09OLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyMgQ3Jvc3MgU2l0ZSBSZXF1ZXN0IEZvcmdlcnkgKFhTUkYpIFByb3RlY3Rpb25cbiAgICAgKlxuICAgICAqIFtYU1JGXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb3NzLXNpdGVfcmVxdWVzdF9mb3JnZXJ5KSBpcyBhIHRlY2huaXF1ZSBieSB3aGljaFxuICAgICAqIGFuIHVuYXV0aG9yaXplZCBzaXRlIGNhbiBnYWluIHlvdXIgdXNlcidzIHByaXZhdGUgZGF0YS4gQW5ndWxhciBwcm92aWRlcyBhIG1lY2hhbmlzbVxuICAgICAqIHRvIGNvdW50ZXIgWFNSRi4gV2hlbiBwZXJmb3JtaW5nIFhIUiByZXF1ZXN0cywgdGhlICRodHRwIHNlcnZpY2UgcmVhZHMgYSB0b2tlbiBmcm9tIGEgY29va2llXG4gICAgICogKGJ5IGRlZmF1bHQsIGBYU1JGLVRPS0VOYCkgYW5kIHNldHMgaXQgYXMgYW4gSFRUUCBoZWFkZXIgKGBYLVhTUkYtVE9LRU5gKS4gU2luY2Ugb25seVxuICAgICAqIEphdmFTY3JpcHQgdGhhdCBydW5zIG9uIHlvdXIgZG9tYWluIGNvdWxkIHJlYWQgdGhlIGNvb2tpZSwgeW91ciBzZXJ2ZXIgY2FuIGJlIGFzc3VyZWQgdGhhdFxuICAgICAqIHRoZSBYSFIgY2FtZSBmcm9tIEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbi4gVGhlIGhlYWRlciB3aWxsIG5vdCBiZSBzZXQgZm9yXG4gICAgICogY3Jvc3MtZG9tYWluIHJlcXVlc3RzLlxuICAgICAqXG4gICAgICogVG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhpcywgeW91ciBzZXJ2ZXIgbmVlZHMgdG8gc2V0IGEgdG9rZW4gaW4gYSBKYXZhU2NyaXB0IHJlYWRhYmxlIHNlc3Npb25cbiAgICAgKiBjb29raWUgY2FsbGVkIGBYU1JGLVRPS0VOYCBvbiB0aGUgZmlyc3QgSFRUUCBHRVQgcmVxdWVzdC4gT24gc3Vic2VxdWVudCBYSFIgcmVxdWVzdHMgdGhlXG4gICAgICogc2VydmVyIGNhbiB2ZXJpZnkgdGhhdCB0aGUgY29va2llIG1hdGNoZXMgYFgtWFNSRi1UT0tFTmAgSFRUUCBoZWFkZXIsIGFuZCB0aGVyZWZvcmUgYmUgc3VyZVxuICAgICAqIHRoYXQgb25seSBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4gY291bGQgaGF2ZSBzZW50IHRoZSByZXF1ZXN0LiBUaGUgdG9rZW4gbXVzdCBiZVxuICAgICAqIHVuaXF1ZSBmb3IgZWFjaCB1c2VyIGFuZCBtdXN0IGJlIHZlcmlmaWFibGUgYnkgdGhlIHNlcnZlciAodG8gcHJldmVudCB0aGUgSmF2YVNjcmlwdCBmcm9tXG4gICAgICogbWFraW5nIHVwIGl0cyBvd24gdG9rZW5zKS4gV2UgcmVjb21tZW5kIHRoYXQgdGhlIHRva2VuIGlzIGEgZGlnZXN0IG9mIHlvdXIgc2l0ZSdzXG4gICAgICogYXV0aGVudGljYXRpb24gY29va2llIHdpdGggYSBbc2FsdF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2FsdF8oY3J5cHRvZ3JhcGh5JiM0MTspXG4gICAgICogZm9yIGFkZGVkIHNlY3VyaXR5LlxuICAgICAqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGhlYWRlcnMgY2FuIGJlIHNwZWNpZmllZCB1c2luZyB0aGUgeHNyZkhlYWRlck5hbWUgYW5kIHhzcmZDb29raWVOYW1lXG4gICAgICogcHJvcGVydGllcyBvZiBlaXRoZXIgJGh0dHBQcm92aWRlci5kZWZhdWx0cyBhdCBjb25maWctdGltZSwgJGh0dHAuZGVmYXVsdHMgYXQgcnVuLXRpbWUsXG4gICAgICogb3IgdGhlIHBlci1yZXF1ZXN0IGNvbmZpZyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBJbiBvcmRlciB0byBwcmV2ZW50IGNvbGxpc2lvbnMgaW4gZW52aXJvbm1lbnRzIHdoZXJlIG11bHRpcGxlIEFuZ3VsYXIgYXBwcyBzaGFyZSB0aGVcbiAgICAgKiBzYW1lIGRvbWFpbiBvciBzdWJkb21haW4sIHdlIHJlY29tbWVuZCB0aGF0IGVhY2ggYXBwbGljYXRpb24gdXNlcyB1bmlxdWUgY29va2llIG5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIE9iamVjdCBkZXNjcmliaW5nIHRoZSByZXF1ZXN0IHRvIGJlIG1hZGUgYW5kIGhvdyBpdCBzaG91bGQgYmVcbiAgICAgKiAgICBwcm9jZXNzZWQuIFRoZSBvYmplY3QgaGFzIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAqXG4gICAgICogICAgLSAqKm1ldGhvZCoqIOKAkyBge3N0cmluZ31gIOKAkyBIVFRQIG1ldGhvZCAoZS5nLiAnR0VUJywgJ1BPU1QnLCBldGMpXG4gICAgICogICAgLSAqKnVybCoqIOKAkyBge3N0cmluZ31gIOKAkyBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkLlxuICAgICAqICAgIC0gKipwYXJhbXMqKiDigJMgYHtPYmplY3QuPHN0cmluZ3xPYmplY3Q+fWAg4oCTIE1hcCBvZiBzdHJpbmdzIG9yIG9iamVjdHMgd2hpY2ggd2lsbCBiZSBzZXJpYWxpemVkXG4gICAgICogICAgICB3aXRoIHRoZSBgcGFyYW1TZXJpYWxpemVyYCBhbmQgYXBwZW5kZWQgYXMgR0VUIHBhcmFtZXRlcnMuXG4gICAgICogICAgLSAqKmRhdGEqKiDigJMgYHtzdHJpbmd8T2JqZWN0fWAg4oCTIERhdGEgdG8gYmUgc2VudCBhcyB0aGUgcmVxdWVzdCBtZXNzYWdlIGRhdGEuXG4gICAgICogICAgLSAqKmhlYWRlcnMqKiDigJMgYHtPYmplY3R9YCDigJMgTWFwIG9mIHN0cmluZ3Mgb3IgZnVuY3Rpb25zIHdoaWNoIHJldHVybiBzdHJpbmdzIHJlcHJlc2VudGluZ1xuICAgICAqICAgICAgSFRUUCBoZWFkZXJzIHRvIHNlbmQgdG8gdGhlIHNlcnZlci4gSWYgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIGlzIG51bGwsIHRoZVxuICAgICAqICAgICAgaGVhZGVyIHdpbGwgbm90IGJlIHNlbnQuIEZ1bmN0aW9ucyBhY2NlcHQgYSBjb25maWcgb2JqZWN0IGFzIGFuIGFyZ3VtZW50LlxuICAgICAqICAgIC0gKip4c3JmSGVhZGVyTmFtZSoqIOKAkyBge3N0cmluZ31gIOKAkyBOYW1lIG9mIEhUVFAgaGVhZGVyIHRvIHBvcHVsYXRlIHdpdGggdGhlIFhTUkYgdG9rZW4uXG4gICAgICogICAgLSAqKnhzcmZDb29raWVOYW1lKiog4oCTIGB7c3RyaW5nfWAg4oCTIE5hbWUgb2YgY29va2llIGNvbnRhaW5pbmcgdGhlIFhTUkYgdG9rZW4uXG4gICAgICogICAgLSAqKnRyYW5zZm9ybVJlcXVlc3QqKiDigJNcbiAgICAgKiAgICAgIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcil8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpPn1gIOKAk1xuICAgICAqICAgICAgdHJhbnNmb3JtIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN1Y2ggZnVuY3Rpb25zLiBUaGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHRha2VzIHRoZSBodHRwXG4gICAgICogICAgICByZXF1ZXN0IGJvZHkgYW5kIGhlYWRlcnMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgc2VyaWFsaXplZCkgdmVyc2lvbi5cbiAgICAgKiAgICAgIFNlZSB7QGxpbmsgbmcuJGh0dHAjb3ZlcnJpZGluZy10aGUtZGVmYXVsdC10cmFuc2Zvcm1hdGlvbnMtcGVyLXJlcXVlc3RcbiAgICAgKiAgICAgIE92ZXJyaWRpbmcgdGhlIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zfVxuICAgICAqICAgIC0gKip0cmFuc2Zvcm1SZXNwb25zZSoqIOKAk1xuICAgICAqICAgICAgYHtmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpPn1gIOKAk1xuICAgICAqICAgICAgdHJhbnNmb3JtIGZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIHN1Y2ggZnVuY3Rpb25zLiBUaGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHRha2VzIHRoZSBodHRwXG4gICAgICogICAgICByZXNwb25zZSBib2R5LCBoZWFkZXJzIGFuZCBzdGF0dXMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgZGVzZXJpYWxpemVkKSB2ZXJzaW9uLlxuICAgICAqICAgICAgU2VlIHtAbGluayBuZy4kaHR0cCNvdmVycmlkaW5nLXRoZS1kZWZhdWx0LXRyYW5zZm9ybWF0aW9ucy1wZXItcmVxdWVzdFxuICAgICAqICAgICAgT3ZlcnJpZGluZyB0aGUgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbmpxTGlrc31cbiAgICAgKiAgICAtICoqcGFyYW1TZXJpYWxpemVyKiogLSBge3N0cmluZ3xmdW5jdGlvbihPYmplY3Q8c3RyaW5nLHN0cmluZz4pOnN0cmluZ31gIC0gQSBmdW5jdGlvbiB1c2VkIHRvXG4gICAgICogICAgICBwcmVwYXJlIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgcmVxdWVzdCBwYXJhbWV0ZXJzIChzcGVjaWZpZWQgYXMgYW4gb2JqZWN0KS5cbiAgICAgKiAgICAgIElmIHNwZWNpZmllZCBhcyBzdHJpbmcsIGl0IGlzIGludGVycHJldGVkIGFzIGZ1bmN0aW9uIHJlZ2lzdGVyZWQgd2l0aCB0aGVcbiAgICAgKiAgICAgIHtAbGluayAkaW5qZWN0b3IgJGluamVjdG9yfSwgd2hpY2ggbWVhbnMgeW91IGNhbiBjcmVhdGUgeW91ciBvd24gc2VyaWFsaXplclxuICAgICAqICAgICAgYnkgcmVnaXN0ZXJpbmcgaXQgYXMgYSB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlIHNlcnZpY2V9LlxuICAgICAqICAgICAgVGhlIGRlZmF1bHQgc2VyaWFsaXplciBpcyB0aGUge0BsaW5rICRodHRwUGFyYW1TZXJpYWxpemVyICRodHRwUGFyYW1TZXJpYWxpemVyfTtcbiAgICAgKiAgICAgIGFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSB7QGxpbmsgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2V9XG4gICAgICogICAgLSAqKmNhY2hlKiog4oCTIGB7Ym9vbGVhbnxDYWNoZX1gIOKAkyBJZiB0cnVlLCBhIGRlZmF1bHQgJGh0dHAgY2FjaGUgd2lsbCBiZSB1c2VkIHRvIGNhY2hlIHRoZVxuICAgICAqICAgICAgR0VUIHJlcXVlc3QsIG90aGVyd2lzZSBpZiBhIGNhY2hlIGluc3RhbmNlIGJ1aWx0IHdpdGhcbiAgICAgKiAgICAgIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9LCB0aGlzIGNhY2hlIHdpbGwgYmUgdXNlZCBmb3JcbiAgICAgKiAgICAgIGNhY2hpbmcuXG4gICAgICogICAgLSAqKnRpbWVvdXQqKiDigJMgYHtudW1iZXJ8UHJvbWlzZX1gIOKAkyB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcywgb3Ige0BsaW5rIG5nLiRxIHByb21pc2V9XG4gICAgICogICAgICB0aGF0IHNob3VsZCBhYm9ydCB0aGUgcmVxdWVzdCB3aGVuIHJlc29sdmVkLlxuICAgICAqICAgIC0gKip3aXRoQ3JlZGVudGlhbHMqKiAtIGB7Ym9vbGVhbn1gIC0gd2hldGhlciB0byBzZXQgdGhlIGB3aXRoQ3JlZGVudGlhbHNgIGZsYWcgb24gdGhlXG4gICAgICogICAgICBYSFIgb2JqZWN0LiBTZWUgW3JlcXVlc3RzIHdpdGggY3JlZGVudGlhbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0hUVFAvQWNjZXNzX2NvbnRyb2xfQ09SUyNSZXF1ZXN0c193aXRoX2NyZWRlbnRpYWxzKVxuICAgICAqICAgICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICogICAgLSAqKnJlc3BvbnNlVHlwZSoqIC0gYHtzdHJpbmd9YCAtIHNlZVxuICAgICAqICAgICAgW1hNTEh0dHBSZXF1ZXN0LnJlc3BvbnNlVHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0I3htbGh0dHByZXF1ZXN0LXJlc3BvbnNldHlwZSkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IFJldHVybnMgYSB7QGxpbmsgbmcuJHEgYFByb21pc2V9YCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgdG8gYSByZXNwb25zZSBvYmplY3RcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHJlcXVlc3Qgc3VjY2VlZHMgb3IgZmFpbHMuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPE9iamVjdD59IHBlbmRpbmdSZXF1ZXN0cyBBcnJheSBvZiBjb25maWcgb2JqZWN0cyBmb3IgY3VycmVudGx5IHBlbmRpbmdcbiAgICAgKiAgIHJlcXVlc3RzLiBUaGlzIGlzIHByaW1hcmlseSBtZWFudCB0byBiZSB1c2VkIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG48ZXhhbXBsZSBtb2R1bGU9XCJodHRwRXhhbXBsZVwiPlxuPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgPGRpdiBuZy1jb250cm9sbGVyPVwiRmV0Y2hDb250cm9sbGVyXCI+XG4gICAgPHNlbGVjdCBuZy1tb2RlbD1cIm1ldGhvZFwiIGFyaWEtbGFiZWw9XCJSZXF1ZXN0IG1ldGhvZFwiPlxuICAgICAgPG9wdGlvbj5HRVQ8L29wdGlvbj5cbiAgICAgIDxvcHRpb24+SlNPTlA8L29wdGlvbj5cbiAgICA8L3NlbGVjdD5cbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVybFwiIHNpemU9XCI4MFwiIGFyaWEtbGFiZWw9XCJVUkxcIiAvPlxuICAgIDxidXR0b24gaWQ9XCJmZXRjaGJ0blwiIG5nLWNsaWNrPVwiZmV0Y2goKVwiPmZldGNoPC9idXR0b24+PGJyPlxuICAgIDxidXR0b24gaWQ9XCJzYW1wbGVnZXRidG5cIiBuZy1jbGljaz1cInVwZGF0ZU1vZGVsKCdHRVQnLCAnaHR0cC1oZWxsby5odG1sJylcIj5TYW1wbGUgR0VUPC9idXR0b24+XG4gICAgPGJ1dHRvbiBpZD1cInNhbXBsZWpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJyxcbiAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9ncmVldC5waHA/Y2FsbGJhY2s9SlNPTl9DQUxMQkFDSyZuYW1lPVN1cGVyJTIwSGVybycpXCI+XG4gICAgICBTYW1wbGUgSlNPTlBcbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGlkPVwiaW52YWxpZGpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJywgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9kb2VzbnRleGlzdCZjYWxsYmFjaz1KU09OX0NBTExCQUNLJylcIj5cbiAgICAgICAgSW52YWxpZCBKU09OUFxuICAgICAgPC9idXR0b24+XG4gICAgPHByZT5odHRwIHN0YXR1cyBjb2RlOiB7e3N0YXR1c319PC9wcmU+XG4gICAgPHByZT5odHRwIHJlc3BvbnNlIGRhdGE6IHt7ZGF0YX19PC9wcmU+XG4gIDwvZGl2PlxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICBhbmd1bGFyLm1vZHVsZSgnaHR0cEV4YW1wbGUnLCBbXSlcbiAgICAuY29udHJvbGxlcignRmV0Y2hDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLFxuICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHRlbXBsYXRlQ2FjaGUpIHtcbiAgICAgICAgJHNjb3BlLm1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAkc2NvcGUudXJsID0gJ2h0dHAtaGVsbG8uaHRtbCc7XG5cbiAgICAgICAgJHNjb3BlLmZldGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLmNvZGUgPSBudWxsO1xuICAgICAgICAgICRzY29wZS5yZXNwb25zZSA9IG51bGw7XG5cbiAgICAgICAgICAkaHR0cCh7bWV0aG9kOiAkc2NvcGUubWV0aG9kLCB1cmw6ICRzY29wZS51cmwsIGNhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLlxuICAgICAgICAgICAgdGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IHJlc3BvbnNlLmRhdGEgfHwgXCJSZXF1ZXN0IGZhaWxlZFwiO1xuICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS51cGRhdGVNb2RlbCA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsKSB7XG4gICAgICAgICAgJHNjb3BlLm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgICAgICAkc2NvcGUudXJsID0gdXJsO1xuICAgICAgICB9O1xuICAgICAgfV0pO1xuPC9maWxlPlxuPGZpbGUgbmFtZT1cImh0dHAtaGVsbG8uaHRtbFwiPlxuICBIZWxsbywgJGh0dHAhXG48L2ZpbGU+XG48ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gIHZhciBzdGF0dXMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3N0YXR1cycpKTtcbiAgdmFyIGRhdGEgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2RhdGEnKSk7XG4gIHZhciBmZXRjaEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2ZldGNoYnRuJykpO1xuICB2YXIgc2FtcGxlR2V0QnRuID0gZWxlbWVudChieS5pZCgnc2FtcGxlZ2V0YnRuJykpO1xuICB2YXIgc2FtcGxlSnNvbnBCdG4gPSBlbGVtZW50KGJ5LmlkKCdzYW1wbGVqc29ucGJ0bicpKTtcbiAgdmFyIGludmFsaWRKc29ucEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2ludmFsaWRqc29ucGJ0bicpKTtcblxuICBpdCgnc2hvdWxkIG1ha2UgYW4geGhyIEdFVCByZXF1ZXN0JywgZnVuY3Rpb24oKSB7XG4gICAgc2FtcGxlR2V0QnRuLmNsaWNrKCk7XG4gICAgZmV0Y2hCdG4uY2xpY2soKTtcbiAgICBleHBlY3Qoc3RhdHVzLmdldFRleHQoKSkudG9NYXRjaCgnMjAwJyk7XG4gICAgZXhwZWN0KGRhdGEuZ2V0VGV4dCgpKS50b01hdGNoKC9IZWxsbywgXFwkaHR0cCEvKTtcbiAgfSk7XG5cbi8vIENvbW1lbnRlZCBvdXQgZHVlIHRvIGZsYWtlcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzkxODVcbi8vIGl0KCdzaG91bGQgbWFrZSBhIEpTT05QIHJlcXVlc3QgdG8gYW5ndWxhcmpzLm9yZycsIGZ1bmN0aW9uKCkge1xuLy8gICBzYW1wbGVKc29ucEJ0bi5jbGljaygpO1xuLy8gICBmZXRjaEJ0bi5jbGljaygpO1xuLy8gICBleHBlY3Qoc3RhdHVzLmdldFRleHQoKSkudG9NYXRjaCgnMjAwJyk7XG4vLyAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgvU3VwZXIgSGVybyEvKTtcbi8vIH0pO1xuXG4gIGl0KCdzaG91bGQgbWFrZSBKU09OUCByZXF1ZXN0IHRvIGludmFsaWQgVVJMIGFuZCBpbnZva2UgdGhlIGVycm9yIGhhbmRsZXInLFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgaW52YWxpZEpzb25wQnRuLmNsaWNrKCk7XG4gICAgZmV0Y2hCdG4uY2xpY2soKTtcbiAgICBleHBlY3Qoc3RhdHVzLmdldFRleHQoKSkudG9NYXRjaCgnMCcpO1xuICAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgnUmVxdWVzdCBmYWlsZWQnKTtcbiAgfSk7XG48L2ZpbGU+XG48L2V4YW1wbGU+XG4gICAgICovXG4gICAgZnVuY3Rpb24gJGh0dHAocmVxdWVzdENvbmZpZykge1xuXG4gICAgICBpZiAoIWFuZ3VsYXIuaXNPYmplY3QocmVxdWVzdENvbmZpZykpIHtcbiAgICAgICAgdGhyb3cgbWluRXJyKCckaHR0cCcpKCdiYWRyZXEnLCAnSHR0cCByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gbXVzdCBiZSBhbiBvYmplY3QuICBSZWNlaXZlZDogezB9JywgcmVxdWVzdENvbmZpZyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNTdHJpbmcocmVxdWVzdENvbmZpZy51cmwpKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGh0dHAnKSgnYmFkcmVxJywgJ0h0dHAgcmVxdWVzdCBjb25maWd1cmF0aW9uIHVybCBtdXN0IGJlIGEgc3RyaW5nLiAgUmVjZWl2ZWQ6IHswfScsIHJlcXVlc3RDb25maWcudXJsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbmZpZyA9IGV4dGVuZCh7XG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3QsXG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgcGFyYW1TZXJpYWxpemVyOiBkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXJcbiAgICAgIH0sIHJlcXVlc3RDb25maWcpO1xuXG4gICAgICBjb25maWcuaGVhZGVycyA9IG1lcmdlSGVhZGVycyhyZXF1ZXN0Q29uZmlnKTtcbiAgICAgIGNvbmZpZy5tZXRob2QgPSB1cHBlcmNhc2UoY29uZmlnLm1ldGhvZCk7XG4gICAgICBjb25maWcucGFyYW1TZXJpYWxpemVyID0gaXNTdHJpbmcoY29uZmlnLnBhcmFtU2VyaWFsaXplcikgP1xuICAgICAgICAkaW5qZWN0b3IuZ2V0KGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIpIDogY29uZmlnLnBhcmFtU2VyaWFsaXplcjtcblxuICAgICAgdmFyIHNlcnZlclJlcXVlc3QgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgICAgdmFyIGhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICAgICAgdmFyIHJlcURhdGEgPSB0cmFuc2Zvcm1EYXRhKGNvbmZpZy5kYXRhLCBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLCB1bmRlZmluZWQsIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0KTtcblxuICAgICAgICAvLyBzdHJpcCBjb250ZW50LXR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHJlcURhdGEpKSB7XG4gICAgICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwgaGVhZGVyKSB7XG4gICAgICAgICAgICBpZiAobG93ZXJjYXNlKGhlYWRlcikgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGhlYWRlcnNbaGVhZGVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSAmJiAhaXNVbmRlZmluZWQoZGVmYXVsdHMud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgICAgIGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgPSBkZWZhdWx0cy53aXRoQ3JlZGVudGlhbHM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZW5kIHJlcXVlc3RcbiAgICAgICAgcmV0dXJuIHNlbmRSZXEoY29uZmlnLCByZXFEYXRhKS50aGVuKHRyYW5zZm9ybVJlc3BvbnNlLCB0cmFuc2Zvcm1SZXNwb25zZSk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgY2hhaW4gPSBbc2VydmVyUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgICAgIHZhciBwcm9taXNlID0gJHEud2hlbihjb25maWcpO1xuXG4gICAgICAvLyBhcHBseSBpbnRlcmNlcHRvcnNcbiAgICAgIGZvckVhY2gocmV2ZXJzZWRJbnRlcmNlcHRvcnMsIGZ1bmN0aW9uKGludGVyY2VwdG9yKSB7XG4gICAgICAgIGlmIChpbnRlcmNlcHRvci5yZXF1ZXN0IHx8IGludGVyY2VwdG9yLnJlcXVlc3RFcnJvcikge1xuICAgICAgICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IucmVxdWVzdCwgaW50ZXJjZXB0b3IucmVxdWVzdEVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJjZXB0b3IucmVzcG9uc2UgfHwgaW50ZXJjZXB0b3IucmVzcG9uc2VFcnJvcikge1xuICAgICAgICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IucmVzcG9uc2UsIGludGVyY2VwdG9yLnJlc3BvbnNlRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgICAgICB2YXIgdGhlbkZuID0gY2hhaW4uc2hpZnQoKTtcbiAgICAgICAgdmFyIHJlamVjdEZuID0gY2hhaW4uc2hpZnQoKTtcblxuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHRoZW5GbiwgcmVqZWN0Rm4pO1xuICAgICAgfVxuXG4gICAgICBpZiAodXNlTGVnYWN5UHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlLnN1Y2Nlc3MgPSBmdW5jdGlvbihmbikge1xuICAgICAgICAgIGFzc2VydEFyZ0ZuKGZuLCAnZm4nKTtcblxuICAgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgZm4ocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHByb21pc2UuZXJyb3IgPSBmdW5jdGlvbihmbikge1xuICAgICAgICAgIGFzc2VydEFyZ0ZuKGZuLCAnZm4nKTtcblxuICAgICAgICAgIHByb21pc2UudGhlbihudWxsLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgZm4ocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZS5zdWNjZXNzID0gJGh0dHBNaW5FcnJMZWdhY3lGbignc3VjY2VzcycpO1xuICAgICAgICBwcm9taXNlLmVycm9yID0gJGh0dHBNaW5FcnJMZWdhY3lGbignZXJyb3InKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG5cbiAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIC8vIG1ha2UgYSBjb3B5IHNpbmNlIHRoZSByZXNwb25zZSBtdXN0IGJlIGNhY2hlYWJsZVxuICAgICAgICB2YXIgcmVzcCA9IGV4dGVuZCh7fSwgcmVzcG9uc2UpO1xuICAgICAgICByZXNwLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLmhlYWRlcnMsIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gKGlzU3VjY2VzcyhyZXNwb25zZS5zdGF0dXMpKVxuICAgICAgICAgID8gcmVzcFxuICAgICAgICAgIDogJHEucmVqZWN0KHJlc3ApO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBleGVjdXRlSGVhZGVyRm5zKGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICB2YXIgaGVhZGVyQ29udGVudCwgcHJvY2Vzc2VkSGVhZGVycyA9IHt9O1xuXG4gICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24oaGVhZGVyRm4sIGhlYWRlcikge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhlYWRlckZuKSkge1xuICAgICAgICAgICAgaGVhZGVyQ29udGVudCA9IGhlYWRlckZuKGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoaGVhZGVyQ29udGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckZuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHByb2Nlc3NlZEhlYWRlcnM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1lcmdlSGVhZGVycyhjb25maWcpIHtcbiAgICAgICAgdmFyIGRlZkhlYWRlcnMgPSBkZWZhdWx0cy5oZWFkZXJzLFxuICAgICAgICAgICAgcmVxSGVhZGVycyA9IGV4dGVuZCh7fSwgY29uZmlnLmhlYWRlcnMpLFxuICAgICAgICAgICAgZGVmSGVhZGVyTmFtZSwgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSwgcmVxSGVhZGVyTmFtZTtcblxuICAgICAgICBkZWZIZWFkZXJzID0gZXh0ZW5kKHt9LCBkZWZIZWFkZXJzLmNvbW1vbiwgZGVmSGVhZGVyc1tsb3dlcmNhc2UoY29uZmlnLm1ldGhvZCldKTtcblxuICAgICAgICAvLyB1c2luZyBmb3ItaW4gaW5zdGVhZCBvZiBmb3JFYWNoIHRvIGF2b2lkIHVuZWNlc3NhcnkgaXRlcmF0aW9uIGFmdGVyIGhlYWRlciBoYXMgYmVlbiBmb3VuZFxuICAgICAgICBkZWZhdWx0SGVhZGVyc0l0ZXJhdGlvbjpcbiAgICAgICAgZm9yIChkZWZIZWFkZXJOYW1lIGluIGRlZkhlYWRlcnMpIHtcbiAgICAgICAgICBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lID0gbG93ZXJjYXNlKGRlZkhlYWRlck5hbWUpO1xuXG4gICAgICAgICAgZm9yIChyZXFIZWFkZXJOYW1lIGluIHJlcUhlYWRlcnMpIHtcbiAgICAgICAgICAgIGlmIChsb3dlcmNhc2UocmVxSGVhZGVyTmFtZSkgPT09IGxvd2VyY2FzZURlZkhlYWRlck5hbWUpIHtcbiAgICAgICAgICAgICAgY29udGludWUgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVxSGVhZGVyc1tkZWZIZWFkZXJOYW1lXSA9IGRlZkhlYWRlcnNbZGVmSGVhZGVyTmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBleGVjdXRlIGlmIGhlYWRlciB2YWx1ZSBpcyBhIGZ1bmN0aW9uIGZvciBtZXJnZWQgaGVhZGVyc1xuICAgICAgICByZXR1cm4gZXhlY3V0ZUhlYWRlckZucyhyZXFIZWFkZXJzLCBzaGFsbG93Q29weShjb25maWcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkaHR0cC5wZW5kaW5nUmVxdWVzdHMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNnZXRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBHRVRgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjZGVsZXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgREVMRVRFYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2hlYWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBIRUFEYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2pzb25wXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSlNPTlBgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIFRoZSBuYW1lIG9mIHRoZSBjYWxsYmFjayBzaG91bGQgYmUgdGhlIHN0cmluZyBgSlNPTl9DQUxMQkFDS2AuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cbiAgICBjcmVhdGVTaG9ydE1ldGhvZHMoJ2dldCcsICdkZWxldGUnLCAnaGVhZCcsICdqc29ucCcpO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI3Bvc3RcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQT1NUYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNwdXRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQVVRgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICRodHRwI3BhdGNoXG4gICAgICAqXG4gICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUEFUQ0hgIHJlcXVlc3QuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICAqL1xuICAgIGNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhKCdwb3N0JywgJ3B1dCcsICdwYXRjaCcpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAgICogQG5hbWUgJGh0dHAjZGVmYXVsdHNcbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJ1bnRpbWUgZXF1aXZhbGVudCBvZiB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHNgIHByb3BlcnR5LiBBbGxvd3MgY29uZmlndXJhdGlvbiBvZlxuICAgICAgICAgKiBkZWZhdWx0IGhlYWRlcnMsIHdpdGhDcmVkZW50aWFscyBhcyB3ZWxsIGFzIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIFwiU2V0dGluZyBIVFRQIEhlYWRlcnNcIiBhbmQgXCJUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlc1wiIHNlY3Rpb25zIGFib3ZlLlxuICAgICAgICAgKi9cbiAgICAkaHR0cC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuXG5cbiAgICByZXR1cm4gJGh0dHA7XG5cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kcyhuYW1lcykge1xuICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgJGh0dHBbbmFtZV0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoe30sIGNvbmZpZyB8fCB7fSwge1xuICAgICAgICAgICAgbWV0aG9kOiBuYW1lLFxuICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhKG5hbWUpIHtcbiAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgICAgICByZXR1cm4gJGh0dHAoZXh0ZW5kKHt9LCBjb25maWcgfHwge30sIHtcbiAgICAgICAgICAgIG1ldGhvZDogbmFtZSxcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogTWFrZXMgdGhlIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiAhISEgQUNDRVNTRVMgQ0xPU1VSRSBWQVJTOlxuICAgICAqICRodHRwQmFja2VuZCwgZGVmYXVsdHMsICRsb2csICRyb290U2NvcGUsIGRlZmF1bHRDYWNoZSwgJGh0dHAucGVuZGluZ1JlcXVlc3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2VuZFJlcShjb25maWcsIHJlcURhdGEpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCksXG4gICAgICAgICAgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgY2FjaGUsXG4gICAgICAgICAgY2FjaGVkUmVzcCxcbiAgICAgICAgICByZXFIZWFkZXJzID0gY29uZmlnLmhlYWRlcnMsXG4gICAgICAgICAgdXJsID0gYnVpbGRVcmwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtU2VyaWFsaXplcihjb25maWcucGFyYW1zKSk7XG5cbiAgICAgICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5wdXNoKGNvbmZpZyk7XG4gICAgICBwcm9taXNlLnRoZW4ocmVtb3ZlUGVuZGluZ1JlcSwgcmVtb3ZlUGVuZGluZ1JlcSk7XG5cblxuICAgICAgaWYgKChjb25maWcuY2FjaGUgfHwgZGVmYXVsdHMuY2FjaGUpICYmIGNvbmZpZy5jYWNoZSAhPT0gZmFsc2UgJiZcbiAgICAgICAgICAoY29uZmlnLm1ldGhvZCA9PT0gJ0dFVCcgfHwgY29uZmlnLm1ldGhvZCA9PT0gJ0pTT05QJykpIHtcbiAgICAgICAgY2FjaGUgPSBpc09iamVjdChjb25maWcuY2FjaGUpID8gY29uZmlnLmNhY2hlXG4gICAgICAgICAgICAgIDogaXNPYmplY3QoZGVmYXVsdHMuY2FjaGUpID8gZGVmYXVsdHMuY2FjaGVcbiAgICAgICAgICAgICAgOiBkZWZhdWx0Q2FjaGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZWRSZXNwID0gY2FjaGUuZ2V0KHVybCk7XG4gICAgICAgIGlmIChpc0RlZmluZWQoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgICBpZiAoaXNQcm9taXNlTGlrZShjYWNoZWRSZXNwKSkge1xuICAgICAgICAgICAgLy8gY2FjaGVkIHJlcXVlc3QgaGFzIGFscmVhZHkgYmVlbiBzZW50LCBidXQgdGhlcmUgaXMgbm8gcmVzcG9uc2UgeWV0XG4gICAgICAgICAgICBjYWNoZWRSZXNwLnRoZW4ocmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0LCByZXNvbHZlUHJvbWlzZVdpdGhSZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzZXJ2aW5nIGZyb20gY2FjaGVcbiAgICAgICAgICAgIGlmIChpc0FycmF5KGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlKGNhY2hlZFJlc3BbMV0sIGNhY2hlZFJlc3BbMF0sIHNoYWxsb3dDb3B5KGNhY2hlZFJlc3BbMl0pLCBjYWNoZWRSZXNwWzNdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlKGNhY2hlZFJlc3AsIDIwMCwge30sICdPSycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBwdXQgdGhlIHByb21pc2UgZm9yIHRoZSBub24tdHJhbnNmb3JtZWQgcmVzcG9uc2UgaW50byBjYWNoZSBhcyBhIHBsYWNlaG9sZGVyXG4gICAgICAgICAgY2FjaGUucHV0KHVybCwgcHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICAvLyBpZiB3ZSB3b24ndCBoYXZlIHRoZSByZXNwb25zZSBpbiBjYWNoZSwgc2V0IHRoZSB4c3JmIGhlYWRlcnMgYW5kXG4gICAgICAvLyBzZW5kIHRoZSByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kXG4gICAgICBpZiAoaXNVbmRlZmluZWQoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgdmFyIHhzcmZWYWx1ZSA9IHVybElzU2FtZU9yaWdpbihjb25maWcudXJsKVxuICAgICAgICAgICAgPyAkJGNvb2tpZVJlYWRlcigpW2NvbmZpZy54c3JmQ29va2llTmFtZSB8fCBkZWZhdWx0cy54c3JmQ29va2llTmFtZV1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgICAgcmVxSGVhZGVyc1soY29uZmlnLnhzcmZIZWFkZXJOYW1lIHx8IGRlZmF1bHRzLnhzcmZIZWFkZXJOYW1lKV0gPSB4c3JmVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICAkaHR0cEJhY2tlbmQoY29uZmlnLm1ldGhvZCwgdXJsLCByZXFEYXRhLCBkb25lLCByZXFIZWFkZXJzLCBjb25maWcudGltZW91dCxcbiAgICAgICAgICAgIGNvbmZpZy53aXRoQ3JlZGVudGlhbHMsIGNvbmZpZy5yZXNwb25zZVR5cGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcblxuXG4gICAgICAvKipcbiAgICAgICAqIENhbGxiYWNrIHJlZ2lzdGVyZWQgdG8gJGh0dHBCYWNrZW5kKCk6XG4gICAgICAgKiAgLSBjYWNoZXMgdGhlIHJlc3BvbnNlIGlmIGRlc2lyZWRcbiAgICAgICAqICAtIHJlc29sdmVzIHRoZSByYXcgJGh0dHAgcHJvbWlzZVxuICAgICAgICogIC0gY2FsbHMgJGFwcGx5XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGRvbmUoc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCkge1xuICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICBpZiAoaXNTdWNjZXNzKHN0YXR1cykpIHtcbiAgICAgICAgICAgIGNhY2hlLnB1dCh1cmwsIFtzdGF0dXMsIHJlc3BvbnNlLCBwYXJzZUhlYWRlcnMoaGVhZGVyc1N0cmluZyksIHN0YXR1c1RleHRdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHByb21pc2UgZnJvbSB0aGUgY2FjaGVcbiAgICAgICAgICAgIGNhY2hlLnJlbW92ZSh1cmwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVIdHRwUHJvbWlzZSgpIHtcbiAgICAgICAgICByZXNvbHZlUHJvbWlzZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VBcHBseUFzeW5jKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHlBc3luYyhyZXNvbHZlSHR0cFByb21pc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmVIdHRwUHJvbWlzZSgpO1xuICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXNvbHZlcyB0aGUgcmF3ICRodHRwIHByb21pc2UuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIHN0YXR1c1RleHQpIHtcbiAgICAgICAgLy9zdGF0dXM6IEhUVFAgcmVzcG9uc2Ugc3RhdHVzIGNvZGUsIDAsIC0xIChhYm9ydGVkIGJ5IHRpbWVvdXQgLyBwcm9taXNlKVxuICAgICAgICBzdGF0dXMgPSBzdGF0dXMgPj0gLTEgPyBzdGF0dXMgOiAwO1xuXG4gICAgICAgIChpc1N1Y2Nlc3Moc3RhdHVzKSA/IGRlZmVycmVkLnJlc29sdmUgOiBkZWZlcnJlZC5yZWplY3QpKHtcbiAgICAgICAgICBkYXRhOiByZXNwb25zZSxcbiAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLFxuICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHN0YXR1c1RleHRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlV2l0aFJlc3VsdChyZXN1bHQpIHtcbiAgICAgICAgcmVzb2x2ZVByb21pc2UocmVzdWx0LmRhdGEsIHJlc3VsdC5zdGF0dXMsIHNoYWxsb3dDb3B5KHJlc3VsdC5oZWFkZXJzKCkpLCByZXN1bHQuc3RhdHVzVGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbW92ZVBlbmRpbmdSZXEoKSB7XG4gICAgICAgIHZhciBpZHggPSAkaHR0cC5wZW5kaW5nUmVxdWVzdHMuaW5kZXhPZihjb25maWcpO1xuICAgICAgICBpZiAoaWR4ICE9PSAtMSkgJGh0dHAucGVuZGluZ1JlcXVlc3RzLnNwbGljZShpZHgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYnVpbGRVcmwodXJsLCBzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgICBpZiAoc2VyaWFsaXplZFBhcmFtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHVybCArPSAoKHVybC5pbmRleE9mKCc/JykgPT0gLTEpID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR4aHJGYWN0b3J5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHVzZWQgdG8gY3JlYXRlIFhNTEh0dHBSZXF1ZXN0IG9iamVjdHMuXG4gKlxuICogUmVwbGFjZSBvciBkZWNvcmF0ZSB0aGlzIHNlcnZpY2UgdG8gY3JlYXRlIHlvdXIgb3duIGN1c3RvbSBYTUxIdHRwUmVxdWVzdCBvYmplY3RzLlxuICpcbiAqIGBgYFxuICogYW5ndWxhci5tb2R1bGUoJ215QXBwJywgW10pXG4gKiAuZmFjdG9yeSgnJHhockZhY3RvcnknLCBmdW5jdGlvbigpIHtcbiAqICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVhocihtZXRob2QsIHVybCkge1xuICogICAgIHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KHttb3pTeXN0ZW06IHRydWV9KTtcbiAqICAgfTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCBIVFRQIG1ldGhvZCBvZiB0aGUgcmVxdWVzdCAoR0VULCBQT1NULCBQVVQsIC4uKVxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBVUkwgb2YgdGhlIHJlcXVlc3QuXG4gKi9cbmZ1bmN0aW9uICR4aHJGYWN0b3J5UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVYaHIoKSB7XG4gICAgICByZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuICAgIH07XG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRodHRwQmFja2VuZFxuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAqIEByZXF1aXJlcyAkeGhyRmFjdG9yeVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSFRUUCBiYWNrZW5kIHVzZWQgYnkgdGhlIHtAbGluayBuZy4kaHR0cCBzZXJ2aWNlfSB0aGF0IGRlbGVnYXRlcyB0b1xuICogWE1MSHR0cFJlcXVlc3Qgb2JqZWN0IG9yIEpTT05QIGFuZCBkZWFscyB3aXRoIGJyb3dzZXIgaW5jb21wYXRpYmlsaXRpZXMuXG4gKlxuICogWW91IHNob3VsZCBuZXZlciBuZWVkIHRvIHVzZSB0aGlzIHNlcnZpY2UgZGlyZWN0bHksIGluc3RlYWQgdXNlIHRoZSBoaWdoZXItbGV2ZWwgYWJzdHJhY3Rpb25zOlxuICoge0BsaW5rIG5nLiRodHRwICRodHRwfSBvciB7QGxpbmsgbmdSZXNvdXJjZS4kcmVzb3VyY2UgJHJlc291cmNlfS5cbiAqXG4gKiBEdXJpbmcgdGVzdGluZyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIHN3YXBwZWQgd2l0aCB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCBtb2NrXG4gKiAkaHR0cEJhY2tlbmR9IHdoaWNoIGNhbiBiZSB0cmFpbmVkIHdpdGggcmVzcG9uc2VzLlxuICovXG5mdW5jdGlvbiAkSHR0cEJhY2tlbmRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckd2luZG93JywgJyRkb2N1bWVudCcsICckeGhyRmFjdG9yeScsIGZ1bmN0aW9uKCRicm93c2VyLCAkd2luZG93LCAkZG9jdW1lbnQsICR4aHJGYWN0b3J5KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCAkeGhyRmFjdG9yeSwgJGJyb3dzZXIuZGVmZXIsICR3aW5kb3cuYW5ndWxhci5jYWxsYmFja3MsICRkb2N1bWVudFswXSk7XG4gIH1dO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIdHRwQmFja2VuZCgkYnJvd3NlciwgY3JlYXRlWGhyLCAkYnJvd3NlckRlZmVyLCBjYWxsYmFja3MsIHJhd0RvY3VtZW50KSB7XG4gIC8vIFRPRE8odm9qdGEpOiBmaXggdGhlIHNpZ25hdHVyZVxuICByZXR1cm4gZnVuY3Rpb24obWV0aG9kLCB1cmwsIHBvc3QsIGNhbGxiYWNrLCBoZWFkZXJzLCB0aW1lb3V0LCB3aXRoQ3JlZGVudGlhbHMsIHJlc3BvbnNlVHlwZSkge1xuICAgICRicm93c2VyLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQoKTtcbiAgICB1cmwgPSB1cmwgfHwgJGJyb3dzZXIudXJsKCk7XG5cbiAgICBpZiAobG93ZXJjYXNlKG1ldGhvZCkgPT0gJ2pzb25wJykge1xuICAgICAgdmFyIGNhbGxiYWNrSWQgPSAnXycgKyAoY2FsbGJhY2tzLmNvdW50ZXIrKykudG9TdHJpbmcoMzYpO1xuICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0uZGF0YSA9IGRhdGE7XG4gICAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXS5jYWxsZWQgPSB0cnVlO1xuICAgICAgfTtcblxuICAgICAgdmFyIGpzb25wRG9uZSA9IGpzb25wUmVxKHVybC5yZXBsYWNlKCdKU09OX0NBTExCQUNLJywgJ2FuZ3VsYXIuY2FsbGJhY2tzLicgKyBjYWxsYmFja0lkKSxcbiAgICAgICAgICBjYWxsYmFja0lkLCBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHtcbiAgICAgICAgY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLCBzdGF0dXMsIGNhbGxiYWNrc1tjYWxsYmFja0lkXS5kYXRhLCBcIlwiLCB0ZXh0KTtcbiAgICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdID0gbm9vcDtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIHZhciB4aHIgPSBjcmVhdGVYaHIobWV0aG9kLCB1cmwpO1xuXG4gICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uIHJlcXVlc3RMb2FkZWQoKSB7XG4gICAgICAgIHZhciBzdGF0dXNUZXh0ID0geGhyLnN0YXR1c1RleHQgfHwgJyc7XG5cbiAgICAgICAgLy8gcmVzcG9uc2VUZXh0IGlzIHRoZSBvbGQtc2Nob29sIHdheSBvZiByZXRyaWV2aW5nIHJlc3BvbnNlIChzdXBwb3J0ZWQgYnkgSUU5KVxuICAgICAgICAvLyByZXNwb25zZS9yZXNwb25zZVR5cGUgcHJvcGVydGllcyB3ZXJlIGludHJvZHVjZWQgaW4gWEhSIExldmVsMiBzcGVjIChzdXBwb3J0ZWQgYnkgSUUxMClcbiAgICAgICAgdmFyIHJlc3BvbnNlID0gKCdyZXNwb25zZScgaW4geGhyKSA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgLy8gbm9ybWFsaXplIElFOSBidWcgKGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzE0NTApXG4gICAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzID09PSAxMjIzID8gMjA0IDogeGhyLnN0YXR1cztcblxuICAgICAgICAvLyBmaXggc3RhdHVzIGNvZGUgd2hlbiBpdCBpcyAwICgwIHN0YXR1cyBpcyB1bmRvY3VtZW50ZWQpLlxuICAgICAgICAvLyBPY2N1cnMgd2hlbiBhY2Nlc3NpbmcgZmlsZSByZXNvdXJjZXMgb3Igb24gQW5kcm9pZCA0LjEgc3RvY2sgYnJvd3NlclxuICAgICAgICAvLyB3aGlsZSByZXRyaWV2aW5nIGZpbGVzIGZyb20gYXBwbGljYXRpb24gY2FjaGUuXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDApIHtcbiAgICAgICAgICBzdGF0dXMgPSByZXNwb25zZSA/IDIwMCA6IHVybFJlc29sdmUodXJsKS5wcm90b2NvbCA9PSAnZmlsZScgPyA0MDQgOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCksXG4gICAgICAgICAgICBzdGF0dXNUZXh0KTtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZXF1ZXN0RXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVGhlIHJlc3BvbnNlIGlzIGFsd2F5cyBlbXB0eVxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyNyZXF1ZXN0LWVycm9yLXN0ZXBzIGFuZCBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1uZXR3b3JrLWVycm9yXG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgLTEsIG51bGwsIG51bGwsICcnKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmVycm9yID0gcmVxdWVzdEVycm9yO1xuICAgICAgeGhyLm9uYWJvcnQgPSByZXF1ZXN0RXJyb3I7XG5cbiAgICAgIGlmICh3aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNwb25zZVR5cGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gV2ViS2l0IGFkZGVkIHN1cHBvcnQgZm9yIHRoZSBqc29uIHJlc3BvbnNlVHlwZSB2YWx1ZSBvbiAwOS8wMy8yMDEzXG4gICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTczNjQ4LiBWZXJzaW9ucyBvZiBTYWZhcmkgcHJpb3IgdG8gNyBhcmVcbiAgICAgICAgICAvLyBrbm93biB0byB0aHJvdyB3aGVuIHNldHRpbmcgdGhlIHZhbHVlIFwianNvblwiIGFzIHRoZSByZXNwb25zZSB0eXBlLiBPdGhlciBvbGRlclxuICAgICAgICAgIC8vIGJyb3dzZXJzIGltcGxlbWVudGluZyB0aGUgcmVzcG9uc2VUeXBlXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBUaGUganNvbiByZXNwb25zZSB0eXBlIGNhbiBiZSBpZ25vcmVkIGlmIG5vdCBzdXBwb3J0ZWQsIGJlY2F1c2UgSlNPTiBwYXlsb2FkcyBhcmVcbiAgICAgICAgICAvLyBwYXJzZWQgb24gdGhlIGNsaWVudC1zaWRlIHJlZ2FyZGxlc3MuXG4gICAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZChpc1VuZGVmaW5lZChwb3N0KSA/IG51bGwgOiBwb3N0KTtcbiAgICB9XG5cbiAgICBpZiAodGltZW91dCA+IDApIHtcbiAgICAgIHZhciB0aW1lb3V0SWQgPSAkYnJvd3NlckRlZmVyKHRpbWVvdXRSZXF1ZXN0LCB0aW1lb3V0KTtcbiAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZUxpa2UodGltZW91dCkpIHtcbiAgICAgIHRpbWVvdXQudGhlbih0aW1lb3V0UmVxdWVzdCk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiB0aW1lb3V0UmVxdWVzdCgpIHtcbiAgICAgIGpzb25wRG9uZSAmJiBqc29ucERvbmUoKTtcbiAgICAgIHhociAmJiB4aHIuYWJvcnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpIHtcbiAgICAgIC8vIGNhbmNlbCB0aW1lb3V0IGFuZCBzdWJzZXF1ZW50IHRpbWVvdXQgcHJvbWlzZSByZXNvbHV0aW9uXG4gICAgICBpZiAoaXNEZWZpbmVkKHRpbWVvdXRJZCkpIHtcbiAgICAgICAgJGJyb3dzZXJEZWZlci5jYW5jZWwodGltZW91dElkKTtcbiAgICAgIH1cbiAgICAgIGpzb25wRG9uZSA9IHhociA9IG51bGw7XG5cbiAgICAgIGNhbGxiYWNrKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcsIHN0YXR1c1RleHQpO1xuICAgICAgJGJyb3dzZXIuJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChub29wKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24ganNvbnBSZXEodXJsLCBjYWxsYmFja0lkLCBkb25lKSB7XG4gICAgLy8gd2UgY2FuJ3QgdXNlIGpRdWVyeS9qcUxpdGUgaGVyZSBiZWNhdXNlIGpRdWVyeSBkb2VzIGNyYXp5IHN0dWZmIHdpdGggc2NyaXB0IGVsZW1lbnRzLCBlLmcuOlxuICAgIC8vIC0gZmV0Y2hlcyBsb2NhbCBzY3JpcHRzIHZpYSBYSFIgYW5kIGV2YWxzIHRoZW1cbiAgICAvLyAtIGFkZHMgYW5kIGltbWVkaWF0ZWx5IHJlbW92ZXMgc2NyaXB0IGVsZW1lbnRzIGZyb20gdGhlIGRvY3VtZW50XG4gICAgdmFyIHNjcmlwdCA9IHJhd0RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCBjYWxsYmFjayA9IG51bGw7XG4gICAgc2NyaXB0LnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiO1xuICAgIHNjcmlwdC5zcmMgPSB1cmw7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihzY3JpcHQsIFwibG9hZFwiLCBjYWxsYmFjayk7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oc2NyaXB0LCBcImVycm9yXCIsIGNhbGxiYWNrKTtcbiAgICAgIHJhd0RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICB2YXIgc3RhdHVzID0gLTE7XG4gICAgICB2YXIgdGV4dCA9IFwidW5rbm93blwiO1xuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwibG9hZFwiICYmICFjYWxsYmFja3NbY2FsbGJhY2tJZF0uY2FsbGVkKSB7XG4gICAgICAgICAgZXZlbnQgPSB7IHR5cGU6IFwiZXJyb3JcIiB9O1xuICAgICAgICB9XG4gICAgICAgIHRleHQgPSBldmVudC50eXBlO1xuICAgICAgICBzdGF0dXMgPSBldmVudC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGRvbmUoc3RhdHVzLCB0ZXh0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZuKHNjcmlwdCwgXCJsb2FkXCIsIGNhbGxiYWNrKTtcbiAgICBhZGRFdmVudExpc3RlbmVyRm4oc2NyaXB0LCBcImVycm9yXCIsIGNhbGxiYWNrKTtcbiAgICByYXdEb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9XG59XG5cbnZhciAkaW50ZXJwb2xhdGVNaW5FcnIgPSBhbmd1bGFyLiRpbnRlcnBvbGF0ZU1pbkVyciA9IG1pbkVycignJGludGVycG9sYXRlJyk7XG4kaW50ZXJwb2xhdGVNaW5FcnIudGhyb3dOb2NvbmNhdCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgdGhyb3cgJGludGVycG9sYXRlTWluRXJyKCdub2NvbmNhdCcsXG4gICAgICBcIkVycm9yIHdoaWxlIGludGVycG9sYXRpbmc6IHswfVxcblN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRpc2FsbG93cyBcIiArXG4gICAgICBcImludGVycG9sYXRpb25zIHRoYXQgY29uY2F0ZW5hdGUgbXVsdGlwbGUgZXhwcmVzc2lvbnMgd2hlbiBhIHRydXN0ZWQgdmFsdWUgaXMgXCIgK1xuICAgICAgXCJyZXF1aXJlZC4gIFNlZSBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kc2NlXCIsIHRleHQpO1xufTtcblxuJGludGVycG9sYXRlTWluRXJyLmludGVyciA9IGZ1bmN0aW9uKHRleHQsIGVycikge1xuICByZXR1cm4gJGludGVycG9sYXRlTWluRXJyKCdpbnRlcnInLCBcIkNhbid0IGludGVycG9sYXRlOiB7MH1cXG57MX1cIiwgdGV4dCwgZXJyLnRvU3RyaW5nKCkpO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVXNlZCBmb3IgY29uZmlndXJpbmcgdGhlIGludGVycG9sYXRpb24gbWFya3VwLiBEZWZhdWx0cyB0byBge3tgIGFuZCBgfX1gLlxuICpcbiAqIEBleGFtcGxlXG48ZXhhbXBsZSBuYW1lPVwiY3VzdG9tLWludGVycG9sYXRpb24tbWFya3VwXCIgbW9kdWxlPVwiY3VzdG9tSW50ZXJwb2xhdGlvbkFwcFwiPlxuPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbjxzY3JpcHQ+XG4gIHZhciBjdXN0b21JbnRlcnBvbGF0aW9uQXBwID0gYW5ndWxhci5tb2R1bGUoJ2N1c3RvbUludGVycG9sYXRpb25BcHAnLCBbXSk7XG5cbiAgY3VzdG9tSW50ZXJwb2xhdGlvbkFwcC5jb25maWcoZnVuY3Rpb24oJGludGVycG9sYXRlUHJvdmlkZXIpIHtcbiAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5zdGFydFN5bWJvbCgnLy8nKTtcbiAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5lbmRTeW1ib2woJy8vJyk7XG4gIH0pO1xuXG5cbiAgY3VzdG9tSW50ZXJwb2xhdGlvbkFwcC5jb250cm9sbGVyKCdEZW1vQ29udHJvbGxlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5sYWJlbCA9IFwiVGhpcyBiaW5kaW5nIGlzIGJyb3VnaHQgeW91IGJ5IC8vIGludGVycG9sYXRpb24gc3ltYm9scy5cIjtcbiAgfSk7XG48L3NjcmlwdD5cbjxkaXYgbmctY29udHJvbGxlcj1cIkRlbW9Db250cm9sbGVyIGFzIGRlbW9cIj5cbiAgICAvL2RlbW8ubGFiZWwvL1xuPC9kaXY+XG48L2ZpbGU+XG48ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gIGl0KCdzaG91bGQgaW50ZXJwb2xhdGUgYmluZGluZyB3aXRoIGN1c3RvbSBzeW1ib2xzJywgZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnZGVtby5sYWJlbCcpKS5nZXRUZXh0KCkpLnRvQmUoJ1RoaXMgYmluZGluZyBpcyBicm91Z2h0IHlvdSBieSAvLyBpbnRlcnBvbGF0aW9uIHN5bWJvbHMuJyk7XG4gIH0pO1xuPC9maWxlPlxuPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkSW50ZXJwb2xhdGVQcm92aWRlcigpIHtcbiAgdmFyIHN0YXJ0U3ltYm9sID0gJ3t7JztcbiAgdmFyIGVuZFN5bWJvbCA9ICd9fSc7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGludGVycG9sYXRlUHJvdmlkZXIjc3RhcnRTeW1ib2xcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFN5bWJvbCB0byBkZW5vdGUgc3RhcnQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYHt7YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSB2YWx1ZSBuZXcgdmFsdWUgdG8gc2V0IHRoZSBzdGFydGluZyBzeW1ib2wgdG8uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8c2VsZn0gUmV0dXJucyB0aGUgc3ltYm9sIHdoZW4gdXNlZCBhcyBnZXR0ZXIgYW5kIHNlbGYgaWYgdXNlZCBhcyBzZXR0ZXIuXG4gICAqL1xuICB0aGlzLnN0YXJ0U3ltYm9sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHN0YXJ0U3ltYm9sID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlciNlbmRTeW1ib2xcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIGVuZCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBgfX1gLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIGVuZGluZyBzeW1ib2wgdG8uXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8c2VsZn0gUmV0dXJucyB0aGUgc3ltYm9sIHdoZW4gdXNlZCBhcyBnZXR0ZXIgYW5kIHNlbGYgaWYgdXNlZCBhcyBzZXR0ZXIuXG4gICAqL1xuICB0aGlzLmVuZFN5bWJvbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBlbmRTeW1ib2wgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZW5kU3ltYm9sO1xuICAgIH1cbiAgfTtcblxuXG4gIHRoaXMuJGdldCA9IFsnJHBhcnNlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyRzY2UnLCBmdW5jdGlvbigkcGFyc2UsICRleGNlcHRpb25IYW5kbGVyLCAkc2NlKSB7XG4gICAgdmFyIHN0YXJ0U3ltYm9sTGVuZ3RoID0gc3RhcnRTeW1ib2wubGVuZ3RoLFxuICAgICAgICBlbmRTeW1ib2xMZW5ndGggPSBlbmRTeW1ib2wubGVuZ3RoLFxuICAgICAgICBlc2NhcGVkU3RhcnRSZWdleHAgPSBuZXcgUmVnRXhwKHN0YXJ0U3ltYm9sLnJlcGxhY2UoLy4vZywgZXNjYXBlKSwgJ2cnKSxcbiAgICAgICAgZXNjYXBlZEVuZFJlZ2V4cCA9IG5ldyBSZWdFeHAoZW5kU3ltYm9sLnJlcGxhY2UoLy4vZywgZXNjYXBlKSwgJ2cnKTtcblxuICAgIGZ1bmN0aW9uIGVzY2FwZShjaCkge1xuICAgICAgcmV0dXJuICdcXFxcXFxcXFxcXFwnICsgY2g7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5lc2NhcGVUZXh0KHRleHQpIHtcbiAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoZXNjYXBlZFN0YXJ0UmVnZXhwLCBzdGFydFN5bWJvbCkuXG4gICAgICAgIHJlcGxhY2UoZXNjYXBlZEVuZFJlZ2V4cCwgZW5kU3ltYm9sKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7IC8vIG51bGwgfHwgdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgdmFsdWUgPSAnJyArIHZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHZhbHVlID0gdG9Kc29uKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEByZXF1aXJlcyAkcGFyc2VcbiAgICAgKiBAcmVxdWlyZXMgJHNjZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBDb21waWxlcyBhIHN0cmluZyB3aXRoIG1hcmt1cCBpbnRvIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFRoaXMgc2VydmljZSBpcyB1c2VkIGJ5IHRoZVxuICAgICAqIEhUTUwge0BsaW5rIG5nLiRjb21waWxlICRjb21waWxlfSBzZXJ2aWNlIGZvciBkYXRhIGJpbmRpbmcuIFNlZVxuICAgICAqIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciAkaW50ZXJwb2xhdGVQcm92aWRlcn0gZm9yIGNvbmZpZ3VyaW5nIHRoZVxuICAgICAqIGludGVycG9sYXRpb24gbWFya3VwLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgdmFyICRpbnRlcnBvbGF0ZSA9IC4uLjsgLy8gaW5qZWN0ZWRcbiAgICAgKiAgIHZhciBleHAgPSAkaW50ZXJwb2xhdGUoJ0hlbGxvIHt7bmFtZSB8IHVwcGVyY2FzZX19IScpO1xuICAgICAqICAgZXhwZWN0KGV4cCh7bmFtZTonQW5ndWxhcid9KSkudG9FcXVhbCgnSGVsbG8gQU5HVUxBUiEnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGAkaW50ZXJwb2xhdGVgIHRha2VzIGFuIG9wdGlvbmFsIGZvdXJ0aCBhcmd1bWVudCwgYGFsbE9yTm90aGluZ2AuIElmIGBhbGxPck5vdGhpbmdgIGlzXG4gICAgICogYHRydWVgLCB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiB3aWxsIHJldHVybiBgdW5kZWZpbmVkYCB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zXG4gICAgICogZXZhbHVhdGUgdG8gYSB2YWx1ZSBvdGhlciB0aGFuIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIHZhciAkaW50ZXJwb2xhdGUgPSAuLi47IC8vIGluamVjdGVkXG4gICAgICogICB2YXIgY29udGV4dCA9IHtncmVldGluZzogJ0hlbGxvJywgbmFtZTogdW5kZWZpbmVkIH07XG4gICAgICpcbiAgICAgKiAgIC8vIGRlZmF1bHQgXCJmb3JnaXZpbmdcIiBtb2RlXG4gICAgICogICB2YXIgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJyk7XG4gICAgICogICBleHBlY3QoZXhwKGNvbnRleHQpKS50b0VxdWFsKCdIZWxsbyAhJyk7XG4gICAgICpcbiAgICAgKiAgIC8vIFwiYWxsT3JOb3RoaW5nXCIgbW9kZVxuICAgICAqICAgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJywgZmFsc2UsIG51bGwsIHRydWUpO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAqICAgY29udGV4dC5uYW1lID0gJ0FuZ3VsYXInO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9FcXVhbCgnSGVsbG8gQW5ndWxhciEnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBhbGxPck5vdGhpbmdgIGlzIHVzZWZ1bCBmb3IgaW50ZXJwb2xhdGluZyBVUkxzLiBgbmdTcmNgIGFuZCBgbmdTcmNzZXRgIHVzZSB0aGlzIGJlaGF2aW9yLlxuICAgICAqXG4gICAgICogIyMjI0VzY2FwZWQgSW50ZXJwb2xhdGlvblxuICAgICAqICRpbnRlcnBvbGF0ZSBwcm92aWRlcyBhIG1lY2hhbmlzbSBmb3IgZXNjYXBpbmcgaW50ZXJwb2xhdGlvbiBtYXJrZXJzLiBTdGFydCBhbmQgZW5kIG1hcmtlcnNcbiAgICAgKiBjYW4gYmUgZXNjYXBlZCBieSBwcmVjZWRpbmcgZWFjaCBvZiB0aGVpciBjaGFyYWN0ZXJzIHdpdGggYSBSRVZFUlNFIFNPTElEVVMgVSswMDVDIChiYWNrc2xhc2gpLlxuICAgICAqIEl0IHdpbGwgYmUgcmVuZGVyZWQgYXMgYSByZWd1bGFyIHN0YXJ0L2VuZCBtYXJrZXIsIGFuZCB3aWxsIG5vdCBiZSBpbnRlcnByZXRlZCBhcyBhbiBleHByZXNzaW9uXG4gICAgICogb3IgYmluZGluZy5cbiAgICAgKlxuICAgICAqIFRoaXMgZW5hYmxlcyB3ZWItc2VydmVycyB0byBwcmV2ZW50IHNjcmlwdCBpbmplY3Rpb24gYXR0YWNrcyBhbmQgZGVmYWNpbmcgYXR0YWNrcywgdG8gc29tZVxuICAgICAqIGRlZ3JlZSwgd2hpbGUgYWxzbyBlbmFibGluZyBjb2RlIGV4YW1wbGVzIHRvIHdvcmsgd2l0aG91dCByZWx5aW5nIG9uIHRoZVxuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdOb25CaW5kYWJsZSBuZ05vbkJpbmRhYmxlfSBkaXJlY3RpdmUuXG4gICAgICpcbiAgICAgKiAqKkZvciBzZWN1cml0eSBwdXJwb3NlcywgaXQgaXMgc3Ryb25nbHkgZW5jb3VyYWdlZCB0aGF0IHdlYiBzZXJ2ZXJzIGVzY2FwZSB1c2VyLXN1cHBsaWVkIGRhdGEsXG4gICAgICogcmVwbGFjaW5nIGFuZ2xlIGJyYWNrZXRzICgmbHQ7LCAmZ3Q7KSB3aXRoICZhbXA7bHQ7IGFuZCAmYW1wO2d0OyByZXNwZWN0aXZlbHksIGFuZCByZXBsYWNpbmcgYWxsXG4gICAgICogaW50ZXJwb2xhdGlvbiBzdGFydC9lbmQgbWFya2VycyB3aXRoIHRoZWlyIGVzY2FwZWQgY291bnRlcnBhcnRzLioqXG4gICAgICpcbiAgICAgKiBFc2NhcGVkIGludGVycG9sYXRpb24gbWFya2VycyBhcmUgb25seSByZXBsYWNlZCB3aXRoIHRoZSBhY3R1YWwgaW50ZXJwb2xhdGlvbiBtYXJrZXJzIGluIHJlbmRlcmVkXG4gICAgICogb3V0cHV0IHdoZW4gdGhlICRpbnRlcnBvbGF0ZSBzZXJ2aWNlIHByb2Nlc3NlcyB0aGUgdGV4dC4gU28sIGZvciBIVE1MIGVsZW1lbnRzIGludGVycG9sYXRlZFxuICAgICAqIGJ5IHtAbGluayBuZy4kY29tcGlsZSAkY29tcGlsZX0sIG9yIG90aGVyd2lzZSBpbnRlcnBvbGF0ZWQgd2l0aCB0aGUgYG11c3RIYXZlRXhwcmVzc2lvbmAgcGFyYW1ldGVyXG4gICAgICogc2V0IHRvIGB0cnVlYCwgdGhlIGludGVycG9sYXRlZCB0ZXh0IG11c3QgY29udGFpbiBhbiB1bmVzY2FwZWQgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uLiBBcyBzdWNoLFxuICAgICAqIHRoaXMgaXMgdHlwaWNhbGx5IHVzZWZ1bCBvbmx5IHdoZW4gdXNlci1kYXRhIGlzIHVzZWQgaW4gcmVuZGVyaW5nIGEgdGVtcGxhdGUgZnJvbSB0aGUgc2VydmVyLCBvclxuICAgICAqIHdoZW4gb3RoZXJ3aXNlIHVudHJ1c3RlZCBkYXRhIGlzIHVzZWQgYnkgYSBkaXJlY3RpdmUuXG4gICAgICpcbiAgICAgKiA8ZXhhbXBsZT5cbiAgICAgKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgKiAgICA8ZGl2IG5nLWluaXQ9XCJ1c2VybmFtZT0nQSB1c2VyJ1wiPlxuICAgICAqICAgICAgPHAgbmctaW5pdD1cImFwcHRpdGxlPSdFc2NhcGluZyBkZW1vJ1wiPnt7YXBwdGl0bGV9fTogXFx7XFx7IHVzZXJuYW1lID0gXCJkZWZhY2VkIHZhbHVlXCI7IFxcfVxcfVxuICAgICAqICAgICAgICA8L3A+XG4gICAgICogICAgICA8cD48c3Ryb25nPnt7dXNlcm5hbWV9fTwvc3Ryb25nPiBhdHRlbXB0cyB0byBpbmplY3QgY29kZSB3aGljaCB3aWxsIGRlZmFjZSB0aGVcbiAgICAgKiAgICAgICAgYXBwbGljYXRpb24sIGJ1dCBmYWlscyB0byBhY2NvbXBsaXNoIHRoZWlyIHRhc2ssIGJlY2F1c2UgdGhlIHNlcnZlciBoYXMgY29ycmVjdGx5XG4gICAgICogICAgICAgIGVzY2FwZWQgdGhlIGludGVycG9sYXRpb24gc3RhcnQvZW5kIG1hcmtlcnMgd2l0aCBSRVZFUlNFIFNPTElEVVMgVSswMDVDIChiYWNrc2xhc2gpXG4gICAgICogICAgICAgIGNoYXJhY3RlcnMuPC9wPlxuICAgICAqICAgICAgPHA+SW5zdGVhZCwgdGhlIHJlc3VsdCBvZiB0aGUgYXR0ZW1wdGVkIHNjcmlwdCBpbmplY3Rpb24gaXMgdmlzaWJsZSwgYW5kIGNhbiBiZSByZW1vdmVkXG4gICAgICogICAgICAgIGZyb20gdGhlIGRhdGFiYXNlIGJ5IGFuIGFkbWluaXN0cmF0b3IuPC9wPlxuICAgICAqICAgIDwvZGl2PlxuICAgICAqICA8L2ZpbGU+XG4gICAgICogPC9leGFtcGxlPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgd2l0aCBtYXJrdXAgdG8gaW50ZXJwb2xhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbXVzdEhhdmVFeHByZXNzaW9uIGlmIHNldCB0byB0cnVlIHRoZW4gdGhlIGludGVycG9sYXRpb24gc3RyaW5nIG11c3QgaGF2ZVxuICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gaW4gb3JkZXIgdG8gcmV0dXJuIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFN0cmluZ3Mgd2l0aCBub1xuICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gd2lsbCByZXR1cm4gbnVsbCBmb3IgdGhlIGludGVycG9sYXRpb24gZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSB0cnVzdGVkQ29udGV4dCB3aGVuIHByb3ZpZGVkLCB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gcGFzc2VzIHRoZSBpbnRlcnBvbGF0ZWRcbiAgICAgKiAgICByZXN1bHQgdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZChpbnRlcnBvbGF0ZWRSZXN1bHQsXG4gICAgICogICAgdHJ1c3RlZENvbnRleHQpfSBiZWZvcmUgcmV0dXJuaW5nIGl0LiAgUmVmZXIgdG8gdGhlIHtAbGluayBuZy4kc2NlICRzY2V9IHNlcnZpY2UgdGhhdFxuICAgICAqICAgIHByb3ZpZGVzIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGZvciBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGFsbE9yTm90aGluZyBpZiBgdHJ1ZWAsIHRoZW4gdGhlIHJldHVybmVkIGZ1bmN0aW9uIHJldHVybnMgdW5kZWZpbmVkXG4gICAgICogICAgdW5sZXNzIGFsbCBlbWJlZGRlZCBleHByZXNzaW9ucyBldmFsdWF0ZSB0byBhIHZhbHVlIG90aGVyIHRoYW4gYHVuZGVmaW5lZGAuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQpfSBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGVcbiAgICAgKiAgICBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBUaGUgZnVuY3Rpb24gaGFzIHRoZXNlIHBhcmFtZXRlcnM6XG4gICAgICpcbiAgICAgKiAtIGBjb250ZXh0YDogZXZhbHVhdGlvbiBjb250ZXh0IGZvciBhbGwgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIGludGVycG9sYXRlZCB0ZXh0XG4gICAgICovXG4gICAgZnVuY3Rpb24gJGludGVycG9sYXRlKHRleHQsIG11c3RIYXZlRXhwcmVzc2lvbiwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZykge1xuICAgICAgYWxsT3JOb3RoaW5nID0gISFhbGxPck5vdGhpbmc7XG4gICAgICB2YXIgc3RhcnRJbmRleCxcbiAgICAgICAgICBlbmRJbmRleCxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgZXhwcmVzc2lvbnMgPSBbXSxcbiAgICAgICAgICBwYXJzZUZucyA9IFtdLFxuICAgICAgICAgIHRleHRMZW5ndGggPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgICBleHAsXG4gICAgICAgICAgY29uY2F0ID0gW10sXG4gICAgICAgICAgZXhwcmVzc2lvblBvc2l0aW9ucyA9IFtdO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgIGlmICgoKHN0YXJ0SW5kZXggPSB0ZXh0LmluZGV4T2Yoc3RhcnRTeW1ib2wsIGluZGV4KSkgIT0gLTEpICYmXG4gICAgICAgICAgICAgKChlbmRJbmRleCA9IHRleHQuaW5kZXhPZihlbmRTeW1ib2wsIHN0YXJ0SW5kZXggKyBzdGFydFN5bWJvbExlbmd0aCkpICE9IC0xKSkge1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgY29uY2F0LnB1c2godW5lc2NhcGVUZXh0KHRleHQuc3Vic3RyaW5nKGluZGV4LCBzdGFydEluZGV4KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleHAgPSB0ZXh0LnN1YnN0cmluZyhzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgsIGVuZEluZGV4KTtcbiAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKGV4cCk7XG4gICAgICAgICAgcGFyc2VGbnMucHVzaCgkcGFyc2UoZXhwLCBwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yKSk7XG4gICAgICAgICAgaW5kZXggPSBlbmRJbmRleCArIGVuZFN5bWJvbExlbmd0aDtcbiAgICAgICAgICBleHByZXNzaW9uUG9zaXRpb25zLnB1c2goY29uY2F0Lmxlbmd0aCk7XG4gICAgICAgICAgY29uY2F0LnB1c2goJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHdlIGRpZCBub3QgZmluZCBhbiBpbnRlcnBvbGF0aW9uLCBzbyB3ZSBoYXZlIHRvIGFkZCB0aGUgcmVtYWluZGVyIHRvIHRoZSBzZXBhcmF0b3JzIGFycmF5XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25jYXQucHVzaCh1bmVzY2FwZVRleHQodGV4dC5zdWJzdHJpbmcoaW5kZXgpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENvbmNhdGVuYXRpbmcgZXhwcmVzc2lvbnMgbWFrZXMgaXQgaGFyZCB0byByZWFzb24gYWJvdXQgd2hldGhlciBzb21lIGNvbWJpbmF0aW9uIG9mXG4gICAgICAvLyBjb25jYXRlbmF0ZWQgdmFsdWVzIGFyZSB1bnNhZmUgdG8gdXNlIGFuZCBjb3VsZCBlYXNpbHkgbGVhZCB0byBYU1MuICBCeSByZXF1aXJpbmcgdGhhdCBhXG4gICAgICAvLyBzaW5nbGUgZXhwcmVzc2lvbiBiZSB1c2VkIGZvciBpZnJhbWVbc3JjXSwgb2JqZWN0W3NyY10sIGV0Yy4sIHdlIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZVxuICAgICAgLy8gdGhhdCdzIHVzZWQgaXMgYXNzaWduZWQgb3IgY29uc3RydWN0ZWQgYnkgc29tZSBKUyBjb2RlIHNvbWV3aGVyZSB0aGF0IGlzIG1vcmUgdGVzdGFibGUgb3JcbiAgICAgIC8vIG1ha2UgaXQgb2J2aW91cyB0aGF0IHlvdSBib3VuZCB0aGUgdmFsdWUgdG8gc29tZSB1c2VyIGNvbnRyb2xsZWQgdmFsdWUuICBUaGlzIGhlbHBzIHJlZHVjZVxuICAgICAgLy8gdGhlIGxvYWQgd2hlbiBhdWRpdGluZyBmb3IgWFNTIGlzc3Vlcy5cbiAgICAgIGlmICh0cnVzdGVkQ29udGV4dCAmJiBjb25jYXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICRpbnRlcnBvbGF0ZU1pbkVyci50aHJvd05vY29uY2F0KHRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW11c3RIYXZlRXhwcmVzc2lvbiB8fCBleHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGNvbXB1dGUgPSBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBleHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYWxsT3JOb3RoaW5nICYmIGlzVW5kZWZpbmVkKHZhbHVlc1tpXSkpIHJldHVybjtcbiAgICAgICAgICAgIGNvbmNhdFtleHByZXNzaW9uUG9zaXRpb25zW2ldXSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbmNhdC5qb2luKCcnKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB0cnVzdGVkQ29udGV4dCA/XG4gICAgICAgICAgICAkc2NlLmdldFRydXN0ZWQodHJ1c3RlZENvbnRleHQsIHZhbHVlKSA6XG4gICAgICAgICAgICAkc2NlLnZhbHVlT2YodmFsdWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gaW50ZXJwb2xhdGlvbkZuKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHZhciBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkoaWkpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3IgKDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXNbaV0gPSBwYXJzZUZuc1tpXShjb250ZXh0KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBjb21wdXRlKHZhbHVlcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoJGludGVycG9sYXRlTWluRXJyLmludGVycih0ZXh0LCBlcnIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAvLyBhbGwgb2YgdGhlc2UgcHJvcGVydGllcyBhcmUgdW5kb2N1bWVudGVkIGZvciBub3dcbiAgICAgICAgICBleHA6IHRleHQsIC8vanVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHJlZ3VsYXIgd2F0Y2hlcnMgY3JlYXRlZCB2aWEgJHdhdGNoXG4gICAgICAgICAgZXhwcmVzc2lvbnM6IGV4cHJlc3Npb25zLFxuICAgICAgICAgICQkd2F0Y2hEZWxlZ2F0ZTogZnVuY3Rpb24oc2NvcGUsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgICB2YXIgbGFzdFZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaEdyb3VwKHBhcnNlRm5zLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hlcih2YWx1ZXMsIG9sZFZhbHVlcykge1xuICAgICAgICAgICAgICB2YXIgY3VyclZhbHVlID0gY29tcHV0ZSh2YWx1ZXMpO1xuICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGN1cnJWYWx1ZSwgdmFsdWVzICE9PSBvbGRWYWx1ZXMgPyBsYXN0VmFsdWUgOiBjdXJyVmFsdWUsIHNjb3BlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBjdXJyVmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yKHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFsdWUgPSBnZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIGFsbE9yTm90aGluZyAmJiAhaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoJGludGVycG9sYXRlTWluRXJyLmludGVycih0ZXh0LCBlcnIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRpbnRlcnBvbGF0ZSNzdGFydFN5bWJvbFxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIHN0YXJ0IG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB7e2AuXG4gICAgICpcbiAgICAgKiBVc2Uge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI3N0YXJ0U3ltYm9sIGAkaW50ZXJwb2xhdGVQcm92aWRlci5zdGFydFN5bWJvbGB9IHRvIGNoYW5nZVxuICAgICAqIHRoZSBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzdGFydCBzeW1ib2wuXG4gICAgICovXG4gICAgJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RhcnRTeW1ib2w7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRpbnRlcnBvbGF0ZSNlbmRTeW1ib2xcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBlbmQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYH19YC5cbiAgICAgKlxuICAgICAqIFVzZSB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIjZW5kU3ltYm9sIGAkaW50ZXJwb2xhdGVQcm92aWRlci5lbmRTeW1ib2xgfSB0byBjaGFuZ2VcbiAgICAgKiB0aGUgc3ltYm9sLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gZW5kIHN5bWJvbC5cbiAgICAgKi9cbiAgICAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZW5kU3ltYm9sO1xuICAgIH07XG5cbiAgICByZXR1cm4gJGludGVycG9sYXRlO1xuICB9XTtcbn1cblxuZnVuY3Rpb24gJEludGVydmFsUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckd2luZG93JywgJyRxJywgJyQkcScsXG4gICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkd2luZG93LCAgICRxLCAgICQkcSkge1xuICAgIHZhciBpbnRlcnZhbHMgPSB7fTtcblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAgKiBAbmFtZSAkaW50ZXJ2YWxcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldEludGVydmFsYC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgZXZlcnkgYGRlbGF5YFxuICAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICAqXG4gICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYW4gaW50ZXJ2YWwgZnVuY3Rpb24gaXMgYSBwcm9taXNlLiBUaGlzIHByb21pc2Ugd2lsbCBiZVxuICAgICAgKiBub3RpZmllZCB1cG9uIGVhY2ggdGljayBvZiB0aGUgaW50ZXJ2YWwsIGFuZCB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIGBjb3VudGAgaXRlcmF0aW9ucywgb3JcbiAgICAgICogcnVuIGluZGVmaW5pdGVseSBpZiBgY291bnRgIGlzIG5vdCBkZWZpbmVkLiBUaGUgdmFsdWUgb2YgdGhlIG5vdGlmaWNhdGlvbiB3aWxsIGJlIHRoZVxuICAgICAgKiBudW1iZXIgb2YgaXRlcmF0aW9ucyB0aGF0IGhhdmUgcnVuLlxuICAgICAgKiBUbyBjYW5jZWwgYW4gaW50ZXJ2YWwsIGNhbGwgYCRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSlgLlxuICAgICAgKlxuICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiRpbnRlcnZhbCNmbHVzaCBgJGludGVydmFsLmZsdXNoKG1pbGxpcylgfSB0b1xuICAgICAgKiBtb3ZlIGZvcndhcmQgYnkgYG1pbGxpc2AgbWlsbGlzZWNvbmRzIGFuZCB0cmlnZ2VyIGFueSBmdW5jdGlvbnMgc2NoZWR1bGVkIHRvIHJ1biBpbiB0aGF0XG4gICAgICAqIHRpbWUuXG4gICAgICAqXG4gICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICAqICoqTm90ZSoqOiBJbnRlcnZhbHMgY3JlYXRlZCBieSB0aGlzIHNlcnZpY2UgbXVzdCBiZSBleHBsaWNpdGx5IGRlc3Ryb3llZCB3aGVuIHlvdSBhcmUgZmluaXNoZWRcbiAgICAgICogd2l0aCB0aGVtLiAgSW4gcGFydGljdWxhciB0aGV5IGFyZSBub3QgYXV0b21hdGljYWxseSBkZXN0cm95ZWQgd2hlbiBhIGNvbnRyb2xsZXIncyBzY29wZSBvciBhXG4gICAgICAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQgYXJlIGRlc3Ryb3llZC5cbiAgICAgICogWW91IHNob3VsZCB0YWtlIHRoaXMgaW50byBjb25zaWRlcmF0aW9uIGFuZCBtYWtlIHN1cmUgdG8gYWx3YXlzIGNhbmNlbCB0aGUgaW50ZXJ2YWwgYXQgdGhlXG4gICAgICAqIGFwcHJvcHJpYXRlIG1vbWVudC4gIFNlZSB0aGUgZXhhbXBsZSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzIG9uIGhvdyBhbmQgd2hlbiB0byBkbyB0aGlzLlxuICAgICAgKiA8L2Rpdj5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCByZXBlYXRlZGx5LlxuICAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIGVhY2ggZnVuY3Rpb24gY2FsbC5cbiAgICAgICogQHBhcmFtIHtudW1iZXI9fSBbY291bnQ9MF0gTnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdC4gSWYgbm90IHNldCwgb3IgMCwgd2lsbCByZXBlYXRcbiAgICAgICogICBpbmRlZmluaXRlbHkuXG4gICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbnZva2VBcHBseT10cnVlXSBJZiBzZXQgdG8gYGZhbHNlYCBza2lwcyBtb2RlbCBkaXJ0eSBjaGVja2luZywgb3RoZXJ3aXNlXG4gICAgICAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLlxuICAgICAgKiBAcGFyYW0gey4uLio9fSBQYXNzIGFkZGl0aW9uYWwgcGFyYW1ldGVycyB0byB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24uXG4gICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2Ugd2hpY2ggd2lsbCBiZSBub3RpZmllZCBvbiBlYWNoIGl0ZXJhdGlvbi5cbiAgICAgICpcbiAgICAgICogQGV4YW1wbGVcbiAgICAgICogPGV4YW1wbGUgbW9kdWxlPVwiaW50ZXJ2YWxFeGFtcGxlXCI+XG4gICAgICAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAqICAgPHNjcmlwdD5cbiAgICAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdpbnRlcnZhbEV4YW1wbGUnLCBbXSlcbiAgICAgICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGludGVydmFsJyxcbiAgICAgICogICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRpbnRlcnZhbCkge1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmZvcm1hdCA9ICdNL2QveXkgaDptbTpzcyBhJztcbiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwO1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmJsb29kXzIgPSAxMjA7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICB2YXIgc3RvcDtcbiAgICAgICogICAgICAgICAgICRzY29wZS5maWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAvLyBEb24ndCBzdGFydCBhIG5ldyBmaWdodCBpZiB3ZSBhcmUgYWxyZWFkeSBmaWdodGluZ1xuICAgICAgKiAgICAgICAgICAgICBpZiAoIGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApICkgcmV0dXJuO1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgICBzdG9wID0gJGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYmxvb2RfMSA+IDAgJiYgJHNjb3BlLmJsb29kXzIgPiAwKSB7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9ICRzY29wZS5ibG9vZF8xIC0gMztcbiAgICAgICogICAgICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gJHNjb3BlLmJsb29kXzIgLSA0O1xuICAgICAgKiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0KCk7XG4gICAgICAqICAgICAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wKTtcbiAgICAgICogICAgICAgICAgICAgICBzdG9wID0gdW5kZWZpbmVkO1xuICAgICAgKiAgICAgICAgICAgICB9XG4gICAgICAqICAgICAgICAgICB9O1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgJHNjb3BlLnJlc2V0RmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgJHNjb3BlLmJsb29kXzEgPSAxMDA7XG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwO1xuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBpbnRlcnZhbCBpcyBkZXN0cm95ZWQgdG9vXG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQoKTtcbiAgICAgICogICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgIH1dKVxuICAgICAgKiAgICAgICAvLyBSZWdpc3RlciB0aGUgJ215Q3VycmVudFRpbWUnIGRpcmVjdGl2ZSBmYWN0b3J5IG1ldGhvZC5cbiAgICAgICogICAgICAgLy8gV2UgaW5qZWN0ICRpbnRlcnZhbCBhbmQgZGF0ZUZpbHRlciBzZXJ2aWNlIHNpbmNlIHRoZSBmYWN0b3J5IG1ldGhvZCBpcyBESS5cbiAgICAgICogICAgICAgLmRpcmVjdGl2ZSgnbXlDdXJyZW50VGltZScsIFsnJGludGVydmFsJywgJ2RhdGVGaWx0ZXInLFxuICAgICAgKiAgICAgICAgIGZ1bmN0aW9uKCRpbnRlcnZhbCwgZGF0ZUZpbHRlcikge1xuICAgICAgKiAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBkaXJlY3RpdmUgbGluayBmdW5jdGlvbi4gKGNvbXBpbGUgZnVuY3Rpb24gbm90IG5lZWRlZClcbiAgICAgICogICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICogICAgICAgICAgICAgdmFyIGZvcm1hdCwgIC8vIGRhdGUgZm9ybWF0XG4gICAgICAqICAgICAgICAgICAgICAgICBzdG9wVGltZTsgLy8gc28gdGhhdCB3ZSBjYW4gY2FuY2VsIHRoZSB0aW1lIHVwZGF0ZXNcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gdXNlZCB0byB1cGRhdGUgdGhlIFVJXG4gICAgICAqICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZWxlbWVudC50ZXh0KGRhdGVGaWx0ZXIobmV3IERhdGUoKSwgZm9ybWF0KSk7XG4gICAgICAqICAgICAgICAgICAgIH1cbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gd2F0Y2ggdGhlIGV4cHJlc3Npb24sIGFuZCB1cGRhdGUgdGhlIFVJIG9uIGNoYW5nZS5cbiAgICAgICogICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJzLm15Q3VycmVudFRpbWUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZm9ybWF0ID0gdmFsdWU7XG4gICAgICAqICAgICAgICAgICAgICAgdXBkYXRlVGltZSgpO1xuICAgICAgKiAgICAgICAgICAgICB9KTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgc3RvcFRpbWUgPSAkaW50ZXJ2YWwodXBkYXRlVGltZSwgMTAwMCk7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIC8vIGxpc3RlbiBvbiBET00gZGVzdHJveSAocmVtb3ZhbCkgZXZlbnQsIGFuZCBjYW5jZWwgdGhlIG5leHQgVUkgdXBkYXRlXG4gICAgICAqICAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgdXBkYXRpbmcgdGltZSBhZnRlciB0aGUgRE9NIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gICAgICAqICAgICAgICAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wVGltZSk7XG4gICAgICAqICAgICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgIH1dKTtcbiAgICAgICogICA8L3NjcmlwdD5cbiAgICAgICpcbiAgICAgICogICA8ZGl2PlxuICAgICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICogICAgICAgPGxhYmVsPkRhdGUgZm9ybWF0OiA8aW5wdXQgbmctbW9kZWw9XCJmb3JtYXRcIj48L2xhYmVsPiA8aHIvPlxuICAgICAgKiAgICAgICBDdXJyZW50IHRpbWUgaXM6IDxzcGFuIG15LWN1cnJlbnQtdGltZT1cImZvcm1hdFwiPjwvc3Bhbj5cbiAgICAgICogICAgICAgPGhyLz5cbiAgICAgICogICAgICAgQmxvb2QgMSA6IDxmb250IGNvbG9yPSdyZWQnPnt7Ymxvb2RfMX19PC9mb250PlxuICAgICAgKiAgICAgICBCbG9vZCAyIDogPGZvbnQgY29sb3I9J3JlZCc+e3tibG9vZF8yfX08L2ZvbnQ+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJmaWdodCgpXCI+RmlnaHQ8L2J1dHRvbj5cbiAgICAgICogICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1uZy1jbGljaz1cInN0b3BGaWdodCgpXCI+U3RvcEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJyZXNldEZpZ2h0KClcIj5yZXNldEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICA8L2Rpdj5cbiAgICAgICogICA8L2Rpdj5cbiAgICAgICpcbiAgICAgICogPC9maWxlPlxuICAgICAgKiA8L2V4YW1wbGU+XG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIGludGVydmFsKGZuLCBkZWxheSwgY291bnQsIGludm9rZUFwcGx5KSB7XG4gICAgICB2YXIgaGFzUGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQsXG4gICAgICAgICAgYXJncyA9IGhhc1BhcmFtcyA/IHNsaWNlQXJncyhhcmd1bWVudHMsIDQpIDogW10sXG4gICAgICAgICAgc2V0SW50ZXJ2YWwgPSAkd2luZG93LnNldEludGVydmFsLFxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwgPSAkd2luZG93LmNsZWFySW50ZXJ2YWwsXG4gICAgICAgICAgaXRlcmF0aW9uID0gMCxcbiAgICAgICAgICBza2lwQXBwbHkgPSAoaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHkpLFxuICAgICAgICAgIGRlZmVycmVkID0gKHNraXBBcHBseSA/ICQkcSA6ICRxKS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICBjb3VudCA9IGlzRGVmaW5lZChjb3VudCkgPyBjb3VudCA6IDA7XG5cbiAgICAgIHByb21pc2UudGhlbihudWxsLCBudWxsLCAoIWhhc1BhcmFtcykgPyBmbiA6IGZ1bmN0aW9uKCkge1xuICAgICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgIH0pO1xuXG4gICAgICBwcm9taXNlLiQkaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICAgIGRlZmVycmVkLm5vdGlmeShpdGVyYXRpb24rKyk7XG5cbiAgICAgICAgaWYgKGNvdW50ID4gMCAmJiBpdGVyYXRpb24gPj0gY291bnQpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGl0ZXJhdGlvbik7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7XG4gICAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcblxuICAgICAgfSwgZGVsYXkpO1xuXG4gICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdID0gZGVmZXJyZWQ7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICRpbnRlcnZhbCNjYW5jZWxcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIENhbmNlbHMgYSB0YXNrIGFzc29jaWF0ZWQgd2l0aCB0aGUgYHByb21pc2VgLlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge1Byb21pc2U9fSBwcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJGludGVydmFsYCBmdW5jdGlvbi5cbiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIHdhcyBzdWNjZXNzZnVsbHkgY2FuY2VsZWQuXG4gICAgICAqL1xuICAgIGludGVydmFsLmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCRpbnRlcnZhbElkIGluIGludGVydmFscykge1xuICAgICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdLnJlamVjdCgnY2FuY2VsZWQnKTtcbiAgICAgICAgJHdpbmRvdy5jbGVhckludGVydmFsKHByb21pc2UuJCRpbnRlcnZhbElkKTtcbiAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gaW50ZXJ2YWw7XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbG9jYWxlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAkbG9jYWxlIHNlcnZpY2UgcHJvdmlkZXMgbG9jYWxpemF0aW9uIHJ1bGVzIGZvciB2YXJpb3VzIEFuZ3VsYXIgY29tcG9uZW50cy4gQXMgb2YgcmlnaHQgbm93IHRoZVxuICogb25seSBwdWJsaWMgYXBpIGlzOlxuICpcbiAqICogYGlkYCDigJMgYHtzdHJpbmd9YCDigJMgbG9jYWxlIGlkIGZvcm1hdHRlZCBhcyBgbGFuZ3VhZ2VJZC1jb3VudHJ5SWRgIChlLmcuIGBlbi11c2ApXG4gKi9cblxudmFyIFBBVEhfTUFUQ0ggPSAvXihbXlxcPyNdKikoXFw/KFteI10qKSk/KCMoLiopKT8kLyxcbiAgICBERUZBVUxUX1BPUlRTID0geydodHRwJzogODAsICdodHRwcyc6IDQ0MywgJ2Z0cCc6IDIxfTtcbnZhciAkbG9jYXRpb25NaW5FcnIgPSBtaW5FcnIoJyRsb2NhdGlvbicpO1xuXG5cbi8qKlxuICogRW5jb2RlIHBhdGggdXNpbmcgZW5jb2RlVXJpU2VnbWVudCwgaWdub3JpbmcgZm9yd2FyZCBzbGFzaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byBlbmNvZGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcvJyksXG4gICAgICBpID0gc2VnbWVudHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBzZWdtZW50c1tpXSA9IGVuY29kZVVyaVNlZ21lbnQoc2VnbWVudHNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oJy8nKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VBYnNvbHV0ZVVybChhYnNvbHV0ZVVybCwgbG9jYXRpb25PYmopIHtcbiAgdmFyIHBhcnNlZFVybCA9IHVybFJlc29sdmUoYWJzb2x1dGVVcmwpO1xuXG4gIGxvY2F0aW9uT2JqLiQkcHJvdG9jb2wgPSBwYXJzZWRVcmwucHJvdG9jb2w7XG4gIGxvY2F0aW9uT2JqLiQkaG9zdCA9IHBhcnNlZFVybC5ob3N0bmFtZTtcbiAgbG9jYXRpb25PYmouJCRwb3J0ID0gdG9JbnQocGFyc2VkVXJsLnBvcnQpIHx8IERFRkFVTFRfUE9SVFNbcGFyc2VkVXJsLnByb3RvY29sXSB8fCBudWxsO1xufVxuXG5cbmZ1bmN0aW9uIHBhcnNlQXBwVXJsKHJlbGF0aXZlVXJsLCBsb2NhdGlvbk9iaikge1xuICB2YXIgcHJlZml4ZWQgPSAocmVsYXRpdmVVcmwuY2hhckF0KDApICE9PSAnLycpO1xuICBpZiAocHJlZml4ZWQpIHtcbiAgICByZWxhdGl2ZVVybCA9ICcvJyArIHJlbGF0aXZlVXJsO1xuICB9XG4gIHZhciBtYXRjaCA9IHVybFJlc29sdmUocmVsYXRpdmVVcmwpO1xuICBsb2NhdGlvbk9iai4kJHBhdGggPSBkZWNvZGVVUklDb21wb25lbnQocHJlZml4ZWQgJiYgbWF0Y2gucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycgP1xuICAgICAgbWF0Y2gucGF0aG5hbWUuc3Vic3RyaW5nKDEpIDogbWF0Y2gucGF0aG5hbWUpO1xuICBsb2NhdGlvbk9iai4kJHNlYXJjaCA9IHBhcnNlS2V5VmFsdWUobWF0Y2guc2VhcmNoKTtcbiAgbG9jYXRpb25PYmouJCRoYXNoID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoLmhhc2gpO1xuXG4gIC8vIG1ha2Ugc3VyZSBwYXRoIHN0YXJ0cyB3aXRoICcvJztcbiAgaWYgKGxvY2F0aW9uT2JqLiQkcGF0aCAmJiBsb2NhdGlvbk9iai4kJHBhdGguY2hhckF0KDApICE9ICcvJykge1xuICAgIGxvY2F0aW9uT2JqLiQkcGF0aCA9ICcvJyArIGxvY2F0aW9uT2JqLiQkcGF0aDtcbiAgfVxufVxuXG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiZWdpblxuICogQHBhcmFtIHtzdHJpbmd9IHdob2xlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZXR1cm5zIHRleHQgZnJvbSB3aG9sZSBhZnRlciBiZWdpbiBvciB1bmRlZmluZWQgaWYgaXQgZG9lcyBub3QgYmVnaW4gd2l0aFxuICogICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiZWdpbnNXaXRoKGJlZ2luLCB3aG9sZSkge1xuICBpZiAod2hvbGUuaW5kZXhPZihiZWdpbikgPT09IDApIHtcbiAgICByZXR1cm4gd2hvbGUuc3Vic3RyKGJlZ2luLmxlbmd0aCk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBpbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBpbmRleCA9PSAtMSA/IHVybCA6IHVybC5zdWJzdHIoMCwgaW5kZXgpO1xufVxuXG5mdW5jdGlvbiB0cmltRW1wdHlIYXNoKHVybCkge1xuICByZXR1cm4gdXJsLnJlcGxhY2UoLygjLispfCMkLywgJyQxJyk7XG59XG5cblxuZnVuY3Rpb24gc3RyaXBGaWxlKHVybCkge1xuICByZXR1cm4gdXJsLnN1YnN0cigwLCBzdHJpcEhhc2godXJsKS5sYXN0SW5kZXhPZignLycpICsgMSk7XG59XG5cbi8qIHJldHVybiB0aGUgc2VydmVyIG9ubHkgKHNjaGVtZTovL2hvc3Q6cG9ydCkgKi9cbmZ1bmN0aW9uIHNlcnZlckJhc2UodXJsKSB7XG4gIHJldHVybiB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCcvJywgdXJsLmluZGV4T2YoJy8vJykgKyAyKSk7XG59XG5cblxuLyoqXG4gKiBMb2NhdGlvbkh0bWw1VXJsIHJlcHJlc2VudHMgYW4gdXJsXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gSFRNTDUgbW9kZSBpcyBlbmFibGVkIGFuZCBzdXBwb3J0ZWRcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZU5vRmlsZSBhcHBsaWNhdGlvbiBiYXNlIFVSTCBzdHJpcHBlZCBvZiBhbnkgZmlsZW5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlUHJlZml4IHVybCBwYXRoIHByZWZpeFxuICovXG5mdW5jdGlvbiBMb2NhdGlvbkh0bWw1VXJsKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsIGJhc2VQcmVmaXgpIHtcbiAgdGhpcy4kJGh0bWw1ID0gdHJ1ZTtcbiAgYmFzZVByZWZpeCA9IGJhc2VQcmVmaXggfHwgJyc7XG4gIHBhcnNlQWJzb2x1dGVVcmwoYXBwQmFzZSwgdGhpcyk7XG5cblxuICAvKipcbiAgICogUGFyc2UgZ2l2ZW4gaHRtbDUgKHJlZ3VsYXIpIHVybCBzdHJpbmcgaW50byBwcm9wZXJ0aWVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSFRNTDUgdXJsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkcGFyc2UgPSBmdW5jdGlvbih1cmwpIHtcbiAgICB2YXIgcGF0aFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKTtcbiAgICBpZiAoIWlzU3RyaW5nKHBhdGhVcmwpKSB7XG4gICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2lwdGhwcmZ4JywgJ0ludmFsaWQgdXJsIFwiezB9XCIsIG1pc3NpbmcgcGF0aCBwcmVmaXggXCJ7MX1cIi4nLCB1cmwsXG4gICAgICAgICAgYXBwQmFzZU5vRmlsZSk7XG4gICAgfVxuXG4gICAgcGFyc2VBcHBVcmwocGF0aFVybCwgdGhpcyk7XG5cbiAgICBpZiAoIXRoaXMuJCRwYXRoKSB7XG4gICAgICB0aGlzLiQkcGF0aCA9ICcvJztcbiAgICB9XG5cbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb21wb3NlIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2VOb0ZpbGUgKyB0aGlzLiQkdXJsLnN1YnN0cigxKTsgLy8gZmlyc3QgY2hhciBpcyBhbHdheXMgJy8nXG4gIH07XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBsaW5rcyB0byBoYXNoIGZyYWdtZW50czpcbiAgICAgIC8vIGtlZXAgdGhlIG9sZCB1cmwgYW5kIG9ubHkgcmVwbGFjZSB0aGUgaGFzaCBmcmFnbWVudFxuICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBhcHBVcmwsIHByZXZBcHBVcmw7XG4gICAgdmFyIHJld3JpdHRlblVybDtcblxuICAgIGlmIChpc0RlZmluZWQoYXBwVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlLCB1cmwpKSkge1xuICAgICAgcHJldkFwcFVybCA9IGFwcFVybDtcbiAgICAgIGlmIChpc0RlZmluZWQoYXBwVXJsID0gYmVnaW5zV2l0aChiYXNlUHJlZml4LCBhcHBVcmwpKSkge1xuICAgICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlICsgKGJlZ2luc1dpdGgoJy8nLCBhcHBVcmwpIHx8IGFwcFVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlICsgcHJldkFwcFVybDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCkpKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlICsgYXBwVXJsO1xuICAgIH0gZWxzZSBpZiAoYXBwQmFzZU5vRmlsZSA9PSB1cmwgKyAnLycpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGU7XG4gICAgfVxuICAgIGlmIChyZXdyaXR0ZW5VcmwpIHtcbiAgICAgIHRoaXMuJCRwYXJzZShyZXdyaXR0ZW5VcmwpO1xuICAgIH1cbiAgICByZXR1cm4gISFyZXdyaXR0ZW5Vcmw7XG4gIH07XG59XG5cblxuLyoqXG4gKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgdXJsXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gZGV2ZWxvcGVyIGRvZXNuJ3Qgb3B0IGludG8gaHRtbDUgbW9kZS5cbiAqIEl0IGFsc28gc2VydmVzIGFzIHRoZSBiYXNlIGNsYXNzIGZvciBodG1sNSBtb2RlIGZhbGxiYWNrIG9uIGxlZ2FjeSBicm93c2Vycy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZU5vRmlsZSBhcHBsaWNhdGlvbiBiYXNlIFVSTCBzdHJpcHBlZCBvZiBhbnkgZmlsZW5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoUHJlZml4IGhhc2hiYW5nIHByZWZpeFxuICovXG5mdW5jdGlvbiBMb2NhdGlvbkhhc2hiYW5nVXJsKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsIGhhc2hQcmVmaXgpIHtcblxuICBwYXJzZUFic29sdXRlVXJsKGFwcEJhc2UsIHRoaXMpO1xuXG5cbiAgLyoqXG4gICAqIFBhcnNlIGdpdmVuIGhhc2hiYW5nIHVybCBpbnRvIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBIYXNoYmFuZyB1cmxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uKHVybCkge1xuICAgIHZhciB3aXRob3V0QmFzZVVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZSwgdXJsKSB8fCBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCk7XG4gICAgdmFyIHdpdGhvdXRIYXNoVXJsO1xuXG4gICAgaWYgKCFpc1VuZGVmaW5lZCh3aXRob3V0QmFzZVVybCkgJiYgd2l0aG91dEJhc2VVcmwuY2hhckF0KDApID09PSAnIycpIHtcblxuICAgICAgLy8gVGhlIHJlc3Qgb2YgdGhlIHVybCBzdGFydHMgd2l0aCBhIGhhc2ggc28gd2UgaGF2ZVxuICAgICAgLy8gZ290IGVpdGhlciBhIGhhc2hiYW5nIHBhdGggb3IgYSBwbGFpbiBoYXNoIGZyYWdtZW50XG4gICAgICB3aXRob3V0SGFzaFVybCA9IGJlZ2luc1dpdGgoaGFzaFByZWZpeCwgd2l0aG91dEJhc2VVcmwpO1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHdpdGhvdXRIYXNoVXJsKSkge1xuICAgICAgICAvLyBUaGVyZSB3YXMgbm8gaGFzaGJhbmcgcHJlZml4IHNvIHdlIGp1c3QgaGF2ZSBhIGhhc2ggZnJhZ21lbnRcbiAgICAgICAgd2l0aG91dEhhc2hVcmwgPSB3aXRob3V0QmFzZVVybDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGVyZSB3YXMgbm8gaGFzaGJhbmcgcGF0aCBub3IgaGFzaCBmcmFnbWVudDpcbiAgICAgIC8vIElmIHdlIGFyZSBpbiBIVE1MNSBtb2RlIHdlIHVzZSB3aGF0IGlzIGxlZnQgYXMgdGhlIHBhdGg7XG4gICAgICAvLyBPdGhlcndpc2Ugd2UgaWdub3JlIHdoYXQgaXMgbGVmdFxuICAgICAgaWYgKHRoaXMuJCRodG1sNSkge1xuICAgICAgICB3aXRob3V0SGFzaFVybCA9IHdpdGhvdXRCYXNlVXJsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2l0aG91dEhhc2hVcmwgPSAnJztcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHdpdGhvdXRCYXNlVXJsKSkge1xuICAgICAgICAgIGFwcEJhc2UgPSB1cmw7XG4gICAgICAgICAgdGhpcy5yZXBsYWNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZUFwcFVybCh3aXRob3V0SGFzaFVybCwgdGhpcyk7XG5cbiAgICB0aGlzLiQkcGF0aCA9IHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUodGhpcy4kJHBhdGgsIHdpdGhvdXRIYXNoVXJsLCBhcHBCYXNlKTtcblxuICAgIHRoaXMuJCRjb21wb3NlKCk7XG5cbiAgICAvKlxuICAgICAqIEluIFdpbmRvd3MsIG9uIGFuIGFuY2hvciBub2RlIG9uIGRvY3VtZW50cyBsb2FkZWQgZnJvbVxuICAgICAqIHRoZSBmaWxlc3lzdGVtLCB0aGUgYnJvd3NlciB3aWxsIHJldHVybiBhIHBhdGhuYW1lXG4gICAgICogcHJlZml4ZWQgd2l0aCB0aGUgZHJpdmUgbmFtZSAoJy9DOi9wYXRoJykgd2hlbiBhXG4gICAgICogcGF0aG5hbWUgd2l0aG91dCBhIGRyaXZlIGlzIHNldDpcbiAgICAgKiAgKiBhLnNldEF0dHJpYnV0ZSgnaHJlZicsICcvZm9vJylcbiAgICAgKiAgICogYS5wYXRobmFtZSA9PT0gJy9DOi9mb28nIC8vdHJ1ZVxuICAgICAqXG4gICAgICogSW5zaWRlIG9mIEFuZ3VsYXIsIHdlJ3JlIGFsd2F5cyB1c2luZyBwYXRobmFtZXMgdGhhdFxuICAgICAqIGRvIG5vdCBpbmNsdWRlIGRyaXZlIG5hbWVzIGZvciByb3V0aW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUocGF0aCwgdXJsLCBiYXNlKSB7XG4gICAgICAvKlxuICAgICAgTWF0Y2hlcyBwYXRocyBmb3IgZmlsZSBwcm90b2NvbCBvbiB3aW5kb3dzLFxuICAgICAgc3VjaCBhcyAvQzovZm9vL2JhciwgYW5kIGNhcHR1cmVzIG9ubHkgL2Zvby9iYXIuXG4gICAgICAqL1xuICAgICAgdmFyIHdpbmRvd3NGaWxlUGF0aEV4cCA9IC9eXFwvW0EtWl06KFxcLy4qKS87XG5cbiAgICAgIHZhciBmaXJzdFBhdGhTZWdtZW50TWF0Y2g7XG5cbiAgICAgIC8vR2V0IHRoZSByZWxhdGl2ZSBwYXRoIGZyb20gdGhlIGlucHV0IFVSTC5cbiAgICAgIGlmICh1cmwuaW5kZXhPZihiYXNlKSA9PT0gMCkge1xuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShiYXNlLCAnJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBpbnB1dCBVUkwgaW50ZW50aW9uYWxseSBjb250YWlucyBhIGZpcnN0IHBhdGggc2VnbWVudCB0aGF0IGVuZHMgd2l0aCBhIGNvbG9uLlxuICAgICAgaWYgKHdpbmRvd3NGaWxlUGF0aEV4cC5leGVjKHVybCkpIHtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9XG5cbiAgICAgIGZpcnN0UGF0aFNlZ21lbnRNYXRjaCA9IHdpbmRvd3NGaWxlUGF0aEV4cC5leGVjKHBhdGgpO1xuICAgICAgcmV0dXJuIGZpcnN0UGF0aFNlZ21lbnRNYXRjaCA/IGZpcnN0UGF0aFNlZ21lbnRNYXRjaFsxXSA6IHBhdGg7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDb21wb3NlIGhhc2hiYW5nIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2UgKyAodGhpcy4kJHVybCA/IGhhc2hQcmVmaXggKyB0aGlzLiQkdXJsIDogJycpO1xuICB9O1xuXG4gIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbih1cmwsIHJlbEhyZWYpIHtcbiAgICBpZiAoc3RyaXBIYXNoKGFwcEJhc2UpID09IHN0cmlwSGFzaCh1cmwpKSB7XG4gICAgICB0aGlzLiQkcGFyc2UodXJsKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59XG5cblxuLyoqXG4gKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgdXJsXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gaHRtbDUgaGlzdG9yeSBhcGkgaXMgZW5hYmxlZCBidXQgdGhlIGJyb3dzZXJcbiAqIGRvZXMgbm90IHN1cHBvcnQgaXQuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2VOb0ZpbGUgYXBwbGljYXRpb24gYmFzZSBVUkwgc3RyaXBwZWQgb2YgYW55IGZpbGVuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaFByZWZpeCBoYXNoYmFuZyBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwoYXBwQmFzZSwgYXBwQmFzZU5vRmlsZSwgaGFzaFByZWZpeCkge1xuICB0aGlzLiQkaHRtbDUgPSB0cnVlO1xuICBMb2NhdGlvbkhhc2hiYW5nVXJsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBsaW5rcyB0byBoYXNoIGZyYWdtZW50czpcbiAgICAgIC8vIGtlZXAgdGhlIG9sZCB1cmwgYW5kIG9ubHkgcmVwbGFjZSB0aGUgaGFzaCBmcmFnbWVudFxuICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJld3JpdHRlblVybDtcbiAgICB2YXIgYXBwVXJsO1xuXG4gICAgaWYgKGFwcEJhc2UgPT0gc3RyaXBIYXNoKHVybCkpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IHVybDtcbiAgICB9IGVsc2UgaWYgKChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCkpKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlICsgaGFzaFByZWZpeCArIGFwcFVybDtcbiAgICB9IGVsc2UgaWYgKGFwcEJhc2VOb0ZpbGUgPT09IHVybCArICcvJykge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZTtcbiAgICB9XG4gICAgaWYgKHJld3JpdHRlblVybCkge1xuICAgICAgdGhpcy4kJHBhcnNlKHJld3JpdHRlblVybCk7XG4gICAgfVxuICAgIHJldHVybiAhIXJld3JpdHRlblVybDtcbiAgfTtcblxuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgLy8gaW5jbHVkZSBoYXNoUHJlZml4IGluICQkYWJzVXJsIHdoZW4gJCR1cmwgaXMgZW1wdHkgc28gSUU5IGRvZXMgbm90IHJlbG9hZCBwYWdlIGJlY2F1c2Ugb2YgcmVtb3ZhbCBvZiAnIydcbiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZSArIGhhc2hQcmVmaXggKyB0aGlzLiQkdXJsO1xuICB9O1xuXG59XG5cblxudmFyIGxvY2F0aW9uUHJvdG90eXBlID0ge1xuXG4gIC8qKlxuICAgKiBBcmUgd2UgaW4gaHRtbDUgbW9kZT9cbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkaHRtbDU6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBIYXMgYW55IGNoYW5nZSBiZWVuIHJlcGxhY2luZz9cbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkcmVwbGFjZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI2Fic1VybFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBmdWxsIHVybCByZXByZXNlbnRhdGlvbiB3aXRoIGFsbCBzZWdtZW50cyBlbmNvZGVkIGFjY29yZGluZyB0byBydWxlcyBzcGVjaWZpZWQgaW5cbiAgICogW1JGQyAzOTg2XShodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCkuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgYWJzVXJsID0gJGxvY2F0aW9uLmFic1VybCgpO1xuICAgKiAvLyA9PiBcImh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gZnVsbCB1cmxcbiAgICovXG4gIGFic1VybDogbG9jYXRpb25HZXR0ZXIoJyQkYWJzVXJsJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3VybFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gdXJsIChlLmcuIGAvcGF0aD9hPWIjaGFzaGApIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHBhdGgsIHNlYXJjaCBhbmQgaGFzaCwgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciB1cmwgPSAkbG9jYXRpb24udXJsKCk7XG4gICAqIC8vID0+IFwiL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdXJsIE5ldyB1cmwgd2l0aG91dCBiYXNlIHByZWZpeCAoZS5nLiBgL3BhdGg/YT1iI2hhc2hgKVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgdXJsOiBmdW5jdGlvbih1cmwpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodXJsKSkge1xuICAgICAgcmV0dXJuIHRoaXMuJCR1cmw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoID0gUEFUSF9NQVRDSC5leGVjKHVybCk7XG4gICAgaWYgKG1hdGNoWzFdIHx8IHVybCA9PT0gJycpIHRoaXMucGF0aChkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pKTtcbiAgICBpZiAobWF0Y2hbMl0gfHwgbWF0Y2hbMV0gfHwgdXJsID09PSAnJykgdGhpcy5zZWFyY2gobWF0Y2hbM10gfHwgJycpO1xuICAgIHRoaXMuaGFzaChtYXRjaFs1XSB8fCAnJyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcHJvdG9jb2xcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgKlxuICAgKiBSZXR1cm4gcHJvdG9jb2wgb2YgY3VycmVudCB1cmwuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgcHJvdG9jb2wgPSAkbG9jYXRpb24ucHJvdG9jb2woKTtcbiAgICogLy8gPT4gXCJodHRwXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcHJvdG9jb2wgb2YgY3VycmVudCB1cmxcbiAgICovXG4gIHByb3RvY29sOiBsb2NhdGlvbkdldHRlcignJCRwcm90b2NvbCcpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNob3N0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIGhvc3Qgb2YgY3VycmVudCB1cmwuXG4gICAqXG4gICAqIE5vdGU6IGNvbXBhcmVkIHRvIHRoZSBub24tYW5ndWxhciB2ZXJzaW9uIGBsb2NhdGlvbi5ob3N0YCB3aGljaCByZXR1cm5zIGBob3N0bmFtZTpwb3J0YCwgdGhpcyByZXR1cm5zIHRoZSBgaG9zdG5hbWVgIHBvcnRpb24gb25seS5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBob3N0ID0gJGxvY2F0aW9uLmhvc3QoKTtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbVwiXG4gICAqXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vdXNlcjpwYXNzd29yZEBleGFtcGxlLmNvbTo4MDgwLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogaG9zdCA9ICRsb2NhdGlvbi5ob3N0KCk7XG4gICAqIC8vID0+IFwiZXhhbXBsZS5jb21cIlxuICAgKiBob3N0ID0gbG9jYXRpb24uaG9zdDtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbTo4MDgwXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gaG9zdCBvZiBjdXJyZW50IHVybC5cbiAgICovXG4gIGhvc3Q6IGxvY2F0aW9uR2V0dGVyKCckJGhvc3QnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcG9ydFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBwb3J0IG9mIGN1cnJlbnQgdXJsLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiB1cmwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHBvcnQgPSAkbG9jYXRpb24ucG9ydCgpO1xuICAgKiAvLyA9PiA4MFxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBwb3J0XG4gICAqL1xuICBwb3J0OiBsb2NhdGlvbkdldHRlcignJCRwb3J0JyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3BhdGhcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHBhdGggb2YgY3VycmVudCB1cmwgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2UgcGF0aCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKiBOb3RlOiBQYXRoIHNob3VsZCBhbHdheXMgYmVnaW4gd2l0aCBmb3J3YXJkIHNsYXNoICgvKSwgdGhpcyBtZXRob2Qgd2lsbCBhZGQgdGhlIGZvcndhcmQgc2xhc2hcbiAgICogaWYgaXQgaXMgbWlzc2luZy5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBwYXRoID0gJGxvY2F0aW9uLnBhdGgoKTtcbiAgICogLy8gPT4gXCIvc29tZS9wYXRoXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gcGF0aCBOZXcgcGF0aFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHBhdGhcbiAgICovXG4gIHBhdGg6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJHBhdGgnLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgcGF0aCA9IHBhdGggIT09IG51bGwgPyBwYXRoLnRvU3RyaW5nKCkgOiAnJztcbiAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNzZWFyY2hcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHNlYXJjaCBwYXJ0IChhcyBvYmplY3QpIG9mIGN1cnJlbnQgdXJsIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHNlYXJjaCBwYXJ0IHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgc2VhcmNoT2JqZWN0ID0gJGxvY2F0aW9uLnNlYXJjaCgpO1xuICAgKiAvLyA9PiB7Zm9vOiAnYmFyJywgYmF6OiAneG94byd9XG4gICAqXG4gICAqIC8vIHNldCBmb28gdG8gJ3lpcGVlJ1xuICAgKiAkbG9jYXRpb24uc2VhcmNoKCdmb28nLCAneWlwZWUnKTtcbiAgICogLy8gJGxvY2F0aW9uLnNlYXJjaCgpID0+IHtmb286ICd5aXBlZScsIGJhejogJ3hveG8nfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0LjxzdHJpbmc+fE9iamVjdC48QXJyYXkuPHN0cmluZz4+fSBzZWFyY2ggTmV3IHNlYXJjaCBwYXJhbXMgLSBzdHJpbmcgb3JcbiAgICogaGFzaCBvYmplY3QuXG4gICAqXG4gICAqIFdoZW4gY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgdGhlIG1ldGhvZCBhY3RzIGFzIGEgc2V0dGVyLCBzZXR0aW5nIHRoZSBgc2VhcmNoYCBjb21wb25lbnRcbiAgICogb2YgYCRsb2NhdGlvbmAgdG8gdGhlIHNwZWNpZmllZCB2YWx1ZS5cbiAgICpcbiAgICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgaGFzaCBvYmplY3QgY29udGFpbmluZyBhbiBhcnJheSBvZiB2YWx1ZXMsIHRoZXNlIHZhbHVlcyB3aWxsIGJlIGVuY29kZWRcbiAgICogYXMgZHVwbGljYXRlIHNlYXJjaCBwYXJhbWV0ZXJzIGluIHRoZSB1cmwuXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xOdW1iZXJ8QXJyYXk8c3RyaW5nPnxib29sZWFuKT19IHBhcmFtVmFsdWUgSWYgYHNlYXJjaGAgaXMgYSBzdHJpbmcgb3IgbnVtYmVyLCB0aGVuIGBwYXJhbVZhbHVlYFxuICAgKiB3aWxsIG92ZXJyaWRlIG9ubHkgYSBzaW5nbGUgc2VhcmNoIHByb3BlcnR5LlxuICAgKlxuICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYW4gYXJyYXksIGl0IHdpbGwgb3ZlcnJpZGUgdGhlIHByb3BlcnR5IG9mIHRoZSBgc2VhcmNoYCBjb21wb25lbnQgb2ZcbiAgICogYCRsb2NhdGlvbmAgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQuXG4gICAqXG4gICAqIElmIGBwYXJhbVZhbHVlYCBpcyBgbnVsbGAsIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGJlIGRlbGV0ZWQuXG4gICAqXG4gICAqIElmIGBwYXJhbVZhbHVlYCBpcyBgdHJ1ZWAsIHRoZSBwcm9wZXJ0eSBzcGVjaWZpZWQgdmlhIHRoZSBmaXJzdCBhcmd1bWVudCB3aWxsIGJlIGFkZGVkIHdpdGggbm9cbiAgICogdmFsdWUgbm9yIHRyYWlsaW5nIGVxdWFsIHNpZ24uXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH0gSWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgdGhlIHBhcnNlZCBgc2VhcmNoYCBvYmplY3QuIElmIGNhbGxlZCB3aXRoXG4gICAqIG9uZSBvciBtb3JlIGFyZ3VtZW50cyByZXR1cm5zIGAkbG9jYXRpb25gIG9iamVjdCBpdHNlbGYuXG4gICAqL1xuICBzZWFyY2g6IGZ1bmN0aW9uKHNlYXJjaCwgcGFyYW1WYWx1ZSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gdGhpcy4kJHNlYXJjaDtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaWYgKGlzU3RyaW5nKHNlYXJjaCkgfHwgaXNOdW1iZXIoc2VhcmNoKSkge1xuICAgICAgICAgIHNlYXJjaCA9IHNlYXJjaC50b1N0cmluZygpO1xuICAgICAgICAgIHRoaXMuJCRzZWFyY2ggPSBwYXJzZUtleVZhbHVlKHNlYXJjaCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoc2VhcmNoKSkge1xuICAgICAgICAgIHNlYXJjaCA9IGNvcHkoc2VhcmNoLCB7fSk7XG4gICAgICAgICAgLy8gcmVtb3ZlIG9iamVjdCB1bmRlZmluZWQgb3IgbnVsbCBwcm9wZXJ0aWVzXG4gICAgICAgICAgZm9yRWFjaChzZWFyY2gsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSBkZWxldGUgc2VhcmNoW2tleV07XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB0aGlzLiQkc2VhcmNoID0gc2VhcmNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignaXNyY2hhcmcnLFxuICAgICAgICAgICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBgJGxvY2F0aW9uI3NlYXJjaCgpYCBjYWxsIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHBhcmFtVmFsdWUpIHx8IHBhcmFtVmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy4kJHNlYXJjaFtzZWFyY2hdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJCRzZWFyY2hbc2VhcmNoXSA9IHBhcmFtVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNoYXNoXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybnMgdGhlIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQ2hhbmdlcyB0aGUgaGFzaCBmcmFnbWVudCB3aGVuIGNhbGxlZCB3aXRoIGEgcGFyYW1ldGVyIGFuZCByZXR1cm5zIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiB1cmwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG8jaGFzaFZhbHVlXG4gICAqIHZhciBoYXNoID0gJGxvY2F0aW9uLmhhc2goKTtcbiAgICogLy8gPT4gXCJoYXNoVmFsdWVcIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBoYXNoIE5ldyBoYXNoIGZyYWdtZW50XG4gICAqIEByZXR1cm4ge3N0cmluZ30gaGFzaFxuICAgKi9cbiAgaGFzaDogbG9jYXRpb25HZXR0ZXJTZXR0ZXIoJyQkaGFzaCcsIGZ1bmN0aW9uKGhhc2gpIHtcbiAgICByZXR1cm4gaGFzaCAhPT0gbnVsbCA/IGhhc2gudG9TdHJpbmcoKSA6ICcnO1xuICB9KSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcmVwbGFjZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSWYgY2FsbGVkLCBhbGwgY2hhbmdlcyB0byAkbG9jYXRpb24gZHVyaW5nIHRoZSBjdXJyZW50IGAkZGlnZXN0YCB3aWxsIHJlcGxhY2UgdGhlIGN1cnJlbnQgaGlzdG9yeVxuICAgKiByZWNvcmQsIGluc3RlYWQgb2YgYWRkaW5nIGEgbmV3IG9uZS5cbiAgICovXG4gIHJlcGxhY2U6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJCRyZXBsYWNlID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxuZm9yRWFjaChbTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwsIExvY2F0aW9uSGFzaGJhbmdVcmwsIExvY2F0aW9uSHRtbDVVcmxdLCBmdW5jdGlvbihMb2NhdGlvbikge1xuICBMb2NhdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGxvY2F0aW9uUHJvdG90eXBlKTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jc3RhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHRoZSBoaXN0b3J5IHN0YXRlIG9iamVjdCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSB0aGUgaGlzdG9yeSBzdGF0ZSBvYmplY3Qgd2hlbiBjYWxsZWQgd2l0aCBvbmUgcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqIFRoZSBzdGF0ZSBvYmplY3QgaXMgbGF0ZXIgcGFzc2VkIHRvIGBwdXNoU3RhdGVgIG9yIGByZXBsYWNlU3RhdGVgLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIG1ldGhvZCBpcyBzdXBwb3J0ZWQgb25seSBpbiBIVE1MNSBtb2RlIGFuZCBvbmx5IGluIGJyb3dzZXJzIHN1cHBvcnRpbmdcbiAgICogdGhlIEhUTUw1IEhpc3RvcnkgQVBJIChpLmUuIG1ldGhvZHMgYHB1c2hTdGF0ZWAgYW5kIGByZXBsYWNlU3RhdGVgKS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydFxuICAgKiBvbGRlciBicm93c2VycyAobGlrZSBJRTkgb3IgQW5kcm9pZCA8IDQuMCksIGRvbid0IHVzZSB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZSBTdGF0ZSBvYmplY3QgZm9yIHB1c2hTdGF0ZSBvciByZXBsYWNlU3RhdGVcbiAgICogQHJldHVybiB7b2JqZWN0fSBzdGF0ZVxuICAgKi9cbiAgTG9jYXRpb24ucHJvdG90eXBlLnN0YXRlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLiQkc3RhdGU7XG4gICAgfVxuXG4gICAgaWYgKExvY2F0aW9uICE9PSBMb2NhdGlvbkh0bWw1VXJsIHx8ICF0aGlzLiQkaHRtbDUpIHtcbiAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignbm9zdGF0ZScsICdIaXN0b3J5IEFQSSBzdGF0ZSBzdXBwb3J0IGlzIGF2YWlsYWJsZSBvbmx5ICcgK1xuICAgICAgICAnaW4gSFRNTDUgbW9kZSBhbmQgb25seSBpbiBicm93c2VycyBzdXBwb3J0aW5nIEhUTUw1IEhpc3RvcnkgQVBJJyk7XG4gICAgfVxuICAgIC8vIFRoZSB1c2VyIG1pZ2h0IG1vZGlmeSBgc3RhdGVPYmplY3RgIGFmdGVyIGludm9raW5nIGAkbG9jYXRpb24uc3RhdGUoc3RhdGVPYmplY3QpYFxuICAgIC8vIGJ1dCB3ZSdyZSBjaGFuZ2luZyB0aGUgJCRzdGF0ZSByZWZlcmVuY2UgdG8gJGJyb3dzZXIuc3RhdGUoKSBkdXJpbmcgdGhlICRkaWdlc3RcbiAgICAvLyBzbyB0aGUgbW9kaWZpY2F0aW9uIHdpbmRvdyBpcyBuYXJyb3cuXG4gICAgdGhpcy4kJHN0YXRlID0gaXNVbmRlZmluZWQoc3RhdGUpID8gbnVsbCA6IHN0YXRlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KTtcblxuXG5mdW5jdGlvbiBsb2NhdGlvbkdldHRlcihwcm9wZXJ0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNbcHJvcGVydHldO1xuICB9O1xufVxuXG5cbmZ1bmN0aW9uIGxvY2F0aW9uR2V0dGVyU2V0dGVyKHByb3BlcnR5LCBwcmVwcm9jZXNzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0aGlzW3Byb3BlcnR5XTtcbiAgICB9XG5cbiAgICB0aGlzW3Byb3BlcnR5XSA9IHByZXByb2Nlc3ModmFsdWUpO1xuICAgIHRoaXMuJCRjb21wb3NlKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbG9jYXRpb25cbiAqXG4gKiBAcmVxdWlyZXMgJHJvb3RFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgJGxvY2F0aW9uIHNlcnZpY2UgcGFyc2VzIHRoZSBVUkwgaW4gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIgKGJhc2VkIG9uIHRoZVxuICogW3dpbmRvdy5sb2NhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vd2luZG93LmxvY2F0aW9uKSkgYW5kIG1ha2VzIHRoZSBVUkxcbiAqIGF2YWlsYWJsZSB0byB5b3VyIGFwcGxpY2F0aW9uLiBDaGFuZ2VzIHRvIHRoZSBVUkwgaW4gdGhlIGFkZHJlc3MgYmFyIGFyZSByZWZsZWN0ZWQgaW50b1xuICogJGxvY2F0aW9uIHNlcnZpY2UgYW5kIGNoYW5nZXMgdG8gJGxvY2F0aW9uIGFyZSByZWZsZWN0ZWQgaW50byB0aGUgYnJvd3NlciBhZGRyZXNzIGJhci5cbiAqXG4gKiAqKlRoZSAkbG9jYXRpb24gc2VydmljZToqKlxuICpcbiAqIC0gRXhwb3NlcyB0aGUgY3VycmVudCBVUkwgaW4gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIsIHNvIHlvdSBjYW5cbiAqICAgLSBXYXRjaCBhbmQgb2JzZXJ2ZSB0aGUgVVJMLlxuICogICAtIENoYW5nZSB0aGUgVVJMLlxuICogLSBTeW5jaHJvbml6ZXMgdGhlIFVSTCB3aXRoIHRoZSBicm93c2VyIHdoZW4gdGhlIHVzZXJcbiAqICAgLSBDaGFuZ2VzIHRoZSBhZGRyZXNzIGJhci5cbiAqICAgLSBDbGlja3MgdGhlIGJhY2sgb3IgZm9yd2FyZCBidXR0b24gKG9yIGNsaWNrcyBhIEhpc3RvcnkgbGluaykuXG4gKiAgIC0gQ2xpY2tzIG9uIGEgbGluay5cbiAqIC0gUmVwcmVzZW50cyB0aGUgVVJMIG9iamVjdCBhcyBhIHNldCBvZiBtZXRob2RzIChwcm90b2NvbCwgaG9zdCwgcG9ydCwgcGF0aCwgc2VhcmNoLCBoYXNoKS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUge0BsaW5rIGd1aWRlLyRsb2NhdGlvbiBEZXZlbG9wZXIgR3VpZGU6IFVzaW5nICRsb2NhdGlvbn1cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoZSBgJGxvY2F0aW9uUHJvdmlkZXJgIHRvIGNvbmZpZ3VyZSBob3cgdGhlIGFwcGxpY2F0aW9uIGRlZXAgbGlua2luZyBwYXRocyBhcmUgc3RvcmVkLlxuICovXG5mdW5jdGlvbiAkTG9jYXRpb25Qcm92aWRlcigpIHtcbiAgdmFyIGhhc2hQcmVmaXggPSAnJyxcbiAgICAgIGh0bWw1TW9kZSA9IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHJlcXVpcmVCYXNlOiB0cnVlLFxuICAgICAgICByZXdyaXRlTGlua3M6IHRydWVcbiAgICAgIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXIjaGFzaFByZWZpeFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwcmVmaXggUHJlZml4IGZvciBoYXNoIHBhcnQgKGNvbnRhaW5pbmcgcGF0aCBhbmQgc2VhcmNoKVxuICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgKi9cbiAgdGhpcy5oYXNoUHJlZml4ID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgaWYgKGlzRGVmaW5lZChwcmVmaXgpKSB7XG4gICAgICBoYXNoUHJlZml4ID0gcHJlZml4O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBoYXNoUHJlZml4O1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlciNodG1sNU1vZGVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7KGJvb2xlYW58T2JqZWN0KT19IG1vZGUgSWYgYm9vbGVhbiwgc2V0cyBgaHRtbDVNb2RlLmVuYWJsZWRgIHRvIHZhbHVlLlxuICAgKiAgIElmIG9iamVjdCwgc2V0cyBgZW5hYmxlZGAsIGByZXF1aXJlQmFzZWAgYW5kIGByZXdyaXRlTGlua3NgIHRvIHJlc3BlY3RpdmUgdmFsdWVzLiBTdXBwb3J0ZWRcbiAgICogICBwcm9wZXJ0aWVzOlxuICAgKiAgIC0gKiplbmFibGVkKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyAoZGVmYXVsdDogZmFsc2UpIElmIHRydWUsIHdpbGwgcmVseSBvbiBgaGlzdG9yeS5wdXNoU3RhdGVgIHRvXG4gICAqICAgICBjaGFuZ2UgdXJscyB3aGVyZSBzdXBwb3J0ZWQuIFdpbGwgZmFsbCBiYWNrIHRvIGhhc2gtcHJlZml4ZWQgcGF0aHMgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3RcbiAgICogICAgIHN1cHBvcnQgYHB1c2hTdGF0ZWAuXG4gICAqICAgLSAqKnJlcXVpcmVCYXNlKiogLSBge2Jvb2xlYW59YCAtIChkZWZhdWx0OiBgdHJ1ZWApIFdoZW4gaHRtbDVNb2RlIGlzIGVuYWJsZWQsIHNwZWNpZmllc1xuICAgKiAgICAgd2hldGhlciBvciBub3QgYSA8YmFzZT4gdGFnIGlzIHJlcXVpcmVkIHRvIGJlIHByZXNlbnQuIElmIGBlbmFibGVkYCBhbmQgYHJlcXVpcmVCYXNlYCBhcmVcbiAgICogICAgIHRydWUsIGFuZCBhIGJhc2UgdGFnIGlzIG5vdCBwcmVzZW50LCBhbiBlcnJvciB3aWxsIGJlIHRocm93biB3aGVuIGAkbG9jYXRpb25gIGlzIGluamVjdGVkLlxuICAgKiAgICAgU2VlIHRoZSB7QGxpbmsgZ3VpZGUvJGxvY2F0aW9uICRsb2NhdGlvbiBndWlkZSBmb3IgbW9yZSBpbmZvcm1hdGlvbn1cbiAgICogICAtICoqcmV3cml0ZUxpbmtzKiogLSBge2Jvb2xlYW59YCAtIChkZWZhdWx0OiBgdHJ1ZWApIFdoZW4gaHRtbDVNb2RlIGlzIGVuYWJsZWQsXG4gICAqICAgICBlbmFibGVzL2Rpc2FibGVzIHVybCByZXdyaXRpbmcgZm9yIHJlbGF0aXZlIGxpbmtzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBodG1sNU1vZGUgb2JqZWN0IGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqL1xuICB0aGlzLmh0bWw1TW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHtcbiAgICBpZiAoaXNCb29sZWFuKG1vZGUpKSB7XG4gICAgICBodG1sNU1vZGUuZW5hYmxlZCA9IG1vZGU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG1vZGUpKSB7XG5cbiAgICAgIGlmIChpc0Jvb2xlYW4obW9kZS5lbmFibGVkKSkge1xuICAgICAgICBodG1sNU1vZGUuZW5hYmxlZCA9IG1vZGUuZW5hYmxlZDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQm9vbGVhbihtb2RlLnJlcXVpcmVCYXNlKSkge1xuICAgICAgICBodG1sNU1vZGUucmVxdWlyZUJhc2UgPSBtb2RlLnJlcXVpcmVCYXNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNCb29sZWFuKG1vZGUucmV3cml0ZUxpbmtzKSkge1xuICAgICAgICBodG1sNU1vZGUucmV3cml0ZUxpbmtzID0gbW9kZS5yZXdyaXRlTGlua3M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaHRtbDVNb2RlO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGV2ZW50XG4gICAqIEBuYW1lICRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdGFydFxuICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCcm9hZGNhc3RlZCBiZWZvcmUgYSBVUkwgd2lsbCBjaGFuZ2UuXG4gICAqXG4gICAqIFRoaXMgY2hhbmdlIGNhbiBiZSBwcmV2ZW50ZWQgYnkgY2FsbGluZ1xuICAgKiBgcHJldmVudERlZmF1bHRgIG1ldGhvZCBvZiB0aGUgZXZlbnQuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGZvciBtb3JlXG4gICAqIGRldGFpbHMgYWJvdXQgZXZlbnQgb2JqZWN0LiBVcG9uIHN1Y2Nlc3NmdWwgY2hhbmdlXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcyAkbG9jYXRpb25DaGFuZ2VTdWNjZXNzfSBpcyBmaXJlZC5cbiAgICpcbiAgICogVGhlIGBuZXdTdGF0ZWAgYW5kIGBvbGRTdGF0ZWAgcGFyYW1ldGVycyBtYXkgYmUgZGVmaW5lZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIHdoZW5cbiAgICogdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIEhUTUw1IEhpc3RvcnkgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmwgTmV3IFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFVybCBVUkwgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5ld1N0YXRlIE5ldyBoaXN0b3J5IHN0YXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFN0YXRlIEhpc3Rvcnkgc3RhdGUgb2JqZWN0IHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBldmVudFxuICAgKiBAbmFtZSAkbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc1xuICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCcm9hZGNhc3RlZCBhZnRlciBhIFVSTCB3YXMgY2hhbmdlZC5cbiAgICpcbiAgICogVGhlIGBuZXdTdGF0ZWAgYW5kIGBvbGRTdGF0ZWAgcGFyYW1ldGVycyBtYXkgYmUgZGVmaW5lZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIHdoZW5cbiAgICogdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIEhUTUw1IEhpc3RvcnkgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmwgTmV3IFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFVybCBVUkwgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5ld1N0YXRlIE5ldyBoaXN0b3J5IHN0YXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFN0YXRlIEhpc3Rvcnkgc3RhdGUgb2JqZWN0IHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICovXG5cbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRzbmlmZmVyJywgJyRyb290RWxlbWVudCcsICckd2luZG93JyxcbiAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICRicm93c2VyLCAkc25pZmZlciwgJHJvb3RFbGVtZW50LCAkd2luZG93KSB7XG4gICAgdmFyICRsb2NhdGlvbixcbiAgICAgICAgTG9jYXRpb25Nb2RlLFxuICAgICAgICBiYXNlSHJlZiA9ICRicm93c2VyLmJhc2VIcmVmKCksIC8vIGlmIGJhc2VbaHJlZl0gaXMgdW5kZWZpbmVkLCBpdCBkZWZhdWx0cyB0byAnJ1xuICAgICAgICBpbml0aWFsVXJsID0gJGJyb3dzZXIudXJsKCksXG4gICAgICAgIGFwcEJhc2U7XG5cbiAgICBpZiAoaHRtbDVNb2RlLmVuYWJsZWQpIHtcbiAgICAgIGlmICghYmFzZUhyZWYgJiYgaHRtbDVNb2RlLnJlcXVpcmVCYXNlKSB7XG4gICAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignbm9iYXNlJyxcbiAgICAgICAgICBcIiRsb2NhdGlvbiBpbiBIVE1MNSBtb2RlIHJlcXVpcmVzIGEgPGJhc2U+IHRhZyB0byBiZSBwcmVzZW50IVwiKTtcbiAgICAgIH1cbiAgICAgIGFwcEJhc2UgPSBzZXJ2ZXJCYXNlKGluaXRpYWxVcmwpICsgKGJhc2VIcmVmIHx8ICcvJyk7XG4gICAgICBMb2NhdGlvbk1vZGUgPSAkc25pZmZlci5oaXN0b3J5ID8gTG9jYXRpb25IdG1sNVVybCA6IExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcHBCYXNlID0gc3RyaXBIYXNoKGluaXRpYWxVcmwpO1xuICAgICAgTG9jYXRpb25Nb2RlID0gTG9jYXRpb25IYXNoYmFuZ1VybDtcbiAgICB9XG4gICAgdmFyIGFwcEJhc2VOb0ZpbGUgPSBzdHJpcEZpbGUoYXBwQmFzZSk7XG5cbiAgICAkbG9jYXRpb24gPSBuZXcgTG9jYXRpb25Nb2RlKGFwcEJhc2UsIGFwcEJhc2VOb0ZpbGUsICcjJyArIGhhc2hQcmVmaXgpO1xuICAgICRsb2NhdGlvbi4kJHBhcnNlTGlua1VybChpbml0aWFsVXJsLCBpbml0aWFsVXJsKTtcblxuICAgICRsb2NhdGlvbi4kJHN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcblxuICAgIHZhciBJR05PUkVfVVJJX1JFR0VYUCA9IC9eXFxzKihqYXZhc2NyaXB0fG1haWx0byk6L2k7XG5cbiAgICBmdW5jdGlvbiBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICAgIHZhciBvbGRVcmwgPSAkbG9jYXRpb24udXJsKCk7XG4gICAgICB2YXIgb2xkU3RhdGUgPSAkbG9jYXRpb24uJCRzdGF0ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgICRicm93c2VyLnVybCh1cmwsIHJlcGxhY2UsIHN0YXRlKTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgJGxvY2F0aW9uLnN0YXRlKCkgcmV0dXJucyByZWZlcmVudGlhbGx5IGlkZW50aWNhbCAobm90IGp1c3QgZGVlcGx5IGVxdWFsKVxuICAgICAgICAvLyBzdGF0ZSBvYmplY3Q7IHRoaXMgbWFrZXMgcG9zc2libGUgcXVpY2sgY2hlY2tpbmcgaWYgdGhlIHN0YXRlIGNoYW5nZWQgaW4gdGhlIGRpZ2VzdFxuICAgICAgICAvLyBsb29wLiBDaGVja2luZyBkZWVwIGVxdWFsaXR5IHdvdWxkIGJlIHRvbyBleHBlbnNpdmUuXG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gUmVzdG9yZSBvbGQgdmFsdWVzIGlmIHB1c2hTdGF0ZSBmYWlsc1xuICAgICAgICAkbG9jYXRpb24udXJsKG9sZFVybCk7XG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7XG5cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkcm9vdEVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIC8vIFRPRE8odm9qdGEpOiByZXdyaXRlIGxpbmsgd2hlbiBvcGVuaW5nIGluIG5ldyB0YWIvd2luZG93IChpbiBsZWdhY3kgYnJvd3NlcilcbiAgICAgIC8vIGN1cnJlbnRseSB3ZSBvcGVuIG5pY2UgdXJsIGxpbmsgYW5kIHJlZGlyZWN0IHRoZW5cblxuICAgICAgaWYgKCFodG1sNU1vZGUucmV3cml0ZUxpbmtzIHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSB8fCBldmVudC53aGljaCA9PSAyIHx8IGV2ZW50LmJ1dHRvbiA9PSAyKSByZXR1cm47XG5cbiAgICAgIHZhciBlbG0gPSBqcUxpdGUoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgLy8gdHJhdmVyc2UgdGhlIERPTSB1cCB0byBmaW5kIGZpcnN0IEEgdGFnXG4gICAgICB3aGlsZSAobm9kZU5hbWVfKGVsbVswXSkgIT09ICdhJykge1xuICAgICAgICAvLyBpZ25vcmUgcmV3cml0aW5nIGlmIG5vIEEgdGFnIChyZWFjaGVkIHJvb3QgZWxlbWVudCwgb3Igbm8gcGFyZW50IC0gcmVtb3ZlZCBmcm9tIGRvY3VtZW50KVxuICAgICAgICBpZiAoZWxtWzBdID09PSAkcm9vdEVsZW1lbnRbMF0gfHwgIShlbG0gPSBlbG0ucGFyZW50KCkpWzBdKSByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhYnNIcmVmID0gZWxtLnByb3AoJ2hyZWYnKTtcbiAgICAgIC8vIGdldCB0aGUgYWN0dWFsIGhyZWYgYXR0cmlidXRlIC0gc2VlXG4gICAgICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZGQzNDcxNDgodj12cy44NSkuYXNweFxuICAgICAgdmFyIHJlbEhyZWYgPSBlbG0uYXR0cignaHJlZicpIHx8IGVsbS5hdHRyKCd4bGluazpocmVmJyk7XG5cbiAgICAgIGlmIChpc09iamVjdChhYnNIcmVmKSAmJiBhYnNIcmVmLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IFNWR0FuaW1hdGVkU3RyaW5nXScpIHtcbiAgICAgICAgLy8gU1ZHQW5pbWF0ZWRTdHJpbmcuYW5pbVZhbCBzaG91bGQgYmUgaWRlbnRpY2FsIHRvIFNWR0FuaW1hdGVkU3RyaW5nLmJhc2VWYWwsIHVubGVzcyBkdXJpbmdcbiAgICAgICAgLy8gYW4gYW5pbWF0aW9uLlxuICAgICAgICBhYnNIcmVmID0gdXJsUmVzb2x2ZShhYnNIcmVmLmFuaW1WYWwpLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIC8vIElnbm9yZSB3aGVuIHVybCBpcyBzdGFydGVkIHdpdGggamF2YXNjcmlwdDogb3IgbWFpbHRvOlxuICAgICAgaWYgKElHTk9SRV9VUklfUkVHRVhQLnRlc3QoYWJzSHJlZikpIHJldHVybjtcblxuICAgICAgaWYgKGFic0hyZWYgJiYgIWVsbS5hdHRyKCd0YXJnZXQnKSAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgaWYgKCRsb2NhdGlvbi4kJHBhcnNlTGlua1VybChhYnNIcmVmLCByZWxIcmVmKSkge1xuICAgICAgICAgIC8vIFdlIGRvIGEgcHJldmVudERlZmF1bHQgZm9yIGFsbCB1cmxzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIGFuZ3VsYXIgYXBwbGljYXRpb24sXG4gICAgICAgICAgLy8gaW4gaHRtbDVtb2RlIGFuZCBhbHNvIHdpdGhvdXQsIHNvIHRoYXQgd2UgYXJlIGFibGUgdG8gYWJvcnQgbmF2aWdhdGlvbiB3aXRob3V0XG4gICAgICAgICAgLy8gZ2V0dGluZyBkb3VibGUgZW50cmllcyBpbiB0aGUgbG9jYXRpb24gaGlzdG9yeS5cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIC8vIHVwZGF0ZSBsb2NhdGlvbiBtYW51YWxseVxuICAgICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT0gJGJyb3dzZXIudXJsKCkpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICAvLyBoYWNrIHRvIHdvcmsgYXJvdW5kIEZGNiBidWcgNjg0MjA4IHdoZW4gc2NlbmFyaW8gcnVubmVyIGNsaWNrcyBvbiBsaW5rc1xuICAgICAgICAgICAgJHdpbmRvdy5hbmd1bGFyWydmZi02ODQyMDgtcHJldmVudERlZmF1bHQnXSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cblxuICAgIC8vIHJld3JpdGUgaGFzaGJhbmcgdXJsIDw+IGh0bWw1IHVybFxuICAgIGlmICh0cmltRW1wdHlIYXNoKCRsb2NhdGlvbi5hYnNVcmwoKSkgIT0gdHJpbUVtcHR5SGFzaChpbml0aWFsVXJsKSkge1xuICAgICAgJGJyb3dzZXIudXJsKCRsb2NhdGlvbi5hYnNVcmwoKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxpemluZyA9IHRydWU7XG5cbiAgICAvLyB1cGRhdGUgJGxvY2F0aW9uIHdoZW4gJGJyb3dzZXIgdXJsIGNoYW5nZXNcbiAgICAkYnJvd3Nlci5vblVybENoYW5nZShmdW5jdGlvbihuZXdVcmwsIG5ld1N0YXRlKSB7XG5cbiAgICAgIGlmIChpc1VuZGVmaW5lZChiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIG5ld1VybCkpKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBuYXZpZ2F0aW5nIG91dHNpZGUgb2YgdGhlIGFwcCB0aGVuIGZvcmNlIGEgcmVsb2FkXG4gICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9IG5ld1VybDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvbGRVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XG4gICAgICAgIHZhciBvbGRTdGF0ZSA9ICRsb2NhdGlvbi4kJHN0YXRlO1xuICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgbmV3VXJsID0gdHJpbUVtcHR5SGFzaChuZXdVcmwpO1xuICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShuZXdVcmwpO1xuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG5ld1N0YXRlO1xuXG4gICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbmV3VXJsLCBvbGRVcmwsXG4gICAgICAgICAgICBuZXdTdGF0ZSwgb2xkU3RhdGUpLmRlZmF1bHRQcmV2ZW50ZWQ7XG5cbiAgICAgICAgLy8gaWYgdGhlIGxvY2F0aW9uIHdhcyBjaGFuZ2VkIGJ5IGEgYCRsb2NhdGlvbkNoYW5nZVN0YXJ0YCBoYW5kbGVyIHRoZW4gc3RvcFxuICAgICAgICAvLyBwcm9jZXNzaW5nIHRoaXMgbG9jYXRpb24gY2hhbmdlXG4gICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT09IG5ld1VybCkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTtcbiAgICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG9sZFN0YXRlO1xuICAgICAgICAgIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sob2xkVXJsLCBmYWxzZSwgb2xkU3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIGJyb3dzZXJcbiAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiAkbG9jYXRpb25XYXRjaCgpIHtcbiAgICAgIHZhciBvbGRVcmwgPSB0cmltRW1wdHlIYXNoKCRicm93c2VyLnVybCgpKTtcbiAgICAgIHZhciBuZXdVcmwgPSB0cmltRW1wdHlIYXNoKCRsb2NhdGlvbi5hYnNVcmwoKSk7XG4gICAgICB2YXIgb2xkU3RhdGUgPSAkYnJvd3Nlci5zdGF0ZSgpO1xuICAgICAgdmFyIGN1cnJlbnRSZXBsYWNlID0gJGxvY2F0aW9uLiQkcmVwbGFjZTtcbiAgICAgIHZhciB1cmxPclN0YXRlQ2hhbmdlZCA9IG9sZFVybCAhPT0gbmV3VXJsIHx8XG4gICAgICAgICgkbG9jYXRpb24uJCRodG1sNSAmJiAkc25pZmZlci5oaXN0b3J5ICYmIG9sZFN0YXRlICE9PSAkbG9jYXRpb24uJCRzdGF0ZSk7XG5cbiAgICAgIGlmIChpbml0aWFsaXppbmcgfHwgdXJsT3JTdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG5cbiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBuZXdVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XG4gICAgICAgICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbmV3VXJsLCBvbGRVcmwsXG4gICAgICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlLCBvbGRTdGF0ZSkuZGVmYXVsdFByZXZlbnRlZDtcblxuICAgICAgICAgIC8vIGlmIHRoZSBsb2NhdGlvbiB3YXMgY2hhbmdlZCBieSBhIGAkbG9jYXRpb25DaGFuZ2VTdGFydGAgaGFuZGxlciB0aGVuIHN0b3BcbiAgICAgICAgICAvLyBwcm9jZXNzaW5nIHRoaXMgbG9jYXRpb24gY2hhbmdlXG4gICAgICAgICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPT0gbmV3VXJsKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTtcbiAgICAgICAgICAgICRsb2NhdGlvbi4kJHN0YXRlID0gb2xkU3RhdGU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh1cmxPclN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKG5ld1VybCwgY3VycmVudFJlcGxhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkU3RhdGUgPT09ICRsb2NhdGlvbi4kJHN0YXRlID8gbnVsbCA6ICRsb2NhdGlvbi4kJHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgJGxvY2F0aW9uLiQkcmVwbGFjZSA9IGZhbHNlO1xuXG4gICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIHJldHVybiBhbnl0aGluZyBiZWNhdXNlICRldmFsQXN5bmMgd2lsbCBtYWtlIHRoZSBkaWdlc3QgbG9vcCBkaXJ0eSB3aGVuXG4gICAgICAvLyB0aGVyZSBpcyBhIGNoYW5nZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuICRsb2NhdGlvbjtcblxuICAgIGZ1bmN0aW9uIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSkge1xuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgJGxvY2F0aW9uLmFic1VybCgpLCBvbGRVcmwsXG4gICAgICAgICRsb2NhdGlvbi4kJHN0YXRlLCBvbGRTdGF0ZSk7XG4gICAgfVxufV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRsb2dcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTaW1wbGUgc2VydmljZSBmb3IgbG9nZ2luZy4gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBzYWZlbHkgd3JpdGVzIHRoZSBtZXNzYWdlXG4gKiBpbnRvIHRoZSBicm93c2VyJ3MgY29uc29sZSAoaWYgcHJlc2VudCkuXG4gKlxuICogVGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIHNlcnZpY2UgaXMgdG8gc2ltcGxpZnkgZGVidWdnaW5nIGFuZCB0cm91Ymxlc2hvb3RpbmcuXG4gKlxuICogVGhlIGRlZmF1bHQgaXMgdG8gbG9nIGBkZWJ1Z2AgbWVzc2FnZXMuIFlvdSBjYW4gdXNlXG4gKiB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyIG5nLiRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWR9IHRvIGNoYW5nZSB0aGlzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJsb2dFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbG9nRXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0xvZ0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9nJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9nKSB7XG4gICAgICAgICAgICRzY29wZS4kbG9nID0gJGxvZztcbiAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSAnSGVsbG8gV29ybGQhJztcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkxvZ0NvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwPlJlbG9hZCB0aGlzIHBhZ2Ugd2l0aCBvcGVuIGNvbnNvbGUsIGVudGVyIHRleHQgYW5kIGhpdCB0aGUgbG9nIGJ1dHRvbi4uLjwvcD5cbiAgICAgICAgIDxsYWJlbD5NZXNzYWdlOlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtZXNzYWdlXCIgLz48L2xhYmVsPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cubG9nKG1lc3NhZ2UpXCI+bG9nPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy53YXJuKG1lc3NhZ2UpXCI+d2FybjwvYnV0dG9uPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cuaW5mbyhtZXNzYWdlKVwiPmluZm88L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmVycm9yKG1lc3NhZ2UpXCI+ZXJyb3I8L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmRlYnVnKG1lc3NhZ2UpXCI+ZGVidWc8L2J1dHRvbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkbG9nUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoZSBgJGxvZ1Byb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBsb2dzIG1lc3NhZ2VzXG4gKi9cbmZ1bmN0aW9uICRMb2dQcm92aWRlcigpIHtcbiAgdmFyIGRlYnVnID0gdHJ1ZSxcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWRcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGZsYWcgZW5hYmxlIG9yIGRpc2FibGUgZGVidWcgbGV2ZWwgbWVzc2FnZXNcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuZGVidWdFbmFibGVkID0gZnVuY3Rpb24oZmxhZykge1xuICAgIGlmIChpc0RlZmluZWQoZmxhZykpIHtcbiAgICAgIGRlYnVnID0gZmxhZztcbiAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRlYnVnO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbigkd2luZG93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNsb2dcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGEgbG9nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgbG9nOiBjb25zb2xlTG9nKCdsb2cnKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2luZm9cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGluZm9ybWF0aW9uIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgaW5mbzogY29uc29sZUxvZygnaW5mbycpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjd2FyblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSB3YXJuaW5nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgd2FybjogY29uc29sZUxvZygnd2FybicpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjZXJyb3JcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGVycm9yIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgZXJyb3I6IGNvbnNvbGVMb2coJ2Vycm9yJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNkZWJ1Z1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSBkZWJ1ZyBtZXNzYWdlXG4gICAgICAgKi9cbiAgICAgIGRlYnVnOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBmbiA9IGNvbnNvbGVMb2coJ2RlYnVnJyk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICAgICAgZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KCkpXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdEVycm9yKGFyZykge1xuICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGlmIChhcmcuc3RhY2spIHtcbiAgICAgICAgICBhcmcgPSAoYXJnLm1lc3NhZ2UgJiYgYXJnLnN0YWNrLmluZGV4T2YoYXJnLm1lc3NhZ2UpID09PSAtMSlcbiAgICAgICAgICAgICAgPyAnRXJyb3I6ICcgKyBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnN0YWNrXG4gICAgICAgICAgICAgIDogYXJnLnN0YWNrO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZy5zb3VyY2VVUkwpIHtcbiAgICAgICAgICBhcmcgPSBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnNvdXJjZVVSTCArICc6JyArIGFyZy5saW5lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnNvbGVMb2codHlwZSkge1xuICAgICAgdmFyIGNvbnNvbGUgPSAkd2luZG93LmNvbnNvbGUgfHwge30sXG4gICAgICAgICAgbG9nRm4gPSBjb25zb2xlW3R5cGVdIHx8IGNvbnNvbGUubG9nIHx8IG5vb3AsXG4gICAgICAgICAgaGFzQXBwbHkgPSBmYWxzZTtcblxuICAgICAgLy8gTm90ZTogcmVhZGluZyBsb2dGbi5hcHBseSB0aHJvd3MgYW4gZXJyb3IgaW4gSUUxMSBpbiBJRTggZG9jdW1lbnQgbW9kZS5cbiAgICAgIC8vIFRoZSByZWFzb24gYmVoaW5kIHRoaXMgaXMgdGhhdCBjb25zb2xlLmxvZyBoYXMgdHlwZSBcIm9iamVjdFwiIGluIElFOC4uLlxuICAgICAgdHJ5IHtcbiAgICAgICAgaGFzQXBwbHkgPSAhIWxvZ0ZuLmFwcGx5O1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgaWYgKGhhc0FwcGx5KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaChmb3JtYXRFcnJvcihhcmcpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gbG9nRm4uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIHdlIGFyZSBJRSB3aGljaCBlaXRoZXIgZG9lc24ndCBoYXZlIHdpbmRvdy5jb25zb2xlID0+IHRoaXMgaXMgbm9vcCBhbmQgd2UgZG8gbm90aGluZyxcbiAgICAgIC8vIG9yIHdlIGFyZSBJRSB3aGVyZSBjb25zb2xlLmxvZyBkb2Vzbid0IGhhdmUgYXBwbHkgc28gd2UgbG9nIGF0IGxlYXN0IGZpcnN0IDIgYXJnc1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFyZzEsIGFyZzIpIHtcbiAgICAgICAgbG9nRm4oYXJnMSwgYXJnMiA9PSBudWxsID8gJycgOiBhcmcyKTtcbiAgICAgIH07XG4gICAgfVxuICB9XTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2VzIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi9cblxudmFyICRwYXJzZU1pbkVyciA9IG1pbkVycignJHBhcnNlJyk7XG5cbi8vIFNhbmRib3hpbmcgQW5ndWxhciBFeHByZXNzaW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBbmd1bGFyIGV4cHJlc3Npb25zIGFyZSBnZW5lcmFsbHkgY29uc2lkZXJlZCBzYWZlIGJlY2F1c2UgdGhlc2UgZXhwcmVzc2lvbnMgb25seSBoYXZlIGRpcmVjdFxuLy8gYWNjZXNzIHRvIGAkc2NvcGVgIGFuZCBsb2NhbHMuIEhvd2V2ZXIsIG9uZSBjYW4gb2J0YWluIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IEpTIGNvZGUgYnlcbi8vIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byBuYXRpdmUgSlMgZnVuY3Rpb25zIHN1Y2ggYXMgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yLlxuLy9cbi8vIEFzIGFuIGV4YW1wbGUsIGNvbnNpZGVyIHRoZSBmb2xsb3dpbmcgQW5ndWxhciBleHByZXNzaW9uOlxuLy9cbi8vICAge30udG9TdHJpbmcuY29uc3RydWN0b3IoJ2FsZXJ0KFwiZXZpbCBKUyBjb2RlXCIpJylcbi8vXG4vLyBUaGlzIHNhbmRib3hpbmcgdGVjaG5pcXVlIGlzIG5vdCBwZXJmZWN0IGFuZCBkb2Vzbid0IGFpbSB0byBiZS4gVGhlIGdvYWwgaXMgdG8gcHJldmVudCBleHBsb2l0c1xuLy8gYWdhaW5zdCB0aGUgZXhwcmVzc2lvbiBsYW5ndWFnZSwgYnV0IG5vdCB0byBwcmV2ZW50IGV4cGxvaXRzIHRoYXQgd2VyZSBlbmFibGVkIGJ5IGV4cG9zaW5nXG4vLyBzZW5zaXRpdmUgSmF2YVNjcmlwdCBvciBicm93c2VyIEFQSXMgb24gU2NvcGUuIEV4cG9zaW5nIHN1Y2ggb2JqZWN0cyBvbiBhIFNjb3BlIGlzIG5ldmVyIGEgZ29vZFxuLy8gcHJhY3RpY2UgYW5kIHRoZXJlZm9yZSB3ZSBhcmUgbm90IGV2ZW4gdHJ5aW5nIHRvIHByb3RlY3QgYWdhaW5zdCBpbnRlcmFjdGlvbiB3aXRoIGFuIG9iamVjdFxuLy8gZXhwbGljaXRseSBleHBvc2VkIGluIHRoaXMgd2F5LlxuLy9cbi8vIEluIGdlbmVyYWwsIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBhY2Nlc3MgYSBXaW5kb3cgb2JqZWN0IGZyb20gYW4gYW5ndWxhciBleHByZXNzaW9uIHVubGVzcyBhXG4vLyB3aW5kb3cgb3Igc29tZSBET00gb2JqZWN0IHRoYXQgaGFzIGEgcmVmZXJlbmNlIHRvIHdpbmRvdyBpcyBwdWJsaXNoZWQgb250byBhIFNjb3BlLlxuLy8gU2ltaWxhcmx5IHdlIHByZXZlbnQgaW52b2NhdGlvbnMgb2YgZnVuY3Rpb24ga25vd24gdG8gYmUgZGFuZ2Vyb3VzLCBhcyB3ZWxsIGFzIGFzc2lnbm1lbnRzIHRvXG4vLyBuYXRpdmUgb2JqZWN0cy5cbi8vXG4vLyBTZWUgaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvZ3VpZGUvc2VjdXJpdHlcblxuXG5mdW5jdGlvbiBlbnN1cmVTYWZlTWVtYmVyTmFtZShuYW1lLCBmdWxsRXhwcmVzc2lvbikge1xuICBpZiAobmFtZSA9PT0gXCJfX2RlZmluZUdldHRlcl9fXCIgfHwgbmFtZSA9PT0gXCJfX2RlZmluZVNldHRlcl9fXCJcbiAgICAgIHx8IG5hbWUgPT09IFwiX19sb29rdXBHZXR0ZXJfX1wiIHx8IG5hbWUgPT09IFwiX19sb29rdXBTZXR0ZXJfX1wiXG4gICAgICB8fCBuYW1lID09PSBcIl9fcHJvdG9fX1wiKSB7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZmxkJyxcbiAgICAgICAgJ0F0dGVtcHRpbmcgdG8gYWNjZXNzIGEgZGlzYWxsb3dlZCBmaWVsZCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zISAnXG4gICAgICAgICsgJ0V4cHJlc3Npb246IHswfScsIGZ1bGxFeHByZXNzaW9uKTtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RyaW5nVmFsdWUobmFtZSwgZnVsbEV4cHJlc3Npb24pIHtcbiAgLy8gRnJvbSB0aGUgSmF2YVNjcmlwdCBkb2NzOlxuICAvLyBQcm9wZXJ0eSBuYW1lcyBtdXN0IGJlIHN0cmluZ3MuIFRoaXMgbWVhbnMgdGhhdCBub24tc3RyaW5nIG9iamVjdHMgY2Fubm90IGJlIHVzZWRcbiAgLy8gYXMga2V5cyBpbiBhbiBvYmplY3QuIEFueSBub24tc3RyaW5nIG9iamVjdCwgaW5jbHVkaW5nIGEgbnVtYmVyLCBpcyB0eXBlY2FzdGVkXG4gIC8vIGludG8gYSBzdHJpbmcgdmlhIHRoZSB0b1N0cmluZyBtZXRob2QuXG4gIC8vXG4gIC8vIFNvLCB0byBlbnN1cmUgdGhhdCB3ZSBhcmUgY2hlY2tpbmcgdGhlIHNhbWUgYG5hbWVgIHRoYXQgSmF2YVNjcmlwdCB3b3VsZCB1c2UsXG4gIC8vIHdlIGNhc3QgaXQgdG8gYSBzdHJpbmcsIGlmIHBvc3NpYmxlLlxuICAvLyBEb2luZyBgbmFtZSArICcnYCBjYW4gY2F1c2UgYSByZXBsIGVycm9yIGlmIHRoZSByZXN1bHQgdG8gYHRvU3RyaW5nYCBpcyBub3QgYSBzdHJpbmcsXG4gIC8vIHRoaXMgaXMsIHRoaXMgd2lsbCBoYW5kbGUgb2JqZWN0cyB0aGF0IG1pc2JlaGF2ZS5cbiAgbmFtZSA9IG5hbWUgKyAnJztcbiAgaWYgKCFpc1N0cmluZyhuYW1lKSkge1xuICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2NzdCcsXG4gICAgICAgICdDYW5ub3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlISAnXG4gICAgICAgICsgJ0V4cHJlc3Npb246IHswfScsIGZ1bGxFeHByZXNzaW9uKTtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlU2FmZU9iamVjdChvYmosIGZ1bGxFeHByZXNzaW9uKSB7XG4gIC8vIG5pZnR5IGNoZWNrIGlmIG9iaiBpcyBGdW5jdGlvbiB0aGF0IGlzIGZhc3QgYW5kIHdvcmtzIGFjcm9zcyBpZnJhbWVzIGFuZCBvdGhlciBjb250ZXh0c1xuICBpZiAob2JqKSB7XG4gICAgaWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gb2JqKSB7XG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNmbicsXG4gICAgICAgICAgJ1JlZmVyZW5jaW5nIEZ1bmN0aW9uIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JyxcbiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmICgvLyBpc1dpbmRvdyhvYmopXG4gICAgICAgIG9iai53aW5kb3cgPT09IG9iaikge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2Vjd2luZG93JyxcbiAgICAgICAgICAnUmVmZXJlbmNpbmcgdGhlIFdpbmRvdyBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgICAgZnVsbEV4cHJlc3Npb24pO1xuICAgIH0gZWxzZSBpZiAoLy8gaXNFbGVtZW50KG9iailcbiAgICAgICAgb2JqLmNoaWxkcmVuICYmIChvYmoubm9kZU5hbWUgfHwgKG9iai5wcm9wICYmIG9iai5hdHRyICYmIG9iai5maW5kKSkpIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2RvbScsXG4gICAgICAgICAgJ1JlZmVyZW5jaW5nIERPTSBub2RlcyBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgICAgZnVsbEV4cHJlc3Npb24pO1xuICAgIH0gZWxzZSBpZiAoLy8gYmxvY2sgT2JqZWN0IHNvIHRoYXQgd2UgY2FuJ3QgZ2V0IGhvbGQgb2YgZGFuZ2Vyb3VzIE9iamVjdC4qIG1ldGhvZHNcbiAgICAgICAgb2JqID09PSBPYmplY3QpIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY29iaicsXG4gICAgICAgICAgJ1JlZmVyZW5jaW5nIE9iamVjdCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgICAgZnVsbEV4cHJlc3Npb24pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG52YXIgQ0FMTCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xudmFyIEFQUExZID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xudmFyIEJJTkQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcblxuZnVuY3Rpb24gZW5zdXJlU2FmZUZ1bmN0aW9uKG9iaiwgZnVsbEV4cHJlc3Npb24pIHtcbiAgaWYgKG9iaikge1xuICAgIGlmIChvYmouY29uc3RydWN0b3IgPT09IG9iaikge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZm4nLFxuICAgICAgICAnUmVmZXJlbmNpbmcgRnVuY3Rpb24gaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLFxuICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmIChvYmogPT09IENBTEwgfHwgb2JqID09PSBBUFBMWSB8fCBvYmogPT09IEJJTkQpIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2ZmJyxcbiAgICAgICAgJ1JlZmVyZW5jaW5nIGNhbGwsIGFwcGx5IG9yIGJpbmQgaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLFxuICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVNhZmVBc3NpZ25Db250ZXh0KG9iaiwgZnVsbEV4cHJlc3Npb24pIHtcbiAgaWYgKG9iaikge1xuICAgIGlmIChvYmogPT09ICgwKS5jb25zdHJ1Y3RvciB8fCBvYmogPT09IChmYWxzZSkuY29uc3RydWN0b3IgfHwgb2JqID09PSAnJy5jb25zdHJ1Y3RvciB8fFxuICAgICAgICBvYmogPT09IHt9LmNvbnN0cnVjdG9yIHx8IG9iaiA9PT0gW10uY29uc3RydWN0b3IgfHwgb2JqID09PSBGdW5jdGlvbi5jb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjYWYnLFxuICAgICAgICAnQXNzaWduaW5nIHRvIGEgY29uc3RydWN0b3IgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JywgZnVsbEV4cHJlc3Npb24pO1xuICAgIH1cbiAgfVxufVxuXG52YXIgT1BFUkFUT1JTID0gY3JlYXRlTWFwKCk7XG5mb3JFYWNoKCcrIC0gKiAvICUgPT09ICE9PSA9PSAhPSA8ID4gPD0gPj0gJiYgfHwgISA9IHwnLnNwbGl0KCcgJyksIGZ1bmN0aW9uKG9wZXJhdG9yKSB7IE9QRVJBVE9SU1tvcGVyYXRvcl0gPSB0cnVlOyB9KTtcbnZhciBFU0NBUEUgPSB7XCJuXCI6XCJcXG5cIiwgXCJmXCI6XCJcXGZcIiwgXCJyXCI6XCJcXHJcIiwgXCJ0XCI6XCJcXHRcIiwgXCJ2XCI6XCJcXHZcIiwgXCInXCI6XCInXCIsICdcIic6J1wiJ307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTGV4ZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5MZXhlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBMZXhlcixcblxuICBsZXg6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIHRoaXMudG9rZW5zID0gW107XG5cbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgICBpZiAoY2ggPT09ICdcIicgfHwgY2ggPT09IFwiJ1wiKSB7XG4gICAgICAgIHRoaXMucmVhZFN0cmluZyhjaCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNOdW1iZXIoY2gpIHx8IGNoID09PSAnLicgJiYgdGhpcy5pc051bWJlcih0aGlzLnBlZWsoKSkpIHtcbiAgICAgICAgdGhpcy5yZWFkTnVtYmVyKCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNJZGVudChjaCkpIHtcbiAgICAgICAgdGhpcy5yZWFkSWRlbnQoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pcyhjaCwgJygpe31bXS4sOzo/JykpIHtcbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7aW5kZXg6IHRoaXMuaW5kZXgsIHRleHQ6IGNofSk7XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1doaXRlc3BhY2UoY2gpKSB7XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjaDIgPSBjaCArIHRoaXMucGVlaygpO1xuICAgICAgICB2YXIgY2gzID0gY2gyICsgdGhpcy5wZWVrKDIpO1xuICAgICAgICB2YXIgb3AxID0gT1BFUkFUT1JTW2NoXTtcbiAgICAgICAgdmFyIG9wMiA9IE9QRVJBVE9SU1tjaDJdO1xuICAgICAgICB2YXIgb3AzID0gT1BFUkFUT1JTW2NoM107XG4gICAgICAgIGlmIChvcDEgfHwgb3AyIHx8IG9wMykge1xuICAgICAgICAgIHZhciB0b2tlbiA9IG9wMyA/IGNoMyA6IChvcDIgPyBjaDIgOiBjaCk7XG4gICAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7aW5kZXg6IHRoaXMuaW5kZXgsIHRleHQ6IHRva2VuLCBvcGVyYXRvcjogdHJ1ZX0pO1xuICAgICAgICAgIHRoaXMuaW5kZXggKz0gdG9rZW4ubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignVW5leHBlY3RlZCBuZXh0IGNoYXJhY3RlciAnLCB0aGlzLmluZGV4LCB0aGlzLmluZGV4ICsgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudG9rZW5zO1xuICB9LFxuXG4gIGlzOiBmdW5jdGlvbihjaCwgY2hhcnMpIHtcbiAgICByZXR1cm4gY2hhcnMuaW5kZXhPZihjaCkgIT09IC0xO1xuICB9LFxuXG4gIHBlZWs6IGZ1bmN0aW9uKGkpIHtcbiAgICB2YXIgbnVtID0gaSB8fCAxO1xuICAgIHJldHVybiAodGhpcy5pbmRleCArIG51bSA8IHRoaXMudGV4dC5sZW5ndGgpID8gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4ICsgbnVtKSA6IGZhbHNlO1xuICB9LFxuXG4gIGlzTnVtYmVyOiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiAoJzAnIDw9IGNoICYmIGNoIDw9ICc5JykgJiYgdHlwZW9mIGNoID09PSBcInN0cmluZ1wiO1xuICB9LFxuXG4gIGlzV2hpdGVzcGFjZTogZnVuY3Rpb24oY2gpIHtcbiAgICAvLyBJRSB0cmVhdHMgbm9uLWJyZWFraW5nIHNwYWNlIGFzIFxcdTAwQTBcbiAgICByZXR1cm4gKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHInIHx8IGNoID09PSAnXFx0JyB8fFxuICAgICAgICAgICAgY2ggPT09ICdcXG4nIHx8IGNoID09PSAnXFx2JyB8fCBjaCA9PT0gJ1xcdTAwQTAnKTtcbiAgfSxcblxuICBpc0lkZW50OiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiAoJ2EnIDw9IGNoICYmIGNoIDw9ICd6JyB8fFxuICAgICAgICAgICAgJ0EnIDw9IGNoICYmIGNoIDw9ICdaJyB8fFxuICAgICAgICAgICAgJ18nID09PSBjaCB8fCBjaCA9PT0gJyQnKTtcbiAgfSxcblxuICBpc0V4cE9wZXJhdG9yOiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnIHx8IHRoaXMuaXNOdW1iZXIoY2gpKTtcbiAgfSxcblxuICB0aHJvd0Vycm9yOiBmdW5jdGlvbihlcnJvciwgc3RhcnQsIGVuZCkge1xuICAgIGVuZCA9IGVuZCB8fCB0aGlzLmluZGV4O1xuICAgIHZhciBjb2xTdHIgPSAoaXNEZWZpbmVkKHN0YXJ0KVxuICAgICAgICAgICAgPyAncyAnICsgc3RhcnQgKyAgJy0nICsgdGhpcy5pbmRleCArICcgWycgKyB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpICsgJ10nXG4gICAgICAgICAgICA6ICcgJyArIGVuZCk7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdsZXhlcnInLCAnTGV4ZXIgRXJyb3I6IHswfSBhdCBjb2x1bW57MX0gaW4gZXhwcmVzc2lvbiBbezJ9XS4nLFxuICAgICAgICBlcnJvciwgY29sU3RyLCB0aGlzLnRleHQpO1xuICB9LFxuXG4gIHJlYWROdW1iZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBudW1iZXIgPSAnJztcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gbG93ZXJjYXNlKHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCkpO1xuICAgICAgaWYgKGNoID09ICcuJyB8fCB0aGlzLmlzTnVtYmVyKGNoKSkge1xuICAgICAgICBudW1iZXIgKz0gY2g7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcGVla0NoID0gdGhpcy5wZWVrKCk7XG4gICAgICAgIGlmIChjaCA9PSAnZScgJiYgdGhpcy5pc0V4cE9wZXJhdG9yKHBlZWtDaCkpIHtcbiAgICAgICAgICBudW1iZXIgKz0gY2g7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0V4cE9wZXJhdG9yKGNoKSAmJlxuICAgICAgICAgICAgcGVla0NoICYmIHRoaXMuaXNOdW1iZXIocGVla0NoKSAmJlxuICAgICAgICAgICAgbnVtYmVyLmNoYXJBdChudW1iZXIubGVuZ3RoIC0gMSkgPT0gJ2UnKSB7XG4gICAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHBPcGVyYXRvcihjaCkgJiZcbiAgICAgICAgICAgICghcGVla0NoIHx8ICF0aGlzLmlzTnVtYmVyKHBlZWtDaCkpICYmXG4gICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PSAnZScpIHtcbiAgICAgICAgICB0aGlzLnRocm93RXJyb3IoJ0ludmFsaWQgZXhwb25lbnQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5pbmRleCsrO1xuICAgIH1cbiAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgIHRleHQ6IG51bWJlcixcbiAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgdmFsdWU6IE51bWJlcihudW1iZXIpXG4gICAgfSk7XG4gIH0sXG5cbiAgcmVhZElkZW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtcbiAgICAgIGlmICghKHRoaXMuaXNJZGVudChjaCkgfHwgdGhpcy5pc051bWJlcihjaCkpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5pbmRleCsrO1xuICAgIH1cbiAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgIHRleHQ6IHRoaXMudGV4dC5zbGljZShzdGFydCwgdGhpcy5pbmRleCksXG4gICAgICBpZGVudGlmaWVyOiB0cnVlXG4gICAgfSk7XG4gIH0sXG5cbiAgcmVhZFN0cmluZzogZnVuY3Rpb24ocXVvdGUpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHRoaXMuaW5kZXgrKztcbiAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgdmFyIHJhd1N0cmluZyA9IHF1b3RlO1xuICAgIHZhciBlc2NhcGUgPSBmYWxzZTtcbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgICByYXdTdHJpbmcgKz0gY2g7XG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIGlmIChjaCA9PT0gJ3UnKSB7XG4gICAgICAgICAgdmFyIGhleCA9IHRoaXMudGV4dC5zdWJzdHJpbmcodGhpcy5pbmRleCArIDEsIHRoaXMuaW5kZXggKyA1KTtcbiAgICAgICAgICBpZiAoIWhleC5tYXRjaCgvW1xcZGEtZl17NH0vaSkpIHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSW52YWxpZCB1bmljb2RlIGVzY2FwZSBbXFxcXHUnICsgaGV4ICsgJ10nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pbmRleCArPSA0O1xuICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleCwgMTYpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcmVwID0gRVNDQVBFW2NoXTtcbiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAocmVwIHx8IGNoKTtcbiAgICAgICAgfVxuICAgICAgICBlc2NhcGUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXFxcJykge1xuICAgICAgICBlc2NhcGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gcXVvdGUpIHtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICBpbmRleDogc3RhcnQsXG4gICAgICAgICAgdGV4dDogcmF3U3RyaW5nLFxuICAgICAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiBzdHJpbmdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmluZyArPSBjaDtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXgrKztcbiAgICB9XG4gICAgdGhpcy50aHJvd0Vycm9yKCdVbnRlcm1pbmF0ZWQgcXVvdGUnLCBzdGFydCk7XG4gIH1cbn07XG5cbnZhciBBU1QgPSBmdW5jdGlvbihsZXhlciwgb3B0aW9ucykge1xuICB0aGlzLmxleGVyID0gbGV4ZXI7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5BU1QuUHJvZ3JhbSA9ICdQcm9ncmFtJztcbkFTVC5FeHByZXNzaW9uU3RhdGVtZW50ID0gJ0V4cHJlc3Npb25TdGF0ZW1lbnQnO1xuQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uID0gJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJztcbkFTVC5Db25kaXRpb25hbEV4cHJlc3Npb24gPSAnQ29uZGl0aW9uYWxFeHByZXNzaW9uJztcbkFTVC5Mb2dpY2FsRXhwcmVzc2lvbiA9ICdMb2dpY2FsRXhwcmVzc2lvbic7XG5BU1QuQmluYXJ5RXhwcmVzc2lvbiA9ICdCaW5hcnlFeHByZXNzaW9uJztcbkFTVC5VbmFyeUV4cHJlc3Npb24gPSAnVW5hcnlFeHByZXNzaW9uJztcbkFTVC5DYWxsRXhwcmVzc2lvbiA9ICdDYWxsRXhwcmVzc2lvbic7XG5BU1QuTWVtYmVyRXhwcmVzc2lvbiA9ICdNZW1iZXJFeHByZXNzaW9uJztcbkFTVC5JZGVudGlmaWVyID0gJ0lkZW50aWZpZXInO1xuQVNULkxpdGVyYWwgPSAnTGl0ZXJhbCc7XG5BU1QuQXJyYXlFeHByZXNzaW9uID0gJ0FycmF5RXhwcmVzc2lvbic7XG5BU1QuUHJvcGVydHkgPSAnUHJvcGVydHknO1xuQVNULk9iamVjdEV4cHJlc3Npb24gPSAnT2JqZWN0RXhwcmVzc2lvbic7XG5BU1QuVGhpc0V4cHJlc3Npb24gPSAnVGhpc0V4cHJlc3Npb24nO1xuXG4vLyBJbnRlcm5hbCB1c2Ugb25seVxuQVNULk5HVmFsdWVQYXJhbWV0ZXIgPSAnTkdWYWx1ZVBhcmFtZXRlcic7XG5cbkFTVC5wcm90b3R5cGUgPSB7XG4gIGFzdDogZnVuY3Rpb24odGV4dCkge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy50b2tlbnMgPSB0aGlzLmxleGVyLmxleCh0ZXh0KTtcblxuICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvZ3JhbSgpO1xuXG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBhbiB1bmV4cGVjdGVkIHRva2VuJywgdGhpcy50b2tlbnNbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcblxuICBwcm9ncmFtOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm9keSA9IFtdO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID4gMCAmJiAhdGhpcy5wZWVrKCd9JywgJyknLCAnOycsICddJykpXG4gICAgICAgIGJvZHkucHVzaCh0aGlzLmV4cHJlc3Npb25TdGF0ZW1lbnQoKSk7XG4gICAgICBpZiAoIXRoaXMuZXhwZWN0KCc7JykpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogQVNULlByb2dyYW0sIGJvZHk6IGJvZHl9O1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBleHByZXNzaW9uU3RhdGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geyB0eXBlOiBBU1QuRXhwcmVzc2lvblN0YXRlbWVudCwgZXhwcmVzc2lvbjogdGhpcy5maWx0ZXJDaGFpbigpIH07XG4gIH0sXG5cbiAgZmlsdGVyQ2hhaW46IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnfCcpKSkge1xuICAgICAgbGVmdCA9IHRoaXMuZmlsdGVyKGxlZnQpO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBleHByZXNzaW9uOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hc3NpZ25tZW50KCk7XG4gIH0sXG5cbiAgYXNzaWdubWVudDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMudGVybmFyeSgpO1xuICAgIGlmICh0aGlzLmV4cGVjdCgnPScpKSB7XG4gICAgICByZXN1bHQgPSB7IHR5cGU6IEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbiwgbGVmdDogcmVzdWx0LCByaWdodDogdGhpcy5hc3NpZ25tZW50KCksIG9wZXJhdG9yOiAnPSd9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuXG4gIHRlcm5hcnk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ZXN0ID0gdGhpcy5sb2dpY2FsT1IoKTtcbiAgICB2YXIgYWx0ZXJuYXRlO1xuICAgIHZhciBjb25zZXF1ZW50O1xuICAgIGlmICh0aGlzLmV4cGVjdCgnPycpKSB7XG4gICAgICBhbHRlcm5hdGUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgIGlmICh0aGlzLmNvbnN1bWUoJzonKSkge1xuICAgICAgICBjb25zZXF1ZW50ID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb24sIHRlc3Q6IHRlc3QsIGFsdGVybmF0ZTogYWx0ZXJuYXRlLCBjb25zZXF1ZW50OiBjb25zZXF1ZW50fTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRlc3Q7XG4gIH0sXG5cbiAgbG9naWNhbE9SOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMubG9naWNhbEFORCgpO1xuICAgIHdoaWxlICh0aGlzLmV4cGVjdCgnfHwnKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkxvZ2ljYWxFeHByZXNzaW9uLCBvcGVyYXRvcjogJ3x8JywgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMubG9naWNhbEFORCgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIGxvZ2ljYWxBTkQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5lcXVhbGl0eSgpO1xuICAgIHdoaWxlICh0aGlzLmV4cGVjdCgnJiYnKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkxvZ2ljYWxFeHByZXNzaW9uLCBvcGVyYXRvcjogJyYmJywgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMuZXF1YWxpdHkoKX07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIGVxdWFsaXR5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMucmVsYXRpb25hbCgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJz09JywnIT0nLCc9PT0nLCchPT0nKSkpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMucmVsYXRpb25hbCgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIHJlbGF0aW9uYWw6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5hZGRpdGl2ZSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJzwnLCAnPicsICc8PScsICc+PScpKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkJpbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy5hZGRpdGl2ZSgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIGFkZGl0aXZlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMubXVsdGlwbGljYXRpdmUoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCcrJywnLScpKSkge1xuICAgICAgbGVmdCA9IHsgdHlwZTogQVNULkJpbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBsZWZ0OiBsZWZ0LCByaWdodDogdGhpcy5tdWx0aXBsaWNhdGl2ZSgpIH07XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIG11bHRpcGxpY2F0aXZlOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMudW5hcnkoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCcqJywnLycsJyUnKSkpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMudW5hcnkoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICB1bmFyeTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRva2VuO1xuICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKycsICctJywgJyEnKSkpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IEFTVC5VbmFyeUV4cHJlc3Npb24sIG9wZXJhdG9yOiB0b2tlbi50ZXh0LCBwcmVmaXg6IHRydWUsIGFyZ3VtZW50OiB0aGlzLnVuYXJ5KCkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucHJpbWFyeSgpO1xuICAgIH1cbiAgfSxcblxuICBwcmltYXJ5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJpbWFyeTtcbiAgICBpZiAodGhpcy5leHBlY3QoJygnKSkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuZmlsdGVyQ2hhaW4oKTtcbiAgICAgIHRoaXMuY29uc3VtZSgnKScpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5leHBlY3QoJ1snKSkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuYXJyYXlEZWNsYXJhdGlvbigpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5leHBlY3QoJ3snKSkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMub2JqZWN0KCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbnN0YW50cy5oYXNPd25Qcm9wZXJ0eSh0aGlzLnBlZWsoKS50ZXh0KSkge1xuICAgICAgcHJpbWFyeSA9IGNvcHkodGhpcy5jb25zdGFudHNbdGhpcy5jb25zdW1lKCkudGV4dF0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuaWRlbnRpZmllcikge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuaWRlbnRpZmllcigpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuY29uc3RhbnQpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmNvbnN0YW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignbm90IGEgcHJpbWFyeSBleHByZXNzaW9uJywgdGhpcy5wZWVrKCkpO1xuICAgIH1cblxuICAgIHZhciBuZXh0O1xuICAgIHdoaWxlICgobmV4dCA9IHRoaXMuZXhwZWN0KCcoJywgJ1snLCAnLicpKSkge1xuICAgICAgaWYgKG5leHQudGV4dCA9PT0gJygnKSB7XG4gICAgICAgIHByaW1hcnkgPSB7dHlwZTogQVNULkNhbGxFeHByZXNzaW9uLCBjYWxsZWU6IHByaW1hcnksIGFyZ3VtZW50czogdGhpcy5wYXJzZUFyZ3VtZW50cygpIH07XG4gICAgICAgIHRoaXMuY29uc3VtZSgnKScpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICdbJykge1xuICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTWVtYmVyRXhwcmVzc2lvbiwgb2JqZWN0OiBwcmltYXJ5LCBwcm9wZXJ0eTogdGhpcy5leHByZXNzaW9uKCksIGNvbXB1dGVkOiB0cnVlIH07XG4gICAgICAgIHRoaXMuY29uc3VtZSgnXScpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICcuJykge1xuICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTWVtYmVyRXhwcmVzc2lvbiwgb2JqZWN0OiBwcmltYXJ5LCBwcm9wZXJ0eTogdGhpcy5pZGVudGlmaWVyKCksIGNvbXB1dGVkOiBmYWxzZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJTVBPU1NJQkxFJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcmltYXJ5O1xuICB9LFxuXG4gIGZpbHRlcjogZnVuY3Rpb24oYmFzZUV4cHJlc3Npb24pIHtcbiAgICB2YXIgYXJncyA9IFtiYXNlRXhwcmVzc2lvbl07XG4gICAgdmFyIHJlc3VsdCA9IHt0eXBlOiBBU1QuQ2FsbEV4cHJlc3Npb24sIGNhbGxlZTogdGhpcy5pZGVudGlmaWVyKCksIGFyZ3VtZW50czogYXJncywgZmlsdGVyOiB0cnVlfTtcblxuICAgIHdoaWxlICh0aGlzLmV4cGVjdCgnOicpKSB7XG4gICAgICBhcmdzLnB1c2godGhpcy5leHByZXNzaW9uKCkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgcGFyc2VBcmd1bWVudHM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJyknKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGFyZ3MucHVzaCh0aGlzLmV4cHJlc3Npb24oKSk7XG4gICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyZ3M7XG4gIH0sXG5cbiAgaWRlbnRpZmllcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy5jb25zdW1lKCk7XG4gICAgaWYgKCF0b2tlbi5pZGVudGlmaWVyKSB7XG4gICAgICB0aGlzLnRocm93RXJyb3IoJ2lzIG5vdCBhIHZhbGlkIGlkZW50aWZpZXInLCB0b2tlbik7XG4gICAgfVxuICAgIHJldHVybiB7IHR5cGU6IEFTVC5JZGVudGlmaWVyLCBuYW1lOiB0b2tlbi50ZXh0IH07XG4gIH0sXG5cbiAgY29uc3RhbnQ6IGZ1bmN0aW9uKCkge1xuICAgIC8vIFRPRE8gY2hlY2sgdGhhdCBpdCBpcyBhIGNvbnN0YW50XG4gICAgcmV0dXJuIHsgdHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiB0aGlzLmNvbnN1bWUoKS52YWx1ZSB9O1xuICB9LFxuXG4gIGFycmF5RGVjbGFyYXRpb246IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICddJykge1xuICAgICAgZG8ge1xuICAgICAgICBpZiAodGhpcy5wZWVrKCddJykpIHtcbiAgICAgICAgICAvLyBTdXBwb3J0IHRyYWlsaW5nIGNvbW1hcyBwZXIgRVM1LjEuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLmV4cHJlc3Npb24oKSk7XG4gICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTtcbiAgICB9XG4gICAgdGhpcy5jb25zdW1lKCddJyk7XG5cbiAgICByZXR1cm4geyB0eXBlOiBBU1QuQXJyYXlFeHByZXNzaW9uLCBlbGVtZW50czogZWxlbWVudHMgfTtcbiAgfSxcblxuICBvYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcm9wZXJ0aWVzID0gW10sIHByb3BlcnR5O1xuICAgIGlmICh0aGlzLnBlZWtUb2tlbigpLnRleHQgIT09ICd9Jykge1xuICAgICAgZG8ge1xuICAgICAgICBpZiAodGhpcy5wZWVrKCd9JykpIHtcbiAgICAgICAgICAvLyBTdXBwb3J0IHRyYWlsaW5nIGNvbW1hcyBwZXIgRVM1LjEuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcGVydHkgPSB7dHlwZTogQVNULlByb3BlcnR5LCBraW5kOiAnaW5pdCd9O1xuICAgICAgICBpZiAodGhpcy5wZWVrKCkuY29uc3RhbnQpIHtcbiAgICAgICAgICBwcm9wZXJ0eS5rZXkgPSB0aGlzLmNvbnN0YW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuaWRlbnRpZmllcikge1xuICAgICAgICAgIHByb3BlcnR5LmtleSA9IHRoaXMuaWRlbnRpZmllcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihcImludmFsaWQga2V5XCIsIHRoaXMucGVlaygpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnN1bWUoJzonKTtcbiAgICAgICAgcHJvcGVydHkudmFsdWUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgcHJvcGVydGllcy5wdXNoKHByb3BlcnR5KTtcbiAgICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0KCcsJykpO1xuICAgIH1cbiAgICB0aGlzLmNvbnN1bWUoJ30nKTtcblxuICAgIHJldHVybiB7dHlwZTogQVNULk9iamVjdEV4cHJlc3Npb24sIHByb3BlcnRpZXM6IHByb3BlcnRpZXMgfTtcbiAgfSxcblxuICB0aHJvd0Vycm9yOiBmdW5jdGlvbihtc2csIHRva2VuKSB7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdzeW50YXgnLFxuICAgICAgICAnU3ludGF4IEVycm9yOiBUb2tlbiBcXCd7MH1cXCcgezF9IGF0IGNvbHVtbiB7Mn0gb2YgdGhlIGV4cHJlc3Npb24gW3szfV0gc3RhcnRpbmcgYXQgW3s0fV0uJyxcbiAgICAgICAgICB0b2tlbi50ZXh0LCBtc2csICh0b2tlbi5pbmRleCArIDEpLCB0aGlzLnRleHQsIHRoaXMudGV4dC5zdWJzdHJpbmcodG9rZW4uaW5kZXgpKTtcbiAgfSxcblxuICBjb25zdW1lOiBmdW5jdGlvbihlMSkge1xuICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycigndWVvZScsICdVbmV4cGVjdGVkIGVuZCBvZiBleHByZXNzaW9uOiB7MH0nLCB0aGlzLnRleHQpO1xuICAgIH1cblxuICAgIHZhciB0b2tlbiA9IHRoaXMuZXhwZWN0KGUxKTtcbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICB0aGlzLnRocm93RXJyb3IoJ2lzIHVuZXhwZWN0ZWQsIGV4cGVjdGluZyBbJyArIGUxICsgJ10nLCB0aGlzLnBlZWsoKSk7XG4gICAgfVxuICAgIHJldHVybiB0b2tlbjtcbiAgfSxcblxuICBwZWVrVG9rZW46IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycigndWVvZScsICdVbmV4cGVjdGVkIGVuZCBvZiBleHByZXNzaW9uOiB7MH0nLCB0aGlzLnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b2tlbnNbMF07XG4gIH0sXG5cbiAgcGVlazogZnVuY3Rpb24oZTEsIGUyLCBlMywgZTQpIHtcbiAgICByZXR1cm4gdGhpcy5wZWVrQWhlYWQoMCwgZTEsIGUyLCBlMywgZTQpO1xuICB9LFxuXG4gIHBlZWtBaGVhZDogZnVuY3Rpb24oaSwgZTEsIGUyLCBlMywgZTQpIHtcbiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID4gaSkge1xuICAgICAgdmFyIHRva2VuID0gdGhpcy50b2tlbnNbaV07XG4gICAgICB2YXIgdCA9IHRva2VuLnRleHQ7XG4gICAgICBpZiAodCA9PT0gZTEgfHwgdCA9PT0gZTIgfHwgdCA9PT0gZTMgfHwgdCA9PT0gZTQgfHxcbiAgICAgICAgICAoIWUxICYmICFlMiAmJiAhZTMgJiYgIWU0KSkge1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICBleHBlY3Q6IGZ1bmN0aW9uKGUxLCBlMiwgZTMsIGU0KSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy5wZWVrKGUxLCBlMiwgZTMsIGU0KTtcbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIHRoaXMudG9rZW5zLnNoaWZ0KCk7XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuXG4gIC8qIGB1bmRlZmluZWRgIGlzIG5vdCBhIGNvbnN0YW50LCBpdCBpcyBhbiBpZGVudGlmaWVyLFxuICAgKiBidXQgdXNpbmcgaXQgYXMgYW4gaWRlbnRpZmllciBpcyBub3Qgc3VwcG9ydGVkXG4gICAqL1xuICBjb25zdGFudHM6IHtcbiAgICAndHJ1ZSc6IHsgdHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiB0cnVlIH0sXG4gICAgJ2ZhbHNlJzogeyB0eXBlOiBBU1QuTGl0ZXJhbCwgdmFsdWU6IGZhbHNlIH0sXG4gICAgJ251bGwnOiB7IHR5cGU6IEFTVC5MaXRlcmFsLCB2YWx1ZTogbnVsbCB9LFxuICAgICd1bmRlZmluZWQnOiB7dHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiB1bmRlZmluZWQgfSxcbiAgICAndGhpcyc6IHt0eXBlOiBBU1QuVGhpc0V4cHJlc3Npb24gfVxuICB9XG59O1xuXG5mdW5jdGlvbiBpZkRlZmluZWQodiwgZCkge1xuICByZXR1cm4gdHlwZW9mIHYgIT09ICd1bmRlZmluZWQnID8gdiA6IGQ7XG59XG5cbmZ1bmN0aW9uIHBsdXNGbihsLCByKSB7XG4gIGlmICh0eXBlb2YgbCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiByO1xuICBpZiAodHlwZW9mIHIgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gbDtcbiAgcmV0dXJuIGwgKyByO1xufVxuXG5mdW5jdGlvbiBpc1N0YXRlbGVzcygkZmlsdGVyLCBmaWx0ZXJOYW1lKSB7XG4gIHZhciBmbiA9ICRmaWx0ZXIoZmlsdGVyTmFtZSk7XG4gIHJldHVybiAhZm4uJHN0YXRlZnVsO1xufVxuXG5mdW5jdGlvbiBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdCwgJGZpbHRlcikge1xuICB2YXIgYWxsQ29uc3RhbnRzO1xuICB2YXIgYXJnc1RvV2F0Y2g7XG4gIHN3aXRjaCAoYXN0LnR5cGUpIHtcbiAgY2FzZSBBU1QuUHJvZ3JhbTpcbiAgICBhbGxDb25zdGFudHMgPSB0cnVlO1xuICAgIGZvckVhY2goYXN0LmJvZHksIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoZXhwci5leHByZXNzaW9uLCAkZmlsdGVyKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmV4cHJlc3Npb24uY29uc3RhbnQ7XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5MaXRlcmFsOlxuICAgIGFzdC5jb25zdGFudCA9IHRydWU7XG4gICAgYXN0LnRvV2F0Y2ggPSBbXTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmFyZ3VtZW50LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QuYXJndW1lbnQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QuYXJndW1lbnQudG9XYXRjaDtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQmluYXJ5RXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5sZWZ0LCAkZmlsdGVyKTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5yaWdodCwgJGZpbHRlcik7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LmxlZnQuY29uc3RhbnQgJiYgYXN0LnJpZ2h0LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmxlZnQudG9XYXRjaC5jb25jYXQoYXN0LnJpZ2h0LnRvV2F0Y2gpO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5Mb2dpY2FsRXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5sZWZ0LCAkZmlsdGVyKTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5yaWdodCwgJGZpbHRlcik7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LmxlZnQuY29uc3RhbnQgJiYgYXN0LnJpZ2h0LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmNvbnN0YW50ID8gW10gOiBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnRlc3QsICRmaWx0ZXIpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmFsdGVybmF0ZSwgJGZpbHRlcik7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QuY29uc2VxdWVudCwgJGZpbHRlcik7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LnRlc3QuY29uc3RhbnQgJiYgYXN0LmFsdGVybmF0ZS5jb25zdGFudCAmJiBhc3QuY29uc2VxdWVudC5jb25zdGFudDtcbiAgICBhc3QudG9XYXRjaCA9IGFzdC5jb25zdGFudCA/IFtdIDogW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULklkZW50aWZpZXI6XG4gICAgYXN0LmNvbnN0YW50ID0gZmFsc2U7XG4gICAgYXN0LnRvV2F0Y2ggPSBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuTWVtYmVyRXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5vYmplY3QsICRmaWx0ZXIpO1xuICAgIGlmIChhc3QuY29tcHV0ZWQpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnByb3BlcnR5LCAkZmlsdGVyKTtcbiAgICB9XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0Lm9iamVjdC5jb25zdGFudCAmJiAoIWFzdC5jb21wdXRlZCB8fCBhc3QucHJvcGVydHkuY29uc3RhbnQpO1xuICAgIGFzdC50b1dhdGNoID0gW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkNhbGxFeHByZXNzaW9uOlxuICAgIGFsbENvbnN0YW50cyA9IGFzdC5maWx0ZXIgPyBpc1N0YXRlbGVzcygkZmlsdGVyLCBhc3QuY2FsbGVlLm5hbWUpIDogZmFsc2U7XG4gICAgYXJnc1RvV2F0Y2ggPSBbXTtcbiAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoZXhwciwgJGZpbHRlcik7XG4gICAgICBhbGxDb25zdGFudHMgPSBhbGxDb25zdGFudHMgJiYgZXhwci5jb25zdGFudDtcbiAgICAgIGlmICghZXhwci5jb25zdGFudCkge1xuICAgICAgICBhcmdzVG9XYXRjaC5wdXNoLmFwcGx5KGFyZ3NUb1dhdGNoLCBleHByLnRvV2F0Y2gpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGFzdC5jb25zdGFudCA9IGFsbENvbnN0YW50cztcbiAgICBhc3QudG9XYXRjaCA9IGFzdC5maWx0ZXIgJiYgaXNTdGF0ZWxlc3MoJGZpbHRlciwgYXN0LmNhbGxlZS5uYW1lKSA/IGFyZ3NUb1dhdGNoIDogW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnJpZ2h0LCAkZmlsdGVyKTtcbiAgICBhc3QuY29uc3RhbnQgPSBhc3QubGVmdC5jb25zdGFudCAmJiBhc3QucmlnaHQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBbYXN0XTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuQXJyYXlFeHByZXNzaW9uOlxuICAgIGFsbENvbnN0YW50cyA9IHRydWU7XG4gICAgYXJnc1RvV2F0Y2ggPSBbXTtcbiAgICBmb3JFYWNoKGFzdC5lbGVtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhleHByLCAkZmlsdGVyKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmNvbnN0YW50O1xuICAgICAgaWYgKCFleHByLmNvbnN0YW50KSB7XG4gICAgICAgIGFyZ3NUb1dhdGNoLnB1c2guYXBwbHkoYXJnc1RvV2F0Y2gsIGV4cHIudG9XYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGFzdC50b1dhdGNoID0gYXJnc1RvV2F0Y2g7XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULk9iamVjdEV4cHJlc3Npb246XG4gICAgYWxsQ29uc3RhbnRzID0gdHJ1ZTtcbiAgICBhcmdzVG9XYXRjaCA9IFtdO1xuICAgIGZvckVhY2goYXN0LnByb3BlcnRpZXMsIGZ1bmN0aW9uKHByb3BlcnR5KSB7XG4gICAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKHByb3BlcnR5LnZhbHVlLCAkZmlsdGVyKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBwcm9wZXJ0eS52YWx1ZS5jb25zdGFudDtcbiAgICAgIGlmICghcHJvcGVydHkudmFsdWUuY29uc3RhbnQpIHtcbiAgICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgcHJvcGVydHkudmFsdWUudG9XYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGFzdC50b1dhdGNoID0gYXJnc1RvV2F0Y2g7XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULlRoaXNFeHByZXNzaW9uOlxuICAgIGFzdC5jb25zdGFudCA9IGZhbHNlO1xuICAgIGFzdC50b1dhdGNoID0gW107XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXRzKGJvZHkpIHtcbiAgaWYgKGJvZHkubGVuZ3RoICE9IDEpIHJldHVybjtcbiAgdmFyIGxhc3RFeHByZXNzaW9uID0gYm9keVswXS5leHByZXNzaW9uO1xuICB2YXIgY2FuZGlkYXRlID0gbGFzdEV4cHJlc3Npb24udG9XYXRjaDtcbiAgaWYgKGNhbmRpZGF0ZS5sZW5ndGggIT09IDEpIHJldHVybiBjYW5kaWRhdGU7XG4gIHJldHVybiBjYW5kaWRhdGVbMF0gIT09IGxhc3RFeHByZXNzaW9uID8gY2FuZGlkYXRlIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc0Fzc2lnbmFibGUoYXN0KSB7XG4gIHJldHVybiBhc3QudHlwZSA9PT0gQVNULklkZW50aWZpZXIgfHwgYXN0LnR5cGUgPT09IEFTVC5NZW1iZXJFeHByZXNzaW9uO1xufVxuXG5mdW5jdGlvbiBhc3NpZ25hYmxlQVNUKGFzdCkge1xuICBpZiAoYXN0LmJvZHkubGVuZ3RoID09PSAxICYmIGlzQXNzaWduYWJsZShhc3QuYm9keVswXS5leHByZXNzaW9uKSkge1xuICAgIHJldHVybiB7dHlwZTogQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uLCBsZWZ0OiBhc3QuYm9keVswXS5leHByZXNzaW9uLCByaWdodDoge3R5cGU6IEFTVC5OR1ZhbHVlUGFyYW1ldGVyfSwgb3BlcmF0b3I6ICc9J307XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNMaXRlcmFsKGFzdCkge1xuICByZXR1cm4gYXN0LmJvZHkubGVuZ3RoID09PSAwIHx8XG4gICAgICBhc3QuYm9keS5sZW5ndGggPT09IDEgJiYgKFxuICAgICAgYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlID09PSBBU1QuTGl0ZXJhbCB8fFxuICAgICAgYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlID09PSBBU1QuQXJyYXlFeHByZXNzaW9uIHx8XG4gICAgICBhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgPT09IEFTVC5PYmplY3RFeHByZXNzaW9uKTtcbn1cblxuZnVuY3Rpb24gaXNDb25zdGFudChhc3QpIHtcbiAgcmV0dXJuIGFzdC5jb25zdGFudDtcbn1cblxuZnVuY3Rpb24gQVNUQ29tcGlsZXIoYXN0QnVpbGRlciwgJGZpbHRlcikge1xuICB0aGlzLmFzdEJ1aWxkZXIgPSBhc3RCdWlsZGVyO1xuICB0aGlzLiRmaWx0ZXIgPSAkZmlsdGVyO1xufVxuXG5BU1RDb21waWxlci5wcm90b3R5cGUgPSB7XG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGV4cHJlc3Npb24sIGV4cGVuc2l2ZUNoZWNrcykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgYXN0ID0gdGhpcy5hc3RCdWlsZGVyLmFzdChleHByZXNzaW9uKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbmV4dElkOiAwLFxuICAgICAgZmlsdGVyczoge30sXG4gICAgICBleHBlbnNpdmVDaGVja3M6IGV4cGVuc2l2ZUNoZWNrcyxcbiAgICAgIGZuOiB7dmFyczogW10sIGJvZHk6IFtdLCBvd246IHt9fSxcbiAgICAgIGFzc2lnbjoge3ZhcnM6IFtdLCBib2R5OiBbXSwgb3duOiB7fX0sXG4gICAgICBpbnB1dHM6IFtdXG4gICAgfTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdCwgc2VsZi4kZmlsdGVyKTtcbiAgICB2YXIgZXh0cmEgPSAnJztcbiAgICB2YXIgYXNzaWduYWJsZTtcbiAgICB0aGlzLnN0YWdlID0gJ2Fzc2lnbic7XG4gICAgaWYgKChhc3NpZ25hYmxlID0gYXNzaWduYWJsZUFTVChhc3QpKSkge1xuICAgICAgdGhpcy5zdGF0ZS5jb21wdXRpbmcgPSAnYXNzaWduJztcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLm5leHRJZCgpO1xuICAgICAgdGhpcy5yZWN1cnNlKGFzc2lnbmFibGUsIHJlc3VsdCk7XG4gICAgICB0aGlzLnJldHVybl8ocmVzdWx0KTtcbiAgICAgIGV4dHJhID0gJ2ZuLmFzc2lnbj0nICsgdGhpcy5nZW5lcmF0ZUZ1bmN0aW9uKCdhc3NpZ24nLCAncyx2LGwnKTtcbiAgICB9XG4gICAgdmFyIHRvV2F0Y2ggPSBnZXRJbnB1dHMoYXN0LmJvZHkpO1xuICAgIHNlbGYuc3RhZ2UgPSAnaW5wdXRzJztcbiAgICBmb3JFYWNoKHRvV2F0Y2gsIGZ1bmN0aW9uKHdhdGNoLCBrZXkpIHtcbiAgICAgIHZhciBmbktleSA9ICdmbicgKyBrZXk7XG4gICAgICBzZWxmLnN0YXRlW2ZuS2V5XSA9IHt2YXJzOiBbXSwgYm9keTogW10sIG93bjoge319O1xuICAgICAgc2VsZi5zdGF0ZS5jb21wdXRpbmcgPSBmbktleTtcbiAgICAgIHZhciBpbnRvSWQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgc2VsZi5yZWN1cnNlKHdhdGNoLCBpbnRvSWQpO1xuICAgICAgc2VsZi5yZXR1cm5fKGludG9JZCk7XG4gICAgICBzZWxmLnN0YXRlLmlucHV0cy5wdXNoKGZuS2V5KTtcbiAgICAgIHdhdGNoLndhdGNoSWQgPSBrZXk7XG4gICAgfSk7XG4gICAgdGhpcy5zdGF0ZS5jb21wdXRpbmcgPSAnZm4nO1xuICAgIHRoaXMuc3RhZ2UgPSAnbWFpbic7XG4gICAgdGhpcy5yZWN1cnNlKGFzdCk7XG4gICAgdmFyIGZuU3RyaW5nID1cbiAgICAgIC8vIFRoZSBidWlsZCBhbmQgbWluaWZpY2F0aW9uIHN0ZXBzIHJlbW92ZSB0aGUgc3RyaW5nIFwidXNlIHN0cmljdFwiIGZyb20gdGhlIGNvZGUsIGJ1dCB0aGlzIGlzIGRvbmUgdXNpbmcgYSByZWdleC5cbiAgICAgIC8vIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciB0aGlzIHVudGlsIHdlIGRvIGEgYmV0dGVyIGpvYiBhdCBvbmx5IHJlbW92aW5nIHRoZSBwcmVmaXggb25seSB3aGVuIHdlIHNob3VsZC5cbiAgICAgICdcIicgKyB0aGlzLlVTRSArICcgJyArIHRoaXMuU1RSSUNUICsgJ1wiO1xcbicgK1xuICAgICAgdGhpcy5maWx0ZXJQcmVmaXgoKSArXG4gICAgICAndmFyIGZuPScgKyB0aGlzLmdlbmVyYXRlRnVuY3Rpb24oJ2ZuJywgJ3MsbCxhLGknKSArXG4gICAgICBleHRyYSArXG4gICAgICB0aGlzLndhdGNoRm5zKCkgK1xuICAgICAgJ3JldHVybiBmbjsnO1xuXG4gICAgLyoganNoaW50IC1XMDU0ICovXG4gICAgdmFyIGZuID0gKG5ldyBGdW5jdGlvbignJGZpbHRlcicsXG4gICAgICAgICdlbnN1cmVTYWZlTWVtYmVyTmFtZScsXG4gICAgICAgICdlbnN1cmVTYWZlT2JqZWN0JyxcbiAgICAgICAgJ2Vuc3VyZVNhZmVGdW5jdGlvbicsXG4gICAgICAgICdnZXRTdHJpbmdWYWx1ZScsXG4gICAgICAgICdlbnN1cmVTYWZlQXNzaWduQ29udGV4dCcsXG4gICAgICAgICdpZkRlZmluZWQnLFxuICAgICAgICAncGx1cycsXG4gICAgICAgICd0ZXh0JyxcbiAgICAgICAgZm5TdHJpbmcpKShcbiAgICAgICAgICB0aGlzLiRmaWx0ZXIsXG4gICAgICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUsXG4gICAgICAgICAgZW5zdXJlU2FmZU9iamVjdCxcbiAgICAgICAgICBlbnN1cmVTYWZlRnVuY3Rpb24sXG4gICAgICAgICAgZ2V0U3RyaW5nVmFsdWUsXG4gICAgICAgICAgZW5zdXJlU2FmZUFzc2lnbkNvbnRleHQsXG4gICAgICAgICAgaWZEZWZpbmVkLFxuICAgICAgICAgIHBsdXNGbixcbiAgICAgICAgICBleHByZXNzaW9uKTtcbiAgICAvKiBqc2hpbnQgK1cwNTQgKi9cbiAgICB0aGlzLnN0YXRlID0gdGhpcy5zdGFnZSA9IHVuZGVmaW5lZDtcbiAgICBmbi5saXRlcmFsID0gaXNMaXRlcmFsKGFzdCk7XG4gICAgZm4uY29uc3RhbnQgPSBpc0NvbnN0YW50KGFzdCk7XG4gICAgcmV0dXJuIGZuO1xuICB9LFxuXG4gIFVTRTogJ3VzZScsXG5cbiAgU1RSSUNUOiAnc3RyaWN0JyxcblxuICB3YXRjaEZuczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBmbnMgPSB0aGlzLnN0YXRlLmlucHV0cztcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZm9yRWFjaChmbnMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKCd2YXIgJyArIG5hbWUgKyAnPScgKyBzZWxmLmdlbmVyYXRlRnVuY3Rpb24obmFtZSwgJ3MnKSk7XG4gICAgfSk7XG4gICAgaWYgKGZucy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKCdmbi5pbnB1dHM9WycgKyBmbnMuam9pbignLCcpICsgJ107Jyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gIH0sXG5cbiAgZ2VuZXJhdGVGdW5jdGlvbjogZnVuY3Rpb24obmFtZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbignICsgcGFyYW1zICsgJyl7JyArXG4gICAgICAgIHRoaXMudmFyc1ByZWZpeChuYW1lKSArXG4gICAgICAgIHRoaXMuYm9keShuYW1lKSArXG4gICAgICAgICd9Oyc7XG4gIH0sXG5cbiAgZmlsdGVyUHJlZml4OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZm9yRWFjaCh0aGlzLnN0YXRlLmZpbHRlcnMsIGZ1bmN0aW9uKGlkLCBmaWx0ZXIpIHtcbiAgICAgIHBhcnRzLnB1c2goaWQgKyAnPSRmaWx0ZXIoJyArIHNlbGYuZXNjYXBlKGZpbHRlcikgKyAnKScpO1xuICAgIH0pO1xuICAgIGlmIChwYXJ0cy5sZW5ndGgpIHJldHVybiAndmFyICcgKyBwYXJ0cy5qb2luKCcsJykgKyAnOyc7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIHZhcnNQcmVmaXg6IGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVtzZWN0aW9uXS52YXJzLmxlbmd0aCA/ICd2YXIgJyArIHRoaXMuc3RhdGVbc2VjdGlvbl0udmFycy5qb2luKCcsJykgKyAnOycgOiAnJztcbiAgfSxcblxuICBib2R5OiBmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVbc2VjdGlvbl0uYm9keS5qb2luKCcnKTtcbiAgfSxcblxuICByZWN1cnNlOiBmdW5jdGlvbihhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKSB7XG4gICAgdmFyIGxlZnQsIHJpZ2h0LCBzZWxmID0gdGhpcywgYXJncywgZXhwcmVzc2lvbjtcbiAgICByZWN1cnNpb25GbiA9IHJlY3Vyc2lvbkZuIHx8IG5vb3A7XG4gICAgaWYgKCFza2lwV2F0Y2hJZENoZWNrICYmIGlzRGVmaW5lZChhc3Qud2F0Y2hJZCkpIHtcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgdGhpcy5pZl8oJ2knLFxuICAgICAgICB0aGlzLmxhenlBc3NpZ24oaW50b0lkLCB0aGlzLmNvbXB1dGVkTWVtYmVyKCdpJywgYXN0LndhdGNoSWQpKSxcbiAgICAgICAgdGhpcy5sYXp5UmVjdXJzZShhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCB0cnVlKVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpdGNoIChhc3QudHlwZSkge1xuICAgIGNhc2UgQVNULlByb2dyYW06XG4gICAgICBmb3JFYWNoKGFzdC5ib2R5LCBmdW5jdGlvbihleHByZXNzaW9uLCBwb3MpIHtcbiAgICAgICAgc2VsZi5yZWN1cnNlKGV4cHJlc3Npb24uZXhwcmVzc2lvbiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgcmlnaHQgPSBleHByOyB9KTtcbiAgICAgICAgaWYgKHBvcyAhPT0gYXN0LmJvZHkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHNlbGYuY3VycmVudCgpLmJvZHkucHVzaChyaWdodCwgJzsnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnJldHVybl8ocmlnaHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULkxpdGVyYWw6XG4gICAgICBleHByZXNzaW9uID0gdGhpcy5lc2NhcGUoYXN0LnZhbHVlKTtcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICByZWN1cnNpb25GbihleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULlVuYXJ5RXhwcmVzc2lvbjpcbiAgICAgIHRoaXMucmVjdXJzZShhc3QuYXJndW1lbnQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbihleHByKSB7IHJpZ2h0ID0gZXhwcjsgfSk7XG4gICAgICBleHByZXNzaW9uID0gYXN0Lm9wZXJhdG9yICsgJygnICsgdGhpcy5pZkRlZmluZWQocmlnaHQsIDApICsgJyknO1xuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQmluYXJ5RXhwcmVzc2lvbjpcbiAgICAgIHRoaXMucmVjdXJzZShhc3QubGVmdCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgbGVmdCA9IGV4cHI7IH0pO1xuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5yaWdodCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgcmlnaHQgPSBleHByOyB9KTtcbiAgICAgIGlmIChhc3Qub3BlcmF0b3IgPT09ICcrJykge1xuICAgICAgICBleHByZXNzaW9uID0gdGhpcy5wbHVzKGxlZnQsIHJpZ2h0KTtcbiAgICAgIH0gZWxzZSBpZiAoYXN0Lm9wZXJhdG9yID09PSAnLScpIHtcbiAgICAgICAgZXhwcmVzc2lvbiA9IHRoaXMuaWZEZWZpbmVkKGxlZnQsIDApICsgYXN0Lm9wZXJhdG9yICsgdGhpcy5pZkRlZmluZWQocmlnaHQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhwcmVzc2lvbiA9ICcoJyArIGxlZnQgKyAnKScgKyBhc3Qub3BlcmF0b3IgKyAnKCcgKyByaWdodCArICcpJztcbiAgICAgIH1cbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICByZWN1cnNpb25GbihleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULkxvZ2ljYWxFeHByZXNzaW9uOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0LmxlZnQsIGludG9JZCk7XG4gICAgICBzZWxmLmlmXyhhc3Qub3BlcmF0b3IgPT09ICcmJicgPyBpbnRvSWQgOiBzZWxmLm5vdChpbnRvSWQpLCBzZWxmLmxhenlSZWN1cnNlKGFzdC5yaWdodCwgaW50b0lkKSk7XG4gICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0LnRlc3QsIGludG9JZCk7XG4gICAgICBzZWxmLmlmXyhpbnRvSWQsIHNlbGYubGF6eVJlY3Vyc2UoYXN0LmFsdGVybmF0ZSwgaW50b0lkKSwgc2VsZi5sYXp5UmVjdXJzZShhc3QuY29uc2VxdWVudCwgaW50b0lkKSk7XG4gICAgICByZWN1cnNpb25GbihpbnRvSWQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuSWRlbnRpZmllcjpcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgaWYgKG5hbWVJZCkge1xuICAgICAgICBuYW1lSWQuY29udGV4dCA9IHNlbGYuc3RhZ2UgPT09ICdpbnB1dHMnID8gJ3MnIDogdGhpcy5hc3NpZ24odGhpcy5uZXh0SWQoKSwgdGhpcy5nZXRIYXNPd25Qcm9wZXJ0eSgnbCcsIGFzdC5uYW1lKSArICc/bDpzJyk7XG4gICAgICAgIG5hbWVJZC5jb21wdXRlZCA9IGZhbHNlO1xuICAgICAgICBuYW1lSWQubmFtZSA9IGFzdC5uYW1lO1xuICAgICAgfVxuICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUoYXN0Lm5hbWUpO1xuICAgICAgc2VsZi5pZl8oc2VsZi5zdGFnZSA9PT0gJ2lucHV0cycgfHwgc2VsZi5ub3Qoc2VsZi5nZXRIYXNPd25Qcm9wZXJ0eSgnbCcsIGFzdC5uYW1lKSksXG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuaWZfKHNlbGYuc3RhZ2UgPT09ICdpbnB1dHMnIHx8ICdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhcbiAgICAgICAgICAgICAgICBzZWxmLm5vdChzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpKSxcbiAgICAgICAgICAgICAgICBzZWxmLmxhenlBc3NpZ24oc2VsZi5ub25Db21wdXRlZE1lbWJlcigncycsIGFzdC5uYW1lKSwgJ3t9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgaW50b0lkICYmIHNlbGYubGF6eUFzc2lnbihpbnRvSWQsIHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ2wnLCBhc3QubmFtZSkpXG4gICAgICAgICk7XG4gICAgICBpZiAoc2VsZi5zdGF0ZS5leHBlbnNpdmVDaGVja3MgfHwgaXNQb3NzaWJseURhbmdlcm91c01lbWJlck5hbWUoYXN0Lm5hbWUpKSB7XG4gICAgICAgIHNlbGYuYWRkRW5zdXJlU2FmZU9iamVjdChpbnRvSWQpO1xuICAgICAgfVxuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULk1lbWJlckV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gbmFtZUlkICYmIChuYW1lSWQuY29udGV4dCA9IHRoaXMubmV4dElkKCkpIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHNlbGYucmVjdXJzZShhc3Qub2JqZWN0LCBsZWZ0LCB1bmRlZmluZWQsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdE51bGwobGVmdCksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChhc3QuY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIHJpZ2h0ID0gc2VsZi5uZXh0SWQoKTtcbiAgICAgICAgICAgIHNlbGYucmVjdXJzZShhc3QucHJvcGVydHksIHJpZ2h0KTtcbiAgICAgICAgICAgIHNlbGYuZ2V0U3RyaW5nVmFsdWUocmlnaHQpO1xuICAgICAgICAgICAgc2VsZi5hZGRFbnN1cmVTYWZlTWVtYmVyTmFtZShyaWdodCk7XG4gICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdChzZWxmLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KSksIHNlbGYubGF6eUFzc2lnbihzZWxmLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KSwgJ3t9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYuZW5zdXJlU2FmZU9iamVjdChzZWxmLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KSk7XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgaWYgKG5hbWVJZCkge1xuICAgICAgICAgICAgICBuYW1lSWQuY29tcHV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBuYW1lSWQubmFtZSA9IHJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZShhc3QucHJvcGVydHkubmFtZSk7XG4gICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhzZWxmLm5vdChzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIGFzdC5wcm9wZXJ0eS5uYW1lKSksIHNlbGYubGF6eUFzc2lnbihzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIGFzdC5wcm9wZXJ0eS5uYW1lKSwgJ3t9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgYXN0LnByb3BlcnR5Lm5hbWUpO1xuICAgICAgICAgICAgaWYgKHNlbGYuc3RhdGUuZXhwZW5zaXZlQ2hlY2tzIHx8IGlzUG9zc2libHlEYW5nZXJvdXNNZW1iZXJOYW1lKGFzdC5wcm9wZXJ0eS5uYW1lKSkge1xuICAgICAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5lbnN1cmVTYWZlT2JqZWN0KGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICAgIGlmIChuYW1lSWQpIHtcbiAgICAgICAgICAgICAgbmFtZUlkLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIG5hbWVJZC5uYW1lID0gYXN0LnByb3BlcnR5Lm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsICd1bmRlZmluZWQnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICB9LCAhIWNyZWF0ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5DYWxsRXhwcmVzc2lvbjpcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgaWYgKGFzdC5maWx0ZXIpIHtcbiAgICAgICAgcmlnaHQgPSBzZWxmLmZpbHRlcihhc3QuY2FsbGVlLm5hbWUpO1xuICAgICAgICBhcmdzID0gW107XG4gICAgICAgIGZvckVhY2goYXN0LmFyZ3VtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgIHZhciBhcmd1bWVudCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgc2VsZi5yZWN1cnNlKGV4cHIsIGFyZ3VtZW50KTtcbiAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IHJpZ2h0ICsgJygnICsgYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByaWdodCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgIGxlZnQgPSB7fTtcbiAgICAgICAgYXJncyA9IFtdO1xuICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LmNhbGxlZSwgcmlnaHQsIGxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuaWZfKHNlbGYubm90TnVsbChyaWdodCksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5hZGRFbnN1cmVTYWZlRnVuY3Rpb24ocmlnaHQpO1xuICAgICAgICAgICAgZm9yRWFjaChhc3QuYXJndW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgICAgICAgIHNlbGYucmVjdXJzZShleHByLCBzZWxmLm5leHRJZCgpLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKHNlbGYuZW5zdXJlU2FmZU9iamVjdChhcmd1bWVudCkpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGxlZnQubmFtZSkge1xuICAgICAgICAgICAgICBpZiAoIXNlbGYuc3RhdGUuZXhwZW5zaXZlQ2hlY2tzKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hZGRFbnN1cmVTYWZlT2JqZWN0KGxlZnQuY29udGV4dCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubWVtYmVyKGxlZnQuY29udGV4dCwgbGVmdC5uYW1lLCBsZWZ0LmNvbXB1dGVkKSArICcoJyArIGFyZ3Muam9pbignLCcpICsgJyknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHJpZ2h0ICsgJygnICsgYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5lbnN1cmVTYWZlT2JqZWN0KGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgJ3VuZGVmaW5lZCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuQXNzaWdubWVudEV4cHJlc3Npb246XG4gICAgICByaWdodCA9IHRoaXMubmV4dElkKCk7XG4gICAgICBsZWZ0ID0ge307XG4gICAgICBpZiAoIWlzQXNzaWduYWJsZShhc3QubGVmdCkpIHtcbiAgICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdsdmFsJywgJ1RyeWluZyB0byBhc3NpZ24gYSB2YWx1ZSB0byBhIG5vbiBsLXZhbHVlJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlY3Vyc2UoYXN0LmxlZnQsIHVuZGVmaW5lZCwgbGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuaWZfKHNlbGYubm90TnVsbChsZWZ0LmNvbnRleHQpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LnJpZ2h0LCByaWdodCk7XG4gICAgICAgICAgc2VsZi5hZGRFbnN1cmVTYWZlT2JqZWN0KHNlbGYubWVtYmVyKGxlZnQuY29udGV4dCwgbGVmdC5uYW1lLCBsZWZ0LmNvbXB1dGVkKSk7XG4gICAgICAgICAgc2VsZi5hZGRFbnN1cmVTYWZlQXNzaWduQ29udGV4dChsZWZ0LmNvbnRleHQpO1xuICAgICAgICAgIGV4cHJlc3Npb24gPSBzZWxmLm1lbWJlcihsZWZ0LmNvbnRleHQsIGxlZnQubmFtZSwgbGVmdC5jb21wdXRlZCkgKyBhc3Qub3BlcmF0b3IgKyByaWdodDtcbiAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCBleHByZXNzaW9uKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCAxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULkFycmF5RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvckVhY2goYXN0LmVsZW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHNlbGYucmVjdXJzZShleHByLCBzZWxmLm5leHRJZCgpLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGFyZ3VtZW50KSB7XG4gICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGV4cHJlc3Npb24gPSAnWycgKyBhcmdzLmpvaW4oJywnKSArICddJztcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICByZWN1cnNpb25GbihleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULk9iamVjdEV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICBzZWxmLnJlY3Vyc2UocHJvcGVydHkudmFsdWUsIHNlbGYubmV4dElkKCksIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgIGFyZ3MucHVzaChzZWxmLmVzY2FwZShcbiAgICAgICAgICAgICAgcHJvcGVydHkua2V5LnR5cGUgPT09IEFTVC5JZGVudGlmaWVyID8gcHJvcGVydHkua2V5Lm5hbWUgOlxuICAgICAgICAgICAgICAgICgnJyArIHByb3BlcnR5LmtleS52YWx1ZSkpICtcbiAgICAgICAgICAgICAgJzonICsgZXhwcik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBleHByZXNzaW9uID0gJ3snICsgYXJncy5qb2luKCcsJykgKyAnfSc7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oZXhwcmVzc2lvbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5UaGlzRXhwcmVzc2lvbjpcbiAgICAgIHRoaXMuYXNzaWduKGludG9JZCwgJ3MnKTtcbiAgICAgIHJlY3Vyc2lvbkZuKCdzJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5OR1ZhbHVlUGFyYW1ldGVyOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAndicpO1xuICAgICAgcmVjdXJzaW9uRm4oJ3YnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSxcblxuICBnZXRIYXNPd25Qcm9wZXJ0eTogZnVuY3Rpb24oZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgICB2YXIga2V5ID0gZWxlbWVudCArICcuJyArIHByb3BlcnR5O1xuICAgIHZhciBvd24gPSB0aGlzLmN1cnJlbnQoKS5vd247XG4gICAgaWYgKCFvd24uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgb3duW2tleV0gPSB0aGlzLm5leHRJZChmYWxzZSwgZWxlbWVudCArICcmJignICsgdGhpcy5lc2NhcGUocHJvcGVydHkpICsgJyBpbiAnICsgZWxlbWVudCArICcpJyk7XG4gICAgfVxuICAgIHJldHVybiBvd25ba2V5XTtcbiAgfSxcblxuICBhc3NpZ246IGZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICAgIGlmICghaWQpIHJldHVybjtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2goaWQsICc9JywgdmFsdWUsICc7Jyk7XG4gICAgcmV0dXJuIGlkO1xuICB9LFxuXG4gIGZpbHRlcjogZnVuY3Rpb24oZmlsdGVyTmFtZSkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5maWx0ZXJzLmhhc093blByb3BlcnR5KGZpbHRlck5hbWUpKSB7XG4gICAgICB0aGlzLnN0YXRlLmZpbHRlcnNbZmlsdGVyTmFtZV0gPSB0aGlzLm5leHRJZCh0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZmlsdGVyc1tmaWx0ZXJOYW1lXTtcbiAgfSxcblxuICBpZkRlZmluZWQ6IGZ1bmN0aW9uKGlkLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gJ2lmRGVmaW5lZCgnICsgaWQgKyAnLCcgKyB0aGlzLmVzY2FwZShkZWZhdWx0VmFsdWUpICsgJyknO1xuICB9LFxuXG4gIHBsdXM6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgcmV0dXJuICdwbHVzKCcgKyBsZWZ0ICsgJywnICsgcmlnaHQgKyAnKSc7XG4gIH0sXG5cbiAgcmV0dXJuXzogZnVuY3Rpb24oaWQpIHtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2goJ3JldHVybiAnLCBpZCwgJzsnKTtcbiAgfSxcblxuICBpZl86IGZ1bmN0aW9uKHRlc3QsIGFsdGVybmF0ZSwgY29uc2VxdWVudCkge1xuICAgIGlmICh0ZXN0ID09PSB0cnVlKSB7XG4gICAgICBhbHRlcm5hdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGJvZHkgPSB0aGlzLmN1cnJlbnQoKS5ib2R5O1xuICAgICAgYm9keS5wdXNoKCdpZignLCB0ZXN0LCAnKXsnKTtcbiAgICAgIGFsdGVybmF0ZSgpO1xuICAgICAgYm9keS5wdXNoKCd9Jyk7XG4gICAgICBpZiAoY29uc2VxdWVudCkge1xuICAgICAgICBib2R5LnB1c2goJ2Vsc2V7Jyk7XG4gICAgICAgIGNvbnNlcXVlbnQoKTtcbiAgICAgICAgYm9keS5wdXNoKCd9Jyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIG5vdDogZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgIHJldHVybiAnISgnICsgZXhwcmVzc2lvbiArICcpJztcbiAgfSxcblxuICBub3ROdWxsOiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb24gKyAnIT1udWxsJztcbiAgfSxcblxuICBub25Db21wdXRlZE1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICByZXR1cm4gbGVmdCArICcuJyArIHJpZ2h0O1xuICB9LFxuXG4gIGNvbXB1dGVkTWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiBsZWZ0ICsgJ1snICsgcmlnaHQgKyAnXSc7XG4gIH0sXG5cbiAgbWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29tcHV0ZWQpIHtcbiAgICBpZiAoY29tcHV0ZWQpIHJldHVybiB0aGlzLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KTtcbiAgICByZXR1cm4gdGhpcy5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCk7XG4gIH0sXG5cbiAgYWRkRW5zdXJlU2FmZU9iamVjdDogZnVuY3Rpb24oaXRlbSkge1xuICAgIHRoaXMuY3VycmVudCgpLmJvZHkucHVzaCh0aGlzLmVuc3VyZVNhZmVPYmplY3QoaXRlbSksICc7Jyk7XG4gIH0sXG5cbiAgYWRkRW5zdXJlU2FmZU1lbWJlck5hbWU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2godGhpcy5lbnN1cmVTYWZlTWVtYmVyTmFtZShpdGVtKSwgJzsnKTtcbiAgfSxcblxuICBhZGRFbnN1cmVTYWZlRnVuY3Rpb246IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2godGhpcy5lbnN1cmVTYWZlRnVuY3Rpb24oaXRlbSksICc7Jyk7XG4gIH0sXG5cbiAgYWRkRW5zdXJlU2FmZUFzc2lnbkNvbnRleHQ6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLmN1cnJlbnQoKS5ib2R5LnB1c2godGhpcy5lbnN1cmVTYWZlQXNzaWduQ29udGV4dChpdGVtKSwgJzsnKTtcbiAgfSxcblxuICBlbnN1cmVTYWZlT2JqZWN0OiBmdW5jdGlvbihpdGVtKSB7XG4gICAgcmV0dXJuICdlbnN1cmVTYWZlT2JqZWN0KCcgKyBpdGVtICsgJyx0ZXh0KSc7XG4gIH0sXG5cbiAgZW5zdXJlU2FmZU1lbWJlck5hbWU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4gJ2Vuc3VyZVNhZmVNZW1iZXJOYW1lKCcgKyBpdGVtICsgJyx0ZXh0KSc7XG4gIH0sXG5cbiAgZW5zdXJlU2FmZUZ1bmN0aW9uOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgcmV0dXJuICdlbnN1cmVTYWZlRnVuY3Rpb24oJyArIGl0ZW0gKyAnLHRleHQpJztcbiAgfSxcblxuICBnZXRTdHJpbmdWYWx1ZTogZnVuY3Rpb24oaXRlbSkge1xuICAgIHRoaXMuYXNzaWduKGl0ZW0sICdnZXRTdHJpbmdWYWx1ZSgnICsgaXRlbSArICcsdGV4dCknKTtcbiAgfSxcblxuICBlbnN1cmVTYWZlQXNzaWduQ29udGV4dDogZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiAnZW5zdXJlU2FmZUFzc2lnbkNvbnRleHQoJyArIGl0ZW0gKyAnLHRleHQpJztcbiAgfSxcblxuICBsYXp5UmVjdXJzZTogZnVuY3Rpb24oYXN0LCBpbnRvSWQsIG5hbWVJZCwgcmVjdXJzaW9uRm4sIGNyZWF0ZSwgc2tpcFdhdGNoSWRDaGVjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0LCBpbnRvSWQsIG5hbWVJZCwgcmVjdXJzaW9uRm4sIGNyZWF0ZSwgc2tpcFdhdGNoSWRDaGVjayk7XG4gICAgfTtcbiAgfSxcblxuICBsYXp5QXNzaWduOiBmdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5hc3NpZ24oaWQsIHZhbHVlKTtcbiAgICB9O1xuICB9LFxuXG4gIHN0cmluZ0VzY2FwZVJlZ2V4OiAvW14gYS16QS1aMC05XS9nLFxuXG4gIHN0cmluZ0VzY2FwZUZuOiBmdW5jdGlvbihjKSB7XG4gICAgcmV0dXJuICdcXFxcdScgKyAoJzAwMDAnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpO1xuICB9LFxuXG4gIGVzY2FwZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSByZXR1cm4gXCInXCIgKyB2YWx1ZS5yZXBsYWNlKHRoaXMuc3RyaW5nRXNjYXBlUmVnZXgsIHRoaXMuc3RyaW5nRXNjYXBlRm4pICsgXCInXCI7XG4gICAgaWYgKGlzTnVtYmVyKHZhbHVlKSkgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgaWYgKHZhbHVlID09PSB0cnVlKSByZXR1cm4gJ3RydWUnO1xuICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHJldHVybiAnZmFsc2UnO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykgcmV0dXJuICd1bmRlZmluZWQnO1xuXG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdlc2MnLCAnSU1QT1NTSUJMRScpO1xuICB9LFxuXG4gIG5leHRJZDogZnVuY3Rpb24oc2tpcCwgaW5pdCkge1xuICAgIHZhciBpZCA9ICd2JyArICh0aGlzLnN0YXRlLm5leHRJZCsrKTtcbiAgICBpZiAoIXNraXApIHtcbiAgICAgIHRoaXMuY3VycmVudCgpLnZhcnMucHVzaChpZCArIChpbml0ID8gJz0nICsgaW5pdCA6ICcnKSk7XG4gICAgfVxuICAgIHJldHVybiBpZDtcbiAgfSxcblxuICBjdXJyZW50OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVt0aGlzLnN0YXRlLmNvbXB1dGluZ107XG4gIH1cbn07XG5cblxuZnVuY3Rpb24gQVNUSW50ZXJwcmV0ZXIoYXN0QnVpbGRlciwgJGZpbHRlcikge1xuICB0aGlzLmFzdEJ1aWxkZXIgPSBhc3RCdWlsZGVyO1xuICB0aGlzLiRmaWx0ZXIgPSAkZmlsdGVyO1xufVxuXG5BU1RJbnRlcnByZXRlci5wcm90b3R5cGUgPSB7XG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGV4cHJlc3Npb24sIGV4cGVuc2l2ZUNoZWNrcykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgYXN0ID0gdGhpcy5hc3RCdWlsZGVyLmFzdChleHByZXNzaW9uKTtcbiAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuICAgIHRoaXMuZXhwZW5zaXZlQ2hlY2tzID0gZXhwZW5zaXZlQ2hlY2tzO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCBzZWxmLiRmaWx0ZXIpO1xuICAgIHZhciBhc3NpZ25hYmxlO1xuICAgIHZhciBhc3NpZ247XG4gICAgaWYgKChhc3NpZ25hYmxlID0gYXNzaWduYWJsZUFTVChhc3QpKSkge1xuICAgICAgYXNzaWduID0gdGhpcy5yZWN1cnNlKGFzc2lnbmFibGUpO1xuICAgIH1cbiAgICB2YXIgdG9XYXRjaCA9IGdldElucHV0cyhhc3QuYm9keSk7XG4gICAgdmFyIGlucHV0cztcbiAgICBpZiAodG9XYXRjaCkge1xuICAgICAgaW5wdXRzID0gW107XG4gICAgICBmb3JFYWNoKHRvV2F0Y2gsIGZ1bmN0aW9uKHdhdGNoLCBrZXkpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gc2VsZi5yZWN1cnNlKHdhdGNoKTtcbiAgICAgICAgd2F0Y2guaW5wdXQgPSBpbnB1dDtcbiAgICAgICAgaW5wdXRzLnB1c2goaW5wdXQpO1xuICAgICAgICB3YXRjaC53YXRjaElkID0ga2V5O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBleHByZXNzaW9ucyA9IFtdO1xuICAgIGZvckVhY2goYXN0LmJvZHksIGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICAgIGV4cHJlc3Npb25zLnB1c2goc2VsZi5yZWN1cnNlKGV4cHJlc3Npb24uZXhwcmVzc2lvbikpO1xuICAgIH0pO1xuICAgIHZhciBmbiA9IGFzdC5ib2R5Lmxlbmd0aCA9PT0gMCA/IGZ1bmN0aW9uKCkge30gOlxuICAgICAgICAgICAgIGFzdC5ib2R5Lmxlbmd0aCA9PT0gMSA/IGV4cHJlc3Npb25zWzBdIDpcbiAgICAgICAgICAgICBmdW5jdGlvbihzY29wZSwgbG9jYWxzKSB7XG4gICAgICAgICAgICAgICB2YXIgbGFzdFZhbHVlO1xuICAgICAgICAgICAgICAgZm9yRWFjaChleHByZXNzaW9ucywgZnVuY3Rpb24oZXhwKSB7XG4gICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGV4cChzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RWYWx1ZTtcbiAgICAgICAgICAgICB9O1xuICAgIGlmIChhc3NpZ24pIHtcbiAgICAgIGZuLmFzc2lnbiA9IGZ1bmN0aW9uKHNjb3BlLCB2YWx1ZSwgbG9jYWxzKSB7XG4gICAgICAgIHJldHVybiBhc3NpZ24oc2NvcGUsIGxvY2FscywgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlucHV0cykge1xuICAgICAgZm4uaW5wdXRzID0gaW5wdXRzO1xuICAgIH1cbiAgICBmbi5saXRlcmFsID0gaXNMaXRlcmFsKGFzdCk7XG4gICAgZm4uY29uc3RhbnQgPSBpc0NvbnN0YW50KGFzdCk7XG4gICAgcmV0dXJuIGZuO1xuICB9LFxuXG4gIHJlY3Vyc2U6IGZ1bmN0aW9uKGFzdCwgY29udGV4dCwgY3JlYXRlKSB7XG4gICAgdmFyIGxlZnQsIHJpZ2h0LCBzZWxmID0gdGhpcywgYXJncywgZXhwcmVzc2lvbjtcbiAgICBpZiAoYXN0LmlucHV0KSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnB1dHMoYXN0LmlucHV0LCBhc3Qud2F0Y2hJZCk7XG4gICAgfVxuICAgIHN3aXRjaCAoYXN0LnR5cGUpIHtcbiAgICBjYXNlIEFTVC5MaXRlcmFsOlxuICAgICAgcmV0dXJuIHRoaXMudmFsdWUoYXN0LnZhbHVlLCBjb250ZXh0KTtcbiAgICBjYXNlIEFTVC5VbmFyeUV4cHJlc3Npb246XG4gICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QuYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHRoaXNbJ3VuYXJ5JyArIGFzdC5vcGVyYXRvcl0ocmlnaHQsIGNvbnRleHQpO1xuICAgIGNhc2UgQVNULkJpbmFyeUV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gdGhpcy5yZWN1cnNlKGFzdC5sZWZ0KTtcbiAgICAgIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5yaWdodCk7XG4gICAgICByZXR1cm4gdGhpc1snYmluYXJ5JyArIGFzdC5vcGVyYXRvcl0obGVmdCwgcmlnaHQsIGNvbnRleHQpO1xuICAgIGNhc2UgQVNULkxvZ2ljYWxFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3QubGVmdCk7XG4gICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucmlnaHQpO1xuICAgICAgcmV0dXJuIHRoaXNbJ2JpbmFyeScgKyBhc3Qub3BlcmF0b3JdKGxlZnQsIHJpZ2h0LCBjb250ZXh0KTtcbiAgICBjYXNlIEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb246XG4gICAgICByZXR1cm4gdGhpc1sndGVybmFyeT86J10oXG4gICAgICAgIHRoaXMucmVjdXJzZShhc3QudGVzdCksXG4gICAgICAgIHRoaXMucmVjdXJzZShhc3QuYWx0ZXJuYXRlKSxcbiAgICAgICAgdGhpcy5yZWN1cnNlKGFzdC5jb25zZXF1ZW50KSxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICBjYXNlIEFTVC5JZGVudGlmaWVyOlxuICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUoYXN0Lm5hbWUsIHNlbGYuZXhwcmVzc2lvbik7XG4gICAgICByZXR1cm4gc2VsZi5pZGVudGlmaWVyKGFzdC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmV4cGVuc2l2ZUNoZWNrcyB8fCBpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZShhc3QubmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQsIGNyZWF0ZSwgc2VsZi5leHByZXNzaW9uKTtcbiAgICBjYXNlIEFTVC5NZW1iZXJFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3Qub2JqZWN0LCBmYWxzZSwgISFjcmVhdGUpO1xuICAgICAgaWYgKCFhc3QuY29tcHV0ZWQpIHtcbiAgICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUoYXN0LnByb3BlcnR5Lm5hbWUsIHNlbGYuZXhwcmVzc2lvbik7XG4gICAgICAgIHJpZ2h0ID0gYXN0LnByb3BlcnR5Lm5hbWU7XG4gICAgICB9XG4gICAgICBpZiAoYXN0LmNvbXB1dGVkKSByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucHJvcGVydHkpO1xuICAgICAgcmV0dXJuIGFzdC5jb21wdXRlZCA/XG4gICAgICAgIHRoaXMuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQsIGNvbnRleHQsIGNyZWF0ZSwgc2VsZi5leHByZXNzaW9uKSA6XG4gICAgICAgIHRoaXMubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQsIHNlbGYuZXhwZW5zaXZlQ2hlY2tzLCBjb250ZXh0LCBjcmVhdGUsIHNlbGYuZXhwcmVzc2lvbik7XG4gICAgY2FzZSBBU1QuQ2FsbEV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgYXJncy5wdXNoKHNlbGYucmVjdXJzZShleHByKSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChhc3QuZmlsdGVyKSByaWdodCA9IHRoaXMuJGZpbHRlcihhc3QuY2FsbGVlLm5hbWUpO1xuICAgICAgaWYgKCFhc3QuZmlsdGVyKSByaWdodCA9IHRoaXMucmVjdXJzZShhc3QuY2FsbGVlLCB0cnVlKTtcbiAgICAgIHJldHVybiBhc3QuZmlsdGVyID9cbiAgICAgICAgZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChhcmdzW2ldKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB2YWx1ZSA9IHJpZ2h0LmFwcGx5KHVuZGVmaW5lZCwgdmFsdWVzLCBpbnB1dHMpO1xuICAgICAgICAgIHJldHVybiBjb250ZXh0ID8ge2NvbnRleHQ6IHVuZGVmaW5lZCwgbmFtZTogdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9IDogdmFsdWU7XG4gICAgICAgIH0gOlxuICAgICAgICBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICAgIHZhciByaHMgPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgIGlmIChyaHMudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgZW5zdXJlU2FmZU9iamVjdChyaHMuY29udGV4dCwgc2VsZi5leHByZXNzaW9uKTtcbiAgICAgICAgICAgIGVuc3VyZVNhZmVGdW5jdGlvbihyaHMudmFsdWUsIHNlbGYuZXhwcmVzc2lvbik7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgdmFsdWVzLnB1c2goZW5zdXJlU2FmZU9iamVjdChhcmdzW2ldKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSwgc2VsZi5leHByZXNzaW9uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IGVuc3VyZVNhZmVPYmplY3QocmhzLnZhbHVlLmFwcGx5KHJocy5jb250ZXh0LCB2YWx1ZXMpLCBzZWxmLmV4cHJlc3Npb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogdmFsdWV9IDogdmFsdWU7XG4gICAgICAgIH07XG4gICAgY2FzZSBBU1QuQXNzaWdubWVudEV4cHJlc3Npb246XG4gICAgICBsZWZ0ID0gdGhpcy5yZWN1cnNlKGFzdC5sZWZ0LCB0cnVlLCAxKTtcbiAgICAgIHJpZ2h0ID0gdGhpcy5yZWN1cnNlKGFzdC5yaWdodCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICBlbnN1cmVTYWZlT2JqZWN0KGxocy52YWx1ZSwgc2VsZi5leHByZXNzaW9uKTtcbiAgICAgICAgZW5zdXJlU2FmZUFzc2lnbkNvbnRleHQobGhzLmNvbnRleHQpO1xuICAgICAgICBsaHMuY29udGV4dFtsaHMubmFtZV0gPSByaHM7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiByaHN9IDogcmhzO1xuICAgICAgfTtcbiAgICBjYXNlIEFTVC5BcnJheUV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5lbGVtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICBhcmdzLnB1c2goc2VsZi5yZWN1cnNlKGV4cHIpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICB2YWx1ZS5wdXNoKGFyZ3NbaV0oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogdmFsdWV9IDogdmFsdWU7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULk9iamVjdEV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICBhcmdzLnB1c2goe2tleTogcHJvcGVydHkua2V5LnR5cGUgPT09IEFTVC5JZGVudGlmaWVyID9cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LmtleS5uYW1lIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICgnJyArIHByb3BlcnR5LmtleS52YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgdmFsdWU6IHNlbGYucmVjdXJzZShwcm9wZXJ0eS52YWx1ZSlcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgdmFsdWVbYXJnc1tpXS5rZXldID0gYXJnc1tpXS52YWx1ZShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHZhbHVlfSA6IHZhbHVlO1xuICAgICAgfTtcbiAgICBjYXNlIEFTVC5UaGlzRXhwcmVzc2lvbjpcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogc2NvcGV9IDogc2NvcGU7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULk5HVmFsdWVQYXJhbWV0ZXI6XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFzc2lnbn0gOiBhc3NpZ247XG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICAndW5hcnkrJzogZnVuY3Rpb24oYXJndW1lbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBhcmd1bWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICBpZiAoaXNEZWZpbmVkKGFyZykpIHtcbiAgICAgICAgYXJnID0gK2FyZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZyA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAndW5hcnktJzogZnVuY3Rpb24oYXJndW1lbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBhcmd1bWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICBpZiAoaXNEZWZpbmVkKGFyZykpIHtcbiAgICAgICAgYXJnID0gLWFyZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZyA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAndW5hcnkhJzogZnVuY3Rpb24oYXJndW1lbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSAhYXJndW1lbnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSsnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHZhciBhcmcgPSBwbHVzRm4obGhzLCByaHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeS0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHZhciBhcmcgPSAoaXNEZWZpbmVkKGxocykgPyBsaHMgOiAwKSAtIChpc0RlZmluZWQocmhzKSA/IHJocyA6IDApO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSonOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpICogcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeS8nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIC8gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSUnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpICUgcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeT09PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPT09IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnkhPT0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpICE9PSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PT0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpID09IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnkhPSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgIT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeTwnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIDwgcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeT4nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpID4gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeTw9JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA8PSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Pj0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpID49IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnkmJic6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgJiYgcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeXx8JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB8fCByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAndGVybmFyeT86JzogZnVuY3Rpb24odGVzdCwgYWx0ZXJuYXRlLCBjb25zZXF1ZW50LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gdGVzdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPyBhbHRlcm5hdGUoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIDogY29uc2VxdWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICB2YWx1ZTogZnVuY3Rpb24odmFsdWUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7IHJldHVybiBjb250ZXh0ID8ge2NvbnRleHQ6IHVuZGVmaW5lZCwgbmFtZTogdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9IDogdmFsdWU7IH07XG4gIH0sXG4gIGlkZW50aWZpZXI6IGZ1bmN0aW9uKG5hbWUsIGV4cGVuc2l2ZUNoZWNrcywgY29udGV4dCwgY3JlYXRlLCBleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYmFzZSA9IGxvY2FscyAmJiAobmFtZSBpbiBsb2NhbHMpID8gbG9jYWxzIDogc2NvcGU7XG4gICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSAmJiBiYXNlICYmICEoYmFzZVtuYW1lXSkpIHtcbiAgICAgICAgYmFzZVtuYW1lXSA9IHt9O1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYmFzZSA/IGJhc2VbbmFtZV0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoZXhwZW5zaXZlQ2hlY2tzKSB7XG4gICAgICAgIGVuc3VyZVNhZmVPYmplY3QodmFsdWUsIGV4cHJlc3Npb24pO1xuICAgICAgfVxuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHtjb250ZXh0OiBiYXNlLCBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkTWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCwgY3JlYXRlLCBleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgcmhzO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgaWYgKGxocyAhPSBudWxsKSB7XG4gICAgICAgIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgcmhzID0gZ2V0U3RyaW5nVmFsdWUocmhzKTtcbiAgICAgICAgZW5zdXJlU2FmZU1lbWJlck5hbWUocmhzLCBleHByZXNzaW9uKTtcbiAgICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEgJiYgbGhzICYmICEobGhzW3Joc10pKSB7XG4gICAgICAgICAgbGhzW3Joc10gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IGxoc1tyaHNdO1xuICAgICAgICBlbnN1cmVTYWZlT2JqZWN0KHZhbHVlLCBleHByZXNzaW9uKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB7Y29udGV4dDogbGhzLCBuYW1lOiByaHMsIHZhbHVlOiB2YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgbm9uQ29tcHV0ZWRNZW1iZXI6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBleHBlbnNpdmVDaGVja3MsIGNvbnRleHQsIGNyZWF0ZSwgZXhwcmVzc2lvbikge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgaWYgKGNyZWF0ZSAmJiBjcmVhdGUgIT09IDEgJiYgbGhzICYmICEobGhzW3JpZ2h0XSkpIHtcbiAgICAgICAgbGhzW3JpZ2h0XSA9IHt9O1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gbGhzICE9IG51bGwgPyBsaHNbcmlnaHRdIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGV4cGVuc2l2ZUNoZWNrcyB8fCBpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZShyaWdodCkpIHtcbiAgICAgICAgZW5zdXJlU2FmZU9iamVjdCh2YWx1ZSwgZXhwcmVzc2lvbik7XG4gICAgICB9XG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICByZXR1cm4ge2NvbnRleHQ6IGxocywgbmFtZTogcmlnaHQsIHZhbHVlOiB2YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgaW5wdXRzOiBmdW5jdGlvbihpbnB1dCwgd2F0Y2hJZCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgdmFsdWUsIGxvY2FscywgaW5wdXRzKSB7XG4gICAgICBpZiAoaW5wdXRzKSByZXR1cm4gaW5wdXRzW3dhdGNoSWRdO1xuICAgICAgcmV0dXJuIGlucHV0KHNjb3BlLCB2YWx1ZSwgbG9jYWxzKTtcbiAgICB9O1xuICB9XG59O1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgUGFyc2VyID0gZnVuY3Rpb24obGV4ZXIsICRmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgdGhpcy5sZXhlciA9IGxleGVyO1xuICB0aGlzLiRmaWx0ZXIgPSAkZmlsdGVyO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLmFzdCA9IG5ldyBBU1QodGhpcy5sZXhlcik7XG4gIHRoaXMuYXN0Q29tcGlsZXIgPSBvcHRpb25zLmNzcCA/IG5ldyBBU1RJbnRlcnByZXRlcih0aGlzLmFzdCwgJGZpbHRlcikgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQVNUQ29tcGlsZXIodGhpcy5hc3QsICRmaWx0ZXIpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFBhcnNlcixcblxuICBwYXJzZTogZnVuY3Rpb24odGV4dCkge1xuICAgIHJldHVybiB0aGlzLmFzdENvbXBpbGVyLmNvbXBpbGUodGV4dCwgdGhpcy5vcHRpb25zLmV4cGVuc2l2ZUNoZWNrcyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGlzUG9zc2libHlEYW5nZXJvdXNNZW1iZXJOYW1lKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUgPT0gJ2NvbnN0cnVjdG9yJztcbn1cblxudmFyIG9iamVjdFZhbHVlT2YgPSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2Y7XG5cbmZ1bmN0aW9uIGdldFZhbHVlT2YodmFsdWUpIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUudmFsdWVPZikgPyB2YWx1ZS52YWx1ZU9mKCkgOiBvYmplY3RWYWx1ZU9mLmNhbGwodmFsdWUpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcGFyc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uXG4gKlxuICogYGBganNcbiAqICAgdmFyIGdldHRlciA9ICRwYXJzZSgndXNlci5uYW1lJyk7XG4gKiAgIHZhciBzZXR0ZXIgPSBnZXR0ZXIuYXNzaWduO1xuICogICB2YXIgY29udGV4dCA9IHt1c2VyOntuYW1lOidhbmd1bGFyJ319O1xuICogICB2YXIgbG9jYWxzID0ge3VzZXI6e25hbWU6J2xvY2FsJ319O1xuICpcbiAqICAgZXhwZWN0KGdldHRlcihjb250ZXh0KSkudG9FcXVhbCgnYW5ndWxhcicpO1xuICogICBzZXR0ZXIoY29udGV4dCwgJ25ld1ZhbHVlJyk7XG4gKiAgIGV4cGVjdChjb250ZXh0LnVzZXIubmFtZSkudG9FcXVhbCgnbmV3VmFsdWUnKTtcbiAqICAgZXhwZWN0KGdldHRlcihjb250ZXh0LCBsb2NhbHMpKS50b0VxdWFsKCdsb2NhbCcpO1xuICogYGBgXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICpcbiAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICogICAgICBgY29udGV4dGAuXG4gKlxuICogICAgVGhlIHJldHVybmVkIGZ1bmN0aW9uIGFsc28gaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqICAgICAgKiBgbGl0ZXJhbGAg4oCTIGB7Ym9vbGVhbn1gIOKAkyB3aGV0aGVyIHRoZSBleHByZXNzaW9uJ3MgdG9wLWxldmVsIG5vZGUgaXMgYSBKYXZhU2NyaXB0XG4gKiAgICAgICAgbGl0ZXJhbC5cbiAqICAgICAgKiBgY29uc3RhbnRgIOKAkyBge2Jvb2xlYW59YCDigJMgd2hldGhlciB0aGUgZXhwcmVzc2lvbiBpcyBtYWRlIGVudGlyZWx5IG9mIEphdmFTY3JpcHRcbiAqICAgICAgICBjb25zdGFudCBsaXRlcmFscy5cbiAqICAgICAgKiBgYXNzaWduYCDigJMgYHs/ZnVuY3Rpb24oY29udGV4dCwgdmFsdWUpfWAg4oCTIGlmIHRoZSBleHByZXNzaW9uIGlzIGFzc2lnbmFibGUsIHRoaXMgd2lsbCBiZVxuICogICAgICAgIHNldCB0byBhIGZ1bmN0aW9uIHRvIGNoYW5nZSBpdHMgdmFsdWUgb24gdGhlIGdpdmVuIGNvbnRleHQuXG4gKlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRwYXJzZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgJHBhcnNlUHJvdmlkZXJgIGNhbiBiZSB1c2VkIGZvciBjb25maWd1cmluZyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUge0BsaW5rIG5nLiRwYXJzZSAkcGFyc2V9XG4gKiAgc2VydmljZS5cbiAqL1xuZnVuY3Rpb24gJFBhcnNlUHJvdmlkZXIoKSB7XG4gIHZhciBjYWNoZURlZmF1bHQgPSBjcmVhdGVNYXAoKTtcbiAgdmFyIGNhY2hlRXhwZW5zaXZlID0gY3JlYXRlTWFwKCk7XG5cbiAgdGhpcy4kZ2V0ID0gWyckZmlsdGVyJywgZnVuY3Rpb24oJGZpbHRlcikge1xuICAgIHZhciBub1Vuc2FmZUV2YWwgPSBjc3AoKS5ub1Vuc2FmZUV2YWw7XG4gICAgdmFyICRwYXJzZU9wdGlvbnMgPSB7XG4gICAgICAgICAgY3NwOiBub1Vuc2FmZUV2YWwsXG4gICAgICAgICAgZXhwZW5zaXZlQ2hlY2tzOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICAkcGFyc2VPcHRpb25zRXhwZW5zaXZlID0ge1xuICAgICAgICAgIGNzcDogbm9VbnNhZmVFdmFsLFxuICAgICAgICAgIGV4cGVuc2l2ZUNoZWNrczogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICRwYXJzZShleHAsIGludGVyY2VwdG9yRm4sIGV4cGVuc2l2ZUNoZWNrcykge1xuICAgICAgdmFyIHBhcnNlZEV4cHJlc3Npb24sIG9uZVRpbWUsIGNhY2hlS2V5O1xuXG4gICAgICBzd2l0Y2ggKHR5cGVvZiBleHApIHtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICBleHAgPSBleHAudHJpbSgpO1xuICAgICAgICAgIGNhY2hlS2V5ID0gZXhwO1xuXG4gICAgICAgICAgdmFyIGNhY2hlID0gKGV4cGVuc2l2ZUNoZWNrcyA/IGNhY2hlRXhwZW5zaXZlIDogY2FjaGVEZWZhdWx0KTtcbiAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uID0gY2FjaGVbY2FjaGVLZXldO1xuXG4gICAgICAgICAgaWYgKCFwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICBpZiAoZXhwLmNoYXJBdCgwKSA9PT0gJzonICYmIGV4cC5jaGFyQXQoMSkgPT09ICc6Jykge1xuICAgICAgICAgICAgICBvbmVUaW1lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgZXhwID0gZXhwLnN1YnN0cmluZygyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwYXJzZU9wdGlvbnMgPSBleHBlbnNpdmVDaGVja3MgPyAkcGFyc2VPcHRpb25zRXhwZW5zaXZlIDogJHBhcnNlT3B0aW9ucztcbiAgICAgICAgICAgIHZhciBsZXhlciA9IG5ldyBMZXhlcihwYXJzZU9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIobGV4ZXIsICRmaWx0ZXIsIHBhcnNlT3B0aW9ucyk7XG4gICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uID0gcGFyc2VyLnBhcnNlKGV4cCk7XG4gICAgICAgICAgICBpZiAocGFyc2VkRXhwcmVzc2lvbi5jb25zdGFudCkge1xuICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob25lVGltZSkge1xuICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IHBhcnNlZEV4cHJlc3Npb24ubGl0ZXJhbCA/XG4gICAgICAgICAgICAgICAgICBvbmVUaW1lTGl0ZXJhbFdhdGNoRGVsZWdhdGUgOiBvbmVUaW1lV2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VkRXhwcmVzc2lvbi5pbnB1dHMpIHtcbiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBpbnB1dHNXYXRjaERlbGVnYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FjaGVbY2FjaGVLZXldID0gcGFyc2VkRXhwcmVzc2lvbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFkZEludGVyY2VwdG9yKHBhcnNlZEV4cHJlc3Npb24sIGludGVyY2VwdG9yRm4pO1xuXG4gICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICByZXR1cm4gYWRkSW50ZXJjZXB0b3IoZXhwLCBpbnRlcmNlcHRvckZuKTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihub29wLCBpbnRlcmNlcHRvckZuKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdWYWx1ZSwgb2xkVmFsdWVPZlZhbHVlKSB7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PSBudWxsIHx8IG9sZFZhbHVlT2ZWYWx1ZSA9PSBudWxsKSB7IC8vIG51bGwvdW5kZWZpbmVkXG4gICAgICAgIHJldHVybiBuZXdWYWx1ZSA9PT0gb2xkVmFsdWVPZlZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnb2JqZWN0Jykge1xuXG4gICAgICAgIC8vIGF0dGVtcHQgdG8gY29udmVydCB0aGUgdmFsdWUgdG8gYSBwcmltaXRpdmUgdHlwZVxuICAgICAgICAvLyBUT0RPKGRvY3MpOiBhZGQgYSBub3RlIHRvIGRvY3MgdGhhdCBieSBpbXBsZW1lbnRpbmcgdmFsdWVPZiBldmVuIG9iamVjdHMgYW5kIGFycmF5cyBjYW5cbiAgICAgICAgLy8gICAgICAgICAgICAgYmUgY2hlYXBseSBkaXJ0eS1jaGVja2VkXG4gICAgICAgIG5ld1ZhbHVlID0gZ2V0VmFsdWVPZihuZXdWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAvLyBvYmplY3RzL2FycmF5cyBhcmUgbm90IHN1cHBvcnRlZCAtIGRlZXAtd2F0Y2hpbmcgdGhlbSB3b3VsZCBiZSB0b28gZXhwZW5zaXZlXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmFsbC10aHJvdWdoIHRvIHRoZSBwcmltaXRpdmUgZXF1YWxpdHkgY2hlY2tcbiAgICAgIH1cblxuICAgICAgLy9QcmltaXRpdmUgb3IgTmFOXG4gICAgICByZXR1cm4gbmV3VmFsdWUgPT09IG9sZFZhbHVlT2ZWYWx1ZSB8fCAobmV3VmFsdWUgIT09IG5ld1ZhbHVlICYmIG9sZFZhbHVlT2ZWYWx1ZSAhPT0gb2xkVmFsdWVPZlZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnB1dHNXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHBhcnNlZEV4cHJlc3Npb24sIHByZXR0eVByaW50RXhwcmVzc2lvbikge1xuICAgICAgdmFyIGlucHV0RXhwcmVzc2lvbnMgPSBwYXJzZWRFeHByZXNzaW9uLmlucHV0cztcbiAgICAgIHZhciBsYXN0UmVzdWx0O1xuXG4gICAgICBpZiAoaW5wdXRFeHByZXNzaW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdmFyIG9sZElucHV0VmFsdWVPZiA9IGV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2s7IC8vIGluaXQgdG8gc29tZXRoaW5nIHVuaXF1ZSBzbyB0aGF0IGVxdWFscyBjaGVjayBmYWlsc1xuICAgICAgICBpbnB1dEV4cHJlc3Npb25zID0gaW5wdXRFeHByZXNzaW9uc1swXTtcbiAgICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBleHByZXNzaW9uSW5wdXRXYXRjaChzY29wZSkge1xuICAgICAgICAgIHZhciBuZXdJbnB1dFZhbHVlID0gaW5wdXRFeHByZXNzaW9ucyhzY29wZSk7XG4gICAgICAgICAgaWYgKCFleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrKG5ld0lucHV0VmFsdWUsIG9sZElucHV0VmFsdWVPZikpIHtcbiAgICAgICAgICAgIGxhc3RSZXN1bHQgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgW25ld0lucHV0VmFsdWVdKTtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVPZiA9IG5ld0lucHV0VmFsdWUgJiYgZ2V0VmFsdWVPZihuZXdJbnB1dFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICAgIH0sIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcHJldHR5UHJpbnRFeHByZXNzaW9uKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9sZElucHV0VmFsdWVPZlZhbHVlcyA9IFtdO1xuICAgICAgdmFyIG9sZElucHV0VmFsdWVzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dEV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzW2ldID0gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjazsgLy8gaW5pdCB0byBzb21ldGhpbmcgdW5pcXVlIHNvIHRoYXQgZXF1YWxzIGNoZWNrIGZhaWxzXG4gICAgICAgIG9sZElucHV0VmFsdWVzW2ldID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBleHByZXNzaW9uSW5wdXRzV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbnB1dEV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICB2YXIgbmV3SW5wdXRWYWx1ZSA9IGlucHV0RXhwcmVzc2lvbnNbaV0oc2NvcGUpO1xuICAgICAgICAgIGlmIChjaGFuZ2VkIHx8IChjaGFuZ2VkID0gIWV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2sobmV3SW5wdXRWYWx1ZSwgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzW2ldKSkpIHtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVzW2ldID0gbmV3SW5wdXRWYWx1ZTtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSA9IG5ld0lucHV0VmFsdWUgJiYgZ2V0VmFsdWVPZihuZXdJbnB1dFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgIGxhc3RSZXN1bHQgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb2xkSW5wdXRWYWx1ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICB9LCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHByZXR0eVByaW50RXhwcmVzc2lvbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lVGltZVdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgdmFyIHVud2F0Y2gsIGxhc3RWYWx1ZTtcbiAgICAgIHJldHVybiB1bndhdGNoID0gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG9uZVRpbWVXYXRjaChzY29wZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7XG4gICAgICB9LCBmdW5jdGlvbiBvbmVUaW1lTGlzdGVuZXIodmFsdWUsIG9sZCwgc2NvcGUpIHtcbiAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgdW53YXRjaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBvYmplY3RFcXVhbGl0eSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHBhcnNlZEV4cHJlc3Npb24pIHtcbiAgICAgIHZhciB1bndhdGNoLCBsYXN0VmFsdWU7XG4gICAgICByZXR1cm4gdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBvbmVUaW1lV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgfSwgZnVuY3Rpb24gb25lVGltZUxpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKSB7XG4gICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHZhbHVlLCBvbGQsIHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBbGxEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0FsbERlZmluZWQobGFzdFZhbHVlKSkgdW53YXRjaCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBvYmplY3RFcXVhbGl0eSk7XG5cbiAgICAgIGZ1bmN0aW9uIGlzQWxsRGVmaW5lZCh2YWx1ZSkge1xuICAgICAgICB2YXIgYWxsRGVmaW5lZCA9IHRydWU7XG4gICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIGlmICghaXNEZWZpbmVkKHZhbCkpIGFsbERlZmluZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhbGxEZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgdW53YXRjaDtcbiAgICAgIHJldHVybiB1bndhdGNoID0gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGNvbnN0YW50V2F0Y2goc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgfSwgZnVuY3Rpb24gY29uc3RhbnRMaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHVud2F0Y2goKTtcbiAgICAgIH0sIG9iamVjdEVxdWFsaXR5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKSB7XG4gICAgICBpZiAoIWludGVyY2VwdG9yRm4pIHJldHVybiBwYXJzZWRFeHByZXNzaW9uO1xuICAgICAgdmFyIHdhdGNoRGVsZWdhdGUgPSBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZTtcbiAgICAgIHZhciB1c2VJbnB1dHMgPSBmYWxzZTtcblxuICAgICAgdmFyIHJlZ3VsYXJXYXRjaCA9XG4gICAgICAgICAgd2F0Y2hEZWxlZ2F0ZSAhPT0gb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlICYmXG4gICAgICAgICAgd2F0Y2hEZWxlZ2F0ZSAhPT0gb25lVGltZVdhdGNoRGVsZWdhdGU7XG5cbiAgICAgIHZhciBmbiA9IHJlZ3VsYXJXYXRjaCA/IGZ1bmN0aW9uIHJlZ3VsYXJJbnRlcmNlcHRlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdXNlSW5wdXRzICYmIGlucHV0cyA/IGlucHV0c1swXSA6IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICByZXR1cm4gaW50ZXJjZXB0b3JGbih2YWx1ZSwgc2NvcGUsIGxvY2Fscyk7XG4gICAgICB9IDogZnVuY3Rpb24gb25lVGltZUludGVyY2VwdGVkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGludGVyY2VwdG9yRm4odmFsdWUsIHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAvLyB3ZSBvbmx5IHJldHVybiB0aGUgaW50ZXJjZXB0b3IncyByZXN1bHQgaWYgdGhlXG4gICAgICAgIC8vIGluaXRpYWwgdmFsdWUgaXMgZGVmaW5lZCAoZm9yIGJpbmQtb25jZSlcbiAgICAgICAgcmV0dXJuIGlzRGVmaW5lZCh2YWx1ZSkgPyByZXN1bHQgOiB2YWx1ZTtcbiAgICAgIH07XG5cbiAgICAgIC8vIFByb3BhZ2F0ZSAkJHdhdGNoRGVsZWdhdGVzIG90aGVyIHRoZW4gaW5wdXRzV2F0Y2hEZWxlZ2F0ZVxuICAgICAgaWYgKHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlICYmXG4gICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgIT09IGlucHV0c1dhdGNoRGVsZWdhdGUpIHtcbiAgICAgICAgZm4uJCR3YXRjaERlbGVnYXRlID0gcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGU7XG4gICAgICB9IGVsc2UgaWYgKCFpbnRlcmNlcHRvckZuLiRzdGF0ZWZ1bCkge1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbiBpbnRlcmNlcHRvciwgYnV0IG5vIHdhdGNoRGVsZWdhdGUgdGhlbiB0cmVhdCB0aGUgaW50ZXJjZXB0b3IgbGlrZVxuICAgICAgICAvLyB3ZSB0cmVhdCBmaWx0ZXJzIC0gaXQgaXMgYXNzdW1lZCB0byBiZSBhIHB1cmUgZnVuY3Rpb24gdW5sZXNzIGZsYWdnZWQgd2l0aCAkc3RhdGVmdWxcbiAgICAgICAgZm4uJCR3YXRjaERlbGVnYXRlID0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgdXNlSW5wdXRzID0gIXBhcnNlZEV4cHJlc3Npb24uaW5wdXRzO1xuICAgICAgICBmbi5pbnB1dHMgPSBwYXJzZWRFeHByZXNzaW9uLmlucHV0cyA/IHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzIDogW3BhcnNlZEV4cHJlc3Npb25dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm47XG4gICAgfVxuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHFcbiAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHNlcnZpY2UgdGhhdCBoZWxwcyB5b3UgcnVuIGZ1bmN0aW9ucyBhc3luY2hyb25vdXNseSwgYW5kIHVzZSB0aGVpciByZXR1cm4gdmFsdWVzIChvciBleGNlcHRpb25zKVxuICogd2hlbiB0aGV5IGFyZSBkb25lIHByb2Nlc3NpbmcuXG4gKlxuICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBwcm9taXNlcy9kZWZlcnJlZCBvYmplY3RzIGluc3BpcmVkIGJ5XG4gKiBbS3JpcyBLb3dhbCdzIFFdKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcSkuXG4gKlxuICogJHEgY2FuIGJlIHVzZWQgaW4gdHdvIGZhc2hpb25zIC0tLSBvbmUgd2hpY2ggaXMgbW9yZSBzaW1pbGFyIHRvIEtyaXMgS293YWwncyBRIG9yIGpRdWVyeSdzIERlZmVycmVkXG4gKiBpbXBsZW1lbnRhdGlvbnMsIGFuZCB0aGUgb3RoZXIgd2hpY2ggcmVzZW1ibGVzIEVTNiBwcm9taXNlcyB0byBzb21lIGRlZ3JlZS5cbiAqXG4gKiAjICRxIGNvbnN0cnVjdG9yXG4gKlxuICogVGhlIHN0cmVhbWxpbmVkIEVTNiBzdHlsZSBwcm9taXNlIGlzIGVzc2VudGlhbGx5IGp1c3QgdXNpbmcgJHEgYXMgYSBjb25zdHJ1Y3RvciB3aGljaCB0YWtlcyBhIGByZXNvbHZlcmBcbiAqIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudC4gVGhpcyBpcyBzaW1pbGFyIHRvIHRoZSBuYXRpdmUgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiBmcm9tIEVTNiBIYXJtb255LFxuICogc2VlIFtNRE5dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2UpLlxuICpcbiAqIFdoaWxlIHRoZSBjb25zdHJ1Y3Rvci1zdHlsZSB1c2UgaXMgc3VwcG9ydGVkLCBub3QgYWxsIG9mIHRoZSBzdXBwb3J0aW5nIG1ldGhvZHMgZnJvbSBFUzYgSGFybW9ueSBwcm9taXNlcyBhcmVcbiAqIGF2YWlsYWJsZSB5ZXQuXG4gKlxuICogSXQgY2FuIGJlIHVzZWQgbGlrZSBzbzpcbiAqXG4gKiBgYGBqc1xuICogICAvLyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBleGFtcGxlIGxldCdzIGFzc3VtZSB0aGF0IHZhcmlhYmxlcyBgJHFgIGFuZCBgb2tUb0dyZWV0YFxuICogICAvLyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGUgKHRoZXkgY291bGQgaGF2ZSBiZWVuIGluamVjdGVkIG9yIHBhc3NlZCBpbikuXG4gKlxuICogICBmdW5jdGlvbiBhc3luY0dyZWV0KG5hbWUpIHtcbiAqICAgICAvLyBwZXJmb3JtIHNvbWUgYXN5bmNocm9ub3VzIG9wZXJhdGlvbiwgcmVzb2x2ZSBvciByZWplY3QgdGhlIHByb21pc2Ugd2hlbiBhcHByb3ByaWF0ZS5cbiAqICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gKiAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7XG4gKiAgICAgICAgICAgcmVzb2x2ZSgnSGVsbG8sICcgKyBuYW1lICsgJyEnKTtcbiAqICAgICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgICByZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTtcbiAqICAgICAgICAgfVxuICogICAgICAgfSwgMTAwMCk7XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqXG4gKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpO1xuICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAqICAgICBhbGVydCgnU3VjY2VzczogJyArIGdyZWV0aW5nKTtcbiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogTm90ZTogcHJvZ3Jlc3Mvbm90aWZ5IGNhbGxiYWNrcyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgdmlhIHRoZSBFUzYtc3R5bGUgaW50ZXJmYWNlLlxuICpcbiAqIE5vdGU6IHVubGlrZSBFUzYgYmVoYXZpb3VyLCBhbiBleGNlcHRpb24gdGhyb3duIGluIHRoZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB3aWxsIE5PVCBpbXBsaWNpdGx5IHJlamVjdCB0aGUgcHJvbWlzZS5cbiAqXG4gKiBIb3dldmVyLCB0aGUgbW9yZSB0cmFkaXRpb25hbCBDb21tb25KUy1zdHlsZSB1c2FnZSBpcyBzdGlsbCBhdmFpbGFibGUsIGFuZCBkb2N1bWVudGVkIGJlbG93LlxuICpcbiAqIFtUaGUgQ29tbW9uSlMgUHJvbWlzZSBwcm9wb3NhbF0oaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvUHJvbWlzZXMpIGRlc2NyaWJlcyBhIHByb21pc2UgYXMgYW5cbiAqIGludGVyZmFjZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSByZXN1bHQgb2YgYW4gYWN0aW9uIHRoYXQgaXNcbiAqIHBlcmZvcm1lZCBhc3luY2hyb25vdXNseSwgYW5kIG1heSBvciBtYXkgbm90IGJlIGZpbmlzaGVkIGF0IGFueSBnaXZlbiBwb2ludCBpbiB0aW1lLlxuICpcbiAqIEZyb20gdGhlIHBlcnNwZWN0aXZlIG9mIGRlYWxpbmcgd2l0aCBlcnJvciBoYW5kbGluZywgZGVmZXJyZWQgYW5kIHByb21pc2UgQVBJcyBhcmUgdG9cbiAqIGFzeW5jaHJvbm91cyBwcm9ncmFtbWluZyB3aGF0IGB0cnlgLCBgY2F0Y2hgIGFuZCBgdGhyb3dgIGtleXdvcmRzIGFyZSB0byBzeW5jaHJvbm91cyBwcm9ncmFtbWluZy5cbiAqXG4gKiBgYGBqc1xuICogICAvLyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBleGFtcGxlIGxldCdzIGFzc3VtZSB0aGF0IHZhcmlhYmxlcyBgJHFgIGFuZCBgb2tUb0dyZWV0YFxuICogICAvLyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGUgKHRoZXkgY291bGQgaGF2ZSBiZWVuIGluamVjdGVkIG9yIHBhc3NlZCBpbikuXG4gKlxuICogICBmdW5jdGlvbiBhc3luY0dyZWV0KG5hbWUpIHtcbiAqICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICpcbiAqICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgZGVmZXJyZWQubm90aWZ5KCdBYm91dCB0byBncmVldCAnICsgbmFtZSArICcuJyk7XG4gKlxuICogICAgICAgaWYgKG9rVG9HcmVldChuYW1lKSkge1xuICogICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCdIZWxsbywgJyArIG5hbWUgKyAnIScpO1xuICogICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCdHcmVldGluZyAnICsgbmFtZSArICcgaXMgbm90IGFsbG93ZWQuJyk7XG4gKiAgICAgICB9XG4gKiAgICAgfSwgMTAwMCk7XG4gKlxuICogICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICogICB9XG4gKlxuICogICB2YXIgcHJvbWlzZSA9IGFzeW5jR3JlZXQoJ1JvYmluIEhvb2QnKTtcbiAqICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gKiAgICAgYWxlcnQoJ1N1Y2Nlc3M6ICcgKyBncmVldGluZyk7XG4gKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICogICAgIGFsZXJ0KCdGYWlsZWQ6ICcgKyByZWFzb24pO1xuICogICB9LCBmdW5jdGlvbih1cGRhdGUpIHtcbiAqICAgICBhbGVydCgnR290IG5vdGlmaWNhdGlvbjogJyArIHVwZGF0ZSk7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogQXQgZmlyc3QgaXQgbWlnaHQgbm90IGJlIG9idmlvdXMgd2h5IHRoaXMgZXh0cmEgY29tcGxleGl0eSBpcyB3b3J0aCB0aGUgdHJvdWJsZS4gVGhlIHBheW9mZlxuICogY29tZXMgaW4gdGhlIHdheSBvZiBndWFyYW50ZWVzIHRoYXQgcHJvbWlzZSBhbmQgZGVmZXJyZWQgQVBJcyBtYWtlLCBzZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvdW5jb21tb25qcy9ibG9iL21hc3Rlci9wcm9taXNlcy9zcGVjaWZpY2F0aW9uLm1kLlxuICpcbiAqIEFkZGl0aW9uYWxseSB0aGUgcHJvbWlzZSBhcGkgYWxsb3dzIGZvciBjb21wb3NpdGlvbiB0aGF0IGlzIHZlcnkgaGFyZCB0byBkbyB3aXRoIHRoZVxuICogdHJhZGl0aW9uYWwgY2FsbGJhY2sgKFtDUFNdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29udGludWF0aW9uLXBhc3Npbmdfc3R5bGUpKSBhcHByb2FjaC5cbiAqIEZvciBtb3JlIG9uIHRoaXMgcGxlYXNlIHNlZSB0aGUgW1EgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xKSBlc3BlY2lhbGx5IHRoZVxuICogc2VjdGlvbiBvbiBzZXJpYWwgb3IgcGFyYWxsZWwgam9pbmluZyBvZiBwcm9taXNlcy5cbiAqXG4gKiAjIFRoZSBEZWZlcnJlZCBBUElcbiAqXG4gKiBBIG5ldyBpbnN0YW5jZSBvZiBkZWZlcnJlZCBpcyBjb25zdHJ1Y3RlZCBieSBjYWxsaW5nIGAkcS5kZWZlcigpYC5cbiAqXG4gKiBUaGUgcHVycG9zZSBvZiB0aGUgZGVmZXJyZWQgb2JqZWN0IGlzIHRvIGV4cG9zZSB0aGUgYXNzb2NpYXRlZCBQcm9taXNlIGluc3RhbmNlIGFzIHdlbGwgYXMgQVBJc1xuICogdGhhdCBjYW4gYmUgdXNlZCBmb3Igc2lnbmFsaW5nIHRoZSBzdWNjZXNzZnVsIG9yIHVuc3VjY2Vzc2Z1bCBjb21wbGV0aW9uLCBhcyB3ZWxsIGFzIHRoZSBzdGF0dXNcbiAqIG9mIHRoZSB0YXNrLlxuICpcbiAqICoqTWV0aG9kcyoqXG4gKlxuICogLSBgcmVzb2x2ZSh2YWx1ZSlgIOKAkyByZXNvbHZlcyB0aGUgZGVyaXZlZCBwcm9taXNlIHdpdGggdGhlIGB2YWx1ZWAuIElmIHRoZSB2YWx1ZSBpcyBhIHJlamVjdGlvblxuICogICBjb25zdHJ1Y3RlZCB2aWEgYCRxLnJlamVjdGAsIHRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgaW5zdGVhZC5cbiAqIC0gYHJlamVjdChyZWFzb24pYCDigJMgcmVqZWN0cyB0aGUgZGVyaXZlZCBwcm9taXNlIHdpdGggdGhlIGByZWFzb25gLiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAqICAgcmVzb2x2aW5nIGl0IHdpdGggYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhIGAkcS5yZWplY3RgLlxuICogLSBgbm90aWZ5KHZhbHVlKWAgLSBwcm92aWRlcyB1cGRhdGVzIG9uIHRoZSBzdGF0dXMgb2YgdGhlIHByb21pc2UncyBleGVjdXRpb24uIFRoaXMgbWF5IGJlIGNhbGxlZFxuICogICBtdWx0aXBsZSB0aW1lcyBiZWZvcmUgdGhlIHByb21pc2UgaXMgZWl0aGVyIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICpcbiAqICoqUHJvcGVydGllcyoqXG4gKlxuICogLSBwcm9taXNlIOKAkyBge1Byb21pc2V9YCDigJMgcHJvbWlzZSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZGVmZXJyZWQuXG4gKlxuICpcbiAqICMgVGhlIFByb21pc2UgQVBJXG4gKlxuICogQSBuZXcgcHJvbWlzZSBpbnN0YW5jZSBpcyBjcmVhdGVkIHdoZW4gYSBkZWZlcnJlZCBpbnN0YW5jZSBpcyBjcmVhdGVkIGFuZCBjYW4gYmUgcmV0cmlldmVkIGJ5XG4gKiBjYWxsaW5nIGBkZWZlcnJlZC5wcm9taXNlYC5cbiAqXG4gKiBUaGUgcHVycG9zZSBvZiB0aGUgcHJvbWlzZSBvYmplY3QgaXMgdG8gYWxsb3cgZm9yIGludGVyZXN0ZWQgcGFydGllcyB0byBnZXQgYWNjZXNzIHRvIHRoZSByZXN1bHRcbiAqIG9mIHRoZSBkZWZlcnJlZCB0YXNrIHdoZW4gaXQgY29tcGxldGVzLlxuICpcbiAqICoqTWV0aG9kcyoqXG4gKlxuICogLSBgdGhlbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2ssIG5vdGlmeUNhbGxiYWNrKWAg4oCTIHJlZ2FyZGxlc3Mgb2Ygd2hlbiB0aGUgcHJvbWlzZSB3YXMgb3JcbiAqICAgd2lsbCBiZSByZXNvbHZlZCBvciByZWplY3RlZCwgYHRoZW5gIGNhbGxzIG9uZSBvZiB0aGUgc3VjY2VzcyBvciBlcnJvciBjYWxsYmFja3MgYXN5bmNocm9ub3VzbHlcbiAqICAgYXMgc29vbiBhcyB0aGUgcmVzdWx0IGlzIGF2YWlsYWJsZS4gVGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQ6IHRoZSByZXN1bHRcbiAqICAgb3IgcmVqZWN0aW9uIHJlYXNvbi4gQWRkaXRpb25hbGx5LCB0aGUgbm90aWZ5IGNhbGxiYWNrIG1heSBiZSBjYWxsZWQgemVybyBvciBtb3JlIHRpbWVzIHRvXG4gKiAgIHByb3ZpZGUgYSBwcm9ncmVzcyBpbmRpY2F0aW9uLCBiZWZvcmUgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gKlxuICogICBUaGlzIG1ldGhvZCAqcmV0dXJucyBhIG5ldyBwcm9taXNlKiB3aGljaCBpcyByZXNvbHZlZCBvciByZWplY3RlZCB2aWEgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGVcbiAqICAgYHN1Y2Nlc3NDYWxsYmFja2AsIGBlcnJvckNhbGxiYWNrYCAodW5sZXNzIHRoYXQgdmFsdWUgaXMgYSBwcm9taXNlLCBpbiB3aGljaCBjYXNlIGl0IGlzIHJlc29sdmVkXG4gKiAgIHdpdGggdGhlIHZhbHVlIHdoaWNoIGlzIHJlc29sdmVkIGluIHRoYXQgcHJvbWlzZSB1c2luZ1xuICogICBbcHJvbWlzZSBjaGFpbmluZ10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZXM2L3Byb21pc2VzLyN0b2MtcHJvbWlzZXMtcXVldWVzKSkuXG4gKiAgIEl0IGFsc28gbm90aWZpZXMgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBub3RpZnlDYWxsYmFja2AgbWV0aG9kLiBUaGUgcHJvbWlzZSBjYW5ub3QgYmVcbiAqICAgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgZnJvbSB0aGUgbm90aWZ5Q2FsbGJhY2sgbWV0aG9kLlxuICpcbiAqIC0gYGNhdGNoKGVycm9yQ2FsbGJhY2spYCDigJMgc2hvcnRoYW5kIGZvciBgcHJvbWlzZS50aGVuKG51bGwsIGVycm9yQ2FsbGJhY2spYFxuICpcbiAqIC0gYGZpbmFsbHkoY2FsbGJhY2ssIG5vdGlmeUNhbGxiYWNrKWAg4oCTIGFsbG93cyB5b3UgdG8gb2JzZXJ2ZSBlaXRoZXIgdGhlIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBvZiBhIHByb21pc2UsXG4gKiAgIGJ1dCB0byBkbyBzbyB3aXRob3V0IG1vZGlmeWluZyB0aGUgZmluYWwgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIHRvIHJlbGVhc2UgcmVzb3VyY2VzIG9yIGRvIHNvbWVcbiAqICAgY2xlYW4tdXAgdGhhdCBuZWVkcyB0byBiZSBkb25lIHdoZXRoZXIgdGhlIHByb21pc2Ugd2FzIHJlamVjdGVkIG9yIHJlc29sdmVkLiBTZWUgdGhlIFtmdWxsXG4gKiAgIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcS93aWtpL0FQSS1SZWZlcmVuY2UjcHJvbWlzZWZpbmFsbHljYWxsYmFjaykgZm9yXG4gKiAgIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogIyBDaGFpbmluZyBwcm9taXNlc1xuICpcbiAqIEJlY2F1c2UgY2FsbGluZyB0aGUgYHRoZW5gIG1ldGhvZCBvZiBhIHByb21pc2UgcmV0dXJucyBhIG5ldyBkZXJpdmVkIHByb21pc2UsIGl0IGlzIGVhc2lseVxuICogcG9zc2libGUgdG8gY3JlYXRlIGEgY2hhaW4gb2YgcHJvbWlzZXM6XG4gKlxuICogYGBganNcbiAqICAgcHJvbWlzZUIgPSBwcm9taXNlQS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICogICAgIHJldHVybiByZXN1bHQgKyAxO1xuICogICB9KTtcbiAqXG4gKiAgIC8vIHByb21pc2VCIHdpbGwgYmUgcmVzb2x2ZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgcHJvbWlzZUEgaXMgcmVzb2x2ZWQgYW5kIGl0cyB2YWx1ZVxuICogICAvLyB3aWxsIGJlIHRoZSByZXN1bHQgb2YgcHJvbWlzZUEgaW5jcmVtZW50ZWQgYnkgMVxuICogYGBgXG4gKlxuICogSXQgaXMgcG9zc2libGUgdG8gY3JlYXRlIGNoYWlucyBvZiBhbnkgbGVuZ3RoIGFuZCBzaW5jZSBhIHByb21pc2UgY2FuIGJlIHJlc29sdmVkIHdpdGggYW5vdGhlclxuICogcHJvbWlzZSAod2hpY2ggd2lsbCBkZWZlciBpdHMgcmVzb2x1dGlvbiBmdXJ0aGVyKSwgaXQgaXMgcG9zc2libGUgdG8gcGF1c2UvZGVmZXIgcmVzb2x1dGlvbiBvZlxuICogdGhlIHByb21pc2VzIGF0IGFueSBwb2ludCBpbiB0aGUgY2hhaW4uIFRoaXMgbWFrZXMgaXQgcG9zc2libGUgdG8gaW1wbGVtZW50IHBvd2VyZnVsIEFQSXMgbGlrZVxuICogJGh0dHAncyByZXNwb25zZSBpbnRlcmNlcHRvcnMuXG4gKlxuICpcbiAqICMgRGlmZmVyZW5jZXMgYmV0d2VlbiBLcmlzIEtvd2FsJ3MgUSBhbmQgJHFcbiAqXG4gKiAgVGhlcmUgYXJlIHR3byBtYWluIGRpZmZlcmVuY2VzOlxuICpcbiAqIC0gJHEgaXMgaW50ZWdyYXRlZCB3aXRoIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZX0gU2NvcGUgbW9kZWwgb2JzZXJ2YXRpb25cbiAqICAgbWVjaGFuaXNtIGluIGFuZ3VsYXIsIHdoaWNoIG1lYW5zIGZhc3RlciBwcm9wYWdhdGlvbiBvZiByZXNvbHV0aW9uIG9yIHJlamVjdGlvbiBpbnRvIHlvdXJcbiAqICAgbW9kZWxzIGFuZCBhdm9pZGluZyB1bm5lY2Vzc2FyeSBicm93c2VyIHJlcGFpbnRzLCB3aGljaCB3b3VsZCByZXN1bHQgaW4gZmxpY2tlcmluZyBVSS5cbiAqIC0gUSBoYXMgbWFueSBtb3JlIGZlYXR1cmVzIHRoYW4gJHEsIGJ1dCB0aGF0IGNvbWVzIGF0IGEgY29zdCBvZiBieXRlcy4gJHEgaXMgdGlueSwgYnV0IGNvbnRhaW5zXG4gKiAgIGFsbCB0aGUgaW1wb3J0YW50IGZ1bmN0aW9uYWxpdHkgbmVlZGVkIGZvciBjb21tb24gYXN5bmMgdGFza3MuXG4gKlxuICogICMgVGVzdGluZ1xuICpcbiAqICBgYGBqc1xuICogICAgaXQoJ3Nob3VsZCBzaW11bGF0ZSBwcm9taXNlJywgaW5qZWN0KGZ1bmN0aW9uKCRxLCAkcm9vdFNjb3BlKSB7XG4gKiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gKiAgICAgIHZhciBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcbiAqICAgICAgdmFyIHJlc29sdmVkVmFsdWU7XG4gKlxuICogICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsgcmVzb2x2ZWRWYWx1ZSA9IHZhbHVlOyB9KTtcbiAqICAgICAgZXhwZWN0KHJlc29sdmVkVmFsdWUpLnRvQmVVbmRlZmluZWQoKTtcbiAqXG4gKiAgICAgIC8vIFNpbXVsYXRlIHJlc29sdmluZyBvZiBwcm9taXNlXG4gKiAgICAgIGRlZmVycmVkLnJlc29sdmUoMTIzKTtcbiAqICAgICAgLy8gTm90ZSB0aGF0IHRoZSAndGhlbicgZnVuY3Rpb24gZG9lcyBub3QgZ2V0IGNhbGxlZCBzeW5jaHJvbm91c2x5LlxuICogICAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2Ugd2FudCB0aGUgcHJvbWlzZSBBUEkgdG8gYWx3YXlzIGJlIGFzeW5jLCB3aGV0aGVyIG9yIG5vdFxuICogICAgICAvLyBpdCBnb3QgY2FsbGVkIHN5bmNocm9ub3VzbHkgb3IgYXN5bmNocm9ub3VzbHkuXG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gKlxuICogICAgICAvLyBQcm9wYWdhdGUgcHJvbWlzZSByZXNvbHV0aW9uIHRvICd0aGVuJyBmdW5jdGlvbnMgdXNpbmcgJGFwcGx5KCkuXG4gKiAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0VxdWFsKDEyMyk7XG4gKiAgICB9KSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbiwgZnVuY3Rpb24pfSByZXNvbHZlciBGdW5jdGlvbiB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgcmVzb2x2aW5nIG9yXG4gKiAgIHJlamVjdGluZyB0aGUgbmV3bHkgY3JlYXRlZCBwcm9taXNlLiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVzb2x2ZXMgdGhlXG4gKiAgIHByb21pc2UsIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS5cbiAqL1xuZnVuY3Rpb24gJFFQcm92aWRlcigpIHtcblxuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgIHJldHVybiBxRmFjdG9yeShmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICB9LCAkZXhjZXB0aW9uSGFuZGxlcik7XG4gIH1dO1xufVxuXG5mdW5jdGlvbiAkJFFQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRicm93c2VyLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgIHJldHVybiBxRmFjdG9yeShmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJGJyb3dzZXIuZGVmZXIoY2FsbGJhY2spO1xuICAgIH0sICRleGNlcHRpb25IYW5kbGVyKTtcbiAgfV07XG59XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIHByb21pc2UgbWFuYWdlci5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGZ1bmN0aW9uKX0gbmV4dFRpY2sgRnVuY3Rpb24gZm9yIGV4ZWN1dGluZyBmdW5jdGlvbnMgaW4gdGhlIG5leHQgdHVybi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oLi4uKil9IGV4Y2VwdGlvbkhhbmRsZXIgRnVuY3Rpb24gaW50byB3aGljaCB1bmV4cGVjdGVkIGV4Y2VwdGlvbnMgYXJlIHBhc3NlZCBmb3JcbiAqICAgICBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBQcm9taXNlIG1hbmFnZXIuXG4gKi9cbmZ1bmN0aW9uIHFGYWN0b3J5KG5leHRUaWNrLCBleGNlcHRpb25IYW5kbGVyKSB7XG4gIHZhciAkcU1pbkVyciA9IG1pbkVycignJHEnLCBUeXBlRXJyb3IpO1xuICBmdW5jdGlvbiBjYWxsT25jZShzZWxmLCByZXNvbHZlRm4sIHJlamVjdEZuKSB7XG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIHdyYXAoZm4pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGZuLmNhbGwoc2VsZiwgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3dyYXAocmVzb2x2ZUZuKSwgd3JhcChyZWplY3RGbildO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmcuJHEjZGVmZXJcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBgRGVmZXJyZWRgIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgdGFzayB3aGljaCB3aWxsIGZpbmlzaCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9IFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgZGVmZXJyZWQuXG4gICAqL1xuICB2YXIgZGVmZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IERlZmVycmVkKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gUHJvbWlzZSgpIHtcbiAgICB0aGlzLiQkc3RhdGUgPSB7IHN0YXR1czogMCB9O1xuICB9XG5cbiAgZXh0ZW5kKFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgdGhlbjogZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFjaykge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKG9uRnVsZmlsbGVkKSAmJiBpc1VuZGVmaW5lZChvblJlamVjdGVkKSAmJiBpc1VuZGVmaW5lZChwcm9ncmVzc0JhY2spKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBEZWZlcnJlZCgpO1xuXG4gICAgICB0aGlzLiQkc3RhdGUucGVuZGluZyA9IHRoaXMuJCRzdGF0ZS5wZW5kaW5nIHx8IFtdO1xuICAgICAgdGhpcy4kJHN0YXRlLnBlbmRpbmcucHVzaChbcmVzdWx0LCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvZ3Jlc3NCYWNrXSk7XG4gICAgICBpZiAodGhpcy4kJHN0YXRlLnN0YXR1cyA+IDApIHNjaGVkdWxlUHJvY2Vzc1F1ZXVlKHRoaXMuJCRzdGF0ZSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQucHJvbWlzZTtcbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIFwiZmluYWxseVwiOiBmdW5jdGlvbihjYWxsYmFjaywgcHJvZ3Jlc3NCYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayh2YWx1ZSwgdHJ1ZSwgY2FsbGJhY2spO1xuICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGVycm9yLCBmYWxzZSwgY2FsbGJhY2spO1xuICAgICAgfSwgcHJvZ3Jlc3NCYWNrKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vRmFzdGVyLCBtb3JlIGJhc2ljIHRoYW4gYW5ndWxhci5iaW5kIGh0dHA6Ly9qc3BlcmYuY29tL2FuZ3VsYXItYmluZC12cy1jdXN0b20tdnMtbmF0aXZlXG4gIGZ1bmN0aW9uIHNpbXBsZUJpbmQoY29udGV4dCwgZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGZuLmNhbGwoY29udGV4dCwgdmFsdWUpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzUXVldWUoc3RhdGUpIHtcbiAgICB2YXIgZm4sIGRlZmVycmVkLCBwZW5kaW5nO1xuXG4gICAgcGVuZGluZyA9IHN0YXRlLnBlbmRpbmc7XG4gICAgc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIHN0YXRlLnBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcGVuZGluZy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICBkZWZlcnJlZCA9IHBlbmRpbmdbaV1bMF07XG4gICAgICBmbiA9IHBlbmRpbmdbaV1bc3RhdGUuc3RhdHVzXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZm4oc3RhdGUudmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5zdGF0dXMgPT09IDEpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHN0YXRlLnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoc3RhdGUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlKTtcbiAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZVByb2Nlc3NRdWV1ZShzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5wcm9jZXNzU2NoZWR1bGVkIHx8ICFzdGF0ZS5wZW5kaW5nKSByZXR1cm47XG4gICAgc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCA9IHRydWU7XG4gICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7IHByb2Nlc3NRdWV1ZShzdGF0ZSk7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gRGVmZXJyZWQoKSB7XG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKTtcbiAgICAvL05lY2Vzc2FyeSB0byBzdXBwb3J0IHVuYm91bmQgZXhlY3V0aW9uIDovXG4gICAgdGhpcy5yZXNvbHZlID0gc2ltcGxlQmluZCh0aGlzLCB0aGlzLnJlc29sdmUpO1xuICAgIHRoaXMucmVqZWN0ID0gc2ltcGxlQmluZCh0aGlzLCB0aGlzLnJlamVjdCk7XG4gICAgdGhpcy5ub3RpZnkgPSBzaW1wbGVCaW5kKHRoaXMsIHRoaXMubm90aWZ5KTtcbiAgfVxuXG4gIGV4dGVuZChEZWZlcnJlZC5wcm90b3R5cGUsIHtcbiAgICByZXNvbHZlOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmICh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMpIHJldHVybjtcbiAgICAgIGlmICh2YWwgPT09IHRoaXMucHJvbWlzZSkge1xuICAgICAgICB0aGlzLiQkcmVqZWN0KCRxTWluRXJyKFxuICAgICAgICAgICdxY3ljbGUnLFxuICAgICAgICAgIFwiRXhwZWN0ZWQgcHJvbWlzZSB0byBiZSByZXNvbHZlZCB3aXRoIHZhbHVlIG90aGVyIHRoYW4gaXRzZWxmICd7MH0nXCIsXG4gICAgICAgICAgdmFsKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiQkcmVzb2x2ZSh2YWwpO1xuICAgICAgfVxuXG4gICAgfSxcblxuICAgICQkcmVzb2x2ZTogZnVuY3Rpb24odmFsKSB7XG4gICAgICB2YXIgdGhlbiwgZm5zO1xuXG4gICAgICBmbnMgPSBjYWxsT25jZSh0aGlzLCB0aGlzLiQkcmVzb2x2ZSwgdGhpcy4kJHJlamVjdCk7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoKGlzT2JqZWN0KHZhbCkgfHwgaXNGdW5jdGlvbih2YWwpKSkgdGhlbiA9IHZhbCAmJiB2YWwudGhlbjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAtMTtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsLCBmbnNbMF0sIGZuc1sxXSwgdGhpcy5ub3RpZnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnZhbHVlID0gdmFsO1xuICAgICAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IDE7XG4gICAgICAgICAgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy5wcm9taXNlLiQkc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGZuc1sxXShlKTtcbiAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVqZWN0OiBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgIGlmICh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMpIHJldHVybjtcbiAgICAgIHRoaXMuJCRyZWplY3QocmVhc29uKTtcbiAgICB9LFxuXG4gICAgJCRyZWplY3Q6IGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgdGhpcy5wcm9taXNlLiQkc3RhdGUudmFsdWUgPSByZWFzb247XG4gICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAyO1xuICAgICAgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy5wcm9taXNlLiQkc3RhdGUpO1xuICAgIH0sXG5cbiAgICBub3RpZnk6IGZ1bmN0aW9uKHByb2dyZXNzKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5wcm9taXNlLiQkc3RhdGUucGVuZGluZztcblxuICAgICAgaWYgKCh0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPD0gMCkgJiYgY2FsbGJhY2tzICYmIGNhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrLCByZXN1bHQ7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrc1tpXVswXTtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldWzNdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmVzdWx0Lm5vdGlmeShpc0Z1bmN0aW9uKGNhbGxiYWNrKSA/IGNhbGxiYWNrKHByb2dyZXNzKSA6IHByb2dyZXNzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHEjcmVqZWN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIGFzIHJlamVjdGVkIHdpdGggdGhlIHNwZWNpZmllZCBgcmVhc29uYC4gVGhpcyBhcGkgc2hvdWxkIGJlXG4gICAqIHVzZWQgdG8gZm9yd2FyZCByZWplY3Rpb24gaW4gYSBjaGFpbiBvZiBwcm9taXNlcy4gSWYgeW91IGFyZSBkZWFsaW5nIHdpdGggdGhlIGxhc3QgcHJvbWlzZSBpblxuICAgKiBhIHByb21pc2UgY2hhaW4sIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IGl0LlxuICAgKlxuICAgKiBXaGVuIGNvbXBhcmluZyBkZWZlcnJlZHMvcHJvbWlzZXMgdG8gdGhlIGZhbWlsaWFyIGJlaGF2aW9yIG9mIHRyeS9jYXRjaC90aHJvdywgdGhpbmsgb2ZcbiAgICogYHJlamVjdGAgYXMgdGhlIGB0aHJvd2Aga2V5d29yZCBpbiBKYXZhU2NyaXB0LiBUaGlzIGFsc28gbWVhbnMgdGhhdCBpZiB5b3UgXCJjYXRjaFwiIGFuIGVycm9yIHZpYVxuICAgKiBhIHByb21pc2UgZXJyb3IgY2FsbGJhY2sgYW5kIHlvdSB3YW50IHRvIGZvcndhcmQgdGhlIGVycm9yIHRvIHRoZSBwcm9taXNlIGRlcml2ZWQgZnJvbSB0aGVcbiAgICogY3VycmVudCBwcm9taXNlLCB5b3UgaGF2ZSB0byBcInJldGhyb3dcIiB0aGUgZXJyb3IgYnkgcmV0dXJuaW5nIGEgcmVqZWN0aW9uIGNvbnN0cnVjdGVkIHZpYVxuICAgKiBgcmVqZWN0YC5cbiAgICpcbiAgICogYGBganNcbiAgICogICBwcm9taXNlQiA9IHByb21pc2VBLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAqICAgICAvLyBzdWNjZXNzOiBkbyBzb21ldGhpbmcgYW5kIHJlc29sdmUgcHJvbWlzZUJcbiAgICogICAgIC8vICAgICAgICAgIHdpdGggdGhlIG9sZCBvciBhIG5ldyByZXN1bHRcbiAgICogICAgIHJldHVybiByZXN1bHQ7XG4gICAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAqICAgICAvLyBlcnJvcjogaGFuZGxlIHRoZSBlcnJvciBpZiBwb3NzaWJsZSBhbmRcbiAgICogICAgIC8vICAgICAgICByZXNvbHZlIHByb21pc2VCIHdpdGggbmV3UHJvbWlzZU9yVmFsdWUsXG4gICAqICAgICAvLyAgICAgICAgb3RoZXJ3aXNlIGZvcndhcmQgdGhlIHJlamVjdGlvbiB0byBwcm9taXNlQlxuICAgKiAgICAgaWYgKGNhbkhhbmRsZShyZWFzb24pKSB7XG4gICAqICAgICAgLy8gaGFuZGxlIHRoZSBlcnJvciBhbmQgcmVjb3ZlclxuICAgKiAgICAgIHJldHVybiBuZXdQcm9taXNlT3JWYWx1ZTtcbiAgICogICAgIH1cbiAgICogICAgIHJldHVybiAkcS5yZWplY3QocmVhc29uKTtcbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gcmVhc29uIENvbnN0YW50LCBtZXNzYWdlLCBleGNlcHRpb24gb3IgYW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcmVqZWN0aW9uIHJlYXNvbi5cbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2FzIGFscmVhZHkgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgYHJlYXNvbmAuXG4gICAqL1xuICB2YXIgcmVqZWN0ID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIHJlc3VsdC5yZWplY3QocmVhc29uKTtcbiAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7XG4gIH07XG5cbiAgdmFyIG1ha2VQcm9taXNlID0gZnVuY3Rpb24gbWFrZVByb21pc2UodmFsdWUsIHJlc29sdmVkKSB7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIGlmIChyZXNvbHZlZCkge1xuICAgICAgcmVzdWx0LnJlc29sdmUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucmVqZWN0KHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5wcm9taXNlO1xuICB9O1xuXG4gIHZhciBoYW5kbGVDYWxsYmFjayA9IGZ1bmN0aW9uIGhhbmRsZUNhbGxiYWNrKHZhbHVlLCBpc1Jlc29sdmVkLCBjYWxsYmFjaykge1xuICAgIHZhciBjYWxsYmFja091dHB1dCA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGNhbGxiYWNrKSkgY2FsbGJhY2tPdXRwdXQgPSBjYWxsYmFjaygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBtYWtlUHJvbWlzZShlLCBmYWxzZSk7XG4gICAgfVxuICAgIGlmIChpc1Byb21pc2VMaWtlKGNhbGxiYWNrT3V0cHV0KSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrT3V0cHV0LnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBtYWtlUHJvbWlzZSh2YWx1ZSwgaXNSZXNvbHZlZCk7XG4gICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICByZXR1cm4gbWFrZVByb21pc2UoZXJyb3IsIGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWFrZVByb21pc2UodmFsdWUsIGlzUmVzb2x2ZWQpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcSN3aGVuXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBXcmFwcyBhbiBvYmplY3QgdGhhdCBtaWdodCBiZSBhIHZhbHVlIG9yIGEgKDNyZCBwYXJ0eSkgdGhlbi1hYmxlIHByb21pc2UgaW50byBhICRxIHByb21pc2UuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4geW91IGFyZSBkZWFsaW5nIHdpdGggYW4gb2JqZWN0IHRoYXQgbWlnaHQgb3IgbWlnaHQgbm90IGJlIGEgcHJvbWlzZSwgb3IgaWZcbiAgICogdGhlIHByb21pc2UgY29tZXMgZnJvbSBhIHNvdXJjZSB0aGF0IGNhbid0IGJlIHRydXN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgb3IgYSBwcm9taXNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb249fSBzdWNjZXNzQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVycm9yQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHByb2dyZXNzQ2FsbGJhY2tcbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBwcm9taXNlIG9mIHRoZSBwYXNzZWQgdmFsdWUgb3IgcHJvbWlzZVxuICAgKi9cblxuXG4gIHZhciB3aGVuID0gZnVuY3Rpb24odmFsdWUsIGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IERlZmVycmVkKCk7XG4gICAgcmVzdWx0LnJlc29sdmUodmFsdWUpO1xuICAgIHJldHVybiByZXN1bHQucHJvbWlzZS50aGVuKGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc0JhY2spO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3Jlc29sdmVcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFsaWFzIG9mIHtAbGluayBuZy4kcSN3aGVuIHdoZW59IHRvIG1haW50YWluIG5hbWluZyBjb25zaXN0ZW5jeSB3aXRoIEVTNi5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHN1Y2Nlc3NDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXJyb3JDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gcHJvZ3Jlc3NDYWxsYmFja1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2Ugb2YgdGhlIHBhc3NlZCB2YWx1ZSBvciBwcm9taXNlXG4gICAqL1xuICB2YXIgcmVzb2x2ZSA9IHdoZW47XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHEjYWxsXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21iaW5lcyBtdWx0aXBsZSBwcm9taXNlcyBpbnRvIGEgc2luZ2xlIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIGFsbCBvZiB0aGUgaW5wdXRcbiAgICogcHJvbWlzZXMgYXJlIHJlc29sdmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5LjxQcm9taXNlPnxPYmplY3QuPFByb21pc2U+fSBwcm9taXNlcyBBbiBhcnJheSBvciBoYXNoIG9mIHByb21pc2VzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHNpbmdsZSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIGFuIGFycmF5L2hhc2ggb2YgdmFsdWVzLFxuICAgKiAgIGVhY2ggdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvbWlzZSBhdCB0aGUgc2FtZSBpbmRleC9rZXkgaW4gdGhlIGBwcm9taXNlc2AgYXJyYXkvaGFzaC5cbiAgICogICBJZiBhbnkgb2YgdGhlIHByb21pc2VzIGlzIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24sIHRoaXMgcmVzdWx0aW5nIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZFxuICAgKiAgIHdpdGggdGhlIHNhbWUgcmVqZWN0aW9uIHZhbHVlLlxuICAgKi9cblxuICBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKSxcbiAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgIHJlc3VsdHMgPSBpc0FycmF5KHByb21pc2VzKSA/IFtdIDoge307XG5cbiAgICBmb3JFYWNoKHByb21pc2VzLCBmdW5jdGlvbihwcm9taXNlLCBrZXkpIHtcbiAgICAgIGNvdW50ZXIrKztcbiAgICAgIHdoZW4ocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAocmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSByZXR1cm47XG4gICAgICAgIHJlc3VsdHNba2V5XSA9IHZhbHVlO1xuICAgICAgICBpZiAoISgtLWNvdW50ZXIpKSBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIGlmIChyZXN1bHRzLmhhc093blByb3BlcnR5KGtleSkpIHJldHVybjtcbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmIChjb3VudGVyID09PSAwKSB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHMpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgdmFyICRRID0gZnVuY3Rpb24gUShyZXNvbHZlcikge1xuICAgIGlmICghaXNGdW5jdGlvbihyZXNvbHZlcikpIHtcbiAgICAgIHRocm93ICRxTWluRXJyKCdub3JzbHZyJywgXCJFeHBlY3RlZCByZXNvbHZlckZuLCBnb3QgJ3swfSdcIiwgcmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBRKSkge1xuICAgICAgLy8gTW9yZSB1c2VmdWwgd2hlbiAkUSBpcyB0aGUgUHJvbWlzZSBpdHNlbGYuXG4gICAgICByZXR1cm4gbmV3IFEocmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZUZuKHZhbHVlKSB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWplY3RGbihyZWFzb24pIHtcbiAgICAgIGRlZmVycmVkLnJlamVjdChyZWFzb24pO1xuICAgIH1cblxuICAgIHJlc29sdmVyKHJlc29sdmVGbiwgcmVqZWN0Rm4pO1xuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH07XG5cbiAgJFEuZGVmZXIgPSBkZWZlcjtcbiAgJFEucmVqZWN0ID0gcmVqZWN0O1xuICAkUS53aGVuID0gd2hlbjtcbiAgJFEucmVzb2x2ZSA9IHJlc29sdmU7XG4gICRRLmFsbCA9IGFsbDtcblxuICByZXR1cm4gJFE7XG59XG5cbmZ1bmN0aW9uICQkUkFGUHJvdmlkZXIoKSB7IC8vckFGXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckdGltZW91dCcsIGZ1bmN0aW9uKCR3aW5kb3csICR0aW1lb3V0KSB7XG4gICAgdmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9ICR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgdmFyIGNhbmNlbEFuaW1hdGlvbkZyYW1lID0gJHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93LndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZTtcblxuICAgIHZhciByYWZTdXBwb3J0ZWQgPSAhIXJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICB2YXIgcmFmID0gcmFmU3VwcG9ydGVkXG4gICAgICA/IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgdmFyIGlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZuKTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgOiBmdW5jdGlvbihmbikge1xuICAgICAgICAgIHZhciB0aW1lciA9ICR0aW1lb3V0KGZuLCAxNi42NiwgZmFsc2UpOyAvLyAxMDAwIC8gNjAgPSAxNi42NjZcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZXIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICByYWYuc3VwcG9ydGVkID0gcmFmU3VwcG9ydGVkO1xuXG4gICAgcmV0dXJuIHJhZjtcbiAgfV07XG59XG5cbi8qKlxuICogREVTSUdOIE5PVEVTXG4gKlxuICogVGhlIGRlc2lnbiBkZWNpc2lvbnMgYmVoaW5kIHRoZSBzY29wZSBhcmUgaGVhdmlseSBmYXZvcmVkIGZvciBzcGVlZCBhbmQgbWVtb3J5IGNvbnN1bXB0aW9uLlxuICpcbiAqIFRoZSB0eXBpY2FsIHVzZSBvZiBzY29wZSBpcyB0byB3YXRjaCB0aGUgZXhwcmVzc2lvbnMsIHdoaWNoIG1vc3Qgb2YgdGhlIHRpbWUgcmV0dXJuIHRoZSBzYW1lXG4gKiB2YWx1ZSBhcyBsYXN0IHRpbWUgc28gd2Ugb3B0aW1pemUgdGhlIG9wZXJhdGlvbi5cbiAqXG4gKiBDbG9zdXJlcyBjb25zdHJ1Y3Rpb24gaXMgZXhwZW5zaXZlIGluIHRlcm1zIG9mIHNwZWVkIGFzIHdlbGwgYXMgbWVtb3J5OlxuICogICAtIE5vIGNsb3N1cmVzLCBpbnN0ZWFkIHVzZSBwcm90b3R5cGljYWwgaW5oZXJpdGFuY2UgZm9yIEFQSVxuICogICAtIEludGVybmFsIHN0YXRlIG5lZWRzIHRvIGJlIHN0b3JlZCBvbiBzY29wZSBkaXJlY3RseSwgd2hpY2ggbWVhbnMgdGhhdCBwcml2YXRlIHN0YXRlIGlzXG4gKiAgICAgZXhwb3NlZCBhcyAkJF9fX18gcHJvcGVydGllc1xuICpcbiAqIExvb3Agb3BlcmF0aW9ucyBhcmUgb3B0aW1pemVkIGJ5IHVzaW5nIHdoaWxlKGNvdW50LS0pIHsgLi4uIH1cbiAqICAgLSBUaGlzIG1lYW5zIHRoYXQgaW4gb3JkZXIgdG8ga2VlcCB0aGUgc2FtZSBvcmRlciBvZiBleGVjdXRpb24gYXMgYWRkaXRpb24gd2UgaGF2ZSB0byBhZGRcbiAqICAgICBpdGVtcyB0byB0aGUgYXJyYXkgYXQgdGhlIGJlZ2lubmluZyAodW5zaGlmdCkgaW5zdGVhZCBvZiBhdCB0aGUgZW5kIChwdXNoKVxuICpcbiAqIENoaWxkIHNjb3BlcyBhcmUgY3JlYXRlZCBhbmQgcmVtb3ZlZCBvZnRlblxuICogICAtIFVzaW5nIGFuIGFycmF5IHdvdWxkIGJlIHNsb3cgc2luY2UgaW5zZXJ0cyBpbiB0aGUgbWlkZGxlIGFyZSBleHBlbnNpdmU7IHNvIHdlIHVzZSBsaW5rZWQgbGlzdHNcbiAqXG4gKiBUaGVyZSBhcmUgZmV3ZXIgd2F0Y2hlcyB0aGFuIG9ic2VydmVycy4gVGhpcyBpcyB3aHkgeW91IGRvbid0IHdhbnQgdGhlIG9ic2VydmVyIHRvIGJlIGltcGxlbWVudGVkXG4gKiBpbiB0aGUgc2FtZSB3YXkgYXMgd2F0Y2guIFdhdGNoIHJlcXVpcmVzIHJldHVybiBvZiB0aGUgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24gd2hpY2ggaXMgZXhwZW5zaXZlXG4gKiB0byBjb25zdHJ1Y3QuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHJvb3RTY29wZVByb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBQcm92aWRlciBmb3IgdGhlICRyb290U2NvcGUgc2VydmljZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRyb290U2NvcGVQcm92aWRlciNkaWdlc3RUdGxcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNldHMgdGhlIG51bWJlciBvZiBgJGRpZ2VzdGAgaXRlcmF0aW9ucyB0aGUgc2NvcGUgc2hvdWxkIGF0dGVtcHQgdG8gZXhlY3V0ZSBiZWZvcmUgZ2l2aW5nIHVwIGFuZFxuICogYXNzdW1pbmcgdGhhdCB0aGUgbW9kZWwgaXMgdW5zdGFibGUuXG4gKlxuICogVGhlIGN1cnJlbnQgZGVmYXVsdCBpcyAxMCBpdGVyYXRpb25zLlxuICpcbiAqIEluIGNvbXBsZXggYXBwbGljYXRpb25zIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgZGVwZW5kZW5jaWVzIGJldHdlZW4gYCR3YXRjaGBzIHdpbGwgcmVzdWx0IGluXG4gKiBzZXZlcmFsIGRpZ2VzdCBpdGVyYXRpb25zLiBIb3dldmVyIGlmIGFuIGFwcGxpY2F0aW9uIG5lZWRzIG1vcmUgdGhhbiB0aGUgZGVmYXVsdCAxMCBkaWdlc3RcbiAqIGl0ZXJhdGlvbnMgZm9yIGl0cyBtb2RlbCB0byBzdGFiaWxpemUgdGhlbiB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHdoYXQgaXMgY2F1c2luZyB0aGUgbW9kZWwgdG9cbiAqIGNvbnRpbnVvdXNseSBjaGFuZ2UgZHVyaW5nIHRoZSBkaWdlc3QuXG4gKlxuICogSW5jcmVhc2luZyB0aGUgVFRMIGNvdWxkIGhhdmUgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zLCBzbyB5b3Ugc2hvdWxkIG5vdCBjaGFuZ2UgaXQgd2l0aG91dFxuICogcHJvcGVyIGp1c3RpZmljYXRpb24uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IFRoZSBudW1iZXIgb2YgZGlnZXN0IGl0ZXJhdGlvbnMuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcm9vdFNjb3BlXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFdmVyeSBhcHBsaWNhdGlvbiBoYXMgYSBzaW5nbGUgcm9vdCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0uXG4gKiBBbGwgb3RoZXIgc2NvcGVzIGFyZSBkZXNjZW5kYW50IHNjb3BlcyBvZiB0aGUgcm9vdCBzY29wZS4gU2NvcGVzIHByb3ZpZGUgc2VwYXJhdGlvblxuICogYmV0d2VlbiB0aGUgbW9kZWwgYW5kIHRoZSB2aWV3LCB2aWEgYSBtZWNoYW5pc20gZm9yIHdhdGNoaW5nIHRoZSBtb2RlbCBmb3IgY2hhbmdlcy5cbiAqIFRoZXkgYWxzbyBwcm92aWRlIGV2ZW50IGVtaXNzaW9uL2Jyb2FkY2FzdCBhbmQgc3Vic2NyaXB0aW9uIGZhY2lsaXR5LiBTZWUgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvc2NvcGUgZGV2ZWxvcGVyIGd1aWRlIG9uIHNjb3Blc30uXG4gKi9cbmZ1bmN0aW9uICRSb290U2NvcGVQcm92aWRlcigpIHtcbiAgdmFyIFRUTCA9IDEwO1xuICB2YXIgJHJvb3RTY29wZU1pbkVyciA9IG1pbkVycignJHJvb3RTY29wZScpO1xuICB2YXIgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuICB2YXIgYXBwbHlBc3luY0lkID0gbnVsbDtcblxuICB0aGlzLmRpZ2VzdFR0bCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIFRUTCA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gVFRMO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkU2NvcGVDbGFzcyhwYXJlbnQpIHtcbiAgICBmdW5jdGlvbiBDaGlsZFNjb3BlKCkge1xuICAgICAgdGhpcy4kJHdhdGNoZXJzID0gdGhpcy4kJG5leHRTaWJsaW5nID1cbiAgICAgICAgICB0aGlzLiQkY2hpbGRIZWFkID0gdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7XG4gICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XG4gICAgICB0aGlzLiQkbGlzdGVuZXJDb3VudCA9IHt9O1xuICAgICAgdGhpcy4kJHdhdGNoZXJzQ291bnQgPSAwO1xuICAgICAgdGhpcy4kaWQgPSBuZXh0VWlkKCk7XG4gICAgICB0aGlzLiQkQ2hpbGRTY29wZSA9IG51bGw7XG4gICAgfVxuICAgIENoaWxkU2NvcGUucHJvdG90eXBlID0gcGFyZW50O1xuICAgIHJldHVybiBDaGlsZFNjb3BlO1xuICB9XG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHBhcnNlJywgJyRicm93c2VyJyxcbiAgICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgJGV4Y2VwdGlvbkhhbmRsZXIsICRwYXJzZSwgJGJyb3dzZXIpIHtcblxuICAgIGZ1bmN0aW9uIGRlc3Ryb3lDaGlsZFNjb3BlKCRldmVudCkge1xuICAgICAgICAkZXZlbnQuY3VycmVudFNjb3BlLiQkZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhblVwU2NvcGUoJHNjb3BlKSB7XG5cbiAgICAgIGlmIChtc2llID09PSA5KSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIGEgbWVtb3J5IGxlYWsgaW4gSUU5IGlmIGFsbCBjaGlsZCBzY29wZXMgYXJlIG5vdCBkaXNjb25uZWN0ZWRcbiAgICAgICAgLy8gY29tcGxldGVseSB3aGVuIGEgc2NvcGUgaXMgZGVzdHJveWVkLiBTbyB0aGlzIGNvZGUgd2lsbCByZWN1cnNlIHVwIHRocm91Z2hcbiAgICAgICAgLy8gYWxsIHRoaXMgc2NvcGVzIGNoaWxkcmVuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFNlZSBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xMDcwNlxuICAgICAgICAkc2NvcGUuJCRjaGlsZEhlYWQgJiYgY2xlYW5VcFNjb3BlKCRzY29wZS4kJGNoaWxkSGVhZCk7XG4gICAgICAgICRzY29wZS4kJG5leHRTaWJsaW5nICYmIGNsZWFuVXBTY29wZSgkc2NvcGUuJCRuZXh0U2libGluZyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb2RlIGJlbG93IHdvcmtzIGFyb3VuZCBJRTkgYW5kIFY4J3MgbWVtb3J5IGxlYWtzXG4gICAgICAvL1xuICAgICAgLy8gU2VlOlxuICAgICAgLy8gLSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MyNjMjZcbiAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNjc5NCNpc3N1ZWNvbW1lbnQtMzg2NDg5MDlcbiAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTMxMyNpc3N1ZWNvbW1lbnQtMTAzNzg0NTFcblxuICAgICAgJHNjb3BlLiRwYXJlbnQgPSAkc2NvcGUuJCRuZXh0U2libGluZyA9ICRzY29wZS4kJHByZXZTaWJsaW5nID0gJHNjb3BlLiQkY2hpbGRIZWFkID1cbiAgICAgICAgICAkc2NvcGUuJCRjaGlsZFRhaWwgPSAkc2NvcGUuJHJvb3QgPSAkc2NvcGUuJCR3YXRjaGVycyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHR5cGVcbiAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBIHJvb3Qgc2NvcGUgY2FuIGJlIHJldHJpZXZlZCB1c2luZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUgJHJvb3RTY29wZX0ga2V5IGZyb20gdGhlXG4gICAgICoge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIENoaWxkIHNjb3BlcyBhcmUgY3JlYXRlZCB1c2luZyB0aGVcbiAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkbmV3ICRuZXcoKX0gbWV0aG9kLiAoTW9zdCBzY29wZXMgYXJlIGNyZWF0ZWQgYXV0b21hdGljYWxseSB3aGVuXG4gICAgICogY29tcGlsZWQgSFRNTCB0ZW1wbGF0ZSBpcyBleGVjdXRlZC4pIFNlZSBhbHNvIHRoZSB7QGxpbmsgZ3VpZGUvc2NvcGUgU2NvcGVzIGd1aWRlfSBmb3JcbiAgICAgKiBhbiBpbi1kZXB0aCBpbnRyb2R1Y3Rpb24gYW5kIHVzYWdlIGV4YW1wbGVzLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIEluaGVyaXRhbmNlXG4gICAgICogQSBzY29wZSBjYW4gaW5oZXJpdCBmcm9tIGEgcGFyZW50IHNjb3BlLCBhcyBpbiB0aGlzIGV4YW1wbGU6XG4gICAgICogYGBganNcbiAgICAgICAgIHZhciBwYXJlbnQgPSAkcm9vdFNjb3BlO1xuICAgICAgICAgdmFyIGNoaWxkID0gcGFyZW50LiRuZXcoKTtcblxuICAgICAgICAgcGFyZW50LnNhbHV0YXRpb24gPSBcIkhlbGxvXCI7XG4gICAgICAgICBleHBlY3QoY2hpbGQuc2FsdXRhdGlvbikudG9FcXVhbCgnSGVsbG8nKTtcblxuICAgICAgICAgY2hpbGQuc2FsdXRhdGlvbiA9IFwiV2VsY29tZVwiO1xuICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ1dlbGNvbWUnKTtcbiAgICAgICAgIGV4cGVjdChwYXJlbnQuc2FsdXRhdGlvbikudG9FcXVhbCgnSGVsbG8nKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFdoZW4gaW50ZXJhY3Rpbmcgd2l0aCBgU2NvcGVgIGluIHRlc3RzLCBhZGRpdGlvbmFsIGhlbHBlciBtZXRob2RzIGFyZSBhdmFpbGFibGUgb24gdGhlXG4gICAgICogaW5zdGFuY2VzIG9mIGBTY29wZWAgdHlwZS4gU2VlIHtAbGluayBuZ01vY2suJHJvb3RTY29wZS5TY29wZSBuZ01vY2sgU2NvcGV9IGZvciBhZGRpdGlvbmFsXG4gICAgICogZGV0YWlscy5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24oKT49fSBwcm92aWRlcnMgTWFwIG9mIHNlcnZpY2UgZmFjdG9yeSB3aGljaCBuZWVkIHRvIGJlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZCBmb3IgdGhlIGN1cnJlbnQgc2NvcGUuIERlZmF1bHRzIHRvIHtAbGluayBuZ30uXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgKj49fSBpbnN0YW5jZUNhY2hlIFByb3ZpZGVzIHByZS1pbnN0YW50aWF0ZWQgc2VydmljZXMgd2hpY2ggc2hvdWxkXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQvb3ZlcnJpZGUgc2VydmljZXMgcHJvdmlkZWQgYnkgYHByb3ZpZGVyc2AuIFRoaXMgaXMgaGFuZHlcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdW5pdC10ZXN0aW5nIGFuZCBoYXZpbmcgdGhlIG5lZWQgdG8gb3ZlcnJpZGUgYSBkZWZhdWx0XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IE5ld2x5IGNyZWF0ZWQgc2NvcGUuXG4gICAgICpcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTY29wZSgpIHtcbiAgICAgIHRoaXMuJGlkID0gbmV4dFVpZCgpO1xuICAgICAgdGhpcy4kJHBoYXNlID0gdGhpcy4kcGFyZW50ID0gdGhpcy4kJHdhdGNoZXJzID1cbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuJCRuZXh0U2libGluZyA9IHRoaXMuJCRwcmV2U2libGluZyA9XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLiQkY2hpbGRIZWFkID0gdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7XG4gICAgICB0aGlzLiRyb290ID0gdGhpcztcbiAgICAgIHRoaXMuJCRkZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcbiAgICAgIHRoaXMuJCRsaXN0ZW5lckNvdW50ID0ge307XG4gICAgICB0aGlzLiQkd2F0Y2hlcnNDb3VudCA9IDA7XG4gICAgICB0aGlzLiQkaXNvbGF0ZUJpbmRpbmdzID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRpZFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVW5pcXVlIHNjb3BlIElEIChtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcpIHVzZWZ1bCBmb3IgZGVidWdnaW5nLlxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkcGFyZW50XG4gICAgICAqXG4gICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBzY29wZS5cbiAgICAgICovXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRyb290XG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHJvb3Qgc2NvcGUuXG4gICAgICAgKi9cblxuICAgIFNjb3BlLnByb3RvdHlwZSA9IHtcbiAgICAgIGNvbnN0cnVjdG9yOiBTY29wZSxcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkbmV3XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQ3JlYXRlcyBhIG5ldyBjaGlsZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0uXG4gICAgICAgKlxuICAgICAgICogVGhlIHBhcmVudCBzY29wZSB3aWxsIHByb3BhZ2F0ZSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IGV2ZW50LlxuICAgICAgICogVGhlIHNjb3BlIGNhbiBiZSByZW1vdmVkIGZyb20gdGhlIHNjb3BlIGhpZXJhcmNoeSB1c2luZyB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveSAkZGVzdHJveSgpfS5cbiAgICAgICAqXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveSAkZGVzdHJveSgpfSBtdXN0IGJlIGNhbGxlZCBvbiBhIHNjb3BlIHdoZW4gaXQgaXNcbiAgICAgICAqIGRlc2lyZWQgZm9yIHRoZSBzY29wZSBhbmQgaXRzIGNoaWxkIHNjb3BlcyB0byBiZSBwZXJtYW5lbnRseSBkZXRhY2hlZCBmcm9tIHRoZSBwYXJlbnQgYW5kXG4gICAgICAgKiB0aHVzIHN0b3AgcGFydGljaXBhdGluZyBpbiBtb2RlbCBjaGFuZ2UgZGV0ZWN0aW9uIGFuZCBsaXN0ZW5lciBub3RpZmljYXRpb24gYnkgaW52b2tpbmcuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBpc29sYXRlIElmIHRydWUsIHRoZW4gdGhlIHNjb3BlIGRvZXMgbm90IHByb3RvdHlwaWNhbGx5IGluaGVyaXQgZnJvbSB0aGVcbiAgICAgICAqICAgICAgICAgcGFyZW50IHNjb3BlLiBUaGUgc2NvcGUgaXMgaXNvbGF0ZWQsIGFzIGl0IGNhbiBub3Qgc2VlIHBhcmVudCBzY29wZSBwcm9wZXJ0aWVzLlxuICAgICAgICogICAgICAgICBXaGVuIGNyZWF0aW5nIHdpZGdldHMsIGl0IGlzIHVzZWZ1bCBmb3IgdGhlIHdpZGdldCB0byBub3QgYWNjaWRlbnRhbGx5IHJlYWQgcGFyZW50XG4gICAgICAgKiAgICAgICAgIHN0YXRlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7U2NvcGV9IFtwYXJlbnQ9dGhpc10gVGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIGBTY29wZWB9IHRoYXQgd2lsbCBiZSB0aGUgYCRwYXJlbnRgXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBuZXdseSBjcmVhdGVkIHNjb3BlLiBEZWZhdWx0cyB0byBgdGhpc2Agc2NvcGUgaWYgbm90IHByb3ZpZGVkLlxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIHVzZWQgd2hlbiBjcmVhdGluZyBhIHRyYW5zY2x1ZGUgc2NvcGUgdG8gY29ycmVjdGx5IHBsYWNlIGl0XG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBzY29wZSBoaWVyYXJjaHkgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIGNvcnJlY3QgcHJvdG90eXBpY2FsXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBuZXdseSBjcmVhdGVkIGNoaWxkIHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgJG5ldzogZnVuY3Rpb24oaXNvbGF0ZSwgcGFyZW50KSB7XG4gICAgICAgIHZhciBjaGlsZDtcblxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgdGhpcztcblxuICAgICAgICBpZiAoaXNvbGF0ZSkge1xuICAgICAgICAgIGNoaWxkID0gbmV3IFNjb3BlKCk7XG4gICAgICAgICAgY2hpbGQuJHJvb3QgPSB0aGlzLiRyb290O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE9ubHkgY3JlYXRlIGEgY2hpbGQgc2NvcGUgY2xhc3MgaWYgc29tZWJvZHkgYXNrcyBmb3Igb25lLFxuICAgICAgICAgIC8vIGJ1dCBjYWNoZSBpdCB0byBhbGxvdyB0aGUgVk0gdG8gb3B0aW1pemUgbG9va3Vwcy5cbiAgICAgICAgICBpZiAoIXRoaXMuJCRDaGlsZFNjb3BlKSB7XG4gICAgICAgICAgICB0aGlzLiQkQ2hpbGRTY29wZSA9IGNyZWF0ZUNoaWxkU2NvcGVDbGFzcyh0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hpbGQgPSBuZXcgdGhpcy4kJENoaWxkU2NvcGUoKTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZC4kcGFyZW50ID0gcGFyZW50O1xuICAgICAgICBjaGlsZC4kJHByZXZTaWJsaW5nID0gcGFyZW50LiQkY2hpbGRUYWlsO1xuICAgICAgICBpZiAocGFyZW50LiQkY2hpbGRIZWFkKSB7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsLiQkbmV4dFNpYmxpbmcgPSBjaGlsZDtcbiAgICAgICAgICBwYXJlbnQuJCRjaGlsZFRhaWwgPSBjaGlsZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJlbnQuJCRjaGlsZEhlYWQgPSBwYXJlbnQuJCRjaGlsZFRhaWwgPSBjaGlsZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gdGhlIG5ldyBzY29wZSBpcyBub3QgaXNvbGF0ZWQgb3Igd2UgaW5oZXJpdCBmcm9tIGB0aGlzYCwgYW5kXG4gICAgICAgIC8vIHRoZSBwYXJlbnQgc2NvcGUgaXMgZGVzdHJveWVkLCB0aGUgcHJvcGVydHkgYCQkZGVzdHJveWVkYCBpcyBpbmhlcml0ZWRcbiAgICAgICAgLy8gcHJvdG90eXBpY2FsbHkuIEluIGFsbCBvdGhlciBjYXNlcywgdGhpcyBwcm9wZXJ0eSBuZWVkcyB0byBiZSBzZXRcbiAgICAgICAgLy8gd2hlbiB0aGUgcGFyZW50IHNjb3BlIGlzIGRlc3Ryb3llZC5cbiAgICAgICAgLy8gVGhlIGxpc3RlbmVyIG5lZWRzIHRvIGJlIGFkZGVkIGFmdGVyIHRoZSBwYXJlbnQgaXMgc2V0XG4gICAgICAgIGlmIChpc29sYXRlIHx8IHBhcmVudCAhPSB0aGlzKSBjaGlsZC4kb24oJyRkZXN0cm95JywgZGVzdHJveUNoaWxkU2NvcGUpO1xuXG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkd2F0Y2hcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZWdpc3RlcnMgYSBgbGlzdGVuZXJgIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW5ldmVyIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGB3YXRjaEV4cHJlc3Npb25gIGlzIGNhbGxlZCBvbiBldmVyeSBjYWxsIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3RcbiAgICAgICAqICAgJGRpZ2VzdCgpfSBhbmQgc2hvdWxkIHJldHVybiB0aGUgdmFsdWUgdGhhdCB3aWxsIGJlIHdhdGNoZWQuIChgd2F0Y2hFeHByZXNzaW9uYCBzaG91bGQgbm90IGNoYW5nZVxuICAgICAgICogICBpdHMgdmFsdWUgd2hlbiBleGVjdXRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIHRoZSBzYW1lIGlucHV0IGJlY2F1c2UgaXQgbWF5IGJlIGV4ZWN1dGVkIG11bHRpcGxlXG4gICAgICAgKiAgIHRpbWVzIGJ5IHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfS4gVGhhdCBpcywgYHdhdGNoRXhwcmVzc2lvbmAgc2hvdWxkIGJlXG4gICAgICAgKiAgIFtpZGVtcG90ZW50XShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lkZW1wb3RlbmNlKS5cbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIG9ubHkgd2hlbiB0aGUgdmFsdWUgZnJvbSB0aGUgY3VycmVudCBgd2F0Y2hFeHByZXNzaW9uYCBhbmQgdGhlXG4gICAgICAgKiAgIHByZXZpb3VzIGNhbGwgdG8gYHdhdGNoRXhwcmVzc2lvbmAgYXJlIG5vdCBlcXVhbCAod2l0aCB0aGUgZXhjZXB0aW9uIG9mIHRoZSBpbml0aWFsIHJ1bixcbiAgICAgICAqICAgc2VlIGJlbG93KS4gSW5lcXVhbGl0eSBpcyBkZXRlcm1pbmVkIGFjY29yZGluZyB0byByZWZlcmVuY2UgaW5lcXVhbGl0eSxcbiAgICAgICAqICAgW3N0cmljdCBjb21wYXJpc29uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvQ29tcGFyaXNvbl9PcGVyYXRvcnMpXG4gICAgICAgKiAgICB2aWEgdGhlIGAhPT1gIEphdmFzY3JpcHQgb3BlcmF0b3IsIHVubGVzcyBgb2JqZWN0RXF1YWxpdHkgPT0gdHJ1ZWBcbiAgICAgICAqICAgKHNlZSBuZXh0IHBvaW50KVxuICAgICAgICogLSBXaGVuIGBvYmplY3RFcXVhbGl0eSA9PSB0cnVlYCwgaW5lcXVhbGl0eSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmAgaXMgZGV0ZXJtaW5lZFxuICAgICAgICogICBhY2NvcmRpbmcgdG8gdGhlIHtAbGluayBhbmd1bGFyLmVxdWFsc30gZnVuY3Rpb24uIFRvIHNhdmUgdGhlIHZhbHVlIG9mIHRoZSBvYmplY3QgZm9yXG4gICAgICAgKiAgIGxhdGVyIGNvbXBhcmlzb24sIHRoZSB7QGxpbmsgYW5ndWxhci5jb3B5fSBmdW5jdGlvbiBpcyB1c2VkLiBUaGlzIHRoZXJlZm9yZSBtZWFucyB0aGF0XG4gICAgICAgKiAgIHdhdGNoaW5nIGNvbXBsZXggb2JqZWN0cyB3aWxsIGhhdmUgYWR2ZXJzZSBtZW1vcnkgYW5kIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucy5cbiAgICAgICAqIC0gVGhlIHdhdGNoIGBsaXN0ZW5lcmAgbWF5IGNoYW5nZSB0aGUgbW9kZWwsIHdoaWNoIG1heSB0cmlnZ2VyIG90aGVyIGBsaXN0ZW5lcmBzIHRvIGZpcmUuXG4gICAgICAgKiAgIFRoaXMgaXMgYWNoaWV2ZWQgYnkgcmVydW5uaW5nIHRoZSB3YXRjaGVycyB1bnRpbCBubyBjaGFuZ2VzIGFyZSBkZXRlY3RlZC4gVGhlIHJlcnVuXG4gICAgICAgKiAgIGl0ZXJhdGlvbiBsaW1pdCBpcyAxMCB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3AgZGVhZGxvY2suXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gaXMgY2FsbGVkLFxuICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGggbm8gYGxpc3RlbmVyYC4gKEJlIHByZXBhcmVkIGZvclxuICAgICAgICogbXVsdGlwbGUgY2FsbHMgdG8geW91ciBgd2F0Y2hFeHByZXNzaW9uYCBiZWNhdXNlIGl0IHdpbGwgZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBpbiBhXG4gICAgICAgKiBzaW5nbGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZSBpZiBhIGNoYW5nZSBpcyBkZXRlY3RlZC4pXG4gICAgICAgKlxuICAgICAgICogQWZ0ZXIgYSB3YXRjaGVyIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc2NvcGUsIHRoZSBgbGlzdGVuZXJgIGZuIGlzIGNhbGxlZCBhc3luY2hyb25vdXNseVxuICAgICAgICogKHZpYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jICRldmFsQXN5bmN9KSB0byBpbml0aWFsaXplIHRoZVxuICAgICAgICogd2F0Y2hlci4gSW4gcmFyZSBjYXNlcywgdGhpcyBpcyB1bmRlc2lyYWJsZSBiZWNhdXNlIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQgd2hlbiB0aGUgcmVzdWx0XG4gICAgICAgKiBvZiBgd2F0Y2hFeHByZXNzaW9uYCBkaWRuJ3QgY2hhbmdlLiBUbyBkZXRlY3QgdGhpcyBzY2VuYXJpbyB3aXRoaW4gdGhlIGBsaXN0ZW5lcmAgZm4sIHlvdVxuICAgICAgICogY2FuIGNvbXBhcmUgdGhlIGBuZXdWYWxgIGFuZCBgb2xkVmFsYC4gSWYgdGhlc2UgdHdvIHZhbHVlcyBhcmUgaWRlbnRpY2FsIChgPT09YCkgdGhlbiB0aGVcbiAgICAgICAqIGxpc3RlbmVyIHdhcyBjYWxsZWQgZHVlIHRvIGluaXRpYWxpemF0aW9uLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICAvLyBsZXQncyBhc3N1bWUgdGhhdCBzY29wZSB3YXMgZGVwZW5kZW5jeSBpbmplY3RlZCBhcyB0aGUgJHJvb3RTY29wZVxuICAgICAgICAgICB2YXIgc2NvcGUgPSAkcm9vdFNjb3BlO1xuICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJztcbiAgICAgICAgICAgc2NvcGUuY291bnRlciA9IDA7XG5cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaCgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSBzY29wZS5jb3VudGVyICsgMTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gdGhlIGxpc3RlbmVyIGlzIGFsd2F5cyBjYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCAkZGlnZXN0IGxvb3AgYWZ0ZXIgaXQgd2FzIHJlZ2lzdGVyZWRcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyBidXQgbm93IGl0IHdpbGwgbm90IGJlIGNhbGxlZCB1bmxlc3MgdGhlIHZhbHVlIGNoYW5nZXNcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdhZGFtJztcbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgyKTtcblxuXG5cbiAgICAgICAgICAgLy8gVXNpbmcgYSBmdW5jdGlvbiBhcyBhIHdhdGNoRXhwcmVzc2lvblxuICAgICAgICAgICB2YXIgZm9vZDtcbiAgICAgICAgICAgc2NvcGUuZm9vZENvdW50ZXIgPSAwO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHZhbHVlIGJlaW5nIHdhdGNoZWQuIEl0IGlzIGNhbGxlZCBmb3IgZWFjaCB0dXJuIG9mIHRoZSAkZGlnZXN0IGxvb3BcbiAgICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIGZvb2Q7IH0sXG4gICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2hhbmdlIGxpc3RlbmVyLCBjYWxsZWQgd2hlbiB0aGUgdmFsdWUgcmV0dXJuZWQgZnJvbSB0aGUgYWJvdmUgZnVuY3Rpb24gY2hhbmdlc1xuICAgICAgICAgICAgIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgaWYgKCBuZXdWYWx1ZSAhPT0gb2xkVmFsdWUgKSB7XG4gICAgICAgICAgICAgICAgIC8vIE9ubHkgaW5jcmVtZW50IHRoZSBjb3VudGVyIGlmIHRoZSB2YWx1ZSBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgIHNjb3BlLmZvb2RDb3VudGVyID0gc2NvcGUuZm9vZENvdW50ZXIgKyAxO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgKTtcbiAgICAgICAgICAgLy8gTm8gZGlnZXN0IGhhcyBiZWVuIHJ1biBzbyB0aGUgY291bnRlciB3aWxsIGJlIHplcm9cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIC8vIFJ1biB0aGUgZGlnZXN0IGJ1dCBzaW5jZSBmb29kIGhhcyBub3QgY2hhbmdlZCBjb3VudCB3aWxsIHN0aWxsIGJlIHplcm9cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgLy8gVXBkYXRlIGZvb2QgYW5kIHJ1biBkaWdlc3QuICBOb3cgdGhlIGNvdW50ZXIgd2lsbCBpbmNyZW1lbnRcbiAgICAgICAgICAgZm9vZCA9ICdjaGVlc2VidXJnZXInO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhmdW5jdGlvbigpfHN0cmluZyl9IHdhdGNoRXhwcmVzc2lvbiBFeHByZXNzaW9uIHRoYXQgaXMgZXZhbHVhdGVkIG9uIGVhY2hcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEEgY2hhbmdlIGluIHRoZSByZXR1cm4gdmFsdWUgdHJpZ2dlcnNcbiAgICAgICAqICAgIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn1cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGNhbGxlZCB3aXRoIGN1cnJlbnQgYHNjb3BlYCBhcyBhIHBhcmFtZXRlci5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSB2YWx1ZVxuICAgICAgICogICAgb2YgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBuZXdWYWxgIGNvbnRhaW5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogICAgLSBgb2xkVmFsYCBjb250YWlucyB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICAtIGBzY29wZWAgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvYmplY3RFcXVhbGl0eSBDb21wYXJlIGZvciBvYmplY3QgZXF1YWxpdHkgdXNpbmcge0BsaW5rIGFuZ3VsYXIuZXF1YWxzfSBpbnN0ZWFkIG9mXG4gICAgICAgKiAgICAgY29tcGFyaW5nIGZvciByZWZlcmVuY2UgZXF1YWxpdHkuXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLlxuICAgICAgICovXG4gICAgICAkd2F0Y2g6IGZ1bmN0aW9uKHdhdGNoRXhwLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHByZXR0eVByaW50RXhwcmVzc2lvbikge1xuICAgICAgICB2YXIgZ2V0ID0gJHBhcnNlKHdhdGNoRXhwKTtcblxuICAgICAgICBpZiAoZ2V0LiQkd2F0Y2hEZWxlZ2F0ZSkge1xuICAgICAgICAgIHJldHVybiBnZXQuJCR3YXRjaERlbGVnYXRlKHRoaXMsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgZ2V0LCB3YXRjaEV4cCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcyxcbiAgICAgICAgICAgIGFycmF5ID0gc2NvcGUuJCR3YXRjaGVycyxcbiAgICAgICAgICAgIHdhdGNoZXIgPSB7XG4gICAgICAgICAgICAgIGZuOiBsaXN0ZW5lcixcbiAgICAgICAgICAgICAgbGFzdDogaW5pdFdhdGNoVmFsLFxuICAgICAgICAgICAgICBnZXQ6IGdldCxcbiAgICAgICAgICAgICAgZXhwOiBwcmV0dHlQcmludEV4cHJlc3Npb24gfHwgd2F0Y2hFeHAsXG4gICAgICAgICAgICAgIGVxOiAhIW9iamVjdEVxdWFsaXR5XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcblxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgd2F0Y2hlci5mbiA9IG5vb3A7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFycmF5KSB7XG4gICAgICAgICAgYXJyYXkgPSBzY29wZS4kJHdhdGNoZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgdXNlIHVuc2hpZnQgc2luY2Ugd2UgdXNlIGEgd2hpbGUgbG9vcCBpbiAkZGlnZXN0IGZvciBzcGVlZC5cbiAgICAgICAgLy8gdGhlIHdoaWxlIGxvb3AgcmVhZHMgaW4gcmV2ZXJzZSBvcmRlci5cbiAgICAgICAgYXJyYXkudW5zaGlmdCh3YXRjaGVyKTtcbiAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudCh0aGlzLCAxKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZGVyZWdpc3RlcldhdGNoKCkge1xuICAgICAgICAgIGlmIChhcnJheVJlbW92ZShhcnJheSwgd2F0Y2hlcikgPj0gMCkge1xuICAgICAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudChzY29wZSwgLTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoR3JvdXBcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIHZhcmlhbnQgb2Yge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSB3aGVyZSBpdCB3YXRjaGVzIGFuIGFycmF5IG9mIGB3YXRjaEV4cHJlc3Npb25zYC5cbiAgICAgICAqIElmIGFueSBvbmUgZXhwcmVzc2lvbiBpbiB0aGUgY29sbGVjdGlvbiBjaGFuZ2VzIHRoZSBgbGlzdGVuZXJgIGlzIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGl0ZW1zIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgYXJlIG9ic2VydmVkIHZpYSBzdGFuZGFyZCAkd2F0Y2ggb3BlcmF0aW9uIGFuZCBhcmUgZXhhbWluZWQgb24gZXZlcnlcbiAgICAgICAqICAgY2FsbCB0byAkZGlnZXN0KCkgdG8gc2VlIGlmIGFueSBpdGVtcyBjaGFuZ2VzLlxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55IGV4cHJlc3Npb24gaW4gdGhlIGB3YXRjaEV4cHJlc3Npb25zYCBhcnJheSBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xGdW5jdGlvbihzY29wZSk+fSB3YXRjaEV4cHJlc3Npb25zIEFycmF5IG9mIGV4cHJlc3Npb25zIHRoYXQgd2lsbCBiZSBpbmRpdmlkdWFsbHlcbiAgICAgICAqIHdhdGNoZWQgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSByZXR1cm4gdmFsdWUgb2YgYW55XG4gICAgICAgKiAgICBleHByZXNzaW9uIGluIGB3YXRjaEV4cHJlc3Npb25zYCBjaGFuZ2VzXG4gICAgICAgKiAgICBUaGUgYG5ld1ZhbHVlc2AgYXJyYXkgY29udGFpbnMgdGhlIGN1cnJlbnQgdmFsdWVzIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AsIHdpdGggdGhlIGluZGV4ZXMgbWF0Y2hpbmdcbiAgICAgICAqICAgIHRob3NlIG9mIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICBhbmQgdGhlIGBvbGRWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25zYCwgd2l0aCB0aGUgaW5kZXhlcyBtYXRjaGluZ1xuICAgICAgICogICAgdGhvc2Ugb2YgYHdhdGNoRXhwcmVzc2lvbmBcbiAgICAgICAqICAgIFRoZSBgc2NvcGVgIHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZS5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciBhbGwgbGlzdGVuZXJzLlxuICAgICAgICovXG4gICAgICAkd2F0Y2hHcm91cDogZnVuY3Rpb24od2F0Y2hFeHByZXNzaW9ucywgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlcyA9IG5ldyBBcnJheSh3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCk7XG4gICAgICAgIHZhciBuZXdWYWx1ZXMgPSBuZXcgQXJyYXkod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpO1xuICAgICAgICB2YXIgZGVyZWdpc3RlckZucyA9IFtdO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZmlyc3RSdW4gPSB0cnVlO1xuXG4gICAgICAgIGlmICghd2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBObyBleHByZXNzaW9ucyBtZWFucyB3ZSBjYWxsIHRoZSBsaXN0ZW5lciBBU0FQXG4gICAgICAgICAgdmFyIHNob3VsZENhbGwgPSB0cnVlO1xuICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChzaG91bGRDYWxsKSBsaXN0ZW5lcihuZXdWYWx1ZXMsIG5ld1ZhbHVlcywgc2VsZik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkge1xuICAgICAgICAgICAgc2hvdWxkQ2FsbCA9IGZhbHNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2Ugc2l6ZSBvZiBvbmVcbiAgICAgICAgICByZXR1cm4gdGhpcy4kd2F0Y2god2F0Y2hFeHByZXNzaW9uc1swXSwgZnVuY3Rpb24gd2F0Y2hHcm91cEFjdGlvbih2YWx1ZSwgb2xkVmFsdWUsIHNjb3BlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbMF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG9sZFZhbHVlc1swXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCAodmFsdWUgPT09IG9sZFZhbHVlKSA/IG5ld1ZhbHVlcyA6IG9sZFZhbHVlcywgc2NvcGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaCh3YXRjaEV4cHJlc3Npb25zLCBmdW5jdGlvbihleHByLCBpKSB7XG4gICAgICAgICAgdmFyIHVud2F0Y2hGbiA9IHNlbGYuJHdhdGNoKGV4cHIsIGZ1bmN0aW9uIHdhdGNoR3JvdXBTdWJBY3Rpb24odmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG9sZFZhbHVlc1tpXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgaWYgKCFjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyh3YXRjaEdyb3VwQWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkZXJlZ2lzdGVyRm5zLnB1c2godW53YXRjaEZuKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gd2F0Y2hHcm91cEFjdGlvbigpIHtcbiAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKGZpcnN0UnVuKSB7XG4gICAgICAgICAgICBmaXJzdFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZXMsIG9sZFZhbHVlcywgc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkge1xuICAgICAgICAgIHdoaWxlIChkZXJlZ2lzdGVyRm5zLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVyZWdpc3RlckZucy5zaGlmdCgpKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNoYWxsb3cgd2F0Y2hlcyB0aGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kIGZpcmVzIHdoZW5ldmVyIGFueSBvZiB0aGUgcHJvcGVydGllcyBjaGFuZ2VcbiAgICAgICAqIChmb3IgYXJyYXlzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmcgdGhlIGFycmF5IGl0ZW1zOyBmb3Igb2JqZWN0IG1hcHMsIHRoaXMgaW1wbGllcyB3YXRjaGluZ1xuICAgICAgICogdGhlIHByb3BlcnRpZXMpLiBJZiBhIGNoYW5nZSBpcyBkZXRlY3RlZCwgdGhlIGBsaXN0ZW5lcmAgY2FsbGJhY2sgaXMgZmlyZWQuXG4gICAgICAgKlxuICAgICAgICogLSBUaGUgYG9iamAgY29sbGVjdGlvbiBpcyBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgaXMgZXhhbWluZWQgb24gZXZlcnlcbiAgICAgICAqICAgY2FsbCB0byAkZGlnZXN0KCkgdG8gc2VlIGlmIGFueSBpdGVtcyBoYXZlIGJlZW4gYWRkZWQsIHJlbW92ZWQsIG9yIG1vdmVkLlxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55dGhpbmcgd2l0aGluIHRoZSBgb2JqYCBoYXMgY2hhbmdlZC4gRXhhbXBsZXMgaW5jbHVkZVxuICAgICAgICogICBhZGRpbmcsIHJlbW92aW5nLCBhbmQgbW92aW5nIGl0ZW1zIGJlbG9uZ2luZyB0byBhbiBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICMgRXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ2lnb3InLCAnbWF0aWFzJywgJ21pc2tvJywgJ2phbWVzJ107XG4gICAgICAgICAgJHNjb3BlLmRhdGFDb3VudCA9IDQ7XG5cbiAgICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbignbmFtZXMnLCBmdW5jdGlvbihuZXdOYW1lcywgb2xkTmFtZXMpIHtcbiAgICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSBuZXdOYW1lcy5sZW5ndGg7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTtcbiAgICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpO1xuXG4gICAgICAgICAgLy9zdGlsbCBhdCA0IC4uLiBubyBjaGFuZ2VzXG4gICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoNCk7XG5cbiAgICAgICAgICAkc2NvcGUubmFtZXMucG9wKCk7XG4gICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcblxuICAgICAgICAgIC8vbm93IHRoZXJlJ3MgYmVlbiBhIGNoYW5nZVxuICAgICAgICAgIGV4cGVjdCgkc2NvcGUuZGF0YUNvdW50KS50b0VxdWFsKDMpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKHNjb3BlKX0gb2JqIEV2YWx1YXRlZCBhcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS4gVGhlXG4gICAgICAgKiAgICBleHByZXNzaW9uIHZhbHVlIHNob3VsZCBldmFsdWF0ZSB0byBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgd2hpY2ggaXMgb2JzZXJ2ZWQgb24gZWFjaFxuICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZS4gQW55IHNoYWxsb3cgY2hhbmdlIHdpdGhpbiB0aGVcbiAgICAgICAqICAgIGNvbGxlY3Rpb24gd2lsbCB0cmlnZ2VyIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld0NvbGxlY3Rpb24sIG9sZENvbGxlY3Rpb24sIHNjb3BlKX0gbGlzdGVuZXIgYSBjYWxsYmFjayBmdW5jdGlvbiBjYWxsZWRcbiAgICAgICAqICAgIHdoZW4gYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQuXG4gICAgICAgKiAgICAtIFRoZSBgbmV3Q29sbGVjdGlvbmAgb2JqZWN0IGlzIHRoZSBuZXdseSBtb2RpZmllZCBkYXRhIG9idGFpbmVkIGZyb20gdGhlIGBvYmpgIGV4cHJlc3Npb25cbiAgICAgICAqICAgIC0gVGhlIGBvbGRDb2xsZWN0aW9uYCBvYmplY3QgaXMgYSBjb3B5IG9mIHRoZSBmb3JtZXIgY29sbGVjdGlvbiBkYXRhLlxuICAgICAgICogICAgICBEdWUgdG8gcGVyZm9ybWFuY2UgY29uc2lkZXJhdGlvbnMsIHRoZWBvbGRDb2xsZWN0aW9uYCB2YWx1ZSBpcyBjb21wdXRlZCBvbmx5IGlmIHRoZVxuICAgICAgICogICAgICBgbGlzdGVuZXJgIGZ1bmN0aW9uIGRlY2xhcmVzIHR3byBvciBtb3JlIGFyZ3VtZW50cy5cbiAgICAgICAqICAgIC0gVGhlIGBzY29wZWAgYXJndW1lbnQgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLiBXaGVuIHRoZVxuICAgICAgICogICAgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkLCB0aGUgaW50ZXJuYWwgd2F0Y2ggb3BlcmF0aW9uIGlzIHRlcm1pbmF0ZWQuXG4gICAgICAgKi9cbiAgICAgICR3YXRjaENvbGxlY3Rpb246IGZ1bmN0aW9uKG9iaiwgbGlzdGVuZXIpIHtcbiAgICAgICAgJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yLiRzdGF0ZWZ1bCA9IHRydWU7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAvLyB0aGUgY3VycmVudCB2YWx1ZSwgdXBkYXRlZCBvbiBlYWNoIGRpcnR5LWNoZWNrIHJ1blxuICAgICAgICB2YXIgbmV3VmFsdWU7XG4gICAgICAgIC8vIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBuZXdWYWx1ZSBmcm9tIHRoZSBsYXN0IGRpcnR5LWNoZWNrIHJ1bixcbiAgICAgICAgLy8gdXBkYXRlZCB0byBtYXRjaCBuZXdWYWx1ZSBkdXJpbmcgZGlydHktY2hlY2sgcnVuXG4gICAgICAgIHZhciBvbGRWYWx1ZTtcbiAgICAgICAgLy8gYSBzaGFsbG93IGNvcHkgb2YgdGhlIG5ld1ZhbHVlIGZyb20gd2hlbiB0aGUgbGFzdCBjaGFuZ2UgaGFwcGVuZWRcbiAgICAgICAgdmFyIHZlcnlPbGRWYWx1ZTtcbiAgICAgICAgLy8gb25seSB0cmFjayB2ZXJ5T2xkVmFsdWUgaWYgdGhlIGxpc3RlbmVyIGlzIGFza2luZyBmb3IgaXRcbiAgICAgICAgdmFyIHRyYWNrVmVyeU9sZFZhbHVlID0gKGxpc3RlbmVyLmxlbmd0aCA+IDEpO1xuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0ZWQgPSAwO1xuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0b3IgPSAkcGFyc2Uob2JqLCAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IpO1xuICAgICAgICB2YXIgaW50ZXJuYWxBcnJheSA9IFtdO1xuICAgICAgICB2YXIgaW50ZXJuYWxPYmplY3QgPSB7fTtcbiAgICAgICAgdmFyIGluaXRSdW4gPSB0cnVlO1xuICAgICAgICB2YXIgb2xkTGVuZ3RoID0gMDtcblxuICAgICAgICBmdW5jdGlvbiAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IoX3ZhbHVlKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBfdmFsdWU7XG4gICAgICAgICAgdmFyIG5ld0xlbmd0aCwga2V5LCBib3RoTmFOLCBuZXdJdGVtLCBvbGRJdGVtO1xuXG4gICAgICAgICAgLy8gSWYgdGhlIG5ldyB2YWx1ZSBpcyB1bmRlZmluZWQsIHRoZW4gcmV0dXJuIHVuZGVmaW5lZCBhcyB0aGUgd2F0Y2ggbWF5IGJlIGEgb25lLXRpbWUgd2F0Y2hcbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQobmV3VmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkgeyAvLyBpZiBwcmltaXRpdmVcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbEFycmF5KSB7XG4gICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gYXJyYXkgaW50byBhcnJheS5cbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBpbnRlcm5hbEFycmF5O1xuICAgICAgICAgICAgICBvbGRMZW5ndGggPSBvbGRWYWx1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdMZW5ndGggPSBuZXdWYWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggIT09IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBpZiBsZW5ndGhzIGRvIG5vdCBtYXRjaCB3ZSBuZWVkIHRvIHRyaWdnZXIgY2hhbmdlIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICBvbGRWYWx1ZS5sZW5ndGggPSBvbGRMZW5ndGggPSBuZXdMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb3B5IHRoZSBpdGVtcyB0byBvbGRWYWx1ZSBhbmQgbG9vayBmb3IgY2hhbmdlcy5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2ldO1xuICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3VmFsdWVbaV07XG5cbiAgICAgICAgICAgICAgYm90aE5hTiA9IChvbGRJdGVtICE9PSBvbGRJdGVtKSAmJiAobmV3SXRlbSAhPT0gbmV3SXRlbSk7XG4gICAgICAgICAgICAgIGlmICghYm90aE5hTiAmJiAob2xkSXRlbSAhPT0gbmV3SXRlbSkpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlW2ldID0gbmV3SXRlbTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IGludGVybmFsT2JqZWN0KSB7XG4gICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gb2JqZWN0IGludG8gb2JqZWN0LlxuICAgICAgICAgICAgICBvbGRWYWx1ZSA9IGludGVybmFsT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgIG9sZExlbmd0aCA9IDA7XG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb3B5IHRoZSBpdGVtcyB0byBvbGRWYWx1ZSBhbmQgbG9vayBmb3IgY2hhbmdlcy5cbiAgICAgICAgICAgIG5ld0xlbmd0aCA9IDA7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChuZXdWYWx1ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIG5ld0xlbmd0aCsrO1xuICAgICAgICAgICAgICAgIG5ld0l0ZW0gPSBuZXdWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgIG9sZEl0ZW0gPSBvbGRWYWx1ZVtrZXldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgYm90aE5hTiA9IChvbGRJdGVtICE9PSBvbGRJdGVtKSAmJiAobmV3SXRlbSAhPT0gbmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgICBpZiAoIWJvdGhOYU4gJiYgKG9sZEl0ZW0gIT09IG5ld0l0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2tleV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvbGRMZW5ndGgrKztcbiAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2tleV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggPiBuZXdMZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gd2UgdXNlZCB0byBoYXZlIG1vcmUga2V5cywgbmVlZCB0byBmaW5kIHRoZW0gYW5kIGRlc3Ryb3kgdGhlbS5cbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgZm9yIChrZXkgaW4gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobmV3VmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgIG9sZExlbmd0aC0tO1xuICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFZhbHVlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjaGFuZ2VEZXRlY3RlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uICR3YXRjaENvbGxlY3Rpb25BY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGluaXRSdW4pIHtcbiAgICAgICAgICAgIGluaXRSdW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlLCBuZXdWYWx1ZSwgc2VsZik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlLCB2ZXJ5T2xkVmFsdWUsIHNlbGYpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIG1ha2UgYSBjb3B5IGZvciB0aGUgbmV4dCB0aW1lIGEgY29sbGVjdGlvbiBpcyBjaGFuZ2VkXG4gICAgICAgICAgaWYgKHRyYWNrVmVyeU9sZFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICAvL3ByaW1pdGl2ZVxuICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2UobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IG5ldyBBcnJheShuZXdWYWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld1ZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlW2ldID0gbmV3VmFsdWVbaV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGlmIG9iamVjdFxuICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwobmV3VmFsdWUsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZVtrZXldID0gbmV3VmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy4kd2F0Y2goY2hhbmdlRGV0ZWN0b3IsICR3YXRjaENvbGxlY3Rpb25BY3Rpb24pO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3RcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBQcm9jZXNzZXMgYWxsIG9mIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcnN9IG9mIHRoZSBjdXJyZW50IHNjb3BlIGFuZFxuICAgICAgICogaXRzIGNoaWxkcmVuLiBCZWNhdXNlIGEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJ9J3MgbGlzdGVuZXIgY2FuIGNoYW5nZVxuICAgICAgICogdGhlIG1vZGVsLCB0aGUgYCRkaWdlc3QoKWAga2VlcHMgY2FsbGluZyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJzfVxuICAgICAgICogdW50aWwgbm8gbW9yZSBsaXN0ZW5lcnMgYXJlIGZpcmluZy4gVGhpcyBtZWFucyB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIGdldCBpbnRvIGFuIGluZmluaXRlXG4gICAgICAgKiBsb29wLiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3cgYCdNYXhpbXVtIGl0ZXJhdGlvbiBsaW1pdCBleGNlZWRlZC4nYCBpZiB0aGUgbnVtYmVyIG9mXG4gICAgICAgKiBpdGVyYXRpb25zIGV4Y2VlZHMgMTAuXG4gICAgICAgKlxuICAgICAgICogVXN1YWxseSwgeW91IGRvbid0IGNhbGwgYCRkaWdlc3QoKWAgZGlyZWN0bHkgaW5cbiAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDb250cm9sbGVyIGNvbnRyb2xsZXJzfSBvciBpblxuICAgICAgICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LlxuICAgICAgICogSW5zdGVhZCwgeW91IHNob3VsZCBjYWxsIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHkoKX0gKHR5cGljYWxseSBmcm9tIHdpdGhpblxuICAgICAgICogYSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlfSksIHdoaWNoIHdpbGwgZm9yY2UgYSBgJGRpZ2VzdCgpYC5cbiAgICAgICAqXG4gICAgICAgKiBJZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuZXZlciBgJGRpZ2VzdCgpYCBpcyBjYWxsZWQsXG4gICAgICAgKiB5b3UgY2FuIHJlZ2lzdGVyIGEgYHdhdGNoRXhwcmVzc2lvbmAgZnVuY3Rpb24gd2l0aFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSB3aXRoIG5vIGBsaXN0ZW5lcmAuXG4gICAgICAgKlxuICAgICAgICogSW4gdW5pdCB0ZXN0cywgeW91IG1heSBuZWVkIHRvIGNhbGwgYCRkaWdlc3QoKWAgdG8gc2ltdWxhdGUgdGhlIHNjb3BlIGxpZmUgY3ljbGUuXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICB2YXIgc2NvcGUgPSAuLi47XG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnbWlza28nO1xuICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgc2NvcGUuY291bnRlciA9IHNjb3BlLmNvdW50ZXIgKyAxO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyB0aGUgbGlzdGVuZXIgaXMgYWx3YXlzIGNhbGxlZCBkdXJpbmcgdGhlIGZpcnN0ICRkaWdlc3QgbG9vcCBhZnRlciBpdCB3YXMgcmVnaXN0ZXJlZFxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIC8vIGJ1dCBub3cgaXQgd2lsbCBub3QgYmUgY2FsbGVkIHVubGVzcyB0aGUgdmFsdWUgY2hhbmdlc1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDIpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICAkZGlnZXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHdhdGNoLCB2YWx1ZSwgbGFzdCxcbiAgICAgICAgICAgIHdhdGNoZXJzLFxuICAgICAgICAgICAgbGVuZ3RoLFxuICAgICAgICAgICAgZGlydHksIHR0bCA9IFRUTCxcbiAgICAgICAgICAgIG5leHQsIGN1cnJlbnQsIHRhcmdldCA9IHRoaXMsXG4gICAgICAgICAgICB3YXRjaExvZyA9IFtdLFxuICAgICAgICAgICAgbG9nSWR4LCBsb2dNc2csIGFzeW5jVGFzaztcblxuICAgICAgICBiZWdpblBoYXNlKCckZGlnZXN0Jyk7XG4gICAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIHRvIGJyb3dzZXIgdXJsIHRoYXQgaGFwcGVuZWQgaW4gc3luYyBiZWZvcmUgdGhlIGNhbGwgdG8gJGRpZ2VzdFxuICAgICAgICAkYnJvd3Nlci4kJGNoZWNrVXJsQ2hhbmdlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMgPT09ICRyb290U2NvcGUgJiYgYXBwbHlBc3luY0lkICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBzY29wZSwgYW5kICRhcHBseUFzeW5jIGhhcyBzY2hlZHVsZWQgYSBkZWZlcnJlZCAkYXBwbHkoKSwgdGhlblxuICAgICAgICAgIC8vIGNhbmNlbCB0aGUgc2NoZWR1bGVkICRhcHBseSBhbmQgZmx1c2ggdGhlIHF1ZXVlIG9mIGV4cHJlc3Npb25zIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAgICAkYnJvd3Nlci5kZWZlci5jYW5jZWwoYXBwbHlBc3luY0lkKTtcbiAgICAgICAgICBmbHVzaEFwcGx5QXN5bmMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcblxuICAgICAgICBkbyB7IC8vIFwid2hpbGUgZGlydHlcIiBsb29wXG4gICAgICAgICAgZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0O1xuXG4gICAgICAgICAgd2hpbGUgKGFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBhc3luY1Rhc2sgPSBhc3luY1F1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICAgIGFzeW5jVGFzay5zY29wZS4kZXZhbChhc3luY1Rhc2suZXhwcmVzc2lvbiwgYXN5bmNUYXNrLmxvY2Fscyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyYXZlcnNlU2NvcGVzTG9vcDpcbiAgICAgICAgICBkbyB7IC8vIFwidHJhdmVyc2UgdGhlIHNjb3Blc1wiIGxvb3BcbiAgICAgICAgICAgIGlmICgod2F0Y2hlcnMgPSBjdXJyZW50LiQkd2F0Y2hlcnMpKSB7XG4gICAgICAgICAgICAgIC8vIHByb2Nlc3Mgb3VyIHdhdGNoZXNcbiAgICAgICAgICAgICAgbGVuZ3RoID0gd2F0Y2hlcnMubGVuZ3RoO1xuICAgICAgICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgd2F0Y2ggPSB3YXRjaGVyc1tsZW5ndGhdO1xuICAgICAgICAgICAgICAgICAgLy8gTW9zdCBjb21tb24gd2F0Y2hlcyBhcmUgb24gcHJpbWl0aXZlcywgaW4gd2hpY2ggY2FzZSB3ZSBjYW4gc2hvcnRcbiAgICAgICAgICAgICAgICAgIC8vIGNpcmN1aXQgaXQgd2l0aCA9PT0gb3BlcmF0b3IsIG9ubHkgd2hlbiA9PT0gZmFpbHMgZG8gd2UgdXNlIC5lcXVhbHNcbiAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHZhbHVlID0gd2F0Y2guZ2V0KGN1cnJlbnQpKSAhPT0gKGxhc3QgPSB3YXRjaC5sYXN0KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgISh3YXRjaC5lcVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZXF1YWxzKHZhbHVlLCBsYXN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGxhc3QgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgaXNOYU4odmFsdWUpICYmIGlzTmFOKGxhc3QpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSB3YXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICB3YXRjaC5sYXN0ID0gd2F0Y2guZXEgPyBjb3B5KHZhbHVlLCBudWxsKSA6IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgIHdhdGNoLmZuKHZhbHVlLCAoKGxhc3QgPT09IGluaXRXYXRjaFZhbCkgPyB2YWx1ZSA6IGxhc3QpLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodHRsIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nSWR4ID0gNCAtIHR0bDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghd2F0Y2hMb2dbbG9nSWR4XSkgd2F0Y2hMb2dbbG9nSWR4XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2F0Y2hMb2dbbG9nSWR4XS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiBpc0Z1bmN0aW9uKHdhdGNoLmV4cCkgPyAnZm46ICcgKyAod2F0Y2guZXhwLm5hbWUgfHwgd2F0Y2guZXhwLnRvU3RyaW5nKCkpIDogd2F0Y2guZXhwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWw6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWw6IGxhc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3YXRjaCA9PT0gbGFzdERpcnR5V2F0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbW9zdCByZWNlbnRseSBkaXJ0eSB3YXRjaGVyIGlzIG5vdyBjbGVhbiwgc2hvcnQgY2lyY3VpdCBzaW5jZSB0aGUgcmVtYWluaW5nIHdhdGNoZXJzXG4gICAgICAgICAgICAgICAgICAgICAgLy8gaGF2ZSBhbHJlYWR5IGJlZW4gdGVzdGVkLlxuICAgICAgICAgICAgICAgICAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWsgdHJhdmVyc2VTY29wZXNMb29wO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbFxuICAgICAgICAgICAgLy8geWVzLCB0aGlzIGNvZGUgaXMgYSBiaXQgY3JhenksIGJ1dCBpdCB3b3JrcyBhbmQgd2UgaGF2ZSB0ZXN0cyB0byBwcm92ZSBpdCFcbiAgICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGJyb2FkY2FzdFxuICAgICAgICAgICAgaWYgKCEobmV4dCA9ICgoY3VycmVudC4kJHdhdGNoZXJzQ291bnQgJiYgY3VycmVudC4kJGNoaWxkSGVhZCkgfHxcbiAgICAgICAgICAgICAgICAoY3VycmVudCAhPT0gdGFyZ2V0ICYmIGN1cnJlbnQuJCRuZXh0U2libGluZykpKSkge1xuICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBuZXh0KSk7XG5cbiAgICAgICAgICAvLyBgYnJlYWsgdHJhdmVyc2VTY29wZXNMb29wO2AgdGFrZXMgdXMgdG8gaGVyZVxuXG4gICAgICAgICAgaWYgKChkaXJ0eSB8fCBhc3luY1F1ZXVlLmxlbmd0aCkgJiYgISh0dGwtLSkpIHtcbiAgICAgICAgICAgIGNsZWFyUGhhc2UoKTtcbiAgICAgICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2luZmRpZycsXG4gICAgICAgICAgICAgICAgJ3swfSAkZGlnZXN0KCkgaXRlcmF0aW9ucyByZWFjaGVkLiBBYm9ydGluZyFcXG4nICtcbiAgICAgICAgICAgICAgICAnV2F0Y2hlcnMgZmlyZWQgaW4gdGhlIGxhc3QgNSBpdGVyYXRpb25zOiB7MX0nLFxuICAgICAgICAgICAgICAgIFRUTCwgd2F0Y2hMb2cpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IHdoaWxlIChkaXJ0eSB8fCBhc3luY1F1ZXVlLmxlbmd0aCk7XG5cbiAgICAgICAgY2xlYXJQaGFzZSgpO1xuXG4gICAgICAgIHdoaWxlIChwb3N0RGlnZXN0UXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBvc3REaWdlc3RRdWV1ZS5zaGlmdCgpKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGV2ZW50XG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95XG4gICAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiBzY29wZSBiZWluZyBkZXN0cm95ZWRcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEJyb2FkY2FzdGVkIHdoZW4gYSBzY29wZSBhbmQgaXRzIGNoaWxkcmVuIGFyZSBiZWluZyBkZXN0cm95ZWQuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGF0LCBpbiBBbmd1bGFySlMsIHRoZXJlIGlzIGFsc28gYSBgJGRlc3Ryb3lgIGpRdWVyeSBldmVudCwgd2hpY2ggY2FuIGJlIHVzZWQgdG9cbiAgICAgICAqIGNsZWFuIHVwIERPTSBiaW5kaW5ncyBiZWZvcmUgYW4gZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAgICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3lcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZW1vdmVzIHRoZSBjdXJyZW50IHNjb3BlIChhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbikgZnJvbSB0aGUgcGFyZW50IHNjb3BlLiBSZW1vdmFsIGltcGxpZXNcbiAgICAgICAqIHRoYXQgY2FsbHMgdG8ge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IHdpbGwgbm8gbG9uZ2VyXG4gICAgICAgKiBwcm9wYWdhdGUgdG8gdGhlIGN1cnJlbnQgc2NvcGUgYW5kIGl0cyBjaGlsZHJlbi4gUmVtb3ZhbCBhbHNvIGltcGxpZXMgdGhhdCB0aGUgY3VycmVudFxuICAgICAgICogc2NvcGUgaXMgZWxpZ2libGUgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgYCRkZXN0cm95KClgIGlzIHVzdWFsbHkgdXNlZCBieSBkaXJlY3RpdmVzIHN1Y2ggYXNcbiAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9IGZvciBtYW5hZ2luZyB0aGVcbiAgICAgICAqIHVucm9sbGluZyBvZiB0aGUgbG9vcC5cbiAgICAgICAqXG4gICAgICAgKiBKdXN0IGJlZm9yZSBhIHNjb3BlIGlzIGRlc3Ryb3llZCwgYSBgJGRlc3Ryb3lgIGV2ZW50IGlzIGJyb2FkY2FzdGVkIG9uIHRoaXMgc2NvcGUuXG4gICAgICAgKiBBcHBsaWNhdGlvbiBjb2RlIGNhbiByZWdpc3RlciBhIGAkZGVzdHJveWAgZXZlbnQgaGFuZGxlciB0aGF0IHdpbGwgZ2l2ZSBpdCBhIGNoYW5jZSB0b1xuICAgICAgICogcGVyZm9ybSBhbnkgbmVjZXNzYXJ5IGNsZWFudXAuXG4gICAgICAgKlxuICAgICAgICogTm90ZSB0aGF0LCBpbiBBbmd1bGFySlMsIHRoZXJlIGlzIGFsc28gYSBgJGRlc3Ryb3lgIGpRdWVyeSBldmVudCwgd2hpY2ggY2FuIGJlIHVzZWQgdG9cbiAgICAgICAqIGNsZWFuIHVwIERPTSBiaW5kaW5ncyBiZWZvcmUgYW4gZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAgICAgICAqL1xuICAgICAgJGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBXZSBjYW4ndCBkZXN0cm95IGEgc2NvcGUgdGhhdCBoYXMgYmVlbiBhbHJlYWR5IGRlc3Ryb3llZC5cbiAgICAgICAgaWYgKHRoaXMuJCRkZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuJHBhcmVudDtcblxuICAgICAgICB0aGlzLiRicm9hZGNhc3QoJyRkZXN0cm95Jyk7XG4gICAgICAgIHRoaXMuJCRkZXN0cm95ZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmICh0aGlzID09PSAkcm9vdFNjb3BlKSB7XG4gICAgICAgICAgLy9SZW1vdmUgaGFuZGxlcnMgYXR0YWNoZWQgdG8gd2luZG93IHdoZW4gJHJvb3RTY29wZSBpcyByZW1vdmVkXG4gICAgICAgICAgJGJyb3dzZXIuJCRhcHBsaWNhdGlvbkRlc3Ryb3llZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudCh0aGlzLCAtdGhpcy4kJHdhdGNoZXJzQ291bnQpO1xuICAgICAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gdGhpcy4kJGxpc3RlbmVyQ291bnQpIHtcbiAgICAgICAgICBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KHRoaXMsIHRoaXMuJCRsaXN0ZW5lckNvdW50W2V2ZW50TmFtZV0sIGV2ZW50TmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXZlciBhbGwgdGhlIHJlZmVyZW5jZXMgdG8gcGFyZW50IHNjb3BlcyAoYWZ0ZXIgdGhpcyBjbGVhbnVwLCB0aGUgY3VycmVudCBzY29wZSBzaG91bGRcbiAgICAgICAgLy8gbm90IGJlIHJldGFpbmVkIGJ5IGFueSBvZiBvdXIgcmVmZXJlbmNlcyBhbmQgc2hvdWxkIGJlIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24pXG4gICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LiQkY2hpbGRIZWFkID09IHRoaXMpIHBhcmVudC4kJGNoaWxkSGVhZCA9IHRoaXMuJCRuZXh0U2libGluZztcbiAgICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuJCRjaGlsZFRhaWwgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nO1xuICAgICAgICBpZiAodGhpcy4kJHByZXZTaWJsaW5nKSB0aGlzLiQkcHJldlNpYmxpbmcuJCRuZXh0U2libGluZyA9IHRoaXMuJCRuZXh0U2libGluZztcbiAgICAgICAgaWYgKHRoaXMuJCRuZXh0U2libGluZykgdGhpcy4kJG5leHRTaWJsaW5nLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmc7XG5cbiAgICAgICAgLy8gRGlzYWJsZSBsaXN0ZW5lcnMsIHdhdGNoZXJzIGFuZCBhcHBseS9kaWdlc3QgbWV0aG9kc1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gdGhpcy4kZGlnZXN0ID0gdGhpcy4kYXBwbHkgPSB0aGlzLiRldmFsQXN5bmMgPSB0aGlzLiRhcHBseUFzeW5jID0gbm9vcDtcbiAgICAgICAgdGhpcy4kb24gPSB0aGlzLiR3YXRjaCA9IHRoaXMuJHdhdGNoR3JvdXAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5vb3A7IH07XG4gICAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcblxuICAgICAgICAvLyBEaXNjb25uZWN0IHRoZSBuZXh0IHNpYmxpbmcgdG8gcHJldmVudCBgY2xlYW5VcFNjb3BlYCBkZXN0cm95aW5nIHRob3NlIHRvb1xuICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSBudWxsO1xuICAgICAgICBjbGVhblVwU2NvcGUodGhpcyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGV2YWxcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgYGV4cHJlc3Npb25gIG9uIHRoZSBjdXJyZW50IHNjb3BlIGFuZCByZXR1cm5zIHRoZSByZXN1bHQuIEFueSBleGNlcHRpb25zIGluXG4gICAgICAgKiB0aGUgZXhwcmVzc2lvbiBhcmUgcHJvcGFnYXRlZCAodW5jYXVnaHQpLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGV2YWx1YXRpbmcgQW5ndWxhclxuICAgICAgICogZXhwcmVzc2lvbnMuXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICB2YXIgc2NvcGUgPSBuZy4kcm9vdFNjb3BlLlNjb3BlKCk7XG4gICAgICAgICAgIHNjb3BlLmEgPSAxO1xuICAgICAgICAgICBzY29wZS5iID0gMjtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoJ2ErYicpKS50b0VxdWFsKDMpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoZnVuY3Rpb24oc2NvcGUpeyByZXR1cm4gc2NvcGUuYSArIHNjb3BlLmI7IH0pKS50b0VxdWFsKDMpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KG9iamVjdCk9fSBsb2NhbHMgTG9jYWwgdmFyaWFibGVzIG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbiBzY29wZS5cbiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uXG4gICAgICAgKi9cbiAgICAgICRldmFsOiBmdW5jdGlvbihleHByLCBsb2NhbHMpIHtcbiAgICAgICAgcmV0dXJuICRwYXJzZShleHByKSh0aGlzLCBsb2NhbHMpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmNcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgZXhwcmVzc2lvbiBvbiB0aGUgY3VycmVudCBzY29wZSBhdCBhIGxhdGVyIHBvaW50IGluIHRpbWUuXG4gICAgICAgKlxuICAgICAgICogVGhlIGAkZXZhbEFzeW5jYCBtYWtlcyBubyBndWFyYW50ZWVzIGFzIHRvIHdoZW4gdGhlIGBleHByZXNzaW9uYCB3aWxsIGJlIGV4ZWN1dGVkLCBvbmx5XG4gICAgICAgKiB0aGF0OlxuICAgICAgICpcbiAgICAgICAqICAgLSBpdCB3aWxsIGV4ZWN1dGUgYWZ0ZXIgdGhlIGZ1bmN0aW9uIHRoYXQgc2NoZWR1bGVkIHRoZSBldmFsdWF0aW9uIChwcmVmZXJhYmx5IGJlZm9yZSBET01cbiAgICAgICAqICAgICByZW5kZXJpbmcpLlxuICAgICAgICogICAtIGF0IGxlYXN0IG9uZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QgY3ljbGV9IHdpbGwgYmUgcGVyZm9ybWVkIGFmdGVyXG4gICAgICAgKiAgICAgYGV4cHJlc3Npb25gIGV4ZWN1dGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGVcbiAgICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBfX05vdGU6X18gaWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGAkZGlnZXN0YCBjeWNsZSwgYSBuZXcgYCRkaWdlc3RgIGN5Y2xlXG4gICAgICAgKiB3aWxsIGJlIHNjaGVkdWxlZC4gSG93ZXZlciwgaXQgaXMgZW5jb3VyYWdlZCB0byBhbHdheXMgY2FsbCBjb2RlIHRoYXQgY2hhbmdlcyB0aGUgbW9kZWxcbiAgICAgICAqIGZyb20gd2l0aGluIGFuIGAkYXBwbHlgIGNhbGwuIFRoYXQgaW5jbHVkZXMgY29kZSBldmFsdWF0ZWQgdmlhIGAkZXZhbEFzeW5jYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHByZXNzaW9uIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhvYmplY3QpPX0gbG9jYWxzIExvY2FsIHZhcmlhYmxlcyBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4gc2NvcGUuXG4gICAgICAgKi9cbiAgICAgICRldmFsQXN5bmM6IGZ1bmN0aW9uKGV4cHIsIGxvY2Fscykge1xuICAgICAgICAvLyBpZiB3ZSBhcmUgb3V0c2lkZSBvZiBhbiAkZGlnZXN0IGxvb3AgYW5kIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgd2UgYXJlIHNjaGVkdWxpbmcgYXN5bmNcbiAgICAgICAgLy8gdGFzayBhbHNvIHNjaGVkdWxlIGFzeW5jIGF1dG8tZmx1c2hcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UgJiYgIWFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoYXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhc3luY1F1ZXVlLnB1c2goe3Njb3BlOiB0aGlzLCBleHByZXNzaW9uOiBleHByLCBsb2NhbHM6IGxvY2Fsc30pO1xuICAgICAgfSxcblxuICAgICAgJCRwb3N0RGlnZXN0OiBmdW5jdGlvbihmbikge1xuICAgICAgICBwb3N0RGlnZXN0UXVldWUucHVzaChmbik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGFwcGx5XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogYCRhcHBseSgpYCBpcyB1c2VkIHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiBhbmd1bGFyIGZyb20gb3V0c2lkZSBvZiB0aGUgYW5ndWxhclxuICAgICAgICogZnJhbWV3b3JrLiAoRm9yIGV4YW1wbGUgZnJvbSBicm93c2VyIERPTSBldmVudHMsIHNldFRpbWVvdXQsIFhIUiBvciB0aGlyZCBwYXJ0eSBsaWJyYXJpZXMpLlxuICAgICAgICogQmVjYXVzZSB3ZSBhcmUgY2FsbGluZyBpbnRvIHRoZSBhbmd1bGFyIGZyYW1ld29yayB3ZSBuZWVkIHRvIHBlcmZvcm0gcHJvcGVyIHNjb3BlIGxpZmVcbiAgICAgICAqIGN5Y2xlIG9mIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciBleGNlcHRpb24gaGFuZGxpbmd9LFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCBleGVjdXRpbmcgd2F0Y2hlc30uXG4gICAgICAgKlxuICAgICAgICogIyMgTGlmZSBjeWNsZVxuICAgICAgICpcbiAgICAgICAqICMgUHNldWRvLUNvZGUgb2YgYCRhcHBseSgpYFxuICAgICAgICogYGBganNcbiAgICAgICAgICAgZnVuY3Rpb24gJGFwcGx5KGV4cHIpIHtcbiAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgcmV0dXJuICRldmFsKGV4cHIpO1xuICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAkcm9vdC4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogU2NvcGUncyBgJGFwcGx5KClgIG1ldGhvZCB0cmFuc2l0aW9ucyB0aHJvdWdoIHRoZSBmb2xsb3dpbmcgc3RhZ2VzOlxuICAgICAgICpcbiAgICAgICAqIDEuIFRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBleGVjdXRlZCB1c2luZyB0aGVcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsICRldmFsKCl9IG1ldGhvZC5cbiAgICAgICAqIDIuIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAgICogICAge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICogMy4gVGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaH0gbGlzdGVuZXJzIGFyZSBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGVcbiAgICAgICAqICAgIGV4cHJlc3Npb24gd2FzIGV4ZWN1dGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgJGFwcGx5OiBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYmVnaW5QaGFzZSgnJGFwcGx5Jyk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRldmFsKGV4cHIpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBjbGVhclBoYXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkYXBwbHlBc3luY1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNjaGVkdWxlIHRoZSBpbnZvY2F0aW9uIG9mICRhcHBseSB0byBvY2N1ciBhdCBhIGxhdGVyIHRpbWUuIFRoZSBhY3R1YWwgdGltZSBkaWZmZXJlbmNlXG4gICAgICAgKiB2YXJpZXMgYWNyb3NzIGJyb3dzZXJzLCBidXQgaXMgdHlwaWNhbGx5IGFyb3VuZCB+MTAgbWlsbGlzZWNvbmRzLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gcXVldWUgdXAgbXVsdGlwbGUgZXhwcmVzc2lvbnMgd2hpY2ggbmVlZCB0byBiZSBldmFsdWF0ZWQgaW4gdGhlIHNhbWVcbiAgICAgICAqIGRpZ2VzdC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKi9cbiAgICAgICRhcHBseUFzeW5jOiBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXM7XG4gICAgICAgIGV4cHIgJiYgYXBwbHlBc3luY1F1ZXVlLnB1c2goJGFwcGx5QXN5bmNFeHByZXNzaW9uKTtcbiAgICAgICAgc2NoZWR1bGVBcHBseUFzeW5jKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gJGFwcGx5QXN5bmNFeHByZXNzaW9uKCkge1xuICAgICAgICAgIHNjb3BlLiRldmFsKGV4cHIpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJG9uXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogTGlzdGVucyBvbiBldmVudHMgb2YgYSBnaXZlbiB0eXBlLiBTZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGVtaXQgJGVtaXR9IGZvclxuICAgICAgICogZGlzY3Vzc2lvbiBvZiBldmVudCBsaWZlIGN5Y2xlLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBldmVudCBsaXN0ZW5lciBmdW5jdGlvbiBmb3JtYXQgaXM6IGBmdW5jdGlvbihldmVudCwgYXJncy4uLilgLiBUaGUgYGV2ZW50YCBvYmplY3RcbiAgICAgICAqIHBhc3NlZCBpbnRvIHRoZSBsaXN0ZW5lciBoYXMgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICAgICAgICpcbiAgICAgICAqICAgLSBgdGFyZ2V0U2NvcGVgIC0gYHtTY29wZX1gOiB0aGUgc2NvcGUgb24gd2hpY2ggdGhlIGV2ZW50IHdhcyBgJGVtaXRgLWVkIG9yXG4gICAgICAgKiAgICAgYCRicm9hZGNhc3RgLWVkLlxuICAgICAgICogICAtIGBjdXJyZW50U2NvcGVgIC0gYHtTY29wZX1gOiB0aGUgc2NvcGUgdGhhdCBpcyBjdXJyZW50bHkgaGFuZGxpbmcgdGhlIGV2ZW50LiBPbmNlIHRoZVxuICAgICAgICogICAgIGV2ZW50IHByb3BhZ2F0ZXMgdGhyb3VnaCB0aGUgc2NvcGUgaGllcmFyY2h5LCB0aGlzIHByb3BlcnR5IGlzIHNldCB0byBudWxsLlxuICAgICAgICogICAtIGBuYW1lYCAtIGB7c3RyaW5nfWA6IG5hbWUgb2YgdGhlIGV2ZW50LlxuICAgICAgICogICAtIGBzdG9wUHJvcGFnYXRpb25gIC0gYHtmdW5jdGlvbj19YDogY2FsbGluZyBgc3RvcFByb3BhZ2F0aW9uYCBmdW5jdGlvbiB3aWxsIGNhbmNlbFxuICAgICAgICogICAgIGZ1cnRoZXIgZXZlbnQgcHJvcGFnYXRpb24gKGF2YWlsYWJsZSBvbmx5IGZvciBldmVudHMgdGhhdCB3ZXJlIGAkZW1pdGAtZWQpLlxuICAgICAgICogICAtIGBwcmV2ZW50RGVmYXVsdGAgLSBge2Z1bmN0aW9ufWA6IGNhbGxpbmcgYHByZXZlbnREZWZhdWx0YCBzZXRzIGBkZWZhdWx0UHJldmVudGVkYCBmbGFnXG4gICAgICAgKiAgICAgdG8gdHJ1ZS5cbiAgICAgICAqICAgLSBgZGVmYXVsdFByZXZlbnRlZGAgLSBge2Jvb2xlYW59YDogdHJ1ZSBpZiBgcHJldmVudERlZmF1bHRgIHdhcyBjYWxsZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBsaXN0ZW4gb24uXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50LCAuLi5hcmdzKX0gbGlzdGVuZXIgRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBldmVudCBpcyBlbWl0dGVkLlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci5cbiAgICAgICAqL1xuICAgICAgJG9uOiBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgbmFtZWRMaXN0ZW5lcnMgPSB0aGlzLiQkbGlzdGVuZXJzW25hbWVdO1xuICAgICAgICBpZiAoIW5hbWVkTGlzdGVuZXJzKSB7XG4gICAgICAgICAgdGhpcy4kJGxpc3RlbmVyc1tuYW1lXSA9IG5hbWVkTGlzdGVuZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbmFtZWRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKCFjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSkge1xuICAgICAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSsrO1xuICAgICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpbmRleE9mTGlzdGVuZXIgPSBuYW1lZExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgICAgICBpZiAoaW5kZXhPZkxpc3RlbmVyICE9PSAtMSkge1xuICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnNbaW5kZXhPZkxpc3RlbmVyXSA9IG51bGw7XG4gICAgICAgICAgICBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KHNlbGYsIDEsIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRlbWl0XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogRGlzcGF0Y2hlcyBhbiBldmVudCBgbmFtZWAgdXB3YXJkcyB0aHJvdWdoIHRoZSBzY29wZSBoaWVyYXJjaHkgbm90aWZ5aW5nIHRoZVxuICAgICAgICogcmVnaXN0ZXJlZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGxpc3RlbmVycy5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZXZlbnQgbGlmZSBjeWNsZSBzdGFydHMgYXQgdGhlIHNjb3BlIG9uIHdoaWNoIGAkZW1pdGAgd2FzIGNhbGxlZC4gQWxsXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSBsaXN0ZW5pbmcgZm9yIGBuYW1lYCBldmVudCBvbiB0aGlzIHNjb3BlIGdldFxuICAgICAgICogbm90aWZpZWQuIEFmdGVyd2FyZHMsIHRoZSBldmVudCB0cmF2ZXJzZXMgdXB3YXJkcyB0b3dhcmQgdGhlIHJvb3Qgc2NvcGUgYW5kIGNhbGxzIGFsbFxuICAgICAgICogcmVnaXN0ZXJlZCBsaXN0ZW5lcnMgYWxvbmcgdGhlIHdheS4gVGhlIGV2ZW50IHdpbGwgc3RvcCBwcm9wYWdhdGluZyBpZiBvbmUgb2YgdGhlIGxpc3RlbmVyc1xuICAgICAgICogY2FuY2VscyBpdC5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgZXhjZXB0aW9uIGVtaXR0ZWQgZnJvbSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gd2lsbCBiZSBwYXNzZWRcbiAgICAgICAqIG9udG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGVtaXQuXG4gICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgb25lIG9yIG1vcmUgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gRXZlbnQgb2JqZWN0IChzZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSkuXG4gICAgICAgKi9cbiAgICAgICRlbWl0OiBmdW5jdGlvbihuYW1lLCBhcmdzKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IFtdLFxuICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnMsXG4gICAgICAgICAgICBzY29wZSA9IHRoaXMsXG4gICAgICAgICAgICBzdG9wUHJvcGFnYXRpb24gPSBmYWxzZSxcbiAgICAgICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICB0YXJnZXRTY29wZTogc2NvcGUsXG4gICAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7c3RvcFByb3BhZ2F0aW9uID0gdHJ1ZTt9LFxuICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBpLCBsZW5ndGg7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIG5hbWVkTGlzdGVuZXJzID0gc2NvcGUuJCRsaXN0ZW5lcnNbbmFtZV0gfHwgZW1wdHk7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbmFtZWRMaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheVxuICAgICAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVyc1tpXSkge1xuICAgICAgICAgICAgICBuYW1lZExpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgLy9hbGxvdyBhbGwgbGlzdGVuZXJzIGF0dGFjaGVkIHRvIHRoZSBjdXJyZW50IHNjb3BlIHRvIHJ1blxuICAgICAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy9pZiBhbnkgbGlzdGVuZXIgb24gdGhlIGN1cnJlbnQgc2NvcGUgc3RvcHMgcHJvcGFnYXRpb24sIHByZXZlbnQgYnViYmxpbmdcbiAgICAgICAgICBpZiAoc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL3RyYXZlcnNlIHVwd2FyZHNcbiAgICAgICAgICBzY29wZSA9IHNjb3BlLiRwYXJlbnQ7XG4gICAgICAgIH0gd2hpbGUgKHNjb3BlKTtcblxuICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuXG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRicm9hZGNhc3RcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGBuYW1lYCBkb3dud2FyZHMgdG8gYWxsIGNoaWxkIHNjb3BlcyAoYW5kIHRoZWlyIGNoaWxkcmVuKSBub3RpZnlpbmcgdGhlXG4gICAgICAgKiByZWdpc3RlcmVkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gbGlzdGVuZXJzLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBldmVudCBsaWZlIGN5Y2xlIHN0YXJ0cyBhdCB0aGUgc2NvcGUgb24gd2hpY2ggYCRicm9hZGNhc3RgIHdhcyBjYWxsZWQuIEFsbFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXRcbiAgICAgICAqIG5vdGlmaWVkLiBBZnRlcndhcmRzLCB0aGUgZXZlbnQgcHJvcGFnYXRlcyB0byBhbGwgZGlyZWN0IGFuZCBpbmRpcmVjdCBzY29wZXMgb2YgdGhlIGN1cnJlbnRcbiAgICAgICAqIHNjb3BlIGFuZCBjYWxscyBhbGwgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMgYWxvbmcgdGhlIHdheS4gVGhlIGV2ZW50IGNhbm5vdCBiZSBjYW5jZWxlZC5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgZXhjZXB0aW9uIGVtaXR0ZWQgZnJvbSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gd2lsbCBiZSBwYXNzZWRcbiAgICAgICAqIG9udG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGJyb2FkY2FzdC5cbiAgICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBvbmUgb3IgbW9yZSBhcmd1bWVudHMgd2hpY2ggd2lsbCBiZSBwYXNzZWQgb250byB0aGUgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICogQHJldHVybiB7T2JqZWN0fSBFdmVudCBvYmplY3QsIHNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259XG4gICAgICAgKi9cbiAgICAgICRicm9hZGNhc3Q6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMsXG4gICAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0LFxuICAgICAgICAgICAgbmV4dCA9IHRhcmdldCxcbiAgICAgICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICB0YXJnZXRTY29wZTogdGFyZ2V0LFxuICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGlmICghdGFyZ2V0LiQkbGlzdGVuZXJDb3VudFtuYW1lXSkgcmV0dXJuIGV2ZW50O1xuXG4gICAgICAgIHZhciBsaXN0ZW5lckFyZ3MgPSBjb25jYXQoW2V2ZW50XSwgYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGxpc3RlbmVycywgaSwgbGVuZ3RoO1xuXG4gICAgICAgIC8vZG93biB3aGlsZSB5b3UgY2FuLCB0aGVuIHVwIGFuZCBuZXh0IHNpYmxpbmcgb3IgdXAgYW5kIG5leHQgc2libGluZyB1bnRpbCBiYWNrIGF0IHJvb3RcbiAgICAgICAgd2hpbGUgKChjdXJyZW50ID0gbmV4dCkpIHtcbiAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBjdXJyZW50O1xuICAgICAgICAgIGxpc3RlbmVycyA9IGN1cnJlbnQuJCRsaXN0ZW5lcnNbbmFtZV0gfHwgW107XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBpZiBsaXN0ZW5lcnMgd2VyZSBkZXJlZ2lzdGVyZWQsIGRlZnJhZ21lbnQgdGhlIGFycmF5XG4gICAgICAgICAgICBpZiAoIWxpc3RlbmVyc1tpXSkge1xuICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGxpc3RlbmVyQXJncyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbFxuICAgICAgICAgIC8vIHllcywgdGhpcyBjb2RlIGlzIGEgYml0IGNyYXp5LCBidXQgaXQgd29ya3MgYW5kIHdlIGhhdmUgdGVzdHMgdG8gcHJvdmUgaXQhXG4gICAgICAgICAgLy8gdGhpcyBwaWVjZSBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIHRyYXZlcnNhbCBpbiAkZGlnZXN0XG4gICAgICAgICAgLy8gKHRob3VnaCBpdCBkaWZmZXJzIGR1ZSB0byBoYXZpbmcgdGhlIGV4dHJhIGNoZWNrIGZvciAkJGxpc3RlbmVyQ291bnQpXG4gICAgICAgICAgaWYgKCEobmV4dCA9ICgoY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gJiYgY3VycmVudC4kJGNoaWxkSGVhZCkgfHxcbiAgICAgICAgICAgICAgKGN1cnJlbnQgIT09IHRhcmdldCAmJiBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSkpIHtcbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgIShuZXh0ID0gY3VycmVudC4kJG5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyICRyb290U2NvcGUgPSBuZXcgU2NvcGUoKTtcblxuICAgIC8vVGhlIGludGVybmFsIHF1ZXVlcy4gRXhwb3NlIHRoZW0gb24gdGhlICRyb290U2NvcGUgZm9yIGRlYnVnZ2luZy90ZXN0aW5nIHB1cnBvc2VzLlxuICAgIHZhciBhc3luY1F1ZXVlID0gJHJvb3RTY29wZS4kJGFzeW5jUXVldWUgPSBbXTtcbiAgICB2YXIgcG9zdERpZ2VzdFF1ZXVlID0gJHJvb3RTY29wZS4kJHBvc3REaWdlc3RRdWV1ZSA9IFtdO1xuICAgIHZhciBhcHBseUFzeW5jUXVldWUgPSAkcm9vdFNjb3BlLiQkYXBwbHlBc3luY1F1ZXVlID0gW107XG5cbiAgICByZXR1cm4gJHJvb3RTY29wZTtcblxuXG4gICAgZnVuY3Rpb24gYmVnaW5QaGFzZShwaGFzZSkge1xuICAgICAgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICB0aHJvdyAkcm9vdFNjb3BlTWluRXJyKCdpbnByb2cnLCAnezB9IGFscmVhZHkgaW4gcHJvZ3Jlc3MnLCAkcm9vdFNjb3BlLiQkcGhhc2UpO1xuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiQkcGhhc2UgPSBwaGFzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhclBoYXNlKCkge1xuICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbmNyZW1lbnRXYXRjaGVyc0NvdW50KGN1cnJlbnQsIGNvdW50KSB7XG4gICAgICBkbyB7XG4gICAgICAgIGN1cnJlbnQuJCR3YXRjaGVyc0NvdW50ICs9IGNvdW50O1xuICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KGN1cnJlbnQsIGNvdW50LCBuYW1lKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdIC09IGNvdW50O1xuXG4gICAgICAgIGlmIChjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSA9PT0gMCkge1xuICAgICAgICAgIGRlbGV0ZSBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBmdW5jdGlvbiB1c2VkIGFzIGFuIGluaXRpYWwgdmFsdWUgZm9yIHdhdGNoZXJzLlxuICAgICAqIGJlY2F1c2UgaXQncyB1bmlxdWUgd2UgY2FuIGVhc2lseSB0ZWxsIGl0IGFwYXJ0IGZyb20gb3RoZXIgdmFsdWVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdFdhdGNoVmFsKCkge31cblxuICAgIGZ1bmN0aW9uIGZsdXNoQXBwbHlBc3luYygpIHtcbiAgICAgIHdoaWxlIChhcHBseUFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXBwbHlBc3luY1F1ZXVlLnNoaWZ0KCkoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcHBseUFzeW5jSWQgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjaGVkdWxlQXBwbHlBc3luYygpIHtcbiAgICAgIGlmIChhcHBseUFzeW5jSWQgPT09IG51bGwpIHtcbiAgICAgICAgYXBwbHlBc3luY0lkID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZmx1c2hBcHBseUFzeW5jKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHJvb3RFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgcm9vdCBlbGVtZW50IG9mIEFuZ3VsYXIgYXBwbGljYXRpb24uIFRoaXMgaXMgZWl0aGVyIHRoZSBlbGVtZW50IHdoZXJlIHtAbGlua1xuICogbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfSB3YXMgZGVjbGFyZWQgb3IgdGhlIGVsZW1lbnQgcGFzc2VkIGludG9cbiAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0uIFRoZSBlbGVtZW50IHJlcHJlc2VudHMgdGhlIHJvb3QgZWxlbWVudCBvZiBhcHBsaWNhdGlvbi4gSXQgaXMgYWxzbyB0aGVcbiAqIGxvY2F0aW9uIHdoZXJlIHRoZSBhcHBsaWNhdGlvbidzIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9IHNlcnZpY2UgZ2V0c1xuICogcHVibGlzaGVkLCBhbmQgY2FuIGJlIHJldHJpZXZlZCB1c2luZyBgJHJvb3RFbGVtZW50LmluamVjdG9yKClgLlxuICovXG5cblxuLy8gdGhlIGltcGxlbWVudGF0aW9uIGlzIGluIGFuZ3VsYXIuYm9vdHN0cmFwXG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKiBQcml2YXRlIHNlcnZpY2UgdG8gc2FuaXRpemUgdXJpcyBmb3IgbGlua3MgYW5kIGltYWdlcy4gVXNlZCBieSAkY29tcGlsZSBhbmQgJHNhbml0aXplLlxuICovXG5mdW5jdGlvbiAkJFNhbml0aXplVXJpUHJvdmlkZXIoKSB7XG4gIHZhciBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IC9eXFxzKihodHRwcz98ZnRwfG1haWx0b3x0ZWx8ZmlsZSk6LyxcbiAgICBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSAvXlxccyooKGh0dHBzP3xmdHB8ZmlsZXxibG9iKTp8ZGF0YTppbWFnZVxcLykvO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBhW2hyZWZdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gcmVnZXhwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3Q7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNhbml0aXplVXJpKHVyaSwgaXNJbWFnZSkge1xuICAgICAgdmFyIHJlZ2V4ID0gaXNJbWFnZSA/IGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA6IGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICAgICAgdmFyIG5vcm1hbGl6ZWRWYWw7XG4gICAgICBub3JtYWxpemVkVmFsID0gdXJsUmVzb2x2ZSh1cmkpLmhyZWY7XG4gICAgICBpZiAobm9ybWFsaXplZFZhbCAhPT0gJycgJiYgIW5vcm1hbGl6ZWRWYWwubWF0Y2gocmVnZXgpKSB7XG4gICAgICAgIHJldHVybiAndW5zYWZlOicgKyBub3JtYWxpemVkVmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVyaTtcbiAgICB9O1xuICB9O1xufVxuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gKiAgICAgQW55IGNvbW1pdHMgdG8gdGhpcyBmaWxlIHNob3VsZCBiZSByZXZpZXdlZCB3aXRoIHNlY3VyaXR5IGluIG1pbmQuICAqXG4gKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgaXMgcmVxdWlyZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gKiAgICBPciBhbGxvd3MgZm9yIHNvbWVvbmUgdG8gY2hhbmdlIHRoZSBwcm90b3R5cGUgb2YgYnVpbHQtaW4gb2JqZWN0cz8gICAqXG4gKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG52YXIgJHNjZU1pbkVyciA9IG1pbkVycignJHNjZScpO1xuXG52YXIgU0NFX0NPTlRFWFRTID0ge1xuICBIVE1MOiAnaHRtbCcsXG4gIENTUzogJ2NzcycsXG4gIFVSTDogJ3VybCcsXG4gIC8vIFJFU09VUkNFX1VSTCBpcyBhIHN1YnR5cGUgb2YgVVJMIHVzZWQgaW4gY29udGV4dHMgd2hlcmUgYSBwcml2aWxlZ2VkIHJlc291cmNlIGlzIHNvdXJjZWQgZnJvbSBhXG4gIC8vIHVybC4gIChlLmcuIG5nLWluY2x1ZGUsIHNjcmlwdCBzcmMsIHRlbXBsYXRlVXJsKVxuICBSRVNPVVJDRV9VUkw6ICdyZXNvdXJjZVVybCcsXG4gIEpTOiAnanMnXG59O1xuXG4vLyBIZWxwZXIgZnVuY3Rpb25zIGZvbGxvdy5cblxuZnVuY3Rpb24gYWRqdXN0TWF0Y2hlcihtYXRjaGVyKSB7XG4gIGlmIChtYXRjaGVyID09PSAnc2VsZicpIHtcbiAgICByZXR1cm4gbWF0Y2hlcjtcbiAgfSBlbHNlIGlmIChpc1N0cmluZyhtYXRjaGVyKSkge1xuICAgIC8vIFN0cmluZ3MgbWF0Y2ggZXhhY3RseSBleGNlcHQgZm9yIDIgd2lsZGNhcmRzIC0gJyonIGFuZCAnKionLlxuICAgIC8vICcqJyBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgZXhjZXB0IHRob3NlIGZyb20gdGhlIHNldCAnOi8uPyYnLlxuICAgIC8vICcqKicgbWF0Y2hlcyBhbnkgY2hhcmFjdGVyIChsaWtlIC4qIGluIGEgUmVnRXhwKS5cbiAgICAvLyBNb3JlIHRoYW4gMiAqJ3MgcmFpc2VzIGFuIGVycm9yIGFzIGl0J3MgaWxsIGRlZmluZWQuXG4gICAgaWYgKG1hdGNoZXIuaW5kZXhPZignKioqJykgPiAtMSkge1xuICAgICAgdGhyb3cgJHNjZU1pbkVycignaXdjYXJkJyxcbiAgICAgICAgICAnSWxsZWdhbCBzZXF1ZW5jZSAqKiogaW4gc3RyaW5nIG1hdGNoZXIuICBTdHJpbmc6IHswfScsIG1hdGNoZXIpO1xuICAgIH1cbiAgICBtYXRjaGVyID0gZXNjYXBlRm9yUmVnZXhwKG1hdGNoZXIpLlxuICAgICAgICAgICAgICAgICAgcmVwbGFjZSgnXFxcXCpcXFxcKicsICcuKicpLlxuICAgICAgICAgICAgICAgICAgcmVwbGFjZSgnXFxcXConLCAnW146Ly4/JjtdKicpO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIG1hdGNoZXIgKyAnJCcpO1xuICB9IGVsc2UgaWYgKGlzUmVnRXhwKG1hdGNoZXIpKSB7XG4gICAgLy8gVGhlIG9ubHkgb3RoZXIgdHlwZSBvZiBtYXRjaGVyIGFsbG93ZWQgaXMgYSBSZWdleHAuXG4gICAgLy8gTWF0Y2ggZW50aXJlIFVSTCAvIGRpc2FsbG93IHBhcnRpYWwgbWF0Y2hlcy5cbiAgICAvLyBGbGFncyBhcmUgcmVzZXQgKGkuZS4gbm8gZ2xvYmFsLCBpZ25vcmVDYXNlIG9yIG11bHRpbGluZSlcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVyLnNvdXJjZSArICckJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgJHNjZU1pbkVycignaW1hdGNoZXInLFxuICAgICAgICAnTWF0Y2hlcnMgbWF5IG9ubHkgYmUgXCJzZWxmXCIsIHN0cmluZyBwYXR0ZXJucyBvciBSZWdFeHAgb2JqZWN0cycpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gYWRqdXN0TWF0Y2hlcnMobWF0Y2hlcnMpIHtcbiAgdmFyIGFkanVzdGVkTWF0Y2hlcnMgPSBbXTtcbiAgaWYgKGlzRGVmaW5lZChtYXRjaGVycykpIHtcbiAgICBmb3JFYWNoKG1hdGNoZXJzLCBmdW5jdGlvbihtYXRjaGVyKSB7XG4gICAgICBhZGp1c3RlZE1hdGNoZXJzLnB1c2goYWRqdXN0TWF0Y2hlcihtYXRjaGVyKSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGFkanVzdGVkTWF0Y2hlcnM7XG59XG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHNjZURlbGVnYXRlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGAkc2NlRGVsZWdhdGVgIGlzIGEgc2VydmljZSB0aGF0IGlzIHVzZWQgYnkgdGhlIGAkc2NlYCBzZXJ2aWNlIHRvIHByb3ZpZGUge0BsaW5rIG5nLiRzY2UgU3RyaWN0XG4gKiBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfSBzZXJ2aWNlcyB0byBBbmd1bGFySlMuXG4gKlxuICogVHlwaWNhbGx5LCB5b3Ugd291bGQgY29uZmlndXJlIG9yIG92ZXJyaWRlIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlICRzY2VEZWxlZ2F0ZX0gaW5zdGVhZCBvZlxuICogdGhlIGAkc2NlYCBzZXJ2aWNlIHRvIGN1c3RvbWl6ZSB0aGUgd2F5IFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIHdvcmtzIGluIEFuZ3VsYXJKUy4gIFRoaXMgaXNcbiAqIGJlY2F1c2UsIHdoaWxlIHRoZSBgJHNjZWAgcHJvdmlkZXMgbnVtZXJvdXMgc2hvcnRoYW5kIG1ldGhvZHMsIGV0Yy4sIHlvdSByZWFsbHkgb25seSBuZWVkIHRvXG4gKiBvdmVycmlkZSAzIGNvcmUgZnVuY3Rpb25zIChgdHJ1c3RBc2AsIGBnZXRUcnVzdGVkYCBhbmQgYHZhbHVlT2ZgKSB0byByZXBsYWNlIHRoZSB3YXkgdGhpbmdzXG4gKiB3b3JrIGJlY2F1c2UgYCRzY2VgIGRlbGVnYXRlcyB0byBgJHNjZURlbGVnYXRlYCBmb3IgdGhlc2Ugb3BlcmF0aW9ucy5cbiAqXG4gKiBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIgJHNjZURlbGVnYXRlUHJvdmlkZXJ9IHRvIGNvbmZpZ3VyZSB0aGlzIHNlcnZpY2UuXG4gKlxuICogVGhlIGRlZmF1bHQgaW5zdGFuY2Ugb2YgYCRzY2VEZWxlZ2F0ZWAgc2hvdWxkIHdvcmsgb3V0IG9mIHRoZSBib3ggd2l0aCBsaXR0bGUgcGFpbi4gIFdoaWxlIHlvdVxuICogY2FuIG92ZXJyaWRlIGl0IGNvbXBsZXRlbHkgdG8gY2hhbmdlIHRoZSBiZWhhdmlvciBvZiBgJHNjZWAsIHRoZSBjb21tb24gY2FzZSB3b3VsZFxuICogaW52b2x2ZSBjb25maWd1cmluZyB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSBpbnN0ZWFkIGJ5IHNldHRpbmdcbiAqIHlvdXIgb3duIHdoaXRlbGlzdHMgYW5kIGJsYWNrbGlzdHMgZm9yIHRydXN0aW5nIFVSTHMgdXNlZCBmb3IgbG9hZGluZyBBbmd1bGFySlMgcmVzb3VyY2VzIHN1Y2ggYXNcbiAqIHRlbXBsYXRlcy4gIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdFxuICogJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3R9IGFuZCB7QGxpbmtcbiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0fVxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkc2NlRGVsZWdhdGVQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGAkc2NlRGVsZWdhdGVQcm92aWRlcmAgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlXG4gKiAkc2NlRGVsZWdhdGV9IHNlcnZpY2UuICBUaGlzIGFsbG93cyBvbmUgdG8gZ2V0L3NldCB0aGUgd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyB1c2VkIHRvIGVuc3VyZVxuICogdGhhdCB0aGUgVVJMcyB1c2VkIGZvciBzb3VyY2luZyBBbmd1bGFyIHRlbXBsYXRlcyBhcmUgc2FmZS4gIFJlZmVyIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3R9IGFuZFxuICoge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0fVxuICpcbiAqIEZvciB0aGUgZ2VuZXJhbCBkZXRhaWxzIGFib3V0IHRoaXMgc2VydmljZSBpbiBBbmd1bGFyLCByZWFkIHRoZSBtYWluIHBhZ2UgZm9yIHtAbGluayBuZy4kc2NlXG4gKiBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKlxuICogKipFeGFtcGxlKio6ICBDb25zaWRlciB0aGUgZm9sbG93aW5nIGNhc2UuIDxhIG5hbWU9XCJleGFtcGxlXCI+PC9hPlxuICpcbiAqIC0geW91ciBhcHAgaXMgaG9zdGVkIGF0IHVybCBgaHR0cDovL215YXBwLmV4YW1wbGUuY29tL2BcbiAqIC0gYnV0IHNvbWUgb2YgeW91ciB0ZW1wbGF0ZXMgYXJlIGhvc3RlZCBvbiBvdGhlciBkb21haW5zIHlvdSBjb250cm9sIHN1Y2ggYXNcbiAqICAgYGh0dHA6Ly9zcnYwMS5hc3NldHMuZXhhbXBsZS5jb20vYCzCoCBgaHR0cDovL3NydjAyLmFzc2V0cy5leGFtcGxlLmNvbS9gLCBldGMuXG4gKiAtIGFuZCB5b3UgaGF2ZSBhbiBvcGVuIHJlZGlyZWN0IGF0IGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vY2xpY2tUaHJ1Py4uLmAuXG4gKlxuICogSGVyZSBpcyB3aGF0IGEgc2VjdXJlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgc2NlbmFyaW8gbWlnaHQgbG9vayBsaWtlOlxuICpcbiAqIGBgYFxuICogIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKS5jb25maWcoZnVuY3Rpb24oJHNjZURlbGVnYXRlUHJvdmlkZXIpIHtcbiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0KFtcbiAqICAgICAgLy8gQWxsb3cgc2FtZSBvcmlnaW4gcmVzb3VyY2UgbG9hZHMuXG4gKiAgICAgICdzZWxmJyxcbiAqICAgICAgLy8gQWxsb3cgbG9hZGluZyBmcm9tIG91ciBhc3NldHMgZG9tYWluLiAgTm90aWNlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gKiBhbmQgKiouXG4gKiAgICAgICdodHRwOi8vc3J2Ki5hc3NldHMuZXhhbXBsZS5jb20vKionXG4gKiAgICBdKTtcbiAqXG4gKiAgICAvLyBUaGUgYmxhY2tsaXN0IG92ZXJyaWRlcyB0aGUgd2hpdGVsaXN0IHNvIHRoZSBvcGVuIHJlZGlyZWN0IGhlcmUgaXMgYmxvY2tlZC5cbiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0KFtcbiAqICAgICAgJ2h0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9jbGlja1RocnUqKidcbiAqICAgIF0pO1xuICogIH0pO1xuICogYGBgXG4gKi9cblxuZnVuY3Rpb24gJFNjZURlbGVnYXRlUHJvdmlkZXIoKSB7XG4gIHRoaXMuU0NFX0NPTlRFWFRTID0gU0NFX0NPTlRFWFRTO1xuXG4gIC8vIFJlc291cmNlIFVSTHMgY2FuIGFsc28gYmUgdHJ1c3RlZCBieSBwb2xpY3kuXG4gIHZhciByZXNvdXJjZVVybFdoaXRlbGlzdCA9IFsnc2VsZiddLFxuICAgICAgcmVzb3VyY2VVcmxCbGFja2xpc3QgPSBbXTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PX0gd2hpdGVsaXN0IFdoZW4gcHJvdmlkZWQsIHJlcGxhY2VzIHRoZSByZXNvdXJjZVVybFdoaXRlbGlzdCB3aXRoIHRoZSB2YWx1ZVxuICAgKiAgICAgcHJvdmlkZWQuICBUaGlzIG11c3QgYmUgYW4gYXJyYXkgb3IgbnVsbC4gIEEgc25hcHNob3Qgb2YgdGhpcyBhcnJheSBpcyB1c2VkIHNvIGZ1cnRoZXJcbiAgICogICAgIGNoYW5nZXMgdG8gdGhlIGFycmF5IGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgRm9sbG93IHtAbGluayBuZy4kc2NlI3Jlc291cmNlVXJsUGF0dGVybkl0ZW0gdGhpcyBsaW5rfSBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbXNcbiAgICogICAgIGFsbG93ZWQgaW4gdGhpcyBhcnJheS5cbiAgICpcbiAgICogICAgIE5vdGU6ICoqYW4gZW1wdHkgd2hpdGVsaXN0IGFycmF5IHdpbGwgYmxvY2sgYWxsIFVSTHMqKiFcbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9IHRoZSBjdXJyZW50bHkgc2V0IHdoaXRlbGlzdCBhcnJheS5cbiAgICpcbiAgICogVGhlICoqZGVmYXVsdCB2YWx1ZSoqIHdoZW4gbm8gd2hpdGVsaXN0IGhhcyBiZWVuIGV4cGxpY2l0bHkgc2V0IGlzIGBbJ3NlbGYnXWAgYWxsb3dpbmcgb25seVxuICAgKiBzYW1lIG9yaWdpbiByZXNvdXJjZSByZXF1ZXN0cy5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMvR2V0cyB0aGUgd2hpdGVsaXN0IG9mIHRydXN0ZWQgcmVzb3VyY2UgVVJMcy5cbiAgICovXG4gIHRoaXMucmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXNvdXJjZVVybFdoaXRlbGlzdCA9IGFkanVzdE1hdGNoZXJzKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc291cmNlVXJsV2hpdGVsaXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk9fSBibGFja2xpc3QgV2hlbiBwcm92aWRlZCwgcmVwbGFjZXMgdGhlIHJlc291cmNlVXJsQmxhY2tsaXN0IHdpdGggdGhlIHZhbHVlXG4gICAqICAgICBwcm92aWRlZC4gIFRoaXMgbXVzdCBiZSBhbiBhcnJheSBvciBudWxsLiAgQSBzbmFwc2hvdCBvZiB0aGlzIGFycmF5IGlzIHVzZWQgc28gZnVydGhlclxuICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuXG4gICAqXG4gICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtc1xuICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LlxuICAgKlxuICAgKiAgICAgVGhlIHR5cGljYWwgdXNhZ2UgZm9yIHRoZSBibGFja2xpc3QgaXMgdG8gKipibG9ja1xuICAgKiAgICAgW29wZW4gcmVkaXJlY3RzXShodHRwOi8vY3dlLm1pdHJlLm9yZy9kYXRhL2RlZmluaXRpb25zLzYwMS5odG1sKSoqIHNlcnZlZCBieSB5b3VyIGRvbWFpbiBhc1xuICAgKiAgICAgdGhlc2Ugd291bGQgb3RoZXJ3aXNlIGJlIHRydXN0ZWQgYnV0IGFjdHVhbGx5IHJldHVybiBjb250ZW50IGZyb20gdGhlIHJlZGlyZWN0ZWQgZG9tYWluLlxuICAgKlxuICAgKiAgICAgRmluYWxseSwgKip0aGUgYmxhY2tsaXN0IG92ZXJyaWRlcyB0aGUgd2hpdGVsaXN0KiogYW5kIGhhcyB0aGUgZmluYWwgc2F5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheX0gdGhlIGN1cnJlbnRseSBzZXQgYmxhY2tsaXN0IGFycmF5LlxuICAgKlxuICAgKiBUaGUgKipkZWZhdWx0IHZhbHVlKiogd2hlbiBubyB3aGl0ZWxpc3QgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQgaXMgdGhlIGVtcHR5IGFycmF5IChpLmUuIHRoZXJlXG4gICAqIGlzIG5vIGJsYWNrbGlzdC4pXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzL0dldHMgdGhlIGJsYWNrbGlzdCBvZiB0cnVzdGVkIHJlc291cmNlIFVSTHMuXG4gICAqL1xuXG4gIHRoaXMucmVzb3VyY2VVcmxCbGFja2xpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXNvdXJjZVVybEJsYWNrbGlzdCA9IGFkanVzdE1hdGNoZXJzKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc291cmNlVXJsQmxhY2tsaXN0O1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7XG5cbiAgICB2YXIgaHRtbFNhbml0aXplciA9IGZ1bmN0aW9uIGh0bWxTYW5pdGl6ZXIoaHRtbCkge1xuICAgICAgdGhyb3cgJHNjZU1pbkVycigndW5zYWZlJywgJ0F0dGVtcHRpbmcgdG8gdXNlIGFuIHVuc2FmZSB2YWx1ZSBpbiBhIHNhZmUgY29udGV4dC4nKTtcbiAgICB9O1xuXG4gICAgaWYgKCRpbmplY3Rvci5oYXMoJyRzYW5pdGl6ZScpKSB7XG4gICAgICBodG1sU2FuaXRpemVyID0gJGluamVjdG9yLmdldCgnJHNhbml0aXplJyk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBtYXRjaFVybChtYXRjaGVyLCBwYXJzZWRVcmwpIHtcbiAgICAgIGlmIChtYXRjaGVyID09PSAnc2VsZicpIHtcbiAgICAgICAgcmV0dXJuIHVybElzU2FtZU9yaWdpbihwYXJzZWRVcmwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmaW5pdGVseSBhIHJlZ2V4LiAgU2VlIGFkanVzdE1hdGNoZXJzKClcbiAgICAgICAgcmV0dXJuICEhbWF0Y2hlci5leGVjKHBhcnNlZFVybC5ocmVmKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1Jlc291cmNlVXJsQWxsb3dlZEJ5UG9saWN5KHVybCkge1xuICAgICAgdmFyIHBhcnNlZFVybCA9IHVybFJlc29sdmUodXJsLnRvU3RyaW5nKCkpO1xuICAgICAgdmFyIGksIG4sIGFsbG93ZWQgPSBmYWxzZTtcbiAgICAgIC8vIEVuc3VyZSB0aGF0IGF0IGxlYXN0IG9uZSBpdGVtIGZyb20gdGhlIHdoaXRlbGlzdCBhbGxvd3MgdGhpcyB1cmwuXG4gICAgICBmb3IgKGkgPSAwLCBuID0gcmVzb3VyY2VVcmxXaGl0ZWxpc3QubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybFdoaXRlbGlzdFtpXSwgcGFyc2VkVXJsKSkge1xuICAgICAgICAgIGFsbG93ZWQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYWxsb3dlZCkge1xuICAgICAgICAvLyBFbnN1cmUgdGhhdCBubyBpdGVtIGZyb20gdGhlIGJsYWNrbGlzdCBibG9ja2VkIHRoaXMgdXJsLlxuICAgICAgICBmb3IgKGkgPSAwLCBuID0gcmVzb3VyY2VVcmxCbGFja2xpc3QubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgaWYgKG1hdGNoVXJsKHJlc291cmNlVXJsQmxhY2tsaXN0W2ldLCBwYXJzZWRVcmwpKSB7XG4gICAgICAgICAgICBhbGxvd2VkID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhbGxvd2VkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlSG9sZGVyVHlwZShCYXNlKSB7XG4gICAgICB2YXIgaG9sZGVyVHlwZSA9IGZ1bmN0aW9uIFRydXN0ZWRWYWx1ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIGlmIChCYXNlKSB7XG4gICAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlID0gbmV3IEJhc2UoKTtcbiAgICAgIH1cbiAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiBzY2VWYWx1ZU9mKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpO1xuICAgICAgfTtcbiAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gc2NlVG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCkudG9TdHJpbmcoKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gaG9sZGVyVHlwZTtcbiAgICB9XG5cbiAgICB2YXIgdHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSA9IGdlbmVyYXRlSG9sZGVyVHlwZSgpLFxuICAgICAgICBieVR5cGUgPSB7fTtcblxuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuSFRNTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5DU1NdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuVVJMXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkpTXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUoYnlUeXBlW1NDRV9DT05URVhUUy5VUkxdKTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBpcyB0cnVzdGVkIGJ5IGFuZ3VsYXIgZm9yIHVzZSBpbiBzcGVjaWZpZWQgc3RyaWN0XG4gICAgICogY29udGV4dHVhbCBlc2NhcGluZyBjb250ZXh0cyAoc3VjaCBhcyBuZy1iaW5kLWh0bWwsIG5nLWluY2x1ZGUsIGFueSBzcmNcbiAgICAgKiBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiwgYW55IGRvbSBldmVudCBiaW5kaW5nIGF0dHJpYnV0ZSBpbnRlcnBvbGF0aW9uXG4gICAgICogc3VjaCBhcyBmb3Igb25jbGljaywgIGV0Yy4pIHRoYXQgdXNlcyB0aGUgcHJvdmlkZWQgdmFsdWUuXG4gICAgICogU2VlIHtAbGluayBuZy4kc2NlICRzY2V9IGZvciBlbmFibGluZyBzdHJpY3QgY29udGV4dHVhbCBlc2NhcGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyBzYWZlIGZvciB1c2UuICBlLmcuIHVybCxcbiAgICAgKiAgIHJlc291cmNlVXJsLCBodG1sLCBqcyBhbmQgY3NzLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZCB0cnVzdGVkL3NhZmUuXG4gICAgICogQHJldHVybnMgeyp9IEEgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB0byBzdGFuZCBpbiBmb3IgdGhlIHByb3ZpZGVkIGB2YWx1ZWAgaW4gcGxhY2VzXG4gICAgICogd2hlcmUgQW5ndWxhciBleHBlY3RzIGEgJHNjZS50cnVzdEFzKCkgcmV0dXJuIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRydXN0QXModHlwZSwgdHJ1c3RlZFZhbHVlKSB7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSAoYnlUeXBlLmhhc093blByb3BlcnR5KHR5cGUpID8gYnlUeXBlW3R5cGVdIDogbnVsbCk7XG4gICAgICBpZiAoIUNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2ljb250ZXh0JyxcbiAgICAgICAgICAgICdBdHRlbXB0ZWQgdG8gdHJ1c3QgYSB2YWx1ZSBpbiBpbnZhbGlkIGNvbnRleHQuIENvbnRleHQ6IHswfTsgVmFsdWU6IHsxfScsXG4gICAgICAgICAgICB0eXBlLCB0cnVzdGVkVmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHRydXN0ZWRWYWx1ZSA9PT0gbnVsbCB8fCBpc1VuZGVmaW5lZCh0cnVzdGVkVmFsdWUpIHx8IHRydXN0ZWRWYWx1ZSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIHRydXN0ZWRWYWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIEFsbCB0aGUgY3VycmVudCBjb250ZXh0cyBpbiBTQ0VfQ09OVEVYVFMgaGFwcGVuIHRvIGJlIHN0cmluZ3MuICBJbiBvcmRlciB0byBhdm9pZCB0cnVzdGluZ1xuICAgICAgLy8gbXV0YWJsZSBvYmplY3RzLCB3ZSBlbnN1cmUgaGVyZSB0aGF0IHRoZSB2YWx1ZSBwYXNzZWQgaW4gaXMgYWN0dWFsbHkgYSBzdHJpbmcuXG4gICAgICBpZiAodHlwZW9mIHRydXN0ZWRWYWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgJHNjZU1pbkVycignaXR5cGUnLFxuICAgICAgICAgICAgJ0F0dGVtcHRlZCB0byB0cnVzdCBhIG5vbi1zdHJpbmcgdmFsdWUgaW4gYSBjb250ZW50IHJlcXVpcmluZyBhIHN0cmluZzogQ29udGV4dDogezB9JyxcbiAgICAgICAgICAgIHR5cGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0cnVzdGVkVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlRGVsZWdhdGUjdmFsdWVPZlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogSWYgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgaGFkIGJlZW4gcmV0dXJuZWQgYnkgYSBwcmlvciBjYWxsIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LCByZXR1cm5zIHRoZSB2YWx1ZSB0aGF0IGhhZCBiZWVuIHBhc3NlZCB0byB7QGxpbmtcbiAgICAgKiBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfS5cbiAgICAgKlxuICAgICAqIElmIHRoZSBwYXNzZWQgcGFyYW1ldGVyIGlzIG5vdCBhIHZhbHVlIHRoYXQgaGFkIGJlZW4gcmV0dXJuZWQgYnkge0BsaW5rXG4gICAgICogbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0sIHJldHVybnMgaXQgYXMtaXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSByZXN1bHQgb2YgYSBwcmlvciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH1cbiAgICAgKiAgICAgIGNhbGwgb3IgYW55dGhpbmcgZWxzZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIGB2YWx1ZWAgdGhhdCB3YXMgb3JpZ2luYWxseSBwcm92aWRlZCB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gaWYgYHZhbHVlYCBpcyB0aGUgcmVzdWx0IG9mIHN1Y2ggYSBjYWxsLiAgT3RoZXJ3aXNlLCByZXR1cm5zXG4gICAgICogICAgIGB2YWx1ZWAgdW5jaGFuZ2VkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlT2YobWF5YmVUcnVzdGVkKSB7XG4gICAgICBpZiAobWF5YmVUcnVzdGVkIGluc3RhbmNlb2YgdHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSkge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVGFrZXMgdGhlIHJlc3VsdCBvZiBhIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBjYWxsIGFuZFxuICAgICAqIHJldHVybnMgdGhlIG9yaWdpbmFsbHkgc3VwcGxpZWQgdmFsdWUgaWYgdGhlIHF1ZXJpZWQgY29udGV4dCB0eXBlIGlzIGEgc3VwZXJ0eXBlIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgdHlwZS4gIElmIHRoaXMgY29uZGl0aW9uIGlzbid0IHNhdGlzZmllZCwgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyB0byBiZSB1c2VkLlxuICAgICAqIEBwYXJhbSB7Kn0gbWF5YmVUcnVzdGVkIFRoZSByZXN1bHQgb2YgYSBwcmlvciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gY2FsbC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoZSB3YXMgb3JpZ2luYWxseSBwcm92aWRlZCB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKiAgICAgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gaWYgdmFsaWQgaW4gdGhpcyBjb250ZXh0LiAgT3RoZXJ3aXNlLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFRydXN0ZWQodHlwZSwgbWF5YmVUcnVzdGVkKSB7XG4gICAgICBpZiAobWF5YmVUcnVzdGVkID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKG1heWJlVHJ1c3RlZCkgfHwgbWF5YmVUcnVzdGVkID09PSAnJykge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpO1xuICAgICAgaWYgKGNvbnN0cnVjdG9yICYmIG1heWJlVHJ1c3RlZCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHdlIGdldCBoZXJlLCB0aGVuIHdlIG1heSBvbmx5IHRha2Ugb25lIG9mIHR3byBhY3Rpb25zLlxuICAgICAgLy8gMS4gc2FuaXRpemUgdGhlIHZhbHVlIGZvciB0aGUgcmVxdWVzdGVkIHR5cGUsIG9yXG4gICAgICAvLyAyLiB0aHJvdyBhbiBleGNlcHRpb24uXG4gICAgICBpZiAodHlwZSA9PT0gU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTCkge1xuICAgICAgICBpZiAoaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeShtYXliZVRydXN0ZWQpKSB7XG4gICAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpbnNlY3VybCcsXG4gICAgICAgICAgICAgICdCbG9ja2VkIGxvYWRpbmcgcmVzb3VyY2UgZnJvbSB1cmwgbm90IGFsbG93ZWQgYnkgJHNjZURlbGVnYXRlIHBvbGljeS4gIFVSTDogezB9JyxcbiAgICAgICAgICAgICAgbWF5YmVUcnVzdGVkLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFNDRV9DT05URVhUUy5IVE1MKSB7XG4gICAgICAgIHJldHVybiBodG1sU2FuaXRpemVyKG1heWJlVHJ1c3RlZCk7XG4gICAgICB9XG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCd1bnNhZmUnLCAnQXR0ZW1wdGluZyB0byB1c2UgYW4gdW5zYWZlIHZhbHVlIGluIGEgc2FmZSBjb250ZXh0LicpO1xuICAgIH1cblxuICAgIHJldHVybiB7IHRydXN0QXM6IHRydXN0QXMsXG4gICAgICAgICAgICAgZ2V0VHJ1c3RlZDogZ2V0VHJ1c3RlZCxcbiAgICAgICAgICAgICB2YWx1ZU9mOiB2YWx1ZU9mIH07XG4gIH1dO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkc2NlUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSAkc2NlUHJvdmlkZXIgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBzZXJ2aWNlLlxuICogLSAgIGVuYWJsZS9kaXNhYmxlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGluIGEgbW9kdWxlXG4gKiAtICAgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gd2l0aCBhIGN1c3RvbSBkZWxlZ2F0ZVxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB7QGxpbmsgbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKi9cblxuLyoganNoaW50IG1heGxlbjogZmFsc2UqL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkc2NlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGAkc2NlYCBpcyBhIHNlcnZpY2UgdGhhdCBwcm92aWRlcyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBzZXJ2aWNlcyB0byBBbmd1bGFySlMuXG4gKlxuICogIyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZ1xuICpcbiAqIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGlzIGEgbW9kZSBpbiB3aGljaCBBbmd1bGFySlMgcmVxdWlyZXMgYmluZGluZ3MgaW4gY2VydGFpblxuICogY29udGV4dHMgdG8gcmVzdWx0IGluIGEgdmFsdWUgdGhhdCBpcyBtYXJrZWQgYXMgc2FmZSB0byB1c2UgZm9yIHRoYXQgY29udGV4dC4gIE9uZSBleGFtcGxlIG9mXG4gKiBzdWNoIGEgY29udGV4dCBpcyBiaW5kaW5nIGFyYml0cmFyeSBodG1sIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIgdmlhIGBuZy1iaW5kLWh0bWxgLiAgV2UgcmVmZXJcbiAqIHRvIHRoZXNlIGNvbnRleHRzIGFzIHByaXZpbGVnZWQgb3IgU0NFIGNvbnRleHRzLlxuICpcbiAqIEFzIG9mIHZlcnNpb24gMS4yLCBBbmd1bGFyIHNoaXBzIHdpdGggU0NFIGVuYWJsZWQgYnkgZGVmYXVsdC5cbiAqXG4gKiBOb3RlOiAgV2hlbiBlbmFibGVkICh0aGUgZGVmYXVsdCksIElFPDExIGluIHF1aXJrcyBtb2RlIGlzIG5vdCBzdXBwb3J0ZWQuICBJbiB0aGlzIG1vZGUsIElFPDExIGFsbG93XG4gKiBvbmUgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgamF2YXNjcmlwdCBieSB0aGUgdXNlIG9mIHRoZSBleHByZXNzaW9uKCkgc3ludGF4LiAgUmVmZXJcbiAqIDxodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZS9hcmNoaXZlLzIwMDgvMTAvMTYvZW5kaW5nLWV4cHJlc3Npb25zLmFzcHg+IHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlbS5cbiAqIFlvdSBjYW4gZW5zdXJlIHlvdXIgZG9jdW1lbnQgaXMgaW4gc3RhbmRhcmRzIG1vZGUgYW5kIG5vdCBxdWlya3MgbW9kZSBieSBhZGRpbmcgYDwhZG9jdHlwZSBodG1sPmBcbiAqIHRvIHRoZSB0b3Agb2YgeW91ciBIVE1MIGRvY3VtZW50LlxuICpcbiAqIFNDRSBhc3Npc3RzIGluIHdyaXRpbmcgY29kZSBpbiB3YXkgdGhhdCAoYSkgaXMgc2VjdXJlIGJ5IGRlZmF1bHQgYW5kIChiKSBtYWtlcyBhdWRpdGluZyBmb3JcbiAqIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcyBzdWNoIGFzIFhTUywgY2xpY2tqYWNraW5nLCBldGMuIGEgbG90IGVhc2llci5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBhIGJpbmRpbmcgaW4gYSBwcml2aWxlZ2VkIGNvbnRleHQ6XG4gKlxuICogYGBgXG4gKiA8aW5wdXQgbmctbW9kZWw9XCJ1c2VySHRtbFwiIGFyaWEtbGFiZWw9XCJVc2VyIGlucHV0XCI+XG4gKiA8ZGl2IG5nLWJpbmQtaHRtbD1cInVzZXJIdG1sXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhhdCBgbmctYmluZC1odG1sYCBpcyBib3VuZCB0byBgdXNlckh0bWxgIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIuICBXaXRoIFNDRVxuICogZGlzYWJsZWQsIHRoaXMgYXBwbGljYXRpb24gYWxsb3dzIHRoZSB1c2VyIHRvIHJlbmRlciBhcmJpdHJhcnkgSFRNTCBpbnRvIHRoZSBESVYuXG4gKiBJbiBhIG1vcmUgcmVhbGlzdGljIGV4YW1wbGUsIG9uZSBtYXkgYmUgcmVuZGVyaW5nIHVzZXIgY29tbWVudHMsIGJsb2cgYXJ0aWNsZXMsIGV0Yy4gdmlhXG4gKiBiaW5kaW5ncy4gIChIVE1MIGlzIGp1c3Qgb25lIGV4YW1wbGUgb2YgYSBjb250ZXh0IHdoZXJlIHJlbmRlcmluZyB1c2VyIGNvbnRyb2xsZWQgaW5wdXQgY3JlYXRlc1xuICogc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLilcbiAqXG4gKiBGb3IgdGhlIGNhc2Ugb2YgSFRNTCwgeW91IG1pZ2h0IHVzZSBhIGxpYnJhcnksIGVpdGhlciBvbiB0aGUgY2xpZW50IHNpZGUsIG9yIG9uIHRoZSBzZXJ2ZXIgc2lkZSxcbiAqIHRvIHNhbml0aXplIHVuc2FmZSBIVE1MIGJlZm9yZSBiaW5kaW5nIHRvIHRoZSB2YWx1ZSBhbmQgcmVuZGVyaW5nIGl0IGluIHRoZSBkb2N1bWVudC5cbiAqXG4gKiBIb3cgd291bGQgeW91IGVuc3VyZSB0aGF0IGV2ZXJ5IHBsYWNlIHRoYXQgdXNlZCB0aGVzZSB0eXBlcyBvZiBiaW5kaW5ncyB3YXMgYm91bmQgdG8gYSB2YWx1ZSB0aGF0XG4gKiB3YXMgc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSAob3IgcmV0dXJuZWQgYXMgc2FmZSBmb3IgcmVuZGVyaW5nIGJ5IHlvdXIgc2VydmVyPykgIEhvdyBjYW4geW91XG4gKiBlbnN1cmUgdGhhdCB5b3UgZGlkbid0IGFjY2lkZW50YWxseSBkZWxldGUgdGhlIGxpbmUgdGhhdCBzYW5pdGl6ZWQgdGhlIHZhbHVlLCBvciByZW5hbWVkIHNvbWVcbiAqIHByb3BlcnRpZXMvZmllbGRzIGFuZCBmb3Jnb3QgdG8gdXBkYXRlIHRoZSBiaW5kaW5nIHRvIHRoZSBzYW5pdGl6ZWQgdmFsdWU/XG4gKlxuICogVG8gYmUgc2VjdXJlIGJ5IGRlZmF1bHQsIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IGFueSBzdWNoIGJpbmRpbmdzIGFyZSBkaXNhbGxvd2VkIHVubGVzcyB5b3UgY2FuXG4gKiBkZXRlcm1pbmUgdGhhdCBzb21ldGhpbmcgZXhwbGljaXRseSBzYXlzIGl0J3Mgc2FmZSB0byB1c2UgYSB2YWx1ZSBmb3IgYmluZGluZyBpbiB0aGF0XG4gKiBjb250ZXh0LiAgWW91IGNhbiB0aGVuIGF1ZGl0IHlvdXIgY29kZSAoYSBzaW1wbGUgZ3JlcCB3b3VsZCBkbykgdG8gZW5zdXJlIHRoYXQgdGhpcyBpcyBvbmx5IGRvbmVcbiAqIGZvciB0aG9zZSB2YWx1ZXMgdGhhdCB5b3UgY2FuIGVhc2lseSB0ZWxsIGFyZSBzYWZlIC0gYmVjYXVzZSB0aGV5IHdlcmUgcmVjZWl2ZWQgZnJvbSB5b3VyIHNlcnZlcixcbiAqIHNhbml0aXplZCBieSB5b3VyIGxpYnJhcnksIGV0Yy4gIFlvdSBjYW4gb3JnYW5pemUgeW91ciBjb2RlYmFzZSB0byBoZWxwIHdpdGggdGhpcyAtIHBlcmhhcHNcbiAqIGFsbG93aW5nIG9ubHkgdGhlIGZpbGVzIGluIGEgc3BlY2lmaWMgZGlyZWN0b3J5IHRvIGRvIHRoaXMuICBFbnN1cmluZyB0aGF0IHRoZSBpbnRlcm5hbCBBUElcbiAqIGV4cG9zZWQgYnkgdGhhdCBjb2RlIGRvZXNuJ3QgbWFya3VwIGFyYml0cmFyeSB2YWx1ZXMgYXMgc2FmZSB0aGVuIGJlY29tZXMgYSBtb3JlIG1hbmFnZWFibGUgdGFzay5cbiAqXG4gKiBJbiB0aGUgY2FzZSBvZiBBbmd1bGFySlMnIFNDRSBzZXJ2aWNlLCBvbmUgdXNlcyB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc31cbiAqIChhbmQgc2hvcnRoYW5kIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzSHRtbCAkc2NlLnRydXN0QXNIdG1sfSwgZXRjLikgdG9cbiAqIG9idGFpbiB2YWx1ZXMgdGhhdCB3aWxsIGJlIGFjY2VwdGVkIGJ5IFNDRSAvIHByaXZpbGVnZWQgY29udGV4dHMuXG4gKlxuICpcbiAqICMjIEhvdyBkb2VzIGl0IHdvcms/XG4gKlxuICogSW4gcHJpdmlsZWdlZCBjb250ZXh0cywgZGlyZWN0aXZlcyBhbmQgY29kZSB3aWxsIGJpbmQgdG8gdGhlIHJlc3VsdCBvZiB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkXG4gKiAkc2NlLmdldFRydXN0ZWQoY29udGV4dCwgdmFsdWUpfSByYXRoZXIgdGhhbiB0byB0aGUgdmFsdWUgZGlyZWN0bHkuICBEaXJlY3RpdmVzIHVzZSB7QGxpbmtcbiAqIG5nLiRzY2UjcGFyc2VBcyAkc2NlLnBhcnNlQXN9IHJhdGhlciB0aGFuIGAkcGFyc2VgIHRvIHdhdGNoIGF0dHJpYnV0ZSBiaW5kaW5ncywgd2hpY2ggcGVyZm9ybXMgdGhlXG4gKiB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0gYmVoaW5kIHRoZSBzY2VuZXMgb24gbm9uLWNvbnN0YW50IGxpdGVyYWxzLlxuICpcbiAqIEFzIGFuIGV4YW1wbGUsIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSB1c2VzIHtAbGlua1xuICogbmcuJHNjZSNwYXJzZUFzSHRtbCAkc2NlLnBhcnNlQXNIdG1sKGJpbmRpbmcgZXhwcmVzc2lvbil9LiAgSGVyZSdzIHRoZSBhY3R1YWwgY29kZSAoc2xpZ2h0bHlcbiAqIHNpbXBsaWZpZWQpOlxuICpcbiAqIGBgYFxuICogdmFyIG5nQmluZEh0bWxEaXJlY3RpdmUgPSBbJyRzY2UnLCBmdW5jdGlvbigkc2NlKSB7XG4gKiAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICogICAgIHNjb3BlLiR3YXRjaCgkc2NlLnBhcnNlQXNIdG1sKGF0dHIubmdCaW5kSHRtbCksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgICBlbGVtZW50Lmh0bWwodmFsdWUgfHwgJycpO1xuICogICAgIH0pO1xuICogICB9O1xuICogfV07XG4gKiBgYGBcbiAqXG4gKiAjIyBJbXBhY3Qgb24gbG9hZGluZyB0ZW1wbGF0ZXNcbiAqXG4gKiBUaGlzIGFwcGxpZXMgYm90aCB0byB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luY2x1ZGUgYG5nLWluY2x1ZGVgfSBkaXJlY3RpdmUgYXMgd2VsbCBhc1xuICogYHRlbXBsYXRlVXJsYCdzIHNwZWNpZmllZCBieSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LlxuICpcbiAqIEJ5IGRlZmF1bHQsIEFuZ3VsYXIgb25seSBsb2FkcyB0ZW1wbGF0ZXMgZnJvbSB0aGUgc2FtZSBkb21haW4gYW5kIHByb3RvY29sIGFzIHRoZSBhcHBsaWNhdGlvblxuICogZG9jdW1lbnQuICBUaGlzIGlzIGRvbmUgYnkgY2FsbGluZyB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAqICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfSBvbiB0aGUgdGVtcGxhdGUgVVJMLiAgVG8gbG9hZCB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIGFuZC9vclxuICogcHJvdG9jb2xzLCB5b3UgbWF5IGVpdGhlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0XG4gKiB0aGVtfSBvciB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmwgd3JhcCBpdH0gaW50byBhIHRydXN0ZWQgdmFsdWUuXG4gKlxuICogKlBsZWFzZSBub3RlKjpcbiAqIFRoZSBicm93c2VyJ3NcbiAqIFtTYW1lIE9yaWdpbiBQb2xpY3ldKGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvYnJvd3NlcnNlYy93aWtpL1BhcnQyI1NhbWUtb3JpZ2luX3BvbGljeV9mb3JfWE1MSHR0cFJlcXVlc3QpXG4gKiBhbmQgW0Nyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nIChDT1JTKV0oaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy8pXG4gKiBwb2xpY3kgYXBwbHkgaW4gYWRkaXRpb24gdG8gdGhpcyBhbmQgbWF5IGZ1cnRoZXIgcmVzdHJpY3Qgd2hldGhlciB0aGUgdGVtcGxhdGUgaXMgc3VjY2Vzc2Z1bGx5XG4gKiBsb2FkZWQuICBUaGlzIG1lYW5zIHRoYXQgd2l0aG91dCB0aGUgcmlnaHQgQ09SUyBwb2xpY3ksIGxvYWRpbmcgdGVtcGxhdGVzIGZyb20gYSBkaWZmZXJlbnQgZG9tYWluXG4gKiB3b24ndCB3b3JrIG9uIGFsbCBicm93c2Vycy4gIEFsc28sIGxvYWRpbmcgdGVtcGxhdGVzIGZyb20gYGZpbGU6Ly9gIFVSTCBkb2VzIG5vdCB3b3JrIG9uIHNvbWVcbiAqIGJyb3dzZXJzLlxuICpcbiAqICMjIFRoaXMgZmVlbHMgbGlrZSB0b28gbXVjaCBvdmVyaGVhZFxuICpcbiAqIEl0J3MgaW1wb3J0YW50IHRvIHJlbWVtYmVyIHRoYXQgU0NFIG9ubHkgYXBwbGllcyB0byBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb25zLlxuICpcbiAqIElmIHlvdXIgZXhwcmVzc2lvbnMgYXJlIGNvbnN0YW50IGxpdGVyYWxzLCB0aGV5J3JlIGF1dG9tYXRpY2FsbHkgdHJ1c3RlZCBhbmQgeW91IGRvbid0IG5lZWQgdG9cbiAqIGNhbGwgYCRzY2UudHJ1c3RBc2Agb24gdGhlbSAocmVtZW1iZXIgdG8gaW5jbHVkZSB0aGUgYG5nU2FuaXRpemVgIG1vZHVsZSkgKGUuZy5cbiAqIGA8ZGl2IG5nLWJpbmQtaHRtbD1cIic8Yj5pbXBsaWNpdGx5IHRydXN0ZWQ8L2I+J1wiPjwvZGl2PmApIGp1c3Qgd29ya3MuXG4gKlxuICogQWRkaXRpb25hbGx5LCBgYVtocmVmXWAgYW5kIGBpbWdbc3JjXWAgYXV0b21hdGljYWxseSBzYW5pdGl6ZSB0aGVpciBVUkxzIGFuZCBkbyBub3QgcGFzcyB0aGVtXG4gKiB0aHJvdWdoIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkfS4gIFNDRSBkb2Vzbid0IHBsYXkgYSByb2xlIGhlcmUuXG4gKlxuICogVGhlIGluY2x1ZGVkIHtAbGluayBuZy4kc2NlRGVsZWdhdGUgJHNjZURlbGVnYXRlfSBjb21lcyB3aXRoIHNhbmUgZGVmYXVsdHMgdG8gYWxsb3cgeW91IHRvIGxvYWRcbiAqIHRlbXBsYXRlcyBpbiBgbmctaW5jbHVkZWAgZnJvbSB5b3VyIGFwcGxpY2F0aW9uJ3MgZG9tYWluIHdpdGhvdXQgaGF2aW5nIHRvIGV2ZW4ga25vdyBhYm91dCBTQ0UuXG4gKiBJdCBibG9ja3MgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIG9yIGxvYWRpbmcgdGVtcGxhdGVzIG92ZXIgaHR0cCBmcm9tIGFuIGh0dHBzXG4gKiBzZXJ2ZWQgZG9jdW1lbnQuICBZb3UgY2FuIGNoYW5nZSB0aGVzZSBieSBzZXR0aW5nIHlvdXIgb3duIGN1c3RvbSB7QGxpbmtcbiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdHN9IGFuZCB7QGxpbmtcbiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0IGJsYWNrbGlzdHN9IGZvciBtYXRjaGluZyBzdWNoIFVSTHMuXG4gKlxuICogVGhpcyBzaWduaWZpY2FudGx5IHJlZHVjZXMgdGhlIG92ZXJoZWFkLiAgSXQgaXMgZmFyIGVhc2llciB0byBwYXkgdGhlIHNtYWxsIG92ZXJoZWFkIGFuZCBoYXZlIGFuXG4gKiBhcHBsaWNhdGlvbiB0aGF0J3Mgc2VjdXJlIGFuZCBjYW4gYmUgYXVkaXRlZCB0byB2ZXJpZnkgdGhhdCB3aXRoIG11Y2ggbW9yZSBlYXNlIHRoYW4gYm9sdGluZ1xuICogc2VjdXJpdHkgb250byBhbiBhcHBsaWNhdGlvbiBsYXRlci5cbiAqXG4gKiA8YSBuYW1lPVwiY29udGV4dHNcIj48L2E+XG4gKiAjIyBXaGF0IHRydXN0ZWQgY29udGV4dCB0eXBlcyBhcmUgc3VwcG9ydGVkP1xuICpcbiAqIHwgQ29udGV4dCAgICAgICAgICAgICB8IE5vdGVzICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgYCRzY2UuSFRNTGAgICAgICAgICB8IEZvciBIVE1MIHRoYXQncyBzYWZlIHRvIHNvdXJjZSBpbnRvIHRoZSBhcHBsaWNhdGlvbi4gIFRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gZGlyZWN0aXZlIHVzZXMgdGhpcyBjb250ZXh0IGZvciBiaW5kaW5ncy4gSWYgYW4gdW5zYWZlIHZhbHVlIGlzIGVuY291bnRlcmVkIGFuZCB0aGUge0BsaW5rIG5nU2FuaXRpemUgJHNhbml0aXplfSBtb2R1bGUgaXMgcHJlc2VudCB0aGlzIHdpbGwgc2FuaXRpemUgdGhlIHZhbHVlIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXJyb3IuIHxcbiAqIHwgYCRzY2UuQ1NTYCAgICAgICAgICB8IEZvciBDU1MgdGhhdCdzIHNhZmUgdG8gc291cmNlIGludG8gdGhlIGFwcGxpY2F0aW9uLiAgQ3VycmVudGx5IHVudXNlZC4gIEZlZWwgZnJlZSB0byB1c2UgaXQgaW4geW91ciBvd24gZGlyZWN0aXZlcy4gfFxuICogfCBgJHNjZS5VUkxgICAgICAgICAgIHwgRm9yIFVSTHMgdGhhdCBhcmUgc2FmZSB0byBmb2xsb3cgYXMgbGlua3MuICBDdXJyZW50bHkgdW51c2VkIChgPGEgaHJlZj1gIGFuZCBgPGltZyBzcmM9YCBzYW5pdGl6ZSB0aGVpciB1cmxzIGFuZCBkb24ndCBjb25zdGl0dXRlIGFuIFNDRSBjb250ZXh0LiB8XG4gKiB8IGAkc2NlLlJFU09VUkNFX1VSTGAgfCBGb3IgVVJMcyB0aGF0IGFyZSBub3Qgb25seSBzYWZlIHRvIGZvbGxvdyBhcyBsaW5rcywgYnV0IHdob3NlIGNvbnRlbnRzIGFyZSBhbHNvIHNhZmUgdG8gaW5jbHVkZSBpbiB5b3VyIGFwcGxpY2F0aW9uLiAgRXhhbXBsZXMgaW5jbHVkZSBgbmctaW5jbHVkZWAsIGBzcmNgIC8gYG5nU3JjYCBiaW5kaW5ncyBmb3IgdGFncyBvdGhlciB0aGFuIGBJTUdgIChlLmcuIGBJRlJBTUVgLCBgT0JKRUNUYCwgZXRjLikgIDxicj48YnI+Tm90ZSB0aGF0IGAkc2NlLlJFU09VUkNFX1VSTGAgbWFrZXMgYSBzdHJvbmdlciBzdGF0ZW1lbnQgYWJvdXQgdGhlIFVSTCB0aGFuIGAkc2NlLlVSTGAgZG9lcyBhbmQgdGhlcmVmb3JlIGNvbnRleHRzIHJlcXVpcmluZyB2YWx1ZXMgdHJ1c3RlZCBmb3IgYCRzY2UuUkVTT1VSQ0VfVVJMYCBjYW4gYmUgdXNlZCBhbnl3aGVyZSB0aGF0IHZhbHVlcyB0cnVzdGVkIGZvciBgJHNjZS5VUkxgIGFyZSByZXF1aXJlZC4gfFxuICogfCBgJHNjZS5KU2AgICAgICAgICAgIHwgRm9yIEphdmFTY3JpcHQgdGhhdCBpcyBzYWZlIHRvIGV4ZWN1dGUgaW4geW91ciBhcHBsaWNhdGlvbidzIGNvbnRleHQuICBDdXJyZW50bHkgdW51c2VkLiAgRmVlbCBmcmVlIHRvIHVzZSBpdCBpbiB5b3VyIG93biBkaXJlY3RpdmVzLiB8XG4gKlxuICogIyMgRm9ybWF0IG9mIGl0ZW1zIGluIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCByZXNvdXJjZVVybFdoaXRlbGlzdH0ve0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0IEJsYWNrbGlzdH0gPGEgbmFtZT1cInJlc291cmNlVXJsUGF0dGVybkl0ZW1cIj48L2E+XG4gKlxuICogIEVhY2ggZWxlbWVudCBpbiB0aGVzZSBhcnJheXMgbXVzdCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAgLSAqKidzZWxmJyoqXG4gKiAgICAtIFRoZSBzcGVjaWFsICoqc3RyaW5nKiosIGAnc2VsZidgLCBjYW4gYmUgdXNlZCB0byBtYXRjaCBhZ2FpbnN0IGFsbCBVUkxzIG9mIHRoZSAqKnNhbWVcbiAqICAgICAgZG9tYWluKiogYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50IHVzaW5nIHRoZSAqKnNhbWUgcHJvdG9jb2wqKi5cbiAqICAtICoqU3RyaW5nKiogKGV4Y2VwdCB0aGUgc3BlY2lhbCB2YWx1ZSBgJ3NlbGYnYClcbiAqICAgIC0gVGhlIHN0cmluZyBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGZ1bGwgKm5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwqIG9mIHRoZSByZXNvdXJjZVxuICogICAgICBiZWluZyB0ZXN0ZWQgKHN1YnN0cmluZyBtYXRjaGVzIGFyZSBub3QgZ29vZCBlbm91Z2guKVxuICogICAgLSBUaGVyZSBhcmUgZXhhY3RseSAqKnR3byB3aWxkY2FyZCBzZXF1ZW5jZXMqKiAtIGAqYCBhbmQgYCoqYC4gIEFsbCBvdGhlciBjaGFyYWN0ZXJzXG4gKiAgICAgIG1hdGNoIHRoZW1zZWx2ZXMuXG4gKiAgICAtIGAqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgYW55IGNoYXJhY3RlciBvdGhlciB0aGFuIG9uZSBvZiB0aGUgZm9sbG93aW5nIDZcbiAqICAgICAgY2hhcmFjdGVyczogJ2A6YCcsICdgL2AnLCAnYC5gJywgJ2A/YCcsICdgJmAnIGFuZCAnYDtgJy4gIEl0J3MgYSB1c2VmdWwgd2lsZGNhcmQgZm9yIHVzZVxuICogICAgICBpbiBhIHdoaXRlbGlzdC5cbiAqICAgIC0gYCoqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgKmFueSogY2hhcmFjdGVyLiAgQXMgc3VjaCwgaXQncyBub3RcbiAqICAgICAgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBhIHNjaGVtZSwgZG9tYWluLCBldGMuIGFzIGl0IHdvdWxkIG1hdGNoIHRvbyBtdWNoLiAgKGUuZy5cbiAqICAgICAgaHR0cDovLyoqLmV4YW1wbGUuY29tLyB3b3VsZCBtYXRjaCBodHRwOi8vZXZpbC5jb20vP2lnbm9yZT0uZXhhbXBsZS5jb20vIGFuZCB0aGF0IG1pZ2h0XG4gKiAgICAgIG5vdCBoYXZlIGJlZW4gdGhlIGludGVudGlvbi4pICBJdHMgdXNhZ2UgYXQgdGhlIHZlcnkgZW5kIG9mIHRoZSBwYXRoIGlzIG9rLiAgKGUuZy5cbiAqICAgICAgaHR0cDovL2Zvby5leGFtcGxlLmNvbS90ZW1wbGF0ZXMvKiopLlxuICogIC0gKipSZWdFeHAqKiAoKnNlZSBjYXZlYXQgYmVsb3cqKVxuICogICAgLSAqQ2F2ZWF0KjogIFdoaWxlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIHBvd2VyZnVsIGFuZCBvZmZlciBncmVhdCBmbGV4aWJpbGl0eSwgIHRoZWlyIHN5bnRheFxuICogICAgICAoYW5kIGFsbCB0aGUgaW5ldml0YWJsZSBlc2NhcGluZykgbWFrZXMgdGhlbSAqaGFyZGVyIHRvIG1haW50YWluKi4gIEl0J3MgZWFzeSB0b1xuICogICAgICBhY2NpZGVudGFsbHkgaW50cm9kdWNlIGEgYnVnIHdoZW4gb25lIHVwZGF0ZXMgYSBjb21wbGV4IGV4cHJlc3Npb24gKGltaG8sIGFsbCByZWdleGVzIHNob3VsZFxuICogICAgICBoYXZlIGdvb2QgdGVzdCBjb3ZlcmFnZSkuICBGb3IgaW5zdGFuY2UsIHRoZSB1c2Ugb2YgYC5gIGluIHRoZSByZWdleCBpcyBjb3JyZWN0IG9ubHkgaW4gYVxuICogICAgICBzbWFsbCBudW1iZXIgb2YgY2FzZXMuICBBIGAuYCBjaGFyYWN0ZXIgaW4gdGhlIHJlZ2V4IHVzZWQgd2hlbiBtYXRjaGluZyB0aGUgc2NoZW1lIG9yIGFcbiAqICAgICAgc3ViZG9tYWluIGNvdWxkIGJlIG1hdGNoZWQgYWdhaW5zdCBhIGA6YCBvciBsaXRlcmFsIGAuYCB0aGF0IHdhcyBsaWtlbHkgbm90IGludGVuZGVkLiAgIEl0XG4gKiAgICAgIGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byB1c2UgdGhlIHN0cmluZyBwYXR0ZXJucyBhbmQgb25seSBmYWxsIGJhY2sgdG8gcmVndWxhciBleHByZXNzaW9uc1xuICogICAgICBhcyBhIGxhc3QgcmVzb3J0LlxuICogICAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVnRXhwIChpLmUuIG5vdCBhIHN0cmluZy4pICBJdCBpc1xuICogICAgICBtYXRjaGVkIGFnYWluc3QgdGhlICoqZW50aXJlKiogKm5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwqIG9mIHRoZSByZXNvdXJjZSBiZWluZyB0ZXN0ZWRcbiAqICAgICAgKGV2ZW4gd2hlbiB0aGUgUmVnRXhwIGRpZCBub3QgaGF2ZSB0aGUgYF5gIGFuZCBgJGAgY29kZXMuKSAgSW4gYWRkaXRpb24sIGFueSBmbGFnc1xuICogICAgICBwcmVzZW50IG9uIHRoZSBSZWdFeHAgKHN1Y2ggYXMgbXVsdGlsaW5lLCBnbG9iYWwsIGlnbm9yZUNhc2UpIGFyZSBpZ25vcmVkLlxuICogICAgLSBJZiB5b3UgYXJlIGdlbmVyYXRpbmcgeW91ciBKYXZhU2NyaXB0IGZyb20gc29tZSBvdGhlciB0ZW1wbGF0aW5nIGVuZ2luZSAobm90XG4gKiAgICAgIHJlY29tbWVuZGVkLCBlLmcuIGluIGlzc3VlIFsjNDAwNl0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNDAwNikpLFxuICogICAgICByZW1lbWJlciB0byBlc2NhcGUgeW91ciByZWd1bGFyIGV4cHJlc3Npb24gKGFuZCBiZSBhd2FyZSB0aGF0IHlvdSBtaWdodCBuZWVkIG1vcmUgdGhhblxuICogICAgICBvbmUgbGV2ZWwgb2YgZXNjYXBpbmcgZGVwZW5kaW5nIG9uIHlvdXIgdGVtcGxhdGluZyBlbmdpbmUgYW5kIHRoZSB3YXkgeW91IGludGVycG9sYXRlZFxuICogICAgICB0aGUgdmFsdWUuKSAgRG8gbWFrZSB1c2Ugb2YgeW91ciBwbGF0Zm9ybSdzIGVzY2FwaW5nIG1lY2hhbmlzbSBhcyBpdCBtaWdodCBiZSBnb29kXG4gKiAgICAgIGVub3VnaCBiZWZvcmUgY29kaW5nIHlvdXIgb3duLiAgRS5nLiBSdWJ5IGhhc1xuICogICAgICBbUmVnZXhwLmVzY2FwZShzdHIpXShodHRwOi8vd3d3LnJ1YnktZG9jLm9yZy9jb3JlLTIuMC4wL1JlZ2V4cC5odG1sI21ldGhvZC1jLWVzY2FwZSlcbiAqICAgICAgYW5kIFB5dGhvbiBoYXMgW3JlLmVzY2FwZV0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3JlLmh0bWwjcmUuZXNjYXBlKS5cbiAqICAgICAgSmF2YXNjcmlwdCBsYWNrcyBhIHNpbWlsYXIgYnVpbHQgaW4gZnVuY3Rpb24gZm9yIGVzY2FwaW5nLiAgVGFrZSBhIGxvb2sgYXQgR29vZ2xlXG4gKiAgICAgIENsb3N1cmUgbGlicmFyeSdzIFtnb29nLnN0cmluZy5yZWdFeHBFc2NhcGUocyldKFxuICogICAgICBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19zdHJpbmdfc3RyaW5nLmpzLnNvdXJjZS5odG1sI2xpbmU5NjIpLlxuICpcbiAqIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gZm9yIGFuIGV4YW1wbGUuXG4gKlxuICogIyMgU2hvdyBtZSBhbiBleGFtcGxlIHVzaW5nIFNDRS5cbiAqXG4gKiA8ZXhhbXBsZSBtb2R1bGU9XCJteVNjZUFwcFwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJBcHBDb250cm9sbGVyIGFzIG15Q3RybFwiPlxuICogICAgIDxpIG5nLWJpbmQtaHRtbD1cIm15Q3RybC5leHBsaWNpdGx5VHJ1c3RlZEh0bWxcIiBpZD1cImV4cGxpY2l0bHlUcnVzdGVkSHRtbFwiPjwvaT48YnI+PGJyPlxuICogICAgIDxiPlVzZXIgY29tbWVudHM8L2I+PGJyPlxuICogICAgIEJ5IGRlZmF1bHQsIEhUTUwgdGhhdCBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQgKGUuZy4gQWxpY2UncyBjb21tZW50KSBpcyBzYW5pdGl6ZWQgd2hlblxuICogICAgICRzYW5pdGl6ZSBpcyBhdmFpbGFibGUuICBJZiAkc2FuaXRpemUgaXNuJ3QgYXZhaWxhYmxlLCB0aGlzIHJlc3VsdHMgaW4gYW4gZXJyb3IgaW5zdGVhZCBvZiBhblxuICogICAgIGV4cGxvaXQuXG4gKiAgICAgPGRpdiBjbGFzcz1cIndlbGxcIj5cbiAqICAgICAgIDxkaXYgbmctcmVwZWF0PVwidXNlckNvbW1lbnQgaW4gbXlDdHJsLnVzZXJDb21tZW50c1wiPlxuICogICAgICAgICA8Yj57e3VzZXJDb21tZW50Lm5hbWV9fTwvYj46XG4gKiAgICAgICAgIDxzcGFuIG5nLWJpbmQtaHRtbD1cInVzZXJDb21tZW50Lmh0bWxDb21tZW50XCIgY2xhc3M9XCJodG1sQ29tbWVudFwiPjwvc3Bhbj5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgPC9kaXY+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAqICAgYW5ndWxhci5tb2R1bGUoJ215U2NlQXBwJywgWyduZ1Nhbml0aXplJ10pXG4gKiAgICAgLmNvbnRyb2xsZXIoJ0FwcENvbnRyb2xsZXInLCBbJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRzY2UnLFxuICogICAgICAgZnVuY3Rpb24oJGh0dHAsICR0ZW1wbGF0ZUNhY2hlLCAkc2NlKSB7XG4gKiAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAqICAgICAgICAgJGh0dHAuZ2V0KFwidGVzdF9kYXRhLmpzb25cIiwge2NhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLnN1Y2Nlc3MoZnVuY3Rpb24odXNlckNvbW1lbnRzKSB7XG4gKiAgICAgICAgICAgc2VsZi51c2VyQ29tbWVudHMgPSB1c2VyQ29tbWVudHM7XG4gKiAgICAgICAgIH0pO1xuICogICAgICAgICBzZWxmLmV4cGxpY2l0bHlUcnVzdGVkSHRtbCA9ICRzY2UudHJ1c3RBc0h0bWwoXG4gKiAgICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xuICogICAgICAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDtcIj5Ib3ZlciBvdmVyIHRoaXMgdGV4dC48L3NwYW4+Jyk7XG4gKiAgICAgICB9XSk7XG4gKiA8L2ZpbGU+XG4gKlxuICogPGZpbGUgbmFtZT1cInRlc3RfZGF0YS5qc29uXCI+XG4gKiBbXG4gKiAgIHsgXCJuYW1lXCI6IFwiQWxpY2VcIixcbiAqICAgICBcImh0bWxDb21tZW50XCI6XG4gKiAgICAgICAgIFwiPHNwYW4gb25tb3VzZW92ZXI9J3RoaXMudGV4dENvbnRlbnQ9XFxcIlBXTjNEIVxcXCInPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj5cIlxuICogICB9LFxuICogICB7IFwibmFtZVwiOiBcIkJvYlwiLFxuICogICAgIFwiaHRtbENvbW1lbnRcIjogXCI8aT5ZZXMhPC9pPiAgQW0gSSB0aGUgb25seSBvdGhlciBvbmU/XCJcbiAqICAgfVxuICogXVxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgZGVzY3JpYmUoJ1NDRSBkb2MgZGVtbycsIGZ1bmN0aW9uKCkge1xuICogICAgIGl0KCdzaG91bGQgc2FuaXRpemUgdW50cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnLmh0bWxDb21tZW50JykpLmZpcnN0KCkuZ2V0SW5uZXJIdG1sKCkpXG4gKiAgICAgICAgICAgLnRvQmUoJzxzcGFuPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj4nKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBOT1Qgc2FuaXRpemUgZXhwbGljaXRseSB0cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2V4cGxpY2l0bHlUcnVzdGVkSHRtbCcpKS5nZXRJbm5lckh0bWwoKSkudG9CZShcbiAqICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xuICogICAgICAgICAgICdzYW5pdGl6YXRpb24uJnF1b3Q7XCI+SG92ZXIgb3ZlciB0aGlzIHRleHQuPC9zcGFuPicpO1xuICogICAgIH0pO1xuICogICB9KTtcbiAqIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICpcbiAqICMjIENhbiBJIGRpc2FibGUgU0NFIGNvbXBsZXRlbHk/XG4gKlxuICogWWVzLCB5b3UgY2FuLiAgSG93ZXZlciwgdGhpcyBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZC4gIFNDRSBnaXZlcyB5b3UgYSBsb3Qgb2Ygc2VjdXJpdHkgYmVuZWZpdHNcbiAqIGZvciBsaXR0bGUgY29kaW5nIG92ZXJoZWFkLiAgSXQgd2lsbCBiZSBtdWNoIGhhcmRlciB0byB0YWtlIGFuIFNDRSBkaXNhYmxlZCBhcHBsaWNhdGlvbiBhbmRcbiAqIGVpdGhlciBzZWN1cmUgaXQgb24geW91ciBvd24gb3IgZW5hYmxlIFNDRSBhdCBhIGxhdGVyIHN0YWdlLiAgSXQgbWlnaHQgbWFrZSBzZW5zZSB0byBkaXNhYmxlIFNDRVxuICogZm9yIGNhc2VzIHdoZXJlIHlvdSBoYXZlIGEgbG90IG9mIGV4aXN0aW5nIGNvZGUgdGhhdCB3YXMgd3JpdHRlbiBiZWZvcmUgU0NFIHdhcyBpbnRyb2R1Y2VkIGFuZFxuICogeW91J3JlIG1pZ3JhdGluZyB0aGVtIGEgbW9kdWxlIGF0IGEgdGltZS5cbiAqXG4gKiBUaGF0IHNhaWQsIGhlcmUncyBob3cgeW91IGNhbiBjb21wbGV0ZWx5IGRpc2FibGUgU0NFOlxuICpcbiAqIGBgYFxuICogYW5ndWxhci5tb2R1bGUoJ215QXBwV2l0aFNjZURpc2FibGVkbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VQcm92aWRlcikge1xuICogICAvLyBDb21wbGV0ZWx5IGRpc2FibGUgU0NFLiAgRm9yIGRlbW9uc3RyYXRpb24gcHVycG9zZXMgb25seSFcbiAqICAgLy8gRG8gbm90IHVzZSBpbiBuZXcgcHJvamVjdHMuXG4gKiAgICRzY2VQcm92aWRlci5lbmFibGVkKGZhbHNlKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICovXG4vKiBqc2hpbnQgbWF4bGVuOiAxMDAgKi9cblxuZnVuY3Rpb24gJFNjZVByb3ZpZGVyKCkge1xuICB2YXIgZW5hYmxlZCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHNjZVByb3ZpZGVyI2VuYWJsZWRcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgSWYgcHJvdmlkZWQsIHRoZW4gZW5hYmxlcy9kaXNhYmxlcyBTQ0UuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEVuYWJsZXMvZGlzYWJsZXMgU0NFIGFuZCByZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgKi9cbiAgdGhpcy5lbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgZW5hYmxlZCA9ICEhdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBlbmFibGVkO1xuICB9O1xuXG5cbiAgLyogRGVzaWduIG5vdGVzIG9uIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciBTQ0UuXG4gICAqXG4gICAqIFRoZSBBUEkgY29udHJhY3QgZm9yIHRoZSBTQ0UgZGVsZWdhdGVcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBUaGUgU0NFIGRlbGVnYXRlIG9iamVjdCBtdXN0IHByb3ZpZGUgdGhlIGZvbGxvd2luZyAzIG1ldGhvZHM6XG4gICAqXG4gICAqIC0gdHJ1c3RBcyhjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHRlbGwgdGhlIFNDRSBzZXJ2aWNlIHRoYXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIE9LIHRvIHVzZSBpbiB0aGVcbiAgICogICAgIGNvbnRleHRzIHNwZWNpZmllZCBieSBjb250ZXh0RW51bS4gIEl0IG11c3QgcmV0dXJuIGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgYWNjZXB0ZWQgYnlcbiAgICogICAgIGdldFRydXN0ZWQoKSBmb3IgYSBjb21wYXRpYmxlIGNvbnRleHRFbnVtIGFuZCByZXR1cm4gdGhpcyB2YWx1ZS5cbiAgICpcbiAgICogLSB2YWx1ZU9mKHZhbHVlKVxuICAgKiAgICAgRm9yIHZhbHVlcyB0aGF0IHdlcmUgbm90IHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZW0gYXMgaXMuICBGb3IgdmFsdWVzIHRoYXQgd2VyZVxuICAgKiAgICAgcHJvZHVjZWQgYnkgdHJ1c3RBcygpLCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgaW5wdXQgdmFsdWUgdG8gdHJ1c3RBcy4gIEJhc2ljYWxseSwgaWZcbiAgICogICAgIHRydXN0QXMgaXMgd3JhcHBpbmcgdGhlIGdpdmVuIHZhbHVlcyBpbnRvIHNvbWUgdHlwZSwgdGhpcyBvcGVyYXRpb24gdW53cmFwcyBpdCB3aGVuIGdpdmVuXG4gICAqICAgICBzdWNoIGEgdmFsdWUuXG4gICAqXG4gICAqIC0gZ2V0VHJ1c3RlZChjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gdGhlIGEgdmFsdWUgdGhhdCBpcyBzYWZlIHRvIHVzZSBpbiB0aGUgY29udGV4dCBzcGVjaWZpZWQgYnlcbiAgICogICAgIGNvbnRleHRFbnVtIG9yIHRocm93IGFuZCBleGNlcHRpb24gb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIGNvbnRyYWN0IGRlbGliZXJhdGVseSBkb2VzIE5PVCBzdGF0ZSB0aGF0IHZhbHVlcyByZXR1cm5lZCBieSB0cnVzdEFzKCkgbXVzdCBiZVxuICAgKiBvcGFxdWUgb3Igd3JhcHBlZCBpbiBzb21lIGhvbGRlciBvYmplY3QuICBUaGF0IGhhcHBlbnMgdG8gYmUgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLiAgRm9yXG4gICAqIGluc3RhbmNlLCBhbiBpbXBsZW1lbnRhdGlvbiBjb3VsZCBtYWludGFpbiBhIHJlZ2lzdHJ5IG9mIGFsbCB0cnVzdGVkIG9iamVjdHMgYnkgY29udGV4dC4gIEluXG4gICAqIHN1Y2ggYSBjYXNlLCB0cnVzdEFzKCkgd291bGQgcmV0dXJuIHRoZSBzYW1lIG9iamVjdCB0aGF0IHdhcyBwYXNzZWQgaW4uICBnZXRUcnVzdGVkKCkgd291bGRcbiAgICogcmV0dXJuIHRoZSBzYW1lIG9iamVjdCBwYXNzZWQgaW4gaWYgaXQgd2FzIGZvdW5kIGluIHRoZSByZWdpc3RyeSB1bmRlciBhIGNvbXBhdGlibGUgY29udGV4dCBvclxuICAgKiB0aHJvdyBhbiBleGNlcHRpb24gb3RoZXJ3aXNlLiAgQW4gaW1wbGVtZW50YXRpb24gbWlnaHQgb25seSB3cmFwIHZhbHVlcyBzb21lIG9mIHRoZSB0aW1lIGJhc2VkXG4gICAqIG9uIHNvbWUgY3JpdGVyaWEuICBnZXRUcnVzdGVkKCkgbWlnaHQgcmV0dXJuIGEgdmFsdWUgYW5kIG5vdCB0aHJvdyBhbiBleGNlcHRpb24gZm9yIHNwZWNpYWxcbiAgICogY29uc3RhbnRzIG9yIG9iamVjdHMgZXZlbiBpZiBub3Qgd3JhcHBlZC4gIEFsbCBzdWNoIGltcGxlbWVudGF0aW9ucyBmdWxmaWxsIHRoaXMgY29udHJhY3QuXG4gICAqXG4gICAqXG4gICAqIEEgbm90ZSBvbiB0aGUgaW5oZXJpdGFuY2UgbW9kZWwgZm9yIFNDRSBjb250ZXh0c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogSSd2ZSB1c2VkIGluaGVyaXRhbmNlIGFuZCBtYWRlIFJFU09VUkNFX1VSTCB3cmFwcGVkIHR5cGVzIGEgc3VidHlwZSBvZiBVUkwgd3JhcHBlZCB0eXBlcy4gIFRoaXNcbiAgICogaXMgcHVyZWx5IGFuIGltcGxlbWVudGF0aW9uIGRldGFpbHMuXG4gICAqXG4gICAqIFRoZSBjb250cmFjdCBpcyBzaW1wbHkgdGhpczpcbiAgICpcbiAgICogICAgIGdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKSBzdWNjZWVkaW5nIGltcGxpZXMgdGhhdCBnZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlcbiAgICogICAgIHdpbGwgYWxzbyBzdWNjZWVkLlxuICAgKlxuICAgKiBJbmhlcml0YW5jZSBoYXBwZW5zIHRvIGNhcHR1cmUgdGhpcyBpbiBhIG5hdHVyYWwgd2F5LiAgSW4gc29tZSBmdXR1cmUsIHdlXG4gICAqIG1heSBub3QgdXNlIGluaGVyaXRhbmNlIGFueW1vcmUuICBUaGF0IGlzIE9LIGJlY2F1c2Ugbm8gY29kZSBvdXRzaWRlIG9mXG4gICAqIHNjZS5qcyBhbmQgc2NlU3BlY3MuanMgd291bGQgbmVlZCB0byBiZSBhd2FyZSBvZiB0aGlzIGRldGFpbC5cbiAgICovXG5cbiAgdGhpcy4kZ2V0ID0gWyckcGFyc2UnLCAnJHNjZURlbGVnYXRlJywgZnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgJHBhcnNlLCAgICRzY2VEZWxlZ2F0ZSkge1xuICAgIC8vIFByZXJlcTogRW5zdXJlIHRoYXQgd2UncmUgbm90IHJ1bm5pbmcgaW4gSUU8MTEgcXVpcmtzIG1vZGUuICBJbiB0aGF0IG1vZGUsIElFIDwgMTEgYWxsb3dcbiAgICAvLyB0aGUgXCJleHByZXNzaW9uKGphdmFzY3JpcHQgZXhwcmVzc2lvbilcIiBzeW50YXggd2hpY2ggaXMgaW5zZWN1cmUuXG4gICAgaWYgKGVuYWJsZWQgJiYgbXNpZSA8IDgpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2llcXVpcmtzJyxcbiAgICAgICAgJ1N0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRvZXMgbm90IHN1cHBvcnQgSW50ZXJuZXQgRXhwbG9yZXIgdmVyc2lvbiA8IDExIGluIHF1aXJrcyAnICtcbiAgICAgICAgJ21vZGUuICBZb3UgY2FuIGZpeCB0aGlzIGJ5IGFkZGluZyB0aGUgdGV4dCA8IWRvY3R5cGUgaHRtbD4gdG8gdGhlIHRvcCBvZiB5b3VyIEhUTUwgJyArXG4gICAgICAgICdkb2N1bWVudC4gIFNlZSBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kc2NlIGZvciBtb3JlIGluZm9ybWF0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBzY2UgPSBzaGFsbG93Q29weShTQ0VfQ09OVEVYVFMpO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjaXNFbmFibGVkXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS4gIElmIHlvdSB3YW50IHRvIHNldCB0aGUgdmFsdWUsIHlvdVxuICAgICAqIGhhdmUgdG8gZG8gaXQgYXQgbW9kdWxlIGNvbmZpZyB0aW1lIG9uIHtAbGluayBuZy4kc2NlUHJvdmlkZXIgJHNjZVByb3ZpZGVyfS5cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgU0NFIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgc2NlLmlzRW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZWQ7XG4gICAgfTtcbiAgICBzY2UudHJ1c3RBcyA9ICRzY2VEZWxlZ2F0ZS50cnVzdEFzO1xuICAgIHNjZS5nZXRUcnVzdGVkID0gJHNjZURlbGVnYXRlLmdldFRydXN0ZWQ7XG4gICAgc2NlLnZhbHVlT2YgPSAkc2NlRGVsZWdhdGUudmFsdWVPZjtcblxuICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgc2NlLnRydXN0QXMgPSBzY2UuZ2V0VHJ1c3RlZCA9IGZ1bmN0aW9uKHR5cGUsIHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbiAgICAgIHNjZS52YWx1ZU9mID0gaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uICBUaGlzIGlzIGxpa2Uge0BsaW5rXG4gICAgICogbmcuJHBhcnNlICRwYXJzZX0gYW5kIGlzIGlkZW50aWNhbCB3aGVuIHRoZSBleHByZXNzaW9uIGlzIGEgbGl0ZXJhbCBjb25zdGFudC4gIE90aGVyd2lzZSwgaXRcbiAgICAgKiB3cmFwcyB0aGUgZXhwcmVzc2lvbiBpbiBhIGNhbGwgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWQoKnR5cGUqLFxuICAgICAqICpyZXN1bHQqKX1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIFNDRSBjb250ZXh0IGluIHdoaWNoIHRoaXMgcmVzdWx0IHdpbGwgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuICAgIHNjZS5wYXJzZUFzID0gZnVuY3Rpb24gc2NlUGFyc2VBcyh0eXBlLCBleHByKSB7XG4gICAgICB2YXIgcGFyc2VkID0gJHBhcnNlKGV4cHIpO1xuICAgICAgaWYgKHBhcnNlZC5saXRlcmFsICYmIHBhcnNlZC5jb25zdGFudCkge1xuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICRwYXJzZShleHByLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzY2UuZ2V0VHJ1c3RlZCh0eXBlLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LiAgQXMgc3VjaCxcbiAgICAgKiByZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRydXN0ZWQgYnkgYW5ndWxhciBmb3IgdXNlIGluIHNwZWNpZmllZCBzdHJpY3QgY29udGV4dHVhbFxuICAgICAqIGVzY2FwaW5nIGNvbnRleHRzIChzdWNoIGFzIG5nLWJpbmQtaHRtbCwgbmctaW5jbHVkZSwgYW55IHNyYyBhdHRyaWJ1dGVcbiAgICAgKiBpbnRlcnBvbGF0aW9uLCBhbnkgZG9tIGV2ZW50IGJpbmRpbmcgYXR0cmlidXRlIGludGVycG9sYXRpb24gc3VjaCBhcyBmb3Igb25jbGljaywgIGV0Yy4pXG4gICAgICogdGhhdCB1c2VzIHRoZSBwcm92aWRlZCB2YWx1ZS4gIFNlZSAqIHtAbGluayBuZy4kc2NlICRzY2V9IGZvciBlbmFibGluZyBzdHJpY3QgY29udGV4dHVhbFxuICAgICAqIGVzY2FwaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHNhZmUgZm9yIHVzZS4gIGUuZy4gdXJsLFxuICAgICAqICAgcmVzb3VyY2VVcmwsIGh0bWwsIGpzIGFuZCBjc3MuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCB0aGF0IHNob3VsZCBiZSBjb25zaWRlcmVkIHRydXN0ZWQvc2FmZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQSB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIHRvIHN0YW5kIGluIGZvciB0aGUgcHJvdmlkZWQgYHZhbHVlYCBpbiBwbGFjZXNcbiAgICAgKiB3aGVyZSBBbmd1bGFyIGV4cGVjdHMgYSAkc2NlLnRydXN0QXMoKSByZXR1cm4gdmFsdWUuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzSHRtbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNIdG1sKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5IVE1MLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkSHRtbFxuICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRIdG1sKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcbiAgICAgKiAgICAgb25seSBhY2NlcHQgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZWl0aGVyIGxpdGVyYWwgY29uc3RhbnRzIG9yIGFyZSB0aGVcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc1VybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkVXJsXG4gICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZFVybCh2YWx1ZSl9IHRvIG9idGFpbiB0aGUgb3JpZ2luYWwgdmFsdWUuICAocHJpdmlsZWdlZCBkaXJlY3RpdmVzXG4gICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlXG4gICAgICogICAgIHJldHVybiB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0cnVzdEFzLlxuICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh2YWx1ZSl9IHRvIG9idGFpbiB0aGUgb3JpZ2luYWwgdmFsdWUuICAocHJpdmlsZWdlZCBkaXJlY3RpdmVzXG4gICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlIHJldHVyblxuICAgICAqICAgICB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc0pzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0pzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5KUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuXG4gICAgICogQHJldHVybnMgeyp9IEFuIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZEpzXG4gICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZEpzKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcbiAgICAgKiAgICAgb25seSBhY2NlcHQgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZWl0aGVyIGxpdGVyYWwgY29uc3RhbnRzIG9yIGFyZSB0aGVcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZGB9LiAgQXMgc3VjaCxcbiAgICAgKiB0YWtlcyB0aGUgcmVzdWx0IG9mIGEge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyBgJHNjZS50cnVzdEFzYH0oKSBjYWxsIGFuZCByZXR1cm5zIHRoZVxuICAgICAqIG9yaWdpbmFsbHkgc3VwcGxpZWQgdmFsdWUgaWYgdGhlIHF1ZXJpZWQgY29udGV4dCB0eXBlIGlzIGEgc3VwZXJ0eXBlIG9mIHRoZSBjcmVhdGVkIHR5cGUuXG4gICAgICogSWYgdGhpcyBjb25kaXRpb24gaXNuJ3Qgc2F0aXNmaWVkLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHRvIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlI3RydXN0QXMgYCRzY2UudHJ1c3RBc2B9XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgY2FsbC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoZSB3YXMgb3JpZ2luYWxseSBwcm92aWRlZCB0b1xuICAgICAqICAgICAgICAgICAgICB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzIGAkc2NlLnRydXN0QXNgfSBpZiB2YWxpZCBpbiB0aGlzIGNvbnRleHQuXG4gICAgICogICAgICAgICAgICAgIE90aGVyd2lzZSwgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZEh0bWwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkhUTUwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5IVE1MLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkQ3NzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZENzcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZFVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0h0bWwoZXhwcmVzc2lvbiBzdHJpbmcpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gICAgICogICAgICBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzQ3NzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0Nzcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5DU1MsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc1VybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAgICAgKiAgICAgIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNSZXNvdXJjZVVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc0pzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0pzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAgICAgKiAgICAgIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8vIFNob3J0aGFuZCBkZWxlZ2F0aW9ucy5cbiAgICB2YXIgcGFyc2UgPSBzY2UucGFyc2VBcyxcbiAgICAgICAgZ2V0VHJ1c3RlZCA9IHNjZS5nZXRUcnVzdGVkLFxuICAgICAgICB0cnVzdEFzID0gc2NlLnRydXN0QXM7XG5cbiAgICBmb3JFYWNoKFNDRV9DT05URVhUUywgZnVuY3Rpb24oZW51bVZhbHVlLCBuYW1lKSB7XG4gICAgICB2YXIgbE5hbWUgPSBsb3dlcmNhc2UobmFtZSk7XG4gICAgICBzY2VbY2FtZWxDYXNlKFwicGFyc2VfYXNfXCIgKyBsTmFtZSldID0gZnVuY3Rpb24oZXhwcikge1xuICAgICAgICByZXR1cm4gcGFyc2UoZW51bVZhbHVlLCBleHByKTtcbiAgICAgIH07XG4gICAgICBzY2VbY2FtZWxDYXNlKFwiZ2V0X3RydXN0ZWRfXCIgKyBsTmFtZSldID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGdldFRydXN0ZWQoZW51bVZhbHVlLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgc2NlW2NhbWVsQ2FzZShcInRydXN0X2FzX1wiICsgbE5hbWUpXSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0cnVzdEFzKGVudW1WYWx1ZSwgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzY2U7XG4gIH1dO1xufVxuXG4vKipcbiAqICEhISBUaGlzIGlzIGFuIHVuZG9jdW1lbnRlZCBcInByaXZhdGVcIiBzZXJ2aWNlICEhIVxuICpcbiAqIEBuYW1lICRzbmlmZmVyXG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xuICogQHJlcXVpcmVzICRkb2N1bWVudFxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaGlzdG9yeSBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgaHRtbDUgaGlzdG9yeSBhcGkgP1xuICogQHByb3BlcnR5IHtib29sZWFufSB0cmFuc2l0aW9ucyBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgQ1NTIHRyYW5zaXRpb24gZXZlbnRzID9cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYW5pbWF0aW9ucyBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgQ1NTIGFuaW1hdGlvbiBldmVudHMgP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBpcyB2ZXJ5IHNpbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiB0ZXN0aW5nIGJyb3dzZXIncyBmZWF0dXJlcy5cbiAqL1xuZnVuY3Rpb24gJFNuaWZmZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCkge1xuICAgIHZhciBldmVudFN1cHBvcnQgPSB7fSxcbiAgICAgICAgYW5kcm9pZCA9XG4gICAgICAgICAgdG9JbnQoKC9hbmRyb2lkIChcXGQrKS8uZXhlYyhsb3dlcmNhc2UoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpKSB8fCBbXSlbMV0pLFxuICAgICAgICBib3hlZSA9IC9Cb3hlZS9pLnRlc3QoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpLFxuICAgICAgICBkb2N1bWVudCA9ICRkb2N1bWVudFswXSB8fCB7fSxcbiAgICAgICAgdmVuZG9yUHJlZml4LFxuICAgICAgICB2ZW5kb3JSZWdleCA9IC9eKE1venx3ZWJraXR8bXMpKD89W0EtWl0pLyxcbiAgICAgICAgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5LnN0eWxlLFxuICAgICAgICB0cmFuc2l0aW9ucyA9IGZhbHNlLFxuICAgICAgICBhbmltYXRpb25zID0gZmFsc2UsXG4gICAgICAgIG1hdGNoO1xuXG4gICAgaWYgKGJvZHlTdHlsZSkge1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBib2R5U3R5bGUpIHtcbiAgICAgICAgaWYgKG1hdGNoID0gdmVuZG9yUmVnZXguZXhlYyhwcm9wKSkge1xuICAgICAgICAgIHZlbmRvclByZWZpeCA9IG1hdGNoWzBdO1xuICAgICAgICAgIHZlbmRvclByZWZpeCA9IHZlbmRvclByZWZpeC5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKSArIHZlbmRvclByZWZpeC5zdWJzdHIoMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF2ZW5kb3JQcmVmaXgpIHtcbiAgICAgICAgdmVuZG9yUHJlZml4ID0gKCdXZWJraXRPcGFjaXR5JyBpbiBib2R5U3R5bGUpICYmICd3ZWJraXQnO1xuICAgICAgfVxuXG4gICAgICB0cmFuc2l0aW9ucyA9ICEhKCgndHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKSB8fCAodmVuZG9yUHJlZml4ICsgJ1RyYW5zaXRpb24nIGluIGJvZHlTdHlsZSkpO1xuICAgICAgYW5pbWF0aW9ucyAgPSAhISgoJ2FuaW1hdGlvbicgaW4gYm9keVN0eWxlKSB8fCAodmVuZG9yUHJlZml4ICsgJ0FuaW1hdGlvbicgaW4gYm9keVN0eWxlKSk7XG5cbiAgICAgIGlmIChhbmRyb2lkICYmICghdHJhbnNpdGlvbnMgfHwgICFhbmltYXRpb25zKSkge1xuICAgICAgICB0cmFuc2l0aW9ucyA9IGlzU3RyaW5nKGJvZHlTdHlsZS53ZWJraXRUcmFuc2l0aW9uKTtcbiAgICAgICAgYW5pbWF0aW9ucyA9IGlzU3RyaW5nKGJvZHlTdHlsZS53ZWJraXRBbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIEFuZHJvaWQgaGFzIGhpc3RvcnkucHVzaFN0YXRlLCBidXQgaXQgZG9lcyBub3QgdXBkYXRlIGxvY2F0aW9uIGNvcnJlY3RseVxuICAgICAgLy8gc28gbGV0J3Mgbm90IHVzZSB0aGUgaGlzdG9yeSBBUEkgYXQgYWxsLlxuICAgICAgLy8gaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2FuZHJvaWQvaXNzdWVzL2RldGFpbD9pZD0xNzQ3MVxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTA0XG5cbiAgICAgIC8vIG9sZGVyIHdlYmtpdCBicm93c2VyICg1MzMuOSkgb24gQm94ZWUgYm94IGhhcyBleGFjdGx5IHRoZSBzYW1lIHByb2JsZW0gYXMgQW5kcm9pZCBoYXNcbiAgICAgIC8vIHNvIGxldCdzIG5vdCB1c2UgdGhlIGhpc3RvcnkgQVBJIGFsc29cbiAgICAgIC8vIFdlIGFyZSBwdXJwb3NlZnVsbHkgdXNpbmcgYCEoYW5kcm9pZCA8IDQpYCB0byBjb3ZlciB0aGUgY2FzZSB3aGVuIGBhbmRyb2lkYCBpcyB1bmRlZmluZWRcbiAgICAgIC8vIGpzaGludCAtVzAxOFxuICAgICAgaGlzdG9yeTogISEoJHdpbmRvdy5oaXN0b3J5ICYmICR3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgJiYgIShhbmRyb2lkIDwgNCkgJiYgIWJveGVlKSxcbiAgICAgIC8vIGpzaGludCArVzAxOFxuICAgICAgaGFzRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIC8vIElFOSBpbXBsZW1lbnRzICdpbnB1dCcgZXZlbnQgaXQncyBzbyBmdWJhcmVkIHRoYXQgd2UgcmF0aGVyIHByZXRlbmQgdGhhdCBpdCBkb2Vzbid0IGhhdmVcbiAgICAgICAgLy8gaXQuIEluIHBhcnRpY3VsYXIgdGhlIGV2ZW50IGlzIG5vdCBmaXJlZCB3aGVuIGJhY2tzcGFjZSBvciBkZWxldGUga2V5IGFyZSBwcmVzc2VkIG9yXG4gICAgICAgIC8vIHdoZW4gY3V0IG9wZXJhdGlvbiBpcyBwZXJmb3JtZWQuXG4gICAgICAgIC8vIElFMTArIGltcGxlbWVudHMgJ2lucHV0JyBldmVudCBidXQgaXQgZXJyb25lb3VzbHkgZmlyZXMgdW5kZXIgdmFyaW91cyBzaXR1YXRpb25zLFxuICAgICAgICAvLyBlLmcuIHdoZW4gcGxhY2Vob2xkZXIgY2hhbmdlcywgb3IgYSBmb3JtIGlzIGZvY3VzZWQuXG4gICAgICAgIGlmIChldmVudCA9PT0gJ2lucHV0JyAmJiBtc2llIDw9IDExKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50U3VwcG9ydFtldmVudF0pKSB7XG4gICAgICAgICAgdmFyIGRpdkVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGV2ZW50U3VwcG9ydFtldmVudF0gPSAnb24nICsgZXZlbnQgaW4gZGl2RWxtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50U3VwcG9ydFtldmVudF07XG4gICAgICB9LFxuICAgICAgY3NwOiBjc3AoKSxcbiAgICAgIHZlbmRvclByZWZpeDogdmVuZG9yUHJlZml4LFxuICAgICAgdHJhbnNpdGlvbnM6IHRyYW5zaXRpb25zLFxuICAgICAgYW5pbWF0aW9uczogYW5pbWF0aW9ucyxcbiAgICAgIGFuZHJvaWQ6IGFuZHJvaWRcbiAgICB9O1xuICB9XTtcbn1cblxudmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkdGVtcGxhdGVSZXF1ZXN0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYCR0ZW1wbGF0ZVJlcXVlc3RgIHNlcnZpY2UgcnVucyBzZWN1cml0eSBjaGVja3MgdGhlbiBkb3dubG9hZHMgdGhlIHByb3ZpZGVkIHRlbXBsYXRlIHVzaW5nXG4gKiBgJGh0dHBgIGFuZCwgdXBvbiBzdWNjZXNzLCBzdG9yZXMgdGhlIGNvbnRlbnRzIGluc2lkZSBvZiBgJHRlbXBsYXRlQ2FjaGVgLiBJZiB0aGUgSFRUUCByZXF1ZXN0XG4gKiBmYWlscyBvciB0aGUgcmVzcG9uc2UgZGF0YSBvZiB0aGUgSFRUUCByZXF1ZXN0IGlzIGVtcHR5LCBhIGAkY29tcGlsZWAgZXJyb3Igd2lsbCBiZSB0aHJvd24gKHRoZVxuICogZXhjZXB0aW9uIGNhbiBiZSB0aHdhcnRlZCBieSBzZXR0aW5nIHRoZSAybmQgcGFyYW1ldGVyIG9mIHRoZSBmdW5jdGlvbiB0byB0cnVlKS4gTm90ZSB0aGF0IHRoZVxuICogY29udGVudHMgb2YgYCR0ZW1wbGF0ZUNhY2hlYCBhcmUgdHJ1c3RlZCwgc28gdGhlIGNhbGwgdG8gYCRzY2UuZ2V0VHJ1c3RlZFVybCh0cGwpYCBpcyBvbWl0dGVkXG4gKiB3aGVuIGB0cGxgIGlzIG9mIHR5cGUgc3RyaW5nIGFuZCBgJHRlbXBsYXRlQ2FjaGVgIGhhcyB0aGUgbWF0Y2hpbmcgZW50cnkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8VHJ1c3RlZFJlc291cmNlVXJsfSB0cGwgVGhlIEhUVFAgcmVxdWVzdCB0ZW1wbGF0ZSBVUkxcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGlnbm9yZVJlcXVlc3RFcnJvciBXaGV0aGVyIG9yIG5vdCB0byBpZ25vcmUgdGhlIGV4Y2VwdGlvbiB3aGVuIHRoZSByZXF1ZXN0IGZhaWxzIG9yIHRoZSB0ZW1wbGF0ZSBpcyBlbXB0eVxuICpcbiAqIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSBmb3IgdGhlIEhUVFAgcmVzcG9uc2UgZGF0YSBvZiB0aGUgZ2l2ZW4gVVJMLlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3RhbFBlbmRpbmdSZXF1ZXN0cyB0b3RhbCBhbW91bnQgb2YgcGVuZGluZyB0ZW1wbGF0ZSByZXF1ZXN0cyBiZWluZyBkb3dubG9hZGVkLlxuICovXG5mdW5jdGlvbiAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHRlbXBsYXRlQ2FjaGUnLCAnJGh0dHAnLCAnJHEnLCAnJHNjZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlLCAkaHR0cCwgJHEsICRzY2UpIHtcbiAgICBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0Rm4odHBsLCBpZ25vcmVSZXF1ZXN0RXJyb3IpIHtcbiAgICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cysrO1xuXG4gICAgICAvLyBXZSBjb25zaWRlciB0aGUgdGVtcGxhdGUgY2FjaGUgaG9sZHMgb25seSB0cnVzdGVkIHRlbXBsYXRlcywgc29cbiAgICAgIC8vIHRoZXJlJ3Mgbm8gbmVlZCB0byBnbyB0aHJvdWdoIHdoaXRlbGlzdGluZyBhZ2FpbiBmb3Iga2V5cyB0aGF0IGFscmVhZHlcbiAgICAgIC8vIGFyZSBpbmNsdWRlZCBpbiB0aGVyZS4gVGhpcyBhbHNvIG1ha2VzIEFuZ3VsYXIgYWNjZXB0IGFueSBzY3JpcHRcbiAgICAgIC8vIGRpcmVjdGl2ZSwgbm8gbWF0dGVyIGl0cyBuYW1lLiBIb3dldmVyLCB3ZSBzdGlsbCBuZWVkIHRvIHVud3JhcCB0cnVzdGVkXG4gICAgICAvLyB0eXBlcy5cbiAgICAgIGlmICghaXNTdHJpbmcodHBsKSB8fCAhJHRlbXBsYXRlQ2FjaGUuZ2V0KHRwbCkpIHtcbiAgICAgICAgdHBsID0gJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodHBsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYW5zZm9ybVJlc3BvbnNlID0gJGh0dHAuZGVmYXVsdHMgJiYgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2U7XG5cbiAgICAgIGlmIChpc0FycmF5KHRyYW5zZm9ybVJlc3BvbnNlKSkge1xuICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZSA9IHRyYW5zZm9ybVJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbih0cmFuc2Zvcm1lcikge1xuICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lciAhPT0gZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zZm9ybVJlc3BvbnNlID09PSBkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtKSB7XG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGh0dHBPcHRpb25zID0ge1xuICAgICAgICBjYWNoZTogJHRlbXBsYXRlQ2FjaGUsXG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiB0cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuICRodHRwLmdldCh0cGwsIGh0dHBPcHRpb25zKVxuICAgICAgICBbJ2ZpbmFsbHknXShmdW5jdGlvbigpIHtcbiAgICAgICAgICBoYW5kbGVSZXF1ZXN0Rm4udG90YWxQZW5kaW5nUmVxdWVzdHMtLTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodHBsLCByZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVFcnJvcihyZXNwKSB7XG4gICAgICAgIGlmICghaWdub3JlUmVxdWVzdEVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbG9hZCcsICdGYWlsZWQgdG8gbG9hZCB0ZW1wbGF0ZTogezB9IChIVFRQIHN0YXR1czogezF9IHsyfSknLFxuICAgICAgICAgICAgdHBsLCByZXNwLnN0YXR1cywgcmVzcC5zdGF0dXNUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cyA9IDA7XG5cbiAgICByZXR1cm4gaGFuZGxlUmVxdWVzdEZuO1xuICB9XTtcbn1cblxuZnVuY3Rpb24gJCRUZXN0YWJpbGl0eVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJGxvY2F0aW9uJyxcbiAgICAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAgICRicm93c2VyLCAgICRsb2NhdGlvbikge1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJHRlc3RhYmlsaXR5XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUaGUgcHJpdmF0ZSAkJHRlc3RhYmlsaXR5IHNlcnZpY2UgcHJvdmlkZXMgYSBjb2xsZWN0aW9uIG9mIG1ldGhvZHMgZm9yIHVzZSB3aGVuIGRlYnVnZ2luZ1xuICAgICAqIG9yIGJ5IGF1dG9tYXRlZCB0ZXN0IGFuZCBkZWJ1Z2dpbmcgdG9vbHMuXG4gICAgICovXG4gICAgdmFyIHRlc3RhYmlsaXR5ID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I2ZpbmRCaW5kaW5nc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSBib3VuZCAodmlhIG5nLWJpbmQgb3Ige3t9fSlcbiAgICAgKiB0byBleHByZXNzaW9ucyBtYXRjaGluZyB0aGUgaW5wdXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgcm9vdCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBUaGUgYmluZGluZyBleHByZXNzaW9uIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLiBGaWx0ZXJzIGFuZCB3aGl0ZXNwYWNlIGFyZSBpZ25vcmVkLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmZpbmRCaW5kaW5ncyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV4cHJlc3Npb24sIG9wdF9leGFjdE1hdGNoKSB7XG4gICAgICB2YXIgYmluZGluZ3MgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25nLWJpbmRpbmcnKTtcbiAgICAgIHZhciBtYXRjaGVzID0gW107XG4gICAgICBmb3JFYWNoKGJpbmRpbmdzLCBmdW5jdGlvbihiaW5kaW5nKSB7XG4gICAgICAgIHZhciBkYXRhQmluZGluZyA9IGFuZ3VsYXIuZWxlbWVudChiaW5kaW5nKS5kYXRhKCckYmluZGluZycpO1xuICAgICAgICBpZiAoZGF0YUJpbmRpbmcpIHtcbiAgICAgICAgICBmb3JFYWNoKGRhdGFCaW5kaW5nLCBmdW5jdGlvbihiaW5kaW5nTmFtZSkge1xuICAgICAgICAgICAgaWYgKG9wdF9leGFjdE1hdGNoKSB7XG4gICAgICAgICAgICAgIHZhciBtYXRjaGVyID0gbmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGVzY2FwZUZvclJlZ2V4cChleHByZXNzaW9uKSArICcoXFxcXHN8XFxcXHx8JCknKTtcbiAgICAgICAgICAgICAgaWYgKG1hdGNoZXIudGVzdChiaW5kaW5nTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goYmluZGluZyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChiaW5kaW5nTmFtZS5pbmRleE9mKGV4cHJlc3Npb24pICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGJpbmRpbmcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZE1vZGVsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB0d28td2F5IGZvdW5kIHZpYSBuZy1tb2RlbCB0b1xuICAgICAqIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBtb2RlbCBleHByZXNzaW9uIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmZpbmRNb2RlbHMgPSBmdW5jdGlvbihlbGVtZW50LCBleHByZXNzaW9uLCBvcHRfZXhhY3RNYXRjaCkge1xuICAgICAgdmFyIHByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmdcXFxcOiddO1xuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwcmVmaXhlcy5sZW5ndGg7ICsrcCkge1xuICAgICAgICB2YXIgYXR0cmlidXRlRXF1YWxzID0gb3B0X2V4YWN0TWF0Y2ggPyAnPScgOiAnKj0nO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSAnWycgKyBwcmVmaXhlc1twXSArICdtb2RlbCcgKyBhdHRyaWJ1dGVFcXVhbHMgKyAnXCInICsgZXhwcmVzc2lvbiArICdcIl0nO1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZ2V0TG9jYXRpb25cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IGZvciBnZXR0aW5nIHRoZSBsb2NhdGlvbiBpbiBhIGJyb3dzZXIgYWdub3N0aWMgd2F5LiBSZXR1cm5zXG4gICAgICogICAgIHRoZSBwYXRoLCBzZWFyY2gsIGFuZCBoYXNoLiAoZS5nLiAvcGF0aD9hPWIjaGFzaClcbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5nZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRsb2NhdGlvbi51cmwoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNzZXRMb2NhdGlvblxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgZm9yIG5hdmlnYXRpbmcgdG8gYSBsb2NhdGlvbiB3aXRob3V0IGRvaW5nIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGxvY2F0aW9uIHVybCAocGF0aCwgc2VhcmNoIGFuZCBoYXNoLFxuICAgICAqICAgICBlLmcuIC9wYXRoP2E9YiNoYXNoKSB0byBnbyB0by5cbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKHVybCkge1xuICAgICAgaWYgKHVybCAhPT0gJGxvY2F0aW9uLnVybCgpKSB7XG4gICAgICAgICRsb2NhdGlvbi51cmwodXJsKTtcbiAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjd2hlblN0YWJsZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ2FsbHMgdGhlIGNhbGxiYWNrIHdoZW4gJHRpbWVvdXQgYW5kICRodHRwIHJlcXVlc3RzIGFyZSBjb21wbGV0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LndoZW5TdGFibGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJGJyb3dzZXIubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyhjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIHJldHVybiB0ZXN0YWJpbGl0eTtcbiAgfV07XG59XG5cbmZ1bmN0aW9uICRUaW1lb3V0UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckcScsICckJHEnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLFxuICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJHEsICAgJCRxLCAgICRleGNlcHRpb25IYW5kbGVyKSB7XG5cbiAgICB2YXIgZGVmZXJyZWRzID0ge307XG5cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgICogQG5hbWUgJHRpbWVvdXRcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldFRpbWVvdXRgLiBUaGUgYGZuYCBmdW5jdGlvbiBpcyB3cmFwcGVkIGludG8gYSB0cnkvY2F0Y2hcbiAgICAgICogYmxvY2sgYW5kIGRlbGVnYXRlcyBhbnkgZXhjZXB0aW9ucyB0b1xuICAgICAgKiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAqXG4gICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgY2FsbGluZyBgJHRpbWVvdXRgIGlzIGEgcHJvbWlzZSwgd2hpY2ggd2lsbCBiZSByZXNvbHZlZCB3aGVuXG4gICAgICAqIHRoZSBkZWxheSBoYXMgcGFzc2VkIGFuZCB0aGUgdGltZW91dCBmdW5jdGlvbiwgaWYgcHJvdmlkZWQsIGlzIGV4ZWN1dGVkLlxuICAgICAgKlxuICAgICAgKiBUbyBjYW5jZWwgYSB0aW1lb3V0IHJlcXVlc3QsIGNhbGwgYCR0aW1lb3V0LmNhbmNlbChwcm9taXNlKWAuXG4gICAgICAqXG4gICAgICAqIEluIHRlc3RzIHlvdSBjYW4gdXNlIHtAbGluayBuZ01vY2suJHRpbWVvdXQgYCR0aW1lb3V0LmZsdXNoKClgfSB0b1xuICAgICAgKiBzeW5jaHJvbm91c2x5IGZsdXNoIHRoZSBxdWV1ZSBvZiBkZWZlcnJlZCBmdW5jdGlvbnMuXG4gICAgICAqXG4gICAgICAqIElmIHlvdSBvbmx5IHdhbnQgYSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBhZnRlciBzb21lIHNwZWNpZmllZCBkZWxheVxuICAgICAgKiB0aGVuIHlvdSBjYW4gY2FsbCBgJHRpbWVvdXRgIHdpdGhvdXQgdGhlIGBmbmAgZnVuY3Rpb24uXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKT19IGZuIEEgZnVuY3Rpb24sIHdob3NlIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVsYXllZC5cbiAgICAgICogQHBhcmFtIHtudW1iZXI9fSBbZGVsYXk9MF0gRGVsYXkgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW52b2tlQXBwbHk9dHJ1ZV0gSWYgc2V0IHRvIGBmYWxzZWAgc2tpcHMgbW9kZWwgZGlydHkgY2hlY2tpbmcsIG90aGVyd2lzZVxuICAgICAgKiAgIHdpbGwgaW52b2tlIGBmbmAgd2l0aGluIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkgJGFwcGx5fSBibG9jay5cbiAgICAgICogQHBhcmFtIHsuLi4qPX0gUGFzcyBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gdGhlIGV4ZWN1dGVkIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2hlbiB0aGUgdGltZW91dCBpcyByZWFjaGVkLiBUaGUgcHJvbWlzZVxuICAgICAgKiAgIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgZm5gIGZ1bmN0aW9uLlxuICAgICAgKlxuICAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lb3V0KGZuLCBkZWxheSwgaW52b2tlQXBwbHkpIHtcbiAgICAgIGlmICghaXNGdW5jdGlvbihmbikpIHtcbiAgICAgICAgaW52b2tlQXBwbHkgPSBkZWxheTtcbiAgICAgICAgZGVsYXkgPSBmbjtcbiAgICAgICAgZm4gPSBub29wO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXJncyA9IHNsaWNlQXJncyhhcmd1bWVudHMsIDMpLFxuICAgICAgICAgIHNraXBBcHBseSA9IChpc0RlZmluZWQoaW52b2tlQXBwbHkpICYmICFpbnZva2VBcHBseSksXG4gICAgICAgICAgZGVmZXJyZWQgPSAoc2tpcEFwcGx5ID8gJCRxIDogJHEpLmRlZmVyKCksXG4gICAgICAgICAgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgdGltZW91dElkO1xuXG4gICAgICB0aW1lb3V0SWQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGZuLmFwcGx5KG51bGwsIGFyZ3MpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlKTtcbiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICBkZWxldGUgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFza2lwQXBwbHkpICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICB9LCBkZWxheSk7XG5cbiAgICAgIHByb21pc2UuJCR0aW1lb3V0SWQgPSB0aW1lb3V0SWQ7XG4gICAgICBkZWZlcnJlZHNbdGltZW91dElkXSA9IGRlZmVycmVkO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgKiBAbmFtZSAkdGltZW91dCNjYW5jZWxcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIENhbmNlbHMgYSB0YXNrIGFzc29jaWF0ZWQgd2l0aCB0aGUgYHByb21pc2VgLiBBcyBhIHJlc3VsdCBvZiB0aGlzLCB0aGUgcHJvbWlzZSB3aWxsIGJlXG4gICAgICAqIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7UHJvbWlzZT19IHByb21pc2UgUHJvbWlzZSByZXR1cm5lZCBieSB0aGUgYCR0aW1lb3V0YCBmdW5jdGlvbi5cbiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHlcbiAgICAgICogICBjYW5jZWxlZC5cbiAgICAgICovXG4gICAgdGltZW91dC5jYW5jZWwgPSBmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgICBpZiAocHJvbWlzZSAmJiBwcm9taXNlLiQkdGltZW91dElkIGluIGRlZmVycmVkcykge1xuICAgICAgICBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF0ucmVqZWN0KCdjYW5jZWxlZCcpO1xuICAgICAgICBkZWxldGUgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdO1xuICAgICAgICByZXR1cm4gJGJyb3dzZXIuZGVmZXIuY2FuY2VsKHByb21pc2UuJCR0aW1lb3V0SWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGltZW91dDtcbiAgfV07XG59XG5cbi8vIE5PVEU6ICBUaGUgdXNhZ2Ugb2Ygd2luZG93IGFuZCBkb2N1bWVudCBpbnN0ZWFkIG9mICR3aW5kb3cgYW5kICRkb2N1bWVudCBoZXJlIGlzXG4vLyBkZWxpYmVyYXRlLiAgVGhpcyBzZXJ2aWNlIGRlcGVuZHMgb24gdGhlIHNwZWNpZmljIGJlaGF2aW9yIG9mIGFuY2hvciBub2RlcyBjcmVhdGVkIGJ5IHRoZVxuLy8gYnJvd3NlciAocmVzb2x2aW5nIGFuZCBwYXJzaW5nIFVSTHMpIHRoYXQgaXMgdW5saWtlbHkgdG8gYmUgcHJvdmlkZWQgYnkgbW9jayBvYmplY3RzIGFuZFxuLy8gY2F1c2UgdXMgdG8gYnJlYWsgdGVzdHMuICBJbiBhZGRpdGlvbiwgd2hlbiB0aGUgYnJvd3NlciByZXNvbHZlcyBhIFVSTCBmb3IgWEhSLCBpdFxuLy8gZG9lc24ndCBrbm93IGFib3V0IG1vY2tlZCBsb2NhdGlvbnMgYW5kIHJlc29sdmVzIFVSTHMgdG8gdGhlIHJlYWwgZG9jdW1lbnQgLSB3aGljaCBpc1xuLy8gZXhhY3RseSB0aGUgYmVoYXZpb3IgbmVlZGVkIGhlcmUuICBUaGVyZSBpcyBsaXR0bGUgdmFsdWUgaXMgbW9ja2luZyB0aGVzZSBvdXQgZm9yIHRoaXNcbi8vIHNlcnZpY2UuXG52YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbnZhciBvcmlnaW5VcmwgPSB1cmxSZXNvbHZlKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuXG4vKipcbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBOb3RlcyBmb3Igbm9uLUlFIGJyb3dzZXJzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBc3NpZ25pbmcgYSBVUkwgdG8gdGhlIGhyZWYgcHJvcGVydHkgb2YgYW4gYW5jaG9yIERPTSBub2RlLCBldmVuIG9uZSBhdHRhY2hlZCB0byB0aGUgRE9NLFxuICogcmVzdWx0cyBib3RoIGluIHRoZSBub3JtYWxpemluZyBhbmQgcGFyc2luZyBvZiB0aGUgVVJMLiAgTm9ybWFsaXppbmcgbWVhbnMgdGhhdCBhIHJlbGF0aXZlXG4gKiBVUkwgd2lsbCBiZSByZXNvbHZlZCBpbnRvIGFuIGFic29sdXRlIFVSTCBpbiB0aGUgY29udGV4dCBvZiB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gKiBQYXJzaW5nIG1lYW5zIHRoYXQgdGhlIGFuY2hvciBub2RlJ3MgaG9zdCwgaG9zdG5hbWUsIHByb3RvY29sLCBwb3J0LCBwYXRobmFtZSBhbmQgcmVsYXRlZFxuICogcHJvcGVydGllcyBhcmUgYWxsIHBvcHVsYXRlZCB0byByZWZsZWN0IHRoZSBub3JtYWxpemVkIFVSTC4gIFRoaXMgYXBwcm9hY2ggaGFzIHdpZGVcbiAqIGNvbXBhdGliaWxpdHkgLSBTYWZhcmkgMSssIE1vemlsbGEgMSssIE9wZXJhIDcrLGUgZXRjLiAgU2VlXG4gKiBodHRwOi8vd3d3LmFwdGFuYS5jb20vcmVmZXJlbmNlL2h0bWwvYXBpL0hUTUxBbmNob3JFbGVtZW50Lmh0bWxcbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBOb3RlcyBmb3IgSUVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogSUUgPD0gMTAgbm9ybWFsaXplcyB0aGUgVVJMIHdoZW4gYXNzaWduZWQgdG8gdGhlIGFuY2hvciBub2RlIHNpbWlsYXIgdG8gdGhlIG90aGVyXG4gKiBicm93c2Vycy4gIEhvd2V2ZXIsIHRoZSBwYXJzZWQgY29tcG9uZW50cyB3aWxsIG5vdCBiZSBzZXQgaWYgdGhlIFVSTCBhc3NpZ25lZCBkaWQgbm90IHNwZWNpZnlcbiAqIHRoZW0uICAoZS5nLiBpZiB5b3UgYXNzaWduIGEuaHJlZiA9IFwiZm9vXCIsIHRoZW4gYS5wcm90b2NvbCwgYS5ob3N0LCBldGMuIHdpbGwgYmUgZW1wdHkuKSAgV2VcbiAqIHdvcmsgYXJvdW5kIHRoYXQgYnkgcGVyZm9ybWluZyB0aGUgcGFyc2luZyBpbiBhIDJuZCBzdGVwIGJ5IHRha2luZyBhIHByZXZpb3VzbHkgbm9ybWFsaXplZFxuICogVVJMIChlLmcuIGJ5IGFzc2lnbmluZyB0byBhLmhyZWYpIGFuZCBhc3NpZ25pbmcgaXQgYS5ocmVmIGFnYWluLiAgVGhpcyBjb3JyZWN0bHkgcG9wdWxhdGVzIHRoZVxuICogcHJvcGVydGllcyBzdWNoIGFzIHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCwgZXRjLlxuICpcbiAqIFJlZmVyZW5jZXM6XG4gKiAgIGh0dHA6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxBbmNob3JFbGVtZW50XG4gKiAgIGh0dHA6Ly93d3cuYXB0YW5hLmNvbS9yZWZlcmVuY2UvaHRtbC9hcGkvSFRNTEFuY2hvckVsZW1lbnQuaHRtbFxuICogICBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzI5MDJcbiAqICAgaHR0cDovL2phbWVzLnBhZG9sc2V5LmNvbS9qYXZhc2NyaXB0L3BhcnNpbmctdXJscy13aXRoLXRoZS1kb20vXG4gKlxuICogQGtpbmQgZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWQuXG4gKiBAZGVzY3JpcHRpb24gTm9ybWFsaXplcyBhbmQgcGFyc2VzIGEgVVJMLlxuICogQHJldHVybnMge29iamVjdH0gUmV0dXJucyB0aGUgbm9ybWFsaXplZCBVUkwgYXMgYSBkaWN0aW9uYXJ5LlxuICpcbiAqICAgfCBtZW1iZXIgbmFtZSAgIHwgRGVzY3JpcHRpb24gICAgfFxuICogICB8LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18XG4gKiAgIHwgaHJlZiAgICAgICAgICB8IEEgbm9ybWFsaXplZCB2ZXJzaW9uIG9mIHRoZSBwcm92aWRlZCBVUkwgaWYgaXQgd2FzIG5vdCBhbiBhYnNvbHV0ZSBVUkwgfFxuICogICB8IHByb3RvY29sICAgICAgfCBUaGUgcHJvdG9jb2wgaW5jbHVkaW5nIHRoZSB0cmFpbGluZyBjb2xvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgfCBob3N0ICAgICAgICAgIHwgVGhlIGhvc3QgYW5kIHBvcnQgKGlmIHRoZSBwb3J0IGlzIG5vbi1kZWZhdWx0KSBvZiB0aGUgbm9ybWFsaXplZFVybCAgICB8XG4gKiAgIHwgc2VhcmNoICAgICAgICB8IFRoZSBzZWFyY2ggcGFyYW1zLCBtaW51cyB0aGUgcXVlc3Rpb24gbWFyayAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICB8IGhhc2ggICAgICAgICAgfCBUaGUgaGFzaCBzdHJpbmcsIG1pbnVzIHRoZSBoYXNoIHN5bWJvbFxuICogICB8IGhvc3RuYW1lICAgICAgfCBUaGUgaG9zdG5hbWVcbiAqICAgfCBwb3J0ICAgICAgICAgIHwgVGhlIHBvcnQsIHdpdGhvdXQgXCI6XCJcbiAqICAgfCBwYXRobmFtZSAgICAgIHwgVGhlIHBhdGhuYW1lLCBiZWdpbm5pbmcgd2l0aCBcIi9cIlxuICpcbiAqL1xuZnVuY3Rpb24gdXJsUmVzb2x2ZSh1cmwpIHtcbiAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgaWYgKG1zaWUpIHtcbiAgICAvLyBOb3JtYWxpemUgYmVmb3JlIHBhcnNlLiAgUmVmZXIgSW1wbGVtZW50YXRpb24gTm90ZXMgb24gd2h5IHRoaXMgaXNcbiAgICAvLyBkb25lIGluIHR3byBzdGVwcyBvbiBJRS5cbiAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIGhyZWYpO1xuICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICB9XG5cbiAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICByZXR1cm4ge1xuICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpXG4gICAgICA/IHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICA6ICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gIH07XG59XG5cbi8qKlxuICogUGFyc2UgYSByZXF1ZXN0IFVSTCBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhIHNhbWUtb3JpZ2luIHJlcXVlc3QgYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVxdWVzdFVybCBUaGUgdXJsIG9mIHRoZSByZXF1ZXN0IGFzIGEgc3RyaW5nIHRoYXQgd2lsbCBiZSByZXNvbHZlZFxuICogb3IgYSBwYXJzZWQgVVJMIG9iamVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSByZXF1ZXN0IGlzIGZvciB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50LlxuICovXG5mdW5jdGlvbiB1cmxJc1NhbWVPcmlnaW4ocmVxdWVzdFVybCkge1xuICB2YXIgcGFyc2VkID0gKGlzU3RyaW5nKHJlcXVlc3RVcmwpKSA/IHVybFJlc29sdmUocmVxdWVzdFVybCkgOiByZXF1ZXN0VXJsO1xuICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVXJsLnByb3RvY29sICYmXG4gICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVybC5ob3N0KTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHdpbmRvd1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSByZWZlcmVuY2UgdG8gdGhlIGJyb3dzZXIncyBgd2luZG93YCBvYmplY3QuIFdoaWxlIGB3aW5kb3dgXG4gKiBpcyBnbG9iYWxseSBhdmFpbGFibGUgaW4gSmF2YVNjcmlwdCwgaXQgY2F1c2VzIHRlc3RhYmlsaXR5IHByb2JsZW1zLCBiZWNhdXNlXG4gKiBpdCBpcyBhIGdsb2JhbCB2YXJpYWJsZS4gSW4gYW5ndWxhciB3ZSBhbHdheXMgcmVmZXIgdG8gaXQgdGhyb3VnaCB0aGVcbiAqIGAkd2luZG93YCBzZXJ2aWNlLCBzbyBpdCBtYXkgYmUgb3ZlcnJpZGRlbiwgcmVtb3ZlZCBvciBtb2NrZWQgZm9yIHRlc3RpbmcuXG4gKlxuICogRXhwcmVzc2lvbnMsIGxpa2UgdGhlIG9uZSBkZWZpbmVkIGZvciB0aGUgYG5nQ2xpY2tgIGRpcmVjdGl2ZSBpbiB0aGUgZXhhbXBsZVxuICogYmVsb3csIGFyZSBldmFsdWF0ZWQgd2l0aCByZXNwZWN0IHRvIHRoZSBjdXJyZW50IHNjb3BlLiAgVGhlcmVmb3JlLCB0aGVyZSBpc1xuICogbm8gcmlzayBvZiBpbmFkdmVydGVudGx5IGNvZGluZyBpbiBhIGRlcGVuZGVuY3kgb24gYSBnbG9iYWwgdmFsdWUgaW4gc3VjaCBhblxuICogZXhwcmVzc2lvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwid2luZG93RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnd2luZG93RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckd2luZG93JywgZnVuY3Rpb24oJHNjb3BlLCAkd2luZG93KSB7XG4gICAgICAgICAgICAgJHNjb3BlLmdyZWV0aW5nID0gJ0hlbGxvLCBXb3JsZCEnO1xuICAgICAgICAgICAgICRzY29wZS5kb0dyZWV0aW5nID0gZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAgICAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoZ3JlZXRpbmcpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJncmVldGluZ1wiIGFyaWEtbGFiZWw9XCJncmVldGluZ1wiIC8+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZG9HcmVldGluZyhncmVldGluZylcIj5BTEVSVDwvYnV0dG9uPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgZGlzcGxheSB0aGUgZ3JlZXRpbmcgaW4gdGhlIGlucHV0IGJveCcsIGZ1bmN0aW9uKCkge1xuICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2dyZWV0aW5nJykpLnNlbmRLZXlzKCdIZWxsbywgRTJFIFRlc3RzJyk7XG4gICAgICAgLy8gSWYgd2UgY2xpY2sgdGhlIGJ1dHRvbiBpdCB3aWxsIGJsb2NrIHRoZSB0ZXN0IHJ1bm5lclxuICAgICAgIC8vIGVsZW1lbnQoJzpidXR0b24nKS5jbGljaygpO1xuICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gJFdpbmRvd1Byb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSB2YWx1ZUZuKHdpbmRvdyk7XG59XG5cbi8qKlxuICogQG5hbWUgJCRjb29raWVSZWFkZXJcbiAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgaXMgYSBwcml2YXRlIHNlcnZpY2UgZm9yIHJlYWRpbmcgY29va2llcyB1c2VkIGJ5ICRodHRwIGFuZCBuZ0Nvb2tpZXNcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGEga2V5L3ZhbHVlIG1hcCBvZiB0aGUgY3VycmVudCBjb29raWVzXG4gKi9cbmZ1bmN0aW9uICQkQ29va2llUmVhZGVyKCRkb2N1bWVudCkge1xuICB2YXIgcmF3RG9jdW1lbnQgPSAkZG9jdW1lbnRbMF0gfHwge307XG4gIHZhciBsYXN0Q29va2llcyA9IHt9O1xuICB2YXIgbGFzdENvb2tpZVN0cmluZyA9ICcnO1xuXG4gIGZ1bmN0aW9uIHNhZmVEZWNvZGVVUklDb21wb25lbnQoc3RyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29va2llQXJyYXksIGNvb2tpZSwgaSwgaW5kZXgsIG5hbWU7XG4gICAgdmFyIGN1cnJlbnRDb29raWVTdHJpbmcgPSByYXdEb2N1bWVudC5jb29raWUgfHwgJyc7XG5cbiAgICBpZiAoY3VycmVudENvb2tpZVN0cmluZyAhPT0gbGFzdENvb2tpZVN0cmluZykge1xuICAgICAgbGFzdENvb2tpZVN0cmluZyA9IGN1cnJlbnRDb29raWVTdHJpbmc7XG4gICAgICBjb29raWVBcnJheSA9IGxhc3RDb29raWVTdHJpbmcuc3BsaXQoJzsgJyk7XG4gICAgICBsYXN0Q29va2llcyA9IHt9O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY29va2llQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29va2llID0gY29va2llQXJyYXlbaV07XG4gICAgICAgIGluZGV4ID0gY29va2llLmluZGV4T2YoJz0nKTtcbiAgICAgICAgaWYgKGluZGV4ID4gMCkgeyAvL2lnbm9yZSBuYW1lbGVzcyBjb29raWVzXG4gICAgICAgICAgbmFtZSA9IHNhZmVEZWNvZGVVUklDb21wb25lbnQoY29va2llLnN1YnN0cmluZygwLCBpbmRleCkpO1xuICAgICAgICAgIC8vIHRoZSBmaXJzdCB2YWx1ZSB0aGF0IGlzIHNlZW4gZm9yIGEgY29va2llIGlzIHRoZSBtb3N0XG4gICAgICAgICAgLy8gc3BlY2lmaWMgb25lLiAgdmFsdWVzIGZvciB0aGUgc2FtZSBjb29raWUgbmFtZSB0aGF0XG4gICAgICAgICAgLy8gZm9sbG93IGFyZSBmb3IgbGVzcyBzcGVjaWZpYyBwYXRocy5cbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQobGFzdENvb2tpZXNbbmFtZV0pKSB7XG4gICAgICAgICAgICBsYXN0Q29va2llc1tuYW1lXSA9IHNhZmVEZWNvZGVVUklDb21wb25lbnQoY29va2llLnN1YnN0cmluZyhpbmRleCArIDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxhc3RDb29raWVzO1xuICB9O1xufVxuXG4kJENvb2tpZVJlYWRlci4kaW5qZWN0ID0gWyckZG9jdW1lbnQnXTtcblxuZnVuY3Rpb24gJCRDb29raWVSZWFkZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gJCRDb29raWVSZWFkZXI7XG59XG5cbi8qIGdsb2JhbCBjdXJyZW5jeUZpbHRlcjogdHJ1ZSxcbiBkYXRlRmlsdGVyOiB0cnVlLFxuIGZpbHRlckZpbHRlcjogdHJ1ZSxcbiBqc29uRmlsdGVyOiB0cnVlLFxuIGxpbWl0VG9GaWx0ZXI6IHRydWUsXG4gbG93ZXJjYXNlRmlsdGVyOiB0cnVlLFxuIG51bWJlckZpbHRlcjogdHJ1ZSxcbiBvcmRlckJ5RmlsdGVyOiB0cnVlLFxuIHVwcGVyY2FzZUZpbHRlcjogdHJ1ZSxcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGZpbHRlclByb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBGaWx0ZXJzIGFyZSBqdXN0IGZ1bmN0aW9ucyB3aGljaCB0cmFuc2Zvcm0gaW5wdXQgdG8gYW4gb3V0cHV0LiBIb3dldmVyIGZpbHRlcnMgbmVlZCB0byBiZVxuICogRGVwZW5kZW5jeSBJbmplY3RlZC4gVG8gYWNoaWV2ZSB0aGlzIGEgZmlsdGVyIGRlZmluaXRpb24gY29uc2lzdHMgb2YgYSBmYWN0b3J5IGZ1bmN0aW9uIHdoaWNoIGlzXG4gKiBhbm5vdGF0ZWQgd2l0aCBkZXBlbmRlbmNpZXMgYW5kIGlzIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyBhIGZpbHRlciBmdW5jdGlvbi5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIEZpbHRlciBuYW1lcyBtdXN0IGJlIHZhbGlkIGFuZ3VsYXIge0BsaW5rIGV4cHJlc3Npb259IGlkZW50aWZpZXJzLCBzdWNoIGFzIGB1cHBlcmNhc2VgIG9yIGBvcmRlckJ5YC5cbiAqIE5hbWVzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJzLCBzdWNoIGFzIGh5cGhlbnMgYW5kIGRvdHMsIGFyZSBub3QgYWxsb3dlZC4gSWYgeW91IHdpc2ggdG8gbmFtZXNwYWNlXG4gKiB5b3VyIGZpbHRlcnMsIHRoZW4geW91IGNhbiB1c2UgY2FwaXRhbGl6YXRpb24gKGBteWFwcFN1YnNlY3Rpb25GaWx0ZXJ4YCkgb3IgdW5kZXJzY29yZXNcbiAqIChgbXlhcHBfc3Vic2VjdGlvbl9maWx0ZXJ4YCkuXG4gKiA8L2Rpdj5cbiAqXG4gKiBgYGBqc1xuICogICAvLyBGaWx0ZXIgcmVnaXN0cmF0aW9uXG4gKiAgIGZ1bmN0aW9uIE15TW9kdWxlKCRwcm92aWRlLCAkZmlsdGVyUHJvdmlkZXIpIHtcbiAqICAgICAvLyBjcmVhdGUgYSBzZXJ2aWNlIHRvIGRlbW9uc3RyYXRlIGluamVjdGlvbiAobm90IGFsd2F5cyBuZWVkZWQpXG4gKiAgICAgJHByb3ZpZGUudmFsdWUoJ2dyZWV0JywgZnVuY3Rpb24obmFtZSl7XG4gKiAgICAgICByZXR1cm4gJ0hlbGxvICcgKyBuYW1lICsgJyEnO1xuICogICAgIH0pO1xuICpcbiAqICAgICAvLyByZWdpc3RlciBhIGZpbHRlciBmYWN0b3J5IHdoaWNoIHVzZXMgdGhlXG4gKiAgICAgLy8gZ3JlZXQgc2VydmljZSB0byBkZW1vbnN0cmF0ZSBESS5cbiAqICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ2dyZWV0JywgZnVuY3Rpb24oZ3JlZXQpe1xuICogICAgICAgLy8gcmV0dXJuIHRoZSBmaWx0ZXIgZnVuY3Rpb24gd2hpY2ggdXNlcyB0aGUgZ3JlZXQgc2VydmljZVxuICogICAgICAgLy8gdG8gZ2VuZXJhdGUgc2FsdXRhdGlvblxuICogICAgICAgcmV0dXJuIGZ1bmN0aW9uKHRleHQpIHtcbiAqICAgICAgICAgLy8gZmlsdGVycyBuZWVkIHRvIGJlIGZvcmdpdmluZyBzbyBjaGVjayBpbnB1dCB2YWxpZGl0eVxuICogICAgICAgICByZXR1cm4gdGV4dCAmJiBncmVldCh0ZXh0KSB8fCB0ZXh0O1xuICogICAgICAgfTtcbiAqICAgICB9KTtcbiAqICAgfVxuICogYGBgXG4gKlxuICogVGhlIGZpbHRlciBmdW5jdGlvbiBpcyByZWdpc3RlcmVkIHdpdGggdGhlIGAkaW5qZWN0b3JgIHVuZGVyIHRoZSBmaWx0ZXIgbmFtZSBzdWZmaXggd2l0aFxuICogYEZpbHRlcmAuXG4gKlxuICogYGBganNcbiAqICAgaXQoJ3Nob3VsZCBiZSB0aGUgc2FtZSBpbnN0YW5jZScsIGluamVjdChcbiAqICAgICBmdW5jdGlvbigkZmlsdGVyUHJvdmlkZXIpIHtcbiAqICAgICAgICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcigncmV2ZXJzZScsIGZ1bmN0aW9uKCl7XG4gKiAgICAgICAgIHJldHVybiAuLi47XG4gKiAgICAgICB9KTtcbiAqICAgICB9LFxuICogICAgIGZ1bmN0aW9uKCRmaWx0ZXIsIHJldmVyc2VGaWx0ZXIpIHtcbiAqICAgICAgIGV4cGVjdCgkZmlsdGVyKCdyZXZlcnNlJykpLnRvQmUocmV2ZXJzZUZpbHRlcik7XG4gKiAgICAgfSk7XG4gKiBgYGBcbiAqXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgaG93IGFuZ3VsYXIgZmlsdGVycyB3b3JrLCBhbmQgaG93IHRvIGNyZWF0ZSB5b3VyIG93biBmaWx0ZXJzLCBzZWVcbiAqIHtAbGluayBndWlkZS9maWx0ZXIgRmlsdGVyc30gaW4gdGhlIEFuZ3VsYXIgRGV2ZWxvcGVyIEd1aWRlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRmaWx0ZXJcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZpbHRlcnMgYXJlIHVzZWQgZm9yIGZvcm1hdHRpbmcgZGF0YSBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIuXG4gKlxuICogVGhlIGdlbmVyYWwgc3ludGF4IGluIHRlbXBsYXRlcyBpcyBhcyBmb2xsb3dzOlxuICpcbiAqICAgICAgICAge3sgZXhwcmVzc2lvbiBbfCBmaWx0ZXJfbmFtZVs6cGFyYW1ldGVyX3ZhbHVlXSAuLi4gXSB9fVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGZpbHRlciBmdW5jdGlvbiB0byByZXRyaWV2ZVxuICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBmaWx0ZXIgZnVuY3Rpb25cbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwiJGZpbHRlclwiIG1vZHVsZT1cImZpbHRlckV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNYWluQ3RybFwiPlxuICAgICAgICA8aDM+e3sgb3JpZ2luYWxUZXh0IH19PC9oMz5cbiAgICAgICAgPGgzPnt7IGZpbHRlcmVkVGV4dCB9fTwvaDM+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cblxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnZmlsdGVyRXhhbXBsZScsIFtdKVxuICAgICAgLmNvbnRyb2xsZXIoJ01haW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkZmlsdGVyKSB7XG4gICAgICAgICRzY29wZS5vcmlnaW5hbFRleHQgPSAnaGVsbG8nO1xuICAgICAgICAkc2NvcGUuZmlsdGVyZWRUZXh0ID0gJGZpbHRlcigndXBwZXJjYXNlJykoJHNjb3BlLm9yaWdpbmFsVGV4dCk7XG4gICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICAqL1xuJEZpbHRlclByb3ZpZGVyLiRpbmplY3QgPSBbJyRwcm92aWRlJ107XG5mdW5jdGlvbiAkRmlsdGVyUHJvdmlkZXIoJHByb3ZpZGUpIHtcbiAgdmFyIHN1ZmZpeCA9ICdGaWx0ZXInO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRmaWx0ZXJQcm92aWRlciNyZWdpc3RlclxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgTmFtZSBvZiB0aGUgZmlsdGVyIGZ1bmN0aW9uLCBvciBhbiBvYmplY3QgbWFwIG9mIGZpbHRlcnMgd2hlcmVcbiAgICogICAgdGhlIGtleXMgYXJlIHRoZSBmaWx0ZXIgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmaWx0ZXIgZmFjdG9yaWVzLlxuICAgKlxuICAgKiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAgICAqKk5vdGU6KiogRmlsdGVyIG5hbWVzIG11c3QgYmUgdmFsaWQgYW5ndWxhciB7QGxpbmsgZXhwcmVzc2lvbn0gaWRlbnRpZmllcnMsIHN1Y2ggYXMgYHVwcGVyY2FzZWAgb3IgYG9yZGVyQnlgLlxuICAgKiAgICBOYW1lcyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycywgc3VjaCBhcyBoeXBoZW5zIGFuZCBkb3RzLCBhcmUgbm90IGFsbG93ZWQuIElmIHlvdSB3aXNoIHRvIG5hbWVzcGFjZVxuICAgKiAgICB5b3VyIGZpbHRlcnMsIHRoZW4geW91IGNhbiB1c2UgY2FwaXRhbGl6YXRpb24gKGBteWFwcFN1YnNlY3Rpb25GaWx0ZXJ4YCkgb3IgdW5kZXJzY29yZXNcbiAgICogICAgKGBteWFwcF9zdWJzZWN0aW9uX2ZpbHRlcnhgKS5cbiAgICogICAgPC9kaXY+XG4gICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmYWN0b3J5IElmIHRoZSBmaXJzdCBhcmd1bWVudCB3YXMgYSBzdHJpbmcsIGEgZmFjdG9yeSBmdW5jdGlvbiBmb3IgdGhlIGZpbHRlciB0byBiZSByZWdpc3RlcmVkLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZWdpc3RlcmVkIGZpbHRlciBpbnN0YW5jZSwgb3IgaWYgYSBtYXAgb2YgZmlsdGVycyB3YXMgcHJvdmlkZWQgdGhlbiBhIG1hcFxuICAgKiAgICBvZiB0aGUgcmVnaXN0ZXJlZCBmaWx0ZXIgaW5zdGFuY2VzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVnaXN0ZXIobmFtZSwgZmFjdG9yeSkge1xuICAgIGlmIChpc09iamVjdChuYW1lKSkge1xuICAgICAgdmFyIGZpbHRlcnMgPSB7fTtcbiAgICAgIGZvckVhY2gobmFtZSwgZnVuY3Rpb24oZmlsdGVyLCBrZXkpIHtcbiAgICAgICAgZmlsdGVyc1trZXldID0gcmVnaXN0ZXIoa2V5LCBmaWx0ZXIpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmlsdGVycztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICRwcm92aWRlLmZhY3RvcnkobmFtZSArIHN1ZmZpeCwgZmFjdG9yeSk7XG4gICAgfVxuICB9XG4gIHRoaXMucmVnaXN0ZXIgPSByZWdpc3RlcjtcblxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICByZXR1cm4gJGluamVjdG9yLmdldChuYW1lICsgc3VmZml4KTtcbiAgICB9O1xuICB9XTtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLyogZ2xvYmFsXG4gICAgY3VycmVuY3lGaWx0ZXI6IGZhbHNlLFxuICAgIGRhdGVGaWx0ZXI6IGZhbHNlLFxuICAgIGZpbHRlckZpbHRlcjogZmFsc2UsXG4gICAganNvbkZpbHRlcjogZmFsc2UsXG4gICAgbGltaXRUb0ZpbHRlcjogZmFsc2UsXG4gICAgbG93ZXJjYXNlRmlsdGVyOiBmYWxzZSxcbiAgICBudW1iZXJGaWx0ZXI6IGZhbHNlLFxuICAgIG9yZGVyQnlGaWx0ZXI6IGZhbHNlLFxuICAgIHVwcGVyY2FzZUZpbHRlcjogZmFsc2UsXG4gICovXG5cbiAgcmVnaXN0ZXIoJ2N1cnJlbmN5JywgY3VycmVuY3lGaWx0ZXIpO1xuICByZWdpc3RlcignZGF0ZScsIGRhdGVGaWx0ZXIpO1xuICByZWdpc3RlcignZmlsdGVyJywgZmlsdGVyRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2pzb24nLCBqc29uRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2xpbWl0VG8nLCBsaW1pdFRvRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2xvd2VyY2FzZScsIGxvd2VyY2FzZUZpbHRlcik7XG4gIHJlZ2lzdGVyKCdudW1iZXInLCBudW1iZXJGaWx0ZXIpO1xuICByZWdpc3Rlcignb3JkZXJCeScsIG9yZGVyQnlGaWx0ZXIpO1xuICByZWdpc3RlcigndXBwZXJjYXNlJywgdXBwZXJjYXNlRmlsdGVyKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBmaWx0ZXJcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZWxlY3RzIGEgc3Vic2V0IG9mIGl0ZW1zIGZyb20gYGFycmF5YCBhbmQgcmV0dXJucyBpdCBhcyBhIG5ldyBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc291cmNlIGFycmF5LlxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fGZ1bmN0aW9uKCl9IGV4cHJlc3Npb24gVGhlIHByZWRpY2F0ZSB0byBiZSB1c2VkIGZvciBzZWxlY3RpbmcgaXRlbXMgZnJvbVxuICogICBgYXJyYXlgLlxuICpcbiAqICAgQ2FuIGJlIG9uZSBvZjpcbiAqXG4gKiAgIC0gYHN0cmluZ2A6IFRoZSBzdHJpbmcgaXMgdXNlZCBmb3IgbWF0Y2hpbmcgYWdhaW5zdCB0aGUgY29udGVudHMgb2YgdGhlIGBhcnJheWAuIEFsbCBzdHJpbmdzIG9yXG4gKiAgICAgb2JqZWN0cyB3aXRoIHN0cmluZyBwcm9wZXJ0aWVzIGluIGBhcnJheWAgdGhhdCBtYXRjaCB0aGlzIHN0cmluZyB3aWxsIGJlIHJldHVybmVkLiBUaGlzIGFsc29cbiAqICAgICBhcHBsaWVzIHRvIG5lc3RlZCBvYmplY3QgcHJvcGVydGllcy5cbiAqICAgICBUaGUgcHJlZGljYXRlIGNhbiBiZSBuZWdhdGVkIGJ5IHByZWZpeGluZyB0aGUgc3RyaW5nIHdpdGggYCFgLlxuICpcbiAqICAgLSBgT2JqZWN0YDogQSBwYXR0ZXJuIG9iamVjdCBjYW4gYmUgdXNlZCB0byBmaWx0ZXIgc3BlY2lmaWMgcHJvcGVydGllcyBvbiBvYmplY3RzIGNvbnRhaW5lZFxuICogICAgIGJ5IGBhcnJheWAuIEZvciBleGFtcGxlIGB7bmFtZTpcIk1cIiwgcGhvbmU6XCIxXCJ9YCBwcmVkaWNhdGUgd2lsbCByZXR1cm4gYW4gYXJyYXkgb2YgaXRlbXNcbiAqICAgICB3aGljaCBoYXZlIHByb3BlcnR5IGBuYW1lYCBjb250YWluaW5nIFwiTVwiIGFuZCBwcm9wZXJ0eSBgcGhvbmVgIGNvbnRhaW5pbmcgXCIxXCIuIEEgc3BlY2lhbFxuICogICAgIHByb3BlcnR5IG5hbWUgYCRgIGNhbiBiZSB1c2VkIChhcyBpbiBgeyQ6XCJ0ZXh0XCJ9YCkgdG8gYWNjZXB0IGEgbWF0Y2ggYWdhaW5zdCBhbnlcbiAqICAgICBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0IG9yIGl0cyBuZXN0ZWQgb2JqZWN0IHByb3BlcnRpZXMuIFRoYXQncyBlcXVpdmFsZW50IHRvIHRoZSBzaW1wbGVcbiAqICAgICBzdWJzdHJpbmcgbWF0Y2ggd2l0aCBhIGBzdHJpbmdgIGFzIGRlc2NyaWJlZCBhYm92ZS4gVGhlIHByZWRpY2F0ZSBjYW4gYmUgbmVnYXRlZCBieSBwcmVmaXhpbmdcbiAqICAgICB0aGUgc3RyaW5nIHdpdGggYCFgLlxuICogICAgIEZvciBleGFtcGxlIGB7bmFtZTogXCIhTVwifWAgcHJlZGljYXRlIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIGl0ZW1zIHdoaWNoIGhhdmUgcHJvcGVydHkgYG5hbWVgXG4gKiAgICAgbm90IGNvbnRhaW5pbmcgXCJNXCIuXG4gKlxuICogICAgIE5vdGUgdGhhdCBhIG5hbWVkIHByb3BlcnR5IHdpbGwgbWF0Y2ggcHJvcGVydGllcyBvbiB0aGUgc2FtZSBsZXZlbCBvbmx5LCB3aGlsZSB0aGUgc3BlY2lhbFxuICogICAgIGAkYCBwcm9wZXJ0eSB3aWxsIG1hdGNoIHByb3BlcnRpZXMgb24gdGhlIHNhbWUgbGV2ZWwgb3IgZGVlcGVyLiBFLmcuIGFuIGFycmF5IGl0ZW0gbGlrZVxuICogICAgIGB7bmFtZToge2ZpcnN0OiAnSm9obicsIGxhc3Q6ICdEb2UnfX1gIHdpbGwgKipub3QqKiBiZSBtYXRjaGVkIGJ5IGB7bmFtZTogJ0pvaG4nfWAsIGJ1dFxuICogICAgICoqd2lsbCoqIGJlIG1hdGNoZWQgYnkgYHskOiAnSm9obid9YC5cbiAqXG4gKiAgIC0gYGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgYXJyYXkpYDogQSBwcmVkaWNhdGUgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gd3JpdGUgYXJiaXRyYXJ5IGZpbHRlcnMuXG4gKiAgICAgVGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaCBlbGVtZW50IG9mIHRoZSBhcnJheSwgd2l0aCB0aGUgZWxlbWVudCwgaXRzIGluZGV4LCBhbmRcbiAqICAgICB0aGUgZW50aXJlIGFycmF5IGl0c2VsZiBhcyBhcmd1bWVudHMuXG4gKlxuICogICAgIFRoZSBmaW5hbCByZXN1bHQgaXMgYW4gYXJyYXkgb2YgdGhvc2UgZWxlbWVudHMgdGhhdCB0aGUgcHJlZGljYXRlIHJldHVybmVkIHRydWUgZm9yLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCl8dHJ1ZXx1bmRlZmluZWR9IGNvbXBhcmF0b3IgQ29tcGFyYXRvciB3aGljaCBpcyB1c2VkIGluXG4gKiAgICAgZGV0ZXJtaW5pbmcgaWYgdGhlIGV4cGVjdGVkIHZhbHVlIChmcm9tIHRoZSBmaWx0ZXIgZXhwcmVzc2lvbikgYW5kIGFjdHVhbCB2YWx1ZSAoZnJvbVxuICogICAgIHRoZSBvYmplY3QgaW4gdGhlIGFycmF5KSBzaG91bGQgYmUgY29uc2lkZXJlZCBhIG1hdGNoLlxuICpcbiAqICAgQ2FuIGJlIG9uZSBvZjpcbiAqXG4gKiAgIC0gYGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpYDpcbiAqICAgICBUaGUgZnVuY3Rpb24gd2lsbCBiZSBnaXZlbiB0aGUgb2JqZWN0IHZhbHVlIGFuZCB0aGUgcHJlZGljYXRlIHZhbHVlIHRvIGNvbXBhcmUgYW5kXG4gKiAgICAgc2hvdWxkIHJldHVybiB0cnVlIGlmIGJvdGggdmFsdWVzIHNob3VsZCBiZSBjb25zaWRlcmVkIGVxdWFsLlxuICpcbiAqICAgLSBgdHJ1ZWA6IEEgc2hvcnRoYW5kIGZvciBgZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCkgeyByZXR1cm4gYW5ndWxhci5lcXVhbHMoYWN0dWFsLCBleHBlY3RlZCl9YC5cbiAqICAgICBUaGlzIGlzIGVzc2VudGlhbGx5IHN0cmljdCBjb21wYXJpc29uIG9mIGV4cGVjdGVkIGFuZCBhY3R1YWwuXG4gKlxuICogICAtIGBmYWxzZXx1bmRlZmluZWRgOiBBIHNob3J0IGhhbmQgZm9yIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCBsb29rIGZvciBhIHN1YnN0cmluZyBtYXRjaCBpbiBjYXNlXG4gKiAgICAgaW5zZW5zaXRpdmUgd2F5LlxuICpcbiAqICAgICBQcmltaXRpdmUgdmFsdWVzIGFyZSBjb252ZXJ0ZWQgdG8gc3RyaW5ncy4gT2JqZWN0cyBhcmUgbm90IGNvbXBhcmVkIGFnYWluc3QgcHJpbWl0aXZlcyxcbiAqICAgICB1bmxlc3MgdGhleSBoYXZlIGEgY3VzdG9tIGB0b1N0cmluZ2AgbWV0aG9kIChlLmcuIGBEYXRlYCBvYmplY3RzKS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1pbml0PVwiZnJpZW5kcyA9IFt7bmFtZTonSm9obicsIHBob25lOic1NTUtMTI3Nid9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonTWFyeScsIHBob25lOic4MDAtQklHLU1BUlknfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J01pa2UnLCBwaG9uZTonNTU1LTQzMjEnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0FkYW0nLCBwaG9uZTonNTU1LTU2NzgnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0p1bGllJywgcGhvbmU6JzU1NS04NzY1J30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZXR0ZScsIHBob25lOic1NTUtNTY3OCd9XVwiPjwvZGl2PlxuXG4gICAgICAgPGxhYmVsPlNlYXJjaDogPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoVGV4dFwiPjwvbGFiZWw+XG4gICAgICAgPHRhYmxlIGlkPVwic2VhcmNoVGV4dFJlc3VsdHNcIj5cbiAgICAgICAgIDx0cj48dGg+TmFtZTwvdGg+PHRoPlBob25lPC90aD48L3RyPlxuICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgZmlsdGVyOnNlYXJjaFRleHRcIj5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgIDwvdHI+XG4gICAgICAgPC90YWJsZT5cbiAgICAgICA8aHI+XG4gICAgICAgPGxhYmVsPkFueTogPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoLiRcIj48L2xhYmVsPiA8YnI+XG4gICAgICAgPGxhYmVsPk5hbWUgb25seSA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2gubmFtZVwiPjwvbGFiZWw+PGJyPlxuICAgICAgIDxsYWJlbD5QaG9uZSBvbmx5IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaC5waG9uZVwiPjwvbGFiZWw+PGJyPlxuICAgICAgIDxsYWJlbD5FcXVhbGl0eSA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJzdHJpY3RcIj48L2xhYmVsPjxicj5cbiAgICAgICA8dGFibGUgaWQ9XCJzZWFyY2hPYmpSZXN1bHRzXCI+XG4gICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PC90cj5cbiAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmRPYmogaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2g6c3RyaWN0XCI+XG4gICAgICAgICAgIDx0ZD57e2ZyaWVuZE9iai5uYW1lfX08L3RkPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmRPYmoucGhvbmV9fTwvdGQ+XG4gICAgICAgICA8L3RyPlxuICAgICAgIDwvdGFibGU+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBleHBlY3RGcmllbmROYW1lcyA9IGZ1bmN0aW9uKGV4cGVjdGVkTmFtZXMsIGtleSkge1xuICAgICAgICAgZWxlbWVudC5hbGwoYnkucmVwZWF0ZXIoa2V5ICsgJyBpbiBmcmllbmRzJykuY29sdW1uKGtleSArICcubmFtZScpKS50aGVuKGZ1bmN0aW9uKGFycikge1xuICAgICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbih3ZCwgaSkge1xuICAgICAgICAgICAgIGV4cGVjdCh3ZC5nZXRUZXh0KCkpLnRvTWF0Y2goZXhwZWN0ZWROYW1lc1tpXSk7XG4gICAgICAgICAgIH0pO1xuICAgICAgICAgfSk7XG4gICAgICAgfTtcblxuICAgICAgIGl0KCdzaG91bGQgc2VhcmNoIGFjcm9zcyBhbGwgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBzdHJpbmcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzZWFyY2hUZXh0ID0gZWxlbWVudChieS5tb2RlbCgnc2VhcmNoVGV4dCcpKTtcbiAgICAgICAgIHNlYXJjaFRleHQuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaFRleHQuc2VuZEtleXMoJ20nKTtcbiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnTWFyeScsICdNaWtlJywgJ0FkYW0nXSwgJ2ZyaWVuZCcpO1xuXG4gICAgICAgICBzZWFyY2hUZXh0LmNsZWFyKCk7XG4gICAgICAgICBzZWFyY2hUZXh0LnNlbmRLZXlzKCc3NicpO1xuICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydKb2huJywgJ0p1bGllJ10sICdmcmllbmQnKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgc2VhcmNoIGluIHNwZWNpZmljIGZpZWxkcyB3aGVuIGZpbHRlcmluZyB3aXRoIGEgcHJlZGljYXRlIG9iamVjdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNlYXJjaEFueSA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaC4kJykpO1xuICAgICAgICAgc2VhcmNoQW55LmNsZWFyKCk7XG4gICAgICAgICBzZWFyY2hBbnkuc2VuZEtleXMoJ2knKTtcbiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnTWFyeScsICdNaWtlJywgJ0p1bGllJywgJ0p1bGlldHRlJ10sICdmcmllbmRPYmonKTtcbiAgICAgICB9KTtcbiAgICAgICBpdCgnc2hvdWxkIHVzZSBhIGVxdWFsIGNvbXBhcmlzb24gd2hlbiBjb21wYXJhdG9yIGlzIHRydWUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzZWFyY2hOYW1lID0gZWxlbWVudChieS5tb2RlbCgnc2VhcmNoLm5hbWUnKSk7XG4gICAgICAgICB2YXIgc3RyaWN0ID0gZWxlbWVudChieS5tb2RlbCgnc3RyaWN0JykpO1xuICAgICAgICAgc2VhcmNoTmFtZS5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoTmFtZS5zZW5kS2V5cygnSnVsaWUnKTtcbiAgICAgICAgIHN0cmljdC5jbGljaygpO1xuICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydKdWxpZSddLCAnZnJpZW5kT2JqJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gZmlsdGVyRmlsdGVyKCkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGV4cHJlc3Npb24sIGNvbXBhcmF0b3IpIHtcbiAgICBpZiAoIWlzQXJyYXlMaWtlKGFycmF5KSkge1xuICAgICAgaWYgKGFycmF5ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbWluRXJyKCdmaWx0ZXInKSgnbm90YXJyYXknLCAnRXhwZWN0ZWQgYXJyYXkgYnV0IHJlY2VpdmVkOiB7MH0nLCBhcnJheSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGV4cHJlc3Npb25UeXBlID0gZ2V0VHlwZUZvckZpbHRlcihleHByZXNzaW9uKTtcbiAgICB2YXIgcHJlZGljYXRlRm47XG4gICAgdmFyIG1hdGNoQWdhaW5zdEFueVByb3A7XG5cbiAgICBzd2l0Y2ggKGV4cHJlc3Npb25UeXBlKSB7XG4gICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgIHByZWRpY2F0ZUZuID0gZXhwcmVzc2lvbjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIGNhc2UgJ251bGwnOlxuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIG1hdGNoQWdhaW5zdEFueVByb3AgPSB0cnVlO1xuICAgICAgICAvL2pzaGludCAtVzA4NlxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgLy9qc2hpbnQgK1cwODZcbiAgICAgICAgcHJlZGljYXRlRm4gPSBjcmVhdGVQcmVkaWNhdGVGbihleHByZXNzaW9uLCBjb21wYXJhdG9yLCBtYXRjaEFnYWluc3RBbnlQcm9wKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChhcnJheSwgcHJlZGljYXRlRm4pO1xuICB9O1xufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb25zIGZvciBgZmlsdGVyRmlsdGVyYFxuZnVuY3Rpb24gY3JlYXRlUHJlZGljYXRlRm4oZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgbWF0Y2hBZ2FpbnN0QW55UHJvcCkge1xuICB2YXIgc2hvdWxkTWF0Y2hQcmltaXRpdmVzID0gaXNPYmplY3QoZXhwcmVzc2lvbikgJiYgKCckJyBpbiBleHByZXNzaW9uKTtcbiAgdmFyIHByZWRpY2F0ZUZuO1xuXG4gIGlmIChjb21wYXJhdG9yID09PSB0cnVlKSB7XG4gICAgY29tcGFyYXRvciA9IGVxdWFscztcbiAgfSBlbHNlIGlmICghaXNGdW5jdGlvbihjb21wYXJhdG9yKSkge1xuICAgIGNvbXBhcmF0b3IgPSBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQoYWN0dWFsKSkge1xuICAgICAgICAvLyBObyBzdWJzdHJpbmcgbWF0Y2hpbmcgYWdhaW5zdCBgdW5kZWZpbmVkYFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoKGFjdHVhbCA9PT0gbnVsbCkgfHwgKGV4cGVjdGVkID09PSBudWxsKSkge1xuICAgICAgICAvLyBObyBzdWJzdHJpbmcgbWF0Y2hpbmcgYWdhaW5zdCBgbnVsbGA7IG9ubHkgbWF0Y2ggYWdhaW5zdCBgbnVsbGBcbiAgICAgICAgcmV0dXJuIGFjdHVhbCA9PT0gZXhwZWN0ZWQ7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QoZXhwZWN0ZWQpIHx8IChpc09iamVjdChhY3R1YWwpICYmICFoYXNDdXN0b21Ub1N0cmluZyhhY3R1YWwpKSkge1xuICAgICAgICAvLyBTaG91bGQgbm90IGNvbXBhcmUgcHJpbWl0aXZlcyBhZ2FpbnN0IG9iamVjdHMsIHVubGVzcyB0aGV5IGhhdmUgY3VzdG9tIGB0b1N0cmluZ2AgbWV0aG9kXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgYWN0dWFsID0gbG93ZXJjYXNlKCcnICsgYWN0dWFsKTtcbiAgICAgIGV4cGVjdGVkID0gbG93ZXJjYXNlKCcnICsgZXhwZWN0ZWQpO1xuICAgICAgcmV0dXJuIGFjdHVhbC5pbmRleE9mKGV4cGVjdGVkKSAhPT0gLTE7XG4gICAgfTtcbiAgfVxuXG4gIHByZWRpY2F0ZUZuID0gZnVuY3Rpb24oaXRlbSkge1xuICAgIGlmIChzaG91bGRNYXRjaFByaW1pdGl2ZXMgJiYgIWlzT2JqZWN0KGl0ZW0pKSB7XG4gICAgICByZXR1cm4gZGVlcENvbXBhcmUoaXRlbSwgZXhwcmVzc2lvbi4kLCBjb21wYXJhdG9yLCBmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybiBkZWVwQ29tcGFyZShpdGVtLCBleHByZXNzaW9uLCBjb21wYXJhdG9yLCBtYXRjaEFnYWluc3RBbnlQcm9wKTtcbiAgfTtcblxuICByZXR1cm4gcHJlZGljYXRlRm47XG59XG5cbmZ1bmN0aW9uIGRlZXBDb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIG1hdGNoQWdhaW5zdEFueVByb3AsIGRvbnRNYXRjaFdob2xlT2JqZWN0KSB7XG4gIHZhciBhY3R1YWxUeXBlID0gZ2V0VHlwZUZvckZpbHRlcihhY3R1YWwpO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZUZvckZpbHRlcihleHBlY3RlZCk7XG5cbiAgaWYgKChleHBlY3RlZFR5cGUgPT09ICdzdHJpbmcnKSAmJiAoZXhwZWN0ZWQuY2hhckF0KDApID09PSAnIScpKSB7XG4gICAgcmV0dXJuICFkZWVwQ29tcGFyZShhY3R1YWwsIGV4cGVjdGVkLnN1YnN0cmluZygxKSwgY29tcGFyYXRvciwgbWF0Y2hBZ2FpbnN0QW55UHJvcCk7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShhY3R1YWwpKSB7XG4gICAgLy8gSW4gY2FzZSBgYWN0dWFsYCBpcyBhbiBhcnJheSwgY29uc2lkZXIgaXQgYSBtYXRjaFxuICAgIC8vIGlmIEFOWSBvZiBpdCdzIGl0ZW1zIG1hdGNoZXMgYGV4cGVjdGVkYFxuICAgIHJldHVybiBhY3R1YWwuc29tZShmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gZGVlcENvbXBhcmUoaXRlbSwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgIH0pO1xuICB9XG5cbiAgc3dpdGNoIChhY3R1YWxUeXBlKSB7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHZhciBrZXk7XG4gICAgICBpZiAobWF0Y2hBZ2FpbnN0QW55UHJvcCkge1xuICAgICAgICBmb3IgKGtleSBpbiBhY3R1YWwpIHtcbiAgICAgICAgICBpZiAoKGtleS5jaGFyQXQoMCkgIT09ICckJykgJiYgZGVlcENvbXBhcmUoYWN0dWFsW2tleV0sIGV4cGVjdGVkLCBjb21wYXJhdG9yLCB0cnVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb250TWF0Y2hXaG9sZU9iamVjdCA/IGZhbHNlIDogZGVlcENvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCwgY29tcGFyYXRvciwgZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAoa2V5IGluIGV4cGVjdGVkKSB7XG4gICAgICAgICAgdmFyIGV4cGVjdGVkVmFsID0gZXhwZWN0ZWRba2V5XTtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihleHBlY3RlZFZhbCkgfHwgaXNVbmRlZmluZWQoZXhwZWN0ZWRWYWwpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbWF0Y2hBbnlQcm9wZXJ0eSA9IGtleSA9PT0gJyQnO1xuICAgICAgICAgIHZhciBhY3R1YWxWYWwgPSBtYXRjaEFueVByb3BlcnR5ID8gYWN0dWFsIDogYWN0dWFsW2tleV07XG4gICAgICAgICAgaWYgKCFkZWVwQ29tcGFyZShhY3R1YWxWYWwsIGV4cGVjdGVkVmFsLCBjb21wYXJhdG9yLCBtYXRjaEFueVByb3BlcnR5LCBtYXRjaEFueVByb3BlcnR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb21wYXJhdG9yKGFjdHVhbCwgZXhwZWN0ZWQpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gY29tcGFyYXRvcihhY3R1YWwsIGV4cGVjdGVkKTtcbiAgfVxufVxuXG4vLyBVc2VkIGZvciBlYXNpbHkgZGlmZmVyZW50aWF0aW5nIGJldHdlZW4gYG51bGxgIGFuZCBhY3R1YWwgYG9iamVjdGBcbmZ1bmN0aW9uIGdldFR5cGVGb3JGaWx0ZXIodmFsKSB7XG4gIHJldHVybiAodmFsID09PSBudWxsKSA/ICdudWxsJyA6IHR5cGVvZiB2YWw7XG59XG5cbnZhciBNQVhfRElHSVRTID0gMjI7XG52YXIgREVDSU1BTF9TRVAgPSAnLic7XG52YXIgWkVST19DSEFSID0gJzAnO1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGN1cnJlbmN5XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IChpZSAkMSwyMzQuNTYpLiBXaGVuIG5vIGN1cnJlbmN5IHN5bWJvbCBpcyBwcm92aWRlZCwgZGVmYXVsdFxuICogc3ltYm9sIGZvciBjdXJyZW50IGxvY2FsZSBpcyB1c2VkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLlxuICogQHBhcmFtIHtzdHJpbmc9fSBzeW1ib2wgQ3VycmVuY3kgc3ltYm9sIG9yIGlkZW50aWZpZXIgdG8gYmUgZGlzcGxheWVkLlxuICogQHBhcmFtIHtudW1iZXI9fSBmcmFjdGlvblNpemUgTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBhbW91bnQgdG8sIGRlZmF1bHRzIHRvIGRlZmF1bHQgbWF4IGZyYWN0aW9uIHNpemUgZm9yIGN1cnJlbnQgbG9jYWxlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgbnVtYmVyLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiY3VycmVuY3lFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjdXJyZW5jeUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuYW1vdW50ID0gMTIzNC41NjtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwiYW1vdW50XCIgYXJpYS1sYWJlbD1cImFtb3VudFwiPiA8YnI+XG4gICAgICAgICBkZWZhdWx0IGN1cnJlbmN5IHN5bWJvbCAoJCk6IDxzcGFuIGlkPVwiY3VycmVuY3ktZGVmYXVsdFwiPnt7YW1vdW50IHwgY3VycmVuY3l9fTwvc3Bhbj48YnI+XG4gICAgICAgICBjdXN0b20gY3VycmVuY3kgaWRlbnRpZmllciAoVVNEJCk6IDxzcGFuIGlkPVwiY3VycmVuY3ktY3VzdG9tXCI+e3thbW91bnQgfCBjdXJyZW5jeTpcIlVTRCRcIn19PC9zcGFuPlxuICAgICAgICAgbm8gZnJhY3Rpb25zICgwKTogPHNwYW4gaWQ9XCJjdXJyZW5jeS1uby1mcmFjdGlvbnNcIj57e2Ftb3VudCB8IGN1cnJlbmN5OlwiVVNEJFwiOjB9fTwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBpbml0IHdpdGggMTIzNC41NicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWRlZmF1bHQnKSkuZ2V0VGV4dCgpKS50b0JlKCckMSwyMzQuNTYnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1jdXN0b20nKSkuZ2V0VGV4dCgpKS50b0JlKCdVU0QkMSwyMzQuNTYnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1uby1mcmFjdGlvbnMnKSkuZ2V0VGV4dCgpKS50b0JlKCdVU0QkMSwyMzUnKTtcbiAgICAgICB9KTtcbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ3NhZmFyaScpIHtcbiAgICAgICAgICAgLy8gU2FmYXJpIGRvZXMgbm90IHVuZGVyc3RhbmQgdGhlIG1pbnVzIGtleS4gU2VlXG4gICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzQ4MVxuICAgICAgICAgICByZXR1cm47XG4gICAgICAgICB9XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdhbW91bnQnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Ftb3VudCcpKS5zZW5kS2V5cygnLTEyMzQnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnLSQxLDIzNC4wMCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWN1c3RvbScpKS5nZXRUZXh0KCkpLnRvQmUoJy1VU0QkMSwyMzQuMDAnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1uby1mcmFjdGlvbnMnKSkuZ2V0VGV4dCgpKS50b0JlKCctVVNEJDEsMjM0Jyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuY3VycmVuY3lGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuZnVuY3Rpb24gY3VycmVuY3lGaWx0ZXIoJGxvY2FsZSkge1xuICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7XG4gIHJldHVybiBmdW5jdGlvbihhbW91bnQsIGN1cnJlbmN5U3ltYm9sLCBmcmFjdGlvblNpemUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQoY3VycmVuY3lTeW1ib2wpKSB7XG4gICAgICBjdXJyZW5jeVN5bWJvbCA9IGZvcm1hdHMuQ1VSUkVOQ1lfU1lNO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSB7XG4gICAgICBmcmFjdGlvblNpemUgPSBmb3JtYXRzLlBBVFRFUk5TWzFdLm1heEZyYWM7XG4gICAgfVxuXG4gICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoXG4gICAgcmV0dXJuIChhbW91bnQgPT0gbnVsbClcbiAgICAgICAgPyBhbW91bnRcbiAgICAgICAgOiBmb3JtYXROdW1iZXIoYW1vdW50LCBmb3JtYXRzLlBBVFRFUk5TWzFdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwgZnJhY3Rpb25TaXplKS5cbiAgICAgICAgICAgIHJlcGxhY2UoL1xcdTAwQTQvZywgY3VycmVuY3lTeW1ib2wpO1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG51bWJlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZvcm1hdHMgYSBudW1iZXIgYXMgdGV4dC5cbiAqXG4gKiBJZiB0aGUgaW5wdXQgaXMgbnVsbCBvciB1bmRlZmluZWQsIGl0IHdpbGwganVzdCBiZSByZXR1cm5lZC5cbiAqIElmIHRoZSBpbnB1dCBpcyBpbmZpbml0ZSAoSW5maW5pdHkvLUluZmluaXR5KSB0aGUgSW5maW5pdHkgc3ltYm9sICfiiJ4nIGlzIHJldHVybmVkLlxuICogSWYgdGhlIGlucHV0IGlzIG5vdCBhIG51bWJlciBhbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQuXG4gKlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gbnVtYmVyIE51bWJlciB0byBmb3JtYXQuXG4gKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKT19IGZyYWN0aW9uU2l6ZSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdGhlIG51bWJlciB0by5cbiAqIElmIHRoaXMgaXMgbm90IHByb3ZpZGVkIHRoZW4gdGhlIGZyYWN0aW9uIHNpemUgaXMgY29tcHV0ZWQgZnJvbSB0aGUgY3VycmVudCBsb2NhbGUncyBudW1iZXJcbiAqIGZvcm1hdHRpbmcgcGF0dGVybi4gSW4gdGhlIGNhc2Ugb2YgdGhlIGRlZmF1bHQgbG9jYWxlLCBpdCB3aWxsIGJlIDMuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBOdW1iZXIgcm91bmRlZCB0byBmcmFjdGlvblNpemUgYW5kIHBsYWNlcyBhIOKAnCzigJ0gYWZ0ZXIgZWFjaCB0aGlyZCBkaWdpdC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwibnVtYmVyRmlsdGVyRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbnVtYmVyRmlsdGVyRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS52YWwgPSAxMjM0LjU2Nzg5O1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxsYWJlbD5FbnRlciBudW1iZXI6IDxpbnB1dCBuZy1tb2RlbD0ndmFsJz48L2xhYmVsPjxicj5cbiAgICAgICAgIERlZmF1bHQgZm9ybWF0dGluZzogPHNwYW4gaWQ9J251bWJlci1kZWZhdWx0Jz57e3ZhbCB8IG51bWJlcn19PC9zcGFuPjxicj5cbiAgICAgICAgIE5vIGZyYWN0aW9uczogPHNwYW4+e3t2YWwgfCBudW1iZXI6MH19PC9zcGFuPjxicj5cbiAgICAgICAgIE5lZ2F0aXZlIG51bWJlcjogPHNwYW4+e3stdmFsIHwgbnVtYmVyOjR9fTwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBmb3JtYXQgbnVtYmVycycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ251bWJlci1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnMSwyMzQuNTY4Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd2YWwgfCBudW1iZXI6MCcpKS5nZXRUZXh0KCkpLnRvQmUoJzEsMjM1Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCctdmFsIHwgbnVtYmVyOjQnKSkuZ2V0VGV4dCgpKS50b0JlKCctMSwyMzQuNTY3OScpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbCcpKS5jbGVhcigpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsJykpLnNlbmRLZXlzKCczMzc0LjMzMycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ251bWJlci1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnMywzNzQuMzMzJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd2YWwgfCBudW1iZXI6MCcpKS5nZXRUZXh0KCkpLnRvQmUoJzMsMzc0Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCctdmFsIHwgbnVtYmVyOjQnKSkuZ2V0VGV4dCgpKS50b0JlKCctMywzNzQuMzMzMCcpO1xuICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xubnVtYmVyRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcbmZ1bmN0aW9uIG51bWJlckZpbHRlcigkbG9jYWxlKSB7XG4gIHZhciBmb3JtYXRzID0gJGxvY2FsZS5OVU1CRVJfRk9STUFUUztcbiAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgZnJhY3Rpb25TaXplKSB7XG5cbiAgICAvLyBpZiBudWxsIG9yIHVuZGVmaW5lZCBwYXNzIGl0IHRocm91Z2hcbiAgICByZXR1cm4gKG51bWJlciA9PSBudWxsKVxuICAgICAgICA/IG51bWJlclxuICAgICAgICA6IGZvcm1hdE51bWJlcihudW1iZXIsIGZvcm1hdHMuUEFUVEVSTlNbMF0sIGZvcm1hdHMuR1JPVVBfU0VQLCBmb3JtYXRzLkRFQ0lNQUxfU0VQLFxuICAgICAgICAgICAgICAgICAgICAgICBmcmFjdGlvblNpemUpO1xuICB9O1xufVxuXG4vKipcbiAqIFBhcnNlIGEgbnVtYmVyIChhcyBhIHN0cmluZykgaW50byB0aHJlZSBjb21wb25lbnRzIHRoYXQgY2FuIGJlIHVzZWRcbiAqIGZvciBmb3JtYXR0aW5nIHRoZSBudW1iZXIuXG4gKlxuICogKFNpZ25pZmljYW50IGJpdHMgb2YgdGhpcyBwYXJzZSBhbGdvcml0aG0gY2FtZSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWtlTWNsL2JpZy5qcy8pXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBudW1TdHIgVGhlIG51bWJlciB0byBwYXJzZVxuICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3QgZGVzY3JpYmluZyB0aGlzIG51bWJlciwgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIGtleXM6XG4gKiAgLSBkIDogYW4gYXJyYXkgb2YgZGlnaXRzIGNvbnRhaW5pbmcgbGVhZGluZyB6ZXJvcyBhcyBuZWNlc3NhcnlcbiAqICAtIGkgOiB0aGUgbnVtYmVyIG9mIHRoZSBkaWdpdHMgaW4gYGRgIHRoYXQgYXJlIHRvIHRoZSBsZWZ0IG9mIHRoZSBkZWNpbWFsIHBvaW50XG4gKiAgLSBlIDogdGhlIGV4cG9uZW50IGZvciBudW1iZXJzIHRoYXQgd291bGQgbmVlZCBtb3JlIHRoYW4gYE1BWF9ESUdJVFNgIGRpZ2l0cyBpbiBgZGBcbiAqXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKG51bVN0cikge1xuICB2YXIgZXhwb25lbnQgPSAwLCBkaWdpdHMsIG51bWJlck9mSW50ZWdlckRpZ2l0cztcbiAgdmFyIGksIGosIHplcm9zO1xuXG4gIC8vIERlY2ltYWwgcG9pbnQ/XG4gIGlmICgobnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gbnVtU3RyLmluZGV4T2YoREVDSU1BTF9TRVApKSA+IC0xKSB7XG4gICAgbnVtU3RyID0gbnVtU3RyLnJlcGxhY2UoREVDSU1BTF9TRVAsICcnKTtcbiAgfVxuXG4gIC8vIEV4cG9uZW50aWFsIGZvcm0/XG4gIGlmICgoaSA9IG51bVN0ci5zZWFyY2goL2UvaSkpID4gMCkge1xuICAgIC8vIFdvcmsgb3V0IHRoZSBleHBvbmVudC5cbiAgICBpZiAobnVtYmVyT2ZJbnRlZ2VyRGlnaXRzIDwgMCkgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gaTtcbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgKz0gK251bVN0ci5zbGljZShpICsgMSk7XG4gICAgbnVtU3RyID0gbnVtU3RyLnN1YnN0cmluZygwLCBpKTtcbiAgfSBlbHNlIGlmIChudW1iZXJPZkludGVnZXJEaWdpdHMgPCAwKSB7XG4gICAgLy8gVGhlcmUgd2FzIG5vIGRlY2ltYWwgcG9pbnQgb3IgZXhwb25lbnQgc28gaXQgaXMgYW4gaW50ZWdlci5cbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgPSBudW1TdHIubGVuZ3RoO1xuICB9XG5cbiAgLy8gQ291bnQgdGhlIG51bWJlciBvZiBsZWFkaW5nIHplcm9zLlxuICBmb3IgKGkgPSAwOyBudW1TdHIuY2hhckF0KGkpID09IFpFUk9fQ0hBUjsgaSsrKTtcblxuICBpZiAoaSA9PSAoemVyb3MgPSBudW1TdHIubGVuZ3RoKSkge1xuICAgIC8vIFRoZSBkaWdpdHMgYXJlIGFsbCB6ZXJvLlxuICAgIGRpZ2l0cyA9IFswXTtcbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgPSAxO1xuICB9IGVsc2Uge1xuICAgIC8vIENvdW50IHRoZSBudW1iZXIgb2YgdHJhaWxpbmcgemVyb3NcbiAgICB6ZXJvcy0tO1xuICAgIHdoaWxlIChudW1TdHIuY2hhckF0KHplcm9zKSA9PSBaRVJPX0NIQVIpIHplcm9zLS07XG5cbiAgICAvLyBUcmFpbGluZyB6ZXJvcyBhcmUgaW5zaWduaWZpY2FudCBzbyBpZ25vcmUgdGhlbVxuICAgIG51bWJlck9mSW50ZWdlckRpZ2l0cyAtPSBpO1xuICAgIGRpZ2l0cyA9IFtdO1xuICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIGFycmF5IG9mIGRpZ2l0cyB3aXRob3V0IGxlYWRpbmcvdHJhaWxpbmcgemVyb3MuXG4gICAgZm9yIChqID0gMDsgaSA8PSB6ZXJvczsgaSsrLCBqKyspIHtcbiAgICAgIGRpZ2l0c1tqXSA9ICtudW1TdHIuY2hhckF0KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIHRoZSBudW1iZXIgb3ZlcmZsb3dzIHRoZSBtYXhpbXVtIGFsbG93ZWQgZGlnaXRzIHRoZW4gdXNlIGFuIGV4cG9uZW50LlxuICBpZiAobnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID4gTUFYX0RJR0lUUykge1xuICAgIGRpZ2l0cyA9IGRpZ2l0cy5zcGxpY2UoMCwgTUFYX0RJR0lUUyAtIDEpO1xuICAgIGV4cG9uZW50ID0gbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzIC0gMTtcbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgPSAxO1xuICB9XG5cbiAgcmV0dXJuIHsgZDogZGlnaXRzLCBlOiBleHBvbmVudCwgaTogbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzIH07XG59XG5cbi8qKlxuICogUm91bmQgdGhlIHBhcnNlZCBudW1iZXIgdG8gdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXNcbiAqIFRoaXMgZnVuY3Rpb24gY2hhbmdlZCB0aGUgcGFyc2VkTnVtYmVyIGluLXBsYWNlXG4gKi9cbmZ1bmN0aW9uIHJvdW5kTnVtYmVyKHBhcnNlZE51bWJlciwgZnJhY3Rpb25TaXplLCBtaW5GcmFjLCBtYXhGcmFjKSB7XG4gICAgdmFyIGRpZ2l0cyA9IHBhcnNlZE51bWJlci5kO1xuICAgIHZhciBmcmFjdGlvbkxlbiA9IGRpZ2l0cy5sZW5ndGggLSBwYXJzZWROdW1iZXIuaTtcblxuICAgIC8vIGRldGVybWluZSBmcmFjdGlvblNpemUgaWYgaXQgaXMgbm90IHNwZWNpZmllZDsgYCtmcmFjdGlvblNpemVgIGNvbnZlcnRzIGl0IHRvIGEgbnVtYmVyXG4gICAgZnJhY3Rpb25TaXplID0gKGlzVW5kZWZpbmVkKGZyYWN0aW9uU2l6ZSkpID8gTWF0aC5taW4oTWF0aC5tYXgobWluRnJhYywgZnJhY3Rpb25MZW4pLCBtYXhGcmFjKSA6ICtmcmFjdGlvblNpemU7XG5cbiAgICAvLyBUaGUgaW5kZXggb2YgdGhlIGRpZ2l0IHRvIHdoZXJlIHJvdW5kaW5nIGlzIHRvIG9jY3VyXG4gICAgdmFyIHJvdW5kQXQgPSBmcmFjdGlvblNpemUgKyBwYXJzZWROdW1iZXIuaTtcbiAgICB2YXIgZGlnaXQgPSBkaWdpdHNbcm91bmRBdF07XG5cbiAgICBpZiAocm91bmRBdCA+IDApIHtcbiAgICAgIGRpZ2l0cy5zcGxpY2Uocm91bmRBdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHJvdW5kZWQgdG8gemVybyBzbyByZXNldCB0aGUgcGFyc2VkTnVtYmVyXG4gICAgICBwYXJzZWROdW1iZXIuaSA9IDE7XG4gICAgICBkaWdpdHMubGVuZ3RoID0gcm91bmRBdCA9IGZyYWN0aW9uU2l6ZSArIDE7XG4gICAgICBmb3IgKHZhciBpPTA7IGkgPCByb3VuZEF0OyBpKyspIGRpZ2l0c1tpXSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGRpZ2l0ID49IDUpIGRpZ2l0c1tyb3VuZEF0IC0gMV0rKztcblxuICAgIC8vIFBhZCBvdXQgd2l0aCB6ZXJvcyB0byBnZXQgdGhlIHJlcXVpcmVkIGZyYWN0aW9uIGxlbmd0aFxuICAgIGZvciAoOyBmcmFjdGlvbkxlbiA8IGZyYWN0aW9uU2l6ZTsgZnJhY3Rpb25MZW4rKykgZGlnaXRzLnB1c2goMCk7XG5cblxuICAgIC8vIERvIGFueSBjYXJyeWluZywgZS5nLiBhIGRpZ2l0IHdhcyByb3VuZGVkIHVwIHRvIDEwXG4gICAgdmFyIGNhcnJ5ID0gZGlnaXRzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKGNhcnJ5LCBkLCBpLCBkaWdpdHMpIHtcbiAgICAgIGQgPSBkICsgY2Fycnk7XG4gICAgICBkaWdpdHNbaV0gPSBkICUgMTA7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihkIC8gMTApO1xuICAgIH0sIDApO1xuICAgIGlmIChjYXJyeSkge1xuICAgICAgZGlnaXRzLnVuc2hpZnQoY2FycnkpO1xuICAgICAgcGFyc2VkTnVtYmVyLmkrKztcbiAgICB9XG59XG5cbi8qKlxuICogRm9ybWF0IGEgbnVtYmVyIGludG8gYSBzdHJpbmdcbiAqIEBwYXJhbSAge251bWJlcn0gbnVtYmVyICAgICAgIFRoZSBudW1iZXIgdG8gZm9ybWF0XG4gKiBAcGFyYW0gIHt7XG4gKiAgICAgICAgICAgbWluRnJhYywgLy8gdGhlIG1pbmltdW0gbnVtYmVyIG9mIGRpZ2l0cyByZXF1aXJlZCBpbiB0aGUgZnJhY3Rpb24gcGFydCBvZiB0aGUgbnVtYmVyXG4gKiAgICAgICAgICAgbWF4RnJhYywgLy8gdGhlIG1heGltdW0gbnVtYmVyIG9mIGRpZ2l0cyByZXF1aXJlZCBpbiB0aGUgZnJhY3Rpb24gcGFydCBvZiB0aGUgbnVtYmVyXG4gKiAgICAgICAgICAgZ1NpemUsICAgLy8gbnVtYmVyIG9mIGRpZ2l0cyBpbiBlYWNoIGdyb3VwIG9mIHNlcGFyYXRlZCBkaWdpdHNcbiAqICAgICAgICAgICBsZ1NpemUsICAvLyBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBsYXN0IGdyb3VwIG9mIGRpZ2l0cyBiZWZvcmUgdGhlIGRlY2ltYWwgc2VwYXJhdG9yXG4gKiAgICAgICAgICAgbmVnUHJlLCAgLy8gdGhlIHN0cmluZyB0byBnbyBpbiBmcm9udCBvZiBhIG5lZ2F0aXZlIG51bWJlciAoZS5nLiBgLWAgb3IgYChgKSlcbiAqICAgICAgICAgICBwb3NQcmUsICAvLyB0aGUgc3RyaW5nIHRvIGdvIGluIGZyb250IG9mIGEgcG9zaXRpdmUgbnVtYmVyXG4gKiAgICAgICAgICAgbmVnU3VmLCAgLy8gdGhlIHN0cmluZyB0byBnbyBhZnRlciBhIG5lZ2F0aXZlIG51bWJlciAoZS5nLiBgKWApXG4gKiAgICAgICAgICAgcG9zU3VmICAgLy8gdGhlIHN0cmluZyB0byBnbyBhZnRlciBhIHBvc2l0aXZlIG51bWJlclxuICogICAgICAgICB9fSBwYXR0ZXJuXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwU2VwICAgICBUaGUgc3RyaW5nIHRvIHNlcGFyYXRlIGdyb3VwcyBvZiBudW1iZXIgKGUuZy4gYCxgKVxuICogQHBhcmFtICB7c3RyaW5nfSBkZWNpbWFsU2VwICAgVGhlIHN0cmluZyB0byBhY3QgYXMgdGhlIGRlY2ltYWwgc2VwYXJhdG9yIChlLmcuIGAuYClcbiAqIEBwYXJhbSAge1t0eXBlXX0gZnJhY3Rpb25TaXplIFRoZSBzaXplIG9mIHRoZSBmcmFjdGlvbmFsIHBhcnQgb2YgdGhlIG51bWJlclxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAgVGhlIG51bWJlciBmb3JtYXR0ZWQgYXMgYSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bWJlciwgcGF0dGVybiwgZ3JvdXBTZXAsIGRlY2ltYWxTZXAsIGZyYWN0aW9uU2l6ZSkge1xuXG4gIGlmICghKGlzU3RyaW5nKG51bWJlcikgfHwgaXNOdW1iZXIobnVtYmVyKSkgfHwgaXNOYU4obnVtYmVyKSkgcmV0dXJuICcnO1xuXG4gIHZhciBpc0luZmluaXR5ID0gIWlzRmluaXRlKG51bWJlcik7XG4gIHZhciBpc1plcm8gPSBmYWxzZTtcbiAgdmFyIG51bVN0ciA9IE1hdGguYWJzKG51bWJlcikgKyAnJyxcbiAgICAgIGZvcm1hdHRlZFRleHQgPSAnJyxcbiAgICAgIHBhcnNlZE51bWJlcjtcblxuICBpZiAoaXNJbmZpbml0eSkge1xuICAgIGZvcm1hdHRlZFRleHQgPSAnXFx1MjIxZSc7XG4gIH0gZWxzZSB7XG4gICAgcGFyc2VkTnVtYmVyID0gcGFyc2UobnVtU3RyKTtcblxuICAgIHJvdW5kTnVtYmVyKHBhcnNlZE51bWJlciwgZnJhY3Rpb25TaXplLCBwYXR0ZXJuLm1pbkZyYWMsIHBhdHRlcm4ubWF4RnJhYyk7XG5cbiAgICB2YXIgZGlnaXRzID0gcGFyc2VkTnVtYmVyLmQ7XG4gICAgdmFyIGludGVnZXJMZW4gPSBwYXJzZWROdW1iZXIuaTtcbiAgICB2YXIgZXhwb25lbnQgPSBwYXJzZWROdW1iZXIuZTtcbiAgICB2YXIgZGVjaW1hbHMgPSBbXTtcbiAgICBpc1plcm8gPSBkaWdpdHMucmVkdWNlKGZ1bmN0aW9uKGlzWmVybywgZCkgeyByZXR1cm4gaXNaZXJvICYmICFkOyB9LCB0cnVlKTtcblxuICAgIC8vIHBhZCB6ZXJvcyBmb3Igc21hbGwgbnVtYmVyc1xuICAgIHdoaWxlIChpbnRlZ2VyTGVuIDwgMCkge1xuICAgICAgZGlnaXRzLnVuc2hpZnQoMCk7XG4gICAgICBpbnRlZ2VyTGVuKys7XG4gICAgfVxuXG4gICAgLy8gZXh0cmFjdCBkZWNpbWFscyBkaWdpdHNcbiAgICBpZiAoaW50ZWdlckxlbiA+IDApIHtcbiAgICAgIGRlY2ltYWxzID0gZGlnaXRzLnNwbGljZShpbnRlZ2VyTGVuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVjaW1hbHMgPSBkaWdpdHM7XG4gICAgICBkaWdpdHMgPSBbMF07XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IHRoZSBpbnRlZ2VyIGRpZ2l0cyB3aXRoIGdyb3VwaW5nIHNlcGFyYXRvcnNcbiAgICB2YXIgZ3JvdXBzID0gW107XG4gICAgaWYgKGRpZ2l0cy5sZW5ndGggPiBwYXR0ZXJuLmxnU2l6ZSkge1xuICAgICAgZ3JvdXBzLnVuc2hpZnQoZGlnaXRzLnNwbGljZSgtcGF0dGVybi5sZ1NpemUpLmpvaW4oJycpKTtcbiAgICB9XG4gICAgd2hpbGUgKGRpZ2l0cy5sZW5ndGggPiBwYXR0ZXJuLmdTaXplKSB7XG4gICAgICBncm91cHMudW5zaGlmdChkaWdpdHMuc3BsaWNlKC1wYXR0ZXJuLmdTaXplKS5qb2luKCcnKSk7XG4gICAgfVxuICAgIGlmIChkaWdpdHMubGVuZ3RoKSB7XG4gICAgICBncm91cHMudW5zaGlmdChkaWdpdHMuam9pbignJykpO1xuICAgIH1cbiAgICBmb3JtYXR0ZWRUZXh0ID0gZ3JvdXBzLmpvaW4oZ3JvdXBTZXApO1xuXG4gICAgLy8gYXBwZW5kIHRoZSBkZWNpbWFsIGRpZ2l0c1xuICAgIGlmIChkZWNpbWFscy5sZW5ndGgpIHtcbiAgICAgIGZvcm1hdHRlZFRleHQgKz0gZGVjaW1hbFNlcCArIGRlY2ltYWxzLmpvaW4oJycpO1xuICAgIH1cblxuICAgIGlmIChleHBvbmVudCkge1xuICAgICAgZm9ybWF0dGVkVGV4dCArPSAnZSsnICsgZXhwb25lbnQ7XG4gICAgfVxuICB9XG4gIGlmIChudW1iZXIgPCAwICYmICFpc1plcm8pIHtcbiAgICByZXR1cm4gcGF0dGVybi5uZWdQcmUgKyBmb3JtYXR0ZWRUZXh0ICsgcGF0dGVybi5uZWdTdWY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhdHRlcm4ucG9zUHJlICsgZm9ybWF0dGVkVGV4dCArIHBhdHRlcm4ucG9zU3VmO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhZE51bWJlcihudW0sIGRpZ2l0cywgdHJpbSkge1xuICB2YXIgbmVnID0gJyc7XG4gIGlmIChudW0gPCAwKSB7XG4gICAgbmVnID0gICctJztcbiAgICBudW0gPSAtbnVtO1xuICB9XG4gIG51bSA9ICcnICsgbnVtO1xuICB3aGlsZSAobnVtLmxlbmd0aCA8IGRpZ2l0cykgbnVtID0gWkVST19DSEFSICsgbnVtO1xuICBpZiAodHJpbSkge1xuICAgIG51bSA9IG51bS5zdWJzdHIobnVtLmxlbmd0aCAtIGRpZ2l0cyk7XG4gIH1cbiAgcmV0dXJuIG5lZyArIG51bTtcbn1cblxuXG5mdW5jdGlvbiBkYXRlR2V0dGVyKG5hbWUsIHNpemUsIG9mZnNldCwgdHJpbSkge1xuICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTtcbiAgICBpZiAob2Zmc2V0ID4gMCB8fCB2YWx1ZSA+IC1vZmZzZXQpIHtcbiAgICAgIHZhbHVlICs9IG9mZnNldDtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSAwICYmIG9mZnNldCA9PSAtMTIpIHZhbHVlID0gMTI7XG4gICAgcmV0dXJuIHBhZE51bWJlcih2YWx1ZSwgc2l6ZSwgdHJpbSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRhdGVTdHJHZXR0ZXIobmFtZSwgc2hvcnRGb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihkYXRlLCBmb3JtYXRzKSB7XG4gICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7XG4gICAgdmFyIGdldCA9IHVwcGVyY2FzZShzaG9ydEZvcm0gPyAoJ1NIT1JUJyArIG5hbWUpIDogbmFtZSk7XG5cbiAgICByZXR1cm4gZm9ybWF0c1tnZXRdW3ZhbHVlXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGltZVpvbmVHZXR0ZXIoZGF0ZSwgZm9ybWF0cywgb2Zmc2V0KSB7XG4gIHZhciB6b25lID0gLTEgKiBvZmZzZXQ7XG4gIHZhciBwYWRkZWRab25lID0gKHpvbmUgPj0gMCkgPyBcIitcIiA6IFwiXCI7XG5cbiAgcGFkZGVkWm9uZSArPSBwYWROdW1iZXIoTWF0aFt6b25lID4gMCA/ICdmbG9vcicgOiAnY2VpbCddKHpvbmUgLyA2MCksIDIpICtcbiAgICAgICAgICAgICAgICBwYWROdW1iZXIoTWF0aC5hYnMoem9uZSAlIDYwKSwgMik7XG5cbiAgcmV0dXJuIHBhZGRlZFpvbmU7XG59XG5cbmZ1bmN0aW9uIGdldEZpcnN0VGh1cnNkYXlPZlllYXIoeWVhcikge1xuICAgIC8vIDAgPSBpbmRleCBvZiBKYW51YXJ5XG4gICAgdmFyIGRheU9mV2Vla09uRmlyc3QgPSAobmV3IERhdGUoeWVhciwgMCwgMSkpLmdldERheSgpO1xuICAgIC8vIDQgPSBpbmRleCBvZiBUaHVyc2RheSAoKzEgdG8gYWNjb3VudCBmb3IgMXN0ID0gNSlcbiAgICAvLyAxMSA9IGluZGV4IG9mICpuZXh0KiBUaHVyc2RheSAoKzEgYWNjb3VudCBmb3IgMXN0ID0gMTIpXG4gICAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDAsICgoZGF5T2ZXZWVrT25GaXJzdCA8PSA0KSA/IDUgOiAxMikgLSBkYXlPZldlZWtPbkZpcnN0KTtcbn1cblxuZnVuY3Rpb24gZ2V0VGh1cnNkYXlUaGlzV2VlayhkYXRldGltZSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRldGltZS5nZXRGdWxsWWVhcigpLCBkYXRldGltZS5nZXRNb250aCgpLFxuICAgICAgLy8gNCA9IGluZGV4IG9mIFRodXJzZGF5XG4gICAgICBkYXRldGltZS5nZXREYXRlKCkgKyAoNCAtIGRhdGV0aW1lLmdldERheSgpKSk7XG59XG5cbmZ1bmN0aW9uIHdlZWtHZXR0ZXIoc2l6ZSkge1xuICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBmaXJzdFRodXJzID0gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpLFxuICAgICAgICAgdGhpc1RodXJzID0gZ2V0VGh1cnNkYXlUaGlzV2VlayhkYXRlKTtcblxuICAgICAgdmFyIGRpZmYgPSArdGhpc1RodXJzIC0gK2ZpcnN0VGh1cnMsXG4gICAgICAgICByZXN1bHQgPSAxICsgTWF0aC5yb3VuZChkaWZmIC8gNi4wNDhlOCk7IC8vIDYuMDQ4ZTggbXMgcGVyIHdlZWtcblxuICAgICAgcmV0dXJuIHBhZE51bWJlcihyZXN1bHQsIHNpemUpO1xuICAgfTtcbn1cblxuZnVuY3Rpb24gYW1wbUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCkgPCAxMiA/IGZvcm1hdHMuQU1QTVNbMF0gOiBmb3JtYXRzLkFNUE1TWzFdO1xufVxuXG5mdW5jdGlvbiBlcmFHZXR0ZXIoZGF0ZSwgZm9ybWF0cykge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpIDw9IDAgPyBmb3JtYXRzLkVSQVNbMF0gOiBmb3JtYXRzLkVSQVNbMV07XG59XG5cbmZ1bmN0aW9uIGxvbmdFcmFHZXR0ZXIoZGF0ZSwgZm9ybWF0cykge1xuICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpIDw9IDAgPyBmb3JtYXRzLkVSQU5BTUVTWzBdIDogZm9ybWF0cy5FUkFOQU1FU1sxXTtcbn1cblxudmFyIERBVEVfRk9STUFUUyA9IHtcbiAgeXl5eTogZGF0ZUdldHRlcignRnVsbFllYXInLCA0KSxcbiAgICB5eTogZGF0ZUdldHRlcignRnVsbFllYXInLCAyLCAwLCB0cnVlKSxcbiAgICAgeTogZGF0ZUdldHRlcignRnVsbFllYXInLCAxKSxcbiAgTU1NTTogZGF0ZVN0ckdldHRlcignTW9udGgnKSxcbiAgIE1NTTogZGF0ZVN0ckdldHRlcignTW9udGgnLCB0cnVlKSxcbiAgICBNTTogZGF0ZUdldHRlcignTW9udGgnLCAyLCAxKSxcbiAgICAgTTogZGF0ZUdldHRlcignTW9udGgnLCAxLCAxKSxcbiAgICBkZDogZGF0ZUdldHRlcignRGF0ZScsIDIpLFxuICAgICBkOiBkYXRlR2V0dGVyKCdEYXRlJywgMSksXG4gICAgSEg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMiksXG4gICAgIEg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMSksXG4gICAgaGg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMiwgLTEyKSxcbiAgICAgaDogZGF0ZUdldHRlcignSG91cnMnLCAxLCAtMTIpLFxuICAgIG1tOiBkYXRlR2V0dGVyKCdNaW51dGVzJywgMiksXG4gICAgIG06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAxKSxcbiAgICBzczogZGF0ZUdldHRlcignU2Vjb25kcycsIDIpLFxuICAgICBzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMSksXG4gICAgIC8vIHdoaWxlIElTTyA4NjAxIHJlcXVpcmVzIGZyYWN0aW9ucyB0byBiZSBwcmVmaXhlZCB3aXRoIGAuYCBvciBgLGBcbiAgICAgLy8gd2UgY2FuIGJlIGp1c3Qgc2FmZWx5IHJlbHkgb24gdXNpbmcgYHNzc2Agc2luY2Ugd2UgY3VycmVudGx5IGRvbid0IHN1cHBvcnQgc2luZ2xlIG9yIHR3byBkaWdpdCBmcmFjdGlvbnNcbiAgIHNzczogZGF0ZUdldHRlcignTWlsbGlzZWNvbmRzJywgMyksXG4gIEVFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScpLFxuICAgRUVFOiBkYXRlU3RyR2V0dGVyKCdEYXknLCB0cnVlKSxcbiAgICAgYTogYW1wbUdldHRlcixcbiAgICAgWjogdGltZVpvbmVHZXR0ZXIsXG4gICAgd3c6IHdlZWtHZXR0ZXIoMiksXG4gICAgIHc6IHdlZWtHZXR0ZXIoMSksXG4gICAgIEc6IGVyYUdldHRlcixcbiAgICAgR0c6IGVyYUdldHRlcixcbiAgICAgR0dHOiBlcmFHZXR0ZXIsXG4gICAgIEdHR0c6IGxvbmdFcmFHZXR0ZXJcbn07XG5cbnZhciBEQVRFX0ZPUk1BVFNfU1BMSVQgPSAvKCg/OlteeU1kSGhtc2FaRXdHJ10rKXwoPzonKD86W14nXXwnJykqJyl8KD86RSt8eSt8TSt8ZCt8SCt8aCt8bSt8cyt8YXxafEcrfHcrKSkoLiopLyxcbiAgICBOVU1CRVJfU1RSSU5HID0gL15cXC0/XFxkKyQvO1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGRhdGVcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAgIEZvcm1hdHMgYGRhdGVgIHRvIGEgc3RyaW5nIGJhc2VkIG9uIHRoZSByZXF1ZXN0ZWQgYGZvcm1hdGAuXG4gKlxuICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGJlIGNvbXBvc2VkIG9mIHRoZSBmb2xsb3dpbmcgZWxlbWVudHM6XG4gKlxuICogICAqIGAneXl5eSdgOiA0IGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIgKGUuZy4gQUQgMSA9PiAwMDAxLCBBRCAyMDEwID0+IDIwMTApXG4gKiAgICogYCd5eSdgOiAyIGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIsIHBhZGRlZCAoMDAtOTkpLiAoZS5nLiBBRCAyMDAxID0+IDAxLCBBRCAyMDEwID0+IDEwKVxuICogICAqIGAneSdgOiAxIGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIsIGUuZy4gKEFEIDEgPT4gMSwgQUQgMTk5ID0+IDE5OSlcbiAqICAgKiBgJ01NTU0nYDogTW9udGggaW4geWVhciAoSmFudWFyeS1EZWNlbWJlcilcbiAqICAgKiBgJ01NTSdgOiBNb250aCBpbiB5ZWFyIChKYW4tRGVjKVxuICogICAqIGAnTU0nYDogTW9udGggaW4geWVhciwgcGFkZGVkICgwMS0xMilcbiAqICAgKiBgJ00nYDogTW9udGggaW4geWVhciAoMS0xMilcbiAqICAgKiBgJ2RkJ2A6IERheSBpbiBtb250aCwgcGFkZGVkICgwMS0zMSlcbiAqICAgKiBgJ2QnYDogRGF5IGluIG1vbnRoICgxLTMxKVxuICogICAqIGAnRUVFRSdgOiBEYXkgaW4gV2VlaywoU3VuZGF5LVNhdHVyZGF5KVxuICogICAqIGAnRUVFJ2A6IERheSBpbiBXZWVrLCAoU3VuLVNhdClcbiAqICAgKiBgJ0hIJ2A6IEhvdXIgaW4gZGF5LCBwYWRkZWQgKDAwLTIzKVxuICogICAqIGAnSCdgOiBIb3VyIGluIGRheSAoMC0yMylcbiAqICAgKiBgJ2hoJ2A6IEhvdXIgaW4gQU0vUE0sIHBhZGRlZCAoMDEtMTIpXG4gKiAgICogYCdoJ2A6IEhvdXIgaW4gQU0vUE0sICgxLTEyKVxuICogICAqIGAnbW0nYDogTWludXRlIGluIGhvdXIsIHBhZGRlZCAoMDAtNTkpXG4gKiAgICogYCdtJ2A6IE1pbnV0ZSBpbiBob3VyICgwLTU5KVxuICogICAqIGAnc3MnYDogU2Vjb25kIGluIG1pbnV0ZSwgcGFkZGVkICgwMC01OSlcbiAqICAgKiBgJ3MnYDogU2Vjb25kIGluIG1pbnV0ZSAoMC01OSlcbiAqICAgKiBgJ3NzcydgOiBNaWxsaXNlY29uZCBpbiBzZWNvbmQsIHBhZGRlZCAoMDAwLTk5OSlcbiAqICAgKiBgJ2EnYDogQU0vUE0gbWFya2VyXG4gKiAgICogYCdaJ2A6IDQgZGlnaXQgKCtzaWduKSByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGltZXpvbmUgb2Zmc2V0ICgtMTIwMC0rMTIwMClcbiAqICAgKiBgJ3d3J2A6IFdlZWsgb2YgeWVhciwgcGFkZGVkICgwMC01MykuIFdlZWsgMDEgaXMgdGhlIHdlZWsgd2l0aCB0aGUgZmlyc3QgVGh1cnNkYXkgb2YgdGhlIHllYXJcbiAqICAgKiBgJ3cnYDogV2VlayBvZiB5ZWFyICgwLTUzKS4gV2VlayAxIGlzIHRoZSB3ZWVrIHdpdGggdGhlIGZpcnN0IFRodXJzZGF5IG9mIHRoZSB5ZWFyXG4gKiAgICogYCdHJ2AsIGAnR0cnYCwgYCdHR0cnYDogVGhlIGFiYnJldmlhdGVkIGZvcm0gb2YgdGhlIGVyYSBzdHJpbmcgKGUuZy4gJ0FEJylcbiAqICAgKiBgJ0dHR0cnYDogVGhlIGxvbmcgZm9ybSBvZiB0aGUgZXJhIHN0cmluZyAoZS5nLiAnQW5ubyBEb21pbmknKVxuICpcbiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBhbHNvIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHByZWRlZmluZWRcbiAqICAge0BsaW5rIGd1aWRlL2kxOG4gbG9jYWxpemFibGUgZm9ybWF0c306XG4gKlxuICogICAqIGAnbWVkaXVtJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU0gZCwgeSBoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlXG4gKiAgICAgKGUuZy4gU2VwIDMsIDIwMTAgMTI6MDU6MDggUE0pXG4gKiAgICogYCdzaG9ydCdgOiBlcXVpdmFsZW50IHRvIGAnTS9kL3l5IGg6bW0gYSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIDkvMy8xMCAxMjowNSBQTSlcbiAqICAgKiBgJ2Z1bGxEYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdFRUVFLCBNTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZVxuICogICAgIChlLmcuIEZyaWRheSwgU2VwdGVtYmVyIDMsIDIwMTApXG4gKiAgICogYCdsb25nRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gU2VwdGVtYmVyIDMsIDIwMTApXG4gKiAgICogYCdtZWRpdW1EYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcCAzLCAyMDEwKVxuICogICAqIGAnc2hvcnREYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNL2QveXknYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDkvMy8xMClcbiAqICAgKiBgJ21lZGl1bVRpbWUnYDogZXF1aXZhbGVudCB0byBgJ2g6bW06c3MgYSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gMTI6MDU6MDggUE0pXG4gKiAgICogYCdzaG9ydFRpbWUnYDogZXF1aXZhbGVudCB0byBgJ2g6bW0gYSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gMTI6MDUgUE0pXG4gKlxuICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGNvbnRhaW4gbGl0ZXJhbCB2YWx1ZXMuIFRoZXNlIG5lZWQgdG8gYmUgZXNjYXBlZCBieSBzdXJyb3VuZGluZyB3aXRoIHNpbmdsZSBxdW90ZXMgKGUuZy5cbiAqICAgYFwiaCAnaW4gdGhlIG1vcm5pbmcnXCJgKS4gSW4gb3JkZXIgdG8gb3V0cHV0IGEgc2luZ2xlIHF1b3RlLCBlc2NhcGUgaXQgLSBpLmUuLCB0d28gc2luZ2xlIHF1b3RlcyBpbiBhIHNlcXVlbmNlXG4gKiAgIChlLmcuIGBcImggJ28nJ2Nsb2NrJ1wiYCkuXG4gKlxuICogQHBhcmFtIHsoRGF0ZXxudW1iZXJ8c3RyaW5nKX0gZGF0ZSBEYXRlIHRvIGZvcm1hdCBlaXRoZXIgYXMgRGF0ZSBvYmplY3QsIG1pbGxpc2Vjb25kcyAoc3RyaW5nIG9yXG4gKiAgICBudW1iZXIpIG9yIHZhcmlvdXMgSVNPIDg2MDEgZGF0ZXRpbWUgc3RyaW5nIGZvcm1hdHMgKGUuZy4geXl5eS1NTS1kZFRISDptbTpzcy5zc3NaIGFuZCBpdHNcbiAqICAgIHNob3J0ZXIgdmVyc2lvbnMgbGlrZSB5eXl5LU1NLWRkVEhIOm1tWiwgeXl5eS1NTS1kZCBvciB5eXl5TU1kZFRISG1tc3NaKS4gSWYgbm8gdGltZXpvbmUgaXNcbiAqICAgIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGlucHV0LCB0aGUgdGltZSBpcyBjb25zaWRlcmVkIHRvIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gZm9ybWF0IEZvcm1hdHRpbmcgcnVsZXMgKHNlZSBEZXNjcmlwdGlvbikuIElmIG5vdCBzcGVjaWZpZWQsXG4gKiAgICBgbWVkaXVtRGF0ZWAgaXMgdXNlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gdGltZXpvbmUgVGltZXpvbmUgdG8gYmUgdXNlZCBmb3IgZm9ybWF0dGluZy4gSXQgdW5kZXJzdGFuZHMgVVRDL0dNVCBhbmQgdGhlXG4gKiAgICBjb250aW5lbnRhbCBVUyB0aW1lIHpvbmUgYWJicmV2aWF0aW9ucywgYnV0IGZvciBnZW5lcmFsIHVzZSwgdXNlIGEgdGltZSB6b25lIG9mZnNldCwgZm9yXG4gKiAgICBleGFtcGxlLCBgJyswNDMwJ2AgKDQgaG91cnMsIDMwIG1pbnV0ZXMgZWFzdCBvZiB0aGUgR3JlZW53aWNoIG1lcmlkaWFuKVxuICogICAgSWYgbm90IHNwZWNpZmllZCwgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyIHdpbGwgYmUgdXNlZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBzdHJpbmcgb3IgdGhlIGlucHV0IGlmIGlucHV0IGlzIG5vdCByZWNvZ25pemVkIGFzIGRhdGUvbWlsbGlzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjpcbiAgICAgICAgICAgPHNwYW4+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjxicj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ319PC9zcGFuPjpcbiAgICAgICAgICA8c3Bhbj57ezEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonfX08L3NwYW4+PGJyPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjxicj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTpcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVwifX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTpcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVwifX08L3NwYW4+PGJyPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGZvcm1hdCBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSdcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC9PY3QgMlxcZCwgMjAxMCBcXGR7MSwyfTpcXGR7Mn06XFxkezJ9IChBTXxQTSkvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCIxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goLzIwMTBcXC0xMFxcLTJcXGQgXFxkezJ9OlxcZHsyfTpcXGR7Mn0gKFxcLXxcXCspP1xcZHs0fS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSdcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC8xMFxcLzJcXGRcXC8yMDEwIEAgXFxkezEsMn06XFxkezJ9KEFNfFBNKS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6XFxcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVxcXCJcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC8xMFxcLzJcXGRcXC8yMDEwIGF0IFxcZHsxLDJ9OlxcZHsyfShBTXxQTSkvKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5kYXRlRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcbmZ1bmN0aW9uIGRhdGVGaWx0ZXIoJGxvY2FsZSkge1xuXG5cbiAgdmFyIFJfSVNPODYwMV9TVFIgPSAvXihcXGR7NH0pLT8oXFxkXFxkKS0/KFxcZFxcZCkoPzpUKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlxcLihcXGQrKSk/KT8pPyhafChbKy1dKShcXGRcXGQpOj8oXFxkXFxkKSk/KT8kLztcbiAgICAgICAgICAgICAgICAgICAgIC8vIDEgICAgICAgIDIgICAgICAgMyAgICAgICAgIDQgICAgICAgICAgNSAgICAgICAgICA2ICAgICAgICAgIDcgICAgICAgICAgOCAgOSAgICAgMTAgICAgICAxMVxuICBmdW5jdGlvbiBqc29uU3RyaW5nVG9EYXRlKHN0cmluZykge1xuICAgIHZhciBtYXRjaDtcbiAgICBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2goUl9JU084NjAxX1NUUikpIHtcbiAgICAgIHZhciBkYXRlID0gbmV3IERhdGUoMCksXG4gICAgICAgICAgdHpIb3VyID0gMCxcbiAgICAgICAgICB0ek1pbiAgPSAwLFxuICAgICAgICAgIGRhdGVTZXR0ZXIgPSBtYXRjaFs4XSA/IGRhdGUuc2V0VVRDRnVsbFllYXIgOiBkYXRlLnNldEZ1bGxZZWFyLFxuICAgICAgICAgIHRpbWVTZXR0ZXIgPSBtYXRjaFs4XSA/IGRhdGUuc2V0VVRDSG91cnMgOiBkYXRlLnNldEhvdXJzO1xuXG4gICAgICBpZiAobWF0Y2hbOV0pIHtcbiAgICAgICAgdHpIb3VyID0gdG9JbnQobWF0Y2hbOV0gKyBtYXRjaFsxMF0pO1xuICAgICAgICB0ek1pbiA9IHRvSW50KG1hdGNoWzldICsgbWF0Y2hbMTFdKTtcbiAgICAgIH1cbiAgICAgIGRhdGVTZXR0ZXIuY2FsbChkYXRlLCB0b0ludChtYXRjaFsxXSksIHRvSW50KG1hdGNoWzJdKSAtIDEsIHRvSW50KG1hdGNoWzNdKSk7XG4gICAgICB2YXIgaCA9IHRvSW50KG1hdGNoWzRdIHx8IDApIC0gdHpIb3VyO1xuICAgICAgdmFyIG0gPSB0b0ludChtYXRjaFs1XSB8fCAwKSAtIHR6TWluO1xuICAgICAgdmFyIHMgPSB0b0ludChtYXRjaFs2XSB8fCAwKTtcbiAgICAgIHZhciBtcyA9IE1hdGgucm91bmQocGFyc2VGbG9hdCgnMC4nICsgKG1hdGNoWzddIHx8IDApKSAqIDEwMDApO1xuICAgICAgdGltZVNldHRlci5jYWxsKGRhdGUsIGgsIG0sIHMsIG1zKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG5cblxuICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0LCB0aW1lem9uZSkge1xuICAgIHZhciB0ZXh0ID0gJycsXG4gICAgICAgIHBhcnRzID0gW10sXG4gICAgICAgIGZuLCBtYXRjaDtcblxuICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnbWVkaXVtRGF0ZSc7XG4gICAgZm9ybWF0ID0gJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTW2Zvcm1hdF0gfHwgZm9ybWF0O1xuICAgIGlmIChpc1N0cmluZyhkYXRlKSkge1xuICAgICAgZGF0ZSA9IE5VTUJFUl9TVFJJTkcudGVzdChkYXRlKSA/IHRvSW50KGRhdGUpIDoganNvblN0cmluZ1RvRGF0ZShkYXRlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXIoZGF0ZSkpIHtcbiAgICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzRGF0ZShkYXRlKSB8fCAhaXNGaW5pdGUoZGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICB3aGlsZSAoZm9ybWF0KSB7XG4gICAgICBtYXRjaCA9IERBVEVfRk9STUFUU19TUExJVC5leGVjKGZvcm1hdCk7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcGFydHMgPSBjb25jYXQocGFydHMsIG1hdGNoLCAxKTtcbiAgICAgICAgZm9ybWF0ID0gcGFydHMucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0cy5wdXNoKGZvcm1hdCk7XG4gICAgICAgIGZvcm1hdCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRhdGVUaW1lem9uZU9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBpZiAodGltZXpvbmUpIHtcbiAgICAgIGRhdGVUaW1lem9uZU9mZnNldCA9IHRpbWV6b25lVG9PZmZzZXQodGltZXpvbmUsIGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICBkYXRlID0gY29udmVydFRpbWV6b25lVG9Mb2NhbChkYXRlLCB0aW1lem9uZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGZvckVhY2gocGFydHMsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBmbiA9IERBVEVfRk9STUFUU1t2YWx1ZV07XG4gICAgICB0ZXh0ICs9IGZuID8gZm4oZGF0ZSwgJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLCBkYXRlVGltZXpvbmVPZmZzZXQpXG4gICAgICAgICAgICAgICAgIDogdmFsdWUucmVwbGFjZSgvKF4nfCckKS9nLCAnJykucmVwbGFjZSgvJycvZywgXCInXCIpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBqc29uXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogICBBbGxvd3MgeW91IHRvIGNvbnZlcnQgYSBKYXZhU2NyaXB0IG9iamVjdCBpbnRvIEpTT04gc3RyaW5nLlxuICpcbiAqICAgVGhpcyBmaWx0ZXIgaXMgbW9zdGx5IHVzZWZ1bCBmb3IgZGVidWdnaW5nLiBXaGVuIHVzaW5nIHRoZSBkb3VibGUgY3VybHkge3t2YWx1ZX19IG5vdGF0aW9uXG4gKiAgIHRoZSBiaW5kaW5nIGlzIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIEpTT04uXG4gKlxuICogQHBhcmFtIHsqfSBvYmplY3QgQW55IEphdmFTY3JpcHQgb2JqZWN0IChpbmNsdWRpbmcgYXJyYXlzIGFuZCBwcmltaXRpdmUgdHlwZXMpIHRvIGZpbHRlci5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gc3BhY2luZyBUaGUgbnVtYmVyIG9mIHNwYWNlcyB0byB1c2UgcGVyIGluZGVudGF0aW9uLCBkZWZhdWx0cyB0byAyLlxuICogQHJldHVybnMge3N0cmluZ30gSlNPTiBzdHJpbmcuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8cHJlIGlkPVwiZGVmYXVsdC1zcGFjaW5nXCI+e3sgeyduYW1lJzondmFsdWUnfSB8IGpzb24gfX08L3ByZT5cbiAgICAgICA8cHJlIGlkPVwiY3VzdG9tLXNwYWNpbmdcIj57eyB7J25hbWUnOid2YWx1ZSd9IHwganNvbjo0IH19PC9wcmU+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQganNvbmlmeSBmaWx0ZXJlZCBvYmplY3RzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGVmYXVsdC1zcGFjaW5nJykpLmdldFRleHQoKSkudG9NYXRjaCgvXFx7XFxuICBcIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXN0b20tc3BhY2luZycpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL1xce1xcbiAgICBcIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqL1xuZnVuY3Rpb24ganNvbkZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgc3BhY2luZykge1xuICAgIGlmIChpc1VuZGVmaW5lZChzcGFjaW5nKSkge1xuICAgICAgICBzcGFjaW5nID0gMjtcbiAgICB9XG4gICAgcmV0dXJuIHRvSnNvbihvYmplY3QsIHNwYWNpbmcpO1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgbG93ZXJjYXNlXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gbG93ZXJjYXNlLlxuICogQHNlZSBhbmd1bGFyLmxvd2VyY2FzZVxuICovXG52YXIgbG93ZXJjYXNlRmlsdGVyID0gdmFsdWVGbihsb3dlcmNhc2UpO1xuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgdXBwZXJjYXNlXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gdXBwZXJjYXNlLlxuICogQHNlZSBhbmd1bGFyLnVwcGVyY2FzZVxuICovXG52YXIgdXBwZXJjYXNlRmlsdGVyID0gdmFsdWVGbih1cHBlcmNhc2UpO1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGxpbWl0VG9cbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgbmV3IGFycmF5IG9yIHN0cmluZyBjb250YWluaW5nIG9ubHkgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIGVsZW1lbnRzLiBUaGUgZWxlbWVudHNcbiAqIGFyZSB0YWtlbiBmcm9tIGVpdGhlciB0aGUgYmVnaW5uaW5nIG9yIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheSwgc3RyaW5nIG9yIG51bWJlciwgYXMgc3BlY2lmaWVkIGJ5XG4gKiB0aGUgdmFsdWUgYW5kIHNpZ24gKHBvc2l0aXZlIG9yIG5lZ2F0aXZlKSBvZiBgbGltaXRgLiBJZiBhIG51bWJlciBpcyB1c2VkIGFzIGlucHV0LCBpdCBpc1xuICogY29udmVydGVkIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfG51bWJlcn0gaW5wdXQgU291cmNlIGFycmF5LCBzdHJpbmcgb3IgbnVtYmVyIHRvIGJlIGxpbWl0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGxpbWl0IFRoZSBsZW5ndGggb2YgdGhlIHJldHVybmVkIGFycmF5IG9yIHN0cmluZy4gSWYgdGhlIGBsaW1pdGAgbnVtYmVyXG4gKiAgICAgaXMgcG9zaXRpdmUsIGBsaW1pdGAgbnVtYmVyIG9mIGl0ZW1zIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgc291cmNlIGFycmF5L3N0cmluZyBhcmUgY29waWVkLlxuICogICAgIElmIHRoZSBudW1iZXIgaXMgbmVnYXRpdmUsIGBsaW1pdGAgbnVtYmVyICBvZiBpdGVtcyBmcm9tIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheS9zdHJpbmdcbiAqICAgICBhcmUgY29waWVkLiBUaGUgYGxpbWl0YCB3aWxsIGJlIHRyaW1tZWQgaWYgaXQgZXhjZWVkcyBgYXJyYXkubGVuZ3RoYC4gSWYgYGxpbWl0YCBpcyB1bmRlZmluZWQsXG4gKiAgICAgdGhlIGlucHV0IHdpbGwgYmUgcmV0dXJuZWQgdW5jaGFuZ2VkLlxuICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBiZWdpbiBJbmRleCBhdCB3aGljaCB0byBiZWdpbiBsaW1pdGF0aW9uLiBBcyBhIG5lZ2F0aXZlIGluZGV4LCBgYmVnaW5gXG4gKiAgICAgaW5kaWNhdGVzIGFuIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGlucHV0YC4gRGVmYXVsdHMgdG8gYDBgLlxuICogQHJldHVybnMge0FycmF5fHN0cmluZ30gQSBuZXcgc3ViLWFycmF5IG9yIHN1YnN0cmluZyBvZiBsZW5ndGggYGxpbWl0YCBvciBsZXNzIGlmIGlucHV0IGFycmF5XG4gKiAgICAgaGFkIGxlc3MgdGhhbiBgbGltaXRgIGVsZW1lbnRzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJsaW1pdFRvRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbGltaXRUb0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUubnVtYmVycyA9IFsxLDIsMyw0LDUsNiw3LDgsOV07XG4gICAgICAgICAgICAgJHNjb3BlLmxldHRlcnMgPSBcImFiY2RlZmdoaVwiO1xuICAgICAgICAgICAgICRzY29wZS5sb25nTnVtYmVyID0gMjM0NTQzMjM0MjtcbiAgICAgICAgICAgICAkc2NvcGUubnVtTGltaXQgPSAzO1xuICAgICAgICAgICAgICRzY29wZS5sZXR0ZXJMaW1pdCA9IDM7XG4gICAgICAgICAgICAgJHNjb3BlLmxvbmdOdW1iZXJMaW1pdCA9IDM7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgTGltaXQge3tudW1iZXJzfX0gdG86XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHN0ZXA9XCIxXCIgbmctbW9kZWw9XCJudW1MaW1pdFwiPlxuICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgIDxwPk91dHB1dCBudW1iZXJzOiB7eyBudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCB9fTwvcD5cbiAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIExpbWl0IHt7bGV0dGVyc319IHRvOlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBzdGVwPVwiMVwiIG5nLW1vZGVsPVwibGV0dGVyTGltaXRcIj5cbiAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICA8cD5PdXRwdXQgbGV0dGVyczoge3sgbGV0dGVycyB8IGxpbWl0VG86bGV0dGVyTGltaXQgfX08L3A+XG4gICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICBMaW1pdCB7e2xvbmdOdW1iZXJ9fSB0bzpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgc3RlcD1cIjFcIiBuZy1tb2RlbD1cImxvbmdOdW1iZXJMaW1pdFwiPlxuICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgIDxwPk91dHB1dCBsb25nIG51bWJlcjoge3sgbG9uZ051bWJlciB8IGxpbWl0VG86bG9uZ051bWJlckxpbWl0IH19PC9wPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgbnVtTGltaXRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ251bUxpbWl0JykpO1xuICAgICAgIHZhciBsZXR0ZXJMaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbGV0dGVyTGltaXQnKSk7XG4gICAgICAgdmFyIGxvbmdOdW1iZXJMaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbG9uZ051bWJlckxpbWl0JykpO1xuICAgICAgIHZhciBsaW1pdGVkTnVtYmVycyA9IGVsZW1lbnQoYnkuYmluZGluZygnbnVtYmVycyB8IGxpbWl0VG86bnVtTGltaXQnKSk7XG4gICAgICAgdmFyIGxpbWl0ZWRMZXR0ZXJzID0gZWxlbWVudChieS5iaW5kaW5nKCdsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCcpKTtcbiAgICAgICB2YXIgbGltaXRlZExvbmdOdW1iZXIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xvbmdOdW1iZXIgfCBsaW1pdFRvOmxvbmdOdW1iZXJMaW1pdCcpKTtcblxuICAgICAgIGl0KCdzaG91bGQgbGltaXQgdGhlIG51bWJlciBhcnJheSB0byBmaXJzdCB0aHJlZSBpdGVtcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KG51bUxpbWl0SW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCczJyk7XG4gICAgICAgICBleHBlY3QobGV0dGVyTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgIGV4cGVjdChsb25nTnVtYmVyTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbMSwyLDNdJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogYWJjJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDIzNCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgLy8gVGhlcmUgaXMgYSBidWcgaW4gc2FmYXJpIGFuZCBwcm90cmFjdG9yIHRoYXQgZG9lc24ndCBsaWtlIHRoZSBtaW51cyBrZXlcbiAgICAgICAvLyBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgb3V0cHV0IHdoZW4gLTMgaXMgZW50ZXJlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgIC8vICAgbnVtTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgIC8vICAgbnVtTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGxldHRlckxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAvLyAgIGxldHRlckxpbWl0SW5wdXQuc2VuZEtleXMoJy0zJyk7XG4gICAgICAgLy8gICBsb25nTnVtYmVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgIC8vICAgbG9uZ051bWJlckxpbWl0SW5wdXQuc2VuZEtleXMoJy0zJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZE51bWJlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbnVtYmVyczogWzcsOCw5XScpO1xuICAgICAgIC8vICAgZXhwZWN0KGxpbWl0ZWRMZXR0ZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxldHRlcnM6IGdoaScpO1xuICAgICAgIC8vICAgZXhwZWN0KGxpbWl0ZWRMb25nTnVtYmVyLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxvbmcgbnVtYmVyOiAzNDInKTtcbiAgICAgICAvLyB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgbm90IGV4Y2VlZCB0aGUgbWF4aW11bSBzaXplIG9mIGlucHV0IGFycmF5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBudW1MaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgICBudW1MaW1pdElucHV0LnNlbmRLZXlzKCcxMDAnKTtcbiAgICAgICAgIGxldHRlckxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIGxldHRlckxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgbG9uZ051bWJlckxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIGxvbmdOdW1iZXJMaW1pdElucHV0LnNlbmRLZXlzKCcxMDAnKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbMSwyLDMsNCw1LDYsNyw4LDldJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogYWJjZGVmZ2hpJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDIzNDU0MzIzNDInKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuKi9cbmZ1bmN0aW9uIGxpbWl0VG9GaWx0ZXIoKSB7XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCwgbGltaXQsIGJlZ2luKSB7XG4gICAgaWYgKE1hdGguYWJzKE51bWJlcihsaW1pdCkpID09PSBJbmZpbml0eSkge1xuICAgICAgbGltaXQgPSBOdW1iZXIobGltaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW1pdCA9IHRvSW50KGxpbWl0KTtcbiAgICB9XG4gICAgaWYgKGlzTmFOKGxpbWl0KSkgcmV0dXJuIGlucHV0O1xuXG4gICAgaWYgKGlzTnVtYmVyKGlucHV0KSkgaW5wdXQgPSBpbnB1dC50b1N0cmluZygpO1xuICAgIGlmICghaXNBcnJheShpbnB1dCkgJiYgIWlzU3RyaW5nKGlucHV0KSkgcmV0dXJuIGlucHV0O1xuXG4gICAgYmVnaW4gPSAoIWJlZ2luIHx8IGlzTmFOKGJlZ2luKSkgPyAwIDogdG9JbnQoYmVnaW4pO1xuICAgIGJlZ2luID0gKGJlZ2luIDwgMCkgPyBNYXRoLm1heCgwLCBpbnB1dC5sZW5ndGggKyBiZWdpbikgOiBiZWdpbjtcblxuICAgIGlmIChsaW1pdCA+PSAwKSB7XG4gICAgICByZXR1cm4gaW5wdXQuc2xpY2UoYmVnaW4sIGJlZ2luICsgbGltaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYmVnaW4gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnNsaWNlKGxpbWl0LCBpbnB1dC5sZW5ndGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnNsaWNlKE1hdGgubWF4KDAsIGJlZ2luICsgbGltaXQpLCBiZWdpbik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG9yZGVyQnlcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBPcmRlcnMgYSBzcGVjaWZpZWQgYGFycmF5YCBieSB0aGUgYGV4cHJlc3Npb25gIHByZWRpY2F0ZS4gSXQgaXMgb3JkZXJlZCBhbHBoYWJldGljYWxseVxuICogZm9yIHN0cmluZ3MgYW5kIG51bWVyaWNhbGx5IGZvciBudW1iZXJzLiBOb3RlOiBpZiB5b3Ugbm90aWNlIG51bWJlcnMgYXJlIG5vdCBiZWluZyBzb3J0ZWRcbiAqIGFzIGV4cGVjdGVkLCBtYWtlIHN1cmUgdGhleSBhcmUgYWN0dWFsbHkgYmVpbmcgc2F2ZWQgYXMgbnVtYmVycyBhbmQgbm90IHN0cmluZ3MuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCopfHN0cmluZ3xBcnJheS48KGZ1bmN0aW9uKCopfHN0cmluZyk+PX0gZXhwcmVzc2lvbiBBIHByZWRpY2F0ZSB0byBiZVxuICogICAgdXNlZCBieSB0aGUgY29tcGFyYXRvciB0byBkZXRlcm1pbmUgdGhlIG9yZGVyIG9mIGVsZW1lbnRzLlxuICpcbiAqICAgIENhbiBiZSBvbmUgb2Y6XG4gKlxuICogICAgLSBgZnVuY3Rpb25gOiBHZXR0ZXIgZnVuY3Rpb24uIFRoZSByZXN1bHQgb2YgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIHNvcnRlZCB1c2luZyB0aGVcbiAqICAgICAgYDxgLCBgPT09YCwgYD5gIG9wZXJhdG9yLlxuICogICAgLSBgc3RyaW5nYDogQW4gQW5ndWxhciBleHByZXNzaW9uLiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiBpcyB1c2VkIHRvIGNvbXBhcmUgZWxlbWVudHNcbiAqICAgICAgKGZvciBleGFtcGxlIGBuYW1lYCB0byBzb3J0IGJ5IGEgcHJvcGVydHkgY2FsbGVkIGBuYW1lYCBvciBgbmFtZS5zdWJzdHIoMCwgMylgIHRvIHNvcnQgYnlcbiAqICAgICAgMyBmaXJzdCBjaGFyYWN0ZXJzIG9mIGEgcHJvcGVydHkgY2FsbGVkIGBuYW1lYCkuIFRoZSByZXN1bHQgb2YgYSBjb25zdGFudCBleHByZXNzaW9uXG4gKiAgICAgIGlzIGludGVycHJldGVkIGFzIGEgcHJvcGVydHkgbmFtZSB0byBiZSB1c2VkIGluIGNvbXBhcmlzb25zIChmb3IgZXhhbXBsZSBgXCJzcGVjaWFsIG5hbWVcImBcbiAqICAgICAgdG8gc29ydCBvYmplY3QgYnkgdGhlIHZhbHVlIG9mIHRoZWlyIGBzcGVjaWFsIG5hbWVgIHByb3BlcnR5KS4gQW4gZXhwcmVzc2lvbiBjYW4gYmVcbiAqICAgICAgb3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIGArYCBvciBgLWAgdG8gY29udHJvbCBhc2NlbmRpbmcgb3IgZGVzY2VuZGluZyBzb3J0IG9yZGVyXG4gKiAgICAgIChmb3IgZXhhbXBsZSwgYCtuYW1lYCBvciBgLW5hbWVgKS4gSWYgbm8gcHJvcGVydHkgaXMgcHJvdmlkZWQsIChlLmcuIGAnKydgKSB0aGVuIHRoZSBhcnJheVxuICogICAgICBlbGVtZW50IGl0c2VsZiBpcyB1c2VkIHRvIGNvbXBhcmUgd2hlcmUgc29ydGluZy5cbiAqICAgIC0gYEFycmF5YDogQW4gYXJyYXkgb2YgZnVuY3Rpb24gb3Igc3RyaW5nIHByZWRpY2F0ZXMuIFRoZSBmaXJzdCBwcmVkaWNhdGUgaW4gdGhlIGFycmF5XG4gKiAgICAgIGlzIHVzZWQgZm9yIHNvcnRpbmcsIGJ1dCB3aGVuIHR3byBpdGVtcyBhcmUgZXF1aXZhbGVudCwgdGhlIG5leHQgcHJlZGljYXRlIGlzIHVzZWQuXG4gKlxuICogICAgSWYgdGhlIHByZWRpY2F0ZSBpcyBtaXNzaW5nIG9yIGVtcHR5IHRoZW4gaXQgZGVmYXVsdHMgdG8gYCcrJ2AuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gcmV2ZXJzZSBSZXZlcnNlIHRoZSBvcmRlciBvZiB0aGUgYXJyYXkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFNvcnRlZCBjb3B5IG9mIHRoZSBzb3VyY2UgYXJyYXkuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBkZW1vbnN0cmF0ZXMgYSBzaW1wbGUgbmdSZXBlYXQsIHdoZXJlIHRoZSBkYXRhIGlzIHNvcnRlZFxuICogYnkgYWdlIGluIGRlc2NlbmRpbmcgb3JkZXIgKHByZWRpY2F0ZSBpcyBzZXQgdG8gYCctYWdlJ2ApLlxuICogYHJldmVyc2VgIGlzIG5vdCBzZXQsIHdoaWNoIG1lYW5zIGl0IGRlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRcIj5cbiAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICAgICA8dGg+UGhvbmUgTnVtYmVyPC90aD5cbiAgICAgICAgICAgICA8dGg+QWdlPC90aD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTonLWFnZSdcIj5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPVxuICAgICAgICAgICAgICAgW3tuYW1lOidKb2huJywgcGhvbmU6JzU1NS0xMjEyJywgYWdlOjEwfSxcbiAgICAgICAgICAgICAgICB7bmFtZTonTWFyeScsIHBob25lOic1NTUtOTg3NicsIGFnZToxOX0sXG4gICAgICAgICAgICAgICAge25hbWU6J01pa2UnLCBwaG9uZTonNTU1LTQzMjEnLCBhZ2U6MjF9LFxuICAgICAgICAgICAgICAgIHtuYW1lOidBZGFtJywgcGhvbmU6JzU1NS01Njc4JywgYWdlOjM1fSxcbiAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnLCBhZ2U6Mjl9XTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqIFRoZSBwcmVkaWNhdGUgYW5kIHJldmVyc2UgcGFyYW1ldGVycyBjYW4gYmUgY29udHJvbGxlZCBkeW5hbWljYWxseSB0aHJvdWdoIHNjb3BlIHByb3BlcnRpZXMsXG4gKiBhcyBzaG93biBpbiB0aGUgbmV4dCBleGFtcGxlLlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cIm9yZGVyQnlFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwcmU+U29ydGluZyBwcmVkaWNhdGUgPSB7e3ByZWRpY2F0ZX19OyByZXZlcnNlID0ge3tyZXZlcnNlfX08L3ByZT5cbiAgICAgICAgIDxoci8+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwicHJlZGljYXRlPScnXCI+U2V0IHRvIHVuc29ydGVkPC9idXR0b24+XG4gICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRcIj5cbiAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJvcmRlcignbmFtZScpXCI+TmFtZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByZWRpY2F0ZSA9PT0gJ25hbWUnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTpyZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIm9yZGVyKCdwaG9uZScpXCI+UGhvbmUgTnVtYmVyPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJlZGljYXRlID09PSAncGhvbmUnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTpyZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIm9yZGVyKCdhZ2UnKVwiPkFnZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByZWRpY2F0ZSA9PT0gJ2FnZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOnJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTpwcmVkaWNhdGU6cmV2ZXJzZVwiPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuYWdlfX08L3RkPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgPC90YWJsZT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ29yZGVyQnlFeGFtcGxlJywgW10pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9XG4gICAgICAgICAgICAgICBbe25hbWU6J0pvaG4nLCBwaG9uZTonNTU1LTEyMTInLCBhZ2U6MTB9LFxuICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzU1NS05ODc2JywgYWdlOjE5fSxcbiAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMScsIGFnZToyMX0sXG4gICAgICAgICAgICAgICAge25hbWU6J0FkYW0nLCBwaG9uZTonNTU1LTU2NzgnLCBhZ2U6MzV9LFxuICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZScsIHBob25lOic1NTUtODc2NScsIGFnZToyOX1dO1xuICAgICAgICAgICAkc2NvcGUucHJlZGljYXRlID0gJ2FnZSc7XG4gICAgICAgICAgICRzY29wZS5yZXZlcnNlID0gdHJ1ZTtcbiAgICAgICAgICAgJHNjb3BlLm9yZGVyID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSAoJHNjb3BlLnByZWRpY2F0ZSA9PT0gcHJlZGljYXRlKSA/ICEkc2NvcGUucmV2ZXJzZSA6IGZhbHNlO1xuICAgICAgICAgICAgICRzY29wZS5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgICAgIH07XG4gICAgICAgICB9XSk7XG4gICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuc29ydG9yZGVyOmFmdGVyIHtcbiAgICAgICAgIGNvbnRlbnQ6ICdcXDI1YjInO1xuICAgICAgIH1cbiAgICAgICAuc29ydG9yZGVyLnJldmVyc2U6YWZ0ZXIge1xuICAgICAgICAgY29udGVudDogJ1xcMjViYyc7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKlxuICogSXQncyBhbHNvIHBvc3NpYmxlIHRvIGNhbGwgdGhlIG9yZGVyQnkgZmlsdGVyIG1hbnVhbGx5LCBieSBpbmplY3RpbmcgYCRmaWx0ZXJgLCByZXRyaWV2aW5nIHRoZVxuICogZmlsdGVyIHJvdXRpbmUgd2l0aCBgJGZpbHRlcignb3JkZXJCeScpYCwgYW5kIGNhbGxpbmcgdGhlIHJldHVybmVkIGZpbHRlciByb3V0aW5lIHdpdGggdGhlXG4gKiBkZXNpcmVkIHBhcmFtZXRlcnMuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgIDxwcmU+U29ydGluZyBwcmVkaWNhdGUgPSB7e3ByZWRpY2F0ZX19OyByZXZlcnNlID0ge3tyZXZlcnNlfX08L3ByZT5cbiAgICAgIDx0YWJsZSBjbGFzcz1cImZyaWVuZFwiPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwib3JkZXIoJ25hbWUnKVwiPk5hbWU8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJlZGljYXRlID09PSAnbmFtZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOnJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwib3JkZXIoJ3Bob25lJylcIj5QaG9uZSBOdW1iZXI8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJlZGljYXRlID09PSAncGhvbmUnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTpyZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIm9yZGVyKCdhZ2UnKVwiPkFnZTwvYnV0dG9uPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcmVkaWNhdGUgPT09ICdhZ2UnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTpyZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICA8L3RoPlxuICAgICAgICA8L3RyPlxuICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHNcIj5cbiAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGFibGU+XG4gICAgPC9kaXY+XG4gICAgPC9maWxlPlxuXG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ29yZGVyQnlFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRmaWx0ZXInLCBmdW5jdGlvbigkc2NvcGUsICRmaWx0ZXIpIHtcbiAgICAgICAgICB2YXIgb3JkZXJCeSA9ICRmaWx0ZXIoJ29yZGVyQnknKTtcbiAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IFtcbiAgICAgICAgICAgIHsgbmFtZTogJ0pvaG4nLCAgICBwaG9uZTogJzU1NS0xMjEyJywgICAgYWdlOiAxMCB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnTWFyeScsICAgIHBob25lOiAnNTU1LTk4NzYnLCAgICBhZ2U6IDE5IH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdNaWtlJywgICAgcGhvbmU6ICc1NTUtNDMyMScsICAgIGFnZTogMjEgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ0FkYW0nLCAgICBwaG9uZTogJzU1NS01Njc4JywgICAgYWdlOiAzNSB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnSnVsaWUnLCAgIHBob25lOiAnNTU1LTg3NjUnLCAgICBhZ2U6IDI5IH1cbiAgICAgICAgICBdO1xuICAgICAgICAgICRzY29wZS5vcmRlciA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgICAgICAgJHNjb3BlLnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgICAgICRzY29wZS5yZXZlcnNlID0gKCRzY29wZS5wcmVkaWNhdGUgPT09IHByZWRpY2F0ZSkgPyAhJHNjb3BlLnJldmVyc2UgOiBmYWxzZTtcbiAgICAgICAgICAgICRzY29wZS5mcmllbmRzID0gb3JkZXJCeSgkc2NvcGUuZnJpZW5kcywgcHJlZGljYXRlLCAkc2NvcGUucmV2ZXJzZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICAkc2NvcGUub3JkZXIoJ2FnZScsIHRydWUpO1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuXG4gICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5zb3J0b3JkZXI6YWZ0ZXIge1xuICAgICAgICAgY29udGVudDogJ1xcMjViMic7XG4gICAgICAgfVxuICAgICAgIC5zb3J0b3JkZXIucmV2ZXJzZTphZnRlciB7XG4gICAgICAgICBjb250ZW50OiAnXFwyNWJjJztcbiAgICAgICB9XG4gICAgPC9maWxlPlxuPC9leGFtcGxlPlxuICovXG5vcmRlckJ5RmlsdGVyLiRpbmplY3QgPSBbJyRwYXJzZSddO1xuZnVuY3Rpb24gb3JkZXJCeUZpbHRlcigkcGFyc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBzb3J0UHJlZGljYXRlLCByZXZlcnNlT3JkZXIpIHtcblxuICAgIGlmICghKGlzQXJyYXlMaWtlKGFycmF5KSkpIHJldHVybiBhcnJheTtcblxuICAgIGlmICghaXNBcnJheShzb3J0UHJlZGljYXRlKSkgeyBzb3J0UHJlZGljYXRlID0gW3NvcnRQcmVkaWNhdGVdOyB9XG4gICAgaWYgKHNvcnRQcmVkaWNhdGUubGVuZ3RoID09PSAwKSB7IHNvcnRQcmVkaWNhdGUgPSBbJysnXTsgfVxuXG4gICAgdmFyIHByZWRpY2F0ZXMgPSBwcm9jZXNzUHJlZGljYXRlcyhzb3J0UHJlZGljYXRlLCByZXZlcnNlT3JkZXIpO1xuICAgIC8vIEFkZCBhIHByZWRpY2F0ZSBhdCB0aGUgZW5kIHRoYXQgZXZhbHVhdGVzIHRvIHRoZSBlbGVtZW50IGluZGV4LiBUaGlzIG1ha2VzIHRoZVxuICAgIC8vIHNvcnQgc3RhYmxlIGFzIGl0IHdvcmtzIGFzIGEgdGllLWJyZWFrZXIgd2hlbiBhbGwgdGhlIGlucHV0IHByZWRpY2F0ZXMgY2Fubm90XG4gICAgLy8gZGlzdGluZ3Vpc2ggYmV0d2VlbiB0d28gZWxlbWVudHMuXG4gICAgcHJlZGljYXRlcy5wdXNoKHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHt9OyB9LCBkZXNjZW5kaW5nOiByZXZlcnNlT3JkZXIgPyAtMSA6IDF9KTtcblxuICAgIC8vIFRoZSBuZXh0IHRocmVlIGxpbmVzIGFyZSBhIHZlcnNpb24gb2YgYSBTd2FydHppYW4gVHJhbnNmb3JtIGlkaW9tIGZyb20gUGVybFxuICAgIC8vIChzb21ldGltZXMgY2FsbGVkIHRoZSBEZWNvcmF0ZS1Tb3J0LVVuZGVjb3JhdGUgaWRpb20pXG4gICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NjaHdhcnR6aWFuX3RyYW5zZm9ybVxuICAgIHZhciBjb21wYXJlVmFsdWVzID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFycmF5LCBnZXRDb21wYXJpc29uT2JqZWN0KTtcbiAgICBjb21wYXJlVmFsdWVzLnNvcnQoZG9Db21wYXJpc29uKTtcbiAgICBhcnJheSA9IGNvbXBhcmVWYWx1ZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHsgcmV0dXJuIGl0ZW0udmFsdWU7IH0pO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcGFyaXNvbk9iamVjdCh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgcHJlZGljYXRlVmFsdWVzOiBwcmVkaWNhdGVzLm1hcChmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0UHJlZGljYXRlVmFsdWUocHJlZGljYXRlLmdldCh2YWx1ZSksIGluZGV4KTtcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZG9Db21wYXJpc29uKHYxLCB2Mikge1xuICAgICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgICBmb3IgKHZhciBpbmRleD0wLCBsZW5ndGggPSBwcmVkaWNhdGVzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgcmVzdWx0ID0gY29tcGFyZSh2MS5wcmVkaWNhdGVWYWx1ZXNbaW5kZXhdLCB2Mi5wcmVkaWNhdGVWYWx1ZXNbaW5kZXhdKSAqIHByZWRpY2F0ZXNbaW5kZXhdLmRlc2NlbmRpbmc7XG4gICAgICAgIGlmIChyZXN1bHQpIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1ByZWRpY2F0ZXMoc29ydFByZWRpY2F0ZSwgcmV2ZXJzZU9yZGVyKSB7XG4gICAgcmV2ZXJzZU9yZGVyID0gcmV2ZXJzZU9yZGVyID8gLTEgOiAxO1xuICAgIHJldHVybiBzb3J0UHJlZGljYXRlLm1hcChmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBkZXNjZW5kaW5nID0gMSwgZ2V0ID0gaWRlbnRpdHk7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKHByZWRpY2F0ZSkpIHtcbiAgICAgICAgZ2V0ID0gcHJlZGljYXRlO1xuICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhwcmVkaWNhdGUpKSB7XG4gICAgICAgIGlmICgocHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnKycgfHwgcHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnLScpKSB7XG4gICAgICAgICAgZGVzY2VuZGluZyA9IHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJy0nID8gLTEgOiAxO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IHByZWRpY2F0ZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWRpY2F0ZSAhPT0gJycpIHtcbiAgICAgICAgICBnZXQgPSAkcGFyc2UocHJlZGljYXRlKTtcbiAgICAgICAgICBpZiAoZ2V0LmNvbnN0YW50KSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gZ2V0KCk7XG4gICAgICAgICAgICBnZXQgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7IGdldDogZ2V0LCBkZXNjZW5kaW5nOiBkZXNjZW5kaW5nICogcmV2ZXJzZU9yZGVyIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOiAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlICdib29sZWFuJzogLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb2JqZWN0VmFsdWUodmFsdWUsIGluZGV4KSB7XG4gICAgLy8gSWYgYHZhbHVlT2ZgIGlzIGEgdmFsaWQgZnVuY3Rpb24gdXNlIHRoYXRcbiAgICBpZiAodHlwZW9mIHZhbHVlLnZhbHVlT2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvLyBJZiBgdG9TdHJpbmdgIGlzIGEgdmFsaWQgZnVuY3Rpb24gYW5kIG5vdCB0aGUgb25lIGZyb20gYE9iamVjdC5wcm90b3R5cGVgIHVzZSB0aGF0XG4gICAgaWYgKGhhc0N1c3RvbVRvU3RyaW5nKHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvLyBXZSBoYXZlIGEgYmFzaWMgb2JqZWN0IHNvIHdlIHVzZSB0aGUgcG9zaXRpb24gb2YgdGhlIG9iamVjdCBpbiB0aGUgY29sbGVjdGlvblxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFByZWRpY2F0ZVZhbHVlKHZhbHVlLCBpbmRleCkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgdHlwZSA9ICdzdHJpbmcnO1xuICAgICAgdmFsdWUgPSAnbnVsbCc7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbHVlID0gb2JqZWN0VmFsdWUodmFsdWUsIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCB0eXBlOiB0eXBlIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlKHYxLCB2Mikge1xuICAgIHZhciByZXN1bHQgPSAwO1xuICAgIGlmICh2MS50eXBlID09PSB2Mi50eXBlKSB7XG4gICAgICBpZiAodjEudmFsdWUgIT09IHYyLnZhbHVlKSB7XG4gICAgICAgIHJlc3VsdCA9IHYxLnZhbHVlIDwgdjIudmFsdWUgPyAtMSA6IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHYxLnR5cGUgPCB2Mi50eXBlID8gLTEgOiAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIG5nRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7XG4gICAgZGlyZWN0aXZlID0ge1xuICAgICAgbGluazogZGlyZWN0aXZlXG4gICAgfTtcbiAgfVxuICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0FDJztcbiAgcmV0dXJuIHZhbHVlRm4oZGlyZWN0aXZlKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBhXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTW9kaWZpZXMgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIGh0bWwgQSB0YWcgc28gdGhhdCB0aGUgZGVmYXVsdCBhY3Rpb24gaXMgcHJldmVudGVkIHdoZW5cbiAqIHRoZSBocmVmIGF0dHJpYnV0ZSBpcyBlbXB0eS5cbiAqXG4gKiBUaGlzIGNoYW5nZSBwZXJtaXRzIHRoZSBlYXN5IGNyZWF0aW9uIG9mIGFjdGlvbiBsaW5rcyB3aXRoIHRoZSBgbmdDbGlja2AgZGlyZWN0aXZlXG4gKiB3aXRob3V0IGNoYW5naW5nIHRoZSBsb2NhdGlvbiBvciBjYXVzaW5nIHBhZ2UgcmVsb2FkcywgZS5nLjpcbiAqIGA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJsaXN0LmFkZEl0ZW0oKVwiPkFkZCBJdGVtPC9hPmBcbiAqL1xudmFyIGh0bWxBbmNob3JEaXJlY3RpdmUgPSB2YWx1ZUZuKHtcbiAgcmVzdHJpY3Q6ICdFJyxcbiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgIGlmICghYXR0ci5ocmVmICYmICFhdHRyLnhsaW5rSHJlZikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgIC8vIElmIHRoZSBsaW5rZWQgZWxlbWVudCBpcyBub3QgYW4gYW5jaG9yIHRhZyBhbnltb3JlLCBkbyBub3RoaW5nXG4gICAgICAgIGlmIChlbGVtZW50WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdhJykgcmV0dXJuO1xuXG4gICAgICAgIC8vIFNWR0FFbGVtZW50IGRvZXMgbm90IHVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUsIGJ1dCByYXRoZXIgdGhlICd4bGlua0hyZWYnIGF0dHJpYnV0ZS5cbiAgICAgICAgdmFyIGhyZWYgPSB0b1N0cmluZy5jYWxsKGVsZW1lbnQucHJvcCgnaHJlZicpKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJyA/XG4gICAgICAgICAgICAgICAgICAgJ3hsaW5rOmhyZWYnIDogJ2hyZWYnO1xuICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgLy8gaWYgd2UgaGF2ZSBubyBocmVmIHVybCwgdGhlbiBkb24ndCBuYXZpZ2F0ZSBhbnl3aGVyZS5cbiAgICAgICAgICBpZiAoIWVsZW1lbnQuYXR0cihocmVmKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSHJlZlxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSA5OVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGFuIGhyZWYgYXR0cmlidXRlIHdpbGxcbiAqIG1ha2UgdGhlIGxpbmsgZ28gdG8gdGhlIHdyb25nIFVSTCBpZiB0aGUgdXNlciBjbGlja3MgaXQgYmVmb3JlXG4gKiBBbmd1bGFyIGhhcyBhIGNoYW5jZSB0byByZXBsYWNlIHRoZSBge3toYXNofX1gIG1hcmt1cCB3aXRoIGl0c1xuICogdmFsdWUuIFVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIG1hcmt1cCB0aGUgbGluayB3aWxsIGJlIGJyb2tlblxuICogYW5kIHdpbGwgbW9zdCBsaWtlbHkgcmV0dXJuIGEgNDA0IGVycm9yLiBUaGUgYG5nSHJlZmAgZGlyZWN0aXZlXG4gKiBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIFRoZSB3cm9uZyB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8YSBocmVmPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCI+bGluazE8L2E+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8YSBuZy1ocmVmPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCI+bGluazE8L2E+XG4gKiBgYGBcbiAqXG4gKiBAZWxlbWVudCBBXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ0hyZWYgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgc2hvd3MgdmFyaW91cyBjb21iaW5hdGlvbnMgb2YgYGhyZWZgLCBgbmctaHJlZmAgYW5kIGBuZy1jbGlja2AgYXR0cmlidXRlc1xuICogaW4gbGlua3MgYW5kIHRoZWlyIGRpZmZlcmVudCBiZWhhdmlvcnM6XG4gICAgPGV4YW1wbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJ2YWx1ZVwiIC8+PGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0xXCIgaHJlZiBuZy1jbGljaz1cInZhbHVlID0gMVwiPmxpbmsgMTwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTJcIiBocmVmPVwiXCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDJcIj5saW5rIDI8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0zXCIgbmctaHJlZj1cIi97eycxMjMnfX1cIj5saW5rIDM8L2E+IChsaW5rLCByZWxvYWQhKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstNFwiIGhyZWY9XCJcIiBuYW1lPVwieHhcIiBuZy1jbGljaz1cInZhbHVlID0gNFwiPmFuY2hvcjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTVcIiBuYW1lPVwieHh4XCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDVcIj5hbmNob3I8L2E+IChubyBsaW5rKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstNlwiIG5nLWhyZWY9XCJ7e3ZhbHVlfX1cIj5saW5rPC9hPiAobGluaywgY2hhbmdlIGxvY2F0aW9uKVxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIHdpdGhvdXQgdmFsdWUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTEnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCcxJyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstMScpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgZW1wdHkgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0yJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnMicpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTInKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYW5kIGNoYW5nZSB1cmwgd2hlbiBuZy1ocmVmIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTMnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvTWF0Y2goL1xcLzEyMyQvKTtcblxuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMycpKS5jbGljaygpO1xuXG4gICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgbmF2aWdhdGUgYXdheSBmcm9tIGFuIEFuZ3VsYXIgcGFnZSwgc28gd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHVzZSBicm93c2VyLmRyaXZlciB0byBnZXQgdGhlIGJhc2Ugd2ViZHJpdmVyLlxuXG4gICAgICAgICAgYnJvd3Nlci53YWl0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICByZXR1cm4gdXJsLm1hdGNoKC9cXC8xMjMkLyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCA1MDAwLCAncGFnZSBzaG91bGQgbmF2aWdhdGUgdG8gLzEyMycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZyBhbmQgbmFtZSBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCc0Jyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstNCcpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIG5vIGhyZWYgYnV0IG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay01JykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnNScpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTUnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUobnVsbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgb25seSBjaGFuZ2UgdXJsIHdoZW4gb25seSBuZy1ocmVmJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuY2xlYXIoKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5zZW5kS2V5cygnNicpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvTWF0Y2goL1xcLzYkLyk7XG5cbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuY2xpY2soKTtcblxuICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIG5hdmlnYXRlIGF3YXkgZnJvbSBhbiBBbmd1bGFyIHBhZ2UsIHNvIHdlIG5lZWRcbiAgICAgICAgICAvLyB0byB1c2UgYnJvd3Nlci5kcml2ZXIgdG8gZ2V0IHRoZSBiYXNlIHdlYmRyaXZlci5cbiAgICAgICAgICBicm93c2VyLndhaXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5kcml2ZXIuZ2V0Q3VycmVudFVybCgpLnRoZW4oZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1cmwubWF0Y2goL1xcLzYkLyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCA1MDAwLCAncGFnZSBzaG91bGQgbmF2aWdhdGUgdG8gLzYnKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTcmNcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgOTlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhIGBzcmNgIGF0dHJpYnV0ZSBkb2Vzbid0XG4gKiB3b3JrIHJpZ2h0OiBUaGUgYnJvd3NlciB3aWxsIGZldGNoIGZyb20gdGhlIFVSTCB3aXRoIHRoZSBsaXRlcmFsXG4gKiB0ZXh0IGB7e2hhc2h9fWAgdW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgZXhwcmVzc2lvbiBpbnNpZGVcbiAqIGB7e2hhc2h9fWAuIFRoZSBgbmdTcmNgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8aW1nIHNyYz1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiIGFsdD1cIkRlc2NyaXB0aW9uXCIvPlxuICogYGBgXG4gKlxuICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBuZy1zcmM9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIiBhbHQ9XCJEZXNjcmlwdGlvblwiIC8+XG4gKiBgYGBcbiAqXG4gKiBAZWxlbWVudCBJTUdcbiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nU3JjIGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3Jjc2V0XG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDk5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3Jjc2V0YCBhdHRyaWJ1dGUgZG9lc24ndFxuICogd29yayByaWdodDogVGhlIGJyb3dzZXIgd2lsbCBmZXRjaCBmcm9tIHRoZSBVUkwgd2l0aCB0aGUgbGl0ZXJhbFxuICogdGV4dCBge3toYXNofX1gIHVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIGV4cHJlc3Npb24gaW5zaWRlXG4gKiBge3toYXNofX1gLiBUaGUgYG5nU3Jjc2V0YCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAqXG4gKiBUaGUgYnVnZ3kgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBzcmNzZXQ9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0gMnhcIiBhbHQ9XCJEZXNjcmlwdGlvblwiLz5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgbmctc3Jjc2V0PVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4XCIgYWx0PVwiRGVzY3JpcHRpb25cIiAvPlxuICogYGBgXG4gKlxuICogQGVsZW1lbnQgSU1HXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyY3NldCBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Rpc2FibGVkXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIHNldHMgdGhlIGBkaXNhYmxlZGAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGlmIHRoZVxuICoge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaW5zaWRlIGBuZ0Rpc2FibGVkYCBldmFsdWF0ZXMgdG8gdHJ1dGh5LlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYGRpc2FibGVkYFxuICogYXR0cmlidXRlLiBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb24gZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxsYWJlbD5DbGljayBtZSB0byB0b2dnbGU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxidXR0b24gbmctbW9kZWw9XCJidXR0b25cIiBuZy1kaXNhYmxlZD1cImNoZWNrZWRcIj5CdXR0b248L2J1dHRvbj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgYnV0dG9uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBJTlBVVFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0Rpc2FibGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiB0aGUgYGRpc2FibGVkYCBhdHRyaWJ1dGUgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDaGVja2VkXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2V0cyB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCwgaWYgdGhlIGV4cHJlc3Npb24gaW5zaWRlIGBuZ0NoZWNrZWRgIGlzIHRydXRoeS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBkaXJlY3RpdmUgc2hvdWxkIG5vdCBiZSB1c2VkIHRvZ2V0aGVyIHdpdGgge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSxcbiAqIGFzIHRoaXMgY2FuIGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvci5cbiAqXG4gKiBBIHNwZWNpYWwgZGlyZWN0aXZlIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHdlIGNhbm5vdCB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhlIGBjaGVja2VkYFxuICogYXR0cmlidXRlLiBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb24gZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxsYWJlbD5DaGVjayBtZSB0byBjaGVjayBib3RoOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJtYXN0ZXJcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxpbnB1dCBpZD1cImNoZWNrU2xhdmVcIiB0eXBlPVwiY2hlY2tib3hcIiBuZy1jaGVja2VkPVwibWFzdGVyXCIgYXJpYS1sYWJlbD1cIlNsYXZlIGlucHV0XCI+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgY2hlY2sgYm90aCBjaGVja0JveGVzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2NoZWNrU2xhdmUnKSkuZ2V0QXR0cmlidXRlKCdjaGVja2VkJykpLnRvQmVGYWxzeSgpO1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ21hc3RlcicpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjaGVja1NsYXZlJykpLmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBJTlBVVFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NoZWNrZWQgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHRoZSBgY2hlY2tlZGAgYXR0cmlidXRlIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUmVhZG9ubHlcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2V0cyB0aGUgYHJlYWRPbmx5YCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQsIGlmIHRoZSBleHByZXNzaW9uIGluc2lkZSBgbmdSZWFkb25seWAgaXMgdHJ1dGh5LlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYHJlYWRPbmx5YFxuICogYXR0cmlidXRlLiBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb24gZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxsYWJlbD5DaGVjayBtZSB0byBtYWtlIHRleHQgcmVhZG9ubHk6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLXJlYWRvbmx5PVwiY2hlY2tlZFwiIHZhbHVlPVwiSSdtIEFuZ3VsYXJcIiBhcmlhLWxhYmVsPVwiUmVhZG9ubHkgZmllbGRcIiAvPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSByZWFkb25seSBhdHRyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdbdHlwZT1cInRleHRcIl0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdbdHlwZT1cInRleHRcIl0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBJTlBVVFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1JlYWRvbmx5IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcInJlYWRvbmx5XCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTZWxlY3RlZFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXRzIHRoZSBgc2VsZWN0ZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCwgaWYgdGhlIGV4cHJlc3Npb24gaW5zaWRlIGBuZ1NlbGVjdGVkYCBpcyB0cnV0aHkuXG4gKlxuICogQSBzcGVjaWFsIGRpcmVjdGl2ZSBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZSBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSBgc2VsZWN0ZWRgXG4gKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGxhYmVsPkNoZWNrIG1lIHRvIHNlbGVjdDogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxzZWxlY3QgYXJpYS1sYWJlbD1cIm5nU2VsZWN0ZWQgZGVtb1wiPlxuICAgICAgICAgIDxvcHRpb24+SGVsbG8hPC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiBpZD1cImdyZWV0XCIgbmctc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPkdyZWV0aW5ncyE8L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgc2VsZWN0IEdyZWV0aW5ncyEnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZ3JlZXQnKSkuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzZWxlY3RlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdncmVldCcpKS5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IE9QVElPTlxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1NlbGVjdGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcInNlbGVjdGVkXCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nT3BlblxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXRzIHRoZSBgb3BlbmAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LCBpZiB0aGUgZXhwcmVzc2lvbiBpbnNpZGUgYG5nT3BlbmAgaXMgdHJ1dGh5LlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYG9wZW5gXG4gKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGxhYmVsPkNoZWNrIG1lIGNoZWNrIG11bHRpcGxlOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJvcGVuXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICAgPGRldGFpbHMgaWQ9XCJkZXRhaWxzXCIgbmctb3Blbj1cIm9wZW5cIj5cbiAgICAgICAgICAgIDxzdW1tYXJ5PlNob3cvSGlkZSBtZTwvc3VtbWFyeT5cbiAgICAgICAgIDwvZGV0YWlscz5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgb3BlbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGV0YWlscycpKS5nZXRBdHRyaWJ1dGUoJ29wZW4nKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ29wZW4nKSkuY2xpY2soKTtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2RldGFpbHMnKSkuZ2V0QXR0cmlidXRlKCdvcGVuJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgIH0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IERFVEFJTFNcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdPcGVuIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcIm9wZW5cIiB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cbnZhciBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlcyA9IHt9O1xuXG4vLyBib29sZWFuIGF0dHJzIGFyZSBldmFsdWF0ZWRcbmZvckVhY2goQk9PTEVBTl9BVFRSLCBmdW5jdGlvbihwcm9wTmFtZSwgYXR0ck5hbWUpIHtcbiAgLy8gYmluZGluZyB0byBtdWx0aXBsZSBpcyBub3Qgc3VwcG9ydGVkXG4gIGlmIChwcm9wTmFtZSA9PSBcIm11bHRpcGxlXCIpIHJldHVybjtcblxuICBmdW5jdGlvbiBkZWZhdWx0TGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgc2NvcGUuJHdhdGNoKGF0dHJbbm9ybWFsaXplZF0sIGZ1bmN0aW9uIG5nQm9vbGVhbkF0dHJXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgYXR0ci4kc2V0KGF0dHJOYW1lLCAhIXZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBub3JtYWxpemVkID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgYXR0ck5hbWUpO1xuICB2YXIgbGlua0ZuID0gZGVmYXVsdExpbmtGbjtcblxuICBpZiAocHJvcE5hbWUgPT09ICdjaGVja2VkJykge1xuICAgIGxpbmtGbiA9IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAvLyBlbnN1cmluZyBuZ0NoZWNrZWQgZG9lc24ndCBpbnRlcmZlcmUgd2l0aCBuZ01vZGVsIHdoZW4gYm90aCBhcmUgc2V0IG9uIHRoZSBzYW1lIGlucHV0XG4gICAgICBpZiAoYXR0ci5uZ01vZGVsICE9PSBhdHRyW25vcm1hbGl6ZWRdKSB7XG4gICAgICAgIGRlZmF1bHRMaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHIpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tub3JtYWxpemVkXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgIGxpbms6IGxpbmtGblxuICAgIH07XG4gIH07XG59KTtcblxuLy8gYWxpYXNlZCBpbnB1dCBhdHRycyBhcmUgZXZhbHVhdGVkXG5mb3JFYWNoKEFMSUFTRURfQVRUUiwgZnVuY3Rpb24oaHRtbEF0dHIsIG5nQXR0cikge1xuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tuZ0F0dHJdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByaW9yaXR5OiAxMDAsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAvL3NwZWNpYWwgY2FzZSBuZ1BhdHRlcm4gd2hlbiBhIGxpdGVyYWwgcmVndWxhciBleHByZXNzaW9uIHZhbHVlXG4gICAgICAgIC8vaXMgdXNlZCBhcyB0aGUgZXhwcmVzc2lvbiAodGhpcyB3YXkgd2UgZG9uJ3QgaGF2ZSB0byB3YXRjaCBhbnl0aGluZykuXG4gICAgICAgIGlmIChuZ0F0dHIgPT09IFwibmdQYXR0ZXJuXCIgJiYgYXR0ci5uZ1BhdHRlcm4uY2hhckF0KDApID09IFwiL1wiKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gYXR0ci5uZ1BhdHRlcm4ubWF0Y2goUkVHRVhfU1RSSU5HX1JFR0VYUCk7XG4gICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBhdHRyLiRzZXQoXCJuZ1BhdHRlcm5cIiwgbmV3IFJlZ0V4cChtYXRjaFsxXSwgbWF0Y2hbMl0pKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kd2F0Y2goYXR0cltuZ0F0dHJdLCBmdW5jdGlvbiBuZ0F0dHJBbGlhc1dhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgYXR0ci4kc2V0KG5nQXR0ciwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufSk7XG5cbi8vIG5nLXNyYywgbmctc3Jjc2V0LCBuZy1ocmVmIGFyZSBpbnRlcnBvbGF0ZWRcbmZvckVhY2goWydzcmMnLCAnc3Jjc2V0JywgJ2hyZWYnXSwgZnVuY3Rpb24oYXR0ck5hbWUpIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7XG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25vcm1hbGl6ZWRdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByaW9yaXR5OiA5OSwgLy8gaXQgbmVlZHMgdG8gcnVuIGFmdGVyIHRoZSBhdHRyaWJ1dGVzIGFyZSBpbnRlcnBvbGF0ZWRcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IGF0dHJOYW1lLFxuICAgICAgICAgICAgbmFtZSA9IGF0dHJOYW1lO1xuXG4gICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ2hyZWYnICYmXG4gICAgICAgICAgICB0b1N0cmluZy5jYWxsKGVsZW1lbnQucHJvcCgnaHJlZicpKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJykge1xuICAgICAgICAgIG5hbWUgPSAneGxpbmtIcmVmJztcbiAgICAgICAgICBhdHRyLiRhdHRyW25hbWVdID0gJ3hsaW5rOmhyZWYnO1xuICAgICAgICAgIHByb3BOYW1lID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGF0dHIuJG9ic2VydmUobm9ybWFsaXplZCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoYXR0ck5hbWUgPT09ICdocmVmJykge1xuICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIHZhbHVlKTtcblxuICAgICAgICAgIC8vIG9uIElFLCBpZiBcIm5nOnNyY1wiIGRpcmVjdGl2ZSBkZWNsYXJhdGlvbiBpcyB1c2VkIGFuZCBcInNyY1wiIGF0dHJpYnV0ZSBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAgLy8gdGhlbiBjYWxsaW5nIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzcmMnLCAnZm9vJykgZG9lc24ndCBkbyBhbnl0aGluZywgc28gd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHNldCB0aGUgcHJvcGVydHkgYXMgd2VsbCB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICAgICAgICAvLyB3ZSB1c2UgYXR0clthdHRyTmFtZV0gdmFsdWUgc2luY2UgJHNldCBjYW4gc2FuaXRpemUgdGhlIHVybC5cbiAgICAgICAgICBpZiAobXNpZSAmJiBwcm9wTmFtZSkgZWxlbWVudC5wcm9wKHByb3BOYW1lLCBhdHRyW25hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn0pO1xuXG4vKiBnbG9iYWwgLW51bGxGb3JtQ3RybCwgLVNVQk1JVFRFRF9DTEFTUywgYWRkU2V0VmFsaWRpdHlNZXRob2Q6IHRydWVcbiAqL1xudmFyIG51bGxGb3JtQ3RybCA9IHtcbiAgJGFkZENvbnRyb2w6IG5vb3AsXG4gICQkcmVuYW1lQ29udHJvbDogbnVsbEZvcm1SZW5hbWVDb250cm9sLFxuICAkcmVtb3ZlQ29udHJvbDogbm9vcCxcbiAgJHNldFZhbGlkaXR5OiBub29wLFxuICAkc2V0RGlydHk6IG5vb3AsXG4gICRzZXRQcmlzdGluZTogbm9vcCxcbiAgJHNldFN1Ym1pdHRlZDogbm9vcFxufSxcblNVQk1JVFRFRF9DTEFTUyA9ICduZy1zdWJtaXR0ZWQnO1xuXG5mdW5jdGlvbiBudWxsRm9ybVJlbmFtZUNvbnRyb2woY29udHJvbCwgbmFtZSkge1xuICBjb250cm9sLiRuYW1lID0gbmFtZTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlclxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgZm9ybSB5ZXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRkaXJ0eSBUcnVlIGlmIHVzZXIgaGFzIGFscmVhZHkgaW50ZXJhY3RlZCB3aXRoIHRoZSBmb3JtLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiBhbGwgb2YgdGhlIGNvbnRhaW5pbmcgZm9ybXMgYW5kIGNvbnRyb2xzIGFyZSB2YWxpZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgY29udGFpbmluZyBjb250cm9sIG9yIGZvcm0gaXMgaW52YWxpZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHBlbmRpbmcgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgY29udGFpbmluZyBjb250cm9sIG9yIGZvcm0gaXMgcGVuZGluZy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHN1Ym1pdHRlZCBUcnVlIGlmIHVzZXIgaGFzIHN1Ym1pdHRlZCB0aGUgZm9ybSBldmVuIGlmIGl0cyBpbnZhbGlkLlxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgSXMgYW4gb2JqZWN0IGhhc2gsIGNvbnRhaW5pbmcgcmVmZXJlbmNlcyB0byBjb250cm9scyBvclxuICogIGZvcm1zIHdpdGggZmFpbGluZyB2YWxpZGF0b3JzLCB3aGVyZTpcbiAqXG4gKiAgLSBrZXlzIGFyZSB2YWxpZGF0aW9uIHRva2VucyAoZXJyb3IgbmFtZXMpLFxuICogIC0gdmFsdWVzIGFyZSBhcnJheXMgb2YgY29udHJvbHMgb3IgZm9ybXMgdGhhdCBoYXZlIGEgZmFpbGluZyB2YWxpZGF0b3IgZm9yIGdpdmVuIGVycm9yIG5hbWUuXG4gKlxuICogIEJ1aWx0LWluIHZhbGlkYXRpb24gdG9rZW5zOlxuICpcbiAqICAtIGBlbWFpbGBcbiAqICAtIGBtYXhgXG4gKiAgLSBgbWF4bGVuZ3RoYFxuICogIC0gYG1pbmBcbiAqICAtIGBtaW5sZW5ndGhgXG4gKiAgLSBgbnVtYmVyYFxuICogIC0gYHBhdHRlcm5gXG4gKiAgLSBgcmVxdWlyZWRgXG4gKiAgLSBgdXJsYFxuICogIC0gYGRhdGVgXG4gKiAgLSBgZGF0ZXRpbWVsb2NhbGBcbiAqICAtIGB0aW1lYFxuICogIC0gYHdlZWtgXG4gKiAgLSBgbW9udGhgXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgRm9ybUNvbnRyb2xsZXJgIGtlZXBzIHRyYWNrIG9mIGFsbCBpdHMgY29udHJvbHMgYW5kIG5lc3RlZCBmb3JtcyBhcyB3ZWxsIGFzIHRoZSBzdGF0ZSBvZiB0aGVtLFxuICogc3VjaCBhcyBiZWluZyB2YWxpZC9pbnZhbGlkIG9yIGRpcnR5L3ByaXN0aW5lLlxuICpcbiAqIEVhY2gge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGZvcm19IGRpcmVjdGl2ZSBjcmVhdGVzIGFuIGluc3RhbmNlXG4gKiBvZiBgRm9ybUNvbnRyb2xsZXJgLlxuICpcbiAqL1xuLy9hc2tzIGZvciAkc2NvcGUgdG8gZm9vbCB0aGUgQkMgY29udHJvbGxlciBtb2R1bGVcbkZvcm1Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50JywgJyRhdHRycycsICckc2NvcGUnLCAnJGFuaW1hdGUnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiBGb3JtQ29udHJvbGxlcihlbGVtZW50LCBhdHRycywgJHNjb3BlLCAkYW5pbWF0ZSwgJGludGVycG9sYXRlKSB7XG4gIHZhciBmb3JtID0gdGhpcyxcbiAgICAgIGNvbnRyb2xzID0gW107XG5cbiAgLy8gaW5pdCBzdGF0ZVxuICBmb3JtLiRlcnJvciA9IHt9O1xuICBmb3JtLiQkc3VjY2VzcyA9IHt9O1xuICBmb3JtLiRwZW5kaW5nID0gdW5kZWZpbmVkO1xuICBmb3JtLiRuYW1lID0gJGludGVycG9sYXRlKGF0dHJzLm5hbWUgfHwgYXR0cnMubmdGb3JtIHx8ICcnKSgkc2NvcGUpO1xuICBmb3JtLiRkaXJ0eSA9IGZhbHNlO1xuICBmb3JtLiRwcmlzdGluZSA9IHRydWU7XG4gIGZvcm0uJHZhbGlkID0gdHJ1ZTtcbiAgZm9ybS4kaW52YWxpZCA9IGZhbHNlO1xuICBmb3JtLiRzdWJtaXR0ZWQgPSBmYWxzZTtcbiAgZm9ybS4kJHBhcmVudEZvcm0gPSBudWxsRm9ybUN0cmw7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJvbGxiYWNrIGFsbCBmb3JtIGNvbnRyb2xzIHBlbmRpbmcgdXBkYXRlcyB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiBUaGlzIG1ldGhvZCBpcyB0eXBpY2FsbHkgbmVlZGVkIGJ5IHRoZSByZXNldCBidXR0b24gb2ZcbiAgICogYSBmb3JtIHRoYXQgdXNlcyBgbmctbW9kZWwtb3B0aW9uc2AgdG8gcGVuZCB1cGRhdGVzLlxuICAgKi9cbiAgZm9ybS4kcm9sbGJhY2tWaWV3VmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJGNvbW1pdFZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ29tbWl0IGFsbCBmb3JtIGNvbnRyb2xzIHBlbmRpbmcgdXBkYXRlcyB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiBUaGlzIG1ldGhvZCBpcyByYXJlbHkgbmVlZGVkIGFzIGBOZ01vZGVsQ29udHJvbGxlcmBcbiAgICogdXN1YWxseSBoYW5kbGVzIGNhbGxpbmcgdGhpcyBpbiByZXNwb25zZSB0byBpbnB1dCBldmVudHMuXG4gICAqL1xuICBmb3JtLiRjb21taXRWaWV3VmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRhZGRDb250cm9sXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250cm9sIGNvbnRyb2wgb2JqZWN0LCBlaXRoZXIgYSB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlcn0gb3IgYW5cbiAgICoge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJ9XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlciBhIGNvbnRyb2wgd2l0aCB0aGUgZm9ybS4gSW5wdXQgZWxlbWVudHMgdXNpbmcgbmdNb2RlbENvbnRyb2xsZXIgZG8gdGhpcyBhdXRvbWF0aWNhbGx5XG4gICAqIHdoZW4gdGhleSBhcmUgbGlua2VkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNvbnRyb2wgd2lsbCBub3QgYmUgcmVmbGVjdGVkIG9uIHRoZSBuZXcgcGFyZW50IGZvcm0uIFRoaXNcbiAgICogaXMgbm90IGFuIGlzc3VlIHdpdGggbm9ybWFsIHVzZSwgYXMgZnJlc2hseSBjb21waWxlZCBhbmQgbGlua2VkIGNvbnRyb2xzIGFyZSBpbiBhIGAkcHJpc3RpbmVgXG4gICAqIHN0YXRlLlxuICAgKlxuICAgKiBIb3dldmVyLCBpZiB0aGUgbWV0aG9kIGlzIHVzZWQgcHJvZ3JhbW1hdGljYWxseSwgZm9yIGV4YW1wbGUgYnkgYWRkaW5nIGR5bmFtaWNhbGx5IGNyZWF0ZWQgY29udHJvbHMsXG4gICAqIG9yIGNvbnRyb2xzIHRoYXQgaGF2ZSBiZWVuIHByZXZpb3VzbHkgcmVtb3ZlZCB3aXRob3V0IGRlc3Ryb3lpbmcgdGhlaXIgY29ycmVzcG9uZGluZyBET00gZWxlbWVudCxcbiAgICogaXQncyB0aGUgZGV2ZWxvcGVycyByZXNwb25zaWJsaXR5IHRvIG1ha2Ugc3VyZSB0aGUgY3VycmVudCBzdGF0ZSBwcm9wYWdhdGVzIHRvIHRoZSBwYXJlbnQgZm9ybS5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGlmIGFuIGlucHV0IGNvbnRyb2wgaXMgYWRkZWQgdGhhdCBpcyBhbHJlYWR5IGAkZGlydHlgIGFuZCBoYXMgYCRlcnJvcmAgcHJvcGVydGllcyxcbiAgICogY2FsbGluZyBgJHNldERpcnR5KClgIGFuZCBgJHZhbGlkYXRlKClgIGFmdGVyd2FyZHMgd2lsbCBwcm9wYWdhdGUgdGhlIHN0YXRlIHRvIHRoZSBwYXJlbnQgZm9ybS5cbiAgICovXG4gIGZvcm0uJGFkZENvbnRyb2wgPSBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgLy8gQnJlYWtpbmcgY2hhbmdlIC0gYmVmb3JlLCBpbnB1dHMgd2hvc2UgbmFtZSB3YXMgXCJoYXNPd25Qcm9wZXJ0eVwiIHdlcmUgcXVpZXRseSBpZ25vcmVkXG4gICAgLy8gYW5kIG5vdCBhZGRlZCB0byB0aGUgc2NvcGUuICBOb3cgd2UgdGhyb3cgYW4gZXJyb3IuXG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkoY29udHJvbC4kbmFtZSwgJ2lucHV0Jyk7XG4gICAgY29udHJvbHMucHVzaChjb250cm9sKTtcblxuICAgIGlmIChjb250cm9sLiRuYW1lKSB7XG4gICAgICBmb3JtW2NvbnRyb2wuJG5hbWVdID0gY29udHJvbDtcbiAgICB9XG5cbiAgICBjb250cm9sLiQkcGFyZW50Rm9ybSA9IGZvcm07XG4gIH07XG5cbiAgLy8gUHJpdmF0ZSBBUEk6IHJlbmFtZSBhIGZvcm0gY29udHJvbFxuICBmb3JtLiQkcmVuYW1lQ29udHJvbCA9IGZ1bmN0aW9uKGNvbnRyb2wsIG5ld05hbWUpIHtcbiAgICB2YXIgb2xkTmFtZSA9IGNvbnRyb2wuJG5hbWU7XG5cbiAgICBpZiAoZm9ybVtvbGROYW1lXSA9PT0gY29udHJvbCkge1xuICAgICAgZGVsZXRlIGZvcm1bb2xkTmFtZV07XG4gICAgfVxuICAgIGZvcm1bbmV3TmFtZV0gPSBjb250cm9sO1xuICAgIGNvbnRyb2wuJG5hbWUgPSBuZXdOYW1lO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHJlbW92ZUNvbnRyb2xcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2wgY29udHJvbCBvYmplY3QsIGVpdGhlciBhIHtAbGluayBmb3JtLkZvcm1Db250cm9sbGVyfSBvciBhblxuICAgKiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlcn1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERlcmVnaXN0ZXIgYSBjb250cm9sIGZyb20gdGhlIGZvcm0uXG4gICAqXG4gICAqIElucHV0IGVsZW1lbnRzIHVzaW5nIG5nTW9kZWxDb250cm9sbGVyIGRvIHRoaXMgYXV0b21hdGljYWxseSB3aGVuIHRoZXkgYXJlIGRlc3Ryb3llZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IG9ubHkgdGhlIHJlbW92ZWQgY29udHJvbCdzIHZhbGlkYXRpb24gc3RhdGUgKGAkZXJyb3JzYGV0Yy4pIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZVxuICAgKiBmb3JtLiBgJGRpcnR5YCwgYCRzdWJtaXR0ZWRgIHN0YXRlcyB3aWxsIG5vdCBiZSBjaGFuZ2VkLCBiZWNhdXNlIHRoZSBleHBlY3RlZCBiZWhhdmlvciBjYW4gYmVcbiAgICogZGlmZmVyZW50IGZyb20gY2FzZSB0byBjYXNlLiBGb3IgZXhhbXBsZSwgcmVtb3ZpbmcgdGhlIG9ubHkgYCRkaXJ0eWAgY29udHJvbCBmcm9tIGEgZm9ybSBtYXkgb3JcbiAgICogbWF5IG5vdCBtZWFuIHRoYXQgdGhlIGZvcm0gaXMgc3RpbGwgYCRkaXJ0eWAuXG4gICAqL1xuICBmb3JtLiRyZW1vdmVDb250cm9sID0gZnVuY3Rpb24oY29udHJvbCkge1xuICAgIGlmIChjb250cm9sLiRuYW1lICYmIGZvcm1bY29udHJvbC4kbmFtZV0gPT09IGNvbnRyb2wpIHtcbiAgICAgIGRlbGV0ZSBmb3JtW2NvbnRyb2wuJG5hbWVdO1xuICAgIH1cbiAgICBmb3JFYWNoKGZvcm0uJHBlbmRpbmcsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICBmb3JtLiRzZXRWYWxpZGl0eShuYW1lLCBudWxsLCBjb250cm9sKTtcbiAgICB9KTtcbiAgICBmb3JFYWNoKGZvcm0uJGVycm9yLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgZm9ybS4kc2V0VmFsaWRpdHkobmFtZSwgbnVsbCwgY29udHJvbCk7XG4gICAgfSk7XG4gICAgZm9yRWFjaChmb3JtLiQkc3VjY2VzcywgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIGZvcm0uJHNldFZhbGlkaXR5KG5hbWUsIG51bGwsIGNvbnRyb2wpO1xuICAgIH0pO1xuXG4gICAgYXJyYXlSZW1vdmUoY29udHJvbHMsIGNvbnRyb2wpO1xuICAgIGNvbnRyb2wuJCRwYXJlbnRGb3JtID0gbnVsbEZvcm1DdHJsO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0VmFsaWRpdHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIHZhbGlkaXR5IG9mIGEgZm9ybSBjb250cm9sLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIHBhcmVudCBmb3Jtcy5cbiAgICovXG4gIGFkZFNldFZhbGlkaXR5TWV0aG9kKHtcbiAgICBjdHJsOiB0aGlzLFxuICAgICRlbGVtZW50OiBlbGVtZW50LFxuICAgIHNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSwgY29udHJvbGxlcikge1xuICAgICAgdmFyIGxpc3QgPSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgaWYgKCFsaXN0KSB7XG4gICAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBbY29udHJvbGxlcl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaW5kZXggPSBsaXN0LmluZGV4T2YoY29udHJvbGxlcik7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICBsaXN0LnB1c2goY29udHJvbGxlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHVuc2V0OiBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5LCBjb250cm9sbGVyKSB7XG4gICAgICB2YXIgbGlzdCA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICBpZiAoIWxpc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXJyYXlSZW1vdmUobGlzdCwgY29udHJvbGxlcik7XG4gICAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfSxcbiAgICAkYW5pbWF0ZTogJGFuaW1hdGVcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0RGlydHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gYSBkaXJ0eSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byBhZGQgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSB0byBhIGRpcnR5XG4gICAqIHN0YXRlIChuZy1kaXJ0eSBjbGFzcykuIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gcGFyZW50IGZvcm1zLlxuICAgKi9cbiAgZm9ybS4kc2V0RGlydHkgPSBmdW5jdGlvbigpIHtcbiAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgIGZvcm0uJGRpcnR5ID0gdHJ1ZTtcbiAgICBmb3JtLiRwcmlzdGluZSA9IGZhbHNlO1xuICAgIGZvcm0uJCRwYXJlbnRGb3JtLiRzZXREaXJ0eSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFByaXN0aW5lXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBmb3JtIHRvIGl0cyBwcmlzdGluZSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSB0byBpdHMgcHJpc3RpbmVcbiAgICogc3RhdGUgKG5nLXByaXN0aW5lIGNsYXNzKS4gVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBhbGwgdGhlIGNvbnRyb2xzIGNvbnRhaW5lZFxuICAgKiBpbiB0aGlzIGZvcm0uXG4gICAqXG4gICAqIFNldHRpbmcgYSBmb3JtIGJhY2sgdG8gYSBwcmlzdGluZSBzdGF0ZSBpcyBvZnRlbiB1c2VmdWwgd2hlbiB3ZSB3YW50IHRvICdyZXVzZScgYSBmb3JtIGFmdGVyXG4gICAqIHNhdmluZyBvciByZXNldHRpbmcgaXQuXG4gICAqL1xuICBmb3JtLiRzZXRQcmlzdGluZSA9IGZ1bmN0aW9uKCkge1xuICAgICRhbmltYXRlLnNldENsYXNzKGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTLCBESVJUWV9DTEFTUyArICcgJyArIFNVQk1JVFRFRF9DTEFTUyk7XG4gICAgZm9ybS4kZGlydHkgPSBmYWxzZTtcbiAgICBmb3JtLiRwcmlzdGluZSA9IHRydWU7XG4gICAgZm9ybS4kc3VibWl0dGVkID0gZmFsc2U7XG4gICAgZm9yRWFjaChjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgY29udHJvbC4kc2V0UHJpc3RpbmUoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRzZXRVbnRvdWNoZWRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHVudG91Y2hlZCBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlICduZy10b3VjaGVkJyBjbGFzcyBhbmQgc2V0IHRoZSBmb3JtIGNvbnRyb2xzIHRvIHRoZWlyXG4gICAqIHVudG91Y2hlZCBzdGF0ZSAobmctdW50b3VjaGVkIGNsYXNzKS5cbiAgICpcbiAgICogU2V0dGluZyBhIGZvcm0gY29udHJvbHMgYmFjayB0byB0aGVpciB1bnRvdWNoZWQgc3RhdGUgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gc2V0dGluZyB0aGUgZm9ybVxuICAgKiBiYWNrIHRvIGl0cyBwcmlzdGluZSBzdGF0ZS5cbiAgICovXG4gIGZvcm0uJHNldFVudG91Y2hlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGZvckVhY2goY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJHNldFVudG91Y2hlZCgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFN1Ym1pdHRlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgc3VibWl0dGVkIHN0YXRlLlxuICAgKi9cbiAgZm9ybS4kc2V0U3VibWl0dGVkID0gZnVuY3Rpb24oKSB7XG4gICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgU1VCTUlUVEVEX0NMQVNTKTtcbiAgICBmb3JtLiRzdWJtaXR0ZWQgPSB0cnVlO1xuICAgIGZvcm0uJCRwYXJlbnRGb3JtLiRzZXRTdWJtaXR0ZWQoKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Zvcm1cbiAqIEByZXN0cmljdCBFQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE5lc3RhYmxlIGFsaWFzIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBgZm9ybWB9IGRpcmVjdGl2ZS4gSFRNTFxuICogZG9lcyBub3QgYWxsb3cgbmVzdGluZyBvZiBmb3JtIGVsZW1lbnRzLiBJdCBpcyB1c2VmdWwgdG8gbmVzdCBmb3JtcywgZm9yIGV4YW1wbGUgaWYgdGhlIHZhbGlkaXR5IG9mIGFcbiAqIHN1Yi1ncm91cCBvZiBjb250cm9scyBuZWVkcyB0byBiZSBkZXRlcm1pbmVkLlxuICpcbiAqIE5vdGU6IHRoZSBwdXJwb3NlIG9mIGBuZ0Zvcm1gIGlzIHRvIGdyb3VwIGNvbnRyb2xzLFxuICogYnV0IG5vdCB0byBiZSBhIHJlcGxhY2VtZW50IGZvciB0aGUgYDxmb3JtPmAgdGFnIHdpdGggYWxsIG9mIGl0cyBjYXBhYmlsaXRpZXNcbiAqIChlLmcuIHBvc3RpbmcgdG8gdGhlIHNlcnZlciwgLi4uKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nRm9ybXxuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLlxuICpcbiAqL1xuXG4gLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBmb3JtXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGlyZWN0aXZlIHRoYXQgaW5zdGFudGlhdGVzXG4gKiB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlciBGb3JtQ29udHJvbGxlcn0uXG4gKlxuICogSWYgdGhlIGBuYW1lYCBhdHRyaWJ1dGUgaXMgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIGlzIHB1Ymxpc2hlZCBvbnRvIHRoZSBjdXJyZW50IHNjb3BlIHVuZGVyXG4gKiB0aGlzIG5hbWUuXG4gKlxuICogIyBBbGlhczoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9XG4gKlxuICogSW4gQW5ndWxhciwgZm9ybXMgY2FuIGJlIG5lc3RlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBvdXRlciBmb3JtIGlzIHZhbGlkIHdoZW4gYWxsIG9mIHRoZSBjaGlsZFxuICogZm9ybXMgYXJlIHZhbGlkIGFzIHdlbGwuIEhvd2V2ZXIsIGJyb3dzZXJzIGRvIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGA8Zm9ybT5gIGVsZW1lbnRzLCBzb1xuICogQW5ndWxhciBwcm92aWRlcyB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9IGRpcmVjdGl2ZSwgd2hpY2ggYmVoYXZlcyBpZGVudGljYWxseSB0b1xuICogYGZvcm1gIGJ1dCBjYW4gYmUgbmVzdGVkLiBOZXN0ZWQgZm9ybXMgY2FuIGJlIHVzZWZ1bCwgZm9yIGV4YW1wbGUsIGlmIHRoZSB2YWxpZGl0eSBvZiBhIHN1Yi1ncm91cFxuICogb2YgY29udHJvbHMgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZC5cbiAqXG4gKiAjIENTUyBjbGFzc2VzXG4gKiAgLSBgbmctdmFsaWRgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyB2YWxpZC5cbiAqICAtIGBuZy1pbnZhbGlkYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgaW52YWxpZC5cbiAqICAtIGBuZy1wZW5kaW5nYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgcGVuZGluZy5cbiAqICAtIGBuZy1wcmlzdGluZWAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHByaXN0aW5lLlxuICogIC0gYG5nLWRpcnR5YCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgZGlydHkuXG4gKiAgLSBgbmctc3VibWl0dGVkYCBpcyBzZXQgaWYgdGhlIGZvcm0gd2FzIHN1Ym1pdHRlZC5cbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBuZ0FuaW1hdGUgY2FuIGRldGVjdCBlYWNoIG9mIHRoZXNlIGNsYXNzZXMgd2hlbiBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqXG4gKlxuICogIyBTdWJtaXR0aW5nIGEgZm9ybSBhbmQgcHJldmVudGluZyB0aGUgZGVmYXVsdCBhY3Rpb25cbiAqXG4gKiBTaW5jZSB0aGUgcm9sZSBvZiBmb3JtcyBpbiBjbGllbnQtc2lkZSBBbmd1bGFyIGFwcGxpY2F0aW9ucyBpcyBkaWZmZXJlbnQgdGhhbiBpbiBjbGFzc2ljYWxcbiAqIHJvdW5kdHJpcCBhcHBzLCBpdCBpcyBkZXNpcmFibGUgZm9yIHRoZSBicm93c2VyIG5vdCB0byB0cmFuc2xhdGUgdGhlIGZvcm0gc3VibWlzc2lvbiBpbnRvIGEgZnVsbFxuICogcGFnZSByZWxvYWQgdGhhdCBzZW5kcyB0aGUgZGF0YSB0byB0aGUgc2VydmVyLiBJbnN0ZWFkIHNvbWUgamF2YXNjcmlwdCBsb2dpYyBzaG91bGQgYmUgdHJpZ2dlcmVkXG4gKiB0byBoYW5kbGUgdGhlIGZvcm0gc3VibWlzc2lvbiBpbiBhbiBhcHBsaWNhdGlvbi1zcGVjaWZpYyB3YXkuXG4gKlxuICogRm9yIHRoaXMgcmVhc29uLCBBbmd1bGFyIHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiAoZm9ybSBzdWJtaXNzaW9uIHRvIHRoZSBzZXJ2ZXIpIHVubGVzcyB0aGVcbiAqIGA8Zm9ybT5gIGVsZW1lbnQgaGFzIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSBzcGVjaWZpZWQuXG4gKlxuICogWW91IGNhbiB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgdHdvIHdheXMgdG8gc3BlY2lmeSB3aGF0IGphdmFzY3JpcHQgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgd2hlblxuICogYSBmb3JtIGlzIHN1Ym1pdHRlZDpcbiAqXG4gKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdTdWJtaXQgbmdTdWJtaXR9IGRpcmVjdGl2ZSBvbiB0aGUgZm9ybSBlbGVtZW50XG4gKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfSBkaXJlY3RpdmUgb24gdGhlIGZpcnN0XG4gICogIGJ1dHRvbiBvciBpbnB1dCBmaWVsZCBvZiB0eXBlIHN1Ym1pdCAoaW5wdXRbdHlwZT1zdWJtaXRdKVxuICpcbiAqIFRvIHByZXZlbnQgZG91YmxlIGV4ZWN1dGlvbiBvZiB0aGUgaGFuZGxlciwgdXNlIG9ubHkgb25lIG9mIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3VibWl0IG5nU3VibWl0fVxuICogb3Ige0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9IGRpcmVjdGl2ZXMuXG4gKiBUaGlzIGlzIGJlY2F1c2Ugb2YgdGhlIGZvbGxvd2luZyBmb3JtIHN1Ym1pc3Npb24gcnVsZXMgaW4gdGhlIEhUTUwgc3BlY2lmaWNhdGlvbjpcbiAqXG4gKiAtIElmIGEgZm9ybSBoYXMgb25seSBvbmUgaW5wdXQgZmllbGQgdGhlbiBoaXR0aW5nIGVudGVyIGluIHRoaXMgZmllbGQgdHJpZ2dlcnMgZm9ybSBzdWJtaXRcbiAqIChgbmdTdWJtaXRgKVxuICogLSBpZiBhIGZvcm0gaGFzIDIrIGlucHV0IGZpZWxkcyBhbmQgbm8gYnV0dG9ucyBvciBpbnB1dFt0eXBlPXN1Ym1pdF0gdGhlbiBoaXR0aW5nIGVudGVyXG4gKiBkb2Vzbid0IHRyaWdnZXIgc3VibWl0XG4gKiAtIGlmIGEgZm9ybSBoYXMgb25lIG9yIG1vcmUgaW5wdXQgZmllbGRzIGFuZCBvbmUgb3IgbW9yZSBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuXG4gKiBoaXR0aW5nIGVudGVyIGluIGFueSBvZiB0aGUgaW5wdXQgZmllbGRzIHdpbGwgdHJpZ2dlciB0aGUgY2xpY2sgaGFuZGxlciBvbiB0aGUgKmZpcnN0KiBidXR0b24gb3JcbiAqIGlucHV0W3R5cGU9c3VibWl0XSAoYG5nQ2xpY2tgKSAqYW5kKiBhIHN1Ym1pdCBoYW5kbGVyIG9uIHRoZSBlbmNsb3NpbmcgZm9ybSAoYG5nU3VibWl0YClcbiAqXG4gKiBBbnkgcGVuZGluZyBgbmdNb2RlbE9wdGlvbnNgIGNoYW5nZXMgd2lsbCB0YWtlIHBsYWNlIGltbWVkaWF0ZWx5IHdoZW4gYW4gZW5jbG9zaW5nIGZvcm0gaXNcbiAqIHN1Ym1pdHRlZC4gTm90ZSB0aGF0IGBuZ0NsaWNrYCBldmVudHMgd2lsbCBvY2N1ciBiZWZvcmUgdGhlIG1vZGVsIGlzIHVwZGF0ZWQuIFVzZSBgbmdTdWJtaXRgXG4gKiB0byBoYXZlIGFjY2VzcyB0byB0aGUgdXBkYXRlZCBtb2RlbC5cbiAqXG4gKiAjIyBBbmltYXRpb24gSG9va3NcbiAqXG4gKiBBbmltYXRpb25zIGluIG5nRm9ybSBhcmUgdHJpZ2dlcmVkIHdoZW4gYW55IG9mIHRoZSBhc3NvY2lhdGVkIENTUyBjbGFzc2VzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqIFRoZXNlIGNsYXNzZXMgYXJlOiBgLm5nLXByaXN0aW5lYCwgYC5uZy1kaXJ0eWAsIGAubmctaW52YWxpZGAgYW5kIGAubmctdmFsaWRgIGFzIHdlbGwgYXMgYW55XG4gKiBvdGhlciB2YWxpZGF0aW9ucyB0aGF0IGFyZSBwZXJmb3JtZWQgd2l0aGluIHRoZSBmb3JtLiBBbmltYXRpb25zIGluIG5nRm9ybSBhcmUgc2ltaWxhciB0byBob3dcbiAqIHRoZXkgd29yayBpbiBuZ0NsYXNzIGFuZCBhbmltYXRpb25zIGNhbiBiZSBob29rZWQgaW50byB1c2luZyBDU1MgdHJhbnNpdGlvbnMsIGtleWZyYW1lcyBhcyB3ZWxsXG4gKiBhcyBKUyBhbmltYXRpb25zLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBhIHNpbXBsZSB3YXkgdG8gdXRpbGl6ZSBDU1MgdHJhbnNpdGlvbnMgdG8gc3R5bGUgYSBmb3JtIGVsZW1lbnRcbiAqIHRoYXQgaGFzIGJlZW4gcmVuZGVyZWQgYXMgaW52YWxpZCBhZnRlciBpdCBoYXMgYmVlbiB2YWxpZGF0ZWQ6XG4gKlxuICogPHByZT5cbiAqIC8vYmUgc3VyZSB0byBpbmNsdWRlIG5nQW5pbWF0ZSBhcyBhIG1vZHVsZSB0byBob29rIGludG8gbW9yZVxuICogLy9hZHZhbmNlZCBhbmltYXRpb25zXG4gKiAubXktZm9ybSB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAqIH1cbiAqIC5teS1mb3JtLm5nLWludmFsaWQge1xuICogICBiYWNrZ3JvdW5kOiByZWQ7XG4gKiAgIGNvbG9yOndoaXRlO1xuICogfVxuICogPC9wcmU+XG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBmaXhCYXNlPVwidHJ1ZVwiIG1vZHVsZT1cImZvcm1FeGFtcGxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZm9ybUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0Zvcm1Db250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUudXNlclR5cGUgPSAnZ3Vlc3QnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPHN0eWxlPlxuICAgICAgICAubXktZm9ybSB7XG4gICAgICAgICAgdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7XG4gICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLm15LWZvcm0ubmctaW52YWxpZCB7XG4gICAgICAgICAgYmFja2dyb3VuZDogcmVkO1xuICAgICAgICB9XG4gICAgICAgPC9zdHlsZT5cbiAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkZvcm1Db250cm9sbGVyXCIgY2xhc3M9XCJteS1mb3JtXCI+XG4gICAgICAgICB1c2VyVHlwZTogPGlucHV0IG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwidXNlclR5cGVcIiByZXF1aXJlZD5cbiAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlJlcXVpcmVkITwvc3Bhbj48YnI+XG4gICAgICAgICA8Y29kZT51c2VyVHlwZSA9IHt7dXNlclR5cGV9fTwvY29kZT48YnI+XG4gICAgICAgICA8Y29kZT5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L2NvZGU+PGJyPlxuICAgICAgICAgPGNvZGU+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC9jb2RlPjxicj5cbiAgICAgICAgIDxjb2RlPm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvY29kZT48YnI+XG4gICAgICAgICA8Y29kZT5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvY29kZT48YnI+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHVzZXJUeXBlID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyVHlwZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG5cbiAgICAgICAgICBleHBlY3QodXNlclR5cGUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2d1ZXN0Jyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB1c2VyVHlwZSA9IGVsZW1lbnQoYnkuYmluZGluZygndXNlclR5cGUnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciB1c2VySW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyVHlwZScpKTtcblxuICAgICAgICAgIHVzZXJJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIHVzZXJJbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICBleHBlY3QodXNlclR5cGUuZ2V0VGV4dCgpKS50b0VxdWFsKCd1c2VyVHlwZSA9Jyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLlxuICovXG52YXIgZm9ybURpcmVjdGl2ZUZhY3RvcnkgPSBmdW5jdGlvbihpc05nRm9ybSkge1xuICByZXR1cm4gWyckdGltZW91dCcsICckcGFyc2UnLCBmdW5jdGlvbigkdGltZW91dCwgJHBhcnNlKSB7XG4gICAgdmFyIGZvcm1EaXJlY3RpdmUgPSB7XG4gICAgICBuYW1lOiAnZm9ybScsXG4gICAgICByZXN0cmljdDogaXNOZ0Zvcm0gPyAnRUFDJyA6ICdFJyxcbiAgICAgIHJlcXVpcmU6IFsnZm9ybScsICdeXj9mb3JtJ10sIC8vZmlyc3QgaXMgdGhlIGZvcm0ncyBvd24gY3RybCwgc2Vjb25kIGlzIGFuIG9wdGlvbmFsIHBhcmVudCBmb3JtXG4gICAgICBjb250cm9sbGVyOiBGb3JtQ29udHJvbGxlcixcbiAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nRm9ybUNvbXBpbGUoZm9ybUVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgLy8gU2V0dXAgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgY29udHJvbFxuICAgICAgICBmb3JtRWxlbWVudC5hZGRDbGFzcyhQUklTVElORV9DTEFTUykuYWRkQ2xhc3MoVkFMSURfQ0xBU1MpO1xuXG4gICAgICAgIHZhciBuYW1lQXR0ciA9IGF0dHIubmFtZSA/ICduYW1lJyA6IChpc05nRm9ybSAmJiBhdHRyLm5nRm9ybSA/ICduZ0Zvcm0nIDogZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHJlOiBmdW5jdGlvbiBuZ0Zvcm1QcmVMaW5rKHNjb3BlLCBmb3JtRWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgICAgIHZhciBjb250cm9sbGVyID0gY3RybHNbMF07XG5cbiAgICAgICAgICAgIC8vIGlmIGBhY3Rpb25gIGF0dHIgaXMgbm90IHByZXNlbnQgb24gdGhlIGZvcm0sIHByZXZlbnQgdGhlIGRlZmF1bHQgYWN0aW9uIChzdWJtaXNzaW9uKVxuICAgICAgICAgICAgaWYgKCEoJ2FjdGlvbicgaW4gYXR0cikpIHtcbiAgICAgICAgICAgICAgLy8gd2UgY2FuJ3QgdXNlIGpxIGV2ZW50cyBiZWNhdXNlIGlmIGEgZm9ybSBpcyBkZXN0cm95ZWQgZHVyaW5nIHN1Ym1pc3Npb24gdGhlIGRlZmF1bHRcbiAgICAgICAgICAgICAgLy8gYWN0aW9uIGlzIG5vdCBwcmV2ZW50ZWQuIHNlZSAjMTIzOFxuICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAvLyBJRSA5IGlzIG5vdCBhZmZlY3RlZCBiZWNhdXNlIGl0IGRvZXNuJ3QgZmlyZSBhIHN1Ym1pdCBldmVudCBhbmQgdHJ5IHRvIGRvIGEgZnVsbFxuICAgICAgICAgICAgICAvLyBwYWdlIHJlbG9hZCBpZiB0aGUgZm9ybSB3YXMgZGVzdHJveWVkIGJ5IHN1Ym1pc3Npb24gb2YgdGhlIGZvcm0gdmlhIGEgY2xpY2sgaGFuZGxlclxuICAgICAgICAgICAgICAvLyBvbiBhIGJ1dHRvbiBpbiB0aGUgZm9ybS4gTG9va3MgbGlrZSBhbiBJRTkgc3BlY2lmaWMgYnVnLlxuICAgICAgICAgICAgICB2YXIgaGFuZGxlRm9ybVN1Ym1pc3Npb24gPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci4kc2V0U3VibWl0dGVkKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXJGbihmb3JtRWxlbWVudFswXSwgJ3N1Ym1pdCcsIGhhbmRsZUZvcm1TdWJtaXNzaW9uKTtcblxuICAgICAgICAgICAgICAvLyB1bnJlZ2lzdGVyIHRoZSBwcmV2ZW50RGVmYXVsdCBsaXN0ZW5lciBzbyB0aGF0IHdlIGRvbid0IG5vdCBsZWFrIG1lbW9yeSBidXQgaW4gYVxuICAgICAgICAgICAgICAvLyB3YXkgdGhhdCB3aWxsIGFjaGlldmUgdGhlIHByZXZlbnRpb24gb2YgdGhlIGRlZmF1bHQgYWN0aW9uLlxuICAgICAgICAgICAgICBmb3JtRWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihmb3JtRWxlbWVudFswXSwgJ3N1Ym1pdCcsIGhhbmRsZUZvcm1TdWJtaXNzaW9uKTtcbiAgICAgICAgICAgICAgICB9LCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGFyZW50Rm9ybUN0cmwgPSBjdHJsc1sxXSB8fCBjb250cm9sbGVyLiQkcGFyZW50Rm9ybTtcbiAgICAgICAgICAgIHBhcmVudEZvcm1DdHJsLiRhZGRDb250cm9sKGNvbnRyb2xsZXIpO1xuXG4gICAgICAgICAgICB2YXIgc2V0dGVyID0gbmFtZUF0dHIgPyBnZXRTZXR0ZXIoY29udHJvbGxlci4kbmFtZSkgOiBub29wO1xuXG4gICAgICAgICAgICBpZiAobmFtZUF0dHIpIHtcbiAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCBjb250cm9sbGVyKTtcbiAgICAgICAgICAgICAgYXR0ci4kb2JzZXJ2ZShuYW1lQXR0ciwgZnVuY3Rpb24obmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlci4kbmFtZSA9PT0gbmV3VmFsdWUpIHJldHVybjtcbiAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci4kJHBhcmVudEZvcm0uJCRyZW5hbWVDb250cm9sKGNvbnRyb2xsZXIsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBzZXR0ZXIgPSBnZXRTZXR0ZXIoY29udHJvbGxlci4kbmFtZSk7XG4gICAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCBjb250cm9sbGVyKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3JtRWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci4kJHBhcmVudEZvcm0uJHJlbW92ZUNvbnRyb2woY29udHJvbGxlcik7XG4gICAgICAgICAgICAgIHNldHRlcihzY29wZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgZXh0ZW5kKGNvbnRyb2xsZXIsIG51bGxGb3JtQ3RybCk7IC8vc3RvcCBwcm9wYWdhdGluZyBjaGlsZCBkZXN0cnVjdGlvbiBoYW5kbGVycyB1cHdhcmRzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtRGlyZWN0aXZlO1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0dGVyKGV4cHJlc3Npb24pIHtcbiAgICAgIGlmIChleHByZXNzaW9uID09PSAnJykge1xuICAgICAgICAvL2NyZWF0ZSBhbiBhc3NpZ25hYmxlIGV4cHJlc3Npb24sIHNvIGZvcm1zIHdpdGggYW4gZW1wdHkgbmFtZSBjYW4gYmUgcmVuYW1lZCBsYXRlclxuICAgICAgICByZXR1cm4gJHBhcnNlKCd0aGlzW1wiXCJdJykuYXNzaWduO1xuICAgICAgfVxuICAgICAgcmV0dXJuICRwYXJzZShleHByZXNzaW9uKS5hc3NpZ24gfHwgbm9vcDtcbiAgICB9XG4gIH1dO1xufTtcblxudmFyIGZvcm1EaXJlY3RpdmUgPSBmb3JtRGlyZWN0aXZlRmFjdG9yeSgpO1xudmFyIG5nRm9ybURpcmVjdGl2ZSA9IGZvcm1EaXJlY3RpdmVGYWN0b3J5KHRydWUpO1xuXG4vKiBnbG9iYWwgVkFMSURfQ0xBU1M6IGZhbHNlLFxuICBJTlZBTElEX0NMQVNTOiBmYWxzZSxcbiAgUFJJU1RJTkVfQ0xBU1M6IGZhbHNlLFxuICBESVJUWV9DTEFTUzogZmFsc2UsXG4gIFVOVE9VQ0hFRF9DTEFTUzogZmFsc2UsXG4gIFRPVUNIRURfQ0xBU1M6IGZhbHNlLFxuICBuZ01vZGVsTWluRXJyOiBmYWxzZSxcbiovXG5cbi8vIFJlZ2V4IGNvZGUgaXMgb2J0YWluZWQgZnJvbSBTTzogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzE0MzA3MC9qYXZhc2NyaXB0LXJlZ2V4LWlzby1kYXRldGltZSNhbnN3ZXItMzE0MzIzMVxudmFyIElTT19EQVRFX1JFR0VYUCA9IC9cXGR7NH0tWzAxXVxcZC1bMC0zXVxcZFRbMC0yXVxcZDpbMC01XVxcZDpbMC01XVxcZFxcLlxcZCsoWystXVswLTJdXFxkOlswLTVdXFxkfFopLztcbi8vIFNlZSB2YWxpZCBVUkxzIGluIFJGQzM5ODcgKGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODcpXG4vLyBOb3RlOiBXZSBhcmUgYmVpbmcgbW9yZSBsZW5pZW50LCBiZWNhdXNlIGJyb3dzZXJzIGFyZSB0b28uXG4vLyAgIDEuIFNjaGVtZVxuLy8gICAyLiBTbGFzaGVzXG4vLyAgIDMuIFVzZXJuYW1lXG4vLyAgIDQuIFBhc3N3b3JkXG4vLyAgIDUuIEhvc3RuYW1lXG4vLyAgIDYuIFBvcnRcbi8vICAgNy4gUGF0aFxuLy8gICA4LiBRdWVyeVxuLy8gICA5LiBGcmFnbWVudFxuLy8gICAgICAgICAgICAgICAgIDExMTExMTExMTExMTExMTEgMjIyICAgMzMzMzMzICAgIDQ0NDQ0ICAgICAgICA1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTUgICAgNjY2ICAgICA3Nzc3Nzc3NyAgICAgODg4ODg4OCAgICAgOTk5XG52YXIgVVJMX1JFR0VYUCA9IC9eW2Etel1bYS16XFxkListXSo6XFwvKig/OlteOkBdKyg/OjpbXkBdKyk/QCk/KD86W15cXHM6Lz8jXSt8XFxbW2EtZlxcZDpdK1xcXSkoPzo6XFxkKyk/KD86XFwvW14/I10qKT8oPzpcXD9bXiNdKik/KD86Iy4qKT8kL2k7XG52YXIgRU1BSUxfUkVHRVhQID0gL15bYS16MC05ISMkJSYnKitcXC89P15fYHt8fX4uLV0rQFthLXowLTldKFthLXowLTktXSpbYS16MC05XSk/KFxcLlthLXowLTldKFthLXowLTktXSpbYS16MC05XSk/KSokL2k7XG52YXIgTlVNQkVSX1JFR0VYUCA9IC9eXFxzKihcXC18XFwrKT8oXFxkK3woXFxkKihcXC5cXGQqKSkpKFtlRV1bKy1dP1xcZCspP1xccyokLztcbnZhciBEQVRFX1JFR0VYUCA9IC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSkkLztcbnZhciBEQVRFVElNRUxPQ0FMX1JFR0VYUCA9IC9eKFxcZHs0fSktKFxcZFxcZCktKFxcZFxcZClUKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoXFwuXFxkezEsM30pPyk/JC87XG52YXIgV0VFS19SRUdFWFAgPSAvXihcXGR7NH0pLVcoXFxkXFxkKSQvO1xudmFyIE1PTlRIX1JFR0VYUCA9IC9eKFxcZHs0fSktKFxcZFxcZCkkLztcbnZhciBUSU1FX1JFR0VYUCA9IC9eKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoXFwuXFxkezEsM30pPyk/JC87XG5cbnZhciBpbnB1dFR5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0ZXh0XVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3RhbmRhcmQgSFRNTCB0ZXh0IGlucHV0IHdpdGggYW5ndWxhciBkYXRhIGJpbmRpbmcsIGluaGVyaXRlZCBieSBtb3N0IG9mIHRoZSBgaW5wdXRgIGVsZW1lbnRzLlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB2YWx1ZSBkb2VzIG5vdCBtYXRjaFxuICAgKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAqICAgIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbbmdUcmltPXRydWVdIElmIHNldCB0byBmYWxzZSBBbmd1bGFyIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgdHJpbSB0aGUgaW5wdXQuXG4gICAqICAgIFRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQgZm9yIGlucHV0W3R5cGU9cGFzc3dvcmRdIGNvbnRyb2xzLCB3aGljaCB3aWxsIG5ldmVyIHRyaW0gdGhlXG4gICAqICAgIGlucHV0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cInRleHQtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidGV4dElucHV0RXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3RleHRJbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgICAgIHRleHQ6ICdndWVzdCcsXG4gICAgICAgICAgICAgICAgIHdvcmQ6IC9eXFxzKlxcdypcXHMqJC9cbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5TaW5nbGUgd29yZDpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIG5nLXBhdHRlcm49XCJleGFtcGxlLndvcmRcIiByZXF1aXJlZCBuZy10cmltPVwiZmFsc2VcIj5cbiAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucGF0dGVyblwiPlxuICAgICAgICAgICAgICAgU2luZ2xlIHdvcmQgb25seSE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8dHQ+dGV4dCA9IHt7ZXhhbXBsZS50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB0ZXh0ID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudGV4dCcpKTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2d1ZXN0Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0VxdWFsKCd0ZXh0ID0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBtdWx0aSB3b3JkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2hlbGxvIHdvcmxkJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3RleHQnOiB0ZXh0SW5wdXRUeXBlLFxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGlucHV0XG4gICAgICogQG5hbWUgaW5wdXRbZGF0ZV1cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIElucHV0IHdpdGggZGF0ZSB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICAgKiB0aGUgSFRNTDUgZGF0ZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAgKiBkYXRlIGZvcm1hdCAoeXl5eS1NTS1kZCksIGZvciBleGFtcGxlOiBgMjAwOS0wMS0wNmAuIFNpbmNlIG1hbnlcbiAgICAgKiBtb2Rlcm4gYnJvd3NlcnMgZG8gbm90IHlldCBzdXBwb3J0IHRoaXMgaW5wdXQgdHlwZSwgaXQgaXMgaW1wb3J0YW50IHRvIHByb3ZpZGUgY3VlcyB0byB1c2VycyBvbiB0aGVcbiAgICAgKiBleHBlY3RlZCBpbnB1dCBmb3JtYXQgdmlhIGEgcGxhY2Vob2xkZXIgb3IgbGFiZWwuXG4gICAgICpcbiAgICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuIFRoaXMgbXVzdCBiZSBhXG4gICAgICogICB2YWxpZCBJU08gZGF0ZSBzdHJpbmcgKHl5eXktTU0tZGQpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXMgYXR0cmlidXRlXG4gICAgICogICAoZS5nLiBgbWluPVwie3ttaW5EYXRlIHwgZGF0ZToneXl5eS1NTS1kZCd9fVwiYCkuIE5vdGUgdGhhdCBgbWluYCB3aWxsIGFsc28gYWRkIG5hdGl2ZSBIVE1MNVxuICAgICAqICAgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4gVGhpcyBtdXN0IGJlXG4gICAgICogICBhIHZhbGlkIElTTyBkYXRlIHN0cmluZyAoeXl5eS1NTS1kZCkuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpcyBhdHRyaWJ1dGVcbiAgICAgKiAgIChlLmcuIGBtYXg9XCJ7e21heERhdGUgfCBkYXRlOid5eXl5LU1NLWRkJ319XCJgKS4gTm90ZSB0aGF0IGBtYXhgIHdpbGwgYWxzbyBhZGQgbmF0aXZlIEhUTUw1XG4gICAgICogICBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIGRhdGUgc3RyaW5nXG4gICAgICogICB0aGUgYG5nTWluYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1pbmAgYXR0cmlidXRlLlxuICAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyBkYXRlIHN0cmluZ1xuICAgICAqICAgdGhlIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgPGV4YW1wbGUgbmFtZT1cImRhdGUtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiZGF0ZUlucHV0RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2RhdGVJbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEzLCA5LCAyMilcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgICAgPGxhYmVsIGZvcj1cImV4YW1wbGVJbnB1dFwiPlBpY2sgYSBkYXRlIGluIDIwMTM6PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImRhdGVcIiBpZD1cImV4YW1wbGVJbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTS1kZFwiIG1pbj1cIjIwMTMtMDEtMDFcIiBtYXg9XCIyMDEzLTEyLTMxXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLmRhdGVcIj5cbiAgICAgICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFwifX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRcIicpKTtcbiAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLlxuICAgICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICAgIHZhciBzY3IgPSBcInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7IFwiICtcbiAgICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcyMDEzLTEwLTIyJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldElucHV0KCcyMDE1LTAxLTAxJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAgICovXG4gICdkYXRlJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnZGF0ZScsIERBVEVfUkVHRVhQLFxuICAgICAgICAgY3JlYXRlRGF0ZVBhcnNlcihEQVRFX1JFR0VYUCwgWyd5eXl5JywgJ01NJywgJ2RkJ10pLFxuICAgICAgICAgJ3l5eXktTU0tZGQnKSxcblxuICAgLyoqXG4gICAgKiBAbmdkb2MgaW5wdXRcbiAgICAqIEBuYW1lIGlucHV0W2RhdGV0aW1lLWxvY2FsXVxuICAgICpcbiAgICAqIEBkZXNjcmlwdGlvblxuICAgICogSW5wdXQgd2l0aCBkYXRldGltZSB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICAqIHRoZSBIVE1MNSBkYXRlIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAqIGxvY2FsIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbTpzcyksIGZvciBleGFtcGxlOiBgMjAxMC0xMi0yOFQxNDo1NzowMGAuXG4gICAgKlxuICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgKlxuICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgICpcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvblxuICAgICogICBpbnNpZGUgdGhpcyBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluRGF0ZXRpbWVMb2NhbCB8IGRhdGU6J3l5eXktTU0tZGRUSEg6bW06c3MnfX1cImApLlxuICAgICogICBOb3RlIHRoYXQgYG1pbmAgd2lsbCBhbHNvIGFkZCBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgICogICBUaGlzIG11c3QgYmUgYSB2YWxpZCBJU08gZGF0ZXRpbWUgZm9ybWF0ICh5eXl5LU1NLWRkVEhIOm1tOnNzKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uXG4gICAgKiAgIGluc2lkZSB0aGlzIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhEYXRldGltZUxvY2FsIHwgZGF0ZToneXl5eS1NTS1kZFRISDptbTpzcyd9fVwiYCkuXG4gICAgKiAgIE5vdGUgdGhhdCBgbWF4YCB3aWxsIGFsc28gYWRkIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSB0byB0aGUgRGF0ZSAvIElTTyBkYXRldGltZSBzdHJpbmdcbiAgICAqICAgdGhlIGBuZ01pbmAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtaW5gIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IHRvIHRoZSBEYXRlIC8gSVNPIGRhdGV0aW1lIHN0cmluZ1xuICAgICogICB0aGUgYG5nTWF4YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1heGAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAgKlxuICAgICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwiZGF0ZXRpbWVsb2NhbC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJkYXRlRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnZGF0ZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEwLCAxMSwgMjgsIDE0LCA1NylcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlSW5wdXRcIj5QaWNrIGEgZGF0ZSBiZXR3ZWVuIGluIDIwMTM6PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIGlkPVwiZXhhbXBsZUlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTS1kZFRISDptbTpzc1wiIG1pbj1cIjIwMDEtMDEtMDFUMDA6MDA6MDBcIiBtYXg9XCIyMDEzLTEyLTMxVDAwOjAwOjAwXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5kYXRldGltZWxvY2FsXCI+XG4gICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkVEhIOm1tOnNzXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgPC9mb3JtPlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRUSEg6bW06c3NcIicpKTtcbiAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudmFsdWUnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMC0xMi0yOFQxNDo1NzowMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMVQyMzo1OTowMCcpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICAqL1xuICAnZGF0ZXRpbWUtbG9jYWwnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdkYXRldGltZWxvY2FsJywgREFURVRJTUVMT0NBTF9SRUdFWFAsXG4gICAgICBjcmVhdGVEYXRlUGFyc2VyKERBVEVUSU1FTE9DQUxfUkVHRVhQLCBbJ3l5eXknLCAnTU0nLCAnZGQnLCAnSEgnLCAnbW0nLCAnc3MnLCAnc3NzJ10pLFxuICAgICAgJ3l5eXktTU0tZGRUSEg6bW06c3Muc3NzJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0aW1lXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSW5wdXQgd2l0aCB0aW1lIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgKiB0aGUgSFRNTDUgZGF0ZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAqIGxvY2FsIHRpbWUgZm9ybWF0IChISDptbTpzcyksIGZvciBleGFtcGxlOiBgMTQ6NTc6MDBgLiBNb2RlbCBtdXN0IGJlIGEgRGF0ZSBvYmplY3QuIFRoaXMgYmluZGluZyB3aWxsIGFsd2F5cyBvdXRwdXQgYVxuICAgKiBEYXRlIG9iamVjdCB0byB0aGUgbW9kZWwgb2YgSmFudWFyeSAxLCAxOTcwLCBvciBsb2NhbCBkYXRlIGBuZXcgRGF0ZSgxOTcwLCAwLCAxLCBISCwgbW0sIHNzKWAuXG4gICAqXG4gICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAqXG4gICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB0aW1lIGZvcm1hdCAoSEg6bW06c3MpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluVGltZSB8IGRhdGU6J0hIOm1tOnNzJ319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGRcbiAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIHRpbWUgZm9ybWF0IChISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhUaW1lIHwgZGF0ZTonSEg6bW06c3MnfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB0aW1lIHN0cmluZyB0aGVcbiAgICogICBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB0aW1lIHN0cmluZyB0aGVcbiAgICogICBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJ0aW1lLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInRpbWVFeGFtcGxlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3RpbWVFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMTk3MCwgMCwgMSwgMTQsIDU3LCAwKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgPC9zY3JpcHQ+XG4gICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgPGxhYmVsIGZvcj1cImV4YW1wbGVJbnB1dFwiPlBpY2sgYSBiZXR3ZWVuIDhhbSBhbmQgNXBtOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGltZVwiIGlkPVwiZXhhbXBsZUlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiSEg6bW06c3NcIiBtaW49XCIwODowMDowMFwiIG1heD1cIjE3OjAwOjAwXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci50aW1lXCI+XG4gICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJISDptbTpzc1wifX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgPC9mb3JtPlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJISDptbTpzc1wiJykpO1xuICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS52YWx1ZScpKTtcblxuICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLlxuICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgIHZhciBzY3IgPSBcInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7IFwiICtcbiAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpO1xuICAgICAgfVxuXG4gICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcxNDo1NzowMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjM6NTk6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3RpbWUnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCd0aW1lJywgVElNRV9SRUdFWFAsXG4gICAgICBjcmVhdGVEYXRlUGFyc2VyKFRJTUVfUkVHRVhQLCBbJ0hIJywgJ21tJywgJ3NzJywgJ3NzcyddKSxcbiAgICAgJ0hIOm1tOnNzLnNzcycpLFxuXG4gICAvKipcbiAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICogQG5hbWUgaW5wdXRbd2Vla11cbiAgICAqXG4gICAgKiBAZGVzY3JpcHRpb25cbiAgICAqIElucHV0IHdpdGggd2Vlay1vZi10aGUteWVhciB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbiB0byBEYXRlLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgICogdGhlIEhUTUw1IHdlZWsgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgICogd2VlayBmb3JtYXQgKHl5eXktVyMjKSwgZm9yIGV4YW1wbGU6IGAyMDEzLVcwMmAuXG4gICAgKlxuICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgKlxuICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgICpcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIHdlZWsgZm9ybWF0ICh5eXl5LVcjIykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluV2VlayB8IGRhdGU6J3l5eXktV3d3J319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGRcbiAgICAqICAgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cbiAgICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIHdlZWsgZm9ybWF0ICh5eXl5LVcjIykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1heD1cInt7bWF4V2VlayB8IGRhdGU6J3l5eXktV3d3J319XCJgKS4gTm90ZSB0aGF0IGBtYXhgIHdpbGwgYWxzbyBhZGRcbiAgICAqICAgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgICogICB0aGUgYG5nTWluYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1pbmAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvIHRoZSBEYXRlIC8gSVNPIHdlZWsgc3RyaW5nXG4gICAgKiAgIHRoZSBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAqXG4gICAgKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJ3ZWVrLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIndlZWtFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQ+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnd2Vla0V4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEzLCAwLCAzKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgIDwvc2NyaXB0PlxuICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICA8bGFiZWw+UGljayBhIGRhdGUgYmV0d2VlbiBpbiAyMDEzOlxuICAgICAgICAgIDxpbnB1dCBpZD1cImV4YW1wbGVJbnB1dFwiIHR5cGU9XCJ3ZWVrXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJZWVlZLVcjI1wiIG1pbj1cIjIwMTItVzMyXCJcbiAgICAgICAgICAgICAgICAgbWF4PVwiMjAxMy1XNTJcIiByZXF1aXJlZCAvPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLndlZWtcIj5cbiAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktV3d3XCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgPC9mb3JtPlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktV3d3XCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtVzAxJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcyMDE1LVcwMScpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICAqL1xuICAnd2Vlayc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ3dlZWsnLCBXRUVLX1JFR0VYUCwgd2Vla1BhcnNlciwgJ3l5eXktV3d3JyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFttb250aF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIElucHV0IHdpdGggbW9udGggdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAqIHRoZSBIVE1MNSBtb250aCBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAqIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSksIGZvciBleGFtcGxlOiBgMjAwOS0wMWAuXG4gICAqXG4gICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAqIElmIHRoZSBtb2RlbCBpcyBub3Qgc2V0IHRvIHRoZSBmaXJzdCBvZiB0aGUgbW9udGgsIHRoZSBuZXh0IHZpZXcgdG8gbW9kZWwgdXBkYXRlIHdpbGwgc2V0IGl0XG4gICAqIHRvIHRoZSBmaXJzdCBvZiB0aGUgbW9udGguXG4gICAqXG4gICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyBtb250aCBmb3JtYXQgKHl5eXktTU0pLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluTW9udGggfCBkYXRlOid5eXl5LU1NJ319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGRcbiAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSkuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhNb250aCB8IGRhdGU6J3l5eXktTU0nfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgKiAgIHRoZSBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgKiAgIHRoZSBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm1vbnRoLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIm1vbnRoRXhhbXBsZVwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdtb250aEV4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEzLCA5LCAxKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgPC9zY3JpcHQ+XG4gICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIG1vbnRoIGluIDIwMTM6PC9sYWJlbD5cbiAgICAgICA8aW5wdXQgaWQ9XCJleGFtcGxlSW5wdXRcIiB0eXBlPVwibW9udGhcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTVwiIG1pbj1cIjIwMTMtMDFcIiBtYXg9XCIyMDEzLTEyXCIgcmVxdWlyZWQgLz5cbiAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IubW9udGhcIj5cbiAgICAgICAgICAgIE5vdCBhIHZhbGlkIG1vbnRoITwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU1cIn19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgPC9mb3JtPlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtMTAnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ21vbnRoJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnbW9udGgnLCBNT05USF9SRUdFWFAsXG4gICAgIGNyZWF0ZURhdGVQYXJzZXIoTU9OVEhfUkVHRVhQLCBbJ3l5eXknLCAnTU0nXSksXG4gICAgICd5eXl5LU1NJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFtudW1iZXJdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggbnVtYmVyIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBTZXRzIHRoZSBgbnVtYmVyYCB2YWxpZGF0aW9uXG4gICAqIGVycm9yIGlmIG5vdCBhIHZhbGlkIG51bWJlci5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIG9mIHR5cGUgYG51bWJlcmAgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICogQmUgYXdhcmUgdGhhdCBhIHN0cmluZyBjb250YWluaW5nIGEgbnVtYmVyIGlzIG5vdCBlbm91Z2guIFNlZSB0aGUge0BsaW5rIG5nTW9kZWw6bnVtZm10fVxuICAgKiBlcnJvciBkb2NzIGZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBhbiBleGFtcGxlIG9mIGhvdyB0byBjb252ZXJ0IHlvdXIgbW9kZWwgaWYgbmVjZXNzYXJ5LlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogIyMgSXNzdWVzIHdpdGggSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uXG4gICAqXG4gICAqIEluIGJyb3dzZXJzIHRoYXQgZm9sbG93IHRoZVxuICAgKiBbSFRNTDUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNudW1iZXItc3RhdGUtJTI4dHlwZT1udW1iZXIlMjkpLFxuICAgKiBgaW5wdXRbbnVtYmVyXWAgZG9lcyBub3Qgd29yayBhcyBleHBlY3RlZCB3aXRoIHtAbGluayBuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnMuYWxsb3dJbnZhbGlkYH0uXG4gICAqIElmIGEgbm9uLW51bWJlciBpcyBlbnRlcmVkIGluIHRoZSBpbnB1dCwgdGhlIGJyb3dzZXIgd2lsbCByZXBvcnQgdGhlIHZhbHVlIGFzIGFuIGVtcHR5IHN0cmluZyxcbiAgICogd2hpY2ggbWVhbnMgdGhlIHZpZXcgLyBtb2RlbCB2YWx1ZXMgaW4gYG5nTW9kZWxgIGFuZCBzdWJzZXF1ZW50bHkgdGhlIHNjb3BlIHZhbHVlXG4gICAqIHdpbGwgYWxzbyBiZSBhbiBlbXB0eSBzdHJpbmcuXG4gICAqXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB2YWx1ZSBkb2VzIG5vdCBtYXRjaFxuICAgKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAqICAgIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cIm51bWJlci1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJudW1iZXJFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbnVtYmVyRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgICAgdmFsdWU6IDEyXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8bGFiZWw+TnVtYmVyOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgbWluPVwiMFwiIG1heD1cIjk5XCIgcmVxdWlyZWQ+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IubnVtYmVyXCI+XG4gICAgICAgICAgICAgICBOb3QgdmFsaWQgbnVtYmVyITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZX19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudmFsdWUnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMTInKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJzEyMycpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnbnVtYmVyJzogbnVtYmVySW5wdXRUeXBlLFxuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt1cmxdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggVVJMIHZhbGlkYXRpb24uIFNldHMgdGhlIGB1cmxgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBjb250ZW50IGlzIG5vdCBhXG4gICAqIHZhbGlkIFVSTC5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogKipOb3RlOioqIGBpbnB1dFt1cmxdYCB1c2VzIGEgcmVnZXggdG8gdmFsaWRhdGUgdXJscyB0aGF0IGlzIGRlcml2ZWQgZnJvbSB0aGUgcmVnZXhcbiAgICogdXNlZCBpbiBDaHJvbWl1bS4gSWYgeW91IG5lZWQgc3RyaWN0ZXIgdmFsaWRhdGlvbiwgeW91IGNhbiB1c2UgYG5nLXBhdHRlcm5gIG9yIG1vZGlmeVxuICAgKiB0aGUgYnVpbHQtaW4gdmFsaWRhdG9ycyAoc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZm9ybXMgRm9ybXMgZ3VpZGV9KVxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAqICAgIGFueSBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0dGVybiBTaW1pbGFyIHRvIGBuZ1BhdHRlcm5gIGV4Y2VwdCB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgdGhlIGFjdHVhbCBzdHJpbmdcbiAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICBhcyBpbiB0aGUgbmdQYXR0ZXJuIGRpcmVjdGl2ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwgdmFsdWUgZG9lcyBub3QgbWF0Y2hcbiAgICogICAgYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJ1cmwtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidXJsRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3VybEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLnVybCA9IHtcbiAgICAgICAgICAgICAgICAgdGV4dDogJ2h0dHA6Ly9nb29nbGUuY29tJ1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlVSTDpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInVybFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwidXJsLnRleHRcIiByZXF1aXJlZD5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci51cmxcIj5cbiAgICAgICAgICAgICAgIE5vdCB2YWxpZCB1cmwhPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPHR0PnRleHQgPSB7e3VybC50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IudXJsID0ge3shIW15Rm9ybS4kZXJyb3IudXJsfX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygndXJsLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VybC50ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignaHR0cDovL2dvb2dsZS5jb20nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCB1cmwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYm94Jyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3VybCc6IHVybElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbZW1haWxdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggZW1haWwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYGVtYWlsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiBub3QgYSB2YWxpZCBlbWFpbFxuICAgKiBhZGRyZXNzLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogYGlucHV0W2VtYWlsXWAgdXNlcyBhIHJlZ2V4IHRvIHZhbGlkYXRlIGVtYWlsIGFkZHJlc3NlcyB0aGF0IGlzIGRlcml2ZWQgZnJvbSB0aGUgcmVnZXhcbiAgICogdXNlZCBpbiBDaHJvbWl1bS4gSWYgeW91IG5lZWQgc3RyaWN0ZXIgdmFsaWRhdGlvbiAoZS5nLiByZXF1aXJpbmcgYSB0b3AtbGV2ZWwgZG9tYWluKSwgeW91IGNhblxuICAgKiB1c2UgYG5nLXBhdHRlcm5gIG9yIG1vZGlmeSB0aGUgYnVpbHQtaW4gdmFsaWRhdG9ycyAoc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZm9ybXMgRm9ybXMgZ3VpZGV9KVxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAqICAgIGFueSBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0dGVybiBTaW1pbGFyIHRvIGBuZ1BhdHRlcm5gIGV4Y2VwdCB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgdGhlIGFjdHVhbCBzdHJpbmdcbiAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICBhcyBpbiB0aGUgbmdQYXR0ZXJuIGRpcmVjdGl2ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwgdmFsdWUgZG9lcyBub3QgbWF0Y2hcbiAgICogICAgYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJlbWFpbC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJlbWFpbEV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdlbWFpbEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsID0ge1xuICAgICAgICAgICAgICAgICB0ZXh0OiAnbWVAZXhhbXBsZS5jb20nXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgICAgPGxhYmVsPkVtYWlsOlxuICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJlbWFpbFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZW1haWwudGV4dFwiIHJlcXVpcmVkPlxuICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZW1haWxcIj5cbiAgICAgICAgICAgICAgICAgTm90IHZhbGlkIGVtYWlsITwvc3Bhbj5cbiAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICA8dHQ+dGV4dCA9IHt7ZW1haWwudGV4dH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5lbWFpbCA9IHt7ISFteUZvcm0uJGVycm9yLmVtYWlsfX08L3R0Pjxici8+XG4gICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB0ZXh0ID0gZWxlbWVudChieS5iaW5kaW5nKCdlbWFpbC50ZXh0JykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdlbWFpbC50ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignbWVAZXhhbXBsZS5jb20nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0VxdWFsKCd0ZXh0ID0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBub3QgZW1haWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygneHh4Jyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ2VtYWlsJzogZW1haWxJbnB1dFR5cGUsXG5cblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W3JhZGlvXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSFRNTCByYWRpbyBidXR0b24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgYG5nTW9kZWxgIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxuICAgKiAgICBOb3RlIHRoYXQgYHZhbHVlYCBvbmx5IHN1cHBvcnRzIGBzdHJpbmdgIHZhbHVlcywgaS5lLiB0aGUgc2NvcGUgbW9kZWwgbmVlZHMgdG8gYmUgYSBzdHJpbmcsXG4gICAqICAgIHRvby4gVXNlIGBuZ1ZhbHVlYCBpZiB5b3UgbmVlZCBjb21wbGV4IG1vZGVscyAoYG51bWJlcmAsIGBvYmplY3RgLCAuLi4pLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdWYWx1ZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gd2hpY2ggYG5nTW9kZWxgIHdpbGwgYmUgYmUgc2V0IHdoZW4gdGhlIHJhZGlvXG4gICAqICAgIGlzIHNlbGVjdGVkLiBTaG91bGQgYmUgdXNlZCBpbnN0ZWFkIG9mIHRoZSBgdmFsdWVgIGF0dHJpYnV0ZSBpZiB5b3UgbmVlZFxuICAgKiAgICBhIG5vbi1zdHJpbmcgYG5nTW9kZWxgIChgYm9vbGVhbmAsIGBhcnJheWAsIC4uLikuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwicmFkaW8taW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwicmFkaW9FeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgncmFkaW9FeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5jb2xvciA9IHtcbiAgICAgICAgICAgICAgICAgbmFtZTogJ2JsdWUnXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgJHNjb3BlLnNwZWNpYWxWYWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgXCJpZFwiOiBcIjEyMzQ1XCIsXG4gICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJncmVlblwiXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIHZhbHVlPVwicmVkXCI+XG4gICAgICAgICAgICAgUmVkXG4gICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cImNvbG9yLm5hbWVcIiBuZy12YWx1ZT1cInNwZWNpYWxWYWx1ZVwiPlxuICAgICAgICAgICAgIEdyZWVuXG4gICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cImNvbG9yLm5hbWVcIiB2YWx1ZT1cImJsdWVcIj5cbiAgICAgICAgICAgICBCbHVlXG4gICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPHR0PmNvbG9yID0ge3tjb2xvci5uYW1lIHwganNvbn19PC90dD48YnIvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICBOb3RlIHRoYXQgYG5nLXZhbHVlPVwic3BlY2lhbFZhbHVlXCJgIHNldHMgcmFkaW8gaXRlbSdzIHZhbHVlIHRvIGJlIHRoZSB2YWx1ZSBvZiBgJHNjb3BlLnNwZWNpYWxWYWx1ZWAuXG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY29sb3IgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvbG9yLm5hbWUnKSk7XG5cbiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbignYmx1ZScpO1xuXG4gICAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnY29sb3IubmFtZScpKS5nZXQoMCkuY2xpY2soKTtcblxuICAgICAgICAgICAgZXhwZWN0KGNvbG9yLmdldFRleHQoKSkudG9Db250YWluKCdyZWQnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3JhZGlvJzogcmFkaW9JbnB1dFR5cGUsXG5cblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W2NoZWNrYm94XVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSFRNTCBjaGVja2JveC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nVHJ1ZVZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nRmFsc2VWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIG5vdCBzZWxlY3RlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwiY2hlY2tib3gtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiY2hlY2tib3hFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY2hlY2tib3hFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5jaGVja2JveE1vZGVsID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlMSA6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWUyIDogJ1lFUydcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlZhbHVlMTpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2JveE1vZGVsLnZhbHVlMVwiPlxuICAgICAgICAgICA8L2xhYmVsPjxici8+XG4gICAgICAgICAgIDxsYWJlbD5WYWx1ZTI6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tib3hNb2RlbC52YWx1ZTJcIlxuICAgICAgICAgICAgICAgICAgICBuZy10cnVlLXZhbHVlPVwiJ1lFUydcIiBuZy1mYWxzZS12YWx1ZT1cIidOTydcIj5cbiAgICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMSA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTF9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMiA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUxID0gZWxlbWVudChieS5iaW5kaW5nKCdjaGVja2JveE1vZGVsLnZhbHVlMScpKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZTIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NoZWNrYm94TW9kZWwudmFsdWUyJykpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsdWUxLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdZRVMnKTtcblxuICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tib3hNb2RlbC52YWx1ZTEnKSkuY2xpY2soKTtcbiAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrYm94TW9kZWwudmFsdWUyJykpLmNsaWNrKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTEuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdOTycpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnY2hlY2tib3gnOiBjaGVja2JveElucHV0VHlwZSxcblxuICAnaGlkZGVuJzogbm9vcCxcbiAgJ2J1dHRvbic6IG5vb3AsXG4gICdzdWJtaXQnOiBub29wLFxuICAncmVzZXQnOiBub29wLFxuICAnZmlsZSc6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpIHtcbiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpID8gdmFsdWUgOiB2YWx1ZS50b1N0cmluZygpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpO1xufVxuXG5mdW5jdGlvbiBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgdmFyIHR5cGUgPSBsb3dlcmNhc2UoZWxlbWVudFswXS50eXBlKTtcblxuICAvLyBJbiBjb21wb3NpdGlvbiBtb2RlLCB1c2VycyBhcmUgc3RpbGwgaW5wdXRpbmcgaW50ZXJtZWRpYXRlIHRleHQgYnVmZmVyLFxuICAvLyBob2xkIHRoZSBsaXN0ZW5lciB1bnRpbCBjb21wb3NpdGlvbiBpcyBkb25lLlxuICAvLyBNb3JlIGFib3V0IGNvbXBvc2l0aW9uIGV2ZW50czogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NvbXBvc2l0aW9uRXZlbnRcbiAgaWYgKCEkc25pZmZlci5hbmRyb2lkKSB7XG4gICAgdmFyIGNvbXBvc2luZyA9IGZhbHNlO1xuXG4gICAgZWxlbWVudC5vbignY29tcG9zaXRpb25zdGFydCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGNvbXBvc2luZyA9IHRydWU7XG4gICAgfSk7XG5cbiAgICBlbGVtZW50Lm9uKCdjb21wb3NpdGlvbmVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgY29tcG9zaW5nID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBpZiAodGltZW91dCkge1xuICAgICAgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIGlmIChjb21wb3NpbmcpIHJldHVybjtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbCgpLFxuICAgICAgICBldmVudCA9IGV2ICYmIGV2LnR5cGU7XG5cbiAgICAvLyBCeSBkZWZhdWx0IHdlIHdpbGwgdHJpbSB0aGUgdmFsdWVcbiAgICAvLyBJZiB0aGUgYXR0cmlidXRlIG5nLXRyaW0gZXhpc3RzIHdlIHdpbGwgYXZvaWQgdHJpbW1pbmdcbiAgICAvLyBJZiBpbnB1dCB0eXBlIGlzICdwYXNzd29yZCcsIHRoZSB2YWx1ZSBpcyBuZXZlciB0cmltbWVkXG4gICAgaWYgKHR5cGUgIT09ICdwYXNzd29yZCcgJiYgKCFhdHRyLm5nVHJpbSB8fCBhdHRyLm5nVHJpbSAhPT0gJ2ZhbHNlJykpIHtcbiAgICAgIHZhbHVlID0gdHJpbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgYSBjb250cm9sIGlzIHN1ZmZlcmluZyBmcm9tIGJhZCBpbnB1dCAoZHVlIHRvIG5hdGl2ZSB2YWxpZGF0b3JzKSwgYnJvd3NlcnMgZGlzY2FyZCBpdHNcbiAgICAvLyB2YWx1ZSwgc28gaXQgbWF5IGJlIG5lY2Vzc2FyeSB0byByZXZhbGlkYXRlIChieSBjYWxsaW5nICRzZXRWaWV3VmFsdWUgYWdhaW4pIGV2ZW4gaWYgdGhlXG4gICAgLy8gY29udHJvbCdzIHZhbHVlIGlzIHRoZSBzYW1lIGVtcHR5IHZhbHVlIHR3aWNlIGluIGEgcm93LlxuICAgIGlmIChjdHJsLiR2aWV3VmFsdWUgIT09IHZhbHVlIHx8ICh2YWx1ZSA9PT0gJycgJiYgY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMpKSB7XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUodmFsdWUsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gaWYgdGhlIGJyb3dzZXIgZG9lcyBzdXBwb3J0IFwiaW5wdXRcIiBldmVudCwgd2UgYXJlIGZpbmUgLSBleGNlcHQgb24gSUU5IHdoaWNoIGRvZXNuJ3QgZmlyZSB0aGVcbiAgLy8gaW5wdXQgZXZlbnQgb24gYmFja3NwYWNlLCBkZWxldGUgb3IgY3V0XG4gIGlmICgkc25pZmZlci5oYXNFdmVudCgnaW5wdXQnKSkge1xuICAgIGVsZW1lbnQub24oJ2lucHV0JywgbGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0aW1lb3V0O1xuXG4gICAgdmFyIGRlZmVyTGlzdGVuZXIgPSBmdW5jdGlvbihldiwgaW5wdXQsIG9yaWdWYWx1ZSkge1xuICAgICAgaWYgKCF0aW1lb3V0KSB7XG4gICAgICAgIHRpbWVvdXQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICBpZiAoIWlucHV0IHx8IGlucHV0LnZhbHVlICE9PSBvcmlnVmFsdWUpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKGV2KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBrZXkgPSBldmVudC5rZXlDb2RlO1xuXG4gICAgICAvLyBpZ25vcmVcbiAgICAgIC8vICAgIGNvbW1hbmQgICAgICAgICAgICBtb2RpZmllcnMgICAgICAgICAgICAgICAgICAgYXJyb3dzXG4gICAgICBpZiAoa2V5ID09PSA5MSB8fCAoMTUgPCBrZXkgJiYga2V5IDwgMTkpIHx8ICgzNyA8PSBrZXkgJiYga2V5IDw9IDQwKSkgcmV0dXJuO1xuXG4gICAgICBkZWZlckxpc3RlbmVyKGV2ZW50LCB0aGlzLCB0aGlzLnZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8vIGlmIHVzZXIgbW9kaWZpZXMgaW5wdXQgdmFsdWUgdXNpbmcgY29udGV4dCBtZW51IGluIElFLCB3ZSBuZWVkIFwicGFzdGVcIiBhbmQgXCJjdXRcIiBldmVudHMgdG8gY2F0Y2ggaXRcbiAgICBpZiAoJHNuaWZmZXIuaGFzRXZlbnQoJ3Bhc3RlJykpIHtcbiAgICAgIGVsZW1lbnQub24oJ3Bhc3RlIGN1dCcsIGRlZmVyTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHVzZXIgcGFzdGUgaW50byBpbnB1dCB1c2luZyBtb3VzZSBvbiBvbGRlciBicm93c2VyXG4gIC8vIG9yIGZvcm0gYXV0b2NvbXBsZXRlIG9uIG5ld2VyIGJyb3dzZXIsIHdlIG5lZWQgXCJjaGFuZ2VcIiBldmVudCB0byBjYXRjaCBpdFxuICBlbGVtZW50Lm9uKCdjaGFuZ2UnLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gV29ya2Fyb3VuZCBmb3IgRmlyZWZveCB2YWxpZGF0aW9uICMxMjEwMi5cbiAgICB2YXIgdmFsdWUgPSBjdHJsLiRpc0VtcHR5KGN0cmwuJHZpZXdWYWx1ZSkgPyAnJyA6IGN0cmwuJHZpZXdWYWx1ZTtcbiAgICBpZiAoZWxlbWVudC52YWwoKSAhPT0gdmFsdWUpIHtcbiAgICAgIGVsZW1lbnQudmFsKHZhbHVlKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHdlZWtQYXJzZXIoaXNvV2VlaywgZXhpc3RpbmdEYXRlKSB7XG4gIGlmIChpc0RhdGUoaXNvV2VlaykpIHtcbiAgICByZXR1cm4gaXNvV2VlaztcbiAgfVxuXG4gIGlmIChpc1N0cmluZyhpc29XZWVrKSkge1xuICAgIFdFRUtfUkVHRVhQLmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIHBhcnRzID0gV0VFS19SRUdFWFAuZXhlYyhpc29XZWVrKTtcbiAgICBpZiAocGFydHMpIHtcbiAgICAgIHZhciB5ZWFyID0gK3BhcnRzWzFdLFxuICAgICAgICAgIHdlZWsgPSArcGFydHNbMl0sXG4gICAgICAgICAgaG91cnMgPSAwLFxuICAgICAgICAgIG1pbnV0ZXMgPSAwLFxuICAgICAgICAgIHNlY29uZHMgPSAwLFxuICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IDAsXG4gICAgICAgICAgZmlyc3RUaHVycyA9IGdldEZpcnN0VGh1cnNkYXlPZlllYXIoeWVhciksXG4gICAgICAgICAgYWRkRGF5cyA9ICh3ZWVrIC0gMSkgKiA3O1xuXG4gICAgICBpZiAoZXhpc3RpbmdEYXRlKSB7XG4gICAgICAgIGhvdXJzID0gZXhpc3RpbmdEYXRlLmdldEhvdXJzKCk7XG4gICAgICAgIG1pbnV0ZXMgPSBleGlzdGluZ0RhdGUuZ2V0TWludXRlcygpO1xuICAgICAgICBzZWNvbmRzID0gZXhpc3RpbmdEYXRlLmdldFNlY29uZHMoKTtcbiAgICAgICAgbWlsbGlzZWNvbmRzID0gZXhpc3RpbmdEYXRlLmdldE1pbGxpc2Vjb25kcygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgZmlyc3RUaHVycy5nZXREYXRlKCkgKyBhZGREYXlzLCBob3VycywgbWludXRlcywgc2Vjb25kcywgbWlsbGlzZWNvbmRzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTmFOO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEYXRlUGFyc2VyKHJlZ2V4cCwgbWFwcGluZykge1xuICByZXR1cm4gZnVuY3Rpb24oaXNvLCBkYXRlKSB7XG4gICAgdmFyIHBhcnRzLCBtYXA7XG5cbiAgICBpZiAoaXNEYXRlKGlzbykpIHtcbiAgICAgIHJldHVybiBpc287XG4gICAgfVxuXG4gICAgaWYgKGlzU3RyaW5nKGlzbykpIHtcbiAgICAgIC8vIFdoZW4gYSBkYXRlIGlzIEpTT04naWZpZWQgdG8gd3JhcHMgaXRzZWxmIGluc2lkZSBvZiBhbiBleHRyYVxuICAgICAgLy8gc2V0IG9mIGRvdWJsZSBxdW90ZXMuIFRoaXMgbWFrZXMgdGhlIGRhdGUgcGFyc2luZyBjb2RlIHVuYWJsZVxuICAgICAgLy8gdG8gbWF0Y2ggdGhlIGRhdGUgc3RyaW5nIGFuZCBwYXJzZSBpdCBhcyBhIGRhdGUuXG4gICAgICBpZiAoaXNvLmNoYXJBdCgwKSA9PSAnXCInICYmIGlzby5jaGFyQXQoaXNvLmxlbmd0aCAtIDEpID09ICdcIicpIHtcbiAgICAgICAgaXNvID0gaXNvLnN1YnN0cmluZygxLCBpc28ubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoSVNPX0RBVEVfUkVHRVhQLnRlc3QoaXNvKSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoaXNvKTtcbiAgICAgIH1cbiAgICAgIHJlZ2V4cC5sYXN0SW5kZXggPSAwO1xuICAgICAgcGFydHMgPSByZWdleHAuZXhlYyhpc28pO1xuXG4gICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgcGFydHMuc2hpZnQoKTtcbiAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICBtYXAgPSB7XG4gICAgICAgICAgICB5eXl5OiBkYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICBNTTogZGF0ZS5nZXRNb250aCgpICsgMSxcbiAgICAgICAgICAgIGRkOiBkYXRlLmdldERhdGUoKSxcbiAgICAgICAgICAgIEhIOiBkYXRlLmdldEhvdXJzKCksXG4gICAgICAgICAgICBtbTogZGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICAgICAgICBzczogZGF0ZS5nZXRTZWNvbmRzKCksXG4gICAgICAgICAgICBzc3M6IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLyAxMDAwXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXAgPSB7IHl5eXk6IDE5NzAsIE1NOiAxLCBkZDogMSwgSEg6IDAsIG1tOiAwLCBzczogMCwgc3NzOiAwIH07XG4gICAgICAgIH1cblxuICAgICAgICBmb3JFYWNoKHBhcnRzLCBmdW5jdGlvbihwYXJ0LCBpbmRleCkge1xuICAgICAgICAgIGlmIChpbmRleCA8IG1hcHBpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICBtYXBbbWFwcGluZ1tpbmRleF1dID0gK3BhcnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKG1hcC55eXl5LCBtYXAuTU0gLSAxLCBtYXAuZGQsIG1hcC5ISCwgbWFwLm1tLCBtYXAuc3MgfHwgMCwgbWFwLnNzcyAqIDEwMDAgfHwgMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIE5hTjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGF0ZUlucHV0VHlwZSh0eXBlLCByZWdleHAsIHBhcnNlRGF0ZSwgZm9ybWF0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBkeW5hbWljRGF0ZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyLCAkZmlsdGVyKSB7XG4gICAgYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKTtcbiAgICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpO1xuICAgIHZhciB0aW1lem9uZSA9IGN0cmwgJiYgY3RybC4kb3B0aW9ucyAmJiBjdHJsLiRvcHRpb25zLnRpbWV6b25lO1xuICAgIHZhciBwcmV2aW91c0RhdGU7XG5cbiAgICBjdHJsLiQkcGFyc2VyTmFtZSA9IHR5cGU7XG4gICAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoY3RybC4kaXNFbXB0eSh2YWx1ZSkpIHJldHVybiBudWxsO1xuICAgICAgaWYgKHJlZ2V4cC50ZXN0KHZhbHVlKSkge1xuICAgICAgICAvLyBOb3RlOiBXZSBjYW5ub3QgcmVhZCBjdHJsLiRtb2RlbFZhbHVlLCBhcyB0aGVyZSBtaWdodCBiZSBhIGRpZmZlcmVudFxuICAgICAgICAvLyBwYXJzZXIvZm9ybWF0dGVyIGluIHRoZSBwcm9jZXNzaW5nIGNoYWluIHNvIHRoYXQgdGhlIG1vZGVsXG4gICAgICAgIC8vIGNvbnRhaW5zIHNvbWUgZGlmZmVyZW50IGRhdGEgZm9ybWF0IVxuICAgICAgICB2YXIgcGFyc2VkRGF0ZSA9IHBhcnNlRGF0ZSh2YWx1ZSwgcHJldmlvdXNEYXRlKTtcbiAgICAgICAgaWYgKHRpbWV6b25lKSB7XG4gICAgICAgICAgcGFyc2VkRGF0ZSA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwocGFyc2VkRGF0ZSwgdGltZXpvbmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWREYXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlICYmICFpc0RhdGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoJ2RhdGVmbXQnLCAnRXhwZWN0ZWQgYHswfWAgdG8gYmUgYSBkYXRlJywgdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVmFsaWREYXRlKHZhbHVlKSkge1xuICAgICAgICBwcmV2aW91c0RhdGUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHByZXZpb3VzRGF0ZSAmJiB0aW1lem9uZSkge1xuICAgICAgICAgIHByZXZpb3VzRGF0ZSA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwocHJldmlvdXNEYXRlLCB0aW1lem9uZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRmaWx0ZXIoJ2RhdGUnKSh2YWx1ZSwgZm9ybWF0LCB0aW1lem9uZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2aW91c0RhdGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWluKSB8fCBhdHRyLm5nTWluKSB7XG4gICAgICB2YXIgbWluVmFsO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzVmFsaWREYXRlKHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtaW5WYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPj0gbWluVmFsO1xuICAgICAgfTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbicsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBtaW5WYWwgPSBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCk7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgICB2YXIgbWF4VmFsO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5tYXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzVmFsaWREYXRlKHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPD0gbWF4VmFsO1xuICAgICAgfTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21heCcsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBtYXhWYWwgPSBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCk7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xuICAgICAgLy8gSW52YWxpZCBEYXRlOiBnZXRUaW1lKCkgcmV0dXJucyBOYU5cbiAgICAgIHJldHVybiB2YWx1ZSAmJiAhKHZhbHVlLmdldFRpbWUgJiYgdmFsdWUuZ2V0VGltZSgpICE9PSB2YWx1ZS5nZXRUaW1lKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUodmFsKSB7XG4gICAgICByZXR1cm4gaXNEZWZpbmVkKHZhbCkgJiYgIWlzRGF0ZSh2YWwpID8gcGFyc2VEYXRlKHZhbCkgfHwgdW5kZWZpbmVkIDogdmFsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gIHZhciBub2RlID0gZWxlbWVudFswXTtcbiAgdmFyIG5hdGl2ZVZhbGlkYXRpb24gPSBjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycyA9IGlzT2JqZWN0KG5vZGUudmFsaWRpdHkpO1xuICBpZiAobmF0aXZlVmFsaWRhdGlvbikge1xuICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIHZhbGlkaXR5ID0gZWxlbWVudC5wcm9wKFZBTElESVRZX1NUQVRFX1BST1BFUlRZKSB8fCB7fTtcbiAgICAgIC8vIERldGVjdCBidWcgaW4gRkYzNSBmb3IgaW5wdXRbZW1haWxdIChodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDY0NDMwKTpcbiAgICAgIC8vIC0gYWxzbyBzZXRzIHZhbGlkaXR5LmJhZElucHV0IChzaG91bGQgb25seSBiZSB2YWxpZGl0eS50eXBlTWlzbWF0Y2gpLlxuICAgICAgLy8gLSBzZWUgaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNlLW1haWwtc3RhdGUtKHR5cGU9ZW1haWwpXG4gICAgICAvLyAtIGNhbiBpZ25vcmUgdGhpcyBjYXNlIGFzIHdlIGNhbiBzdGlsbCByZWFkIG91dCB0aGUgZXJyb25lb3VzIGVtYWlsLi4uXG4gICAgICByZXR1cm4gdmFsaWRpdHkuYmFkSW5wdXQgJiYgIXZhbGlkaXR5LnR5cGVNaXNtYXRjaCA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG51bWJlcklucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG5cbiAgY3RybC4kJHBhcnNlck5hbWUgPSAnbnVtYmVyJztcbiAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGN0cmwuJGlzRW1wdHkodmFsdWUpKSAgICAgIHJldHVybiBudWxsO1xuICAgIGlmIChOVU1CRVJfUkVHRVhQLnRlc3QodmFsdWUpKSByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSk7XG5cbiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFjdHJsLiRpc0VtcHR5KHZhbHVlKSkge1xuICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmdNb2RlbE1pbkVycignbnVtZm10JywgJ0V4cGVjdGVkIGB7MH1gIHRvIGJlIGEgbnVtYmVyJywgdmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0pO1xuXG4gIGlmIChpc0RlZmluZWQoYXR0ci5taW4pIHx8IGF0dHIubmdNaW4pIHtcbiAgICB2YXIgbWluVmFsO1xuICAgIGN0cmwuJHZhbGlkYXRvcnMubWluID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtaW5WYWwpIHx8IHZhbHVlID49IG1pblZhbDtcbiAgICB9O1xuXG4gICAgYXR0ci4kb2JzZXJ2ZSgnbWluJywgZnVuY3Rpb24odmFsKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHZhbCkgJiYgIWlzTnVtYmVyKHZhbCkpIHtcbiAgICAgICAgdmFsID0gcGFyc2VGbG9hdCh2YWwsIDEwKTtcbiAgICAgIH1cbiAgICAgIG1pblZhbCA9IGlzTnVtYmVyKHZhbCkgJiYgIWlzTmFOKHZhbCkgPyB2YWwgOiB1bmRlZmluZWQ7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgdmFyIG1heFZhbDtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLm1heCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWF4VmFsKSB8fCB2YWx1ZSA8PSBtYXhWYWw7XG4gICAgfTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ21heCcsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKGlzRGVmaW5lZCh2YWwpICYmICFpc051bWJlcih2YWwpKSB7XG4gICAgICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsLCAxMCk7XG4gICAgICB9XG4gICAgICBtYXhWYWwgPSBpc051bWJlcih2YWwpICYmICFpc05hTih2YWwpID8gdmFsIDogdW5kZWZpbmVkO1xuICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zXG4gICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVybElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIC8vIE5vdGU6IG5vIGJhZElucHV0Q2hlY2tlciBoZXJlIGJ5IHB1cnBvc2UgYXMgYHVybGAgaXMgb25seSBhIHZhbGlkYXRpb25cbiAgLy8gaW4gYnJvd3NlcnMsIGkuZS4gd2UgY2FuIGFsd2F5cyByZWFkIG91dCBpbnB1dC52YWx1ZSBldmVuIGlmIGl0IGlzIG5vdCB2YWxpZCFcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG5cbiAgY3RybC4kJHBhcnNlck5hbWUgPSAndXJsJztcbiAgY3RybC4kdmFsaWRhdG9ycy51cmwgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgVVJMX1JFR0VYUC50ZXN0KHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW1haWxJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICAvLyBOb3RlOiBubyBiYWRJbnB1dENoZWNrZXIgaGVyZSBieSBwdXJwb3NlIGFzIGB1cmxgIGlzIG9ubHkgYSB2YWxpZGF0aW9uXG4gIC8vIGluIGJyb3dzZXJzLCBpLmUuIHdlIGNhbiBhbHdheXMgcmVhZCBvdXQgaW5wdXQudmFsdWUgZXZlbiBpZiBpdCBpcyBub3QgdmFsaWQhXG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpO1xuXG4gIGN0cmwuJCRwYXJzZXJOYW1lID0gJ2VtYWlsJztcbiAgY3RybC4kdmFsaWRhdG9ycy5lbWFpbCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBFTUFJTF9SRUdFWFAudGVzdCh2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJhZGlvSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gIC8vIG1ha2UgdGhlIG5hbWUgdW5pcXVlLCBpZiBub3QgZGVmaW5lZFxuICBpZiAoaXNVbmRlZmluZWQoYXR0ci5uYW1lKSkge1xuICAgIGVsZW1lbnQuYXR0cignbmFtZScsIG5leHRVaWQoKSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldikge1xuICAgIGlmIChlbGVtZW50WzBdLmNoZWNrZWQpIHtcbiAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShhdHRyLnZhbHVlLCBldiAmJiBldi50eXBlKTtcbiAgICB9XG4gIH07XG5cbiAgZWxlbWVudC5vbignY2xpY2snLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0ci52YWx1ZTtcbiAgICBlbGVtZW50WzBdLmNoZWNrZWQgPSAodmFsdWUgPT0gY3RybC4kdmlld1ZhbHVlKTtcbiAgfTtcblxuICBhdHRyLiRvYnNlcnZlKCd2YWx1ZScsIGN0cmwuJHJlbmRlcik7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgY29udGV4dCwgbmFtZSwgZXhwcmVzc2lvbiwgZmFsbGJhY2spIHtcbiAgdmFyIHBhcnNlRm47XG4gIGlmIChpc0RlZmluZWQoZXhwcmVzc2lvbikpIHtcbiAgICBwYXJzZUZuID0gJHBhcnNlKGV4cHJlc3Npb24pO1xuICAgIGlmICghcGFyc2VGbi5jb25zdGFudCkge1xuICAgICAgdGhyb3cgbmdNb2RlbE1pbkVycignY29uc3RleHByJywgJ0V4cGVjdGVkIGNvbnN0YW50IGV4cHJlc3Npb24gZm9yIGB7MH1gLCBidXQgc2F3ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYHsxfWAuJywgbmFtZSwgZXhwcmVzc2lvbik7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUZuKGNvbnRleHQpO1xuICB9XG4gIHJldHVybiBmYWxsYmFjaztcbn1cblxuZnVuY3Rpb24gY2hlY2tib3hJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlciwgJGZpbHRlciwgJHBhcnNlKSB7XG4gIHZhciB0cnVlVmFsdWUgPSBwYXJzZUNvbnN0YW50RXhwcigkcGFyc2UsIHNjb3BlLCAnbmdUcnVlVmFsdWUnLCBhdHRyLm5nVHJ1ZVZhbHVlLCB0cnVlKTtcbiAgdmFyIGZhbHNlVmFsdWUgPSBwYXJzZUNvbnN0YW50RXhwcigkcGFyc2UsIHNjb3BlLCAnbmdGYWxzZVZhbHVlJywgYXR0ci5uZ0ZhbHNlVmFsdWUsIGZhbHNlKTtcblxuICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldikge1xuICAgIGN0cmwuJHNldFZpZXdWYWx1ZShlbGVtZW50WzBdLmNoZWNrZWQsIGV2ICYmIGV2LnR5cGUpO1xuICB9O1xuXG4gIGVsZW1lbnQub24oJ2NsaWNrJywgbGlzdGVuZXIpO1xuXG4gIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnRbMF0uY2hlY2tlZCA9IGN0cmwuJHZpZXdWYWx1ZTtcbiAgfTtcblxuICAvLyBPdmVycmlkZSB0aGUgc3RhbmRhcmQgYCRpc0VtcHR5YCBiZWNhdXNlIHRoZSAkdmlld1ZhbHVlIG9mIGFuIGVtcHR5IGNoZWNrYm94IGlzIGFsd2F5cyBzZXQgdG8gYGZhbHNlYFxuICAvLyBUaGlzIGlzIGJlY2F1c2Ugb2YgdGhlIHBhcnNlciBiZWxvdywgd2hpY2ggY29tcGFyZXMgdGhlIGAkbW9kZWxWYWx1ZWAgd2l0aCBgdHJ1ZVZhbHVlYCB0byBjb252ZXJ0XG4gIC8vIGl0IHRvIGEgYm9vbGVhbi5cbiAgY3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBmYWxzZTtcbiAgfTtcblxuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZXF1YWxzKHZhbHVlLCB0cnVlVmFsdWUpO1xuICB9KTtcblxuICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPyB0cnVlVmFsdWUgOiBmYWxzZVZhbHVlO1xuICB9KTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHRleHRhcmVhXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSFRNTCB0ZXh0YXJlYSBlbGVtZW50IGNvbnRyb2wgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy4gVGhlIGRhdGEtYmluZGluZyBhbmQgdmFsaWRhdGlvblxuICogcHJvcGVydGllcyBvZiB0aGlzIGVsZW1lbnQgYXJlIGV4YWN0bHkgdGhlIHNhbWUgYXMgdGhvc2Ugb2YgdGhlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0IGVsZW1lbnR9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAqICAgIG1pbmxlbmd0aC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZiBhbnlcbiAqICAgIGxlbmd0aC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHZhbHVlIGRvZXMgbm90IG1hdGNoXG4gKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gKiAgICBhY2NvdW50LlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBpbnB1dFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUTUwgaW5wdXQgZWxlbWVudCBjb250cm9sLiBXaGVuIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LCBpdCBwcm92aWRlcyBkYXRhLWJpbmRpbmcsXG4gKiBpbnB1dCBzdGF0ZSBjb250cm9sLCBhbmQgdmFsaWRhdGlvbi5cbiAqIElucHV0IGNvbnRyb2wgZm9sbG93cyBIVE1MNSBpbnB1dCB0eXBlcyBhbmQgcG9seWZpbGxzIHRoZSBIVE1MNSB2YWxpZGF0aW9uIGJlaGF2aW9yIGZvciBvbGRlciBicm93c2Vycy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIE5vdCBldmVyeSBmZWF0dXJlIG9mZmVyZWQgaXMgYXZhaWxhYmxlIGZvciBhbGwgaW5wdXQgdHlwZXMuXG4gKiBTcGVjaWZpY2FsbHksIGRhdGEgYmluZGluZyBhbmQgZXZlbnQgaGFuZGxpbmcgdmlhIGBuZy1tb2RlbGAgaXMgdW5zdXBwb3J0ZWQgZm9yIGBpbnB1dFtmaWxlXWAuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBuZ1JlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgaWYgc2V0IHRvIHRydWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gKiAgICBtaW5sZW5ndGguXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2YgYW55XG4gKiAgICBsZW5ndGguXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB2YWx1ZSBkb2VzIG5vdCBtYXRjaFxuICogICAgYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICogICAgYWNjb3VudC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAqICAgIFRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQgZm9yIGlucHV0W3R5cGU9cGFzc3dvcmRdIGNvbnRyb2xzLCB3aGljaCB3aWxsIG5ldmVyIHRyaW0gdGhlXG4gKiAgICBpbnB1dC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJpbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJpbnB1dEV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnaW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUudXNlciA9IHtuYW1lOiAnZ3Vlc3QnLCBsYXN0OiAndmlzaXRvcid9O1xuICAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgVXNlciBuYW1lOlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIiBuZy1tb2RlbD1cInVzZXIubmFtZVwiIHJlcXVpcmVkPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLnVzZXJOYW1lLiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgIExhc3QgbmFtZTpcbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImxhc3ROYW1lXCIgbmctbW9kZWw9XCJ1c2VyLmxhc3RcIlxuICAgICAgICAgICAgICBuZy1taW5sZW5ndGg9XCIzXCIgbmctbWF4bGVuZ3RoPVwiMTBcIj5cbiAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IubWlubGVuZ3RoXCI+XG4gICAgICAgICAgICAgICBUb28gc2hvcnQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmxhc3ROYW1lLiRlcnJvci5tYXhsZW5ndGhcIj5cbiAgICAgICAgICAgICAgIFRvbyBsb25nITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICA8L2Zvcm0+XG4gICAgICAgICA8aHI+XG4gICAgICAgICA8dHQ+dXNlciA9IHt7dXNlcn19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kdmFsaWQgPSB7e215Rm9ybS51c2VyTmFtZS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0udXNlck5hbWUuJGVycm9yID0ge3tteUZvcm0udXNlck5hbWUuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLmxhc3ROYW1lLiR2YWxpZCA9IHt7bXlGb3JtLmxhc3ROYW1lLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IgPSB7e215Rm9ybS5sYXN0TmFtZS4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5taW5sZW5ndGggPSB7eyEhbXlGb3JtLiRlcnJvci5taW5sZW5ndGh9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1heGxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1heGxlbmd0aH19PC90dD48YnIvPlxuICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgdXNlciA9IGVsZW1lbnQoYnkuZXhhY3RCaW5kaW5nKCd1c2VyJykpO1xuICAgICAgICB2YXIgdXNlck5hbWVWYWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLnVzZXJOYW1lLiR2YWxpZCcpKTtcbiAgICAgICAgdmFyIGxhc3ROYW1lVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kdmFsaWQnKSk7XG4gICAgICAgIHZhciBsYXN0TmFtZUVycm9yID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJGVycm9yJykpO1xuICAgICAgICB2YXIgZm9ybVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uJHZhbGlkJykpO1xuICAgICAgICB2YXIgdXNlck5hbWVJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubmFtZScpKTtcbiAgICAgICAgdmFyIHVzZXJMYXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLmxhc3QnKSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCIsXCJsYXN0XCI6XCJ2aXNpdG9yXCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KHVzZXJOYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eSB3aGVuIHJlcXVpcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdXNlck5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIHVzZXJOYW1lSW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcImxhc3RcIjpcInZpc2l0b3JcIn0nKTtcbiAgICAgICAgICBleHBlY3QodXNlck5hbWVWYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIHZhbGlkIGlmIGVtcHR5IHdoZW4gbWluIGxlbmd0aCBpcyBzZXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibmFtZVwiOlwiZ3Vlc3RcIixcImxhc3RcIjpcIlwifScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgZXhwZWN0KGZvcm1WYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbGVzcyB0aGFuIHJlcXVpcmVkIG1pbiBsZW5ndGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5zZW5kS2V5cygneHgnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwifScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZUVycm9yLmdldFRleHQoKSkudG9Db250YWluKCdtaW5sZW5ndGgnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbG9uZ2VyIHRoYW4gbWF4IGxlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCdzb21lIHJpZGljdWxvdXNseSBsb25nIG5hbWUnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwifScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChsYXN0TmFtZUVycm9yLmdldFRleHQoKSkudG9Db250YWluKCdtYXhsZW5ndGgnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBpbnB1dERpcmVjdGl2ZSA9IFsnJGJyb3dzZXInLCAnJHNuaWZmZXInLCAnJGZpbHRlcicsICckcGFyc2UnLFxuICAgIGZ1bmN0aW9uKCRicm93c2VyLCAkc25pZmZlciwgJGZpbHRlciwgJHBhcnNlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXF1aXJlOiBbJz9uZ01vZGVsJ10sXG4gICAgbGluazoge1xuICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgaWYgKGN0cmxzWzBdKSB7XG4gICAgICAgICAgKGlucHV0VHlwZVtsb3dlcmNhc2UoYXR0ci50eXBlKV0gfHwgaW5wdXRUeXBlLnRleHQpKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsc1swXSwgJHNuaWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRicm93c2VyLCAkZmlsdGVyLCAkcGFyc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufV07XG5cblxuXG52YXIgQ09OU1RBTlRfVkFMVUVfUkVHRVhQID0gL14odHJ1ZXxmYWxzZXxcXGQrKSQvO1xuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1ZhbHVlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBCaW5kcyB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiB0byB0aGUgdmFsdWUgb2YgYDxvcHRpb24+YCBvciB7QGxpbmsgaW5wdXRbcmFkaW9dIGBpbnB1dFtyYWRpb11gfSxcbiAqIHNvIHRoYXQgd2hlbiB0aGUgZWxlbWVudCBpcyBzZWxlY3RlZCwgdGhlIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0gb2YgdGhhdCBlbGVtZW50IGlzIHNldCB0b1xuICogdGhlIGJvdW5kIHZhbHVlLlxuICpcbiAqIGBuZ1ZhbHVlYCBpcyB1c2VmdWwgd2hlbiBkeW5hbWljYWxseSBnZW5lcmF0aW5nIGxpc3RzIG9mIHJhZGlvIGJ1dHRvbnMgdXNpbmdcbiAqIHtAbGluayBuZ1JlcGVhdCBgbmdSZXBlYXRgfSwgYXMgc2hvd24gYmVsb3cuXG4gKlxuICogTGlrZXdpc2UsIGBuZ1ZhbHVlYCBjYW4gYmUgdXNlZCB0byBnZW5lcmF0ZSBgPG9wdGlvbj5gIGVsZW1lbnRzIGZvclxuICogdGhlIHtAbGluayBzZWxlY3QgYHNlbGVjdGB9IGVsZW1lbnQuIEluIHRoYXQgY2FzZSBob3dldmVyLCBvbmx5IHN0cmluZ3MgYXJlIHN1cHBvcnRlZFxuICogZm9yIHRoZSBgdmFsdWUgYGF0dHJpYnV0ZSwgc28gdGhlIHJlc3VsdGluZyBgbmdNb2RlbGAgd2lsbCBhbHdheXMgYmUgYSBzdHJpbmcuXG4gKiBTdXBwb3J0IGZvciBgc2VsZWN0YCBtb2RlbHMgd2l0aCBub24tc3RyaW5nIHZhbHVlcyBpcyBhdmFpbGFibGUgdmlhIGBuZ09wdGlvbnNgLlxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcGFyYW0ge3N0cmluZz19IG5nVmFsdWUgYW5ndWxhciBleHByZXNzaW9uLCB3aG9zZSB2YWx1ZSB3aWxsIGJlIGJvdW5kIHRvIHRoZSBgdmFsdWVgIGF0dHJpYnV0ZVxuICogICBvZiB0aGUgYGlucHV0YCBlbGVtZW50XG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmdWYWx1ZS1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ2YWx1ZUV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndmFsdWVFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ3BpenphJywgJ3VuaWNvcm5zJywgJ3JvYm90cyddO1xuICAgICAgICAgICAgICAkc2NvcGUubXkgPSB7IGZhdm9yaXRlOiAndW5pY29ybnMnIH07XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxmb3JtIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIDxoMj5XaGljaCBpcyB5b3VyIGZhdm9yaXRlPzwvaDI+XG4gICAgICAgICAgICA8bGFiZWwgbmctcmVwZWF0PVwibmFtZSBpbiBuYW1lc1wiIGZvcj1cInt7bmFtZX19XCI+XG4gICAgICAgICAgICAgIHt7bmFtZX19XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJteS5mYXZvcml0ZVwiXG4gICAgICAgICAgICAgICAgICAgICBuZy12YWx1ZT1cIm5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgaWQ9XCJ7e25hbWV9fVwiXG4gICAgICAgICAgICAgICAgICAgICBuYW1lPVwiZmF2b3JpdGVcIj5cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGRpdj5Zb3UgY2hvc2Uge3tteS5mYXZvcml0ZX19PC9kaXY+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgdmFyIGZhdm9yaXRlID0gZWxlbWVudChieS5iaW5kaW5nKCdteS5mYXZvcml0ZScpKTtcblxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZmF2b3JpdGUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3VuaWNvcm5zJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGJpbmQgdGhlIHZhbHVlcyB0byB0aGUgaW5wdXRzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudC5hbGwoYnkubW9kZWwoJ215LmZhdm9yaXRlJykpLmdldCgwKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChmYXZvcml0ZS5nZXRUZXh0KCkpLnRvQ29udGFpbigncGl6emEnKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdWYWx1ZURpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICBjb21waWxlOiBmdW5jdGlvbih0cGwsIHRwbEF0dHIpIHtcbiAgICAgIGlmIChDT05TVEFOVF9WQUxVRV9SRUdFWFAudGVzdCh0cGxBdHRyLm5nVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1ZhbHVlQ29uc3RhbnRMaW5rKHNjb3BlLCBlbG0sIGF0dHIpIHtcbiAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgc2NvcGUuJGV2YWwoYXR0ci5uZ1ZhbHVlKSk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdWYWx1ZUxpbmsoc2NvcGUsIGVsbSwgYXR0cikge1xuICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nVmFsdWUsIGZ1bmN0aW9uIHZhbHVlV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCB2YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0JpbmRcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0JpbmRgIGF0dHJpYnV0ZSB0ZWxscyBBbmd1bGFyIHRvIHJlcGxhY2UgdGhlIHRleHQgY29udGVudCBvZiB0aGUgc3BlY2lmaWVkIEhUTUwgZWxlbWVudFxuICogd2l0aCB0aGUgdmFsdWUgb2YgYSBnaXZlbiBleHByZXNzaW9uLCBhbmQgdG8gdXBkYXRlIHRoZSB0ZXh0IGNvbnRlbnQgd2hlbiB0aGUgdmFsdWUgb2YgdGhhdFxuICogZXhwcmVzc2lvbiBjaGFuZ2VzLlxuICpcbiAqIFR5cGljYWxseSwgeW91IGRvbid0IHVzZSBgbmdCaW5kYCBkaXJlY3RseSwgYnV0IGluc3RlYWQgeW91IHVzZSB0aGUgZG91YmxlIGN1cmx5IG1hcmt1cCBsaWtlXG4gKiBge3sgZXhwcmVzc2lvbiB9fWAgd2hpY2ggaXMgc2ltaWxhciBidXQgbGVzcyB2ZXJib3NlLlxuICpcbiAqIEl0IGlzIHByZWZlcmFibGUgdG8gdXNlIGBuZ0JpbmRgIGluc3RlYWQgb2YgYHt7IGV4cHJlc3Npb24gfX1gIGlmIGEgdGVtcGxhdGUgaXMgbW9tZW50YXJpbHlcbiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3IHN0YXRlIGJlZm9yZSBBbmd1bGFyIGNvbXBpbGVzIGl0LiBTaW5jZSBgbmdCaW5kYCBpcyBhblxuICogZWxlbWVudCBhdHRyaWJ1dGUsIGl0IG1ha2VzIHRoZSBiaW5kaW5ncyBpbnZpc2libGUgdG8gdGhlIHVzZXIgd2hpbGUgdGhlIHBhZ2UgaXMgbG9hZGluZy5cbiAqXG4gKiBBbiBhbHRlcm5hdGl2ZSBzb2x1dGlvbiB0byB0aGlzIHByb2JsZW0gd291bGQgYmUgdXNpbmcgdGhlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xvYWsgbmdDbG9ha30gZGlyZWN0aXZlLlxuICpcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCaW5kIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBFbnRlciBhIG5hbWUgaW4gdGhlIExpdmUgUHJldmlldyB0ZXh0IGJveDsgdGhlIGdyZWV0aW5nIGJlbG93IHRoZSB0ZXh0IGJveCBjaGFuZ2VzIGluc3RhbnRseS5cbiAgIDxleGFtcGxlIG1vZHVsZT1cImJpbmRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5uYW1lID0gJ1doaXJsZWQnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxsYWJlbD5FbnRlciBuYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIj48L2xhYmVsPjxicj5cbiAgICAgICAgIEhlbGxvIDxzcGFuIG5nLWJpbmQ9XCJuYW1lXCI+PC9zcGFuPiFcbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgbmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZScpKTtcblxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ1doaXJsZWQnKTtcbiAgICAgICAgIG5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbmFtZUlucHV0LnNlbmRLZXlzKCd3b3JsZCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ3dvcmxkJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQmluZERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQUMnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZENvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBhdHRyLm5nQmluZCk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ0JpbmQsIGZ1bmN0aW9uIG5nQmluZFdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGlzVW5kZWZpbmVkKHZhbHVlKSA/ICcnIDogdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZFRlbXBsYXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQmluZFRlbXBsYXRlYCBkaXJlY3RpdmUgc3BlY2lmaWVzIHRoYXQgdGhlIGVsZW1lbnRcbiAqIHRleHQgY29udGVudCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCB0aGUgaW50ZXJwb2xhdGlvbiBvZiB0aGUgdGVtcGxhdGVcbiAqIGluIHRoZSBgbmdCaW5kVGVtcGxhdGVgIGF0dHJpYnV0ZS5cbiAqIFVubGlrZSBgbmdCaW5kYCwgdGhlIGBuZ0JpbmRUZW1wbGF0ZWAgY2FuIGNvbnRhaW4gbXVsdGlwbGUgYHt7YCBgfX1gXG4gKiBleHByZXNzaW9ucy4gVGhpcyBkaXJlY3RpdmUgaXMgbmVlZGVkIHNpbmNlIHNvbWUgSFRNTCBlbGVtZW50c1xuICogKHN1Y2ggYXMgVElUTEUgYW5kIE9QVElPTikgY2Fubm90IGNvbnRhaW4gU1BBTiBlbGVtZW50cy5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0JpbmRUZW1wbGF0ZSB0ZW1wbGF0ZSBvZiBmb3JtXG4gKiAgIDx0dD57ezwvdHQ+IDx0dD5leHByZXNzaW9uPC90dD4gPHR0Pn19PC90dD4gdG8gZXZhbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVHJ5IGl0IGhlcmU6IGVudGVyIHRleHQgaW4gdGV4dCBib3ggYW5kIHdhdGNoIHRoZSBncmVldGluZyBjaGFuZ2UuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnYmluZEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuc2FsdXRhdGlvbiA9ICdIZWxsbyc7XG4gICAgICAgICAgICAgJHNjb3BlLm5hbWUgPSAnV29ybGQnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPGxhYmVsPlNhbHV0YXRpb246IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic2FsdXRhdGlvblwiPjwvbGFiZWw+PGJyPlxuICAgICAgICA8bGFiZWw+TmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJuYW1lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgIDxwcmUgbmctYmluZC10ZW1wbGF0ZT1cInt7c2FsdXRhdGlvbn19IHt7bmFtZX19IVwiPjwvcHJlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzYWx1dGF0aW9uRWxlbSA9IGVsZW1lbnQoYnkuYmluZGluZygnc2FsdXRhdGlvbicpKTtcbiAgICAgICAgIHZhciBzYWx1dGF0aW9uSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzYWx1dGF0aW9uJykpO1xuICAgICAgICAgdmFyIG5hbWVJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSk7XG5cbiAgICAgICAgIGV4cGVjdChzYWx1dGF0aW9uRWxlbS5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIFdvcmxkIScpO1xuXG4gICAgICAgICBzYWx1dGF0aW9uSW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIHNhbHV0YXRpb25JbnB1dC5zZW5kS2V5cygnR3JlZXRpbmdzJyk7XG4gICAgICAgICBuYW1lSW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIG5hbWVJbnB1dC5zZW5kS2V5cygndXNlcicpO1xuXG4gICAgICAgICBleHBlY3Qoc2FsdXRhdGlvbkVsZW0uZ2V0VGV4dCgpKS50b0JlKCdHcmVldGluZ3MgdXNlciEnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0JpbmRUZW1wbGF0ZUNvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZFRlbXBsYXRlTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZShlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci5uZ0JpbmRUZW1wbGF0ZSkpO1xuICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKGVsZW1lbnQsIGludGVycG9sYXRlRm4uZXhwcmVzc2lvbnMpO1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudFswXTtcbiAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbmdCaW5kVGVtcGxhdGUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBpc1VuZGVmaW5lZCh2YWx1ZSkgPyAnJyA6IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0JpbmRIdG1sXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBFdmFsdWF0ZXMgdGhlIGV4cHJlc3Npb24gYW5kIGluc2VydHMgdGhlIHJlc3VsdGluZyBIVE1MIGludG8gdGhlIGVsZW1lbnQgaW4gYSBzZWN1cmUgd2F5LiBCeSBkZWZhdWx0LFxuICogdGhlIHJlc3VsdGluZyBIVE1MIGNvbnRlbnQgd2lsbCBiZSBzYW5pdGl6ZWQgdXNpbmcgdGhlIHtAbGluayBuZ1Nhbml0aXplLiRzYW5pdGl6ZSAkc2FuaXRpemV9IHNlcnZpY2UuXG4gKiBUbyB1dGlsaXplIHRoaXMgZnVuY3Rpb25hbGl0eSwgZW5zdXJlIHRoYXQgYCRzYW5pdGl6ZWAgaXMgYXZhaWxhYmxlLCBmb3IgZXhhbXBsZSwgYnkgaW5jbHVkaW5nIHtAbGlua1xuICogbmdTYW5pdGl6ZX0gaW4geW91ciBtb2R1bGUncyBkZXBlbmRlbmNpZXMgKG5vdCBpbiBjb3JlIEFuZ3VsYXIpLiBJbiBvcmRlciB0byB1c2Uge0BsaW5rIG5nU2FuaXRpemV9XG4gKiBpbiB5b3VyIG1vZHVsZSdzIGRlcGVuZGVuY2llcywgeW91IG5lZWQgdG8gaW5jbHVkZSBcImFuZ3VsYXItc2FuaXRpemUuanNcIiBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqIFlvdSBtYXkgYWxzbyBieXBhc3Mgc2FuaXRpemF0aW9uIGZvciB2YWx1ZXMgeW91IGtub3cgYXJlIHNhZmUuIFRvIGRvIHNvLCBiaW5kIHRvXG4gKiBhbiBleHBsaWNpdGx5IHRydXN0ZWQgdmFsdWUgdmlhIHtAbGluayBuZy4kc2NlI3RydXN0QXNIdG1sICRzY2UudHJ1c3RBc0h0bWx9LiAgU2VlIHRoZSBleGFtcGxlXG4gKiB1bmRlciB7QGxpbmsgbmcuJHNjZSNzaG93LW1lLWFuLWV4YW1wbGUtdXNpbmctc2NlLSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKlxuICogTm90ZTogSWYgYSBgJHNhbml0aXplYCBzZXJ2aWNlIGlzIHVuYXZhaWxhYmxlIGFuZCB0aGUgYm91bmQgdmFsdWUgaXNuJ3QgZXhwbGljaXRseSB0cnVzdGVkLCB5b3VcbiAqIHdpbGwgaGF2ZSBhbiBleGNlcHRpb24gKGluc3RlYWQgb2YgYW4gZXhwbG9pdC4pXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZEh0bWwge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuXG4gKlxuICogQGV4YW1wbGVcblxuICAgPGV4YW1wbGUgbW9kdWxlPVwiYmluZEh0bWxFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItc2FuaXRpemUuanNcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8cCBuZy1iaW5kLWh0bWw9XCJteUhUTUxcIj48L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cblxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRIdG1sRXhhbXBsZScsIFsnbmdTYW5pdGl6ZSddKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgJHNjb3BlLm15SFRNTCA9XG4gICAgICAgICAgICAgICdJIGFtIGFuIDxjb2RlPkhUTUw8L2NvZGU+c3RyaW5nIHdpdGggJyArXG4gICAgICAgICAgICAgICc8YSBocmVmPVwiI1wiPmxpbmtzITwvYT4gYW5kIG90aGVyIDxlbT5zdHVmZjwvZW0+JztcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuXG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQtaHRtbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbXlIVE1MJykpLmdldFRleHQoKSkudG9CZShcbiAgICAgICAgICAgICAnSSBhbSBhbiBIVE1Mc3RyaW5nIHdpdGggbGlua3MhIGFuZCBvdGhlciBzdHVmZicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgJyRwYXJzZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRzY2UsICRwYXJzZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZEh0bWxDb21waWxlKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgIHZhciBuZ0JpbmRIdG1sR2V0dGVyID0gJHBhcnNlKHRBdHRycy5uZ0JpbmRIdG1sKTtcbiAgICAgIHZhciBuZ0JpbmRIdG1sV2F0Y2ggPSAkcGFyc2UodEF0dHJzLm5nQmluZEh0bWwsIGZ1bmN0aW9uIGdldFN0cmluZ1ZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgfHwgJycpLnRvU3RyaW5nKCk7XG4gICAgICB9KTtcbiAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRFbGVtZW50KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZEh0bWxMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0luZm8oZWxlbWVudCwgYXR0ci5uZ0JpbmRIdG1sKTtcblxuICAgICAgICBzY29wZS4kd2F0Y2gobmdCaW5kSHRtbFdhdGNoLCBmdW5jdGlvbiBuZ0JpbmRIdG1sV2F0Y2hBY3Rpb24oKSB7XG4gICAgICAgICAgLy8gd2UgcmUtZXZhbHVhdGUgdGhlIGV4cHIgYmVjYXVzZSB3ZSB3YW50IGEgVHJ1c3RlZFZhbHVlSG9sZGVyVHlwZVxuICAgICAgICAgIC8vIGZvciAkc2NlLCBub3QgYSBzdHJpbmdcbiAgICAgICAgICBlbGVtZW50Lmh0bWwoJHNjZS5nZXRUcnVzdGVkSHRtbChuZ0JpbmRIdG1sR2V0dGVyKHNjb3BlKSkgfHwgJycpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDaGFuZ2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEV2YWx1YXRlIHRoZSBnaXZlbiBleHByZXNzaW9uIHdoZW4gdGhlIHVzZXIgY2hhbmdlcyB0aGUgaW5wdXQuXG4gKiBUaGUgZXhwcmVzc2lvbiBpcyBldmFsdWF0ZWQgaW1tZWRpYXRlbHksIHVubGlrZSB0aGUgSmF2YVNjcmlwdCBvbmNoYW5nZSBldmVudFxuICogd2hpY2ggb25seSB0cmlnZ2VycyBhdCB0aGUgZW5kIG9mIGEgY2hhbmdlICh1c3VhbGx5LCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGVcbiAqIGZvcm0gZWxlbWVudCBvciBwcmVzc2VzIHRoZSByZXR1cm4ga2V5KS5cbiAqXG4gKiBUaGUgYG5nQ2hhbmdlYCBleHByZXNzaW9uIGlzIG9ubHkgZXZhbHVhdGVkIHdoZW4gYSBjaGFuZ2UgaW4gdGhlIGlucHV0IHZhbHVlIGNhdXNlc1xuICogYSBuZXcgdmFsdWUgdG8gYmUgY29tbWl0dGVkIHRvIHRoZSBtb2RlbC5cbiAqXG4gKiBJdCB3aWxsIG5vdCBiZSBldmFsdWF0ZWQ6XG4gKiAqIGlmIHRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIHRoZSBgJHBhcnNlcnNgIHRyYW5zZm9ybWF0aW9uIHBpcGVsaW5lIGhhcyBub3QgY2hhbmdlZFxuICogKiBpZiB0aGUgaW5wdXQgaGFzIGNvbnRpbnVlZCB0byBiZSBpbnZhbGlkIHNpbmNlIHRoZSBtb2RlbCB3aWxsIHN0YXkgYG51bGxgXG4gKiAqIGlmIHRoZSBtb2RlbCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIG5vdCBieSBhIGNoYW5nZSB0byB0aGUgaW5wdXQgdmFsdWVcbiAqXG4gKlxuICogTm90ZSwgdGhpcyBkaXJlY3RpdmUgcmVxdWlyZXMgYG5nTW9kZWxgIHRvIGJlIHByZXNlbnQuXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGFuZ2Uge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvbiBjaGFuZ2VcbiAqIGluIGlucHV0IHZhbHVlLlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdDaGFuZ2UtZGlyZWN0aXZlXCIgbW9kdWxlPVwiY2hhbmdlRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxzY3JpcHQ+XG4gKiAgICAgICBhbmd1bGFyLm1vZHVsZSgnY2hhbmdlRXhhbXBsZScsIFtdKVxuICogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgICRzY29wZS5jb3VudGVyID0gMDtcbiAqICAgICAgICAgICAkc2NvcGUuY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICAkc2NvcGUuY291bnRlcisrO1xuICogICAgICAgICAgIH07XG4gKiAgICAgICAgIH1dKTtcbiAqICAgICA8L3NjcmlwdD5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY29uZmlybWVkXCIgbmctY2hhbmdlPVwiY2hhbmdlKClcIiBpZD1cIm5nLWNoYW5nZS1leGFtcGxlMVwiIC8+XG4gKiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjb25maXJtZWRcIiBpZD1cIm5nLWNoYW5nZS1leGFtcGxlMlwiIC8+XG4gKiAgICAgICA8bGFiZWwgZm9yPVwibmctY2hhbmdlLWV4YW1wbGUyXCI+Q29uZmlybWVkPC9sYWJlbD48YnIgLz5cbiAqICAgICAgIDx0dD5kZWJ1ZyA9IHt7Y29uZmlybWVkfX08L3R0Pjxici8+XG4gKiAgICAgICA8dHQ+Y291bnRlciA9IHt7Y291bnRlcn19PC90dD48YnIvPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICB2YXIgY291bnRlciA9IGVsZW1lbnQoYnkuYmluZGluZygnY291bnRlcicpKTtcbiAqICAgICB2YXIgZGVidWcgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvbmZpcm1lZCcpKTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIHZpZXcnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9Db250YWluKCcwJyk7XG4gKlxuICogICAgICAgZWxlbWVudChieS5pZCgnbmctY2hhbmdlLWV4YW1wbGUxJykpLmNsaWNrKCk7XG4gKlxuICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEnKTtcbiAqICAgICAgIGV4cGVjdChkZWJ1Zy5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIG5vdCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBlbGVtZW50KGJ5LmlkKCduZy1jaGFuZ2UtZXhhbXBsZTInKSkuY2xpY2soKTtcblxuICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzAnKTtcbiAqICAgICAgIGV4cGVjdChkZWJ1Zy5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0NoYW5nZURpcmVjdGl2ZSA9IHZhbHVlRm4oe1xuICByZXN0cmljdDogJ0EnLFxuICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gICAgY3RybC4kdmlld0NoYW5nZUxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgc2NvcGUuJGV2YWwoYXR0ci5uZ0NoYW5nZSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjbGFzc0RpcmVjdGl2ZShuYW1lLCBzZWxlY3Rvcikge1xuICBuYW1lID0gJ25nQ2xhc3MnICsgbmFtZTtcbiAgcmV0dXJuIFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0FDJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBvbGRWYWw7XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbbmFtZV0sIG5nQ2xhc3NXYXRjaEFjdGlvbiwgdHJ1ZSk7XG5cbiAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnY2xhc3MnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIG5nQ2xhc3NXYXRjaEFjdGlvbihzY29wZS4kZXZhbChhdHRyW25hbWVdKSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgaWYgKG5hbWUgIT09ICduZ0NsYXNzJykge1xuICAgICAgICAgIHNjb3BlLiR3YXRjaCgnJGluZGV4JywgZnVuY3Rpb24oJGluZGV4LCBvbGQkaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIGpzaGludCBiaXR3aXNlOiBmYWxzZVxuICAgICAgICAgICAgdmFyIG1vZCA9ICRpbmRleCAmIDE7XG4gICAgICAgICAgICBpZiAobW9kICE9PSAob2xkJGluZGV4ICYgMSkpIHtcbiAgICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSBhcnJheUNsYXNzZXMoc2NvcGUuJGV2YWwoYXR0cltuYW1lXSkpO1xuICAgICAgICAgICAgICBtb2QgPT09IHNlbGVjdG9yID9cbiAgICAgICAgICAgICAgICBhZGRDbGFzc2VzKGNsYXNzZXMpIDpcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzc2VzKGNsYXNzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkQ2xhc3NlcyhjbGFzc2VzKSB7XG4gICAgICAgICAgdmFyIG5ld0NsYXNzZXMgPSBkaWdlc3RDbGFzc0NvdW50cyhjbGFzc2VzLCAxKTtcbiAgICAgICAgICBhdHRyLiRhZGRDbGFzcyhuZXdDbGFzc2VzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoY2xhc3Nlcykge1xuICAgICAgICAgIHZhciBuZXdDbGFzc2VzID0gZGlnZXN0Q2xhc3NDb3VudHMoY2xhc3NlcywgLTEpO1xuICAgICAgICAgIGF0dHIuJHJlbW92ZUNsYXNzKG5ld0NsYXNzZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZGlnZXN0Q2xhc3NDb3VudHMoY2xhc3NlcywgY291bnQpIHtcbiAgICAgICAgICAvLyBVc2UgY3JlYXRlTWFwKCkgdG8gcHJldmVudCBjbGFzcyBhc3N1bXB0aW9ucyBpbnZvbHZpbmcgcHJvcGVydHlcbiAgICAgICAgICAvLyBuYW1lcyBpbiBPYmplY3QucHJvdG90eXBlXG4gICAgICAgICAgdmFyIGNsYXNzQ291bnRzID0gZWxlbWVudC5kYXRhKCckY2xhc3NDb3VudHMnKSB8fCBjcmVhdGVNYXAoKTtcbiAgICAgICAgICB2YXIgY2xhc3Nlc1RvVXBkYXRlID0gW107XG4gICAgICAgICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGlmIChjb3VudCA+IDAgfHwgY2xhc3NDb3VudHNbY2xhc3NOYW1lXSkge1xuICAgICAgICAgICAgICBjbGFzc0NvdW50c1tjbGFzc05hbWVdID0gKGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gfHwgMCkgKyBjb3VudDtcbiAgICAgICAgICAgICAgaWYgKGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gPT09ICsoY291bnQgPiAwKSkge1xuICAgICAgICAgICAgICAgIGNsYXNzZXNUb1VwZGF0ZS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbGVtZW50LmRhdGEoJyRjbGFzc0NvdW50cycsIGNsYXNzQ291bnRzKTtcbiAgICAgICAgICByZXR1cm4gY2xhc3Nlc1RvVXBkYXRlLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcykge1xuICAgICAgICAgIHZhciB0b0FkZCA9IGFycmF5RGlmZmVyZW5jZShuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKTtcbiAgICAgICAgICB2YXIgdG9SZW1vdmUgPSBhcnJheURpZmZlcmVuY2Uob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7XG4gICAgICAgICAgdG9BZGQgPSBkaWdlc3RDbGFzc0NvdW50cyh0b0FkZCwgMSk7XG4gICAgICAgICAgdG9SZW1vdmUgPSBkaWdlc3RDbGFzc0NvdW50cyh0b1JlbW92ZSwgLTEpO1xuICAgICAgICAgIGlmICh0b0FkZCAmJiB0b0FkZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsIHRvQWRkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRvUmVtb3ZlICYmIHRvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgdG9SZW1vdmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG5nQ2xhc3NXYXRjaEFjdGlvbihuZXdWYWwpIHtcbiAgICAgICAgICBpZiAoc2VsZWN0b3IgPT09IHRydWUgfHwgc2NvcGUuJGluZGV4ICUgMiA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHZhciBuZXdDbGFzc2VzID0gYXJyYXlDbGFzc2VzKG5ld1ZhbCB8fCBbXSk7XG4gICAgICAgICAgICBpZiAoIW9sZFZhbCkge1xuICAgICAgICAgICAgICBhZGRDbGFzc2VzKG5ld0NsYXNzZXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghZXF1YWxzKG5ld1ZhbCxvbGRWYWwpKSB7XG4gICAgICAgICAgICAgIHZhciBvbGRDbGFzc2VzID0gYXJyYXlDbGFzc2VzKG9sZFZhbCk7XG4gICAgICAgICAgICAgIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG9sZFZhbCA9IHNoYWxsb3dDb3B5KG5ld1ZhbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYXJyYXlEaWZmZXJlbmNlKHRva2VuczEsIHRva2VuczIpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zMVtpXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b2tlbnMyLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgaWYgKHRva2VuID09IHRva2VuczJbal0pIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlcy5wdXNoKHRva2VuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXJyYXlDbGFzc2VzKGNsYXNzVmFsKSB7XG4gICAgICB2YXIgY2xhc3NlcyA9IFtdO1xuICAgICAgaWYgKGlzQXJyYXkoY2xhc3NWYWwpKSB7XG4gICAgICAgIGZvckVhY2goY2xhc3NWYWwsIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICBjbGFzc2VzID0gY2xhc3Nlcy5jb25jYXQoYXJyYXlDbGFzc2VzKHYpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhjbGFzc1ZhbCkpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzVmFsLnNwbGl0KCcgJyk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGNsYXNzVmFsKSkge1xuICAgICAgICBmb3JFYWNoKGNsYXNzVmFsLCBmdW5jdGlvbih2LCBrKSB7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLmNvbmNhdChrLnNwbGl0KCcgJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNsYXNzVmFsO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc1xuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xhc3NgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIGR5bmFtaWNhbGx5IHNldCBDU1MgY2xhc3NlcyBvbiBhbiBIVE1MIGVsZW1lbnQgYnkgZGF0YWJpbmRpbmdcbiAqIGFuIGV4cHJlc3Npb24gdGhhdCByZXByZXNlbnRzIGFsbCBjbGFzc2VzIHRvIGJlIGFkZGVkLlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgb3BlcmF0ZXMgaW4gdGhyZWUgZGlmZmVyZW50IHdheXMsIGRlcGVuZGluZyBvbiB3aGljaCBvZiB0aHJlZSB0eXBlcyB0aGUgZXhwcmVzc2lvblxuICogZXZhbHVhdGVzIHRvOlxuICpcbiAqIDEuIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlIHN0cmluZyBzaG91bGQgYmUgb25lIG9yIG1vcmUgc3BhY2UtZGVsaW1pdGVkIGNsYXNzXG4gKiBuYW1lcy5cbiAqXG4gKiAyLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gb2JqZWN0LCB0aGVuIGZvciBlYWNoIGtleS12YWx1ZSBwYWlyIG9mIHRoZVxuICogb2JqZWN0IHdpdGggYSB0cnV0aHkgdmFsdWUgdGhlIGNvcnJlc3BvbmRpbmcga2V5IGlzIHVzZWQgYXMgYSBjbGFzcyBuYW1lLlxuICpcbiAqIDMuIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhbiBhcnJheSwgZWFjaCBlbGVtZW50IG9mIHRoZSBhcnJheSBzaG91bGQgZWl0aGVyIGJlIGEgc3RyaW5nIGFzIGluXG4gKiB0eXBlIDEgb3IgYW4gb2JqZWN0IGFzIGluIHR5cGUgMi4gVGhpcyBtZWFucyB0aGF0IHlvdSBjYW4gbWl4IHN0cmluZ3MgYW5kIG9iamVjdHMgdG9nZXRoZXIgaW4gYW4gYXJyYXlcbiAqIHRvIGdpdmUgeW91IG1vcmUgY29udHJvbCBvdmVyIHdoYXQgQ1NTIGNsYXNzZXMgYXBwZWFyLiBTZWUgdGhlIGNvZGUgYmVsb3cgZm9yIGFuIGV4YW1wbGUgb2YgdGhpcy5cbiAqXG4gKlxuICogVGhlIGRpcmVjdGl2ZSB3b24ndCBhZGQgZHVwbGljYXRlIGNsYXNzZXMgaWYgYSBwYXJ0aWN1bGFyIGNsYXNzIHdhcyBhbHJlYWR5IHNldC5cbiAqXG4gKiBXaGVuIHRoZSBleHByZXNzaW9uIGNoYW5nZXMsIHRoZSBwcmV2aW91c2x5IGFkZGVkIGNsYXNzZXMgYXJlIHJlbW92ZWQgYW5kIG9ubHkgdGhlbiBhcmUgdGhlXG4gKiBuZXcgY2xhc3NlcyBhZGRlZC5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogKiphZGQqKiAtIGhhcHBlbnMganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRzXG4gKlxuICogKipyZW1vdmUqKiAtIGhhcHBlbnMganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHRcbiAqICAgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3NcbiAqICAgbmFtZXMsIGFuIGFycmF5LCBvciBhIG1hcCBvZiBjbGFzcyBuYW1lcyB0byBib29sZWFuIHZhbHVlcy4gSW4gdGhlIGNhc2Ugb2YgYSBtYXAsIHRoZVxuICogICBuYW1lcyBvZiB0aGUgcHJvcGVydGllcyB3aG9zZSB2YWx1ZXMgYXJlIHRydXRoeSB3aWxsIGJlIGFkZGVkIGFzIGNzcyBjbGFzc2VzIHRvIHRoZVxuICogICBlbGVtZW50LlxuICpcbiAqIEBleGFtcGxlIEV4YW1wbGUgdGhhdCBkZW1vbnN0cmF0ZXMgYmFzaWMgYmluZGluZ3MgdmlhIG5nQ2xhc3MgZGlyZWN0aXZlLlxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJ7c3RyaWtlOiBkZWxldGVkLCBib2xkOiBpbXBvcnRhbnQsICdoYXMtZXJyb3InOiBlcnJvcn1cIj5NYXAgU3ludGF4IEV4YW1wbGU8L3A+XG4gICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImRlbGV0ZWRcIj5cbiAgICAgICAgICBkZWxldGVkIChhcHBseSBcInN0cmlrZVwiIGNsYXNzKVxuICAgICAgIDwvbGFiZWw+PGJyPlxuICAgICAgIDxsYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJpbXBvcnRhbnRcIj5cbiAgICAgICAgICBpbXBvcnRhbnQgKGFwcGx5IFwiYm9sZFwiIGNsYXNzKVxuICAgICAgIDwvbGFiZWw+PGJyPlxuICAgICAgIDxsYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJlcnJvclwiPlxuICAgICAgICAgIGVycm9yIChhcHBseSBcImhhcy1lcnJvclwiIGNsYXNzKVxuICAgICAgIDwvbGFiZWw+XG4gICAgICAgPGhyPlxuICAgICAgIDxwIG5nLWNsYXNzPVwic3R5bGVcIj5Vc2luZyBTdHJpbmcgU3ludGF4PC9wPlxuICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic3R5bGVcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQgc3RyaWtlIHJlZFwiIGFyaWEtbGFiZWw9XCJUeXBlOiBib2xkIHN0cmlrZSByZWRcIj5cbiAgICAgICA8aHI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJbc3R5bGUxLCBzdHlsZTIsIHN0eWxlM11cIj5Vc2luZyBBcnJheSBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUxXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIj48YnI+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUyXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWQgMlwiPjxicj5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTNcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZCAzXCI+PGJyPlxuICAgICAgIDxocj5cbiAgICAgICA8cCBuZy1jbGFzcz1cIltzdHlsZTQsIHtvcmFuZ2U6IHdhcm5pbmd9XVwiPlVzaW5nIEFycmF5IGFuZCBNYXAgU3ludGF4PC9wPlxuICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInN0eWxlNFwiIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQsIHN0cmlrZVwiPjxicj5cbiAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwid2FybmluZ1wiPiB3YXJuaW5nIChhcHBseSBcIm9yYW5nZVwiIGNsYXNzKTwvbGFiZWw+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5zdHJpa2Uge1xuICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcbiAgICAgICB9XG4gICAgICAgLmJvbGQge1xuICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICB9XG4gICAgICAgLnJlZCB7XG4gICAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5oYXMtZXJyb3Ige1xuICAgICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XG4gICAgICAgfVxuICAgICAgIC5vcmFuZ2Uge1xuICAgICAgICAgICBjb2xvcjogb3JhbmdlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIHBzID0gZWxlbWVudC5hbGwoYnkuY3NzKCdwJykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSB0aGUgY2xhc3MnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QudG9NYXRjaCgvYm9sZC8pO1xuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QudG9NYXRjaCgvaGFzLWVycm9yLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2ltcG9ydGFudCcpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b01hdGNoKC9ib2xkLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Vycm9yJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL2hhcy1lcnJvci8pO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSBzdHJpbmcgZXhhbXBsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgxKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJycpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlJykpLnNlbmRLZXlzKCdyZWQnKTtcbiAgICAgICAgIGV4cGVjdChwcy5nZXQoMSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdyZWQnKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdhcnJheSBleGFtcGxlIHNob3VsZCBoYXZlIDMgY2xhc3NlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgyKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJycpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUxJykpLnNlbmRLZXlzKCdib2xkJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTInKSkuc2VuZEtleXMoJ3N0cmlrZScpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUzJykpLnNlbmRLZXlzKCdyZWQnKTtcbiAgICAgICAgIGV4cGVjdChwcy5nZXQoMikuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdib2xkIHN0cmlrZSByZWQnKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdhcnJheSB3aXRoIG1hcCBleGFtcGxlIHNob3VsZCBoYXZlIDIgY2xhc3NlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KHBzLmxhc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJycpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGU0JykpLnNlbmRLZXlzKCdib2xkJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd3YXJuaW5nJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QocHMubGFzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnYm9sZCBvcmFuZ2UnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuXG4gICAjIyBBbmltYXRpb25zXG5cbiAgIFRoZSBleGFtcGxlIGJlbG93IGRlbW9uc3RyYXRlcyBob3cgdG8gcGVyZm9ybSBhbmltYXRpb25zIHVzaW5nIG5nQ2xhc3MuXG5cbiAgIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IGlkPVwic2V0YnRuXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwic2V0XCIgbmctY2xpY2s9XCJteVZhcj0nbXktY2xhc3MnXCI+XG4gICAgICA8aW5wdXQgaWQ9XCJjbGVhcmJ0blwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cImNsZWFyXCIgbmctY2xpY2s9XCJteVZhcj0nJ1wiPlxuICAgICAgPGJyPlxuICAgICAgPHNwYW4gY2xhc3M9XCJiYXNlLWNsYXNzXCIgbmctY2xhc3M9XCJteVZhclwiPlNhbXBsZSBUZXh0PC9zcGFuPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuYmFzZS1jbGFzcyB7XG4gICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gICAgICAgfVxuXG4gICAgICAgLmJhc2UtY2xhc3MubXktY2xhc3Mge1xuICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgIGZvbnQtc2l6ZTozZW07XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsYXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5LmlkKCdzZXRidG4nKSkuY2xpY2soKTtcblxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcuYmFzZS1jbGFzcycpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5LmlkKCdjbGVhcmJ0bicpKS5jbGljaygpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG5cblxuICAgIyMgbmdDbGFzcyBhbmQgcHJlLWV4aXN0aW5nIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9uc1xuICAgVGhlIG5nQ2xhc3MgZGlyZWN0aXZlIHN0aWxsIHN1cHBvcnRzIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9ucyBldmVuIGlmIHRoZXkgZG8gbm90IGZvbGxvdyB0aGUgbmdBbmltYXRlIENTUyBuYW1pbmcgc3RydWN0dXJlLlxuICAgVXBvbiBhbmltYXRpb24gbmdBbmltYXRlIHdpbGwgYXBwbHkgc3VwcGxlbWVudGFyeSBDU1MgY2xhc3NlcyB0byB0cmFjayB0aGUgc3RhcnQgYW5kIGVuZCBvZiBhbiBhbmltYXRpb24sIGJ1dCB0aGlzIHdpbGwgbm90IGhpbmRlclxuICAgYW55IHByZS1leGlzdGluZyBDU1MgdHJhbnNpdGlvbnMgYWxyZWFkeSBvbiB0aGUgZWxlbWVudC4gVG8gZ2V0IGFuIGlkZWEgb2Ygd2hhdCBoYXBwZW5zIGR1cmluZyBhIGNsYXNzLWJhc2VkIGFuaW1hdGlvbiwgYmUgc3VyZVxuICAgdG8gdmlldyB0aGUgc3RlcCBieSBzdGVwIGRldGFpbHMgb2Yge0BsaW5rICRhbmltYXRlI2FkZENsYXNzICRhbmltYXRlLmFkZENsYXNzfSBhbmRcbiAgIHtAbGluayAkYW5pbWF0ZSNyZW1vdmVDbGFzcyAkYW5pbWF0ZS5yZW1vdmVDbGFzc30uXG4gKi9cbnZhciBuZ0NsYXNzRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJycsIHRydWUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xhc3NPZGRcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluXG4gKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhblxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NPZGQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlIHJlc3VsdFxuICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgIHt7bmFtZX19XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L29sPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAub2RkIHtcbiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5ldmVuIHtcbiAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9vZGQvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2xhc3NPZGREaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnT2RkJywgMCk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc0V2ZW5cbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluXG4gKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhblxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NFdmVuIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZVxuICogICByZXN1bHQgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3MgbmFtZXMgb3IgYW4gYXJyYXkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8b2wgbmctaW5pdD1cIm5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J11cIj5cbiAgICAgICAgICA8bGkgbmctcmVwZWF0PVwibmFtZSBpbiBuYW1lc1wiPlxuICAgICAgICAgICA8c3BhbiBuZy1jbGFzcy1vZGQ9XCInb2RkJ1wiIG5nLWNsYXNzLWV2ZW49XCInZXZlbidcIj5cbiAgICAgICAgICAgICB7e25hbWV9fSAmbmJzcDsgJm5ic3A7ICZuYnNwO1xuICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC9vbD5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLm9kZCB7XG4gICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgIH1cbiAgICAgICAuZXZlbiB7XG4gICAgICAgICBjb2xvcjogYmx1ZTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygwKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgdG9NYXRjaCgvb2RkLyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygxKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgdG9NYXRjaCgvZXZlbi8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCdFdmVuJywgMSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbG9ha1xuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIHByZXZlbnQgdGhlIEFuZ3VsYXIgaHRtbCB0ZW1wbGF0ZSBmcm9tIGJlaW5nIGJyaWVmbHlcbiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3ICh1bmNvbXBpbGVkKSBmb3JtIHdoaWxlIHlvdXIgYXBwbGljYXRpb24gaXMgbG9hZGluZy4gVXNlIHRoaXNcbiAqIGRpcmVjdGl2ZSB0byBhdm9pZCB0aGUgdW5kZXNpcmFibGUgZmxpY2tlciBlZmZlY3QgY2F1c2VkIGJ5IHRoZSBodG1sIHRlbXBsYXRlIGRpc3BsYXkuXG4gKlxuICogVGhlIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCB0byB0aGUgYDxib2R5PmAgZWxlbWVudCwgYnV0IHRoZSBwcmVmZXJyZWQgdXNhZ2UgaXMgdG8gYXBwbHlcbiAqIG11bHRpcGxlIGBuZ0Nsb2FrYCBkaXJlY3RpdmVzIHRvIHNtYWxsIHBvcnRpb25zIG9mIHRoZSBwYWdlIHRvIHBlcm1pdCBwcm9ncmVzc2l2ZSByZW5kZXJpbmdcbiAqIG9mIHRoZSBicm93c2VyIHZpZXcuXG4gKlxuICogYG5nQ2xvYWtgIHdvcmtzIGluIGNvb3BlcmF0aW9uIHdpdGggdGhlIGZvbGxvd2luZyBjc3MgcnVsZSBlbWJlZGRlZCB3aXRoaW4gYGFuZ3VsYXIuanNgIGFuZFxuICogYGFuZ3VsYXIubWluLmpzYC5cbiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICpcbiAqIGBgYGNzc1xuICogW25nXFw6Y2xvYWtdLCBbbmctY2xvYWtdLCBbZGF0YS1uZy1jbG9ha10sIFt4LW5nLWNsb2FrXSwgLm5nLWNsb2FrLCAueC1uZy1jbG9hayB7XG4gKiAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhpcyBjc3MgcnVsZSBpcyBsb2FkZWQgYnkgdGhlIGJyb3dzZXIsIGFsbCBodG1sIGVsZW1lbnRzIChpbmNsdWRpbmcgdGhlaXIgY2hpbGRyZW4pIHRoYXRcbiAqIGFyZSB0YWdnZWQgd2l0aCB0aGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBhcmUgaGlkZGVuLiBXaGVuIEFuZ3VsYXIgZW5jb3VudGVycyB0aGlzIGRpcmVjdGl2ZVxuICogZHVyaW5nIHRoZSBjb21waWxhdGlvbiBvZiB0aGUgdGVtcGxhdGUgaXQgZGVsZXRlcyB0aGUgYG5nQ2xvYWtgIGVsZW1lbnQgYXR0cmlidXRlLCBtYWtpbmdcbiAqIHRoZSBjb21waWxlZCBlbGVtZW50IHZpc2libGUuXG4gKlxuICogRm9yIHRoZSBiZXN0IHJlc3VsdCwgdGhlIGBhbmd1bGFyLmpzYCBzY3JpcHQgbXVzdCBiZSBsb2FkZWQgaW4gdGhlIGhlYWQgc2VjdGlvbiBvZiB0aGUgaHRtbFxuICogZG9jdW1lbnQ7IGFsdGVybmF0aXZlbHksIHRoZSBjc3MgcnVsZSBhYm92ZSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSBleHRlcm5hbCBzdHlsZXNoZWV0IG9mIHRoZVxuICogYXBwbGljYXRpb24uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8ZGl2IGlkPVwidGVtcGxhdGUxXCIgbmctY2xvYWs+e3sgJ2hlbGxvJyB9fTwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwidGVtcGxhdGUyXCIgY2xhc3M9XCJuZy1jbG9ha1wiPnt7ICd3b3JsZCcgfX08L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCByZW1vdmUgdGhlIHRlbXBsYXRlIGRpcmVjdGl2ZSBhbmQgY3NzIGNsYXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoJCgnI3RlbXBsYXRlMScpLmdldEF0dHJpYnV0ZSgnbmctY2xvYWsnKSkuXG4gICAgICAgICAgIHRvQmVOdWxsKCk7XG4gICAgICAgICBleHBlY3QoJCgnI3RlbXBsYXRlMicpLmdldEF0dHJpYnV0ZSgnbmctY2xvYWsnKSkuXG4gICAgICAgICAgIHRvQmVOdWxsKCk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKi9cbnZhciBuZ0Nsb2FrRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgYXR0ci4kc2V0KCduZ0Nsb2FrJywgdW5kZWZpbmVkKTtcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCduZy1jbG9haycpO1xuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NvbnRyb2xsZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgYXR0YWNoZXMgYSBjb250cm9sbGVyIGNsYXNzIHRvIHRoZSB2aWV3LiBUaGlzIGlzIGEga2V5IGFzcGVjdCBvZiBob3cgYW5ndWxhclxuICogc3VwcG9ydHMgdGhlIHByaW5jaXBsZXMgYmVoaW5kIHRoZSBNb2RlbC1WaWV3LUNvbnRyb2xsZXIgZGVzaWduIHBhdHRlcm4uXG4gKlxuICogTVZDIGNvbXBvbmVudHMgaW4gYW5ndWxhcjpcbiAqXG4gKiAqIE1vZGVsIOKAlCBNb2RlbHMgYXJlIHRoZSBwcm9wZXJ0aWVzIG9mIGEgc2NvcGU7IHNjb3BlcyBhcmUgYXR0YWNoZWQgdG8gdGhlIERPTSB3aGVyZSBzY29wZSBwcm9wZXJ0aWVzXG4gKiAgIGFyZSBhY2Nlc3NlZCB0aHJvdWdoIGJpbmRpbmdzLlxuICogKiBWaWV3IOKAlCBUaGUgdGVtcGxhdGUgKEhUTUwgd2l0aCBkYXRhIGJpbmRpbmdzKSB0aGF0IGlzIHJlbmRlcmVkIGludG8gdGhlIFZpZXcuXG4gKiAqIENvbnRyb2xsZXIg4oCUIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgc3BlY2lmaWVzIGEgQ29udHJvbGxlciBjbGFzczsgdGhlIGNsYXNzIGNvbnRhaW5zIGJ1c2luZXNzXG4gKiAgIGxvZ2ljIGJlaGluZCB0aGUgYXBwbGljYXRpb24gdG8gZGVjb3JhdGUgdGhlIHNjb3BlIHdpdGggZnVuY3Rpb25zIGFuZCB2YWx1ZXNcbiAqXG4gKiBOb3RlIHRoYXQgeW91IGNhbiBhbHNvIGF0dGFjaCBjb250cm9sbGVycyB0byB0aGUgRE9NIGJ5IGRlY2xhcmluZyBpdCBpbiBhIHJvdXRlIGRlZmluaXRpb25cbiAqIHZpYSB0aGUge0BsaW5rIG5nUm91dGUuJHJvdXRlICRyb3V0ZX0gc2VydmljZS4gQSBjb21tb24gbWlzdGFrZSBpcyB0byBkZWNsYXJlIHRoZSBjb250cm9sbGVyXG4gKiBhZ2FpbiB1c2luZyBgbmctY29udHJvbGxlcmAgaW4gdGhlIHRlbXBsYXRlIGl0c2VsZi4gIFRoaXMgd2lsbCBjYXVzZSB0aGUgY29udHJvbGxlciB0byBiZSBhdHRhY2hlZFxuICogYW5kIGV4ZWN1dGVkIHR3aWNlLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgNTAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29udHJvbGxlciBOYW1lIG9mIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZSBjdXJyZW50XG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciAkY29udHJvbGxlclByb3ZpZGVyfSBvciBhbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufVxuICogdGhhdCBvbiB0aGUgY3VycmVudCBzY29wZSBldmFsdWF0ZXMgdG8gYSBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBUaGUgY29udHJvbGxlciBpbnN0YW5jZSBjYW4gYmUgcHVibGlzaGVkIGludG8gYSBzY29wZSBwcm9wZXJ0eSBieSBzcGVjaWZ5aW5nXG4gKiBgbmctY29udHJvbGxlcj1cImFzIHByb3BlcnR5TmFtZVwiYC5cbiAqXG4gKiBJZiB0aGUgY3VycmVudCBgJGNvbnRyb2xsZXJQcm92aWRlcmAgaXMgY29uZmlndXJlZCB0byB1c2UgZ2xvYmFscyAodmlhXG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNhbGxvd0dsb2JhbHMgYCRjb250cm9sbGVyUHJvdmlkZXIuYWxsb3dHbG9iYWxzKClgIH0pLCB0aGlzIG1heVxuICogYWxzbyBiZSB0aGUgbmFtZSBvZiBhIGdsb2JhbGx5IGFjY2Vzc2libGUgY29uc3RydWN0b3IgZnVuY3Rpb24gKG5vdCByZWNvbW1lbmRlZCkuXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgaXMgYSBzaW1wbGUgZm9ybSBmb3IgZWRpdGluZyB1c2VyIGNvbnRhY3QgaW5mb3JtYXRpb24uIEFkZGluZywgcmVtb3ZpbmcsIGNsZWFyaW5nLCBhbmRcbiAqIGdyZWV0aW5nIGFyZSBtZXRob2RzIGRlY2xhcmVkIG9uIHRoZSBjb250cm9sbGVyIChzZWUgc291cmNlIHRhYikuIFRoZXNlIG1ldGhvZHMgY2FuXG4gKiBlYXNpbHkgYmUgY2FsbGVkIGZyb20gdGhlIGFuZ3VsYXIgbWFya3VwLiBBbnkgY2hhbmdlcyB0byB0aGUgZGF0YSBhcmUgYXV0b21hdGljYWxseSByZWZsZWN0ZWRcbiAqIGluIHRoZSBWaWV3IHdpdGhvdXQgdGhlIG5lZWQgZm9yIGEgbWFudWFsIHVwZGF0ZS5cbiAqXG4gKiBUd28gZGlmZmVyZW50IGRlY2xhcmF0aW9uIHN0eWxlcyBhcmUgaW5jbHVkZWQgYmVsb3c6XG4gKlxuICogKiBvbmUgYmluZHMgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBkaXJlY3RseSBvbnRvIHRoZSBjb250cm9sbGVyIHVzaW5nIGB0aGlzYDpcbiAqIGBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMSBhcyBzZXR0aW5nc1wiYFxuICogKiBvbmUgaW5qZWN0cyBgJHNjb3BlYCBpbnRvIHRoZSBjb250cm9sbGVyOlxuICogYG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIyXCJgXG4gKlxuICogVGhlIHNlY29uZCBvcHRpb24gaXMgbW9yZSBjb21tb24gaW4gdGhlIEFuZ3VsYXIgY29tbXVuaXR5LCBhbmQgaXMgZ2VuZXJhbGx5IHVzZWQgaW4gYm9pbGVycGxhdGVzXG4gKiBhbmQgaW4gdGhpcyBndWlkZS4gSG93ZXZlciwgdGhlcmUgYXJlIGFkdmFudGFnZXMgdG8gYmluZGluZyBwcm9wZXJ0aWVzIGRpcmVjdGx5IHRvIHRoZSBjb250cm9sbGVyXG4gKiBhbmQgYXZvaWRpbmcgc2NvcGUuXG4gKlxuICogKiBVc2luZyBgY29udHJvbGxlciBhc2AgbWFrZXMgaXQgb2J2aW91cyB3aGljaCBjb250cm9sbGVyIHlvdSBhcmUgYWNjZXNzaW5nIGluIHRoZSB0ZW1wbGF0ZSB3aGVuXG4gKiBtdWx0aXBsZSBjb250cm9sbGVycyBhcHBseSB0byBhbiBlbGVtZW50LlxuICogKiBJZiB5b3UgYXJlIHdyaXRpbmcgeW91ciBjb250cm9sbGVycyBhcyBjbGFzc2VzIHlvdSBoYXZlIGVhc2llciBhY2Nlc3MgdG8gdGhlIHByb3BlcnRpZXMgYW5kXG4gKiBtZXRob2RzLCB3aGljaCB3aWxsIGFwcGVhciBvbiB0aGUgc2NvcGUsIGZyb20gaW5zaWRlIHRoZSBjb250cm9sbGVyIGNvZGUuXG4gKiAqIFNpbmNlIHRoZXJlIGlzIGFsd2F5cyBhIGAuYCBpbiB0aGUgYmluZGluZ3MsIHlvdSBkb24ndCBoYXZlIHRvIHdvcnJ5IGFib3V0IHByb3RvdHlwYWxcbiAqIGluaGVyaXRhbmNlIG1hc2tpbmcgcHJpbWl0aXZlcy5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBgY29udHJvbGxlciBhc2Agc3ludGF4LlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0NvbnRyb2xsZXJBc1wiIG1vZHVsZT1cImNvbnRyb2xsZXJBc0V4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDxkaXYgaWQ9XCJjdHJsLWFzLWV4bXBsXCIgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjEgYXMgc2V0dGluZ3NcIj5cbiAqICAgICAgPGxhYmVsPk5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic2V0dGluZ3MubmFtZVwiLz48L2xhYmVsPlxuICogICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic2V0dGluZ3MuZ3JlZXQoKVwiPmdyZWV0PC9idXR0b24+PGJyLz5cbiAqICAgICAgQ29udGFjdDpcbiAqICAgICAgPHVsPlxuICogICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzXCI+XG4gKiAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwiY29udGFjdC50eXBlXCIgYXJpYS1sYWJlbD1cIkNvbnRhY3QgbWV0aG9kXCIgaWQ9XCJzZWxlY3Rfe3skaW5kZXh9fVwiPlxuICogICAgICAgICAgICAgPG9wdGlvbj5waG9uZTwvb3B0aW9uPlxuICogICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPlxuICogICAgICAgICAgPC9zZWxlY3Q+XG4gKiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cImNvbnRhY3QudmFsdWVcIiBhcmlhLWxhYmVsbGVkYnk9XCJzZWxlY3Rfe3skaW5kZXh9fVwiIC8+XG4gKiAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic2V0dGluZ3MuY2xlYXJDb250YWN0KGNvbnRhY3QpXCI+Y2xlYXI8L2J1dHRvbj5cbiAqICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5yZW1vdmVDb250YWN0KGNvbnRhY3QpXCIgYXJpYS1sYWJlbD1cIlJlbW92ZVwiPlg8L2J1dHRvbj5cbiAqICAgICAgICA8L2xpPlxuICogICAgICAgIDxsaT48YnV0dG9uIG5nLWNsaWNrPVwic2V0dGluZ3MuYWRkQ29udGFjdCgpXCI+YWRkPC9idXR0b24+PC9saT5cbiAqICAgICA8L3VsPlxuICogICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgYW5ndWxhci5tb2R1bGUoJ2NvbnRyb2xsZXJBc0V4YW1wbGUnLCBbXSlcbiAqICAgICAgLmNvbnRyb2xsZXIoJ1NldHRpbmdzQ29udHJvbGxlcjEnLCBTZXR0aW5nc0NvbnRyb2xsZXIxKTtcbiAqXG4gKiAgICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIxKCkge1xuICogICAgICB0aGlzLm5hbWUgPSBcIkpvaG4gU21pdGhcIjtcbiAqICAgICAgdGhpcy5jb250YWN0cyA9IFtcbiAqICAgICAgICB7dHlwZTogJ3Bob25lJywgdmFsdWU6ICc0MDggNTU1IDEyMTInfSxcbiAqICAgICAgICB7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICdqb2huLnNtaXRoQGV4YW1wbGUub3JnJ30gXTtcbiAqICAgIH1cbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xuICogICAgICBhbGVydCh0aGlzLm5hbWUpO1xuICogICAgfTtcbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgIHRoaXMuY29udGFjdHMucHVzaCh7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICd5b3VybmFtZUBleGFtcGxlLm9yZyd9KTtcbiAqICAgIH07XG4gKlxuICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkge1xuICogICAgIHZhciBpbmRleCA9IHRoaXMuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICB0aGlzLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICB9O1xuICpcbiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgY29udGFjdC50eXBlID0gJ3Bob25lJztcbiAqICAgICAgY29udGFjdC52YWx1ZSA9ICcnO1xuICogICAgfTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyIGFzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5pZCgnY3RybC1hcy1leG1wbCcpKTtcbiAqICAgICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5Lm1vZGVsKCdzZXR0aW5ncy5uYW1lJykpXG4gKiAgICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpO1xuICpcbiAqICAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMCkpO1xuICogICAgICAgdmFyIHNlY29uZFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnNDA4IDU1NSAxMjEyJyk7XG4gKlxuICogICAgICAgZXhwZWN0KHNlY29uZFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnam9obi5zbWl0aEBleGFtcGxlLm9yZycpO1xuICpcbiAqICAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJycpO1xuICpcbiAqICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0cycpLnJvdygyKSlcbiAqICAgICAgICAgICAuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKVxuICogICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJ3lvdXJuYW1lQGV4YW1wbGUub3JnJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBcImF0dGFjaCB0byBgJHNjb3BlYFwiIHN0eWxlIG9mIGNvbnRyb2xsZXIuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlclwiIG1vZHVsZT1cImNvbnRyb2xsZXJFeGFtcGxlXCI+XG4gKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgPGRpdiBpZD1cImN0cmwtZXhtcGxcIiBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMlwiPlxuICogICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIi8+PC9sYWJlbD5cbiAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZ3JlZXQoKVwiPmdyZWV0PC9idXR0b24+PGJyLz5cbiAqICAgICBDb250YWN0OlxuICogICAgIDx1bD5cbiAqICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIiBpZD1cInNlbGVjdF97eyRpbmRleH19XCI+XG4gKiAgICAgICAgICAgIDxvcHRpb24+cGhvbmU8L29wdGlvbj5cbiAqICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPlxuICogICAgICAgICA8L3NlbGVjdD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJjb250YWN0LnZhbHVlXCIgYXJpYS1sYWJlbGxlZGJ5PVwic2VsZWN0X3t7JGluZGV4fX1cIiAvPlxuICogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY2xlYXJDb250YWN0KGNvbnRhY3QpXCI+Y2xlYXI8L2J1dHRvbj5cbiAqICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInJlbW92ZUNvbnRhY3QoY29udGFjdClcIj5YPC9idXR0b24+XG4gKiAgICAgICA8L2xpPlxuICogICAgICAgPGxpPlsgPGJ1dHRvbiBuZy1jbGljaz1cImFkZENvbnRhY3QoKVwiPmFkZDwvYnV0dG9uPiBdPC9saT5cbiAqICAgIDwvdWw+XG4gKiAgIDwvZGl2PlxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgIGFuZ3VsYXIubW9kdWxlKCdjb250cm9sbGVyRXhhbXBsZScsIFtdKVxuICogICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXIyJywgWyckc2NvcGUnLCBTZXR0aW5nc0NvbnRyb2xsZXIyXSk7XG4gKlxuICogICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIyKCRzY29wZSkge1xuICogICAgICRzY29wZS5uYW1lID0gXCJKb2huIFNtaXRoXCI7XG4gKiAgICAgJHNjb3BlLmNvbnRhY3RzID0gW1xuICogICAgICAge3R5cGU6J3Bob25lJywgdmFsdWU6JzQwOCA1NTUgMTIxMid9LFxuICogICAgICAge3R5cGU6J2VtYWlsJywgdmFsdWU6J2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnfSBdO1xuICpcbiAqICAgICAkc2NvcGUuZ3JlZXQgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgIGFsZXJ0KCRzY29wZS5uYW1lKTtcbiAqICAgICB9O1xuICpcbiAqICAgICAkc2NvcGUuYWRkQ29udGFjdCA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnB1c2goe3R5cGU6J2VtYWlsJywgdmFsdWU6J3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pO1xuICogICAgIH07XG4gKlxuICogICAgICRzY29wZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7XG4gKiAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICAgfTtcbiAqXG4gKiAgICAgJHNjb3BlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgIGNvbnRhY3QudHlwZSA9ICdwaG9uZSc7XG4gKiAgICAgICBjb250YWN0LnZhbHVlID0gJyc7XG4gKiAgICAgfTtcbiAqICAgfVxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAqICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQoYnkuaWQoJ2N0cmwtZXhtcGwnKSk7XG4gKlxuICogICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJ0pvaG4gU21pdGgnKTtcbiAqXG4gKiAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygwKSk7XG4gKiAgICAgIHZhciBzZWNvbmRSZXBlYXQgPVxuICogICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpO1xuICogICAgICBleHBlY3Qoc2Vjb25kUmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTtcbiAqXG4gKiAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgIC50b0JlKCcnKTtcbiAqXG4gKiAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIGNvbnRhY3RzJykucm93KDIpKVxuICogICAgICAgICAgLmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAudG9CZSgneW91cm5hbWVAZXhhbXBsZS5vcmcnKTtcbiAqICAgIH0pO1xuICogIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuXG4gKi9cbnZhciBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUgPSBbZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogdHJ1ZSxcbiAgICBjb250cm9sbGVyOiAnQCcsXG4gICAgcHJpb3JpdHk6IDUwMFxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDc3BcbiAqXG4gKiBAZWxlbWVudCBodG1sXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBBbmd1bGFyIGhhcyBzb21lIGZlYXR1cmVzIHRoYXQgY2FuIGJyZWFrIGNlcnRhaW5cbiAqIFtDU1AgKENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQKSBydWxlcy5cbiAqXG4gKiBJZiB5b3UgaW50ZW5kIHRvIGltcGxlbWVudCB0aGVzZSBydWxlcyB0aGVuIHlvdSBtdXN0IHRlbGwgQW5ndWxhciBub3QgdG8gdXNlIHRoZXNlIGZlYXR1cmVzLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IHdoZW4gZGV2ZWxvcGluZyB0aGluZ3MgbGlrZSBHb29nbGUgQ2hyb21lIEV4dGVuc2lvbnMgb3IgVW5pdmVyc2FsIFdpbmRvd3MgQXBwcy5cbiAqXG4gKlxuICogVGhlIGZvbGxvd2luZyBydWxlcyBhZmZlY3QgQW5ndWxhcjpcbiAqXG4gKiAqIGB1bnNhZmUtZXZhbGA6IHRoaXMgcnVsZSBmb3JiaWRzIGFwcHMgdG8gdXNlIGBldmFsYCBvciBgRnVuY3Rpb24oc3RyaW5nKWAgZ2VuZXJhdGVkIGZ1bmN0aW9uc1xuICogKGFtb25nIG90aGVyIHRoaW5ncykuIEFuZ3VsYXIgbWFrZXMgdXNlIG9mIHRoaXMgaW4gdGhlIHtAbGluayAkcGFyc2V9IHNlcnZpY2UgdG8gcHJvdmlkZSBhIDMwJVxuICogaW5jcmVhc2UgaW4gdGhlIHNwZWVkIG9mIGV2YWx1YXRpbmcgQW5ndWxhciBleHByZXNzaW9ucy5cbiAqXG4gKiAqIGB1bnNhZmUtaW5saW5lYDogdGhpcyBydWxlIGZvcmJpZHMgYXBwcyBmcm9tIGluamVjdCBjdXN0b20gc3R5bGVzIGludG8gdGhlIGRvY3VtZW50LiBBbmd1bGFyXG4gKiBtYWtlcyB1c2Ugb2YgdGhpcyB0byBpbmNsdWRlIHNvbWUgQ1NTIHJ1bGVzIChlLmcuIHtAbGluayBuZ0Nsb2FrfSBhbmQge0BsaW5rIG5nSGlkZX0pLlxuICogVG8gbWFrZSB0aGVzZSBkaXJlY3RpdmVzIHdvcmsgd2hlbiBhIENTUCBydWxlIGlzIGJsb2NraW5nIGlubGluZSBzdHlsZXMsIHlvdSBtdXN0IGxpbmsgdG8gdGhlXG4gKiBgYW5ndWxhci1jc3AuY3NzYCBpbiB5b3VyIEhUTUwgbWFudWFsbHkuXG4gKlxuICogSWYgeW91IGRvIG5vdCBwcm92aWRlIGBuZ0NzcGAgdGhlbiBBbmd1bGFyIHRyaWVzIHRvIGF1dG9kZXRlY3QgaWYgQ1NQIGlzIGJsb2NraW5nIHVuc2FmZS1ldmFsXG4gKiBhbmQgYXV0b21hdGljYWxseSBkZWFjdGl2YXRlcyB0aGlzIGZlYXR1cmUgaW4gdGhlIHtAbGluayAkcGFyc2V9IHNlcnZpY2UuIFRoaXMgYXV0b2RldGVjdGlvbixcbiAqIGhvd2V2ZXIsIHRyaWdnZXJzIGEgQ1NQIGVycm9yIHRvIGJlIGxvZ2dlZCBpbiB0aGUgY29uc29sZTpcbiAqXG4gKiBgYGBcbiAqIFJlZnVzZWQgdG8gZXZhbHVhdGUgYSBzdHJpbmcgYXMgSmF2YVNjcmlwdCBiZWNhdXNlICd1bnNhZmUtZXZhbCcgaXMgbm90IGFuIGFsbG93ZWQgc291cmNlIG9mXG4gKiBzY3JpcHQgaW4gdGhlIGZvbGxvd2luZyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBkaXJlY3RpdmU6IFwiZGVmYXVsdC1zcmMgJ3NlbGYnXCIuIE5vdGUgdGhhdFxuICogJ3NjcmlwdC1zcmMnIHdhcyBub3QgZXhwbGljaXRseSBzZXQsIHNvICdkZWZhdWx0LXNyYycgaXMgdXNlZCBhcyBhIGZhbGxiYWNrLlxuICogYGBgXG4gKlxuICogVGhpcyBlcnJvciBpcyBoYXJtbGVzcyBidXQgYW5ub3lpbmcuIFRvIHByZXZlbnQgdGhlIGVycm9yIGZyb20gc2hvd2luZyB1cCwgcHV0IHRoZSBgbmdDc3BgXG4gKiBkaXJlY3RpdmUgb24gYW4gZWxlbWVudCBvZiB0aGUgSFRNTCBkb2N1bWVudCB0aGF0IGFwcGVhcnMgYmVmb3JlIHRoZSBgPHNjcmlwdD5gIHRhZyB0aGF0IGxvYWRzXG4gKiB0aGUgYGFuZ3VsYXIuanNgIGZpbGUuXG4gKlxuICogKk5vdGU6IFRoaXMgZGlyZWN0aXZlIGlzIG9ubHkgYXZhaWxhYmxlIGluIHRoZSBgbmctY3NwYCBhbmQgYGRhdGEtbmctY3NwYCBhdHRyaWJ1dGUgZm9ybS4qXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IHdoaWNoIG9mIHRoZSBDU1AgcmVsYXRlZCBBbmd1bGFyIGZlYXR1cmVzIHNob3VsZCBiZSBkZWFjdGl2YXRlZCBieSBwcm92aWRpbmdcbiAqIGEgdmFsdWUgZm9yIHRoZSBgbmctY3NwYCBhdHRyaWJ1dGUuIFRoZSBvcHRpb25zIGFyZSBhcyBmb2xsb3dzOlxuICpcbiAqICogbm8taW5saW5lLXN0eWxlOiB0aGlzIHN0b3BzIEFuZ3VsYXIgZnJvbSBpbmplY3RpbmcgQ1NTIHN0eWxlcyBpbnRvIHRoZSBET01cbiAqXG4gKiAqIG5vLXVuc2FmZS1ldmFsOiB0aGlzIHN0b3BzIEFuZ3VsYXIgZnJvbSBvcHRpbWlzaW5nICRwYXJzZSB3aXRoIHVuc2FmZSBldmFsIG9mIHN0cmluZ3NcbiAqXG4gKiBZb3UgY2FuIHVzZSB0aGVzZSB2YWx1ZXMgaW4gdGhlIGZvbGxvd2luZyBjb21iaW5hdGlvbnM6XG4gKlxuICpcbiAqICogTm8gZGVjbGFyYXRpb24gbWVhbnMgdGhhdCBBbmd1bGFyIHdpbGwgYXNzdW1lIHRoYXQgeW91IGNhbiBkbyBpbmxpbmUgc3R5bGVzLCBidXQgaXQgd2lsbCBkb1xuICogYSBydW50aW1lIGNoZWNrIGZvciB1bnNhZmUtZXZhbC4gRS5nLiBgPGJvZHk+YC4gVGhpcyBpcyBiYWNrd2FyZGx5IGNvbXBhdGlibGUgd2l0aCBwcmV2aW91cyB2ZXJzaW9uc1xuICogb2YgQW5ndWxhci5cbiAqXG4gKiAqIEEgc2ltcGxlIGBuZy1jc3BgIChvciBgZGF0YS1uZy1jc3BgKSBhdHRyaWJ1dGUgd2lsbCB0ZWxsIEFuZ3VsYXIgdG8gZGVhY3RpdmF0ZSBib3RoIGlubGluZVxuICogc3R5bGVzIGFuZCB1bnNhZmUgZXZhbC4gRS5nLiBgPGJvZHkgbmctY3NwPmAuIFRoaXMgaXMgYmFja3dhcmRseSBjb21wYXRpYmxlIHdpdGggcHJldmlvdXMgdmVyc2lvbnNcbiAqIG9mIEFuZ3VsYXIuXG4gKlxuICogKiBTcGVjaWZ5aW5nIG9ubHkgYG5vLXVuc2FmZS1ldmFsYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgdXNlIGV2YWwsIGJ1dCB0aGF0IHdlIGNhbiBpbmplY3RcbiAqIGlubGluZSBzdHlsZXMuIEUuZy4gYDxib2R5IG5nLWNzcD1cIm5vLXVuc2FmZS1ldmFsXCI+YC5cbiAqXG4gKiAqIFNwZWNpZnlpbmcgb25seSBgbm8taW5saW5lLXN0eWxlYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgaW5qZWN0IHN0eWxlcywgYnV0IHRoYXQgd2UgY2FuXG4gKiBydW4gZXZhbCAtIG5vIGF1dG9tY2F0aWMgY2hlY2sgZm9yIHVuc2FmZSBldmFsIHdpbGwgb2NjdXIuIEUuZy4gYDxib2R5IG5nLWNzcD1cIm5vLWlubGluZS1zdHlsZVwiPmBcbiAqXG4gKiAqIFNwZWNpZnlpbmcgYm90aCBgbm8tdW5zYWZlLWV2YWxgIGFuZCBgbm8taW5saW5lLXN0eWxlYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgaW5qZWN0XG4gKiBzdHlsZXMgbm9yIHVzZSBldmFsLCB3aGljaCBpcyB0aGUgc2FtZSBhcyBhbiBlbXB0eTogbmctY3NwLlxuICogRS5nLmA8Ym9keSBuZy1jc3A9XCJuby1pbmxpbmUtc3R5bGU7bm8tdW5zYWZlLWV2YWxcIj5gXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gYXBwbHkgdGhlIGBuZ0NzcGAgZGlyZWN0aXZlIHRvIHRoZSBgaHRtbGAgdGFnLlxuICAgYGBgaHRtbFxuICAgICA8IWRvY3R5cGUgaHRtbD5cbiAgICAgPGh0bWwgbmctYXBwIG5nLWNzcD5cbiAgICAgLi4uXG4gICAgIC4uLlxuICAgICA8L2h0bWw+XG4gICBgYGBcbiAgKiBAZXhhbXBsZVxuICAgICAgLy8gTm90ZTogdGhlIHN1ZmZpeCBgLmNzcGAgaW4gdGhlIGV4YW1wbGUgbmFtZSB0cmlnZ2Vyc1xuICAgICAgLy8gY3NwIG1vZGUgaW4gb3VyIGh0dHAgc2VydmVyIVxuICAgICAgPGV4YW1wbGUgbmFtZT1cImV4YW1wbGUuY3NwXCIgbW9kdWxlPVwiY3NwRXhhbXBsZVwiIG5nLWNzcD1cInRydWVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNYWluQ29udHJvbGxlciBhcyBjdHJsXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY3RybC5pbmMoKVwiIGlkPVwiaW5jXCI+SW5jcmVtZW50PC9idXR0b24+XG4gICAgICAgICAgICAgIDxzcGFuIGlkPVwiY291bnRlclwiPlxuICAgICAgICAgICAgICAgIHt7Y3RybC5jb3VudGVyfX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjdHJsLmV2aWwoKVwiIGlkPVwiZXZpbFwiPkV2aWw8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJldmlsRXJyb3JcIj5cbiAgICAgICAgICAgICAgICB7e2N0cmwuZXZpbEVycm9yfX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY3NwRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdNYWluQ29udHJvbGxlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnRlciA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY291bnRlcisrO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5ldmlsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAvLyBqc2hpbnQgZXZpbDp0cnVlXG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBldmFsKCcxKzInKTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmlsRXJyb3IgPSBlLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB1dGlsLCB3ZWJkcml2ZXI7XG5cbiAgICAgICAgICB2YXIgaW5jQnRuID0gZWxlbWVudChieS5pZCgnaW5jJykpO1xuICAgICAgICAgIHZhciBjb3VudGVyID0gZWxlbWVudChieS5pZCgnY291bnRlcicpKTtcbiAgICAgICAgICB2YXIgZXZpbEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2V2aWwnKSk7XG4gICAgICAgICAgdmFyIGV2aWxFcnJvciA9IGVsZW1lbnQoYnkuaWQoJ2V2aWxFcnJvcicpKTtcblxuICAgICAgICAgIGZ1bmN0aW9uIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIubWFuYWdlKCkubG9ncygpLmdldCgnYnJvd3NlcicpLnRoZW4oZnVuY3Rpb24oYnJvd3NlckxvZykge1xuICAgICAgICAgICAgICByZXR1cm4gYnJvd3NlckxvZy5maWx0ZXIoZnVuY3Rpb24obG9nRW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nRW50cnkubGV2ZWwudmFsdWUgPiB3ZWJkcml2ZXIubG9nZ2luZy5MZXZlbC5XQVJOSU5HLnZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyRXJyb3JzKCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBleHBlY3ROb0Vycm9ycygpIHtcbiAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkudGhlbihmdW5jdGlvbihmaWx0ZXJlZExvZykge1xuICAgICAgICAgICAgICBleHBlY3QoZmlsdGVyZWRMb2cubGVuZ3RoKS50b0VxdWFsKDApO1xuICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRMb2cubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Jyb3dzZXIgY29uc29sZSBlcnJvcnM6ICcgKyB1dGlsLmluc3BlY3QoZmlsdGVyZWRMb2cpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gZXhwZWN0RXJyb3IocmVnZXgpIHtcbiAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkudGhlbihmdW5jdGlvbihmaWx0ZXJlZExvZykge1xuICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgZmlsdGVyZWRMb2cuZm9yRWFjaChmdW5jdGlvbihsb2cpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9nLm1lc3NhZ2UubWF0Y2gocmVnZXgpKSB7XG4gICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXhwZWN0ZWQgYW4gZXJyb3IgdGhhdCBtYXRjaGVzICcgKyByZWdleCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuICAgICAgICAgICAgd2ViZHJpdmVyID0gcmVxdWlyZSgncHJvdHJhY3Rvci9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBGb3Igbm93LCB3ZSBvbmx5IHRlc3Qgb24gQ2hyb21lLFxuICAgICAgICAgIC8vIGFzIFNhZmFyaSBkb2VzIG5vdCBsb2FkIHRoZSBwYWdlIHdpdGggUHJvdHJhY3RvcidzIGluamVjdGVkIHNjcmlwdHMsXG4gICAgICAgICAgLy8gYW5kIEZpcmVmb3ggd2ViZHJpdmVyIGFsd2F5cyBkaXNhYmxlcyBjb250ZW50IHNlY3VyaXR5IHBvbGljeSAoIzYzNTgpXG4gICAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgIT09ICdjaHJvbWUnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBub3QgcmVwb3J0IGVycm9ycyB3aGVuIHRoZSBwYWdlIGlzIGxvYWRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gY2xlYXIgZXJyb3JzIHNvIHdlIGFyZSBub3QgZGVwZW5kZW50IG9uIHByZXZpb3VzIHRlc3RzXG4gICAgICAgICAgICBjbGVhckVycm9ycygpO1xuICAgICAgICAgICAgLy8gTmVlZCB0byByZWxvYWQgdGhlIHBhZ2UgYXMgdGhlIHBhZ2UgaXMgYWxyZWFkeSBsb2FkZWQgd2hlblxuICAgICAgICAgICAgLy8gd2UgY29tZSBoZXJlXG4gICAgICAgICAgICBicm93c2VyLmRyaXZlci5nZXRDdXJyZW50VXJsKCkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgICAgYnJvd3Nlci5nZXQodXJsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgZXZhbHVhdGUgZXhwcmVzc2lvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9FcXVhbCgnMCcpO1xuICAgICAgICAgICAgaW5jQnRuLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvRXF1YWwoJzEnKTtcbiAgICAgICAgICAgIGV4cGVjdE5vRXJyb3JzKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIHRocm93IGFuZCByZXBvcnQgYW4gZXJyb3Igd2hlbiB1c2luZyBcImV2YWxcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXZpbEJ0bi5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGV2aWxFcnJvci5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgU2VjdXJpdHkgUG9saWN5Lyk7XG4gICAgICAgICAgICBleHBlY3RFcnJvcigvQ29udGVudCBTZWN1cml0eSBQb2xpY3kvKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAqL1xuXG4vLyBuZ0NzcCBpcyBub3QgaW1wbGVtZW50ZWQgYXMgYSBwcm9wZXIgZGlyZWN0aXZlIGFueSBtb3JlLCBiZWNhdXNlIHdlIG5lZWQgaXQgYmUgcHJvY2Vzc2VkIHdoaWxlIHdlXG4vLyBib290c3RyYXAgdGhlIHN5c3RlbSAoYmVmb3JlICRwYXJzZSBpcyBpbnN0YW50aWF0ZWQpLCBmb3IgdGhpcyByZWFzb24gd2UganVzdCBoYXZlXG4vLyB0aGUgY3NwKCkgZm4gdGhhdCBsb29rcyBmb3IgdGhlIGBuZy1jc3BgIGF0dHJpYnV0ZSBhbnl3aGVyZSBpbiB0aGUgY3VycmVudCBkb2NcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NsaWNrXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgbmdDbGljayBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciB3aGVuXG4gKiBhbiBlbGVtZW50IGlzIGNsaWNrZWQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsaWNrIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGNsaWNrLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnRcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPHNwYW4+XG4gICAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgIDwvc3Bhbj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnY291bnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKCcwJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdjb3VudCcpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJzEnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG4vKlxuICogQSBjb2xsZWN0aW9uIG9mIGRpcmVjdGl2ZXMgdGhhdCBhbGxvd3MgY3JlYXRpb24gb2YgY3VzdG9tIGV2ZW50IGhhbmRsZXJzIHRoYXQgYXJlIGRlZmluZWQgYXNcbiAqIGFuZ3VsYXIgZXhwcmVzc2lvbnMgYW5kIGFyZSBjb21waWxlZCBhbmQgZXhlY3V0ZWQgd2l0aGluIHRoZSBjdXJyZW50IHNjb3BlLlxuICovXG52YXIgbmdFdmVudERpcmVjdGl2ZXMgPSB7fTtcblxuLy8gRm9yIGV2ZW50cyB0aGF0IG1pZ2h0IGZpcmUgc3luY2hyb25vdXNseSBkdXJpbmcgRE9NIG1hbmlwdWxhdGlvblxuLy8gd2UgbmVlZCB0byBleGVjdXRlIHRoZWlyIGV2ZW50IGhhbmRsZXJzIGFzeW5jaHJvbm91c2x5IHVzaW5nICRldmFsQXN5bmMsXG4vLyBzbyB0aGF0IHRoZXkgYXJlIG5vdCBleGVjdXRlZCBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuXG52YXIgZm9yY2VBc3luY0V2ZW50cyA9IHtcbiAgJ2JsdXInOiB0cnVlLFxuICAnZm9jdXMnOiB0cnVlXG59O1xuZm9yRWFjaChcbiAgJ2NsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZW1vdmUgbW91c2VlbnRlciBtb3VzZWxlYXZlIGtleWRvd24ga2V5dXAga2V5cHJlc3Mgc3VibWl0IGZvY3VzIGJsdXIgY29weSBjdXQgcGFzdGUnLnNwbGl0KCcgJyksXG4gIGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgIHZhciBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgZXZlbnROYW1lKTtcbiAgICBuZ0V2ZW50RGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSA9IFsnJHBhcnNlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkcGFyc2UsICRyb290U2NvcGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uKCRlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgLy8gV2UgZXhwb3NlIHRoZSBwb3dlcmZ1bCAkZXZlbnQgb2JqZWN0IG9uIHRoZSBzY29wZSB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgV2luZG93LFxuICAgICAgICAgIC8vIGV0Yy4gdGhhdCBpc24ndCBwcm90ZWN0ZWQgYnkgdGhlIGZhc3QgcGF0aHMgaW4gJHBhcnNlLiAgV2UgZXhwbGljaXRseSByZXF1ZXN0IGJldHRlclxuICAgICAgICAgIC8vIGNoZWNrcyBhdCB0aGUgY29zdCBvZiBzcGVlZCBzaW5jZSBldmVudCBoYW5kbGVyIGV4cHJlc3Npb25zIGFyZSBub3QgZXhlY3V0ZWQgYXNcbiAgICAgICAgICAvLyBmcmVxdWVudGx5IGFzIHJlZ3VsYXIgY2hhbmdlIGRldGVjdGlvbi5cbiAgICAgICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0cltkaXJlY3RpdmVOYW1lXSwgLyogaW50ZXJjZXB0b3JGbiAqLyBudWxsLCAvKiBleHBlbnNpdmVDaGVja3MgKi8gdHJ1ZSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nRXZlbnRIYW5kbGVyKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50Lm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZm4oc2NvcGUsIHskZXZlbnQ6ZXZlbnR9KTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaWYgKGZvcmNlQXN5bmNFdmVudHNbZXZlbnROYW1lXSAmJiAkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoY2FsbGJhY2spO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1dO1xuICB9XG4pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nRGJsY2xpY2tcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdEYmxjbGlja2AgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gYSBkYmxjbGljayBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRGJsY2xpY2sge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogYSBkYmxjbGljay4gKFRoZSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctZGJsY2xpY2s9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAob24gZG91YmxlIGNsaWNrKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZWRvd25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBuZ01vdXNlZG93biBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWRvd24gZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlZG93biB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZWRvd24uICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2Vkb3duPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIG1vdXNlIGRvd24pXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNldXBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNldXAgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNldXAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2V1cC4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZXVwPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIG1vdXNlIHVwKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2VvdmVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZW92ZXIgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlb3ZlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZW92ZXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2VvdmVyPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgaXMgb3ZlcilcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2VlbnRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VlbnRlciBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VlbnRlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZWVudGVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLW1vdXNlZW50ZXI9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBlbnRlcnMpXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNlbGVhdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbGVhdmUgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlbGVhdmUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2VsZWF2ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWxlYXZlPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbGVhdmVzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZW1vdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbW92ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vtb3ZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlbW92ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZW1vdmU9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBtb3ZlcylcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nS2V5ZG93blxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5ZG93biBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5ZG93biB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXlkb3duLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCBhbmQgY2FuIGJlIGludGVycm9nYXRlZCBmb3Iga2V5Q29kZSwgYWx0S2V5LCBldGMuKVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1rZXlkb3duPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IGRvd24gY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nS2V5dXBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleXVwIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXl1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXl1cC4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHA+VHlwaW5nIGluIHRoZSBpbnB1dCBib3ggYmVsb3cgdXBkYXRlcyB0aGUga2V5IGNvdW50PC9wPlxuICAgICAgIDxpbnB1dCBuZy1rZXl1cD1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj4ga2V5IHVwIGNvdW50OiB7e2NvdW50fX1cblxuICAgICAgIDxwPlR5cGluZyBpbiB0aGUgaW5wdXQgYm94IGJlbG93IHVwZGF0ZXMgdGhlIGtleWNvZGU8L3A+XG4gICAgICAgPGlucHV0IG5nLWtleXVwPVwiZXZlbnQ9JGV2ZW50XCI+XG4gICAgICAgPHA+ZXZlbnQga2V5Q29kZToge3sgZXZlbnQua2V5Q29kZSB9fTwvcD5cbiAgICAgICA8cD5ldmVudCBhbHRLZXk6IHt7IGV2ZW50LmFsdEtleSB9fTwvcD5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleXByZXNzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXlwcmVzcyBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlwcmVzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXlwcmVzcy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH1cbiAqIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLWtleXByZXNzPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IHByZXNzIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N1Ym1pdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRW5hYmxlcyBiaW5kaW5nIGFuZ3VsYXIgZXhwcmVzc2lvbnMgdG8gb25zdWJtaXQgZXZlbnRzLlxuICpcbiAqIEFkZGl0aW9uYWxseSBpdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKHdoaWNoIGZvciBmb3JtIG1lYW5zIHNlbmRpbmcgdGhlIHJlcXVlc3QgdG8gdGhlXG4gKiBzZXJ2ZXIgYW5kIHJlbG9hZGluZyB0aGUgY3VycmVudCBwYWdlKSwgYnV0IG9ubHkgaWYgdGhlIGZvcm0gZG9lcyBub3QgY29udGFpbiBgYWN0aW9uYCxcbiAqIGBkYXRhLWFjdGlvbmAsIG9yIGB4LWFjdGlvbmAgYXR0cmlidXRlcy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipXYXJuaW5nOioqIEJlIGNhcmVmdWwgbm90IHRvIGNhdXNlIFwiZG91YmxlLXN1Ym1pc3Npb25cIiBieSB1c2luZyBib3RoIHRoZSBgbmdDbGlja2AgYW5kXG4gKiBgbmdTdWJtaXRgIGhhbmRsZXJzIHRvZ2V0aGVyLiBTZWUgdGhlXG4gKiB7QGxpbmsgZm9ybSNzdWJtaXR0aW5nLWEtZm9ybS1hbmQtcHJldmVudGluZy10aGUtZGVmYXVsdC1hY3Rpb24gYGZvcm1gIGRpcmVjdGl2ZSBkb2N1bWVudGF0aW9ufVxuICogZm9yIGEgZGV0YWlsZWQgZGlzY3Vzc2lvbiBvZiB3aGVuIGBuZ1N1Ym1pdGAgbWF5IGJlIHRyaWdnZXJlZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBlbGVtZW50IGZvcm1cbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3VibWl0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwic3VibWl0RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3N1Ym1pdEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLmxpc3QgPSBbXTtcbiAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ2hlbGxvJztcbiAgICAgICAgICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKCRzY29wZS50ZXh0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucHVzaCh0aGlzLnRleHQpO1xuICAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8Zm9ybSBuZy1zdWJtaXQ9XCJzdWJtaXQoKVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICBFbnRlciB0ZXh0IGFuZCBoaXQgZW50ZXI6XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidGV4dFwiIG5hbWU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiBpZD1cInN1Ym1pdFwiIHZhbHVlPVwiU3VibWl0XCIgLz5cbiAgICAgICAgPHByZT5saXN0PXt7bGlzdH19PC9wcmU+XG4gICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc3VibWl0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9CZSgnbGlzdD1bXScpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2hlbGxvJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndGV4dCcpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJycpO1xuICAgICAgIH0pO1xuICAgICAgIGl0KCdzaG91bGQgaWdub3JlIGVtcHR5IHN0cmluZ3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0PVtdJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3N1Ym1pdCcpKS5jbGljaygpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2hlbGxvJyk7XG4gICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0ZvY3VzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBmb2N1cyBldmVudC5cbiAqXG4gKiBOb3RlOiBBcyB0aGUgYGZvY3VzYCBldmVudCBpcyBleGVjdXRlZCBzeW5jaHJvbm91c2x5IHdoZW4gY2FsbGluZyBgaW5wdXQuZm9jdXMoKWBcbiAqIEFuZ3VsYXJKUyBleGVjdXRlcyB0aGUgZXhwcmVzc2lvbiB1c2luZyBgc2NvcGUuJGV2YWxBc3luY2AgaWYgdGhlIGV2ZW50IGlzIGZpcmVkXG4gKiBkdXJpbmcgYW4gYCRhcHBseWAgdG8gZW5zdXJlIGEgY29uc2lzdGVudCBzdGF0ZS5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0ZvY3VzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGZvY3VzLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdCbHVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBibHVyIGV2ZW50LlxuICpcbiAqIEEgW2JsdXIgZXZlbnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy9ibHVyKSBmaXJlcyB3aGVuXG4gKiBhbiBlbGVtZW50IGhhcyBsb3N0IGZvY3VzLlxuICpcbiAqIE5vdGU6IEFzIHRoZSBgYmx1cmAgZXZlbnQgaXMgZXhlY3V0ZWQgc3luY2hyb25vdXNseSBhbHNvIGR1cmluZyBET00gbWFuaXB1bGF0aW9uc1xuICogKGUuZy4gcmVtb3ZpbmcgYSBmb2N1c3NlZCBpbnB1dCksXG4gKiBBbmd1bGFySlMgZXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gdXNpbmcgYHNjb3BlLiRldmFsQXN5bmNgIGlmIHRoZSBldmVudCBpcyBmaXJlZFxuICogZHVyaW5nIGFuIGAkYXBwbHlgIHRvIGVuc3VyZSBhIGNvbnNpc3RlbnQgc3RhdGUuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCbHVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGJsdXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NvcHlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGNvcHkgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDb3B5IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGNvcHkuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1jb3B5PVwiY29waWVkPXRydWVcIiBuZy1pbml0PVwiY29waWVkPWZhbHNlOyB2YWx1ZT0nY29weSBtZSdcIiBuZy1tb2RlbD1cInZhbHVlXCI+XG4gICAgICBjb3BpZWQ6IHt7Y29waWVkfX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDdXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGN1dCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0N1dCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjdXQuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1jdXQ9XCJjdXQ9dHJ1ZVwiIG5nLWluaXQ9XCJjdXQ9ZmFsc2U7IHZhbHVlPSdjdXQgbWUnXCIgbmctbW9kZWw9XCJ2YWx1ZVwiPlxuICAgICAgY3V0OiB7e2N1dH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUGFzdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIHBhc3RlIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nUGFzdGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogcGFzdGUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1wYXN0ZT1cInBhc3RlPXRydWVcIiBuZy1pbml0PVwicGFzdGU9ZmFsc2VcIiBwbGFjZWhvbGRlcj0ncGFzdGUgaGVyZSc+XG4gICAgICBwYXN0ZWQ6IHt7cGFzdGV9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0lmXG4gKiBAcmVzdHJpY3QgQVxuICogQG11bHRpRWxlbWVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0lmYCBkaXJlY3RpdmUgcmVtb3ZlcyBvciByZWNyZWF0ZXMgYSBwb3J0aW9uIG9mIHRoZSBET00gdHJlZSBiYXNlZCBvbiBhblxuICoge2V4cHJlc3Npb259LiBJZiB0aGUgZXhwcmVzc2lvbiBhc3NpZ25lZCB0byBgbmdJZmAgZXZhbHVhdGVzIHRvIGEgZmFsc2VcbiAqIHZhbHVlIHRoZW4gdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00sIG90aGVyd2lzZSBhIGNsb25lIG9mIHRoZVxuICogZWxlbWVudCBpcyByZWluc2VydGVkIGludG8gdGhlIERPTS5cbiAqXG4gKiBgbmdJZmAgZGlmZmVycyBmcm9tIGBuZ1Nob3dgIGFuZCBgbmdIaWRlYCBpbiB0aGF0IGBuZ0lmYCBjb21wbGV0ZWx5IHJlbW92ZXMgYW5kIHJlY3JlYXRlcyB0aGVcbiAqIGVsZW1lbnQgaW4gdGhlIERPTSByYXRoZXIgdGhhbiBjaGFuZ2luZyBpdHMgdmlzaWJpbGl0eSB2aWEgdGhlIGBkaXNwbGF5YCBjc3MgcHJvcGVydHkuICBBIGNvbW1vblxuICogY2FzZSB3aGVuIHRoaXMgZGlmZmVyZW5jZSBpcyBzaWduaWZpY2FudCBpcyB3aGVuIHVzaW5nIGNzcyBzZWxlY3RvcnMgdGhhdCByZWx5IG9uIGFuIGVsZW1lbnQnc1xuICogcG9zaXRpb24gd2l0aGluIHRoZSBET00sIHN1Y2ggYXMgdGhlIGA6Zmlyc3QtY2hpbGRgIG9yIGA6bGFzdC1jaGlsZGAgcHNldWRvLWNsYXNzZXMuXG4gKlxuICogTm90ZSB0aGF0IHdoZW4gYW4gZWxlbWVudCBpcyByZW1vdmVkIHVzaW5nIGBuZ0lmYCBpdHMgc2NvcGUgaXMgZGVzdHJveWVkIGFuZCBhIG5ldyBzY29wZVxuICogaXMgY3JlYXRlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlc3RvcmVkLiAgVGhlIHNjb3BlIGNyZWF0ZWQgd2l0aGluIGBuZ0lmYCBpbmhlcml0cyBmcm9tXG4gKiBpdHMgcGFyZW50IHNjb3BlIHVzaW5nXG4gKiBbcHJvdG90eXBhbCBpbmhlcml0YW5jZV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy93aWtpL1VuZGVyc3RhbmRpbmctU2NvcGVzI2phdmFzY3JpcHQtcHJvdG90eXBhbC1pbmhlcml0YW5jZSkuXG4gKiBBbiBpbXBvcnRhbnQgaW1wbGljYXRpb24gb2YgdGhpcyBpcyBpZiBgbmdNb2RlbGAgaXMgdXNlZCB3aXRoaW4gYG5nSWZgIHRvIGJpbmQgdG9cbiAqIGEgamF2YXNjcmlwdCBwcmltaXRpdmUgZGVmaW5lZCBpbiB0aGUgcGFyZW50IHNjb3BlLiBJbiB0aGlzIGNhc2UgYW55IG1vZGlmaWNhdGlvbnMgbWFkZSB0byB0aGVcbiAqIHZhcmlhYmxlIHdpdGhpbiB0aGUgY2hpbGQgc2NvcGUgd2lsbCBvdmVycmlkZSAoaGlkZSkgdGhlIHZhbHVlIGluIHRoZSBwYXJlbnQgc2NvcGUuXG4gKlxuICogQWxzbywgYG5nSWZgIHJlY3JlYXRlcyBlbGVtZW50cyB1c2luZyB0aGVpciBjb21waWxlZCBzdGF0ZS4gQW4gZXhhbXBsZSBvZiB0aGlzIGJlaGF2aW9yXG4gKiBpcyBpZiBhbiBlbGVtZW50J3MgY2xhc3MgYXR0cmlidXRlIGlzIGRpcmVjdGx5IG1vZGlmaWVkIGFmdGVyIGl0J3MgY29tcGlsZWQsIHVzaW5nIHNvbWV0aGluZyBsaWtlXG4gKiBqUXVlcnkncyBgLmFkZENsYXNzKClgIG1ldGhvZCwgYW5kIHRoZSBlbGVtZW50IGlzIGxhdGVyIHJlbW92ZWQuIFdoZW4gYG5nSWZgIHJlY3JlYXRlcyB0aGUgZWxlbWVudFxuICogdGhlIGFkZGVkIGNsYXNzIHdpbGwgYmUgbG9zdCBiZWNhdXNlIHRoZSBvcmlnaW5hbCBjb21waWxlZCBzdGF0ZSBpcyB1c2VkIHRvIHJlZ2VuZXJhdGUgdGhlIGVsZW1lbnQuXG4gKlxuICogQWRkaXRpb25hbGx5LCB5b3UgY2FuIHByb3ZpZGUgYW5pbWF0aW9ucyB2aWEgdGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSB0byBhbmltYXRlIHRoZSBgZW50ZXJgXG4gKiBhbmQgYGxlYXZlYCBlZmZlY3RzLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiBlbnRlciAtIGhhcHBlbnMganVzdCBhZnRlciB0aGUgYG5nSWZgIGNvbnRlbnRzIGNoYW5nZSBhbmQgYSBuZXcgRE9NIGVsZW1lbnQgaXMgY3JlYXRlZCBhbmQgaW5qZWN0ZWQgaW50byB0aGUgYG5nSWZgIGNvbnRhaW5lclxuICogbGVhdmUgLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBgbmdJZmAgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA2MDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJZiBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgZmFsc3kgdGhlblxuICogICAgIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHRyZWUuIElmIGl0IGlzIHRydXRoeSBhIGNvcHkgb2YgdGhlIGNvbXBpbGVkXG4gKiAgICAgZWxlbWVudCBpcyBhZGRlZCB0byB0aGUgRE9NIHRyZWUuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxsYWJlbD5DbGljayBtZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiIG5nLWluaXQ9XCJjaGVja2VkPXRydWVcIiAvPjwvbGFiZWw+PGJyLz5cbiAgICAgIFNob3cgd2hlbiBjaGVja2VkOlxuICAgICAgPHNwYW4gbmctaWY9XCJjaGVja2VkXCIgY2xhc3M9XCJhbmltYXRlLWlmXCI+XG4gICAgICAgIFRoaXMgaXMgcmVtb3ZlZCB3aGVuIHRoZSBjaGVja2JveCBpcyB1bmNoZWNrZWQuXG4gICAgICA8L3NwYW4+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtaWYge1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLCAuYW5pbWF0ZS1pZi5uZy1sZWF2ZSB7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIsXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICAgICAgICBvcGFjaXR5OjA7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLWlmLm5nLWxlYXZlLFxuICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgb3BhY2l0eToxO1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdJZkRpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICByZXR1cm4ge1xuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgcHJpb3JpdHk6IDYwMCxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgICQkdGxiOiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICB2YXIgYmxvY2ssIGNoaWxkU2NvcGUsIHByZXZpb3VzRWxlbWVudHM7XG4gICAgICAgICRzY29wZS4kd2F0Y2goJGF0dHIubmdJZiwgZnVuY3Rpb24gbmdJZldhdGNoQWN0aW9uKHZhbHVlKSB7XG5cbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghY2hpbGRTY29wZSkge1xuICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbihjbG9uZSwgbmV3U2NvcGUpIHtcbiAgICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gbmV3U2NvcGU7XG4gICAgICAgICAgICAgICAgY2xvbmVbY2xvbmUubGVuZ3RoKytdID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIGVuZCBuZ0lmOiAnICsgJGF0dHIubmdJZiArICcgJyk7XG4gICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy5cbiAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHJlZmVyZW5jZSB0byB0aGUganFsaXRlIHdyYXBwZXIgYXMgaXQgbWlnaHQgYmUgY2hhbmdlZCBsYXRlclxuICAgICAgICAgICAgICAgIC8vIGJ5IGEgZGlyZWN0aXZlIHdpdGggdGVtcGxhdGVVcmwgd2hlbiBpdHMgdGVtcGxhdGUgYXJyaXZlcy5cbiAgICAgICAgICAgICAgICBibG9jayA9IHtcbiAgICAgICAgICAgICAgICAgIGNsb25lOiBjbG9uZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsICRlbGVtZW50LnBhcmVudCgpLCAkZWxlbWVudCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNFbGVtZW50cykge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzLnJlbW92ZSgpO1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGlsZFNjb3BlKSB7XG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmxvY2spIHtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cyA9IGdldEJsb2NrTm9kZXMoYmxvY2suY2xvbmUpO1xuICAgICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShwcmV2aW91c0VsZW1lbnRzKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMgPSBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYmxvY2sgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJbmNsdWRlXG4gKiBAcmVzdHJpY3QgRUNBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGZXRjaGVzLCBjb21waWxlcyBhbmQgaW5jbHVkZXMgYW4gZXh0ZXJuYWwgSFRNTCBmcmFnbWVudC5cbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgVVJMIGlzIHJlc3RyaWN0ZWQgdG8gdGhlIHNhbWUgZG9tYWluIGFuZCBwcm90b2NvbCBhcyB0aGVcbiAqIGFwcGxpY2F0aW9uIGRvY3VtZW50LiBUaGlzIGlzIGRvbmUgYnkgY2FsbGluZyB7QGxpbmsgJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAqICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfSBvbiBpdC4gVG8gbG9hZCB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIG9yIHByb3RvY29sc1xuICogeW91IG1heSBlaXRoZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdCB0aGVtfSBvclxuICoge0BsaW5rICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIHdyYXAgdGhlbX0gYXMgdHJ1c3RlZCB2YWx1ZXMuIFJlZmVyIHRvIEFuZ3VsYXIncyB7QGxpbmtcbiAqIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmd9LlxuICpcbiAqIEluIGFkZGl0aW9uLCB0aGUgYnJvd3NlcidzXG4gKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KVxuICogYW5kIFtDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyAoQ09SUyldKGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvKVxuICogcG9saWN5IG1heSBmdXJ0aGVyIHJlc3RyaWN0IHdoZXRoZXIgdGhlIHRlbXBsYXRlIGlzIHN1Y2Nlc3NmdWxseSBsb2FkZWQuXG4gKiBGb3IgZXhhbXBsZSwgYG5nSW5jbHVkZWAgd29uJ3Qgd29yayBmb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzIG9uIGFsbCBicm93c2VycyBhbmQgZm9yIGBmaWxlOi8vYFxuICogYWNjZXNzIG9uIHNvbWUgYnJvd3NlcnMuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIGVudGVyIC0gYW5pbWF0aW9uIGlzIHVzZWQgdG8gYnJpbmcgbmV3IGNvbnRlbnQgaW50byB0aGUgYnJvd3Nlci5cbiAqIGxlYXZlIC0gYW5pbWF0aW9uIGlzIHVzZWQgdG8gYW5pbWF0ZSBleGlzdGluZyBjb250ZW50IGF3YXkuXG4gKlxuICogVGhlIGVudGVyIGFuZCBsZWF2ZSBhbmltYXRpb24gb2NjdXIgY29uY3VycmVudGx5LlxuICpcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDQwMFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0luY2x1ZGV8c3JjIGFuZ3VsYXIgZXhwcmVzc2lvbiBldmFsdWF0aW5nIHRvIFVSTC4gSWYgdGhlIHNvdXJjZSBpcyBhIHN0cmluZyBjb25zdGFudCxcbiAqICAgICAgICAgICAgICAgICBtYWtlIHN1cmUgeW91IHdyYXAgaXQgaW4gKipzaW5nbGUqKiBxdW90ZXMsIGUuZy4gYHNyYz1cIidteVBhcnRpYWxUZW1wbGF0ZS5odG1sJ1wiYC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gb25sb2FkIEV4cHJlc3Npb24gdG8gZXZhbHVhdGUgd2hlbiBhIG5ldyBwYXJ0aWFsIGlzIGxvYWRlZC5cbiAqICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICAgICAgICAgICAgICAgICAgKipOb3RlOioqIFdoZW4gdXNpbmcgb25sb2FkIG9uIFNWRyBlbGVtZW50cyBpbiBJRTExLCB0aGUgYnJvd3NlciB3aWxsIHRyeSB0byBjYWxsXG4gKiAgICAgICAgICAgICAgICAgIGEgZnVuY3Rpb24gd2l0aCB0aGUgbmFtZSBvbiB0aGUgd2luZG93IGVsZW1lbnQsIHdoaWNoIHdpbGwgdXN1YWxseSB0aHJvdyBhXG4gKiAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb24gaXMgdW5kZWZpbmVkXCIgZXJyb3IuIFRvIGZpeCB0aGlzLCB5b3UgY2FuIGluc3RlYWQgdXNlIGBkYXRhLW9ubG9hZGAgb3IgYVxuICogICAgICAgICAgICAgICAgICBkaWZmZXJlbnQgZm9ybSB0aGF0IHtAbGluayBndWlkZS9kaXJlY3RpdmUjbm9ybWFsaXphdGlvbiBtYXRjaGVzfSBgb25sb2FkYC5cbiAqICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGF1dG9zY3JvbGwgV2hldGhlciBgbmdJbmNsdWRlYCBzaG91bGQgY2FsbCB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbFxuICogICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsfSB0byBzY3JvbGwgdGhlIHZpZXdwb3J0IGFmdGVyIHRoZSBjb250ZW50IGlzIGxvYWRlZC5cbiAqXG4gKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCBkaXNhYmxlIHNjcm9sbGluZy5cbiAqICAgICAgICAgICAgICAgICAgLSBJZiB0aGUgYXR0cmlidXRlIGlzIHNldCB3aXRob3V0IHZhbHVlLCBlbmFibGUgc2Nyb2xsaW5nLlxuICogICAgICAgICAgICAgICAgICAtIE90aGVyd2lzZSBlbmFibGUgc2Nyb2xsaW5nIG9ubHkgaWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydXRoeSB2YWx1ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJpbmNsdWRlRXhhbXBsZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cInRlbXBsYXRlXCIgbmctb3B0aW9ucz1cInQubmFtZSBmb3IgdCBpbiB0ZW1wbGF0ZXNcIj5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPihibGFuayk8L29wdGlvbj5cbiAgICAgICA8L3NlbGVjdD5cbiAgICAgICB1cmwgb2YgdGhlIHRlbXBsYXRlOiA8Y29kZT57e3RlbXBsYXRlLnVybH19PC9jb2RlPlxuICAgICAgIDxoci8+XG4gICAgICAgPGRpdiBjbGFzcz1cInNsaWRlLWFuaW1hdGUtY29udGFpbmVyXCI+XG4gICAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGUtYW5pbWF0ZVwiIG5nLWluY2x1ZGU9XCJ0ZW1wbGF0ZS51cmxcIj48L2Rpdj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbmNsdWRlRXhhbXBsZScsIFsnbmdBbmltYXRlJ10pXG4gICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLnRlbXBsYXRlcyA9XG4gICAgICAgICAgICBbIHsgbmFtZTogJ3RlbXBsYXRlMS5odG1sJywgdXJsOiAndGVtcGxhdGUxLmh0bWwnfSxcbiAgICAgICAgICAgICAgeyBuYW1lOiAndGVtcGxhdGUyLmh0bWwnLCB1cmw6ICd0ZW1wbGF0ZTIuaHRtbCd9IF07XG4gICAgICAgICAgJHNjb3BlLnRlbXBsYXRlID0gJHNjb3BlLnRlbXBsYXRlc1swXTtcbiAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInRlbXBsYXRlMS5odG1sXCI+XG4gICAgICBDb250ZW50IG9mIHRlbXBsYXRlMS5odG1sXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJ0ZW1wbGF0ZTIuaHRtbFwiPlxuICAgICAgQ29udGVudCBvZiB0ZW1wbGF0ZTIuaHRtbFxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5zbGlkZS1hbmltYXRlLWNvbnRhaW5lciB7XG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBoZWlnaHQ6NDBweDtcbiAgICAgICAgb3ZlcmZsb3c6aGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZSB7XG4gICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgIH1cblxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIsIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuXG4gICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICB0b3A6MDtcbiAgICAgICAgbGVmdDowO1xuICAgICAgICByaWdodDowO1xuICAgICAgICBib3R0b206MDtcbiAgICAgICAgZGlzcGxheTpibG9jaztcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlciB7XG4gICAgICAgIHRvcDotNTBweDtcbiAgICAgIH1cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gICAgICAgIHRvcDowO1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZSB7XG4gICAgICAgIHRvcDowO1xuICAgICAgfVxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcbiAgICAgICAgdG9wOjUwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB0ZW1wbGF0ZVNlbGVjdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RlbXBsYXRlJykpO1xuICAgICAgdmFyIGluY2x1ZGVFbGVtID0gZWxlbWVudChieS5jc3MoJ1tuZy1pbmNsdWRlXScpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMS5odG1sJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChpbmNsdWRlRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgb2YgdGVtcGxhdGUxLmh0bWwvKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUyLmh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgICAgLy8gRmlyZWZveCBjYW4ndCBoYW5kbGUgdXNpbmcgc2VsZWN0c1xuICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy80ODBcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuY2xpY2soKTtcbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgyKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRlbXBsYXRlMi5odG1sLyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gYmxhbmsnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgICAgLy8gRmlyZWZveCBjYW4ndCBoYW5kbGUgdXNpbmcgc2VsZWN0c1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5jbGljaygpO1xuICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDApLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChpbmNsdWRlRWxlbS5pc1ByZXNlbnQoKSkudG9CZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGV2ZW50XG4gKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50UmVxdWVzdGVkXG4gKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIHNjb3BlIG5nSW5jbHVkZSB3YXMgZGVjbGFyZWQgaW5cbiAqIEBkZXNjcmlwdGlvblxuICogRW1pdHRlZCBldmVyeSB0aW1lIHRoZSBuZ0luY2x1ZGUgY29udGVudCBpcyByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZXZlbnRcbiAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRMb2FkZWRcbiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgY3VycmVudCBuZ0luY2x1ZGUgc2NvcGVcbiAqIEBkZXNjcmlwdGlvblxuICogRW1pdHRlZCBldmVyeSB0aW1lIHRoZSBuZ0luY2x1ZGUgY29udGVudCBpcyByZWxvYWRlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIFVSTCBvZiBjb250ZW50IHRvIGxvYWQuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBldmVudFxuICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudEVycm9yXG4gKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIHNjb3BlIG5nSW5jbHVkZSB3YXMgZGVjbGFyZWQgaW5cbiAqIEBkZXNjcmlwdGlvblxuICogRW1pdHRlZCB3aGVuIGEgdGVtcGxhdGUgSFRUUCByZXF1ZXN0IHlpZWxkcyBhbiBlcnJvbmVvdXMgcmVzcG9uc2UgKHN0YXR1cyA8IDIwMCB8fCBzdGF0dXMgPiAyOTkpXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICovXG52YXIgbmdJbmNsdWRlRGlyZWN0aXZlID0gWyckdGVtcGxhdGVSZXF1ZXN0JywgJyRhbmNob3JTY3JvbGwnLCAnJGFuaW1hdGUnLFxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJHRlbXBsYXRlUmVxdWVzdCwgICAkYW5jaG9yU2Nyb2xsLCAgICRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQ0EnLFxuICAgIHByaW9yaXR5OiA0MDAsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIGNvbnRyb2xsZXI6IGFuZ3VsYXIubm9vcCxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgICB2YXIgc3JjRXhwID0gYXR0ci5uZ0luY2x1ZGUgfHwgYXR0ci5zcmMsXG4gICAgICAgICAgb25sb2FkRXhwID0gYXR0ci5vbmxvYWQgfHwgJycsXG4gICAgICAgICAgYXV0b1Njcm9sbEV4cCA9IGF0dHIuYXV0b3Njcm9sbDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG4gICAgICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMCxcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZSxcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCxcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50O1xuXG4gICAgICAgIHZhciBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHByZXZpb3VzRWxlbWVudCkge1xuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnRTY29wZSkge1xuICAgICAgICAgICAgY3VycmVudFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICBjdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGN1cnJlbnRFbGVtZW50KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBjdXJyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKHNyY0V4cCwgZnVuY3Rpb24gbmdJbmNsdWRlV2F0Y2hBY3Rpb24oc3JjKSB7XG4gICAgICAgICAgdmFyIGFmdGVyQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKGF1dG9TY3JvbGxFeHApICYmICghYXV0b1Njcm9sbEV4cCB8fCBzY29wZS4kZXZhbChhdXRvU2Nyb2xsRXhwKSkpIHtcbiAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIHRoaXNDaGFuZ2VJZCA9ICsrY2hhbmdlQ291bnRlcjtcblxuICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgIC8vc2V0IHRoZSAybmQgcGFyYW0gdG8gdHJ1ZSB0byBpZ25vcmUgdGhlIHRlbXBsYXRlIHJlcXVlc3QgZXJyb3Igc28gdGhhdCB0aGUgaW5uZXJcbiAgICAgICAgICAgIC8vY29udGVudHMgYW5kIHNjb3BlIGNhbiBiZSBjbGVhbmVkIHVwLlxuICAgICAgICAgICAgJHRlbXBsYXRlUmVxdWVzdChzcmMsIHRydWUpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgaWYgKHNjb3BlLiQkZGVzdHJveWVkKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCAhPT0gY2hhbmdlQ291bnRlcikgcmV0dXJuO1xuICAgICAgICAgICAgICB2YXIgbmV3U2NvcGUgPSBzY29wZS4kbmV3KCk7XG4gICAgICAgICAgICAgIGN0cmwudGVtcGxhdGUgPSByZXNwb25zZTtcblxuICAgICAgICAgICAgICAvLyBOb3RlOiBUaGlzIHdpbGwgYWxzbyBsaW5rIGFsbCBjaGlsZHJlbiBvZiBuZy1pbmNsdWRlIHRoYXQgd2VyZSBjb250YWluZWQgaW4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgIC8vIGh0bWwuIElmIHRoYXQgY29udGVudCBjb250YWlucyBjb250cm9sbGVycywgLi4uIHRoZXkgY291bGQgcG9sbHV0ZS9jaGFuZ2UgdGhlIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBIb3dldmVyLCB1c2luZyBuZy1pbmNsdWRlIG9uIGFuIGVsZW1lbnQgd2l0aCBhZGRpdGlvbmFsIGNvbnRlbnQgZG9lcyBub3QgbWFrZSBzZW5zZS4uLlxuICAgICAgICAgICAgICAvLyBOb3RlOiBXZSBjYW4ndCByZW1vdmUgdGhlbSBpbiB0aGUgY2xvbmVBdHRjaEZuIG9mICR0cmFuc2NsdWRlIGFzIHRoYXRcbiAgICAgICAgICAgICAgLy8gZnVuY3Rpb24gaXMgY2FsbGVkIGJlZm9yZSBsaW5raW5nIHRoZSBjb250ZW50LCB3aGljaCB3b3VsZCBhcHBseSBjaGlsZFxuICAgICAgICAgICAgICAvLyBkaXJlY3RpdmVzIHRvIG5vbiBleGlzdGluZyBlbGVtZW50cy5cbiAgICAgICAgICAgICAgdmFyIGNsb25lID0gJHRyYW5zY2x1ZGUobmV3U2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBudWxsLCAkZWxlbWVudCkudGhlbihhZnRlckFuaW1hdGlvbik7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IGNsb25lO1xuXG4gICAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50TG9hZGVkJywgc3JjKTtcbiAgICAgICAgICAgICAgc2NvcGUuJGV2YWwob25sb2FkRXhwKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAoc2NvcGUuJCRkZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkID09PSBjaGFuZ2VDb3VudGVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRFcnJvcicsIHNyYyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZCcsIHNyYyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcbiAgICAgICAgICAgIGN0cmwudGVtcGxhdGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vLyBUaGlzIGRpcmVjdGl2ZSBpcyBjYWxsZWQgZHVyaW5nIHRoZSAkdHJhbnNjbHVkZSBjYWxsIG9mIHRoZSBmaXJzdCBgbmdJbmNsdWRlYCBkaXJlY3RpdmUuXG4vLyBJdCB3aWxsIHJlcGxhY2UgYW5kIGNvbXBpbGUgdGhlIGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQgd2l0aCB0aGUgbG9hZGVkIHRlbXBsYXRlLlxuLy8gV2UgbmVlZCB0aGlzIGRpcmVjdGl2ZSBzbyB0aGF0IHRoZSBlbGVtZW50IGNvbnRlbnQgaXMgYWxyZWFkeSBmaWxsZWQgd2hlblxuLy8gdGhlIGxpbmsgZnVuY3Rpb24gb2YgYW5vdGhlciBkaXJlY3RpdmUgb24gdGhlIHNhbWUgZWxlbWVudCBhcyBuZ0luY2x1ZGVcbi8vIGlzIGNhbGxlZC5cbnZhciBuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLFxuICBmdW5jdGlvbigkY29tcGlsZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0VDQScsXG4gICAgICBwcmlvcml0eTogLTQwMCxcbiAgICAgIHJlcXVpcmU6ICduZ0luY2x1ZGUnLFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCkge1xuICAgICAgICBpZiAoL1NWRy8udGVzdCgkZWxlbWVudFswXS50b1N0cmluZygpKSkge1xuICAgICAgICAgIC8vIFdlYktpdDogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNTY5OCAtLS0gU1ZHIGVsZW1lbnRzIGRvIG5vdFxuICAgICAgICAgIC8vIHN1cHBvcnQgaW5uZXJIVE1MLCBzbyBkZXRlY3QgdGhpcyBoZXJlIGFuZCB0cnkgdG8gZ2VuZXJhdGUgdGhlIGNvbnRlbnRzXG4gICAgICAgICAgLy8gc3BlY2lhbGx5LlxuICAgICAgICAgICRlbGVtZW50LmVtcHR5KCk7XG4gICAgICAgICAgJGNvbXBpbGUoanFMaXRlQnVpbGRGcmFnbWVudChjdHJsLnRlbXBsYXRlLCBkb2N1bWVudCkuY2hpbGROb2Rlcykoc2NvcGUsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIG5hbWVzcGFjZUFkYXB0ZWRDbG9uZShjbG9uZSkge1xuICAgICAgICAgICAgJGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAgICAgICAgICB9LCB7ZnV0dXJlUGFyZW50RWxlbWVudDogJGVsZW1lbnR9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkZWxlbWVudC5odG1sKGN0cmwudGVtcGxhdGUpO1xuICAgICAgICAkY29tcGlsZSgkZWxlbWVudC5jb250ZW50cygpKShzY29wZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJbml0XG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdJbml0YCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBldmFsdWF0ZSBhbiBleHByZXNzaW9uIGluIHRoZVxuICogY3VycmVudCBzY29wZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gKiBUaGlzIGRpcmVjdGl2ZSBjYW4gYmUgYWJ1c2VkIHRvIGFkZCB1bm5lY2Vzc2FyeSBhbW91bnRzIG9mIGxvZ2ljIGludG8geW91ciB0ZW1wbGF0ZXMuXG4gKiBUaGVyZSBhcmUgb25seSBhIGZldyBhcHByb3ByaWF0ZSB1c2VzIG9mIGBuZ0luaXRgLCBzdWNoIGFzIGZvciBhbGlhc2luZyBzcGVjaWFsIHByb3BlcnRpZXMgb2ZcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgYG5nUmVwZWF0YH0sIGFzIHNlZW4gaW4gdGhlIGRlbW8gYmVsb3c7IGFuZCBmb3IgaW5qZWN0aW5nIGRhdGEgdmlhXG4gKiBzZXJ2ZXIgc2lkZSBzY3JpcHRpbmcuIEJlc2lkZXMgdGhlc2UgZmV3IGNhc2VzLCB5b3Ugc2hvdWxkIHVzZSB7QGxpbmsgZ3VpZGUvY29udHJvbGxlciBjb250cm9sbGVyc31cbiAqIHJhdGhlciB0aGFuIGBuZ0luaXRgIHRvIGluaXRpYWxpemUgdmFsdWVzIG9uIGEgc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlKio6IElmIHlvdSBoYXZlIGFzc2lnbm1lbnQgaW4gYG5nSW5pdGAgYWxvbmcgd2l0aCBhIHtAbGluayBuZy4kZmlsdGVyIGBmaWx0ZXJgfSwgbWFrZVxuICogc3VyZSB5b3UgaGF2ZSBwYXJlbnRoZXNlcyB0byBlbnN1cmUgY29ycmVjdCBvcGVyYXRvciBwcmVjZWRlbmNlOlxuICogPHByZSBjbGFzcz1cInByZXR0eXByaW50XCI+XG4gKiBgPGRpdiBuZy1pbml0PVwidGVzdDEgPSAoJGluZGV4IHwgdG9TdHJpbmcpXCI+PC9kaXY+YFxuICogPC9wcmU+XG4gKiA8L2Rpdj5cbiAqXG4gKiBAcHJpb3JpdHkgNDUwXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSW5pdCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJpbml0RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgPHNjcmlwdD5cbiAgICAgYW5ndWxhci5tb2R1bGUoJ2luaXRFeGFtcGxlJywgW10pXG4gICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICRzY29wZS5saXN0ID0gW1snYScsICdiJ10sIFsnYycsICdkJ11dO1xuICAgICAgIH1dKTtcbiAgIDwvc2NyaXB0PlxuICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgPGRpdiBuZy1yZXBlYXQ9XCJpbm5lckxpc3QgaW4gbGlzdFwiIG5nLWluaXQ9XCJvdXRlckluZGV4ID0gJGluZGV4XCI+XG4gICAgICAgPGRpdiBuZy1yZXBlYXQ9XCJ2YWx1ZSBpbiBpbm5lckxpc3RcIiBuZy1pbml0PVwiaW5uZXJJbmRleCA9ICRpbmRleFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXhhbXBsZS1pbml0XCI+bGlzdFsge3tvdXRlckluZGV4fX0gXVsge3tpbm5lckluZGV4fX0gXSA9IHt7dmFsdWV9fTs8L3NwYW4+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZGl2PlxuICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgYWxpYXMgaW5kZXggcG9zaXRpb25zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgZWxlbWVudHMgPSBlbGVtZW50LmFsbChieS5jc3MoJy5leGFtcGxlLWluaXQnKSk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAwIF0gPSBhOycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgxKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDAgXVsgMSBdID0gYjsnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMikuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAxIF1bIDAgXSA9IGM7Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDMpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMSBdWyAxIF0gPSBkOycpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0luaXREaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIHByaW9yaXR5OiA0NTAsXG4gIGNvbXBpbGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBzY29wZS4kZXZhbChhdHRycy5uZ0luaXQpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTGlzdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGV4dCBpbnB1dCB0aGF0IGNvbnZlcnRzIGJldHdlZW4gYSBkZWxpbWl0ZWQgc3RyaW5nIGFuZCBhbiBhcnJheSBvZiBzdHJpbmdzLiBUaGUgZGVmYXVsdFxuICogZGVsaW1pdGVyIGlzIGEgY29tbWEgZm9sbG93ZWQgYnkgYSBzcGFjZSAtIGVxdWl2YWxlbnQgdG8gYG5nLWxpc3Q9XCIsIFwiYC4gWW91IGNhbiBzcGVjaWZ5IGEgY3VzdG9tXG4gKiBkZWxpbWl0ZXIgYXMgdGhlIHZhbHVlIG9mIHRoZSBgbmdMaXN0YCBhdHRyaWJ1dGUgLSBmb3IgZXhhbXBsZSwgYG5nLWxpc3Q9XCIgfCBcImAuXG4gKlxuICogVGhlIGJlaGF2aW91ciBvZiB0aGUgZGlyZWN0aXZlIGlzIGFmZmVjdGVkIGJ5IHRoZSB1c2Ugb2YgdGhlIGBuZ1RyaW1gIGF0dHJpYnV0ZS5cbiAqICogSWYgYG5nVHJpbWAgaXMgc2V0IHRvIGBcImZhbHNlXCJgIHRoZW4gd2hpdGVzcGFjZSBhcm91bmQgYm90aCB0aGUgc2VwYXJhdG9yIGFuZCBlYWNoXG4gKiAgIGxpc3QgaXRlbSBpcyByZXNwZWN0ZWQuIFRoaXMgaW1wbGllcyB0aGF0IHRoZSB1c2VyIG9mIHRoZSBkaXJlY3RpdmUgaXMgcmVzcG9uc2libGUgZm9yXG4gKiAgIGRlYWxpbmcgd2l0aCB3aGl0ZXNwYWNlIGJ1dCBhbHNvIGFsbG93cyB5b3UgdG8gdXNlIHdoaXRlc3BhY2UgYXMgYSBkZWxpbWl0ZXIsIHN1Y2ggYXMgYVxuICogICB0YWIgb3IgbmV3bGluZSBjaGFyYWN0ZXIuXG4gKiAqIE90aGVyd2lzZSB3aGl0ZXNwYWNlIGFyb3VuZCB0aGUgZGVsaW1pdGVyIGlzIGlnbm9yZWQgd2hlbiBzcGxpdHRpbmcgKGFsdGhvdWdoIGl0IGlzIHJlc3BlY3RlZFxuICogICB3aGVuIGpvaW5pbmcgdGhlIGxpc3QgaXRlbXMgYmFjayB0b2dldGhlcikgYW5kIHdoaXRlc3BhY2UgYXJvdW5kIGVhY2ggbGlzdCBpdGVtIGlzIHN0cmlwcGVkXG4gKiAgIGJlZm9yZSBpdCBpcyBhZGRlZCB0byB0aGUgbW9kZWwuXG4gKlxuICogIyMjIEV4YW1wbGUgd2l0aCBWYWxpZGF0aW9uXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nTGlzdC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJsaXN0RXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICAgIGFuZ3VsYXIubW9kdWxlKCdsaXN0RXhhbXBsZScsIFtdKVxuICogICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ21vcnBoZXVzJywgJ25lbycsICd0cmluaXR5J107XG4gKiAgICAgICAgfV0pO1xuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgIDxsYWJlbD5MaXN0OiA8aW5wdXQgbmFtZT1cIm5hbWVzSW5wdXRcIiBuZy1tb2RlbD1cIm5hbWVzXCIgbmctbGlzdCByZXF1aXJlZD48L2xhYmVsPlxuICogICAgICA8c3BhbiByb2xlPVwiYWxlcnRcIj5cbiAqICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5uYW1lc0lucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICogICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAqICAgICAgPC9zcGFuPlxuICogICAgICA8YnI+XG4gKiAgICAgIDx0dD5uYW1lcyA9IHt7bmFtZXN9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCA9IHt7bXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0ubmFtZXNJbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5uYW1lc0lucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gKiAgICAgPC9mb3JtPlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICB2YXIgbGlzdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZXMnKSk7XG4gKiAgICAgdmFyIG5hbWVzID0gZWxlbWVudChieS5leGFjdEJpbmRpbmcoJ25hbWVzJykpO1xuICogICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkJykpO1xuICogICAgIHZhciBlcnJvciA9IGVsZW1lbnQoYnkuY3NzKCdzcGFuLmVycm9yJykpO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGV4cGVjdChuYW1lcy5nZXRUZXh0KCkpLnRvQ29udGFpbignW1wibW9ycGhldXNcIixcIm5lb1wiLFwidHJpbml0eVwiXScpO1xuICogICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gKiAgICAgICBleHBlY3QoZXJyb3IuZ2V0Q3NzVmFsdWUoJ2Rpc3BsYXknKSkudG9CZSgnbm9uZScpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGxpc3RJbnB1dC5jbGVhcigpO1xuICogICAgICAgbGlzdElucHV0LnNlbmRLZXlzKCcnKTtcbiAqXG4gKiAgICAgICBleHBlY3QobmFtZXMuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICogICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICogICAgICAgZXhwZWN0KGVycm9yLmdldENzc1ZhbHVlKCdkaXNwbGF5JykpLm5vdC50b0JlKCdub25lJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiAjIyMgRXhhbXBsZSAtIHNwbGl0dGluZyBvbiBuZXdsaW5lXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdMaXN0LWRpcmVjdGl2ZS1uZXdsaW5lc1wiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgPHRleHRhcmVhIG5nLW1vZGVsPVwibGlzdFwiIG5nLWxpc3Q9XCImIzEwO1wiIG5nLXRyaW09XCJmYWxzZVwiPjwvdGV4dGFyZWE+XG4gKiAgICA8cHJlPnt7IGxpc3QgfCBqc29uIH19PC9wcmU+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIGl0KFwic2hvdWxkIHNwbGl0IHRoZSB0ZXh0IGJ5IG5ld2xpbmVzXCIsIGZ1bmN0aW9uKCkge1xuICogICAgICAgdmFyIGxpc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2xpc3QnKSk7XG4gKiAgICAgICB2YXIgb3V0cHV0ID0gZWxlbWVudChieS5iaW5kaW5nKCdsaXN0IHwganNvbicpKTtcbiAqICAgICAgIGxpc3RJbnB1dC5zZW5kS2V5cygnYWJjXFxuZGVmXFxuZ2hpJyk7XG4gKiAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9Db250YWluKCdbXFxuICBcImFiY1wiLFxcbiAgXCJkZWZcIixcXG4gIFwiZ2hpXCJcXG5dJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBpbnB1dFxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0xpc3Qgb3B0aW9uYWwgZGVsaW1pdGVyIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gc3BsaXQgdGhlIHZhbHVlLlxuICovXG52YXIgbmdMaXN0RGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICAgICAgLy8gV2Ugd2FudCB0byBjb250cm9sIHdoaXRlc3BhY2UgdHJpbW1pbmcgc28gd2UgdXNlIHRoaXMgY29udm9sdXRlZCBhcHByb2FjaFxuICAgICAgLy8gdG8gYWNjZXNzIHRoZSBuZ0xpc3QgYXR0cmlidXRlLCB3aGljaCBkb2Vzbid0IHByZS10cmltIHRoZSBhdHRyaWJ1dGVcbiAgICAgIHZhciBuZ0xpc3QgPSBlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci5uZ0xpc3QpIHx8ICcsICc7XG4gICAgICB2YXIgdHJpbVZhbHVlcyA9IGF0dHIubmdUcmltICE9PSAnZmFsc2UnO1xuICAgICAgdmFyIHNlcGFyYXRvciA9IHRyaW1WYWx1ZXMgPyB0cmltKG5nTGlzdCkgOiBuZ0xpc3Q7XG5cbiAgICAgIHZhciBwYXJzZSA9IGZ1bmN0aW9uKHZpZXdWYWx1ZSkge1xuICAgICAgICAvLyBJZiB0aGUgdmlld1ZhbHVlIGlzIGludmFsaWQgKHNheSByZXF1aXJlZCBidXQgZW1wdHkpIGl0IHdpbGwgYmUgYHVuZGVmaW5lZGBcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZpZXdWYWx1ZSkpIHJldHVybjtcblxuICAgICAgICB2YXIgbGlzdCA9IFtdO1xuXG4gICAgICAgIGlmICh2aWV3VmFsdWUpIHtcbiAgICAgICAgICBmb3JFYWNoKHZpZXdWYWx1ZS5zcGxpdChzZXBhcmF0b3IpLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSBsaXN0LnB1c2godHJpbVZhbHVlcyA/IHRyaW0odmFsdWUpIDogdmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICB9O1xuXG4gICAgICBjdHJsLiRwYXJzZXJzLnB1c2gocGFyc2UpO1xuICAgICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS5qb2luKG5nTGlzdCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIE92ZXJyaWRlIHRoZSBzdGFuZGFyZCAkaXNFbXB0eSBiZWNhdXNlIGFuIGVtcHR5IGFycmF5IG1lYW5zIHRoZSBpbnB1dCBpcyBlbXB0eS5cbiAgICAgIGN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlIHx8ICF2YWx1ZS5sZW5ndGg7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbi8qIGdsb2JhbCBWQUxJRF9DTEFTUzogdHJ1ZSxcbiAgSU5WQUxJRF9DTEFTUzogdHJ1ZSxcbiAgUFJJU1RJTkVfQ0xBU1M6IHRydWUsXG4gIERJUlRZX0NMQVNTOiB0cnVlLFxuICBVTlRPVUNIRURfQ0xBU1M6IHRydWUsXG4gIFRPVUNIRURfQ0xBU1M6IHRydWUsXG4qL1xuXG52YXIgVkFMSURfQ0xBU1MgPSAnbmctdmFsaWQnLFxuICAgIElOVkFMSURfQ0xBU1MgPSAnbmctaW52YWxpZCcsXG4gICAgUFJJU1RJTkVfQ0xBU1MgPSAnbmctcHJpc3RpbmUnLFxuICAgIERJUlRZX0NMQVNTID0gJ25nLWRpcnR5JyxcbiAgICBVTlRPVUNIRURfQ0xBU1MgPSAnbmctdW50b3VjaGVkJyxcbiAgICBUT1VDSEVEX0NMQVNTID0gJ25nLXRvdWNoZWQnLFxuICAgIFBFTkRJTkdfQ0xBU1MgPSAnbmctcGVuZGluZyc7XG5cbnZhciBuZ01vZGVsTWluRXJyID0gbWluRXJyKCduZ01vZGVsJyk7XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJcbiAqXG4gKiBAcHJvcGVydHkgeyp9ICR2aWV3VmFsdWUgVGhlIGFjdHVhbCB2YWx1ZSBmcm9tIHRoZSBjb250cm9sJ3Mgdmlldy4gRm9yIGBpbnB1dGAgZWxlbWVudHMsIHRoaXMgaXMgYVxuICogU3RyaW5nLiBTZWUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZX0gZm9yIGluZm9ybWF0aW9uIGFib3V0IHdoZW4gdGhlICR2aWV3VmFsdWVcbiAqIGlzIHNldC5cbiAqIEBwcm9wZXJ0eSB7Kn0gJG1vZGVsVmFsdWUgVGhlIHZhbHVlIGluIHRoZSBtb2RlbCB0aGF0IHRoZSBjb250cm9sIGlzIGJvdW5kIHRvLlxuICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkcGFyc2VycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSwgYXMgYSBwaXBlbGluZSwgd2hlbmV2ZXJcbiAgICAgICB0aGUgY29udHJvbCByZWFkcyB2YWx1ZSBmcm9tIHRoZSBET00uIFRoZSBmdW5jdGlvbnMgYXJlIGNhbGxlZCBpbiBhcnJheSBvcmRlciwgZWFjaCBwYXNzaW5nXG4gICAgICAgaXRzIHJldHVybiB2YWx1ZSB0aHJvdWdoIHRvIHRoZSBuZXh0LiBUaGUgbGFzdCByZXR1cm4gdmFsdWUgaXMgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAgIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGAkdmFsaWRhdG9yc2B9IGNvbGxlY3Rpb24uXG5cblBhcnNlcnMgYXJlIHVzZWQgdG8gc2FuaXRpemUgLyBjb252ZXJ0IHRoZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlXG5gJHZpZXdWYWx1ZWB9LlxuXG5SZXR1cm5pbmcgYHVuZGVmaW5lZGAgZnJvbSBhIHBhcnNlciBtZWFucyBhIHBhcnNlIGVycm9yIG9jY3VycmVkLiBJbiB0aGF0IGNhc2UsXG5ubyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgJHZhbGlkYXRvcnNgfSB3aWxsIHJ1biBhbmQgdGhlIGBuZ01vZGVsYFxud2lsbCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAgdW5sZXNzIHtAbGluayBuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnMuYWxsb3dJbnZhbGlkYH1cbmlzIHNldCB0byBgdHJ1ZWAuIFRoZSBwYXJzZSBlcnJvciBpcyBzdG9yZWQgaW4gYG5nTW9kZWwuJGVycm9yLnBhcnNlYC5cblxuICpcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJGZvcm1hdHRlcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUsIGFzIGEgcGlwZWxpbmUsIHdoZW5ldmVyXG4gICAgICAgdGhlIG1vZGVsIHZhbHVlIGNoYW5nZXMuIFRoZSBmdW5jdGlvbnMgYXJlIGNhbGxlZCBpbiByZXZlcnNlIGFycmF5IG9yZGVyLCBlYWNoIHBhc3NpbmcgdGhlIHZhbHVlIHRocm91Z2ggdG8gdGhlXG4gICAgICAgbmV4dC4gVGhlIGxhc3QgcmV0dXJuIHZhbHVlIGlzIHVzZWQgYXMgdGhlIGFjdHVhbCBET00gdmFsdWUuXG4gICAgICAgVXNlZCB0byBmb3JtYXQgLyBjb252ZXJ0IHZhbHVlcyBmb3IgZGlzcGxheSBpbiB0aGUgY29udHJvbC5cbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsdWUpIHtcbiAqICAgaWYgKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gKiAgIH1cbiAqIH1cbiAqIG5nTW9kZWwuJGZvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xuICogYGBgXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24+fSAkdmFsaWRhdG9ycyBBIGNvbGxlY3Rpb24gb2YgdmFsaWRhdG9ycyB0aGF0IGFyZSBhcHBsaWVkXG4gKiAgICAgIHdoZW5ldmVyIHRoZSBtb2RlbCB2YWx1ZSBjaGFuZ2VzLiBUaGUga2V5IHZhbHVlIHdpdGhpbiB0aGUgb2JqZWN0IHJlZmVycyB0byB0aGUgbmFtZSBvZiB0aGVcbiAqICAgICAgdmFsaWRhdG9yIHdoaWxlIHRoZSBmdW5jdGlvbiByZWZlcnMgdG8gdGhlIHZhbGlkYXRpb24gb3BlcmF0aW9uLiBUaGUgdmFsaWRhdGlvbiBvcGVyYXRpb24gaXNcbiAqICAgICAgcHJvdmlkZWQgd2l0aCB0aGUgbW9kZWwgdmFsdWUgYXMgYW4gYXJndW1lbnQgYW5kIG11c3QgcmV0dXJuIGEgdHJ1ZSBvciBmYWxzZSB2YWx1ZSBkZXBlbmRpbmdcbiAqICAgICAgb24gdGhlIHJlc3BvbnNlIG9mIHRoYXQgdmFsaWRhdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogbmdNb2RlbC4kdmFsaWRhdG9ycy52YWxpZENoYXJhY3RlcnMgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAqICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gKiAgIHJldHVybiAvWzAtOV0rLy50ZXN0KHZhbHVlKSAmJlxuICogICAgICAgICAgL1thLXpdKy8udGVzdCh2YWx1ZSkgJiZcbiAqICAgICAgICAgIC9bQS1aXSsvLnRlc3QodmFsdWUpICYmXG4gKiAgICAgICAgICAvXFxXKy8udGVzdCh2YWx1ZSk7XG4gKiB9O1xuICogYGBgXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24+fSAkYXN5bmNWYWxpZGF0b3JzIEEgY29sbGVjdGlvbiBvZiB2YWxpZGF0aW9ucyB0aGF0IGFyZSBleHBlY3RlZCB0b1xuICogICAgICBwZXJmb3JtIGFuIGFzeW5jaHJvbm91cyB2YWxpZGF0aW9uIChlLmcuIGEgSFRUUCByZXF1ZXN0KS4gVGhlIHZhbGlkYXRpb24gZnVuY3Rpb24gdGhhdCBpcyBwcm92aWRlZFxuICogICAgICBpcyBleHBlY3RlZCB0byByZXR1cm4gYSBwcm9taXNlIHdoZW4gaXQgaXMgcnVuIGR1cmluZyB0aGUgbW9kZWwgdmFsaWRhdGlvbiBwcm9jZXNzLiBPbmNlIHRoZSBwcm9taXNlXG4gKiAgICAgIGlzIGRlbGl2ZXJlZCB0aGVuIHRoZSB2YWxpZGF0aW9uIHN0YXR1cyB3aWxsIGJlIHNldCB0byB0cnVlIHdoZW4gZnVsZmlsbGVkIGFuZCBmYWxzZSB3aGVuIHJlamVjdGVkLlxuICogICAgICBXaGVuIHRoZSBhc3luY2hyb25vdXMgdmFsaWRhdG9ycyBhcmUgdHJpZ2dlcmVkLCBlYWNoIG9mIHRoZSB2YWxpZGF0b3JzIHdpbGwgcnVuIGluIHBhcmFsbGVsIGFuZCB0aGUgbW9kZWxcbiAqICAgICAgdmFsdWUgd2lsbCBvbmx5IGJlIHVwZGF0ZWQgb25jZSBhbGwgdmFsaWRhdG9ycyBoYXZlIGJlZW4gZnVsZmlsbGVkLiBBcyBsb25nIGFzIGFuIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JcbiAqICAgICAgaXMgdW5mdWxmaWxsZWQsIGl0cyBrZXkgd2lsbCBiZSBhZGRlZCB0byB0aGUgY29udHJvbGxlcnMgYCRwZW5kaW5nYCBwcm9wZXJ0eS4gQWxzbywgYWxsIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzXG4gKiAgICAgIHdpbGwgb25seSBydW4gb25jZSBhbGwgc3luY2hyb25vdXMgdmFsaWRhdG9ycyBoYXZlIHBhc3NlZC5cbiAqXG4gKiBQbGVhc2Ugbm90ZSB0aGF0IGlmICRodHRwIGlzIHVzZWQgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdGhhdCB0aGUgc2VydmVyIHJldHVybnMgYSBzdWNjZXNzIEhUVFAgcmVzcG9uc2UgY29kZVxuICogaW4gb3JkZXIgdG8gZnVsZmlsbCB0aGUgdmFsaWRhdGlvbiBhbmQgYSBzdGF0dXMgbGV2ZWwgb2YgYDR4eGAgaW4gb3JkZXIgdG8gcmVqZWN0IHRoZSB2YWxpZGF0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiBuZ01vZGVsLiRhc3luY1ZhbGlkYXRvcnMudW5pcXVlVXNlcm5hbWUgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAqICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gKlxuICogICAvLyBMb29rdXAgdXNlciBieSB1c2VybmFtZVxuICogICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzLycgKyB2YWx1ZSkuXG4gKiAgICAgIHRoZW4oZnVuY3Rpb24gcmVzb2x2ZWQoKSB7XG4gKiAgICAgICAgLy91c2VybmFtZSBleGlzdHMsIHRoaXMgbWVhbnMgdmFsaWRhdGlvbiBmYWlsc1xuICogICAgICAgIHJldHVybiAkcS5yZWplY3QoJ2V4aXN0cycpO1xuICogICAgICB9LCBmdW5jdGlvbiByZWplY3RlZCgpIHtcbiAqICAgICAgICAvL3VzZXJuYW1lIGRvZXMgbm90IGV4aXN0LCB0aGVyZWZvcmUgdGhpcyB2YWxpZGF0aW9uIHBhc3Nlc1xuICogICAgICAgIHJldHVybiB0cnVlO1xuICogICAgICB9KTtcbiAqIH07XG4gKiBgYGBcbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICR2aWV3Q2hhbmdlTGlzdGVuZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlIHdoZW5ldmVyIHRoZVxuICogICAgIHZpZXcgdmFsdWUgaGFzIGNoYW5nZWQuIEl0IGlzIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cywgYW5kIGl0cyByZXR1cm4gdmFsdWUgaXMgaWdub3JlZC5cbiAqICAgICBUaGlzIGNhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGFkZGl0aW9uYWwgJHdhdGNoZXMgYWdhaW5zdCB0aGUgbW9kZWwgdmFsdWUuXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3R9ICRlcnJvciBBbiBvYmplY3QgaGFzaCB3aXRoIGFsbCBmYWlsaW5nIHZhbGlkYXRvciBpZHMgYXMga2V5cy5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkcGVuZGluZyBBbiBvYmplY3QgaGFzaCB3aXRoIGFsbCBwZW5kaW5nIHZhbGlkYXRvciBpZHMgYXMga2V5cy5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR1bnRvdWNoZWQgVHJ1ZSBpZiBjb250cm9sIGhhcyBub3QgbG9zdCBmb2N1cyB5ZXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR0b3VjaGVkIFRydWUgaWYgY29udHJvbCBoYXMgbG9zdCBmb2N1cy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgY29udHJvbCB5ZXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRkaXJ0eSBUcnVlIGlmIHVzZXIgaGFzIGFscmVhZHkgaW50ZXJhY3RlZCB3aXRoIHRoZSBjb250cm9sLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiB0aGVyZSBpcyBubyBlcnJvci5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgZXJyb3Igb24gdGhlIGNvbnRyb2wuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gJG5hbWUgVGhlIG5hbWUgYXR0cmlidXRlIG9mIHRoZSBjb250cm9sLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGBOZ01vZGVsQ29udHJvbGxlcmAgcHJvdmlkZXMgQVBJIGZvciB0aGUge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSBkaXJlY3RpdmUuXG4gKiBUaGUgY29udHJvbGxlciBjb250YWlucyBzZXJ2aWNlcyBmb3IgZGF0YS1iaW5kaW5nLCB2YWxpZGF0aW9uLCBDU1MgdXBkYXRlcywgYW5kIHZhbHVlIGZvcm1hdHRpbmdcbiAqIGFuZCBwYXJzaW5nLiBJdCBwdXJwb3NlZnVsbHkgZG9lcyBub3QgY29udGFpbiBhbnkgbG9naWMgd2hpY2ggZGVhbHMgd2l0aCBET00gcmVuZGVyaW5nIG9yXG4gKiBsaXN0ZW5pbmcgdG8gRE9NIGV2ZW50cy5cbiAqIFN1Y2ggRE9NIHJlbGF0ZWQgbG9naWMgc2hvdWxkIGJlIHByb3ZpZGVkIGJ5IG90aGVyIGRpcmVjdGl2ZXMgd2hpY2ggbWFrZSB1c2Ugb2ZcbiAqIGBOZ01vZGVsQ29udHJvbGxlcmAgZm9yIGRhdGEtYmluZGluZyB0byBjb250cm9sIGVsZW1lbnRzLlxuICogQW5ndWxhciBwcm92aWRlcyB0aGlzIERPTSBsb2dpYyBmb3IgbW9zdCB7QGxpbmsgaW5wdXQgYGlucHV0YH0gZWxlbWVudHMuXG4gKiBBdCB0aGUgZW5kIG9mIHRoaXMgcGFnZSB5b3UgY2FuIGZpbmQgYSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciNjdXN0b20tY29udHJvbC1leGFtcGxlXG4gKiBjdXN0b20gY29udHJvbCBleGFtcGxlfSB0aGF0IHVzZXMgYG5nTW9kZWxDb250cm9sbGVyYCB0byBiaW5kIHRvIGBjb250ZW50ZWRpdGFibGVgIGVsZW1lbnRzLlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgQ3VzdG9tIENvbnRyb2wgRXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYE5nTW9kZWxDb250cm9sbGVyYCB3aXRoIGEgY3VzdG9tIGNvbnRyb2wgdG8gYWNoaWV2ZVxuICogZGF0YS1iaW5kaW5nLiBOb3RpY2UgaG93IGRpZmZlcmVudCBkaXJlY3RpdmVzIChgY29udGVudGVkaXRhYmxlYCwgYG5nLW1vZGVsYCwgYW5kIGByZXF1aXJlZGApXG4gKiBjb2xsYWJvcmF0ZSB0b2dldGhlciB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIHJlc3VsdC5cbiAqXG4gKiBgY29udGVudGVkaXRhYmxlYCBpcyBhbiBIVE1MNSBhdHRyaWJ1dGUsIHdoaWNoIHRlbGxzIHRoZSBicm93c2VyIHRvIGxldCB0aGUgZWxlbWVudFxuICogY29udGVudHMgYmUgZWRpdGVkIGluIHBsYWNlIGJ5IHRoZSB1c2VyLlxuICpcbiAqIFdlIGFyZSB1c2luZyB0aGUge0BsaW5rIG5nLnNlcnZpY2U6JHNjZSAkc2NlfSBzZXJ2aWNlIGhlcmUgYW5kIGluY2x1ZGUgdGhlIHtAbGluayBuZ1Nhbml0aXplICRzYW5pdGl6ZX1cbiAqIG1vZHVsZSB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSBcImJhZFwiIGNvbnRlbnQgbGlrZSBpbmxpbmUgZXZlbnQgbGlzdGVuZXIgKGUuZy4gYDxzcGFuIG9uY2xpY2s9XCIuLi5cIj5gKS5cbiAqIEhvd2V2ZXIsIGFzIHdlIGFyZSB1c2luZyBgJHNjZWAgdGhlIG1vZGVsIGNhbiBzdGlsbCBkZWNpZGUgdG8gcHJvdmlkZSB1bnNhZmUgY29udGVudCBpZiBpdCBtYXJrc1xuICogdGhhdCBjb250ZW50IHVzaW5nIHRoZSBgJHNjZWAgc2VydmljZS5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwiTmdNb2RlbENvbnRyb2xsZXJcIiBtb2R1bGU9XCJjdXN0b21Db250cm9sXCIgZGVwcz1cImFuZ3VsYXItc2FuaXRpemUuanNcIj5cbiAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICBbY29udGVudGVkaXRhYmxlXSB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICAgICAgbWluLWhlaWdodDogMjBweDtcbiAgICAgIH1cblxuICAgICAgLm5nLWludmFsaWQge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZWQ7XG4gICAgICB9XG5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2N1c3RvbUNvbnRyb2wnLCBbJ25nU2FuaXRpemUnXSkuXG4gICAgICAgIGRpcmVjdGl2ZSgnY29udGVudGVkaXRhYmxlJywgWyckc2NlJywgZnVuY3Rpb24oJHNjZSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLCAvLyBvbmx5IGFjdGl2YXRlIG9uIGVsZW1lbnQgYXR0cmlidXRlXG4gICAgICAgICAgICByZXF1aXJlOiAnP25nTW9kZWwnLCAvLyBnZXQgYSBob2xkIG9mIE5nTW9kZWxDb250cm9sbGVyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcbiAgICAgICAgICAgICAgaWYgKCFuZ01vZGVsKSByZXR1cm47IC8vIGRvIG5vdGhpbmcgaWYgbm8gbmctbW9kZWxcblxuICAgICAgICAgICAgICAvLyBTcGVjaWZ5IGhvdyBVSSBzaG91bGQgYmUgdXBkYXRlZFxuICAgICAgICAgICAgICBuZ01vZGVsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwoJHNjZS5nZXRUcnVzdGVkSHRtbChuZ01vZGVsLiR2aWV3VmFsdWUgfHwgJycpKTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIGNoYW5nZSBldmVudHMgdG8gZW5hYmxlIGJpbmRpbmdcbiAgICAgICAgICAgICAgZWxlbWVudC5vbignYmx1ciBrZXl1cCBjaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKHJlYWQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmVhZCgpOyAvLyBpbml0aWFsaXplXG5cbiAgICAgICAgICAgICAgLy8gV3JpdGUgZGF0YSB0byB0aGUgbW9kZWxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gcmVhZCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IGVsZW1lbnQuaHRtbCgpO1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gd2UgY2xlYXIgdGhlIGNvbnRlbnQgZWRpdGFibGUgdGhlIGJyb3dzZXIgbGVhdmVzIGEgPGJyPiBiZWhpbmRcbiAgICAgICAgICAgICAgICAvLyBJZiBzdHJpcC1iciBhdHRyaWJ1dGUgaXMgcHJvdmlkZWQgdGhlbiB3ZSBzdHJpcCB0aGlzIG91dFxuICAgICAgICAgICAgICAgIGlmICggYXR0cnMuc3RyaXBCciAmJiBodG1sID09ICc8YnI+JyApIHtcbiAgICAgICAgICAgICAgICAgIGh0bWwgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGh0bWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICAgICAgIDxkaXYgY29udGVudGVkaXRhYmxlXG4gICAgICAgICAgICBuYW1lPVwibXlXaWRnZXRcIiBuZy1tb2RlbD1cInVzZXJDb250ZW50XCJcbiAgICAgICAgICAgIHN0cmlwLWJyPVwidHJ1ZVwiXG4gICAgICAgICAgICByZXF1aXJlZD5DaGFuZ2UgbWUhPC9kaXY+XG4gICAgICAgIDxzcGFuIG5nLXNob3c9XCJteUZvcm0ubXlXaWRnZXQuJGVycm9yLnJlcXVpcmVkXCI+UmVxdWlyZWQhPC9zcGFuPlxuICAgICAgIDxocj5cbiAgICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJ1c2VyQ29udGVudFwiIGFyaWEtbGFiZWw9XCJEeW5hbWljIHRleHRhcmVhXCI+PC90ZXh0YXJlYT5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgIGl0KCdzaG91bGQgZGF0YS1iaW5kIGFuZCBiZWNvbWUgaW52YWxpZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT0gJ3NhZmFyaScgfHwgYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnZmlyZWZveCcpIHtcbiAgICAgICAgLy8gU2FmYXJpRHJpdmVyIGNhbid0IGhhbmRsZSBjb250ZW50ZWRpdGFibGVcbiAgICAgICAgLy8gYW5kIEZpcmVmb3ggZHJpdmVyIGNhbid0IGNsZWFyIGNvbnRlbnRlZGl0YWJsZXMgdmVyeSB3ZWxsXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBjb250ZW50RWRpdGFibGUgPSBlbGVtZW50KGJ5LmNzcygnW2NvbnRlbnRlZGl0YWJsZV0nKSk7XG4gICAgICB2YXIgY29udGVudCA9ICdDaGFuZ2UgbWUhJztcblxuICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRUZXh0KCkpLnRvRXF1YWwoY29udGVudCk7XG5cbiAgICAgIGNvbnRlbnRFZGl0YWJsZS5jbGVhcigpO1xuICAgICAgY29udGVudEVkaXRhYmxlLnNlbmRLZXlzKHByb3RyYWN0b3IuS2V5LkJBQ0tfU1BBQ0UpO1xuICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRUZXh0KCkpLnRvRXF1YWwoJycpO1xuICAgICAgZXhwZWN0KGNvbnRlbnRFZGl0YWJsZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL25nLWludmFsaWQtcmVxdWlyZWQvKTtcbiAgICB9KTtcbiAgICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICpcbiAqL1xudmFyIE5nTW9kZWxDb250cm9sbGVyID0gWyckc2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJGF0dHJzJywgJyRlbGVtZW50JywgJyRwYXJzZScsICckYW5pbWF0ZScsICckdGltZW91dCcsICckcm9vdFNjb3BlJywgJyRxJywgJyRpbnRlcnBvbGF0ZScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlciwgJGF0dHIsICRlbGVtZW50LCAkcGFyc2UsICRhbmltYXRlLCAkdGltZW91dCwgJHJvb3RTY29wZSwgJHEsICRpbnRlcnBvbGF0ZSkge1xuICB0aGlzLiR2aWV3VmFsdWUgPSBOdW1iZXIuTmFOO1xuICB0aGlzLiRtb2RlbFZhbHVlID0gTnVtYmVyLk5hTjtcbiAgdGhpcy4kJHJhd01vZGVsVmFsdWUgPSB1bmRlZmluZWQ7IC8vIHN0b3JlcyB0aGUgcGFyc2VkIG1vZGVsVmFsdWUgLyBtb2RlbCBzZXQgZnJvbSBzY29wZSByZWdhcmRsZXNzIG9mIHZhbGlkaXR5LlxuICB0aGlzLiR2YWxpZGF0b3JzID0ge307XG4gIHRoaXMuJGFzeW5jVmFsaWRhdG9ycyA9IHt9O1xuICB0aGlzLiRwYXJzZXJzID0gW107XG4gIHRoaXMuJGZvcm1hdHRlcnMgPSBbXTtcbiAgdGhpcy4kdmlld0NoYW5nZUxpc3RlbmVycyA9IFtdO1xuICB0aGlzLiR1bnRvdWNoZWQgPSB0cnVlO1xuICB0aGlzLiR0b3VjaGVkID0gZmFsc2U7XG4gIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTtcbiAgdGhpcy4kZGlydHkgPSBmYWxzZTtcbiAgdGhpcy4kdmFsaWQgPSB0cnVlO1xuICB0aGlzLiRpbnZhbGlkID0gZmFsc2U7XG4gIHRoaXMuJGVycm9yID0ge307IC8vIGtlZXAgaW52YWxpZCBrZXlzIGhlcmVcbiAgdGhpcy4kJHN1Y2Nlc3MgPSB7fTsgLy8ga2VlcCB2YWxpZCBrZXlzIGhlcmVcbiAgdGhpcy4kcGVuZGluZyA9IHVuZGVmaW5lZDsgLy8ga2VlcCBwZW5kaW5nIGtleXMgaGVyZVxuICB0aGlzLiRuYW1lID0gJGludGVycG9sYXRlKCRhdHRyLm5hbWUgfHwgJycsIGZhbHNlKSgkc2NvcGUpO1xuICB0aGlzLiQkcGFyZW50Rm9ybSA9IG51bGxGb3JtQ3RybDtcblxuICB2YXIgcGFyc2VkTmdNb2RlbCA9ICRwYXJzZSgkYXR0ci5uZ01vZGVsKSxcbiAgICAgIHBhcnNlZE5nTW9kZWxBc3NpZ24gPSBwYXJzZWROZ01vZGVsLmFzc2lnbixcbiAgICAgIG5nTW9kZWxHZXQgPSBwYXJzZWROZ01vZGVsLFxuICAgICAgbmdNb2RlbFNldCA9IHBhcnNlZE5nTW9kZWxBc3NpZ24sXG4gICAgICBwZW5kaW5nRGVib3VuY2UgPSBudWxsLFxuICAgICAgcGFyc2VyVmFsaWQsXG4gICAgICBjdHJsID0gdGhpcztcblxuICB0aGlzLiQkc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBjdHJsLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdldHRlclNldHRlcikge1xuICAgICAgdmFyIGludm9rZU1vZGVsR2V0dGVyID0gJHBhcnNlKCRhdHRyLm5nTW9kZWwgKyAnKCknKSxcbiAgICAgICAgICBpbnZva2VNb2RlbFNldHRlciA9ICRwYXJzZSgkYXR0ci5uZ01vZGVsICsgJygkJCRwKScpO1xuXG4gICAgICBuZ01vZGVsR2V0ID0gZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgIHZhciBtb2RlbFZhbHVlID0gcGFyc2VkTmdNb2RlbCgkc2NvcGUpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihtb2RlbFZhbHVlKSkge1xuICAgICAgICAgIG1vZGVsVmFsdWUgPSBpbnZva2VNb2RlbEdldHRlcigkc2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtb2RlbFZhbHVlO1xuICAgICAgfTtcbiAgICAgIG5nTW9kZWxTZXQgPSBmdW5jdGlvbigkc2NvcGUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHBhcnNlZE5nTW9kZWwoJHNjb3BlKSkpIHtcbiAgICAgICAgICBpbnZva2VNb2RlbFNldHRlcigkc2NvcGUsIHskJCRwOiBjdHJsLiRtb2RlbFZhbHVlfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyc2VkTmdNb2RlbEFzc2lnbigkc2NvcGUsIGN0cmwuJG1vZGVsVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIXBhcnNlZE5nTW9kZWwuYXNzaWduKSB7XG4gICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdub25hc3NpZ24nLCBcIkV4cHJlc3Npb24gJ3swfScgaXMgbm9uLWFzc2lnbmFibGUuIEVsZW1lbnQ6IHsxfVwiLFxuICAgICAgICAgICRhdHRyLm5nTW9kZWwsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJlbmRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FsbGVkIHdoZW4gdGhlIHZpZXcgbmVlZHMgdG8gYmUgdXBkYXRlZC4gSXQgaXMgZXhwZWN0ZWQgdGhhdCB0aGUgdXNlciBvZiB0aGUgbmctbW9kZWxcbiAgICogZGlyZWN0aXZlIHdpbGwgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBUaGUgYCRyZW5kZXIoKWAgbWV0aG9kIGlzIGludm9rZWQgaW4gdGhlIGZvbGxvd2luZyBzaXR1YXRpb25zOlxuICAgKlxuICAgKiAqIGAkcm9sbGJhY2tWaWV3VmFsdWUoKWAgaXMgY2FsbGVkLiAgSWYgd2UgYXJlIHJvbGxpbmcgYmFjayB0aGUgdmlldyB2YWx1ZSB0byB0aGUgbGFzdFxuICAgKiAgIGNvbW1pdHRlZCB2YWx1ZSB0aGVuIGAkcmVuZGVyKClgIGlzIGNhbGxlZCB0byB1cGRhdGUgdGhlIGlucHV0IGNvbnRyb2wuXG4gICAqICogVGhlIHZhbHVlIHJlZmVyZW5jZWQgYnkgYG5nLW1vZGVsYCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIGJvdGggdGhlIGAkbW9kZWxWYWx1ZWAgYW5kXG4gICAqICAgdGhlIGAkdmlld1ZhbHVlYCBhcmUgZGlmZmVyZW50IGZyb20gbGFzdCB0aW1lLlxuICAgKlxuICAgKiBTaW5jZSBgbmctbW9kZWxgIGRvZXMgbm90IGRvIGEgZGVlcCB3YXRjaCwgYCRyZW5kZXIoKWAgaXMgb25seSBpbnZva2VkIGlmIHRoZSB2YWx1ZXMgb2ZcbiAgICogYCRtb2RlbFZhbHVlYCBhbmQgYCR2aWV3VmFsdWVgIGFyZSBhY3R1YWxseSBkaWZmZXJlbnQgZnJvbSB0aGVpciBwcmV2aW91cyB2YWx1ZS4gSWYgYCRtb2RlbFZhbHVlYFxuICAgKiBvciBgJHZpZXdWYWx1ZWAgYXJlIG9iamVjdHMgKHJhdGhlciB0aGFuIGEgc3RyaW5nIG9yIG51bWJlcikgdGhlbiBgJHJlbmRlcigpYCB3aWxsIG5vdCBiZVxuICAgKiBpbnZva2VkIGlmIHlvdSBvbmx5IGNoYW5nZSBhIHByb3BlcnR5IG9uIHRoZSBvYmplY3RzLlxuICAgKi9cbiAgdGhpcy4kcmVuZGVyID0gbm9vcDtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRpc0VtcHR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuIHdlIG5lZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSB2YWx1ZSBvZiBhbiBpbnB1dCBpcyBlbXB0eS5cbiAgICpcbiAgICogRm9yIGluc3RhbmNlLCB0aGUgcmVxdWlyZWQgZGlyZWN0aXZlIGRvZXMgdGhpcyB0byB3b3JrIG91dCBpZiB0aGUgaW5wdXQgaGFzIGRhdGEgb3Igbm90LlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCBgJGlzRW1wdHlgIGZ1bmN0aW9uIGNoZWNrcyB3aGV0aGVyIHRoZSB2YWx1ZSBpcyBgdW5kZWZpbmVkYCwgYCcnYCwgYG51bGxgIG9yIGBOYU5gLlxuICAgKlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgZm9yIGlucHV0IGRpcmVjdGl2ZXMgd2hvc2UgY29uY2VwdCBvZiBiZWluZyBlbXB0eSBpcyBkaWZmZXJlbnQgZnJvbSB0aGVcbiAgICogZGVmYXVsdC4gVGhlIGBjaGVja2JveElucHV0VHlwZWAgZGlyZWN0aXZlIGRvZXMgdGhpcyBiZWNhdXNlIGluIGl0cyBjYXNlIGEgdmFsdWUgb2YgYGZhbHNlYFxuICAgKiBpbXBsaWVzIGVtcHR5LlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgdG8gY2hlY2sgZm9yIGVtcHRpbmVzcy5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBcImVtcHR5XCIuXG4gICAqL1xuICB0aGlzLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gaXNVbmRlZmluZWQodmFsdWUpIHx8IHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQgPSAwO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZhbGlkaXR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDaGFuZ2UgdGhlIHZhbGlkaXR5IHN0YXRlLCBhbmQgbm90aWZ5IHRoZSBmb3JtLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHdpdGhpbiAkcGFyc2Vycy8kZm9ybWF0dGVycyBvciBhIGN1c3RvbSB2YWxpZGF0aW9uIGltcGxlbWVudGF0aW9uLlxuICAgKiBIb3dldmVyLCBpbiBtb3N0IGNhc2VzIGl0IHNob3VsZCBiZSBzdWZmaWNpZW50IHRvIHVzZSB0aGUgYG5nTW9kZWwuJHZhbGlkYXRvcnNgIGFuZFxuICAgKiBgbmdNb2RlbC4kYXN5bmNWYWxpZGF0b3JzYCBjb2xsZWN0aW9ucyB3aGljaCB3aWxsIGNhbGwgYCRzZXRWYWxpZGl0eWAgYXV0b21hdGljYWxseS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRpb25FcnJvcktleSBOYW1lIG9mIHRoZSB2YWxpZGF0b3IuIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCB3aWxsIGJlIGFzc2lnbmVkXG4gICAqICAgICAgICB0byBlaXRoZXIgYCRlcnJvclt2YWxpZGF0aW9uRXJyb3JLZXldYCBvciBgJHBlbmRpbmdbdmFsaWRhdGlvbkVycm9yS2V5XWBcbiAgICogICAgICAgIChmb3IgdW5mdWxmaWxsZWQgYCRhc3luY1ZhbGlkYXRvcnNgKSwgc28gdGhhdCBpdCBpcyBhdmFpbGFibGUgZm9yIGRhdGEtYmluZGluZy5cbiAgICogICAgICAgIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCBzaG91bGQgYmUgaW4gY2FtZWxDYXNlIGFuZCB3aWxsIGdldCBjb252ZXJ0ZWQgaW50byBkYXNoLWNhc2VcbiAgICogICAgICAgIGZvciBjbGFzcyBuYW1lLiBFeGFtcGxlOiBgbXlFcnJvcmAgd2lsbCByZXN1bHQgaW4gYG5nLXZhbGlkLW15LWVycm9yYCBhbmQgYG5nLWludmFsaWQtbXktZXJyb3JgXG4gICAqICAgICAgICBjbGFzcyBhbmQgY2FuIGJlIGJvdW5kIHRvIGFzICBge3tzb21lRm9ybS5zb21lQ29udHJvbC4kZXJyb3IubXlFcnJvcn19YCAuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNWYWxpZCBXaGV0aGVyIHRoZSBjdXJyZW50IHN0YXRlIGlzIHZhbGlkICh0cnVlKSwgaW52YWxpZCAoZmFsc2UpLCBwZW5kaW5nICh1bmRlZmluZWQpLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgb3Igc2tpcHBlZCAobnVsbCkuIFBlbmRpbmcgaXMgdXNlZCBmb3IgdW5mdWxmaWxsZWQgYCRhc3luY1ZhbGlkYXRvcnNgLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgU2tpcHBlZCBpcyB1c2VkIGJ5IEFuZ3VsYXIgd2hlbiB2YWxpZGF0b3JzIGRvIG5vdCBydW4gYmVjYXVzZSBvZiBwYXJzZSBlcnJvcnMgYW5kXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIGAkYXN5bmNWYWxpZGF0b3JzYCBkbyBub3QgcnVuIGJlY2F1c2UgYW55IG9mIHRoZSBgJHZhbGlkYXRvcnNgIGZhaWxlZC5cbiAgICovXG4gIGFkZFNldFZhbGlkaXR5TWV0aG9kKHtcbiAgICBjdHJsOiB0aGlzLFxuICAgICRlbGVtZW50OiAkZWxlbWVudCxcbiAgICBzZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSB0cnVlO1xuICAgIH0sXG4gICAgdW5zZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldO1xuICAgIH0sXG4gICAgJGFuaW1hdGU6ICRhbmltYXRlXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFByaXN0aW5lXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyBwcmlzdGluZSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlIGBuZy1kaXJ0eWAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHMgcHJpc3RpbmVcbiAgICogc3RhdGUgKGBuZy1wcmlzdGluZWAgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgcHJpc3RpbmUgd2hlbiB0aGUgY29udHJvbFxuICAgKiBoYXMgbm90IGJlZW4gY2hhbmdlZCBmcm9tIHdoZW4gZmlyc3QgY29tcGlsZWQuXG4gICAqL1xuICB0aGlzLiRzZXRQcmlzdGluZSA9IGZ1bmN0aW9uKCkge1xuICAgIGN0cmwuJGRpcnR5ID0gZmFsc2U7XG4gICAgY3RybC4kcHJpc3RpbmUgPSB0cnVlO1xuICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKCRlbGVtZW50LCBESVJUWV9DTEFTUyk7XG4gICAgJGFuaW1hdGUuYWRkQ2xhc3MoJGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXREaXJ0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgZGlydHkgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctcHJpc3RpbmVgIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzIGRpcnR5XG4gICAqIHN0YXRlIChgbmctZGlydHlgIGNsYXNzKS4gQSBtb2RlbCBpcyBjb25zaWRlcmVkIHRvIGJlIGRpcnR5IHdoZW4gdGhlIGNvbnRyb2wgaGFzIGJlZW4gY2hhbmdlZFxuICAgKiBmcm9tIHdoZW4gZmlyc3QgY29tcGlsZWQuXG4gICAqL1xuICB0aGlzLiRzZXREaXJ0eSA9IGZ1bmN0aW9uKCkge1xuICAgIGN0cmwuJGRpcnR5ID0gdHJ1ZTtcbiAgICBjdHJsLiRwcmlzdGluZSA9IGZhbHNlO1xuICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKCRlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gICAgJGFuaW1hdGUuYWRkQ2xhc3MoJGVsZW1lbnQsIERJUlRZX0NMQVNTKTtcbiAgICBjdHJsLiQkcGFyZW50Rm9ybS4kc2V0RGlydHkoKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRVbnRvdWNoZWRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHVudG91Y2hlZCBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlIGBuZy10b3VjaGVkYCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0c1xuICAgKiB1bnRvdWNoZWQgc3RhdGUgKGBuZy11bnRvdWNoZWRgIGNsYXNzKS4gVXBvbiBjb21waWxhdGlvbiwgYSBtb2RlbCBpcyBzZXQgYXMgdW50b3VjaGVkXG4gICAqIGJ5IGRlZmF1bHQsIGhvd2V2ZXIgdGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byByZXN0b3JlIHRoYXQgc3RhdGUgaWYgdGhlIG1vZGVsIGhhc1xuICAgKiBhbHJlYWR5IGJlZW4gdG91Y2hlZCBieSB0aGUgdXNlci5cbiAgICovXG4gIHRoaXMuJHNldFVudG91Y2hlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGN0cmwuJHRvdWNoZWQgPSBmYWxzZTtcbiAgICBjdHJsLiR1bnRvdWNoZWQgPSB0cnVlO1xuICAgICRhbmltYXRlLnNldENsYXNzKCRlbGVtZW50LCBVTlRPVUNIRURfQ0xBU1MsIFRPVUNIRURfQ0xBU1MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFRvdWNoZWRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHRvdWNoZWQgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctdW50b3VjaGVkYCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0c1xuICAgKiB0b3VjaGVkIHN0YXRlIChgbmctdG91Y2hlZGAgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgdG91Y2hlZCB3aGVuIHRoZSB1c2VyIGhhc1xuICAgKiBmaXJzdCBmb2N1c2VkIHRoZSBjb250cm9sIGVsZW1lbnQgYW5kIHRoZW4gc2hpZnRlZCBmb2N1cyBhd2F5IGZyb20gdGhlIGNvbnRyb2wgKGJsdXIgZXZlbnQpLlxuICAgKi9cbiAgdGhpcy4kc2V0VG91Y2hlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGN0cmwuJHRvdWNoZWQgPSB0cnVlO1xuICAgIGN0cmwuJHVudG91Y2hlZCA9IGZhbHNlO1xuICAgICRhbmltYXRlLnNldENsYXNzKCRlbGVtZW50LCBUT1VDSEVEX0NMQVNTLCBVTlRPVUNIRURfQ0xBU1MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJvbGxiYWNrVmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYW5jZWwgYW4gdXBkYXRlIGFuZCByZXNldCB0aGUgaW5wdXQgZWxlbWVudCdzIHZhbHVlIHRvIHByZXZlbnQgYW4gdXBkYXRlIHRvIHRoZSBgJG1vZGVsVmFsdWVgLFxuICAgKiB3aGljaCBtYXkgYmUgY2F1c2VkIGJ5IGEgcGVuZGluZyBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lXG4gICAqIGZ1dHVyZSBldmVudC5cbiAgICpcbiAgICogSWYgeW91IGhhdmUgYW4gaW5wdXQgdGhhdCB1c2VzIGBuZy1tb2RlbC1vcHRpb25zYCB0byBzZXQgdXAgZGVib3VuY2VkIHVwZGF0ZXMgb3IgdXBkYXRlcyB0aGF0XG4gICAqIGRlcGVuZCBvbiBzcGVjaWFsIGV2ZW50cyBzdWNoIGFzIGJsdXIsIHlvdSBjYW4gaGF2ZSBhIHNpdHVhdGlvbiB3aGVyZSB0aGVyZSBpcyBhIHBlcmlvZCB3aGVuXG4gICAqIHRoZSBgJHZpZXdWYWx1ZWAgaXMgb3V0IG9mIHN5bmMgd2l0aCB0aGUgbmdNb2RlbCdzIGAkbW9kZWxWYWx1ZWAuXG4gICAqXG4gICAqIEluIHRoaXMgY2FzZSwgeW91IGNhbiB1c2UgYCRyb2xsYmFja1ZpZXdWYWx1ZSgpYCB0byBtYW51YWxseSBjYW5jZWwgdGhlIGRlYm91bmNlZCAvIGZ1dHVyZSB1cGRhdGVcbiAgICogYW5kIHJlc2V0IHRoZSBpbnB1dCB0byB0aGUgbGFzdCBjb21taXR0ZWQgdmlldyB2YWx1ZS5cbiAgICpcbiAgICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0aGF0IHlvdSBydW4gaW50byBkaWZmaWN1bHRpZXMgaWYgeW91IHRyeSB0byB1cGRhdGUgdGhlIG5nTW9kZWwncyBgJG1vZGVsVmFsdWVgXG4gICAqIHByb2dyYW1tYXRpY2FsbHkgYmVmb3JlIHRoZXNlIGRlYm91bmNlZC9mdXR1cmUgZXZlbnRzIGhhdmUgcmVzb2x2ZWQvb2NjdXJyZWQsIGJlY2F1c2UgQW5ndWxhcidzXG4gICAqIGRpcnR5IGNoZWNraW5nIG1lY2hhbmlzbSBpcyBub3QgYWJsZSB0byB0ZWxsIHdoZXRoZXIgdGhlIG1vZGVsIGhhcyBhY3R1YWxseSBjaGFuZ2VkIG9yIG5vdC5cbiAgICpcbiAgICogVGhlIGAkcm9sbGJhY2tWaWV3VmFsdWUoKWAgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIHByb2dyYW1tYXRpY2FsbHkgY2hhbmdpbmcgdGhlIG1vZGVsIG9mIGFuXG4gICAqIGlucHV0IHdoaWNoIG1heSBoYXZlIHN1Y2ggZXZlbnRzIHBlbmRpbmcuIFRoaXMgaXMgaW1wb3J0YW50IGluIG9yZGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZVxuICAgKiBpbnB1dCBmaWVsZCB3aWxsIGJlIHVwZGF0ZWQgd2l0aCB0aGUgbmV3IG1vZGVsIHZhbHVlIGFuZCBhbnkgcGVuZGluZyBvcGVyYXRpb25zIGFyZSBjYW5jZWxsZWQuXG4gICAqXG4gICAqIDxleGFtcGxlIG5hbWU9XCJuZy1tb2RlbC1jYW5jZWwtdXBkYXRlXCIgbW9kdWxlPVwiY2FuY2VsLXVwZGF0ZS1leGFtcGxlXCI+XG4gICAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgKiAgICAgYW5ndWxhci5tb2R1bGUoJ2NhbmNlbC11cGRhdGUtZXhhbXBsZScsIFtdKVxuICAgKlxuICAgKiAgICAgLmNvbnRyb2xsZXIoJ0NhbmNlbFVwZGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgKiAgICAgICAkc2NvcGUubW9kZWwgPSB7fTtcbiAgICpcbiAgICogICAgICAgJHNjb3BlLnNldEVtcHR5ID0gZnVuY3Rpb24oZSwgdmFsdWUsIHJvbGxiYWNrKSB7XG4gICAqICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAyNykge1xuICAgKiAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgKiAgICAgICAgICAgaWYgKHJvbGxiYWNrKSB7XG4gICAqICAgICAgICAgICAgICRzY29wZS5teUZvcm1bdmFsdWVdLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICAgKiAgICAgICAgICAgfVxuICAgKiAgICAgICAgICAgJHNjb3BlLm1vZGVsW3ZhbHVlXSA9ICcnO1xuICAgKiAgICAgICAgIH1cbiAgICogICAgICAgfTtcbiAgICogICAgIH1dKTtcbiAgICogICA8L2ZpbGU+XG4gICAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkNhbmNlbFVwZGF0ZUNvbnRyb2xsZXJcIj5cbiAgICogICAgICAgIDxwPkJvdGggb2YgdGhlc2UgaW5wdXRzIGFyZSBvbmx5IHVwZGF0ZWQgaWYgdGhleSBhcmUgYmx1cnJlZC4gSGl0dGluZyBlc2NhcGUgc2hvdWxkXG4gICAqICAgICAgICBlbXB0eSB0aGVtLiBGb2xsb3cgdGhlc2Ugc3RlcHMgYW5kIG9ic2VydmUgdGhlIGRpZmZlcmVuY2U6PC9wPlxuICAgKiAgICAgICA8b2w+XG4gICAqICAgICAgICAgPGxpPlR5cGUgc29tZXRoaW5nIGluIHRoZSBpbnB1dC4gWW91IHdpbGwgc2VlIHRoYXQgdGhlIG1vZGVsIGlzIG5vdCB5ZXQgdXBkYXRlZDwvbGk+XG4gICAqICAgICAgICAgPGxpPlByZXNzIHRoZSBFc2NhcGUga2V5LlxuICAgKiAgICAgICAgICAgPG9sPlxuICAgKiAgICAgICAgICAgICA8bGk+IEluIHRoZSBmaXJzdCBleGFtcGxlLCBub3RoaW5nIGhhcHBlbnMsIGJlY2F1c2UgdGhlIG1vZGVsIGlzIGFscmVhZHkgJycsIGFuZCBub1xuICAgKiAgICAgICAgICAgICB1cGRhdGUgaXMgZGV0ZWN0ZWQuIElmIHlvdSBibHVyIHRoZSBpbnB1dCwgdGhlIG1vZGVsIHdpbGwgYmUgc2V0IHRvIHRoZSBjdXJyZW50IHZpZXcuXG4gICAqICAgICAgICAgICAgIDwvbGk+XG4gICAqICAgICAgICAgICAgIDxsaT4gSW4gdGhlIHNlY29uZCBleGFtcGxlLCB0aGUgcGVuZGluZyB1cGRhdGUgaXMgY2FuY2VsbGVkLCBhbmQgdGhlIGlucHV0IGlzIHNldCBiYWNrXG4gICAqICAgICAgICAgICAgIHRvIHRoZSBsYXN0IGNvbW1pdHRlZCB2aWV3IHZhbHVlICgnJykuIEJsdXJyaW5nIHRoZSBpbnB1dCBkb2VzIG5vdGhpbmcuXG4gICAqICAgICAgICAgICAgIDwvbGk+XG4gICAqICAgICAgICAgICA8L29sPlxuICAgKiAgICAgICAgIDwvbGk+XG4gICAqICAgICAgIDwvb2w+XG4gICAqXG4gICAqICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2JsdXInIH1cIj5cbiAgICogICAgICAgICA8ZGl2PlxuICAgKiAgICAgICAgPHAgaWQ9XCJpbnB1dERlc2NyaXB0aW9uMVwiPldpdGhvdXQgJHJvbGxiYWNrVmlld1ZhbHVlKCk6PC9wPlxuICAgKiAgICAgICAgIDxpbnB1dCBuYW1lPVwidmFsdWUxXCIgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb24xXCIgbmctbW9kZWw9XCJtb2RlbC52YWx1ZTFcIlxuICAgKiAgICAgICAgICAgICAgICBuZy1rZXlkb3duPVwic2V0RW1wdHkoJGV2ZW50LCAndmFsdWUxJylcIj5cbiAgICogICAgICAgICB2YWx1ZTE6IFwie3sgbW9kZWwudmFsdWUxIH19XCJcbiAgICogICAgICAgICA8L2Rpdj5cbiAgICpcbiAgICogICAgICAgICA8ZGl2PlxuICAgKiAgICAgICAgPHAgaWQ9XCJpbnB1dERlc2NyaXB0aW9uMlwiPldpdGggJHJvbGxiYWNrVmlld1ZhbHVlKCk6PC9wPlxuICAgKiAgICAgICAgIDxpbnB1dCBuYW1lPVwidmFsdWUyXCIgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb24yXCIgbmctbW9kZWw9XCJtb2RlbC52YWx1ZTJcIlxuICAgKiAgICAgICAgICAgICAgICBuZy1rZXlkb3duPVwic2V0RW1wdHkoJGV2ZW50LCAndmFsdWUyJywgdHJ1ZSlcIj5cbiAgICogICAgICAgICB2YWx1ZTI6IFwie3sgbW9kZWwudmFsdWUyIH19XCJcbiAgICogICAgICAgICA8L2Rpdj5cbiAgICogICAgICAgPC9mb3JtPlxuICAgKiAgICAgPC9kaXY+XG4gICAqICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgICBkaXYge1xuICAgICAgICAgICAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGl2Om50aC1jaGlsZCgxKSB7XG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xuICAgICAgICAgIH1cblxuICAgICAgICA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICovXG4gIHRoaXMuJHJvbGxiYWNrVmlld1ZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgJHRpbWVvdXQuY2FuY2VsKHBlbmRpbmdEZWJvdW5jZSk7XG4gICAgY3RybC4kdmlld1ZhbHVlID0gY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU7XG4gICAgY3RybC4kcmVuZGVyKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJ1bnMgZWFjaCBvZiB0aGUgcmVnaXN0ZXJlZCB2YWxpZGF0b3JzIChmaXJzdCBzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGFuZCB0aGVuXG4gICAqIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzKS5cbiAgICogSWYgdGhlIHZhbGlkaXR5IGNoYW5nZXMgdG8gaW52YWxpZCwgdGhlIG1vZGVsIHdpbGwgYmUgc2V0IHRvIGB1bmRlZmluZWRgLFxuICAgKiB1bmxlc3Mge0BsaW5rIG5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9ucy5hbGxvd0ludmFsaWRgfSBpcyBgdHJ1ZWAuXG4gICAqIElmIHRoZSB2YWxpZGl0eSBjaGFuZ2VzIHRvIHZhbGlkLCBpdCB3aWxsIHNldCB0aGUgbW9kZWwgdG8gdGhlIGxhc3QgYXZhaWxhYmxlIHZhbGlkXG4gICAqIGAkbW9kZWxWYWx1ZWAsIGkuZS4gZWl0aGVyIHRoZSBsYXN0IHBhcnNlZCB2YWx1ZSBvciB0aGUgbGFzdCB2YWx1ZSBzZXQgZnJvbSB0aGUgc2NvcGUuXG4gICAqL1xuICB0aGlzLiR2YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGlnbm9yZSAkdmFsaWRhdGUgYmVmb3JlIG1vZGVsIGlzIGluaXRpYWxpemVkXG4gICAgaWYgKGlzTnVtYmVyKGN0cmwuJG1vZGVsVmFsdWUpICYmIGlzTmFOKGN0cmwuJG1vZGVsVmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZpZXdWYWx1ZSA9IGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlO1xuICAgIC8vIE5vdGU6IHdlIHVzZSB0aGUgJCRyYXdNb2RlbFZhbHVlIGFzICRtb2RlbFZhbHVlIG1pZ2h0IGhhdmUgYmVlblxuICAgIC8vIHNldCB0byB1bmRlZmluZWQgZHVyaW5nIGEgdmlldyAtPiBtb2RlbCB1cGRhdGUgdGhhdCBmb3VuZCB2YWxpZGF0aW9uXG4gICAgLy8gZXJyb3JzLiBXZSBjYW4ndCBwYXJzZSB0aGUgdmlldyBoZXJlLCBzaW5jZSB0aGF0IGNvdWxkIGNoYW5nZVxuICAgIC8vIHRoZSBtb2RlbCBhbHRob3VnaCBuZWl0aGVyIHZpZXdWYWx1ZSBub3IgdGhlIG1vZGVsIG9uIHRoZSBzY29wZSBjaGFuZ2VkXG4gICAgdmFyIG1vZGVsVmFsdWUgPSBjdHJsLiQkcmF3TW9kZWxWYWx1ZTtcblxuICAgIHZhciBwcmV2VmFsaWQgPSBjdHJsLiR2YWxpZDtcbiAgICB2YXIgcHJldk1vZGVsVmFsdWUgPSBjdHJsLiRtb2RlbFZhbHVlO1xuXG4gICAgdmFyIGFsbG93SW52YWxpZCA9IGN0cmwuJG9wdGlvbnMgJiYgY3RybC4kb3B0aW9ucy5hbGxvd0ludmFsaWQ7XG5cbiAgICBjdHJsLiQkcnVuVmFsaWRhdG9ycyhtb2RlbFZhbHVlLCB2aWV3VmFsdWUsIGZ1bmN0aW9uKGFsbFZhbGlkKSB7XG4gICAgICAvLyBJZiB0aGVyZSB3YXMgbm8gY2hhbmdlIGluIHZhbGlkaXR5LCBkb24ndCB1cGRhdGUgdGhlIG1vZGVsXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGNoYW5naW5nIGFuIGludmFsaWQgbW9kZWxWYWx1ZSB0byB1bmRlZmluZWRcbiAgICAgIGlmICghYWxsb3dJbnZhbGlkICYmIHByZXZWYWxpZCAhPT0gYWxsVmFsaWQpIHtcbiAgICAgICAgLy8gTm90ZTogRG9uJ3QgY2hlY2sgY3RybC4kdmFsaWQgaGVyZSwgYXMgd2UgY291bGQgaGF2ZVxuICAgICAgICAvLyBleHRlcm5hbCB2YWxpZGF0b3JzIChlLmcuIGNhbGN1bGF0ZWQgb24gdGhlIHNlcnZlciksXG4gICAgICAgIC8vIHRoYXQganVzdCBjYWxsICRzZXRWYWxpZGl0eSBhbmQgbmVlZCB0aGUgbW9kZWwgdmFsdWVcbiAgICAgICAgLy8gdG8gY2FsY3VsYXRlIHRoZWlyIHZhbGlkaXR5LlxuICAgICAgICBjdHJsLiRtb2RlbFZhbHVlID0gYWxsVmFsaWQgPyBtb2RlbFZhbHVlIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChjdHJsLiRtb2RlbFZhbHVlICE9PSBwcmV2TW9kZWxWYWx1ZSkge1xuICAgICAgICAgIGN0cmwuJCR3cml0ZU1vZGVsVG9TY29wZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfTtcblxuICB0aGlzLiQkcnVuVmFsaWRhdG9ycyA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgZG9uZUNhbGxiYWNrKSB7XG4gICAgY3VycmVudFZhbGlkYXRpb25SdW5JZCsrO1xuICAgIHZhciBsb2NhbFZhbGlkYXRpb25SdW5JZCA9IGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQ7XG5cbiAgICAvLyBjaGVjayBwYXJzZXIgZXJyb3JcbiAgICBpZiAoIXByb2Nlc3NQYXJzZUVycm9ycygpKSB7XG4gICAgICB2YWxpZGF0aW9uRG9uZShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghcHJvY2Vzc1N5bmNWYWxpZGF0b3JzKCkpIHtcbiAgICAgIHZhbGlkYXRpb25Eb25lKGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvY2Vzc0FzeW5jVmFsaWRhdG9ycygpO1xuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1BhcnNlRXJyb3JzKCkge1xuICAgICAgdmFyIGVycm9yS2V5ID0gY3RybC4kJHBhcnNlck5hbWUgfHwgJ3BhcnNlJztcbiAgICAgIGlmIChpc1VuZGVmaW5lZChwYXJzZXJWYWxpZCkpIHtcbiAgICAgICAgc2V0VmFsaWRpdHkoZXJyb3JLZXksIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFwYXJzZXJWYWxpZCkge1xuICAgICAgICAgIGZvckVhY2goY3RybC4kdmFsaWRhdG9ycywgZnVuY3Rpb24odiwgbmFtZSkge1xuICAgICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9yRWFjaChjdHJsLiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHYsIG5hbWUpIHtcbiAgICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIG51bGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCB0aGUgcGFyc2UgZXJyb3IgbGFzdCwgdG8gcHJldmVudCB1bnNldHRpbmcgaXQsIHNob3VsZCBhICR2YWxpZGF0b3JzIGtleSA9PSBwYXJzZXJOYW1lXG4gICAgICAgIHNldFZhbGlkaXR5KGVycm9yS2V5LCBwYXJzZXJWYWxpZCk7XG4gICAgICAgIHJldHVybiBwYXJzZXJWYWxpZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NTeW5jVmFsaWRhdG9ycygpIHtcbiAgICAgIHZhciBzeW5jVmFsaWRhdG9yc1ZhbGlkID0gdHJ1ZTtcbiAgICAgIGZvckVhY2goY3RybC4kdmFsaWRhdG9ycywgZnVuY3Rpb24odmFsaWRhdG9yLCBuYW1lKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB2YWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKTtcbiAgICAgICAgc3luY1ZhbGlkYXRvcnNWYWxpZCA9IHN5bmNWYWxpZGF0b3JzVmFsaWQgJiYgcmVzdWx0O1xuICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCByZXN1bHQpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXN5bmNWYWxpZGF0b3JzVmFsaWQpIHtcbiAgICAgICAgZm9yRWFjaChjdHJsLiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHYsIG5hbWUpIHtcbiAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBudWxsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NBc3luY1ZhbGlkYXRvcnMoKSB7XG4gICAgICB2YXIgdmFsaWRhdG9yUHJvbWlzZXMgPSBbXTtcbiAgICAgIHZhciBhbGxWYWxpZCA9IHRydWU7XG4gICAgICBmb3JFYWNoKGN0cmwuJGFzeW5jVmFsaWRhdG9ycywgZnVuY3Rpb24odmFsaWRhdG9yLCBuYW1lKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gdmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSk7XG4gICAgICAgIGlmICghaXNQcm9taXNlTGlrZShwcm9taXNlKSkge1xuICAgICAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoJ25vcHJvbWlzZScsXG4gICAgICAgICAgICBcIkV4cGVjdGVkIGFzeW5jaHJvbm91cyB2YWxpZGF0b3IgdG8gcmV0dXJuIGEgcHJvbWlzZSBidXQgZ290ICd7MH0nIGluc3RlYWQuXCIsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgIHZhbGlkYXRvclByb21pc2VzLnB1c2gocHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHRydWUpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIGFsbFZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgZmFsc2UpO1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGlmICghdmFsaWRhdG9yUHJvbWlzZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhbGlkYXRpb25Eb25lKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHEuYWxsKHZhbGlkYXRvclByb21pc2VzKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhbGlkYXRpb25Eb25lKGFsbFZhbGlkKTtcbiAgICAgICAgfSwgbm9vcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VmFsaWRpdHkobmFtZSwgaXNWYWxpZCkge1xuICAgICAgaWYgKGxvY2FsVmFsaWRhdGlvblJ1bklkID09PSBjdXJyZW50VmFsaWRhdGlvblJ1bklkKSB7XG4gICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KG5hbWUsIGlzVmFsaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRpb25Eb25lKGFsbFZhbGlkKSB7XG4gICAgICBpZiAobG9jYWxWYWxpZGF0aW9uUnVuSWQgPT09IGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQpIHtcblxuICAgICAgICBkb25lQ2FsbGJhY2soYWxsVmFsaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRjb21taXRWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvbW1pdCBhIHBlbmRpbmcgdXBkYXRlIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIHRoaXMgbWV0aG9kIGlzIHJhcmVseSBuZWVkZWQgYXMgYE5nTW9kZWxDb250cm9sbGVyYFxuICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy5cbiAgICovXG4gIHRoaXMuJGNvbW1pdFZpZXdWYWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3VmFsdWUgPSBjdHJsLiR2aWV3VmFsdWU7XG5cbiAgICAkdGltZW91dC5jYW5jZWwocGVuZGluZ0RlYm91bmNlKTtcblxuICAgIC8vIElmIHRoZSB2aWV3IHZhbHVlIGhhcyBub3QgY2hhbmdlZCB0aGVuIHdlIHNob3VsZCBqdXN0IGV4aXQsIGV4Y2VwdCBpbiB0aGUgY2FzZSB3aGVyZSB0aGVyZSBpc1xuICAgIC8vIGEgbmF0aXZlIHZhbGlkYXRvciBvbiB0aGUgZWxlbWVudC4gSW4gdGhpcyBjYXNlIHRoZSB2YWxpZGF0aW9uIHN0YXRlIG1heSBoYXZlIGNoYW5nZWQgZXZlbiB0aG91Z2hcbiAgICAvLyB0aGUgdmlld1ZhbHVlIGhhcyBzdGF5ZWQgZW1wdHkuXG4gICAgaWYgKGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlID09PSB2aWV3VmFsdWUgJiYgKHZpZXdWYWx1ZSAhPT0gJycgfHwgIWN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcblxuICAgIC8vIGNoYW5nZSB0byBkaXJ0eVxuICAgIGlmIChjdHJsLiRwcmlzdGluZSkge1xuICAgICAgdGhpcy4kc2V0RGlydHkoKTtcbiAgICB9XG4gICAgdGhpcy4kJHBhcnNlQW5kVmFsaWRhdGUoKTtcbiAgfTtcblxuICB0aGlzLiQkcGFyc2VBbmRWYWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICBwYXJzZXJWYWxpZCA9IGlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpID8gdW5kZWZpbmVkIDogdHJ1ZTtcblxuICAgIGlmIChwYXJzZXJWYWxpZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdHJsLiRwYXJzZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1vZGVsVmFsdWUgPSBjdHJsLiRwYXJzZXJzW2ldKG1vZGVsVmFsdWUpO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQobW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgICBwYXJzZXJWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc051bWJlcihjdHJsLiRtb2RlbFZhbHVlKSAmJiBpc05hTihjdHJsLiRtb2RlbFZhbHVlKSkge1xuICAgICAgLy8gY3RybC4kbW9kZWxWYWx1ZSBoYXMgbm90IGJlZW4gdG91Y2hlZCB5ZXQuLi5cbiAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBuZ01vZGVsR2V0KCRzY29wZSk7XG4gICAgfVxuICAgIHZhciBwcmV2TW9kZWxWYWx1ZSA9IGN0cmwuJG1vZGVsVmFsdWU7XG4gICAgdmFyIGFsbG93SW52YWxpZCA9IGN0cmwuJG9wdGlvbnMgJiYgY3RybC4kb3B0aW9ucy5hbGxvd0ludmFsaWQ7XG4gICAgY3RybC4kJHJhd01vZGVsVmFsdWUgPSBtb2RlbFZhbHVlO1xuXG4gICAgaWYgKGFsbG93SW52YWxpZCkge1xuICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpO1xuICAgIH1cblxuICAgIC8vIFBhc3MgdGhlICQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSBoZXJlLCBiZWNhdXNlIHRoZSBjYWNoZWQgdmlld1ZhbHVlIG1pZ2h0IGJlIG91dCBvZiBkYXRlLlxuICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiBlLmcuICRzZXRWaWV3VmFsdWUgaXMgY2FsbGVkIGZyb20gaW5zaWRlIGEgcGFyc2VyXG4gICAgY3RybC4kJHJ1blZhbGlkYXRvcnMobW9kZWxWYWx1ZSwgY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUsIGZ1bmN0aW9uKGFsbFZhbGlkKSB7XG4gICAgICBpZiAoIWFsbG93SW52YWxpZCkge1xuICAgICAgICAvLyBOb3RlOiBEb24ndCBjaGVjayBjdHJsLiR2YWxpZCBoZXJlLCBhcyB3ZSBjb3VsZCBoYXZlXG4gICAgICAgIC8vIGV4dGVybmFsIHZhbGlkYXRvcnMgKGUuZy4gY2FsY3VsYXRlZCBvbiB0aGUgc2VydmVyKSxcbiAgICAgICAgLy8gdGhhdCBqdXN0IGNhbGwgJHNldFZhbGlkaXR5IGFuZCBuZWVkIHRoZSBtb2RlbCB2YWx1ZVxuICAgICAgICAvLyB0byBjYWxjdWxhdGUgdGhlaXIgdmFsaWRpdHkuXG4gICAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBhbGxWYWxpZCA/IG1vZGVsVmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICAgIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpIHtcbiAgICAgIGlmIChjdHJsLiRtb2RlbFZhbHVlICE9PSBwcmV2TW9kZWxWYWx1ZSkge1xuICAgICAgICBjdHJsLiQkd3JpdGVNb2RlbFRvU2NvcGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy4kJHdyaXRlTW9kZWxUb1Njb3BlID0gZnVuY3Rpb24oKSB7XG4gICAgbmdNb2RlbFNldCgkc2NvcGUsIGN0cmwuJG1vZGVsVmFsdWUpO1xuICAgIGZvckVhY2goY3RybC4kdmlld0NoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVXBkYXRlIHRoZSB2aWV3IHZhbHVlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYSBjb250cm9sIHdhbnRzIHRvIGNoYW5nZSB0aGUgdmlldyB2YWx1ZTsgdHlwaWNhbGx5LFxuICAgKiB0aGlzIGlzIGRvbmUgZnJvbSB3aXRoaW4gYSBET00gZXZlbnQgaGFuZGxlci4gRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fVxuICAgKiBkaXJlY3RpdmUgY2FsbHMgaXQgd2hlbiB0aGUgdmFsdWUgb2YgdGhlIGlucHV0IGNoYW5nZXMgYW5kIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH1cbiAgICogY2FsbHMgaXQgd2hlbiBhbiBvcHRpb24gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIFdoZW4gYCRzZXRWaWV3VmFsdWVgIGlzIGNhbGxlZCwgdGhlIG5ldyBgdmFsdWVgIHdpbGwgYmUgc3RhZ2VkIGZvciBjb21taXR0aW5nIHRocm91Z2ggdGhlIGAkcGFyc2Vyc2BcbiAgICogYW5kIGAkdmFsaWRhdG9yc2AgcGlwZWxpbmVzLiBJZiB0aGVyZSBhcmUgbm8gc3BlY2lhbCB7QGxpbmsgbmdNb2RlbE9wdGlvbnN9IHNwZWNpZmllZCB0aGVuIHRoZSBzdGFnZWRcbiAgICogdmFsdWUgc2VudCBkaXJlY3RseSBmb3IgcHJvY2Vzc2luZywgZmluYWxseSB0byBiZSBhcHBsaWVkIHRvIGAkbW9kZWxWYWx1ZWAgYW5kIHRoZW4gdGhlXG4gICAqICoqZXhwcmVzc2lvbioqIHNwZWNpZmllZCBpbiB0aGUgYG5nLW1vZGVsYCBhdHRyaWJ1dGUuIExhc3RseSwgYWxsIHRoZSByZWdpc3RlcmVkIGNoYW5nZSBsaXN0ZW5lcnMsXG4gICAqIGluIHRoZSBgJHZpZXdDaGFuZ2VMaXN0ZW5lcnNgIGxpc3QsIGFyZSBjYWxsZWQuXG4gICAqXG4gICAqIEluIGNhc2UgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9IGRpcmVjdGl2ZSBpcyB1c2VkIHdpdGggYHVwZGF0ZU9uYFxuICAgKiBhbmQgdGhlIGBkZWZhdWx0YCB0cmlnZ2VyIGlzIG5vdCBsaXN0ZWQsIGFsbCB0aG9zZSBhY3Rpb25zIHdpbGwgcmVtYWluIHBlbmRpbmcgdW50aWwgb25lIG9mIHRoZVxuICAgKiBgdXBkYXRlT25gIGV2ZW50cyBpcyB0cmlnZ2VyZWQgb24gdGhlIERPTSBlbGVtZW50LlxuICAgKiBBbGwgdGhlc2UgYWN0aW9ucyB3aWxsIGJlIGRlYm91bmNlZCBpZiB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc31cbiAgICogZGlyZWN0aXZlIGlzIHVzZWQgd2l0aCBhIGN1c3RvbSBkZWJvdW5jZSBmb3IgdGhpcyBwYXJ0aWN1bGFyIGV2ZW50LlxuICAgKiBOb3RlIHRoYXQgYSBgJGRpZ2VzdGAgaXMgb25seSB0cmlnZ2VyZWQgb25jZSB0aGUgYHVwZGF0ZU9uYCBldmVudHMgYXJlIGZpcmVkLCBvciBpZiBgZGVib3VuY2VgXG4gICAqIGlzIHNwZWNpZmllZCwgb25jZSB0aGUgdGltZXIgcnVucyBvdXQuXG4gICAqXG4gICAqIFdoZW4gdXNlZCB3aXRoIHN0YW5kYXJkIGlucHV0cywgdGhlIHZpZXcgdmFsdWUgd2lsbCBhbHdheXMgYmUgYSBzdHJpbmcgKHdoaWNoIGlzIGluIHNvbWUgY2FzZXNcbiAgICogcGFyc2VkIGludG8gYW5vdGhlciB0eXBlLCBzdWNoIGFzIGEgYERhdGVgIG9iamVjdCBmb3IgYGlucHV0W2RhdGVdYC4pXG4gICAqIEhvd2V2ZXIsIGN1c3RvbSBjb250cm9scyBtaWdodCBhbHNvIHBhc3Mgb2JqZWN0cyB0byB0aGlzIG1ldGhvZC4gSW4gdGhpcyBjYXNlLCB3ZSBzaG91bGQgbWFrZVxuICAgKiBhIGNvcHkgb2YgdGhlIG9iamVjdCBiZWZvcmUgcGFzc2luZyBpdCB0byBgJHNldFZpZXdWYWx1ZWAuIFRoaXMgaXMgYmVjYXVzZSBgbmdNb2RlbGAgZG9lcyBub3RcbiAgICogcGVyZm9ybSBhIGRlZXAgd2F0Y2ggb2Ygb2JqZWN0cywgaXQgb25seSBsb29rcyBmb3IgYSBjaGFuZ2Ugb2YgaWRlbnRpdHkuIElmIHlvdSBvbmx5IGNoYW5nZVxuICAgKiB0aGUgcHJvcGVydHkgb2YgdGhlIG9iamVjdCB0aGVuIG5nTW9kZWwgd2lsbCBub3QgcmVhbGlzZSB0aGF0IHRoZSBvYmplY3QgaGFzIGNoYW5nZWQgYW5kXG4gICAqIHdpbGwgbm90IGludm9rZSB0aGUgYCRwYXJzZXJzYCBhbmQgYCR2YWxpZGF0b3JzYCBwaXBlbGluZXMuIEZvciB0aGlzIHJlYXNvbiwgeW91IHNob3VsZFxuICAgKiBub3QgY2hhbmdlIHByb3BlcnRpZXMgb2YgdGhlIGNvcHkgb25jZSBpdCBoYXMgYmVlbiBwYXNzZWQgdG8gYCRzZXRWaWV3VmFsdWVgLlxuICAgKiBPdGhlcndpc2UgeW91IG1heSBjYXVzZSB0aGUgbW9kZWwgdmFsdWUgb24gdGhlIHNjb3BlIHRvIGNoYW5nZSBpbmNvcnJlY3RseS5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAgICogSW4gYW55IGNhc2UsIHRoZSB2YWx1ZSBwYXNzZWQgdG8gdGhlIG1ldGhvZCBzaG91bGQgYWx3YXlzIHJlZmxlY3QgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICogb2YgdGhlIGNvbnRyb2wuIEZvciBleGFtcGxlLCBpZiB5b3UgYXJlIGNhbGxpbmcgYCRzZXRWaWV3VmFsdWVgIGZvciBhbiBpbnB1dCBlbGVtZW50LFxuICAgKiB5b3Ugc2hvdWxkIHBhc3MgdGhlIGlucHV0IERPTSB2YWx1ZS4gT3RoZXJ3aXNlLCB0aGUgY29udHJvbCBhbmQgdGhlIHNjb3BlIG1vZGVsIGJlY29tZVxuICAgKiBvdXQgb2Ygc3luYy4gSXQncyBhbHNvIGltcG9ydGFudCB0byBub3RlIHRoYXQgYCRzZXRWaWV3VmFsdWVgIGRvZXMgbm90IGNhbGwgYCRyZW5kZXJgIG9yIGNoYW5nZVxuICAgKiB0aGUgY29udHJvbCdzIERPTSB2YWx1ZSBpbiBhbnkgd2F5LiBJZiB3ZSB3YW50IHRvIGNoYW5nZSB0aGUgY29udHJvbCdzIERPTSB2YWx1ZVxuICAgKiBwcm9ncmFtbWF0aWNhbGx5LCB3ZSBzaG91bGQgdXBkYXRlIHRoZSBgbmdNb2RlbGAgc2NvcGUgZXhwcmVzc2lvbi4gSXRzIG5ldyB2YWx1ZSB3aWxsIGJlXG4gICAqIHBpY2tlZCB1cCBieSB0aGUgbW9kZWwgY29udHJvbGxlciwgd2hpY2ggd2lsbCBydW4gaXQgdGhyb3VnaCB0aGUgYCRmb3JtYXR0ZXJzYCwgYCRyZW5kZXJgIGl0XG4gICAqIHRvIHVwZGF0ZSB0aGUgRE9NLCBhbmQgZmluYWxseSBjYWxsIGAkdmFsaWRhdGVgIG9uIGl0LlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSB2YWx1ZSBmcm9tIHRoZSB2aWV3LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHJpZ2dlciBFdmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgdXBkYXRlLlxuICAgKi9cbiAgdGhpcy4kc2V0Vmlld1ZhbHVlID0gZnVuY3Rpb24odmFsdWUsIHRyaWdnZXIpIHtcbiAgICBjdHJsLiR2aWV3VmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAoIWN0cmwuJG9wdGlvbnMgfHwgY3RybC4kb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQpIHtcbiAgICAgIGN0cmwuJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdCh0cmlnZ2VyKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0ID0gZnVuY3Rpb24odHJpZ2dlcikge1xuICAgIHZhciBkZWJvdW5jZURlbGF5ID0gMCxcbiAgICAgICAgb3B0aW9ucyA9IGN0cmwuJG9wdGlvbnMsXG4gICAgICAgIGRlYm91bmNlO1xuXG4gICAgaWYgKG9wdGlvbnMgJiYgaXNEZWZpbmVkKG9wdGlvbnMuZGVib3VuY2UpKSB7XG4gICAgICBkZWJvdW5jZSA9IG9wdGlvbnMuZGVib3VuY2U7XG4gICAgICBpZiAoaXNOdW1iZXIoZGVib3VuY2UpKSB7XG4gICAgICAgIGRlYm91bmNlRGVsYXkgPSBkZWJvdW5jZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoZGVib3VuY2VbdHJpZ2dlcl0pKSB7XG4gICAgICAgIGRlYm91bmNlRGVsYXkgPSBkZWJvdW5jZVt0cmlnZ2VyXTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoZGVib3VuY2VbJ2RlZmF1bHQnXSkpIHtcbiAgICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlWydkZWZhdWx0J107XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHRpbWVvdXQuY2FuY2VsKHBlbmRpbmdEZWJvdW5jZSk7XG4gICAgaWYgKGRlYm91bmNlRGVsYXkpIHtcbiAgICAgIHBlbmRpbmdEZWJvdW5jZSA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBjdHJsLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICAgIH0sIGRlYm91bmNlRGVsYXkpO1xuICAgIH0gZWxzZSBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICBjdHJsLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgY3RybC4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gbW9kZWwgLT4gdmFsdWVcbiAgLy8gTm90ZTogd2UgY2Fubm90IHVzZSBhIG5vcm1hbCBzY29wZS4kd2F0Y2ggYXMgd2Ugd2FudCB0byBkZXRlY3QgdGhlIGZvbGxvd2luZzpcbiAgLy8gMS4gc2NvcGUgdmFsdWUgaXMgJ2EnXG4gIC8vIDIuIHVzZXIgZW50ZXJzICdiJ1xuICAvLyAzLiBuZy1jaGFuZ2Uga2lja3MgaW4gYW5kIHJldmVydHMgc2NvcGUgdmFsdWUgdG8gJ2EnXG4gIC8vICAgIC0+IHNjb3BlIHZhbHVlIGRpZCBub3QgY2hhbmdlIHNpbmNlIHRoZSBsYXN0IGRpZ2VzdCBhc1xuICAvLyAgICAgICBuZy1jaGFuZ2UgZXhlY3V0ZXMgaW4gYXBwbHkgcGhhc2VcbiAgLy8gNC4gdmlldyBzaG91bGQgYmUgY2hhbmdlZCBiYWNrIHRvICdhJ1xuICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG5nTW9kZWxXYXRjaCgpIHtcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IG5nTW9kZWxHZXQoJHNjb3BlKTtcblxuICAgIC8vIGlmIHNjb3BlIG1vZGVsIHZhbHVlIGFuZCBuZ01vZGVsIHZhbHVlIGFyZSBvdXQgb2Ygc3luY1xuICAgIC8vIFRPRE8ocGVyZik6IHdoeSBub3QgbW92ZSB0aGlzIHRvIHRoZSBhY3Rpb24gZm4/XG4gICAgaWYgKG1vZGVsVmFsdWUgIT09IGN0cmwuJG1vZGVsVmFsdWUgJiZcbiAgICAgICAvLyBjaGVja3MgZm9yIE5hTiBpcyBuZWVkZWQgdG8gYWxsb3cgc2V0dGluZyB0aGUgbW9kZWwgdG8gTmFOIHdoZW4gdGhlcmUncyBhbiBhc3luY1ZhbGlkYXRvclxuICAgICAgIChjdHJsLiRtb2RlbFZhbHVlID09PSBjdHJsLiRtb2RlbFZhbHVlIHx8IG1vZGVsVmFsdWUgPT09IG1vZGVsVmFsdWUpXG4gICAgKSB7XG4gICAgICBjdHJsLiRtb2RlbFZhbHVlID0gY3RybC4kJHJhd01vZGVsVmFsdWUgPSBtb2RlbFZhbHVlO1xuICAgICAgcGFyc2VyVmFsaWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBmb3JtYXR0ZXJzID0gY3RybC4kZm9ybWF0dGVycyxcbiAgICAgICAgICBpZHggPSBmb3JtYXR0ZXJzLmxlbmd0aDtcblxuICAgICAgdmFyIHZpZXdWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICB3aGlsZSAoaWR4LS0pIHtcbiAgICAgICAgdmlld1ZhbHVlID0gZm9ybWF0dGVyc1tpZHhdKHZpZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoY3RybC4kdmlld1ZhbHVlICE9PSB2aWV3VmFsdWUpIHtcbiAgICAgICAgY3RybC4kdmlld1ZhbHVlID0gY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUgPSB2aWV3VmFsdWU7XG4gICAgICAgIGN0cmwuJHJlbmRlcigpO1xuXG4gICAgICAgIGN0cmwuJCRydW5WYWxpZGF0b3JzKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgbm9vcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gIH0pO1xufV07XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vZGVsXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwcmlvcml0eSAxXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nTW9kZWxgIGRpcmVjdGl2ZSBiaW5kcyBhbiBgaW5wdXRgLGBzZWxlY3RgLCBgdGV4dGFyZWFgIChvciBjdXN0b20gZm9ybSBjb250cm9sKSB0byBhXG4gKiBwcm9wZXJ0eSBvbiB0aGUgc2NvcGUgdXNpbmcge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIgTmdNb2RlbENvbnRyb2xsZXJ9LFxuICogd2hpY2ggaXMgY3JlYXRlZCBhbmQgZXhwb3NlZCBieSB0aGlzIGRpcmVjdGl2ZS5cbiAqXG4gKiBgbmdNb2RlbGAgaXMgcmVzcG9uc2libGUgZm9yOlxuICpcbiAqIC0gQmluZGluZyB0aGUgdmlldyBpbnRvIHRoZSBtb2RlbCwgd2hpY2ggb3RoZXIgZGlyZWN0aXZlcyBzdWNoIGFzIGBpbnB1dGAsIGB0ZXh0YXJlYWAgb3IgYHNlbGVjdGBcbiAqICAgcmVxdWlyZS5cbiAqIC0gUHJvdmlkaW5nIHZhbGlkYXRpb24gYmVoYXZpb3IgKGkuZS4gcmVxdWlyZWQsIG51bWJlciwgZW1haWwsIHVybCkuXG4gKiAtIEtlZXBpbmcgdGhlIHN0YXRlIG9mIHRoZSBjb250cm9sICh2YWxpZC9pbnZhbGlkLCBkaXJ0eS9wcmlzdGluZSwgdG91Y2hlZC91bnRvdWNoZWQsIHZhbGlkYXRpb24gZXJyb3JzKS5cbiAqIC0gU2V0dGluZyByZWxhdGVkIGNzcyBjbGFzc2VzIG9uIHRoZSBlbGVtZW50IChgbmctdmFsaWRgLCBgbmctaW52YWxpZGAsIGBuZy1kaXJ0eWAsIGBuZy1wcmlzdGluZWAsIGBuZy10b3VjaGVkYCwgYG5nLXVudG91Y2hlZGApIGluY2x1ZGluZyBhbmltYXRpb25zLlxuICogLSBSZWdpc3RlcmluZyB0aGUgY29udHJvbCB3aXRoIGl0cyBwYXJlbnQge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGZvcm19LlxuICpcbiAqIE5vdGU6IGBuZ01vZGVsYCB3aWxsIHRyeSB0byBiaW5kIHRvIHRoZSBwcm9wZXJ0eSBnaXZlbiBieSBldmFsdWF0aW5nIHRoZSBleHByZXNzaW9uIG9uIHRoZVxuICogY3VycmVudCBzY29wZS4gSWYgdGhlIHByb3BlcnR5IGRvZXNuJ3QgYWxyZWFkeSBleGlzdCBvbiB0aGlzIHNjb3BlLCBpdCB3aWxsIGJlIGNyZWF0ZWRcbiAqIGltcGxpY2l0bHkgYW5kIGFkZGVkIHRvIHRoZSBzY29wZS5cbiAqXG4gKiBGb3IgYmVzdCBwcmFjdGljZXMgb24gdXNpbmcgYG5nTW9kZWxgLCBzZWU6XG4gKlxuICogIC0gW1VuZGVyc3RhbmRpbmcgU2NvcGVzXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3dpa2kvVW5kZXJzdGFuZGluZy1TY29wZXMpXG4gKlxuICogRm9yIGJhc2ljIGV4YW1wbGVzLCBob3cgdG8gdXNlIGBuZ01vZGVsYCwgc2VlOlxuICpcbiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXR9XG4gKiAgICAtIHtAbGluayBpbnB1dFt0ZXh0XSB0ZXh0fVxuICogICAgLSB7QGxpbmsgaW5wdXRbY2hlY2tib3hdIGNoZWNrYm94fVxuICogICAgLSB7QGxpbmsgaW5wdXRbcmFkaW9dIHJhZGlvfVxuICogICAgLSB7QGxpbmsgaW5wdXRbbnVtYmVyXSBudW1iZXJ9XG4gKiAgICAtIHtAbGluayBpbnB1dFtlbWFpbF0gZW1haWx9XG4gKiAgICAtIHtAbGluayBpbnB1dFt1cmxdIHVybH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2RhdGVdIGRhdGV9XG4gKiAgICAtIHtAbGluayBpbnB1dFtkYXRldGltZS1sb2NhbF0gZGF0ZXRpbWUtbG9jYWx9XG4gKiAgICAtIHtAbGluayBpbnB1dFt0aW1lXSB0aW1lfVxuICogICAgLSB7QGxpbmsgaW5wdXRbbW9udGhdIG1vbnRofVxuICogICAgLSB7QGxpbmsgaW5wdXRbd2Vla10gd2Vla31cbiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH1cbiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6dGV4dGFyZWEgdGV4dGFyZWF9XG4gKlxuICogIyBDU1MgY2xhc3Nlc1xuICogVGhlIGZvbGxvd2luZyBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQgb24gdGhlIGFzc29jaWF0ZWQgaW5wdXQvc2VsZWN0L3RleHRhcmVhIGVsZW1lbnRcbiAqIGRlcGVuZGluZyBvbiB0aGUgdmFsaWRpdHkgb2YgdGhlIG1vZGVsLlxuICpcbiAqICAtIGBuZy12YWxpZGA6IHRoZSBtb2RlbCBpcyB2YWxpZFxuICogIC0gYG5nLWludmFsaWRgOiB0aGUgbW9kZWwgaXMgaW52YWxpZFxuICogIC0gYG5nLXZhbGlkLVtrZXldYDogZm9yIGVhY2ggdmFsaWQga2V5IGFkZGVkIGJ5IGAkc2V0VmFsaWRpdHlgXG4gKiAgLSBgbmctaW52YWxpZC1ba2V5XWA6IGZvciBlYWNoIGludmFsaWQga2V5IGFkZGVkIGJ5IGAkc2V0VmFsaWRpdHlgXG4gKiAgLSBgbmctcHJpc3RpbmVgOiB0aGUgY29udHJvbCBoYXNuJ3QgYmVlbiBpbnRlcmFjdGVkIHdpdGggeWV0XG4gKiAgLSBgbmctZGlydHlgOiB0aGUgY29udHJvbCBoYXMgYmVlbiBpbnRlcmFjdGVkIHdpdGhcbiAqICAtIGBuZy10b3VjaGVkYDogdGhlIGNvbnRyb2wgaGFzIGJlZW4gYmx1cnJlZFxuICogIC0gYG5nLXVudG91Y2hlZGA6IHRoZSBjb250cm9sIGhhc24ndCBiZWVuIGJsdXJyZWRcbiAqICAtIGBuZy1wZW5kaW5nYDogYW55IGAkYXN5bmNWYWxpZGF0b3JzYCBhcmUgdW5mdWxmaWxsZWRcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBuZ0FuaW1hdGUgY2FuIGRldGVjdCBlYWNoIG9mIHRoZXNlIGNsYXNzZXMgd2hlbiBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqXG4gKiAjIyBBbmltYXRpb24gSG9va3NcbiAqXG4gKiBBbmltYXRpb25zIHdpdGhpbiBtb2RlbHMgYXJlIHRyaWdnZXJlZCB3aGVuIGFueSBvZiB0aGUgYXNzb2NpYXRlZCBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWRcbiAqIG9uIHRoZSBpbnB1dCBlbGVtZW50IHdoaWNoIGlzIGF0dGFjaGVkIHRvIHRoZSBtb2RlbC4gVGhlc2UgY2xhc3NlcyBhcmU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCxcbiAqIGAubmctaW52YWxpZGAgYW5kIGAubmctdmFsaWRgIGFzIHdlbGwgYXMgYW55IG90aGVyIHZhbGlkYXRpb25zIHRoYXQgYXJlIHBlcmZvcm1lZCBvbiB0aGUgbW9kZWwgaXRzZWxmLlxuICogVGhlIGFuaW1hdGlvbnMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdpdGhpbiBuZ01vZGVsIGFyZSBzaW1pbGFyIHRvIGhvdyB0aGV5IHdvcmsgaW4gbmdDbGFzcyBhbmRcbiAqIGFuaW1hdGlvbnMgY2FuIGJlIGhvb2tlZCBpbnRvIHVzaW5nIENTUyB0cmFuc2l0aW9ucywga2V5ZnJhbWVzIGFzIHdlbGwgYXMgSlMgYW5pbWF0aW9ucy5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgYSBzaW1wbGUgd2F5IHRvIHV0aWxpemUgQ1NTIHRyYW5zaXRpb25zIHRvIHN0eWxlIGFuIGlucHV0IGVsZW1lbnRcbiAqIHRoYXQgaGFzIGJlZW4gcmVuZGVyZWQgYXMgaW52YWxpZCBhZnRlciBpdCBoYXMgYmVlbiB2YWxpZGF0ZWQ6XG4gKlxuICogPHByZT5cbiAqIC8vYmUgc3VyZSB0byBpbmNsdWRlIG5nQW5pbWF0ZSBhcyBhIG1vZHVsZSB0byBob29rIGludG8gbW9yZVxuICogLy9hZHZhbmNlZCBhbmltYXRpb25zXG4gKiAubXktaW5wdXQge1xuICogICB0cmFuc2l0aW9uOjAuNXMgbGluZWFyIGFsbDtcbiAqICAgYmFja2dyb3VuZDogd2hpdGU7XG4gKiB9XG4gKiAubXktaW5wdXQubmctaW52YWxpZCB7XG4gKiAgIGJhY2tncm91bmQ6IHJlZDtcbiAqICAgY29sb3I6d2hpdGU7XG4gKiB9XG4gKiA8L3ByZT5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgZml4QmFzZT1cInRydWVcIiBtb2R1bGU9XCJpbnB1dEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnaW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS52YWwgPSAnMSc7XG4gICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxzdHlsZT5cbiAgICAgICAgIC5teS1pbnB1dCB7XG4gICAgICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgIH1cbiAgICAgICAgIC5teS1pbnB1dC5uZy1pbnZhbGlkIHtcbiAgICAgICAgICAgY29sb3I6d2hpdGU7XG4gICAgICAgICAgIGJhY2tncm91bmQ6IHJlZDtcbiAgICAgICAgIH1cbiAgICAgICA8L3N0eWxlPlxuICAgICAgIDxwIGlkPVwiaW5wdXREZXNjcmlwdGlvblwiPlxuICAgICAgICBVcGRhdGUgaW5wdXQgdG8gc2VlIHRyYW5zaXRpb25zIHdoZW4gdmFsaWQvaW52YWxpZC5cbiAgICAgICAgSW50ZWdlciBpcyBhIHZhbGlkIHZhbHVlLlxuICAgICAgIDwvcD5cbiAgICAgICA8Zm9ybSBuYW1lPVwidGVzdEZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInZhbFwiIG5nLXBhdHRlcm49XCIvXlxcZCskL1wiIG5hbWU9XCJhbmltXCIgY2xhc3M9XCJteS1pbnB1dFwiXG4gICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb25cIiAvPlxuICAgICAgIDwvZm9ybT5cbiAgICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqICMjIEJpbmRpbmcgdG8gYSBnZXR0ZXIvc2V0dGVyXG4gKlxuICogU29tZXRpbWVzIGl0J3MgaGVscGZ1bCB0byBiaW5kIGBuZ01vZGVsYCB0byBhIGdldHRlci9zZXR0ZXIgZnVuY3Rpb24uICBBIGdldHRlci9zZXR0ZXIgaXMgYVxuICogZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIHdoZW4gY2FsbGVkIHdpdGggemVybyBhcmd1bWVudHMsIGFuZCBzZXRzXG4gKiB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgYSBtb2RlbCB3aGVuIGNhbGxlZCB3aXRoIGFuIGFyZ3VtZW50LiBJdCdzIHNvbWV0aW1lcyB1c2VmdWwgdG8gdXNlIHRoaXNcbiAqIGZvciBtb2RlbHMgdGhhdCBoYXZlIGFuIGludGVybmFsIHJlcHJlc2VudGF0aW9uIHRoYXQncyBkaWZmZXJlbnQgZnJvbSB3aGF0IHRoZSBtb2RlbCBleHBvc2VzXG4gKiB0byB0aGUgdmlldy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPlxuICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgYmVzdCB0byBrZWVwIGdldHRlcnMgZmFzdCBiZWNhdXNlIEFuZ3VsYXIgaXMgbGlrZWx5IHRvIGNhbGwgdGhlbSBtb3JlXG4gKiBmcmVxdWVudGx5IHRoYW4gb3RoZXIgcGFydHMgb2YgeW91ciBjb2RlLlxuICogPC9kaXY+XG4gKlxuICogWW91IHVzZSB0aGlzIGJlaGF2aW9yIGJ5IGFkZGluZyBgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cImAgdG8gYW4gZWxlbWVudCB0aGF0XG4gKiBoYXMgYG5nLW1vZGVsYCBhdHRhY2hlZCB0byBpdC4gWW91IGNhbiBhbHNvIGFkZCBgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cImAgdG9cbiAqIGEgYDxmb3JtPmAsIHdoaWNoIHdpbGwgZW5hYmxlIHRoaXMgYmVoYXZpb3IgZm9yIGFsbCBgPGlucHV0PmBzIHdpdGhpbiBpdC4gU2VlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9uc2B9IGZvciBtb3JlLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBuZ01vZGVsYCB3aXRoIGEgZ2V0dGVyL3NldHRlcjpcbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWwtZ2V0dGVyLXNldHRlclwiIG1vZHVsZT1cImdldHRlclNldHRlckV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGZvcm0gbmFtZT1cInVzZXJGb3JtXCI+XG4gICAgICAgICAgIDxsYWJlbD5OYW1lOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cIiAvPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lKClcIj48L3NwYW4+PC9wcmU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdnZXR0ZXJTZXR0ZXJFeGFtcGxlJywgW10pXG4gICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICB2YXIgX25hbWUgPSAnQnJpYW4nO1xuICAgICAgICAgICAkc2NvcGUudXNlciA9IHtcbiAgICAgICAgICAgICBuYW1lOiBmdW5jdGlvbihuZXdOYW1lKSB7XG4gICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBuZXdOYW1lIGNhbiBiZSB1bmRlZmluZWQgZm9yIHR3byByZWFzb25zOlxuICAgICAgICAgICAgICAvLyAxLiBCZWNhdXNlIGl0IGlzIGNhbGxlZCBhcyBhIGdldHRlciBhbmQgdGh1cyBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHNcbiAgICAgICAgICAgICAgLy8gMi4gQmVjYXVzZSB0aGUgcHJvcGVydHkgc2hvdWxkIGFjdHVhbGx5IGJlIHNldCB0byB1bmRlZmluZWQuIFRoaXMgaGFwcGVucyBlLmcuIGlmIHRoZVxuICAgICAgICAgICAgICAvLyAgICBpbnB1dCBpcyBpbnZhbGlkXG4gICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF9uYW1lID0gbmV3TmFtZSkgOiBfbmFtZTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIH07XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nTW9kZWxEaXJlY3RpdmUgPSBbJyRyb290U2NvcGUnLCBmdW5jdGlvbigkcm9vdFNjb3BlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiBbJ25nTW9kZWwnLCAnXj9mb3JtJywgJ14/bmdNb2RlbE9wdGlvbnMnXSxcbiAgICBjb250cm9sbGVyOiBOZ01vZGVsQ29udHJvbGxlcixcbiAgICAvLyBQcmVsaW5rIG5lZWRzIHRvIHJ1biBiZWZvcmUgYW55IGlucHV0IGRpcmVjdGl2ZVxuICAgIC8vIHNvIHRoYXQgd2UgY2FuIHNldCB0aGUgTmdNb2RlbE9wdGlvbnMgaW4gTmdNb2RlbENvbnRyb2xsZXJcbiAgICAvLyBiZWZvcmUgYW55b25lIGVsc2UgdXNlcyBpdC5cbiAgICBwcmlvcml0eTogMSxcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ01vZGVsQ29tcGlsZShlbGVtZW50KSB7XG4gICAgICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sXG4gICAgICBlbGVtZW50LmFkZENsYXNzKFBSSVNUSU5FX0NMQVNTKS5hZGRDbGFzcyhVTlRPVUNIRURfQ0xBU1MpLmFkZENsYXNzKFZBTElEX0NMQVNTKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJlOiBmdW5jdGlvbiBuZ01vZGVsUHJlTGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAgICAgICB2YXIgbW9kZWxDdHJsID0gY3RybHNbMF0sXG4gICAgICAgICAgICAgIGZvcm1DdHJsID0gY3RybHNbMV0gfHwgbW9kZWxDdHJsLiQkcGFyZW50Rm9ybTtcblxuICAgICAgICAgIG1vZGVsQ3RybC4kJHNldE9wdGlvbnMoY3RybHNbMl0gJiYgY3RybHNbMl0uJG9wdGlvbnMpO1xuXG4gICAgICAgICAgLy8gbm90aWZ5IG90aGVycywgZXNwZWNpYWxseSBwYXJlbnQgZm9ybXNcbiAgICAgICAgICBmb3JtQ3RybC4kYWRkQ29udHJvbChtb2RlbEN0cmwpO1xuXG4gICAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAobW9kZWxDdHJsLiRuYW1lICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICBtb2RlbEN0cmwuJCRwYXJlbnRGb3JtLiQkcmVuYW1lQ29udHJvbChtb2RlbEN0cmwsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG1vZGVsQ3RybC4kJHBhcmVudEZvcm0uJHJlbW92ZUNvbnRyb2wobW9kZWxDdHJsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdDogZnVuY3Rpb24gbmdNb2RlbFBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgIHZhciBtb2RlbEN0cmwgPSBjdHJsc1swXTtcbiAgICAgICAgICBpZiAobW9kZWxDdHJsLiRvcHRpb25zICYmIG1vZGVsQ3RybC4kb3B0aW9ucy51cGRhdGVPbikge1xuICAgICAgICAgICAgZWxlbWVudC5vbihtb2RlbEN0cmwuJG9wdGlvbnMudXBkYXRlT24sIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgIG1vZGVsQ3RybC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KGV2ICYmIGV2LnR5cGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWxlbWVudC5vbignYmx1cicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICBpZiAobW9kZWxDdHJsLiR0b3VjaGVkKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhtb2RlbEN0cmwuJHNldFRvdWNoZWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KG1vZGVsQ3RybC4kc2V0VG91Y2hlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBERUZBVUxUX1JFR0VYUCA9IC8oXFxzK3xeKWRlZmF1bHQoXFxzK3wkKS87XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb2RlbE9wdGlvbnNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFsbG93cyB0dW5pbmcgaG93IG1vZGVsIHVwZGF0ZXMgYXJlIGRvbmUuIFVzaW5nIGBuZ01vZGVsT3B0aW9uc2AgeW91IGNhbiBzcGVjaWZ5IGEgY3VzdG9tIGxpc3Qgb2ZcbiAqIGV2ZW50cyB0aGF0IHdpbGwgdHJpZ2dlciBhIG1vZGVsIHVwZGF0ZSBhbmQvb3IgYSBkZWJvdW5jaW5nIGRlbGF5IHNvIHRoYXQgdGhlIGFjdHVhbCB1cGRhdGUgb25seVxuICogdGFrZXMgcGxhY2Ugd2hlbiBhIHRpbWVyIGV4cGlyZXM7IHRoaXMgdGltZXIgd2lsbCBiZSByZXNldCBhZnRlciBhbm90aGVyIGNoYW5nZSB0YWtlcyBwbGFjZS5cbiAqXG4gKiBHaXZlbiB0aGUgbmF0dXJlIG9mIGBuZ01vZGVsT3B0aW9uc2AsIHRoZSB2YWx1ZSBkaXNwbGF5ZWQgaW5zaWRlIGlucHV0IGZpZWxkcyBpbiB0aGUgdmlldyBtaWdodFxuICogYmUgZGlmZmVyZW50IGZyb20gdGhlIHZhbHVlIGluIHRoZSBhY3R1YWwgbW9kZWwuIFRoaXMgbWVhbnMgdGhhdCBpZiB5b3UgdXBkYXRlIHRoZSBtb2RlbCB5b3VcbiAqIHNob3VsZCBhbHNvIGludm9rZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBgJHJvbGxiYWNrVmlld1ZhbHVlYH0gb24gdGhlIHJlbGV2YW50IGlucHV0IGZpZWxkIGluXG4gKiBvcmRlciB0byBtYWtlIHN1cmUgaXQgaXMgc3luY2hyb25pemVkIHdpdGggdGhlIG1vZGVsIGFuZCB0aGF0IGFueSBkZWJvdW5jZWQgYWN0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIFRoZSBlYXNpZXN0IHdheSB0byByZWZlcmVuY2UgdGhlIGNvbnRyb2wncyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciBgJHJvbGxiYWNrVmlld1ZhbHVlYH1cbiAqIG1ldGhvZCBpcyBieSBtYWtpbmcgc3VyZSB0aGUgaW5wdXQgaXMgcGxhY2VkIGluc2lkZSBhIGZvcm0gdGhhdCBoYXMgYSBgbmFtZWAgYXR0cmlidXRlLiBUaGlzIGlzXG4gKiBpbXBvcnRhbnQgYmVjYXVzZSBgZm9ybWAgY29udHJvbGxlcnMgYXJlIHB1Ymxpc2hlZCB0byB0aGUgcmVsYXRlZCBzY29wZSB1bmRlciB0aGUgbmFtZSBpbiB0aGVpclxuICogYG5hbWVgIGF0dHJpYnV0ZS5cbiAqXG4gKiBBbnkgcGVuZGluZyBjaGFuZ2VzIHdpbGwgdGFrZSBwbGFjZSBpbW1lZGlhdGVseSB3aGVuIGFuIGVuY2xvc2luZyBmb3JtIGlzIHN1Ym1pdHRlZCB2aWEgdGhlXG4gKiBgc3VibWl0YCBldmVudC4gTm90ZSB0aGF0IGBuZ0NsaWNrYCBldmVudHMgd2lsbCBvY2N1ciBiZWZvcmUgdGhlIG1vZGVsIGlzIHVwZGF0ZWQuIFVzZSBgbmdTdWJtaXRgXG4gKiB0byBoYXZlIGFjY2VzcyB0byB0aGUgdXBkYXRlZCBtb2RlbC5cbiAqXG4gKiBgbmdNb2RlbE9wdGlvbnNgIGhhcyBhbiBlZmZlY3Qgb24gdGhlIGVsZW1lbnQgaXQncyBkZWNsYXJlZCBvbiBhbmQgaXRzIGRlc2NlbmRhbnRzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBuZ01vZGVsT3B0aW9ucyBvcHRpb25zIHRvIGFwcGx5IHRvIHRoZSBjdXJyZW50IG1vZGVsLiBWYWxpZCBrZXlzIGFyZTpcbiAqICAgLSBgdXBkYXRlT25gOiBzdHJpbmcgc3BlY2lmeWluZyB3aGljaCBldmVudCBzaG91bGQgdGhlIGlucHV0IGJlIGJvdW5kIHRvLiBZb3UgY2FuIHNldCBzZXZlcmFsXG4gKiAgICAgZXZlbnRzIHVzaW5nIGFuIHNwYWNlIGRlbGltaXRlZCBsaXN0LiBUaGVyZSBpcyBhIHNwZWNpYWwgZXZlbnQgY2FsbGVkIGBkZWZhdWx0YCB0aGF0XG4gKiAgICAgbWF0Y2hlcyB0aGUgZGVmYXVsdCBldmVudHMgYmVsb25naW5nIG9mIHRoZSBjb250cm9sLlxuICogICAtIGBkZWJvdW5jZWA6IGludGVnZXIgdmFsdWUgd2hpY2ggY29udGFpbnMgdGhlIGRlYm91bmNlIG1vZGVsIHVwZGF0ZSB2YWx1ZSBpbiBtaWxsaXNlY29uZHMuIEFcbiAqICAgICB2YWx1ZSBvZiAwIHRyaWdnZXJzIGFuIGltbWVkaWF0ZSB1cGRhdGUuIElmIGFuIG9iamVjdCBpcyBzdXBwbGllZCBpbnN0ZWFkLCB5b3UgY2FuIHNwZWNpZnkgYVxuICogICAgIGN1c3RvbSB2YWx1ZSBmb3IgZWFjaCBldmVudC4gRm9yIGV4YW1wbGU6XG4gKiAgICAgYG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnZGVmYXVsdCBibHVyJywgZGVib3VuY2U6IHsgJ2RlZmF1bHQnOiA1MDAsICdibHVyJzogMCB9IH1cImBcbiAqICAgLSBgYWxsb3dJbnZhbGlkYDogYm9vbGVhbiB2YWx1ZSB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgbW9kZWwgY2FuIGJlIHNldCB3aXRoIHZhbHVlcyB0aGF0IGRpZFxuICogICAgIG5vdCB2YWxpZGF0ZSBjb3JyZWN0bHkgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiBzZXR0aW5nIHRoZSBtb2RlbCB0byB1bmRlZmluZWQuXG4gKiAgIC0gYGdldHRlclNldHRlcmA6IGJvb2xlYW4gdmFsdWUgd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byB0cmVhdCBmdW5jdGlvbnMgYm91bmQgdG9cbiAgICAgICBgbmdNb2RlbGAgYXMgZ2V0dGVycy9zZXR0ZXJzLlxuICogICAtIGB0aW1lem9uZWA6IERlZmluZXMgdGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBmb3JcbiAqICAgICBgPGlucHV0IHR5cGU9XCJkYXRlXCI+YCwgYDxpbnB1dCB0eXBlPVwidGltZVwiPmAsIC4uLiAuIEl0IHVuZGVyc3RhbmRzIFVUQy9HTVQgYW5kIHRoZVxuICogICAgIGNvbnRpbmVudGFsIFVTIHRpbWUgem9uZSBhYmJyZXZpYXRpb25zLCBidXQgZm9yIGdlbmVyYWwgdXNlLCB1c2UgYSB0aW1lIHpvbmUgb2Zmc2V0LCBmb3JcbiAqICAgICBleGFtcGxlLCBgJyswNDMwJ2AgKDQgaG91cnMsIDMwIG1pbnV0ZXMgZWFzdCBvZiB0aGUgR3JlZW53aWNoIG1lcmlkaWFuKVxuICogICAgIElmIG5vdCBzcGVjaWZpZWQsIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3NlciB3aWxsIGJlIHVzZWQuXG4gKlxuICogQGV4YW1wbGVcblxuICBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIG92ZXJyaWRlIGltbWVkaWF0ZSB1cGRhdGVzLiBDaGFuZ2VzIG9uIHRoZSBpbnB1dHMgd2l0aGluIHRoZVxuICBmb3JtIHdpbGwgdXBkYXRlIHRoZSBtb2RlbCBvbmx5IHdoZW4gdGhlIGNvbnRyb2wgbG9zZXMgZm9jdXMgKGJsdXIgZXZlbnQpLiBJZiBgZXNjYXBlYCBrZXkgaXNcbiAgcHJlc3NlZCB3aGlsZSB0aGUgaW5wdXQgZmllbGQgaXMgZm9jdXNlZCwgdGhlIHZhbHVlIGlzIHJlc2V0IHRvIHRoZSB2YWx1ZSBpbiB0aGUgY3VycmVudCBtb2RlbC5cblxuICA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWJsdXJcIiBtb2R1bGU9XCJvcHRpb25zRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAgICAgICAgICA8bGFiZWw+TmFtZTpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnYmx1cicgfVwiXG4gICAgICAgICAgICAgICAgICAgbmcta2V5dXA9XCJjYW5jZWwoJGV2ZW50KVwiIC8+XG4gICAgICAgICAgPC9sYWJlbD48YnIgLz5cbiAgICAgICAgICA8bGFiZWw+T3RoZXIgZGF0YTpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlci5kYXRhXCIgLz5cbiAgICAgICAgICA8L2xhYmVsPjxiciAvPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgICAgPHByZT51c2VyLmRhdGEgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5kYXRhXCI+PC9zcGFuPjwvcHJlPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcHRpb25zRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS51c2VyID0geyBuYW1lOiAnSm9obicsIGRhdGE6ICcnIH07XG5cbiAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAyNykge1xuICAgICAgICAgICAgICAkc2NvcGUudXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXIubmFtZScpKTtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubmFtZScpKTtcbiAgICAgIHZhciBvdGhlciA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIuZGF0YScpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBhbGxvdyBjdXN0b20gZXZlbnRzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlucHV0LnNlbmRLZXlzKCcgRG9lJyk7XG4gICAgICAgIGlucHV0LmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0pvaG4nKTtcbiAgICAgICAgb3RoZXIuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9FcXVhbCgnSm9obiBEb2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkICRyb2xsYmFja1ZpZXdWYWx1ZSB3aGVuIG1vZGVsIGNoYW5nZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaW5wdXQuc2VuZEtleXMoJyBEb2UnKTtcbiAgICAgICAgZXhwZWN0KGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnSm9obiBEb2UnKTtcbiAgICAgICAgaW5wdXQuc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuRVNDQVBFKTtcbiAgICAgICAgZXhwZWN0KGlucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnSm9obicpO1xuICAgICAgICBvdGhlci5jbGljaygpO1xuICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS50b0VxdWFsKCdKb2huJyk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cblxuICBUaGlzIG9uZSBzaG93cyBob3cgdG8gZGVib3VuY2UgbW9kZWwgY2hhbmdlcy4gTW9kZWwgd2lsbCBiZSB1cGRhdGVkIG9ubHkgMSBzZWMgYWZ0ZXIgbGFzdCBjaGFuZ2UuXG4gIElmIHRoZSBgQ2xlYXJgIGJ1dHRvbiBpcyBwcmVzc2VkLCBhbnkgZGVib3VuY2VkIGFjdGlvbiBpcyBjYW5jZWxlZCBhbmQgdGhlIHZhbHVlIGJlY29tZXMgZW1wdHkuXG5cbiAgPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1kZWJvdW5jZVwiIG1vZHVsZT1cIm9wdGlvbnNFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICAgICAgICAgIDxsYWJlbD5OYW1lOlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gICAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgZGVib3VuY2U6IDEwMDAgfVwiIC8+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwidXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7IHVzZXIubmFtZT0nJ1wiPkNsZWFyPC9idXR0b24+XG4gICAgICAgICAgPGJyIC8+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lXCI+PC9zcGFuPjwvcHJlPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcHRpb25zRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS51c2VyID0geyBuYW1lOiAnSWdvcicgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuXG4gIFRoaXMgb25lIHNob3dzIGhvdyB0byBiaW5kIHRvIGdldHRlci9zZXR0ZXJzOlxuXG4gIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsT3B0aW9ucy1kaXJlY3RpdmUtZ2V0dGVyLXNldHRlclwiIG1vZHVsZT1cImdldHRlclNldHRlckV4YW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPGZvcm0gbmFtZT1cInVzZXJGb3JtXCI+XG4gICAgICAgICAgPGxhYmVsPk5hbWU6XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAgICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiIC8+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWUoKVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnZ2V0dGVyU2V0dGVyRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgIHZhciBfbmFtZSA9ICdCcmlhbic7XG4gICAgICAgICAgJHNjb3BlLnVzZXIgPSB7XG4gICAgICAgICAgICBuYW1lOiBmdW5jdGlvbihuZXdOYW1lKSB7XG4gICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBuZXdOYW1lIGNhbiBiZSB1bmRlZmluZWQgZm9yIHR3byByZWFzb25zOlxuICAgICAgICAgICAgICAvLyAxLiBCZWNhdXNlIGl0IGlzIGNhbGxlZCBhcyBhIGdldHRlciBhbmQgdGh1cyBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHNcbiAgICAgICAgICAgICAgLy8gMi4gQmVjYXVzZSB0aGUgcHJvcGVydHkgc2hvdWxkIGFjdHVhbGx5IGJlIHNldCB0byB1bmRlZmluZWQuIFRoaXMgaGFwcGVucyBlLmcuIGlmIHRoZVxuICAgICAgICAgICAgICAvLyAgICBpbnB1dCBpcyBpbnZhbGlkXG4gICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF9uYW1lID0gbmV3TmFtZSkgOiBfbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGF0dHJzJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHRoaXMuJG9wdGlvbnMgPSBjb3B5KCRzY29wZS4kZXZhbCgkYXR0cnMubmdNb2RlbE9wdGlvbnMpKTtcbiAgICAgIC8vIEFsbG93IGFkZGluZy9vdmVycmlkaW5nIGJvdW5kIGV2ZW50c1xuICAgICAgaWYgKGlzRGVmaW5lZCh0aGlzLiRvcHRpb25zLnVwZGF0ZU9uKSkge1xuICAgICAgICB0aGlzLiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IGZhbHNlO1xuICAgICAgICAvLyBleHRyYWN0IFwiZGVmYXVsdFwiIHBzZXVkby1ldmVudCBmcm9tIGxpc3Qgb2YgZXZlbnRzIHRoYXQgY2FuIHRyaWdnZXIgYSBtb2RlbCB1cGRhdGVcbiAgICAgICAgdGhpcy4kb3B0aW9ucy51cGRhdGVPbiA9IHRyaW0odGhpcy4kb3B0aW9ucy51cGRhdGVPbi5yZXBsYWNlKERFRkFVTFRfUkVHRVhQLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGF0LiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuICcgJztcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1dXG4gIH07XG59O1xuXG5cblxuLy8gaGVscGVyIG1ldGhvZHNcbmZ1bmN0aW9uIGFkZFNldFZhbGlkaXR5TWV0aG9kKGNvbnRleHQpIHtcbiAgdmFyIGN0cmwgPSBjb250ZXh0LmN0cmwsXG4gICAgICAkZWxlbWVudCA9IGNvbnRleHQuJGVsZW1lbnQsXG4gICAgICBjbGFzc0NhY2hlID0ge30sXG4gICAgICBzZXQgPSBjb250ZXh0LnNldCxcbiAgICAgIHVuc2V0ID0gY29udGV4dC51bnNldCxcbiAgICAgICRhbmltYXRlID0gY29udGV4dC4kYW5pbWF0ZTtcblxuICBjbGFzc0NhY2hlW0lOVkFMSURfQ0xBU1NdID0gIShjbGFzc0NhY2hlW1ZBTElEX0NMQVNTXSA9ICRlbGVtZW50Lmhhc0NsYXNzKFZBTElEX0NMQVNTKSk7XG5cbiAgY3RybC4kc2V0VmFsaWRpdHkgPSBzZXRWYWxpZGl0eTtcblxuICBmdW5jdGlvbiBzZXRWYWxpZGl0eSh2YWxpZGF0aW9uRXJyb3JLZXksIHN0YXRlLCBjb250cm9sbGVyKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHN0YXRlKSkge1xuICAgICAgY3JlYXRlQW5kU2V0KCckcGVuZGluZycsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVuc2V0QW5kQ2xlYW51cCgnJHBlbmRpbmcnLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgIH1cbiAgICBpZiAoIWlzQm9vbGVhbihzdGF0ZSkpIHtcbiAgICAgIHVuc2V0KGN0cmwuJGVycm9yLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgdW5zZXQoY3RybC4kJHN1Y2Nlc3MsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICB1bnNldChjdHJsLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgICAgc2V0KGN0cmwuJCRzdWNjZXNzLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0KGN0cmwuJGVycm9yLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgICB1bnNldChjdHJsLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGN0cmwuJHBlbmRpbmcpIHtcbiAgICAgIGNhY2hlZFRvZ2dsZUNsYXNzKFBFTkRJTkdfQ0xBU1MsIHRydWUpO1xuICAgICAgY3RybC4kdmFsaWQgPSBjdHJsLiRpbnZhbGlkID0gdW5kZWZpbmVkO1xuICAgICAgdG9nZ2xlVmFsaWRhdGlvbkNzcygnJywgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlZFRvZ2dsZUNsYXNzKFBFTkRJTkdfQ0xBU1MsIGZhbHNlKTtcbiAgICAgIGN0cmwuJHZhbGlkID0gaXNPYmplY3RFbXB0eShjdHJsLiRlcnJvcik7XG4gICAgICBjdHJsLiRpbnZhbGlkID0gIWN0cmwuJHZhbGlkO1xuICAgICAgdG9nZ2xlVmFsaWRhdGlvbkNzcygnJywgY3RybC4kdmFsaWQpO1xuICAgIH1cblxuICAgIC8vIHJlLXJlYWQgdGhlIHN0YXRlIGFzIHRoZSBzZXQvdW5zZXQgbWV0aG9kcyBjb3VsZCBoYXZlXG4gICAgLy8gY29tYmluZWQgc3RhdGUgaW4gY3RybC4kZXJyb3JbdmFsaWRhdGlvbkVycm9yXSAodXNlZCBmb3IgZm9ybXMpLFxuICAgIC8vIHdoZXJlIHNldHRpbmcvdW5zZXR0aW5nIG9ubHkgaW5jcmVtZW50cy9kZWNyZW1lbnRzIHRoZSB2YWx1ZSxcbiAgICAvLyBhbmQgZG9lcyBub3QgcmVwbGFjZSBpdC5cbiAgICB2YXIgY29tYmluZWRTdGF0ZTtcbiAgICBpZiAoY3RybC4kcGVuZGluZyAmJiBjdHJsLiRwZW5kaW5nW3ZhbGlkYXRpb25FcnJvcktleV0pIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmIChjdHJsLiRlcnJvclt2YWxpZGF0aW9uRXJyb3JLZXldKSB7XG4gICAgICBjb21iaW5lZFN0YXRlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChjdHJsLiQkc3VjY2Vzc1t2YWxpZGF0aW9uRXJyb3JLZXldKSB7XG4gICAgICBjb21iaW5lZFN0YXRlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdG9nZ2xlVmFsaWRhdGlvbkNzcyh2YWxpZGF0aW9uRXJyb3JLZXksIGNvbWJpbmVkU3RhdGUpO1xuICAgIGN0cmwuJCRwYXJlbnRGb3JtLiRzZXRWYWxpZGl0eSh2YWxpZGF0aW9uRXJyb3JLZXksIGNvbWJpbmVkU3RhdGUsIGN0cmwpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQW5kU2V0KG5hbWUsIHZhbHVlLCBjb250cm9sbGVyKSB7XG4gICAgaWYgKCFjdHJsW25hbWVdKSB7XG4gICAgICBjdHJsW25hbWVdID0ge307XG4gICAgfVxuICAgIHNldChjdHJsW25hbWVdLCB2YWx1ZSwgY29udHJvbGxlcik7XG4gIH1cblxuICBmdW5jdGlvbiB1bnNldEFuZENsZWFudXAobmFtZSwgdmFsdWUsIGNvbnRyb2xsZXIpIHtcbiAgICBpZiAoY3RybFtuYW1lXSkge1xuICAgICAgdW5zZXQoY3RybFtuYW1lXSwgdmFsdWUsIGNvbnRyb2xsZXIpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3RFbXB0eShjdHJsW25hbWVdKSkge1xuICAgICAgY3RybFtuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYWNoZWRUb2dnbGVDbGFzcyhjbGFzc05hbWUsIHN3aXRjaFZhbHVlKSB7XG4gICAgaWYgKHN3aXRjaFZhbHVlICYmICFjbGFzc0NhY2hlW2NsYXNzTmFtZV0pIHtcbiAgICAgICRhbmltYXRlLmFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgY2xhc3NDYWNoZVtjbGFzc05hbWVdID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFzd2l0Y2hWYWx1ZSAmJiBjbGFzc0NhY2hlW2NsYXNzTmFtZV0pIHtcbiAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgY2xhc3NDYWNoZVtjbGFzc05hbWVdID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlVmFsaWRhdGlvbkNzcyh2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JLZXkgPSB2YWxpZGF0aW9uRXJyb3JLZXkgPyAnLScgKyBzbmFrZV9jYXNlKHZhbGlkYXRpb25FcnJvcktleSwgJy0nKSA6ICcnO1xuXG4gICAgY2FjaGVkVG9nZ2xlQ2xhc3MoVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IHRydWUpO1xuICAgIGNhY2hlZFRvZ2dsZUNsYXNzKElOVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICBpZiAob2JqKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ05vbkJpbmRhYmxlXG4gKiBAcmVzdHJpY3QgQUNcbiAqIEBwcmlvcml0eSAxMDAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nTm9uQmluZGFibGVgIGRpcmVjdGl2ZSB0ZWxscyBBbmd1bGFyIG5vdCB0byBjb21waWxlIG9yIGJpbmQgdGhlIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50XG4gKiBET00gZWxlbWVudC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIGVsZW1lbnQgY29udGFpbnMgd2hhdCBhcHBlYXJzIHRvIGJlIEFuZ3VsYXIgZGlyZWN0aXZlcyBhbmRcbiAqIGJpbmRpbmdzIGJ1dCB3aGljaCBzaG91bGQgYmUgaWdub3JlZCBieSBBbmd1bGFyLiBUaGlzIGNvdWxkIGJlIHRoZSBjYXNlIGlmIHlvdSBoYXZlIGEgc2l0ZSB0aGF0XG4gKiBkaXNwbGF5cyBzbmlwcGV0cyBvZiBjb2RlLCBmb3IgaW5zdGFuY2UuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAqIEluIHRoaXMgZXhhbXBsZSB0aGVyZSBhcmUgdHdvIGxvY2F0aW9ucyB3aGVyZSBhIHNpbXBsZSBpbnRlcnBvbGF0aW9uIGJpbmRpbmcgKGB7e319YCkgaXMgcHJlc2VudCxcbiAqIGJ1dCB0aGUgb25lIHdyYXBwZWQgaW4gYG5nTm9uQmluZGFibGVgIGlzIGxlZnQgYWxvbmUuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxkaXY+Tm9ybWFsOiB7ezEgKyAyfX08L2Rpdj5cbiAgICAgICAgPGRpdiBuZy1ub24tYmluZGFibGU+SWdub3JlZDoge3sxICsgMn19PC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1ub24tYmluZGFibGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJzEgKyAyJykpLmdldFRleHQoKSkudG9Db250YWluKCczJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudC5hbGwoYnkuY3NzKCdkaXYnKSkubGFzdCgpLmdldFRleHQoKSkudG9NYXRjaCgvMSBcXCsgMi8pO1xuICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nTm9uQmluZGFibGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7IHRlcm1pbmFsOiB0cnVlLCBwcmlvcml0eTogMTAwMCB9KTtcblxuLyogZ2xvYmFsIGpxTGl0ZVJlbW92ZSAqL1xuXG52YXIgbmdPcHRpb25zTWluRXJyID0gbWluRXJyKCduZ09wdGlvbnMnKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ09wdGlvbnNcbiAqIEByZXN0cmljdCBBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGBuZ09wdGlvbnNgIGF0dHJpYnV0ZSBjYW4gYmUgdXNlZCB0byBkeW5hbWljYWxseSBnZW5lcmF0ZSBhIGxpc3Qgb2YgYDxvcHRpb24+YFxuICogZWxlbWVudHMgZm9yIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQgdXNpbmcgdGhlIGFycmF5IG9yIG9iamVjdCBvYnRhaW5lZCBieSBldmFsdWF0aW5nIHRoZVxuICogYG5nT3B0aW9uc2AgY29tcHJlaGVuc2lvbiBleHByZXNzaW9uLlxuICpcbiAqIEluIG1hbnkgY2FzZXMsIGBuZ1JlcGVhdGAgY2FuIGJlIHVzZWQgb24gYDxvcHRpb24+YCBlbGVtZW50cyBpbnN0ZWFkIG9mIGBuZ09wdGlvbnNgIHRvIGFjaGlldmUgYVxuICogc2ltaWxhciByZXN1bHQuIEhvd2V2ZXIsIGBuZ09wdGlvbnNgIHByb3ZpZGVzIHNvbWUgYmVuZWZpdHMgc3VjaCBhcyByZWR1Y2luZyBtZW1vcnkgYW5kXG4gKiBpbmNyZWFzaW5nIHNwZWVkIGJ5IG5vdCBjcmVhdGluZyBhIG5ldyBzY29wZSBmb3IgZWFjaCByZXBlYXRlZCBpbnN0YW5jZSwgYXMgd2VsbCBhcyBwcm92aWRpbmdcbiAqIG1vcmUgZmxleGliaWxpdHkgaW4gaG93IHRoZSBgPHNlbGVjdD5gJ3MgbW9kZWwgaXMgYXNzaWduZWQgdmlhIHRoZSBgc2VsZWN0YCAqKmBhc2AqKiBwYXJ0IG9mIHRoZVxuICogY29tcHJlaGVuc2lvbiBleHByZXNzaW9uLiBgbmdPcHRpb25zYCBzaG91bGQgYmUgdXNlZCB3aGVuIHRoZSBgPHNlbGVjdD5gIG1vZGVsIG5lZWRzIHRvIGJlIGJvdW5kXG4gKiAgdG8gYSBub24tc3RyaW5nIHZhbHVlLiBUaGlzIGlzIGJlY2F1c2UgYW4gb3B0aW9uIGVsZW1lbnQgY2FuIG9ubHkgYmUgYm91bmQgdG8gc3RyaW5nIHZhbHVlcyBhdFxuICogcHJlc2VudC5cbiAqXG4gKiBXaGVuIGFuIGl0ZW0gaW4gdGhlIGA8c2VsZWN0PmAgbWVudSBpcyBzZWxlY3RlZCwgdGhlIGFycmF5IGVsZW1lbnQgb3Igb2JqZWN0IHByb3BlcnR5XG4gKiByZXByZXNlbnRlZCBieSB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIGlkZW50aWZpZWQgYnkgdGhlIGBuZ01vZGVsYFxuICogZGlyZWN0aXZlLlxuICpcbiAqIE9wdGlvbmFsbHksIGEgc2luZ2xlIGhhcmQtY29kZWQgYDxvcHRpb24+YCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLCBjYW5cbiAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgXCJub3Qgc2VsZWN0ZWRcIlxuICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi5cbiAqXG4gKiAjIyBDb21wbGV4IE1vZGVscyAob2JqZWN0cyBvciBjb2xsZWN0aW9ucylcbiAqXG4gKiBCeSBkZWZhdWx0LCBgbmdNb2RlbGAgd2F0Y2hlcyB0aGUgbW9kZWwgYnkgcmVmZXJlbmNlLCBub3QgdmFsdWUuIFRoaXMgaXMgaW1wb3J0YW50IHRvIGtub3cgd2hlblxuICogYmluZGluZyB0aGUgc2VsZWN0IHRvIGEgbW9kZWwgdGhhdCBpcyBhbiBvYmplY3Qgb3IgYSBjb2xsZWN0aW9uLlxuICpcbiAqIE9uZSBpc3N1ZSBvY2N1cnMgaWYgeW91IHdhbnQgdG8gcHJlc2VsZWN0IGFuIG9wdGlvbi4gRm9yIGV4YW1wbGUsIGlmIHlvdSBzZXRcbiAqIHRoZSBtb2RlbCB0byBhbiBvYmplY3QgdGhhdCBpcyBlcXVhbCB0byBhbiBvYmplY3QgaW4geW91ciBjb2xsZWN0aW9uLCBgbmdPcHRpb25zYCB3b24ndCBiZSBhYmxlIHRvIHNldCB0aGUgc2VsZWN0aW9uLFxuICogYmVjYXVzZSB0aGUgb2JqZWN0cyBhcmUgbm90IGlkZW50aWNhbC4gU28gYnkgZGVmYXVsdCwgeW91IHNob3VsZCBhbHdheXMgcmVmZXJlbmNlIHRoZSBpdGVtIGluIHlvdXIgY29sbGVjdGlvblxuICogZm9yIHByZXNlbGVjdGlvbnMsIGUuZy46IGAkc2NvcGUuc2VsZWN0ZWQgPSAkc2NvcGUuY29sbGVjdGlvblszXWAuXG4gKlxuICogQW5vdGhlciBzb2x1dGlvbiBpcyB0byB1c2UgYSBgdHJhY2sgYnlgIGNsYXVzZSwgYmVjYXVzZSB0aGVuIGBuZ09wdGlvbnNgIHdpbGwgdHJhY2sgdGhlIGlkZW50aXR5XG4gKiBvZiB0aGUgaXRlbSBub3QgYnkgcmVmZXJlbmNlLCBidXQgYnkgdGhlIHJlc3VsdCBvZiB0aGUgYHRyYWNrIGJ5YCBleHByZXNzaW9uLiBGb3IgZXhhbXBsZSwgaWYgeW91clxuICogY29sbGVjdGlvbiBpdGVtcyBoYXZlIGFuIGlkIHByb3BlcnR5LCB5b3Ugd291bGQgYHRyYWNrIGJ5IGl0ZW0uaWRgLlxuICpcbiAqIEEgZGlmZmVyZW50IGlzc3VlIHdpdGggb2JqZWN0cyBvciBjb2xsZWN0aW9ucyBpcyB0aGF0IG5nTW9kZWwgd29uJ3QgZGV0ZWN0IGlmIGFuIG9iamVjdCBwcm9wZXJ0eSBvclxuICogYSBjb2xsZWN0aW9uIGl0ZW0gY2hhbmdlcy4gRm9yIHRoYXQgcmVhc29uLCBgbmdPcHRpb25zYCBhZGRpdGlvbmFsbHkgd2F0Y2hlcyB0aGUgbW9kZWwgdXNpbmdcbiAqIGAkd2F0Y2hDb2xsZWN0aW9uYCwgd2hlbiB0aGUgZXhwcmVzc2lvbiBjb250YWlucyBhIGB0cmFjayBieWAgY2xhdXNlIG9yIHRoZSB0aGUgc2VsZWN0IGhhcyB0aGUgYG11bHRpcGxlYCBhdHRyaWJ1dGUuXG4gKiBUaGlzIGFsbG93cyBuZ09wdGlvbnMgdG8gdHJpZ2dlciBhIHJlLXJlbmRlcmluZyBvZiB0aGUgb3B0aW9ucyBldmVuIGlmIHRoZSBhY3R1YWwgb2JqZWN0L2NvbGxlY3Rpb25cbiAqIGhhcyBub3QgY2hhbmdlZCBpZGVudGl0eSwgYnV0IG9ubHkgYSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0IG9yIGFuIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb24gY2hhbmdlcy5cbiAqXG4gKiBOb3RlIHRoYXQgYCR3YXRjaENvbGxlY3Rpb25gIGRvZXMgYSBzaGFsbG93IGNvbXBhcmlzb24gb2YgdGhlIHByb3BlcnRpZXMgb2YgdGhlIG9iamVjdCAob3IgdGhlIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uXG4gKiBpZiB0aGUgbW9kZWwgaXMgYW4gYXJyYXkpLiBUaGlzIG1lYW5zIHRoYXQgY2hhbmdpbmcgYSBwcm9wZXJ0eSBkZWVwZXIgdGhhbiB0aGUgZmlyc3QgbGV2ZWwgaW5zaWRlIHRoZVxuICogb2JqZWN0L2NvbGxlY3Rpb24gd2lsbCBub3QgdHJpZ2dlciBhIHJlLXJlbmRlcmluZy5cbiAqXG4gKiAjIyBgc2VsZWN0YCAqKmBhc2AqKlxuICpcbiAqIFVzaW5nIGBzZWxlY3RgICoqYGFzYCoqIHdpbGwgYmluZCB0aGUgcmVzdWx0IG9mIHRoZSBgc2VsZWN0YCBleHByZXNzaW9uIHRvIHRoZSBtb2RlbCwgYnV0XG4gKiB0aGUgdmFsdWUgb2YgdGhlIGA8c2VsZWN0PmAgYW5kIGA8b3B0aW9uPmAgaHRtbCBlbGVtZW50cyB3aWxsIGJlIGVpdGhlciB0aGUgaW5kZXggKGZvciBhcnJheSBkYXRhIHNvdXJjZXMpXG4gKiBvciBwcm9wZXJ0eSBuYW1lIChmb3Igb2JqZWN0IGRhdGEgc291cmNlcykgb2YgdGhlIHZhbHVlIHdpdGhpbiB0aGUgY29sbGVjdGlvbi4gSWYgYSAqKmB0cmFjayBieWAqKiBleHByZXNzaW9uXG4gKiBpcyB1c2VkLCB0aGUgcmVzdWx0IG9mIHRoYXQgZXhwcmVzc2lvbiB3aWxsIGJlIHNldCBhcyB0aGUgdmFsdWUgb2YgdGhlIGBvcHRpb25gIGFuZCBgc2VsZWN0YCBlbGVtZW50cy5cbiAqXG4gKlxuICogIyMjIGBzZWxlY3RgICoqYGFzYCoqIGFuZCAqKmB0cmFjayBieWAqKlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiBCZSBjYXJlZnVsIHdoZW4gdXNpbmcgYHNlbGVjdGAgKipgYXNgKiogYW5kICoqYHRyYWNrIGJ5YCoqIGluIHRoZSBzYW1lIGV4cHJlc3Npb24uXG4gKiA8L2Rpdj5cbiAqXG4gKiBHaXZlbiB0aGlzIGFycmF5IG9mIGl0ZW1zIG9uIHRoZSAkc2NvcGU6XG4gKlxuICogYGBganNcbiAqICRzY29wZS5pdGVtcyA9IFt7XG4gKiAgIGlkOiAxLFxuICogICBsYWJlbDogJ2FMYWJlbCcsXG4gKiAgIHN1Ykl0ZW06IHsgbmFtZTogJ2FTdWJJdGVtJyB9XG4gKiB9LCB7XG4gKiAgIGlkOiAyLFxuICogICBsYWJlbDogJ2JMYWJlbCcsXG4gKiAgIHN1Ykl0ZW06IHsgbmFtZTogJ2JTdWJJdGVtJyB9XG4gKiB9XTtcbiAqIGBgYFxuICpcbiAqIFRoaXMgd2lsbCB3b3JrOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxzZWxlY3Qgbmctb3B0aW9ucz1cIml0ZW0gYXMgaXRlbS5sYWJlbCBmb3IgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkXCIgbmctbW9kZWw9XCJzZWxlY3RlZFwiPjwvc2VsZWN0PlxuICogYGBgXG4gKiBgYGBqc1xuICogJHNjb3BlLnNlbGVjdGVkID0gJHNjb3BlLml0ZW1zWzBdO1xuICogYGBgXG4gKlxuICogYnV0IHRoaXMgd2lsbCBub3Qgd29yazpcbiAqXG4gKiBgYGBodG1sXG4gKiA8c2VsZWN0IG5nLW9wdGlvbnM9XCJpdGVtLnN1Ykl0ZW0gYXMgaXRlbS5sYWJlbCBmb3IgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkXCIgbmctbW9kZWw9XCJzZWxlY3RlZFwiPjwvc2VsZWN0PlxuICogYGBgXG4gKiBgYGBqc1xuICogJHNjb3BlLnNlbGVjdGVkID0gJHNjb3BlLml0ZW1zWzBdLnN1Ykl0ZW07XG4gKiBgYGBcbiAqXG4gKiBJbiBib3RoIGV4YW1wbGVzLCB0aGUgKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvbiBpcyBhcHBsaWVkIHN1Y2Nlc3NmdWxseSB0byBlYWNoIGBpdGVtYCBpbiB0aGVcbiAqIGBpdGVtc2AgYXJyYXkuIEJlY2F1c2UgdGhlIHNlbGVjdGVkIG9wdGlvbiBoYXMgYmVlbiBzZXQgcHJvZ3JhbW1hdGljYWxseSBpbiB0aGUgY29udHJvbGxlciwgdGhlXG4gKiAqKmB0cmFjayBieWAqKiBleHByZXNzaW9uIGlzIGFsc28gYXBwbGllZCB0byB0aGUgYG5nTW9kZWxgIHZhbHVlLiBJbiB0aGUgZmlyc3QgZXhhbXBsZSwgdGhlXG4gKiBgbmdNb2RlbGAgdmFsdWUgaXMgYGl0ZW1zWzBdYCBhbmQgdGhlICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGBpdGVtc1swXS5pZGAgd2l0aFxuICogbm8gaXNzdWUuIEluIHRoZSBzZWNvbmQgZXhhbXBsZSwgdGhlIGBuZ01vZGVsYCB2YWx1ZSBpcyBgaXRlbXNbMF0uc3ViSXRlbWAgYW5kIHRoZSAqKmB0cmFjayBieWAqKlxuICogZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYGl0ZW1zWzBdLnN1Ykl0ZW0uaWRgICh3aGljaCBpcyB1bmRlZmluZWQpLiBBcyBhIHJlc3VsdCwgdGhlIG1vZGVsIHZhbHVlXG4gKiBpcyBub3QgbWF0Y2hlZCBhZ2FpbnN0IGFueSBgPG9wdGlvbj5gIGFuZCB0aGUgYDxzZWxlY3Q+YCBhcHBlYXJzIGFzIGhhdmluZyBubyBzZWxlY3RlZCB2YWx1ZS5cbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBUaGUgY29udHJvbCBpcyBjb25zaWRlcmVkIHZhbGlkIG9ubHkgaWYgdmFsdWUgaXMgZW50ZXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICogQHBhcmFtIHtjb21wcmVoZW5zaW9uX2V4cHJlc3Npb249fSBuZ09wdGlvbnMgaW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgZm9ybXM6XG4gKlxuICogICAqIGZvciBhcnJheSBkYXRhIHNvdXJjZXM6XG4gKiAgICAgKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICogICAgICogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYFxuICogICAgICogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcbiAqICAgICAqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCB8IG9yZGVyQnk6YG9yZGVyZXhwcmAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcbiAqICAgICAgICAoZm9yIGluY2x1ZGluZyBhIGZpbHRlciB3aXRoIGB0cmFjayBieWApXG4gKiAgICogZm9yIG9iamVjdCBkYXRhIHNvdXJjZXM6XG4gKiAgICAgKiBgbGFiZWxgICoqYGZvciAoYCoqYGtleWAgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3IgKGAqKmBrZXlgICoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3IgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgICoqYGZvciAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGBcbiAqICAgICAgICAgKipgZm9yYCBgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgXG4gKiAgICAgICAgICoqYGZvcmAgYChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqXG4gKiBXaGVyZTpcbiAqXG4gKiAgICogYGFycmF5YCAvIGBvYmplY3RgOiBhbiBleHByZXNzaW9uIHdoaWNoIGV2YWx1YXRlcyB0byBhbiBhcnJheSAvIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiAgICogYHZhbHVlYDogbG9jYWwgdmFyaWFibGUgd2hpY2ggd2lsbCByZWZlciB0byBlYWNoIGl0ZW0gaW4gdGhlIGBhcnJheWAgb3IgZWFjaCBwcm9wZXJ0eSB2YWx1ZVxuICogICAgICBvZiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICogICAqIGBrZXlgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGEgcHJvcGVydHkgbmFtZSBpbiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICogICAqIGBsYWJlbGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdGhlIGxhYmVsIGZvciBgPG9wdGlvbj5gIGVsZW1lbnQuIFRoZVxuICogICAgIGBleHByZXNzaW9uYCB3aWxsIG1vc3QgbGlrZWx5IHJlZmVyIHRvIHRoZSBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS5cbiAqICAgKiBgc2VsZWN0YDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSBib3VuZCB0byB0aGUgbW9kZWwgb2YgdGhlIHBhcmVudCBgPHNlbGVjdD5gXG4gKiAgICAgIGVsZW1lbnQuIElmIG5vdCBzcGVjaWZpZWQsIGBzZWxlY3RgIGV4cHJlc3Npb24gd2lsbCBkZWZhdWx0IHRvIGB2YWx1ZWAuXG4gKiAgICogYGdyb3VwYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB1c2VkIHRvIGdyb3VwIG9wdGlvbnMgdXNpbmcgdGhlIGA8b3B0Z3JvdXA+YFxuICogICAgICBET00gZWxlbWVudC5cbiAqICAgKiBgZGlzYWJsZWA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdXNlZCB0byBkaXNhYmxlIHRoZSByZW5kZXJlZCBgPG9wdGlvbj5gXG4gKiAgICAgIGVsZW1lbnQuIFJldHVybiBgdHJ1ZWAgdG8gZGlzYWJsZS5cbiAqICAgKiBgdHJhY2tleHByYDogVXNlZCB3aGVuIHdvcmtpbmcgd2l0aCBhbiBhcnJheSBvZiBvYmplY3RzLiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlXG4gKiAgICAgIHVzZWQgdG8gaWRlbnRpZnkgdGhlIG9iamVjdHMgaW4gdGhlIGFycmF5LiBUaGUgYHRyYWNrZXhwcmAgd2lsbCBtb3N0IGxpa2VseSByZWZlciB0byB0aGVcbiAqICAgICBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS4gV2l0aCB0aGlzIHRoZSBzZWxlY3Rpb24gaXMgcHJlc2VydmVkXG4gKiAgICAgIGV2ZW4gd2hlbiB0aGUgb3B0aW9ucyBhcmUgcmVjcmVhdGVkIChlLmcuIHJlbG9hZGVkIGZyb20gdGhlIHNlcnZlcikuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJzZWxlY3RFeGFtcGxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICBhbmd1bGFyLm1vZHVsZSgnc2VsZWN0RXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUuY29sb3JzID0gW1xuICAgICAgICAgICAgICB7bmFtZTonYmxhY2snLCBzaGFkZTonZGFyayd9LFxuICAgICAgICAgICAgICB7bmFtZTond2hpdGUnLCBzaGFkZTonbGlnaHQnLCBub3RBbk9wdGlvbjogdHJ1ZX0sXG4gICAgICAgICAgICAgIHtuYW1lOidyZWQnLCBzaGFkZTonZGFyayd9LFxuICAgICAgICAgICAgICB7bmFtZTonYmx1ZScsIHNoYWRlOidkYXJrJywgbm90QW5PcHRpb246IHRydWV9LFxuICAgICAgICAgICAgICB7bmFtZToneWVsbG93Jywgc2hhZGU6J2xpZ2h0Jywgbm90QW5PcHRpb246IGZhbHNlfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICRzY29wZS5teUNvbG9yID0gJHNjb3BlLmNvbG9yc1syXTsgLy8gcmVkXG4gICAgICAgICAgfV0pO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICA8dWw+XG4gICAgICAgICAgICA8bGkgbmctcmVwZWF0PVwiY29sb3IgaW4gY29sb3JzXCI+XG4gICAgICAgICAgICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgbmctbW9kZWw9XCJjb2xvci5uYW1lXCI+PC9sYWJlbD5cbiAgICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNvbG9yLm5vdEFuT3B0aW9uXCI+IERpc2FibGVkPzwvbGFiZWw+XG4gICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjb2xvcnMuc3BsaWNlKCRpbmRleCwgMSlcIiBhcmlhLWxhYmVsPVwiUmVtb3ZlXCI+WDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNvbG9ycy5wdXNoKHt9KVwiPmFkZDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDxoci8+XG4gICAgICAgICAgPGxhYmVsPkNvbG9yIChudWxsIG5vdCBhbGxvd2VkKTpcbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPjwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICA8bGFiZWw+Q29sb3IgKG51bGwgYWxsb3dlZCk6XG4gICAgICAgICAgPHNwYW4gIGNsYXNzPVwibnVsbGFibGVcIj5cbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0gY2hvb3NlIGNvbG9yIC0tPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L3NwYW4+PC9sYWJlbD48YnIvPlxuXG4gICAgICAgICAgPGxhYmVsPkNvbG9yIGdyb3VwZWQgYnkgc2hhZGU6XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiIG5nLW9wdGlvbnM9XCJjb2xvci5uYW1lIGdyb3VwIGJ5IGNvbG9yLnNoYWRlIGZvciBjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+PGJyLz5cblxuICAgICAgICAgIDxsYWJlbD5Db2xvciBncm91cGVkIGJ5IHNoYWRlLCB3aXRoIHNvbWUgZGlzYWJsZWQ6XG4gICAgICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibXlDb2xvclwiXG4gICAgICAgICAgICAgICAgICBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBncm91cCBieSBjb2xvci5zaGFkZSBkaXNhYmxlIHdoZW4gY29sb3Iubm90QW5PcHRpb24gZm9yIGNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9sYWJlbD48YnIvPlxuXG5cblxuICAgICAgICAgIFNlbGVjdCA8YnV0dG9uIG5nLWNsaWNrPVwibXlDb2xvciA9IHsgbmFtZTonbm90IGluIGxpc3QnLCBzaGFkZTogJ290aGVyJyB9XCI+Ym9ndXM8L2J1dHRvbj4uXG4gICAgICAgICAgPGJyLz5cbiAgICAgICAgICA8aHIvPlxuICAgICAgICAgIEN1cnJlbnRseSBzZWxlY3RlZDoge3sge3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9IH19XG4gICAgICAgICAgPGRpdiBzdHlsZT1cImJvcmRlcjpzb2xpZCAxcHggYmxhY2s7IGhlaWdodDoyMHB4XCJcbiAgICAgICAgICAgICAgIG5nLXN0eWxlPVwieydiYWNrZ3JvdW5kLWNvbG9yJzpteUNvbG9yLm5hbWV9XCI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1vcHRpb25zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ3JlZCcpO1xuICAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXlDb2xvcicpKS5maXJzdCgpLmNsaWNrKCk7XG4gICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LmNzcygnc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdibGFjaycpO1xuICAgICAgICAgICBlbGVtZW50KGJ5LmNzcygnLm51bGxhYmxlIHNlbGVjdFtuZy1tb2RlbD1cIm15Q29sb3JcIl0nKSkuY2xpY2soKTtcbiAgICAgICAgICAgZWxlbWVudC5hbGwoYnkuY3NzKCcubnVsbGFibGUgc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXSBvcHRpb24nKSkuZmlyc3QoKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0nKSkuZ2V0VGV4dCgpKS50b01hdGNoKCdudWxsJyk7XG4gICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cblxuLy8ganNoaW50IG1heGxlbjogZmFsc2Vcbi8vICAgICAgICAgICAgICAgICAgICAgLy8wMDAwMTExMTExMTExMTAwMDAwMDAwMDAwMjIyMjIyMjIyMjAwMDAwMDAwMDAwMDAwMDAwMDAwMDMzMzMzMzMzMzMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDQ0NDQ0NDQ0NDQwMDAwMDAwMDAwMDAwNTU1NTU1NTU1NTU1NTU1MDAwMDAwMDAwNjY2NjY2NjY2NjY2NjY2MDAwMDAwMDc3Nzc3Nzc3Nzc3Nzc3NzAwMDAwMDAwMDAwMDAwMDg4ODg4ODg4ODgwMDAwMDAwMDAwMDAwMDAwMDAwOTk5OTk5OTk5OVxudmFyIE5HX09QVElPTlNfUkVHRVhQID0gL15cXHMqKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2dyb3VwXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2Rpc2FibGVcXHMrd2hlblxccysoW1xcc1xcU10rPykpP1xccytmb3JcXHMrKD86KFtcXCRcXHddW1xcJFxcd10qKXwoPzpcXChcXHMqKFtcXCRcXHddW1xcJFxcd10qKVxccyosXFxzKihbXFwkXFx3XVtcXCRcXHddKilcXHMqXFwpKSlcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/JC87XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAxOiB2YWx1ZSBleHByZXNzaW9uICh2YWx1ZUZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMjogbGFiZWwgZXhwcmVzc2lvbiAoZGlzcGxheUZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMzogZ3JvdXAgYnkgZXhwcmVzc2lvbiAoZ3JvdXBCeUZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNDogZGlzYWJsZSB3aGVuIGV4cHJlc3Npb24gKGRpc2FibGVXaGVuRm4pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA1OiBhcnJheSBpdGVtIHZhcmlhYmxlIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDY6IG9iamVjdCBpdGVtIGtleSB2YXJpYWJsZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA3OiBvYmplY3QgaXRlbSB2YWx1ZSB2YXJpYWJsZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA4OiBjb2xsZWN0aW9uIGV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDk6IHRyYWNrIGJ5IGV4cHJlc3Npb25cbi8vIGpzaGludCBtYXhsZW46IDEwMFxuXG5cbnZhciBuZ09wdGlvbnNEaXJlY3RpdmUgPSBbJyRjb21waWxlJywgJyRwYXJzZScsIGZ1bmN0aW9uKCRjb21waWxlLCAkcGFyc2UpIHtcblxuICBmdW5jdGlvbiBwYXJzZU9wdGlvbnNFeHByZXNzaW9uKG9wdGlvbnNFeHAsIHNlbGVjdEVsZW1lbnQsIHNjb3BlKSB7XG5cbiAgICB2YXIgbWF0Y2ggPSBvcHRpb25zRXhwLm1hdGNoKE5HX09QVElPTlNfUkVHRVhQKTtcbiAgICBpZiAoIShtYXRjaCkpIHtcbiAgICAgIHRocm93IG5nT3B0aW9uc01pbkVycignaWV4cCcsXG4gICAgICAgIFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mIFwiICtcbiAgICAgICAgXCInX3NlbGVjdF8gKGFzIF9sYWJlbF8pPyBmb3IgKF9rZXlfLCk/X3ZhbHVlXyBpbiBfY29sbGVjdGlvbl8nXCIgK1xuICAgICAgICBcIiBidXQgZ290ICd7MH0nLiBFbGVtZW50OiB7MX1cIixcbiAgICAgICAgb3B0aW9uc0V4cCwgc3RhcnRpbmdUYWcoc2VsZWN0RWxlbWVudCkpO1xuICAgIH1cblxuICAgIC8vIEV4dHJhY3QgdGhlIHBhcnRzIGZyb20gdGhlIG5nT3B0aW9ucyBleHByZXNzaW9uXG5cbiAgICAvLyBUaGUgdmFyaWFibGUgbmFtZSBmb3IgdGhlIHZhbHVlIG9mIHRoZSBpdGVtIGluIHRoZSBjb2xsZWN0aW9uXG4gICAgdmFyIHZhbHVlTmFtZSA9IG1hdGNoWzVdIHx8IG1hdGNoWzddO1xuICAgIC8vIFRoZSB2YXJpYWJsZSBuYW1lIGZvciB0aGUga2V5IG9mIHRoZSBpdGVtIGluIHRoZSBjb2xsZWN0aW9uXG4gICAgdmFyIGtleU5hbWUgPSBtYXRjaFs2XTtcblxuICAgIC8vIEFuIGV4cHJlc3Npb24gdGhhdCBnZW5lcmF0ZXMgdGhlIHZpZXdWYWx1ZSBmb3IgYW4gb3B0aW9uIGlmIHRoZXJlIGlzIGEgbGFiZWwgZXhwcmVzc2lvblxuICAgIHZhciBzZWxlY3RBcyA9IC8gYXMgLy50ZXN0KG1hdGNoWzBdKSAmJiBtYXRjaFsxXTtcbiAgICAvLyBBbiBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCB0byB0cmFjayB0aGUgaWQgb2YgZWFjaCBvYmplY3QgaW4gdGhlIG9wdGlvbnMgY29sbGVjdGlvblxuICAgIHZhciB0cmFja0J5ID0gbWF0Y2hbOV07XG4gICAgLy8gQW4gZXhwcmVzc2lvbiB0aGF0IGdlbmVyYXRlcyB0aGUgdmlld1ZhbHVlIGZvciBhbiBvcHRpb24gaWYgdGhlcmUgaXMgbm8gbGFiZWwgZXhwcmVzc2lvblxuICAgIHZhciB2YWx1ZUZuID0gJHBhcnNlKG1hdGNoWzJdID8gbWF0Y2hbMV0gOiB2YWx1ZU5hbWUpO1xuICAgIHZhciBzZWxlY3RBc0ZuID0gc2VsZWN0QXMgJiYgJHBhcnNlKHNlbGVjdEFzKTtcbiAgICB2YXIgdmlld1ZhbHVlRm4gPSBzZWxlY3RBc0ZuIHx8IHZhbHVlRm47XG4gICAgdmFyIHRyYWNrQnlGbiA9IHRyYWNrQnkgJiYgJHBhcnNlKHRyYWNrQnkpO1xuXG4gICAgLy8gR2V0IHRoZSB2YWx1ZSBieSB3aGljaCB3ZSBhcmUgZ29pbmcgdG8gdHJhY2sgdGhlIG9wdGlvblxuICAgIC8vIGlmIHdlIGhhdmUgYSB0cmFja0ZuIHRoZW4gdXNlIHRoYXQgKHBhc3Npbmcgc2NvcGUgYW5kIGxvY2FscylcbiAgICAvLyBvdGhlcndpc2UganVzdCBoYXNoIHRoZSBnaXZlbiB2aWV3VmFsdWVcbiAgICB2YXIgZ2V0VHJhY2tCeVZhbHVlRm4gPSB0cmFja0J5ID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlLCBsb2NhbHMpIHsgcmV0dXJuIHRyYWNrQnlGbihzY29wZSwgbG9jYWxzKTsgfSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRIYXNoT2ZWYWx1ZSh2YWx1ZSkgeyByZXR1cm4gaGFzaEtleSh2YWx1ZSk7IH07XG4gICAgdmFyIGdldFRyYWNrQnlWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJldHVybiBnZXRUcmFja0J5VmFsdWVGbih2YWx1ZSwgZ2V0TG9jYWxzKHZhbHVlLCBrZXkpKTtcbiAgICB9O1xuXG4gICAgdmFyIGRpc3BsYXlGbiA9ICRwYXJzZShtYXRjaFsyXSB8fCBtYXRjaFsxXSk7XG4gICAgdmFyIGdyb3VwQnlGbiA9ICRwYXJzZShtYXRjaFszXSB8fCAnJyk7XG4gICAgdmFyIGRpc2FibGVXaGVuRm4gPSAkcGFyc2UobWF0Y2hbNF0gfHwgJycpO1xuICAgIHZhciB2YWx1ZXNGbiA9ICRwYXJzZShtYXRjaFs4XSk7XG5cbiAgICB2YXIgbG9jYWxzID0ge307XG4gICAgdmFyIGdldExvY2FscyA9IGtleU5hbWUgPyBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICBsb2NhbHNba2V5TmFtZV0gPSBrZXk7XG4gICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGxvY2FscztcbiAgICB9IDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gdmFsdWU7XG4gICAgICByZXR1cm4gbG9jYWxzO1xuICAgIH07XG5cblxuICAgIGZ1bmN0aW9uIE9wdGlvbihzZWxlY3RWYWx1ZSwgdmlld1ZhbHVlLCBsYWJlbCwgZ3JvdXAsIGRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNlbGVjdFZhbHVlID0gc2VsZWN0VmFsdWU7XG4gICAgICB0aGlzLnZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICAgIHRoaXMuZ3JvdXAgPSBncm91cDtcbiAgICAgIHRoaXMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRPcHRpb25WYWx1ZXNLZXlzKG9wdGlvblZhbHVlcykge1xuICAgICAgdmFyIG9wdGlvblZhbHVlc0tleXM7XG5cbiAgICAgIGlmICgha2V5TmFtZSAmJiBpc0FycmF5TGlrZShvcHRpb25WYWx1ZXMpKSB7XG4gICAgICAgIG9wdGlvblZhbHVlc0tleXMgPSBvcHRpb25WYWx1ZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBvYmplY3QsIGV4dHJhY3Qga2V5cywgaW4gZW51bWVyYXRpb24gb3JkZXIsIHVuc29ydGVkXG4gICAgICAgIG9wdGlvblZhbHVlc0tleXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaXRlbUtleSBpbiBvcHRpb25WYWx1ZXMpIHtcbiAgICAgICAgICBpZiAob3B0aW9uVmFsdWVzLmhhc093blByb3BlcnR5KGl0ZW1LZXkpICYmIGl0ZW1LZXkuY2hhckF0KDApICE9PSAnJCcpIHtcbiAgICAgICAgICAgIG9wdGlvblZhbHVlc0tleXMucHVzaChpdGVtS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25WYWx1ZXNLZXlzO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0cmFja0J5OiB0cmFja0J5LFxuICAgICAgZ2V0VHJhY2tCeVZhbHVlOiBnZXRUcmFja0J5VmFsdWUsXG4gICAgICBnZXRXYXRjaGFibGVzOiAkcGFyc2UodmFsdWVzRm4sIGZ1bmN0aW9uKG9wdGlvblZhbHVlcykge1xuICAgICAgICAvLyBDcmVhdGUgYSBjb2xsZWN0aW9uIG9mIHRoaW5ncyB0aGF0IHdlIHdvdWxkIGxpa2UgdG8gd2F0Y2ggKHdhdGNoZWRBcnJheSlcbiAgICAgICAgLy8gc28gdGhhdCB0aGV5IGNhbiBhbGwgYmUgd2F0Y2hlZCB1c2luZyBhIHNpbmdsZSAkd2F0Y2hDb2xsZWN0aW9uXG4gICAgICAgIC8vIHRoYXQgb25seSBydW5zIHRoZSBoYW5kbGVyIG9uY2UgaWYgYW55dGhpbmcgY2hhbmdlc1xuICAgICAgICB2YXIgd2F0Y2hlZEFycmF5ID0gW107XG4gICAgICAgIG9wdGlvblZhbHVlcyA9IG9wdGlvblZhbHVlcyB8fCBbXTtcblxuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzS2V5cyA9IGdldE9wdGlvblZhbHVlc0tleXMob3B0aW9uVmFsdWVzKTtcbiAgICAgICAgdmFyIG9wdGlvblZhbHVlc0xlbmd0aCA9IG9wdGlvblZhbHVlc0tleXMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgb3B0aW9uVmFsdWVzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IChvcHRpb25WYWx1ZXMgPT09IG9wdGlvblZhbHVlc0tleXMpID8gaW5kZXggOiBvcHRpb25WYWx1ZXNLZXlzW2luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvcHRpb25WYWx1ZXNba2V5XTtcblxuICAgICAgICAgIHZhciBsb2NhbHMgPSBnZXRMb2NhbHMob3B0aW9uVmFsdWVzW2tleV0sIGtleSk7XG4gICAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gZ2V0VHJhY2tCeVZhbHVlRm4ob3B0aW9uVmFsdWVzW2tleV0sIGxvY2Fscyk7XG4gICAgICAgICAgd2F0Y2hlZEFycmF5LnB1c2goc2VsZWN0VmFsdWUpO1xuXG4gICAgICAgICAgLy8gT25seSBuZWVkIHRvIHdhdGNoIHRoZSBkaXNwbGF5Rm4gaWYgdGhlcmUgaXMgYSBzcGVjaWZpYyBsYWJlbCBleHByZXNzaW9uXG4gICAgICAgICAgaWYgKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSB7XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBkaXNwbGF5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgICB3YXRjaGVkQXJyYXkucHVzaChsYWJlbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gT25seSBuZWVkIHRvIHdhdGNoIHRoZSBkaXNhYmxlV2hlbkZuIGlmIHRoZXJlIGlzIGEgc3BlY2lmaWMgZGlzYWJsZSBleHByZXNzaW9uXG4gICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICB2YXIgZGlzYWJsZVdoZW4gPSBkaXNhYmxlV2hlbkZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgd2F0Y2hlZEFycmF5LnB1c2goZGlzYWJsZVdoZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2F0Y2hlZEFycmF5O1xuICAgICAgfSksXG5cbiAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBvcHRpb25JdGVtcyA9IFtdO1xuICAgICAgICB2YXIgc2VsZWN0VmFsdWVNYXAgPSB7fTtcblxuICAgICAgICAvLyBUaGUgb3B0aW9uIHZhbHVlcyB3ZXJlIGFscmVhZHkgY29tcHV0ZWQgaW4gdGhlIGBnZXRXYXRjaGFibGVzYCBmbixcbiAgICAgICAgLy8gd2hpY2ggbXVzdCBoYXZlIGJlZW4gY2FsbGVkIHRvIHRyaWdnZXIgYGdldE9wdGlvbnNgXG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXMgPSB2YWx1ZXNGbihzY29wZSkgfHwgW107XG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXNLZXlzID0gZ2V0T3B0aW9uVmFsdWVzS2V5cyhvcHRpb25WYWx1ZXMpO1xuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzTGVuZ3RoID0gb3B0aW9uVmFsdWVzS2V5cy5sZW5ndGg7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG9wdGlvblZhbHVlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHZhciBrZXkgPSAob3B0aW9uVmFsdWVzID09PSBvcHRpb25WYWx1ZXNLZXlzKSA/IGluZGV4IDogb3B0aW9uVmFsdWVzS2V5c1tpbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb3B0aW9uVmFsdWVzW2tleV07XG4gICAgICAgICAgdmFyIGxvY2FscyA9IGdldExvY2Fscyh2YWx1ZSwga2V5KTtcbiAgICAgICAgICB2YXIgdmlld1ZhbHVlID0gdmlld1ZhbHVlRm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIHNlbGVjdFZhbHVlID0gZ2V0VHJhY2tCeVZhbHVlRm4odmlld1ZhbHVlLCBsb2NhbHMpO1xuICAgICAgICAgIHZhciBsYWJlbCA9IGRpc3BsYXlGbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgZ3JvdXAgPSBncm91cEJ5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIGRpc2FibGVkID0gZGlzYWJsZVdoZW5GbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgb3B0aW9uSXRlbSA9IG5ldyBPcHRpb24oc2VsZWN0VmFsdWUsIHZpZXdWYWx1ZSwgbGFiZWwsIGdyb3VwLCBkaXNhYmxlZCk7XG5cbiAgICAgICAgICBvcHRpb25JdGVtcy5wdXNoKG9wdGlvbkl0ZW0pO1xuICAgICAgICAgIHNlbGVjdFZhbHVlTWFwW3NlbGVjdFZhbHVlXSA9IG9wdGlvbkl0ZW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGl0ZW1zOiBvcHRpb25JdGVtcyxcbiAgICAgICAgICBzZWxlY3RWYWx1ZU1hcDogc2VsZWN0VmFsdWVNYXAsXG4gICAgICAgICAgZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RWYWx1ZU1hcFtnZXRUcmFja0J5VmFsdWUodmFsdWUpXTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldFZpZXdWYWx1ZUZyb21PcHRpb246IGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgLy8gSWYgdGhlIHZpZXdWYWx1ZSBjb3VsZCBiZSBhbiBvYmplY3QgdGhhdCBtYXkgYmUgbXV0YXRlZCBieSB0aGUgYXBwbGljYXRpb24sXG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIG1ha2UgYSBjb3B5IGFuZCBub3QgcmV0dXJuIHRoZSByZWZlcmVuY2UgdG8gdGhlIHZhbHVlIG9uIHRoZSBvcHRpb24uXG4gICAgICAgICAgICByZXR1cm4gdHJhY2tCeSA/IGFuZ3VsYXIuY29weShvcHRpb24udmlld1ZhbHVlKSA6IG9wdGlvbi52aWV3VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuXG4gIC8vIHdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXG4gIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICB2YXIgb3B0aW9uVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKSxcbiAgICAgIG9wdEdyb3VwVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRncm91cCcpO1xuXG5cbiAgICBmdW5jdGlvbiBuZ09wdGlvbnNQb3N0TGluayhzY29wZSwgc2VsZWN0RWxlbWVudCwgYXR0ciwgY3RybHMpIHtcblxuICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZ1xuICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG4gICAgICBpZiAoIW5nTW9kZWxDdHJsKSByZXR1cm47XG5cbiAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF07XG4gICAgICB2YXIgbXVsdGlwbGUgPSBhdHRyLm11bHRpcGxlO1xuXG4gICAgICAvLyBUaGUgZW1wdHlPcHRpb24gYWxsb3dzIHRoZSBhcHBsaWNhdGlvbiBkZXZlbG9wZXIgdG8gcHJvdmlkZSB0aGVpciBvd24gY3VzdG9tIFwiZW1wdHlcIlxuICAgICAgLy8gb3B0aW9uIHdoZW4gdGhlIHZpZXdWYWx1ZSBkb2VzIG5vdCBtYXRjaCBhbnkgb2YgdGhlIG9wdGlvbiB2YWx1ZXMuXG4gICAgICB2YXIgZW1wdHlPcHRpb247XG4gICAgICBmb3IgKHZhciBpID0gMCwgY2hpbGRyZW4gPSBzZWxlY3RFbGVtZW50LmNoaWxkcmVuKCksIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBpZiAoY2hpbGRyZW5baV0udmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgZW1wdHlPcHRpb24gPSBjaGlsZHJlbi5lcShpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcHJvdmlkZWRFbXB0eU9wdGlvbiA9ICEhZW1wdHlPcHRpb247XG5cbiAgICAgIHZhciB1bmtub3duT3B0aW9uID0ganFMaXRlKG9wdGlvblRlbXBsYXRlLmNsb25lTm9kZShmYWxzZSkpO1xuICAgICAgdW5rbm93bk9wdGlvbi52YWwoJz8nKTtcblxuICAgICAgdmFyIG9wdGlvbnM7XG4gICAgICB2YXIgbmdPcHRpb25zID0gcGFyc2VPcHRpb25zRXhwcmVzc2lvbihhdHRyLm5nT3B0aW9ucywgc2VsZWN0RWxlbWVudCwgc2NvcGUpO1xuXG5cbiAgICAgIHZhciByZW5kZXJFbXB0eU9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXByb3ZpZGVkRW1wdHlPcHRpb24pIHtcbiAgICAgICAgICBzZWxlY3RFbGVtZW50LnByZXBlbmQoZW1wdHlPcHRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHNlbGVjdEVsZW1lbnQudmFsKCcnKTtcbiAgICAgICAgZW1wdHlPcHRpb24ucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTsgLy8gbmVlZGVkIGZvciBJRVxuICAgICAgICBlbXB0eU9wdGlvbi5hdHRyKCdzZWxlY3RlZCcsIHRydWUpO1xuICAgICAgfTtcblxuICAgICAgdmFyIHJlbW92ZUVtcHR5T3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghcHJvdmlkZWRFbXB0eU9wdGlvbikge1xuICAgICAgICAgIGVtcHR5T3B0aW9uLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG5cbiAgICAgIHZhciByZW5kZXJVbmtub3duT3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdEVsZW1lbnQucHJlcGVuZCh1bmtub3duT3B0aW9uKTtcbiAgICAgICAgc2VsZWN0RWxlbWVudC52YWwoJz8nKTtcbiAgICAgICAgdW5rbm93bk9wdGlvbi5wcm9wKCdzZWxlY3RlZCcsIHRydWUpOyAvLyBuZWVkZWQgZm9yIElFXG4gICAgICAgIHVua25vd25PcHRpb24uYXR0cignc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZW1vdmVVbmtub3duT3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHVua25vd25PcHRpb24ucmVtb3ZlKCk7XG4gICAgICB9O1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIGNvbnRyb2xsZXIgbWV0aG9kcyBmb3IgbXVsdGlwbGUgc2VsZWN0YWJsZSBvcHRpb25zXG4gICAgICBpZiAoIW11bHRpcGxlKSB7XG5cbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlID0gZnVuY3Rpb24gd3JpdGVOZ09wdGlvbnNWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLmdldE9wdGlvbkZyb21WaWV3VmFsdWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbiAmJiAhb3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0RWxlbWVudFswXS52YWx1ZSAhPT0gb3B0aW9uLnNlbGVjdFZhbHVlKSB7XG4gICAgICAgICAgICAgIHJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgICAgICAgICAgcmVtb3ZlRW1wdHlPcHRpb24oKTtcblxuICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50WzBdLnZhbHVlID0gb3B0aW9uLnNlbGVjdFZhbHVlO1xuICAgICAgICAgICAgICBvcHRpb24uZWxlbWVudC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHByb3ZpZGVkRW1wdHlPcHRpb24pIHtcbiAgICAgICAgICAgICAgcmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgICAgICAgICByZW5kZXJFbXB0eU9wdGlvbigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVtb3ZlRW1wdHlPcHRpb24oKTtcbiAgICAgICAgICAgICAgcmVuZGVyVW5rbm93bk9wdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZWxlY3RDdHJsLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWROZ09wdGlvbnNWYWx1ZSgpIHtcblxuICAgICAgICAgIHZhciBzZWxlY3RlZE9wdGlvbiA9IG9wdGlvbnMuc2VsZWN0VmFsdWVNYXBbc2VsZWN0RWxlbWVudC52YWwoKV07XG5cbiAgICAgICAgICBpZiAoc2VsZWN0ZWRPcHRpb24gJiYgIXNlbGVjdGVkT3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICAgICAgICByZW1vdmVFbXB0eU9wdGlvbigpO1xuICAgICAgICAgICAgcmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbihzZWxlY3RlZE9wdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSB1c2luZyBgdHJhY2sgYnlgIHRoZW4gd2UgbXVzdCB3YXRjaCB0aGUgdHJhY2tlZCB2YWx1ZSBvbiB0aGUgbW9kZWxcbiAgICAgICAgLy8gc2luY2UgbmdNb2RlbCBvbmx5IHdhdGNoZXMgZm9yIG9iamVjdCBpZGVudGl0eSBjaGFuZ2VcbiAgICAgICAgaWYgKG5nT3B0aW9ucy50cmFja0J5KSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBuZ09wdGlvbnMuZ2V0VHJhY2tCeVZhbHVlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpOyB9LFxuICAgICAgICAgICAgZnVuY3Rpb24oKSB7IG5nTW9kZWxDdHJsLiRyZW5kZXIoKTsgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICBuZ01vZGVsQ3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDA7XG4gICAgICAgIH07XG5cblxuICAgICAgICBzZWxlY3RDdHJsLndyaXRlVmFsdWUgPSBmdW5jdGlvbiB3cml0ZU5nT3B0aW9uc011bHRpcGxlKHZhbHVlKSB7XG4gICAgICAgICAgb3B0aW9ucy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgb3B0aW9uLmVsZW1lbnQuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLmdldE9wdGlvbkZyb21WaWV3VmFsdWUoaXRlbSk7XG4gICAgICAgICAgICAgIGlmIChvcHRpb24gJiYgIW9wdGlvbi5kaXNhYmxlZCkgb3B0aW9uLmVsZW1lbnQuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG5cbiAgICAgICAgc2VsZWN0Q3RybC5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkTmdPcHRpb25zTXVsdGlwbGUoKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkVmFsdWVzID0gc2VsZWN0RWxlbWVudC52YWwoKSB8fCBbXSxcbiAgICAgICAgICAgICAgc2VsZWN0aW9ucyA9IFtdO1xuXG4gICAgICAgICAgZm9yRWFjaChzZWxlY3RlZFZhbHVlcywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLnNlbGVjdFZhbHVlTWFwW3ZhbHVlXTtcbiAgICAgICAgICAgIGlmIChvcHRpb24gJiYgIW9wdGlvbi5kaXNhYmxlZCkgc2VsZWN0aW9ucy5wdXNoKG9wdGlvbnMuZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbihvcHRpb24pKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBzZWxlY3Rpb25zO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSB1c2luZyBgdHJhY2sgYnlgIHRoZW4gd2UgbXVzdCB3YXRjaCB0aGVzZSB0cmFja2VkIHZhbHVlcyBvbiB0aGUgbW9kZWxcbiAgICAgICAgLy8gc2luY2UgbmdNb2RlbCBvbmx5IHdhdGNoZXMgZm9yIG9iamVjdCBpZGVudGl0eSBjaGFuZ2VcbiAgICAgICAgaWYgKG5nT3B0aW9ucy50cmFja0J5KSB7XG5cbiAgICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5nT3B0aW9ucy5nZXRUcmFja0J5VmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgaWYgKHByb3ZpZGVkRW1wdHlPcHRpb24pIHtcblxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHJlbW92ZSBpdCBiZWZvcmUgY2FsbGluZyBzZWxlY3RFbGVtZW50LmVtcHR5KCkgYmVjYXVzZSBvdGhlcndpc2UgSUUgd2lsbFxuICAgICAgICAvLyByZW1vdmUgdGhlIGxhYmVsIGZyb20gdGhlIGVsZW1lbnQuIHd0Zj9cbiAgICAgICAgZW1wdHlPcHRpb24ucmVtb3ZlKCk7XG5cbiAgICAgICAgLy8gY29tcGlsZSB0aGUgZWxlbWVudCBzaW5jZSB0aGVyZSBtaWdodCBiZSBiaW5kaW5ncyBpbiBpdFxuICAgICAgICAkY29tcGlsZShlbXB0eU9wdGlvbikoc2NvcGUpO1xuXG4gICAgICAgIC8vIHJlbW92ZSB0aGUgY2xhc3MsIHdoaWNoIGlzIGFkZGVkIGF1dG9tYXRpY2FsbHkgYmVjYXVzZSB3ZSByZWNvbXBpbGUgdGhlIGVsZW1lbnQgYW5kIGl0XG4gICAgICAgIC8vIGJlY29tZXMgdGhlIGNvbXBpbGF0aW9uIHJvb3RcbiAgICAgICAgZW1wdHlPcHRpb24ucmVtb3ZlQ2xhc3MoJ25nLXNjb3BlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbXB0eU9wdGlvbiA9IGpxTGl0ZShvcHRpb25UZW1wbGF0ZS5jbG9uZU5vZGUoZmFsc2UpKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGlzIGhlcmUgdG8gZW5zdXJlIHRoYXQgdGhlIG9wdGlvbnMgb2JqZWN0IGlzIGRlZmluZWRcbiAgICAgIC8vIHdoZW4gd2UgZmlyc3QgaGl0IGl0IGluIHdyaXRlTmdPcHRpb25zVmFsdWVcbiAgICAgIHVwZGF0ZU9wdGlvbnMoKTtcblxuICAgICAgLy8gV2Ugd2lsbCByZS1yZW5kZXIgdGhlIG9wdGlvbiBlbGVtZW50cyBpZiB0aGUgb3B0aW9uIHZhbHVlcyBvciBsYWJlbHMgY2hhbmdlXG4gICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKG5nT3B0aW9ucy5nZXRXYXRjaGFibGVzLCB1cGRhdGVPcHRpb25zKTtcblxuICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlT3B0aW9uRWxlbWVudChvcHRpb24sIGVsZW1lbnQpIHtcbiAgICAgICAgb3B0aW9uLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gb3B0aW9uLmRpc2FibGVkO1xuICAgICAgICAvLyBOT1RFOiBUaGUgbGFiZWwgbXVzdCBiZSBzZXQgYmVmb3JlIHRoZSB2YWx1ZSwgb3RoZXJ3aXNlIElFMTAvMTEvRURHRSBjcmVhdGUgdW5yZXNwb25zaXZlXG4gICAgICAgIC8vIHNlbGVjdHMgaW4gY2VydGFpbiBjaXJjdW1zdGFuY2VzIHdoZW4gbXVsdGlwbGUgc2VsZWN0cyBhcmUgbmV4dCB0byBlYWNoIG90aGVyIGFuZCBkaXNwbGF5XG4gICAgICAgIC8vIHRoZSBvcHRpb24gbGlzdCBpbiBsaXN0Ym94IHN0eWxlLCBpLmUuIHRoZSBzZWxlY3QgaXMgW211bHRpcGxlXSwgb3Igc3BlY2lmaWVzIGEgW3NpemVdLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTEzMTQgZm9yIG1vcmUgaW5mby5cbiAgICAgICAgLy8gVGhpcyBpcyB1bmZvcnR1bmF0ZWx5IHVudGVzdGFibGUgd2l0aCB1bml0IC8gZTJlIHRlc3RzXG4gICAgICAgIGlmIChvcHRpb24ubGFiZWwgIT09IGVsZW1lbnQubGFiZWwpIHtcbiAgICAgICAgICBlbGVtZW50LmxhYmVsID0gb3B0aW9uLmxhYmVsO1xuICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBvcHRpb24ubGFiZWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbi52YWx1ZSAhPT0gZWxlbWVudC52YWx1ZSkgZWxlbWVudC52YWx1ZSA9IG9wdGlvbi5zZWxlY3RWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYWRkT3JSZXVzZUVsZW1lbnQocGFyZW50LCBjdXJyZW50LCB0eXBlLCB0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICAgIC8vIENoZWNrIHdoZXRoZXIgd2UgY2FuIHJldXNlIHRoZSBuZXh0IGVsZW1lbnRcbiAgICAgICAgaWYgKGN1cnJlbnQgJiYgbG93ZXJjYXNlKGN1cnJlbnQubm9kZU5hbWUpID09PSB0eXBlKSB7XG4gICAgICAgICAgLy8gVGhlIG5leHQgZWxlbWVudCBpcyB0aGUgcmlnaHQgdHlwZSBzbyByZXVzZSBpdFxuICAgICAgICAgIGVsZW1lbnQgPSBjdXJyZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRoZSBuZXh0IGVsZW1lbnQgaXMgbm90IHRoZSByaWdodCB0eXBlIHNvIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgICAgICBlbGVtZW50ID0gdGVtcGxhdGVFbGVtZW50LmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgICAgICAvLyBUaGVyZSBhcmUgbm8gbW9yZSBlbGVtZW50cyBzbyBqdXN0IGFwcGVuZCBpdCB0byB0aGUgc2VsZWN0XG4gICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoZSBuZXh0IGVsZW1lbnQgaXMgbm90IGEgZ3JvdXAgc28gaW5zZXJ0IHRoZSBuZXcgb25lXG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGN1cnJlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH1cblxuXG4gICAgICBmdW5jdGlvbiByZW1vdmVFeGNlc3NFbGVtZW50cyhjdXJyZW50KSB7XG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICAgIG5leHQgPSBjdXJyZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICAgIGpxTGl0ZVJlbW92ZShjdXJyZW50KTtcbiAgICAgICAgICBjdXJyZW50ID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIGZ1bmN0aW9uIHNraXBFbXB0eUFuZFVua25vd25PcHRpb25zKGN1cnJlbnQpIHtcbiAgICAgICAgdmFyIGVtcHR5T3B0aW9uXyA9IGVtcHR5T3B0aW9uICYmIGVtcHR5T3B0aW9uWzBdO1xuICAgICAgICB2YXIgdW5rbm93bk9wdGlvbl8gPSB1bmtub3duT3B0aW9uICYmIHVua25vd25PcHRpb25bMF07XG5cbiAgICAgICAgLy8gV2UgY2Fubm90IHJlbHkgb24gdGhlIGV4dHJhY3RlZCBlbXB0eSBvcHRpb24gYmVpbmcgdGhlIHNhbWUgYXMgdGhlIGNvbXBpbGVkIGVtcHR5IG9wdGlvbixcbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgY29tcGlsZWQgZW1wdHkgb3B0aW9uIG1pZ2h0IGhhdmUgYmVlbiByZXBsYWNlZCBieSBhIGNvbW1lbnQgYmVjYXVzZVxuICAgICAgICAvLyBpdCBoYWQgYW4gXCJlbGVtZW50XCIgdHJhbnNjbHVzaW9uIGRpcmVjdGl2ZSBvbiBpdCAoc3VjaCBhcyBuZ0lmKVxuICAgICAgICBpZiAoZW1wdHlPcHRpb25fIHx8IHVua25vd25PcHRpb25fKSB7XG4gICAgICAgICAgd2hpbGUgKGN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgICAoY3VycmVudCA9PT0gZW1wdHlPcHRpb25fIHx8XG4gICAgICAgICAgICAgICAgY3VycmVudCA9PT0gdW5rbm93bk9wdGlvbl8gfHxcbiAgICAgICAgICAgICAgICBjdXJyZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfQ09NTUVOVCB8fFxuICAgICAgICAgICAgICAgIChub2RlTmFtZV8oY3VycmVudCkgPT09ICdvcHRpb24nICYmIGN1cnJlbnQudmFsdWUgPT09ICcnKSkpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICAgIH1cblxuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKCkge1xuXG4gICAgICAgIHZhciBwcmV2aW91c1ZhbHVlID0gb3B0aW9ucyAmJiBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuXG4gICAgICAgIG9wdGlvbnMgPSBuZ09wdGlvbnMuZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgIHZhciBncm91cE1hcCA9IHt9O1xuICAgICAgICB2YXIgY3VycmVudEVsZW1lbnQgPSBzZWxlY3RFbGVtZW50WzBdLmZpcnN0Q2hpbGQ7XG5cbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIGVtcHR5IG9wdGlvbiBpcyBhbHdheXMgdGhlcmUgaWYgaXQgd2FzIGV4cGxpY2l0bHkgcHJvdmlkZWRcbiAgICAgICAgaWYgKHByb3ZpZGVkRW1wdHlPcHRpb24pIHtcbiAgICAgICAgICBzZWxlY3RFbGVtZW50LnByZXBlbmQoZW1wdHlPcHRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEVsZW1lbnQgPSBza2lwRW1wdHlBbmRVbmtub3duT3B0aW9ucyhjdXJyZW50RWxlbWVudCk7XG5cbiAgICAgICAgb3B0aW9ucy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbihvcHRpb24pIHtcbiAgICAgICAgICB2YXIgZ3JvdXA7XG4gICAgICAgICAgdmFyIGdyb3VwRWxlbWVudDtcbiAgICAgICAgICB2YXIgb3B0aW9uRWxlbWVudDtcblxuICAgICAgICAgIGlmIChvcHRpb24uZ3JvdXApIHtcblxuICAgICAgICAgICAgLy8gVGhpcyBvcHRpb24gaXMgdG8gbGl2ZSBpbiBhIGdyb3VwXG4gICAgICAgICAgICAvLyBTZWUgaWYgd2UgaGF2ZSBhbHJlYWR5IGNyZWF0ZWQgdGhpcyBncm91cFxuICAgICAgICAgICAgZ3JvdXAgPSBncm91cE1hcFtvcHRpb24uZ3JvdXBdO1xuXG4gICAgICAgICAgICBpZiAoIWdyb3VwKSB7XG5cbiAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBub3QgYWxyZWFkeSBjcmVhdGVkIHRoaXMgZ3JvdXBcbiAgICAgICAgICAgICAgZ3JvdXBFbGVtZW50ID0gYWRkT3JSZXVzZUVsZW1lbnQoc2VsZWN0RWxlbWVudFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcHRncm91cCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdEdyb3VwVGVtcGxhdGUpO1xuICAgICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGVsZW1lbnRcbiAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBncm91cEVsZW1lbnQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBsYWJlbCBvbiB0aGUgZ3JvdXAgZWxlbWVudFxuICAgICAgICAgICAgICBncm91cEVsZW1lbnQubGFiZWwgPSBvcHRpb24uZ3JvdXA7XG5cbiAgICAgICAgICAgICAgLy8gU3RvcmUgaXQgZm9yIHVzZSBsYXRlclxuICAgICAgICAgICAgICBncm91cCA9IGdyb3VwTWFwW29wdGlvbi5ncm91cF0gPSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBFbGVtZW50OiBncm91cEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgY3VycmVudE9wdGlvbkVsZW1lbnQ6IGdyb3VwRWxlbWVudC5maXJzdENoaWxkXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU28gbm93IHdlIGhhdmUgYSBncm91cCBmb3IgdGhpcyBvcHRpb24gd2UgYWRkIHRoZSBvcHRpb24gdG8gdGhlIGdyb3VwXG4gICAgICAgICAgICBvcHRpb25FbGVtZW50ID0gYWRkT3JSZXVzZUVsZW1lbnQoZ3JvdXAuZ3JvdXBFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmN1cnJlbnRPcHRpb25FbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvblRlbXBsYXRlKTtcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbkVsZW1lbnQob3B0aW9uLCBvcHRpb25FbGVtZW50KTtcbiAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgZWxlbWVudFxuICAgICAgICAgICAgZ3JvdXAuY3VycmVudE9wdGlvbkVsZW1lbnQgPSBvcHRpb25FbGVtZW50Lm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgLy8gVGhpcyBvcHRpb24gaXMgbm90IGluIGEgZ3JvdXBcbiAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQgPSBhZGRPclJldXNlRWxlbWVudChzZWxlY3RFbGVtZW50WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvblRlbXBsYXRlKTtcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbkVsZW1lbnQob3B0aW9uLCBvcHRpb25FbGVtZW50KTtcbiAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgZWxlbWVudFxuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBvcHRpb25FbGVtZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICAvLyBOb3cgcmVtb3ZlIGFsbCBleGNlc3Mgb3B0aW9ucyBhbmQgZ3JvdXBcbiAgICAgICAgT2JqZWN0LmtleXMoZ3JvdXBNYXApLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmVtb3ZlRXhjZXNzRWxlbWVudHMoZ3JvdXBNYXBba2V5XS5jdXJyZW50T3B0aW9uRWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZW1vdmVFeGNlc3NFbGVtZW50cyhjdXJyZW50RWxlbWVudCk7XG5cbiAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuXG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQgZHVlIHRvIHRoZSB1cGRhdGUgdG8gdGhlIG9wdGlvbnNcbiAgICAgICAgaWYgKCFuZ01vZGVsQ3RybC4kaXNFbXB0eShwcmV2aW91c1ZhbHVlKSkge1xuICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuICAgICAgICAgIHZhciBpc05vdFByaW1pdGl2ZSA9IG5nT3B0aW9ucy50cmFja0J5IHx8IG11bHRpcGxlO1xuICAgICAgICAgIGlmIChpc05vdFByaW1pdGl2ZSA/ICFlcXVhbHMocHJldmlvdXNWYWx1ZSwgbmV4dFZhbHVlKSA6IHByZXZpb3VzVmFsdWUgIT09IG5leHRWYWx1ZSkge1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShuZXh0VmFsdWUpO1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgcmVxdWlyZTogWydzZWxlY3QnLCAnP25nTW9kZWwnXSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uIG5nT3B0aW9uc1ByZUxpbmsoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgIC8vIERlYWN0aXZhdGUgdGhlIFNlbGVjdENvbnRyb2xsZXIucmVnaXN0ZXIgbWV0aG9kIHRvIHByZXZlbnRcbiAgICAgICAgLy8gb3B0aW9uIGRpcmVjdGl2ZXMgZnJvbSBhY2NpZGVudGFsbHkgcmVnaXN0ZXJpbmcgdGhlbXNlbHZlc1xuICAgICAgICAvLyAoYW5kIHVud2FudGVkICRkZXN0cm95IGhhbmRsZXJzIGV0Yy4pXG4gICAgICAgIGN0cmxzWzBdLnJlZ2lzdGVyT3B0aW9uID0gbm9vcDtcbiAgICAgIH0sXG4gICAgICBwb3N0OiBuZ09wdGlvbnNQb3N0TGlua1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUGx1cmFsaXplXG4gKiBAcmVzdHJpY3QgRUFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGBuZ1BsdXJhbGl6ZWAgaXMgYSBkaXJlY3RpdmUgdGhhdCBkaXNwbGF5cyBtZXNzYWdlcyBhY2NvcmRpbmcgdG8gZW4tVVMgbG9jYWxpemF0aW9uIHJ1bGVzLlxuICogVGhlc2UgcnVsZXMgYXJlIGJ1bmRsZWQgd2l0aCBhbmd1bGFyLmpzLCBidXQgY2FuIGJlIG92ZXJyaWRkZW5cbiAqIChzZWUge0BsaW5rIGd1aWRlL2kxOG4gQW5ndWxhciBpMThufSBkZXYgZ3VpZGUpLiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGRpcmVjdGl2ZVxuICogYnkgc3BlY2lmeWluZyB0aGUgbWFwcGluZ3MgYmV0d2VlblxuICogW3BsdXJhbCBjYXRlZ29yaWVzXShodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwpXG4gKiBhbmQgdGhlIHN0cmluZ3MgdG8gYmUgZGlzcGxheWVkLlxuICpcbiAqICMgUGx1cmFsIGNhdGVnb3JpZXMgYW5kIGV4cGxpY2l0IG51bWJlciBydWxlc1xuICogVGhlcmUgYXJlIHR3b1xuICogW3BsdXJhbCBjYXRlZ29yaWVzXShodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwpXG4gKiBpbiBBbmd1bGFyJ3MgZGVmYXVsdCBlbi1VUyBsb2NhbGU6IFwib25lXCIgYW5kIFwib3RoZXJcIi5cbiAqXG4gKiBXaGlsZSBhIHBsdXJhbCBjYXRlZ29yeSBtYXkgbWF0Y2ggbWFueSBudW1iZXJzIChmb3IgZXhhbXBsZSwgaW4gZW4tVVMgbG9jYWxlLCBcIm90aGVyXCIgY2FuIG1hdGNoXG4gKiBhbnkgbnVtYmVyIHRoYXQgaXMgbm90IDEpLCBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBjYW4gb25seSBtYXRjaCBvbmUgbnVtYmVyLiBGb3IgZXhhbXBsZSwgdGhlXG4gKiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3IgXCIzXCIgbWF0Y2hlcyB0aGUgbnVtYmVyIDMuIFRoZXJlIGFyZSBleGFtcGxlcyBvZiBwbHVyYWwgY2F0ZWdvcmllc1xuICogYW5kIGV4cGxpY2l0IG51bWJlciBydWxlcyB0aHJvdWdob3V0IHRoZSByZXN0IG9mIHRoaXMgZG9jdW1lbnRhdGlvbi5cbiAqXG4gKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplXG4gKiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGJ5IHByb3ZpZGluZyAyIGF0dHJpYnV0ZXM6IGBjb3VudGAgYW5kIGB3aGVuYC5cbiAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGF0dHJpYnV0ZSwgYG9mZnNldGAuXG4gKlxuICogVGhlIHZhbHVlIG9mIHRoZSBgY291bnRgIGF0dHJpYnV0ZSBjYW4gYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uXG4gKiBBbmd1bGFyIGV4cHJlc3Npb259OyB0aGVzZSBhcmUgZXZhbHVhdGVkIG9uIHRoZSBjdXJyZW50IHNjb3BlIGZvciBpdHMgYm91bmQgdmFsdWUuXG4gKlxuICogVGhlIGB3aGVuYCBhdHRyaWJ1dGUgc3BlY2lmaWVzIHRoZSBtYXBwaW5ncyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yaWVzIGFuZCB0aGUgYWN0dWFsXG4gKiBzdHJpbmcgdG8gYmUgZGlzcGxheWVkLiBUaGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBzaG91bGQgYmUgYSBKU09OIG9iamVjdC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIlxuICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7fSBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAqIDwvbmctcGx1cmFsaXplPlxuICpgYGBcbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSwgYFwiMDogTm9ib2R5IGlzIHZpZXdpbmcuXCJgIGlzIGFuIGV4cGxpY2l0IG51bWJlciBydWxlLiBJZiB5b3UgZGlkIG5vdFxuICogc3BlY2lmeSB0aGlzIHJ1bGUsIDAgd291bGQgYmUgbWF0Y2hlZCB0byB0aGUgXCJvdGhlclwiIGNhdGVnb3J5IGFuZCBcIjAgcGVvcGxlIGFyZSB2aWV3aW5nXCJcbiAqIHdvdWxkIGJlIHNob3duIGluc3RlYWQgb2YgXCJOb2JvZHkgaXMgdmlld2luZ1wiLiBZb3UgY2FuIHNwZWNpZnkgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUgZm9yXG4gKiBvdGhlciBudW1iZXJzLCBmb3IgZXhhbXBsZSAxMiwgc28gdGhhdCBpbnN0ZWFkIG9mIHNob3dpbmcgXCIxMiBwZW9wbGUgYXJlIHZpZXdpbmdcIiwgeW91IGNhblxuICogc2hvdyBcImEgZG96ZW4gcGVvcGxlIGFyZSB2aWV3aW5nXCIuXG4gKlxuICogWW91IGNhbiB1c2UgYSBzZXQgb2YgY2xvc2VkIGJyYWNlcyAoYHt9YCkgYXMgYSBwbGFjZWhvbGRlciBmb3IgdGhlIG51bWJlciB0aGF0IHlvdSB3YW50IHN1YnN0aXR1dGVkXG4gKiBpbnRvIHBsdXJhbGl6ZWQgc3RyaW5ncy4gSW4gdGhlIHByZXZpb3VzIGV4YW1wbGUsIEFuZ3VsYXIgd2lsbCByZXBsYWNlIGB7fWAgd2l0aFxuICogPHNwYW4gbmctbm9uLWJpbmRhYmxlPmB7e3BlcnNvbkNvdW50fX1gPC9zcGFuPi4gVGhlIGNsb3NlZCBicmFjZXMgYHt9YCBpcyBhIHBsYWNlaG9sZGVyXG4gKiBmb3IgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7bnVtYmVyRXhwcmVzc2lvbn19PC9zcGFuPi5cbiAqXG4gKiBJZiBubyBydWxlIGlzIGRlZmluZWQgZm9yIGEgY2F0ZWdvcnksIHRoZW4gYW4gZW1wdHkgc3RyaW5nIGlzIGRpc3BsYXllZCBhbmQgYSB3YXJuaW5nIGlzIGdlbmVyYXRlZC5cbiAqIE5vdGUgdGhhdCBzb21lIGxvY2FsZXMgZGVmaW5lIG1vcmUgY2F0ZWdvcmllcyB0aGFuIGBvbmVgIGFuZCBgb3RoZXJgLiBGb3IgZXhhbXBsZSwgZnItZnIgZGVmaW5lcyBgZmV3YCBhbmQgYG1hbnlgLlxuICpcbiAqICMgQ29uZmlndXJpbmcgbmdQbHVyYWxpemUgd2l0aCBvZmZzZXRcbiAqIFRoZSBgb2Zmc2V0YCBhdHRyaWJ1dGUgYWxsb3dzIGZ1cnRoZXIgY3VzdG9taXphdGlvbiBvZiBwbHVyYWxpemVkIHRleHQsIHdoaWNoIGNhbiByZXN1bHQgaW5cbiAqIGEgYmV0dGVyIHVzZXIgZXhwZXJpZW5jZS4gRm9yIGV4YW1wbGUsIGluc3RlYWQgb2YgdGhlIG1lc3NhZ2UgXCI0IHBlb3BsZSBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50XCIsXG4gKiB5b3UgbWlnaHQgZGlzcGxheSBcIkpvaG4sIEthdGUgYW5kIDIgb3RoZXJzIGFyZSB2aWV3aW5nIHRoaXMgZG9jdW1lbnRcIi5cbiAqIFRoZSBvZmZzZXQgYXR0cmlidXRlIGFsbG93cyB5b3UgdG8gb2Zmc2V0IGEgbnVtYmVyIGJ5IGFueSBkZXNpcmVkIHZhbHVlLlxuICogTGV0J3MgdGFrZSBhIGxvb2sgYXQgYW4gZXhhbXBsZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIiBvZmZzZXQ9MlxuICogICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnMSc6ICd7e3BlcnNvbjF9fSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnMic6ICd7e3BlcnNvbjF9fSBhbmQge3twZXJzb24yfX0gYXJlIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCB7fSBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAqIDwvbmctcGx1cmFsaXplPlxuICogYGBgXG4gKlxuICogTm90aWNlIHRoYXQgd2UgYXJlIHN0aWxsIHVzaW5nIHR3byBwbHVyYWwgY2F0ZWdvcmllcyhvbmUsIG90aGVyKSwgYnV0IHdlIGFkZGVkXG4gKiB0aHJlZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgMCwgMSBhbmQgMi5cbiAqIFdoZW4gb25lIHBlcnNvbiwgcGVyaGFwcyBKb2huLCB2aWV3cyB0aGUgZG9jdW1lbnQsIFwiSm9obiBpcyB2aWV3aW5nXCIgd2lsbCBiZSBzaG93bi5cbiAqIFdoZW4gdGhyZWUgcGVvcGxlIHZpZXcgdGhlIGRvY3VtZW50LCBubyBleHBsaWNpdCBudW1iZXIgcnVsZSBpcyBmb3VuZCwgc29cbiAqIGFuIG9mZnNldCBvZiAyIGlzIHRha2VuIG9mZiAzLCBhbmQgQW5ndWxhciB1c2VzIDEgdG8gZGVjaWRlIHRoZSBwbHVyYWwgY2F0ZWdvcnkuXG4gKiBJbiB0aGlzIGNhc2UsIHBsdXJhbCBjYXRlZ29yeSAnb25lJyBpcyBtYXRjaGVkIGFuZCBcIkpvaG4sIE1hcnkgYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmdcIlxuICogaXMgc2hvd24uXG4gKlxuICogTm90ZSB0aGF0IHdoZW4geW91IHNwZWNpZnkgb2Zmc2V0cywgeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yXG4gKiBudW1iZXJzIGZyb20gMCB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBvZmZzZXQuIElmIHlvdSB1c2UgYW4gb2Zmc2V0IG9mIDMsIGZvciBleGFtcGxlLFxuICogeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yIDAsIDEsIDIgYW5kIDMuIFlvdSBtdXN0IGFsc28gcHJvdmlkZSBwbHVyYWwgc3RyaW5ncyBmb3JcbiAqIHBsdXJhbCBjYXRlZ29yaWVzIFwib25lXCIgYW5kIFwib3RoZXJcIi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xleHByZXNzaW9ufSBjb3VudCBUaGUgdmFyaWFibGUgdG8gYmUgYm91bmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ30gd2hlbiBUaGUgbWFwcGluZyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yeSB0byBpdHMgY29ycmVzcG9uZGluZyBzdHJpbmdzLlxuICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIGRlZHVjdCBmcm9tIHRoZSB0b3RhbCBudW1iZXIuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJwbHVyYWxpemVFeGFtcGxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdwbHVyYWxpemVFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUucGVyc29uMSA9ICdJZ29yJztcbiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjIgPSAnTWlza28nO1xuICAgICAgICAgICAgICAkc2NvcGUucGVyc29uQ291bnQgPSAxO1xuICAgICAgICAgICAgfV0pO1xuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICA8bGFiZWw+UGVyc29uIDE6PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJwZXJzb24xXCIgdmFsdWU9XCJJZ29yXCIgLz48L2xhYmVsPjxici8+XG4gICAgICAgICAgPGxhYmVsPlBlcnNvbiAyOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uMlwiIHZhbHVlPVwiTWlza29cIiAvPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgICA8bGFiZWw+TnVtYmVyIG9mIFBlb3BsZTo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbkNvdW50XCIgdmFsdWU9XCIxXCIgLz48L2xhYmVsPjxici8+XG5cbiAgICAgICAgICA8IS0tLSBFeGFtcGxlIHdpdGggc2ltcGxlIHBsdXJhbGl6YXRpb24gcnVsZXMgZm9yIGVuIGxvY2FsZSAtLS0+XG4gICAgICAgICAgV2l0aG91dCBPZmZzZXQ6XG4gICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne30gcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gICAgICAgICAgPC9uZy1wbHVyYWxpemU+PGJyPlxuXG4gICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIG9mZnNldCAtLS0+XG4gICAgICAgICAgV2l0aCBPZmZzZXQoMik6XG4gICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCIgb2Zmc2V0PTJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMSc6ICd7e3BlcnNvbjF9fSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCB7fSBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAgICAgICAgICA8L25nLXBsdXJhbGl6ZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgc2hvdyBjb3JyZWN0IHBsdXJhbGl6ZWQgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHdpdGhvdXRPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMCk7XG4gICAgICAgICAgdmFyIHdpdGhPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMSk7XG4gICAgICAgICAgdmFyIGNvdW50SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb25Db3VudCcpKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMSBwZXJzb24gaXMgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IgaXMgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCcwJyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ05vYm9keSBpcyB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnTm9ib2R5IGlzIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMicpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCcyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IgYW5kIE1pc2tvIGFyZSB2aWV3aW5nLicpO1xuXG4gICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzMnKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMyBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yLCBNaXNrbyBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCc0Jyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzQgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciwgTWlza28gYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBzaG93IGRhdGEtYm91bmQgbmFtZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgd2l0aE9mZnNldCA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnbmctcGx1cmFsaXplJykpLmdldCgxKTtcbiAgICAgICAgICB2YXIgcGVyc29uQ291bnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb25Db3VudCcpKTtcbiAgICAgICAgICB2YXIgcGVyc29uMSA9IGVsZW1lbnQoYnkubW9kZWwoJ3BlcnNvbjEnKSk7XG4gICAgICAgICAgdmFyIHBlcnNvbjIgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb24yJykpO1xuICAgICAgICAgIHBlcnNvbkNvdW50LmNsZWFyKCk7XG4gICAgICAgICAgcGVyc29uQ291bnQuc2VuZEtleXMoJzQnKTtcbiAgICAgICAgICBwZXJzb24xLmNsZWFyKCk7XG4gICAgICAgICAgcGVyc29uMS5zZW5kS2V5cygnRGknKTtcbiAgICAgICAgICBwZXJzb24yLmNsZWFyKCk7XG4gICAgICAgICAgcGVyc29uMi5zZW5kS2V5cygnVm9qdGEnKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0RpLCBWb2p0YSBhbmQgMiBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nUGx1cmFsaXplRGlyZWN0aXZlID0gWyckbG9jYWxlJywgJyRpbnRlcnBvbGF0ZScsICckbG9nJywgZnVuY3Rpb24oJGxvY2FsZSwgJGludGVycG9sYXRlLCAkbG9nKSB7XG4gIHZhciBCUkFDRSA9IC97fS9nLFxuICAgICAgSVNfV0hFTiA9IC9ed2hlbihNaW51cyk/KC4rKSQvO1xuXG4gIHJldHVybiB7XG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHZhciBudW1iZXJFeHAgPSBhdHRyLmNvdW50LFxuICAgICAgICAgIHdoZW5FeHAgPSBhdHRyLiRhdHRyLndoZW4gJiYgZWxlbWVudC5hdHRyKGF0dHIuJGF0dHIud2hlbiksIC8vIHdlIGhhdmUge3t9fSBpbiBhdHRyc1xuICAgICAgICAgIG9mZnNldCA9IGF0dHIub2Zmc2V0IHx8IDAsXG4gICAgICAgICAgd2hlbnMgPSBzY29wZS4kZXZhbCh3aGVuRXhwKSB8fCB7fSxcbiAgICAgICAgICB3aGVuc0V4cEZucyA9IHt9LFxuICAgICAgICAgIHN0YXJ0U3ltYm9sID0gJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCksXG4gICAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLFxuICAgICAgICAgIGJyYWNlUmVwbGFjZW1lbnQgPSBzdGFydFN5bWJvbCArIG51bWJlckV4cCArICctJyArIG9mZnNldCArIGVuZFN5bWJvbCxcbiAgICAgICAgICB3YXRjaFJlbW92ZXIgPSBhbmd1bGFyLm5vb3AsXG4gICAgICAgICAgbGFzdENvdW50O1xuXG4gICAgICBmb3JFYWNoKGF0dHIsIGZ1bmN0aW9uKGV4cHJlc3Npb24sIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgdmFyIHRtcE1hdGNoID0gSVNfV0hFTi5leGVjKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICBpZiAodG1wTWF0Y2gpIHtcbiAgICAgICAgICB2YXIgd2hlbktleSA9ICh0bXBNYXRjaFsxXSA/ICctJyA6ICcnKSArIGxvd2VyY2FzZSh0bXBNYXRjaFsyXSk7XG4gICAgICAgICAgd2hlbnNbd2hlbktleV0gPSBlbGVtZW50LmF0dHIoYXR0ci4kYXR0clthdHRyaWJ1dGVOYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZm9yRWFjaCh3aGVucywgZnVuY3Rpb24oZXhwcmVzc2lvbiwga2V5KSB7XG4gICAgICAgIHdoZW5zRXhwRm5zW2tleV0gPSAkaW50ZXJwb2xhdGUoZXhwcmVzc2lvbi5yZXBsYWNlKEJSQUNFLCBicmFjZVJlcGxhY2VtZW50KSk7XG5cbiAgICAgIH0pO1xuXG4gICAgICBzY29wZS4kd2F0Y2gobnVtYmVyRXhwLCBmdW5jdGlvbiBuZ1BsdXJhbGl6ZVdhdGNoQWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICB2YXIgY291bnQgPSBwYXJzZUZsb2F0KG5ld1ZhbCk7XG4gICAgICAgIHZhciBjb3VudElzTmFOID0gaXNOYU4oY291bnQpO1xuXG4gICAgICAgIGlmICghY291bnRJc05hTiAmJiAhKGNvdW50IGluIHdoZW5zKSkge1xuICAgICAgICAgIC8vIElmIGFuIGV4cGxpY2l0IG51bWJlciBydWxlIHN1Y2ggYXMgMSwgMiwgMy4uLiBpcyBkZWZpbmVkLCBqdXN0IHVzZSBpdC5cbiAgICAgICAgICAvLyBPdGhlcndpc2UsIGNoZWNrIGl0IGFnYWluc3QgcGx1cmFsaXphdGlvbiBydWxlcyBpbiAkbG9jYWxlIHNlcnZpY2UuXG4gICAgICAgICAgY291bnQgPSAkbG9jYWxlLnBsdXJhbENhdChjb3VudCAtIG9mZnNldCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBib3RoIGBjb3VudGAgYW5kIGBsYXN0Q291bnRgIGFyZSBOYU4sIHdlIGRvbid0IG5lZWQgdG8gcmUtcmVnaXN0ZXIgYSB3YXRjaC5cbiAgICAgICAgLy8gSW4gSlMgYE5hTiAhPT0gTmFOYCwgc28gd2UgaGF2ZSB0byBleGxpY2l0bHkgY2hlY2suXG4gICAgICAgIGlmICgoY291bnQgIT09IGxhc3RDb3VudCkgJiYgIShjb3VudElzTmFOICYmIGlzTnVtYmVyKGxhc3RDb3VudCkgJiYgaXNOYU4obGFzdENvdW50KSkpIHtcbiAgICAgICAgICB3YXRjaFJlbW92ZXIoKTtcbiAgICAgICAgICB2YXIgd2hlbkV4cEZuID0gd2hlbnNFeHBGbnNbY291bnRdO1xuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh3aGVuRXhwRm4pKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgJGxvZy5kZWJ1ZyhcIm5nUGx1cmFsaXplOiBubyBydWxlIGRlZmluZWQgZm9yICdcIiArIGNvdW50ICsgXCInIGluIFwiICsgd2hlbkV4cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXRjaFJlbW92ZXIgPSBub29wO1xuICAgICAgICAgICAgdXBkYXRlRWxlbWVudFRleHQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2F0Y2hSZW1vdmVyID0gc2NvcGUuJHdhdGNoKHdoZW5FeHBGbiwgdXBkYXRlRWxlbWVudFRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0Q291bnQgPSBjb3VudDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnRUZXh0KG5ld1RleHQpIHtcbiAgICAgICAgZWxlbWVudC50ZXh0KG5ld1RleHQgfHwgJycpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUmVwZWF0XG4gKiBAbXVsdGlFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nUmVwZWF0YCBkaXJlY3RpdmUgaW5zdGFudGlhdGVzIGEgdGVtcGxhdGUgb25jZSBwZXIgaXRlbSBmcm9tIGEgY29sbGVjdGlvbi4gRWFjaCB0ZW1wbGF0ZVxuICogaW5zdGFuY2UgZ2V0cyBpdHMgb3duIHNjb3BlLCB3aGVyZSB0aGUgZ2l2ZW4gbG9vcCB2YXJpYWJsZSBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgY29sbGVjdGlvbiBpdGVtLFxuICogYW5kIGAkaW5kZXhgIGlzIHNldCB0byB0aGUgaXRlbSBpbmRleCBvciBrZXkuXG4gKlxuICogU3BlY2lhbCBwcm9wZXJ0aWVzIGFyZSBleHBvc2VkIG9uIHRoZSBsb2NhbCBzY29wZSBvZiBlYWNoIHRlbXBsYXRlIGluc3RhbmNlLCBpbmNsdWRpbmc6XG4gKlxuICogfCBWYXJpYWJsZSAgfCBUeXBlICAgICAgICAgICAgfCBEZXRhaWxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCBgJGluZGV4YCAgfCB7QHR5cGUgbnVtYmVyfSAgfCBpdGVyYXRvciBvZmZzZXQgb2YgdGhlIHJlcGVhdGVkIGVsZW1lbnQgKDAuLmxlbmd0aC0xKSAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBgJGZpcnN0YCAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGZpcnN0IGluIHRoZSBpdGVyYXRvci4gICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBgJG1pZGRsZWAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBsYXN0IGluIHRoZSBpdGVyYXRvci4gfFxuICogfCBgJGxhc3RgICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGxhc3QgaW4gdGhlIGl0ZXJhdG9yLiAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBgJGV2ZW5gICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSBpdGVyYXRvciBwb3NpdGlvbiBgJGluZGV4YCBpcyBldmVuIChvdGhlcndpc2UgZmFsc2UpLiAgICAgICAgICAgfFxuICogfCBgJG9kZGAgICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSBpdGVyYXRvciBwb3NpdGlvbiBgJGluZGV4YCBpcyBvZGQgKG90aGVyd2lzZSBmYWxzZSkuICAgICAgICAgICAgfFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAgIENyZWF0aW5nIGFsaWFzZXMgZm9yIHRoZXNlIHByb3BlcnRpZXMgaXMgcG9zc2libGUgd2l0aCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5pdCBgbmdJbml0YH0uXG4gKiAgIFRoaXMgbWF5IGJlIHVzZWZ1bCB3aGVuLCBmb3IgaW5zdGFuY2UsIG5lc3RpbmcgbmdSZXBlYXRzLlxuICogPC9kaXY+XG4gKlxuICpcbiAqICMgSXRlcmF0aW5nIG92ZXIgb2JqZWN0IHByb3BlcnRpZXNcbiAqXG4gKiBJdCBpcyBwb3NzaWJsZSB0byBnZXQgYG5nUmVwZWF0YCB0byBpdGVyYXRlIG92ZXIgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IHVzaW5nIHRoZSBmb2xsb3dpbmdcbiAqIHN5bnRheDpcbiAqXG4gKiBgYGBqc1xuICogPGRpdiBuZy1yZXBlYXQ9XCIoa2V5LCB2YWx1ZSkgaW4gbXlPYmpcIj4gLi4uIDwvZGl2PlxuICogYGBgXG4gKlxuICogWW91IG5lZWQgdG8gYmUgYXdhcmUgdGhhdCB0aGUgSmF2YVNjcmlwdCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IGRlZmluZSB0aGUgb3JkZXIgb2Yga2V5c1xuICogcmV0dXJuZWQgZm9yIGFuIG9iamVjdC4gKFRvIG1pdGlnYXRlIHRoaXMgaW4gQW5ndWxhciAxLjMgdGhlIGBuZ1JlcGVhdGAgZGlyZWN0aXZlXG4gKiB1c2VkIHRvIHNvcnQgdGhlIGtleXMgYWxwaGFiZXRpY2FsbHkuKVxuICpcbiAqIFZlcnNpb24gMS40IHJlbW92ZWQgdGhlIGFscGhhYmV0aWMgc29ydGluZy4gV2Ugbm93IHJlbHkgb24gdGhlIG9yZGVyIHJldHVybmVkIGJ5IHRoZSBicm93c2VyXG4gKiB3aGVuIHJ1bm5pbmcgYGZvciBrZXkgaW4gbXlPYmpgLiBJdCBzZWVtcyB0aGF0IGJyb3dzZXJzIGdlbmVyYWxseSBmb2xsb3cgdGhlIHN0cmF0ZWd5IG9mIHByb3ZpZGluZ1xuICoga2V5cyBpbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSB3ZXJlIGRlZmluZWQsIGFsdGhvdWdoIHRoZXJlIGFyZSBleGNlcHRpb25zIHdoZW4ga2V5cyBhcmUgZGVsZXRlZFxuICogYW5kIHJlaW5zdGF0ZWQuIFNlZSB0aGUgW01ETiBwYWdlIG9uIGBkZWxldGVgIGZvciBtb3JlIGluZm9dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9kZWxldGUjQ3Jvc3MtYnJvd3Nlcl9ub3RlcykuXG4gKlxuICogSWYgdGhpcyBpcyBub3QgZGVzaXJlZCwgdGhlIHJlY29tbWVuZGVkIHdvcmthcm91bmQgaXMgdG8gY29udmVydCB5b3VyIG9iamVjdCBpbnRvIGFuIGFycmF5XG4gKiB0aGF0IGlzIHNvcnRlZCBpbnRvIHRoZSBvcmRlciB0aGF0IHlvdSBwcmVmZXIgYmVmb3JlIHByb3ZpZGluZyBpdCB0byBgbmdSZXBlYXRgLiAgWW91IGNvdWxkXG4gKiBkbyB0aGlzIHdpdGggYSBmaWx0ZXIgc3VjaCBhcyBbdG9BcnJheUZpbHRlcl0oaHR0cDovL25nbW9kdWxlcy5vcmcvbW9kdWxlcy9hbmd1bGFyLXRvQXJyYXlGaWx0ZXIpXG4gKiBvciBpbXBsZW1lbnQgYSBgJHdhdGNoYCBvbiB0aGUgb2JqZWN0IHlvdXJzZWxmLlxuICpcbiAqXG4gKiAjIFRyYWNraW5nIGFuZCBEdXBsaWNhdGVzXG4gKlxuICogYG5nUmVwZWF0YCB1c2VzIHtAbGluayAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaENvbGxlY3Rpb24gJHdhdGNoQ29sbGVjdGlvbn0gdG8gZGV0ZWN0IGNoYW5nZXMgaW5cbiAqIHRoZSBjb2xsZWN0aW9uLiBXaGVuIGEgY2hhbmdlIGhhcHBlbnMsIG5nUmVwZWF0IHRoZW4gbWFrZXMgdGhlIGNvcnJlc3BvbmRpbmcgY2hhbmdlcyB0byB0aGUgRE9NOlxuICpcbiAqICogV2hlbiBhbiBpdGVtIGlzIGFkZGVkLCBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgdGVtcGxhdGUgaXMgYWRkZWQgdG8gdGhlIERPTS5cbiAqICogV2hlbiBhbiBpdGVtIGlzIHJlbW92ZWQsIGl0cyB0ZW1wbGF0ZSBpbnN0YW5jZSBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAqICogV2hlbiBpdGVtcyBhcmUgcmVvcmRlcmVkLCB0aGVpciByZXNwZWN0aXZlIHRlbXBsYXRlcyBhcmUgcmVvcmRlcmVkIGluIHRoZSBET00uXG4gKlxuICogVG8gbWluaW1pemUgY3JlYXRpb24gb2YgRE9NIGVsZW1lbnRzLCBgbmdSZXBlYXRgIHVzZXMgYSBmdW5jdGlvblxuICogdG8gXCJrZWVwIHRyYWNrXCIgb2YgYWxsIGl0ZW1zIGluIHRoZSBjb2xsZWN0aW9uIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIERPTSBlbGVtZW50cy5cbiAqIEZvciBleGFtcGxlLCBpZiBhbiBpdGVtIGlzIGFkZGVkIHRvIHRoZSBjb2xsZWN0aW9uLCBuZ1JlcGVhdCB3aWxsIGtub3cgdGhhdCBhbGwgb3RoZXIgaXRlbXNcbiAqIGFscmVhZHkgaGF2ZSBET00gZWxlbWVudHMsIGFuZCB3aWxsIG5vdCByZS1yZW5kZXIgdGhlbS5cbiAqXG4gKiBUaGUgZGVmYXVsdCB0cmFja2luZyBmdW5jdGlvbiAod2hpY2ggdHJhY2tzIGl0ZW1zIGJ5IHRoZWlyIGlkZW50aXR5KSBkb2VzIG5vdCBhbGxvd1xuICogZHVwbGljYXRlIGl0ZW1zIGluIGFycmF5cy4gVGhpcyBpcyBiZWNhdXNlIHdoZW4gdGhlcmUgYXJlIGR1cGxpY2F0ZXMsIGl0IGlzIG5vdCBwb3NzaWJsZVxuICogdG8gbWFpbnRhaW4gYSBvbmUtdG8tb25lIG1hcHBpbmcgYmV0d2VlbiBjb2xsZWN0aW9uIGl0ZW1zIGFuZCBET00gZWxlbWVudHMuXG4gKlxuICogSWYgeW91IGRvIG5lZWQgdG8gcmVwZWF0IGR1cGxpY2F0ZSBpdGVtcywgeW91IGNhbiBzdWJzdGl0dXRlIHRoZSBkZWZhdWx0IHRyYWNraW5nIGJlaGF2aW9yXG4gKiB3aXRoIHlvdXIgb3duIHVzaW5nIHRoZSBgdHJhY2sgYnlgIGV4cHJlc3Npb24uXG4gKlxuICogRm9yIGV4YW1wbGUsIHlvdSBtYXkgdHJhY2sgaXRlbXMgYnkgdGhlIGluZGV4IG9mIGVhY2ggaXRlbSBpbiB0aGUgY29sbGVjdGlvbiwgdXNpbmcgdGhlXG4gKiBzcGVjaWFsIHNjb3BlIHByb3BlcnR5IGAkaW5kZXhgOlxuICogYGBgaHRtbFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJuIGluIFs0MiwgNDIsIDQzLCA0M10gdHJhY2sgYnkgJGluZGV4XCI+XG4gKiAgICAgIHt7bn19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFlvdSBtYXkgYWxzbyB1c2UgYXJiaXRyYXJ5IGV4cHJlc3Npb25zIGluIGB0cmFjayBieWAsIGluY2x1ZGluZyByZWZlcmVuY2VzIHRvIGN1c3RvbSBmdW5jdGlvbnNcbiAqIG9uIHRoZSBzY29wZTpcbiAqIGBgYGh0bWxcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwibiBpbiBbNDIsIDQyLCA0MywgNDNdIHRyYWNrIGJ5IG15VHJhY2tpbmdGdW5jdGlvbihuKVwiPlxuICogICAgICB7e259fVxuICogICAgPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPlxuICogSWYgeW91IGFyZSB3b3JraW5nIHdpdGggb2JqZWN0cyB0aGF0IGhhdmUgYW4gaWRlbnRpZmllciBwcm9wZXJ0eSwgeW91IHNob3VsZCB0cmFja1xuICogYnkgdGhlIGlkZW50aWZpZXIgaW5zdGVhZCBvZiB0aGUgd2hvbGUgb2JqZWN0LiBTaG91bGQgeW91IHJlbG9hZCB5b3VyIGRhdGEgbGF0ZXIsIGBuZ1JlcGVhdGBcbiAqIHdpbGwgbm90IGhhdmUgdG8gcmVidWlsZCB0aGUgRE9NIGVsZW1lbnRzIGZvciBpdGVtcyBpdCBoYXMgYWxyZWFkeSByZW5kZXJlZCwgZXZlbiBpZiB0aGVcbiAqIEphdmFTY3JpcHQgb2JqZWN0cyBpbiB0aGUgY29sbGVjdGlvbiBoYXZlIGJlZW4gc3Vic3RpdHV0ZWQgZm9yIG5ldyBvbmVzLiBGb3IgbGFyZ2UgY29sbGVjdGlvbnMsXG4gKiB0aGlzIHNpZ25pZmluY2FudGx5IGltcHJvdmVzIHJlbmRlcmluZyBwZXJmb3JtYW5jZS4gSWYgeW91IGRvbid0IGhhdmUgYSB1bmlxdWUgaWRlbnRpZmllcixcbiAqIGB0cmFjayBieSAkaW5kZXhgIGNhbiBhbHNvIHByb3ZpZGUgYSBwZXJmb3JtYW5jZSBib29zdC5cbiAqIDwvZGl2PlxuICogYGBgaHRtbFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJtb2RlbCBpbiBjb2xsZWN0aW9uIHRyYWNrIGJ5IG1vZGVsLmlkXCI+XG4gKiAgICAgIHt7bW9kZWwubmFtZX19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFdoZW4gbm8gYHRyYWNrIGJ5YCBleHByZXNzaW9uIGlzIHByb3ZpZGVkLCBpdCBpcyBlcXVpdmFsZW50IHRvIHRyYWNraW5nIGJ5IHRoZSBidWlsdC1pblxuICogYCRpZGAgZnVuY3Rpb24sIHdoaWNoIHRyYWNrcyBpdGVtcyBieSB0aGVpciBpZGVudGl0eTpcbiAqIGBgYGh0bWxcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwib2JqIGluIGNvbGxlY3Rpb24gdHJhY2sgYnkgJGlkKG9iailcIj5cbiAqICAgICAge3tvYmoucHJvcH19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogYHRyYWNrIGJ5YCBtdXN0IGFsd2F5cyBiZSB0aGUgbGFzdCBleHByZXNzaW9uOlxuICogPC9kaXY+XG4gKiBgYGBcbiAqIDxkaXYgbmctcmVwZWF0PVwibW9kZWwgaW4gY29sbGVjdGlvbiB8IG9yZGVyQnk6ICdpZCcgYXMgZmlsdGVyZWRfcmVzdWx0IHRyYWNrIGJ5IG1vZGVsLmlkXCI+XG4gKiAgICAge3ttb2RlbC5uYW1lfX1cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogIyBTcGVjaWFsIHJlcGVhdCBzdGFydCBhbmQgZW5kIHBvaW50c1xuICogVG8gcmVwZWF0IGEgc2VyaWVzIG9mIGVsZW1lbnRzIGluc3RlYWQgb2YganVzdCBvbmUgcGFyZW50IGVsZW1lbnQsIG5nUmVwZWF0IChhcyB3ZWxsIGFzIG90aGVyIG5nIGRpcmVjdGl2ZXMpIHN1cHBvcnRzIGV4dGVuZGluZ1xuICogdGhlIHJhbmdlIG9mIHRoZSByZXBlYXRlciBieSBkZWZpbmluZyBleHBsaWNpdCBzdGFydCBhbmQgZW5kIHBvaW50cyBieSB1c2luZyAqKm5nLXJlcGVhdC1zdGFydCoqIGFuZCAqKm5nLXJlcGVhdC1lbmQqKiByZXNwZWN0aXZlbHkuXG4gKiBUaGUgKipuZy1yZXBlYXQtc3RhcnQqKiBkaXJlY3RpdmUgd29ya3MgdGhlIHNhbWUgYXMgKipuZy1yZXBlYXQqKiwgYnV0IHdpbGwgcmVwZWF0IGFsbCB0aGUgSFRNTCBjb2RlIChpbmNsdWRpbmcgdGhlIHRhZyBpdCdzIGRlZmluZWQgb24pXG4gKiB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBlbmRpbmcgSFRNTCB0YWcgd2hlcmUgKipuZy1yZXBlYXQtZW5kKiogaXMgcGxhY2VkLlxuICpcbiAqIFRoZSBleGFtcGxlIGJlbG93IG1ha2VzIHVzZSBvZiB0aGlzIGZlYXR1cmU6XG4gKiBgYGBodG1sXG4gKiAgIDxoZWFkZXIgbmctcmVwZWF0LXN0YXJ0PVwiaXRlbSBpbiBpdGVtc1wiPlxuICogICAgIEhlYWRlciB7eyBpdGVtIH19XG4gKiAgIDwvaGVhZGVyPlxuICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICogICAgIEJvZHkge3sgaXRlbSB9fVxuICogICA8L2Rpdj5cbiAqICAgPGZvb3RlciBuZy1yZXBlYXQtZW5kPlxuICogICAgIEZvb3RlciB7eyBpdGVtIH19XG4gKiAgIDwvZm9vdGVyPlxuICogYGBgXG4gKlxuICogQW5kIHdpdGggYW4gaW5wdXQgb2Yge0B0eXBlIFsnQScsJ0InXX0gZm9yIHRoZSBpdGVtcyB2YXJpYWJsZSBpbiB0aGUgZXhhbXBsZSBhYm92ZSwgdGhlIG91dHB1dCB3aWxsIGV2YWx1YXRlIHRvOlxuICogYGBgaHRtbFxuICogICA8aGVhZGVyPlxuICogICAgIEhlYWRlciBBXG4gKiAgIDwvaGVhZGVyPlxuICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICogICAgIEJvZHkgQVxuICogICA8L2Rpdj5cbiAqICAgPGZvb3Rlcj5cbiAqICAgICBGb290ZXIgQVxuICogICA8L2Zvb3Rlcj5cbiAqICAgPGhlYWRlcj5cbiAqICAgICBIZWFkZXIgQlxuICogICA8L2hlYWRlcj5cbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAqICAgICBCb2R5IEJcbiAqICAgPC9kaXY+XG4gKiAgIDxmb290ZXI+XG4gKiAgICAgRm9vdGVyIEJcbiAqICAgPC9mb290ZXI+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY3VzdG9tIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGZvciBuZ1JlcGVhdCBhbHNvIHN1cHBvcnQgYWxsIG90aGVyIEhUTUwgZGlyZWN0aXZlIHN5bnRheCBmbGF2b3JzIHByb3ZpZGVkIGluIEFuZ3VsYXJKUyAoc3VjaFxuICogYXMgKipkYXRhLW5nLXJlcGVhdC1zdGFydCoqLCAqKngtbmctcmVwZWF0LXN0YXJ0KiogYW5kICoqbmc6cmVwZWF0LXN0YXJ0KiopLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiAqKi5lbnRlcioqIC0gd2hlbiBhIG5ldyBpdGVtIGlzIGFkZGVkIHRvIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyByZXZlYWxlZCBhZnRlciBhIGZpbHRlclxuICpcbiAqICoqLmxlYXZlKiogLSB3aGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyBmaWx0ZXJlZCBvdXRcbiAqXG4gKiAqKi5tb3ZlKiogLSB3aGVuIGFuIGFkamFjZW50IGl0ZW0gaXMgZmlsdGVyZWQgb3V0IGNhdXNpbmcgYSByZW9yZGVyIG9yIHdoZW4gdGhlIGl0ZW0gY29udGVudHMgYXJlIHJlb3JkZXJlZFxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgMTAwMFxuICogQHBhcmFtIHtyZXBlYXRfZXhwcmVzc2lvbn0gbmdSZXBlYXQgVGhlIGV4cHJlc3Npb24gaW5kaWNhdGluZyBob3cgdG8gZW51bWVyYXRlIGEgY29sbGVjdGlvbi4gVGhlc2VcbiAqICAgZm9ybWF0cyBhcmUgY3VycmVudGx5IHN1cHBvcnRlZDpcbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSB2YXJpYWJsZSBpcyB0aGUgdXNlciBkZWZpbmVkIGxvb3AgdmFyaWFibGUgYW5kIGBleHByZXNzaW9uYFxuICogICAgIGlzIGEgc2NvcGUgZXhwcmVzc2lvbiBnaXZpbmcgdGhlIGNvbGxlY3Rpb24gdG8gZW51bWVyYXRlLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGFsYnVtIGluIGFydGlzdC5hbGJ1bXNgLlxuICpcbiAqICAgKiBgKGtleSwgdmFsdWUpIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSBga2V5YCBhbmQgYHZhbHVlYCBjYW4gYmUgYW55IHVzZXIgZGVmaW5lZCBpZGVudGlmaWVycyxcbiAqICAgICBhbmQgYGV4cHJlc3Npb25gIGlzIHRoZSBzY29wZSBleHByZXNzaW9uIGdpdmluZyB0aGUgY29sbGVjdGlvbiB0byBlbnVtZXJhdGUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgKG5hbWUsIGFnZSkgaW4geydhZGFtJzoxMCwgJ2FtYWxpZSc6MTJ9YC5cbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb24gdHJhY2sgYnkgdHJhY2tpbmdfZXhwcmVzc2lvbmAg4oCTIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIHRyYWNraW5nIGV4cHJlc3Npb25cbiAqICAgICB3aGljaCBjYW4gYmUgdXNlZCB0byBhc3NvY2lhdGUgdGhlIG9iamVjdHMgaW4gdGhlIGNvbGxlY3Rpb24gd2l0aCB0aGUgRE9NIGVsZW1lbnRzLiBJZiBubyB0cmFja2luZyBleHByZXNzaW9uXG4gKiAgICAgaXMgc3BlY2lmaWVkLCBuZy1yZXBlYXQgYXNzb2NpYXRlcyBlbGVtZW50cyBieSBpZGVudGl0eS4gSXQgaXMgYW4gZXJyb3IgdG8gaGF2ZVxuICogICAgIG1vcmUgdGhhbiBvbmUgdHJhY2tpbmcgZXhwcmVzc2lvbiB2YWx1ZSByZXNvbHZlIHRvIHRoZSBzYW1lIGtleS4gKFRoaXMgd291bGQgbWVhbiB0aGF0IHR3byBkaXN0aW5jdCBvYmplY3RzIGFyZVxuICogICAgIG1hcHBlZCB0byB0aGUgc2FtZSBET00gZWxlbWVudCwgd2hpY2ggaXMgbm90IHBvc3NpYmxlLilcbiAqXG4gKiAgICAgTm90ZSB0aGF0IHRoZSB0cmFja2luZyBleHByZXNzaW9uIG11c3QgY29tZSBsYXN0LCBhZnRlciBhbnkgZmlsdGVycywgYW5kIHRoZSBhbGlhcyBleHByZXNzaW9uLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXNgIGlzIGVxdWl2YWxlbnQgdG8gYGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgJGlkKGl0ZW0pYC4gVGhpcyBpbXBsaWVzIHRoYXQgdGhlIERPTSBlbGVtZW50c1xuICogICAgIHdpbGwgYmUgYXNzb2NpYXRlZCBieSBpdGVtIGlkZW50aXR5IGluIHRoZSBhcnJheS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5ICRpZChpdGVtKWAuIEEgYnVpbHQgaW4gYCRpZCgpYCBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBhc3NpZ24gYSB1bmlxdWVcbiAqICAgICBgJCRoYXNoS2V5YCBwcm9wZXJ0eSB0byBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5LiBUaGlzIHByb3BlcnR5IGlzIHRoZW4gdXNlZCBhcyBhIGtleSB0byBhc3NvY2lhdGVkIERPTSBlbGVtZW50c1xuICogICAgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgaXRlbSBpbiB0aGUgYXJyYXkgYnkgaWRlbnRpdHkuIE1vdmluZyB0aGUgc2FtZSBvYmplY3QgaW4gYXJyYXkgd291bGQgbW92ZSB0aGUgRE9NXG4gKiAgICAgZWxlbWVudCBpbiB0aGUgc2FtZSB3YXkgaW4gdGhlIERPTS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgdHlwaWNhbCBwYXR0ZXJuIHdoZW4gdGhlIGl0ZW1zIGNvbWUgZnJvbSB0aGUgZGF0YWJhc2UuIEluIHRoaXNcbiAqICAgICBjYXNlIHRoZSBvYmplY3QgaWRlbnRpdHkgZG9lcyBub3QgbWF0dGVyLiBUd28gb2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlcXVpdmFsZW50IGFzIGxvbmcgYXMgdGhlaXIgYGlkYFxuICogICAgIHByb3BlcnR5IGlzIHNhbWUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjpzZWFyY2hUZXh0IHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgcGF0dGVybiB0aGF0IG1pZ2h0IGJlIHVzZWQgdG8gYXBwbHkgYSBmaWx0ZXJcbiAqICAgICB0byBpdGVtcyBpbiBjb25qdW5jdGlvbiB3aXRoIGEgdHJhY2tpbmcgZXhwcmVzc2lvbi5cbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb24gYXMgYWxpYXNfZXhwcmVzc2lvbmAg4oCTIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGFsaWFzIGV4cHJlc3Npb24gd2hpY2ggd2lsbCB0aGVuIHN0b3JlIHRoZVxuICogICAgIGludGVybWVkaWF0ZSByZXN1bHRzIG9mIHRoZSByZXBlYXRlciBhZnRlciB0aGUgZmlsdGVycyBoYXZlIGJlZW4gYXBwbGllZC4gVHlwaWNhbGx5IHRoaXMgaXMgdXNlZCB0byByZW5kZXIgYSBzcGVjaWFsIG1lc3NhZ2VcbiAqICAgICB3aGVuIGEgZmlsdGVyIGlzIGFjdGl2ZSBvbiB0aGUgcmVwZWF0ZXIsIGJ1dCB0aGUgZmlsdGVyZWQgcmVzdWx0IHNldCBpcyBlbXB0eS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHwgZmlsdGVyOnggYXMgcmVzdWx0c2Agd2lsbCBzdG9yZSB0aGUgZnJhZ21lbnQgb2YgdGhlIHJlcGVhdGVkIGl0ZW1zIGFzIGByZXN1bHRzYCwgYnV0IG9ubHkgYWZ0ZXJcbiAqICAgICB0aGUgaXRlbXMgaGF2ZSBiZWVuIHByb2Nlc3NlZCB0aHJvdWdoIHRoZSBmaWx0ZXIuXG4gKlxuICogICAgIFBsZWFzZSBub3RlIHRoYXQgYGFzIFt2YXJpYWJsZSBuYW1lXSBpcyBub3QgYW4gb3BlcmF0b3IgYnV0IHJhdGhlciBhIHBhcnQgb2YgbmdSZXBlYXQgbWljcm8tc3ludGF4IHNvIGl0IGNhbiBiZSB1c2VkIG9ubHkgYXQgdGhlIGVuZFxuICogICAgIChhbmQgbm90IGFzIG9wZXJhdG9yLCBpbnNpZGUgYW4gZXhwcmVzc2lvbikuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlciA6IHggfCBvcmRlckJ5IDogb3JkZXIgfCBsaW1pdFRvIDogbGltaXQgYXMgcmVzdWx0c2AgLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGlzIGV4YW1wbGUgaW5pdGlhbGl6ZXMgdGhlIHNjb3BlIHRvIGEgbGlzdCBvZiBuYW1lcyBhbmRcbiAqIHRoZW4gdXNlcyBgbmdSZXBlYXRgIHRvIGRpc3BsYXkgZXZlcnkgcGVyc29uOlxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1pbml0PVwiZnJpZW5kcyA9IFtcbiAgICAgICAge25hbWU6J0pvaG4nLCBhZ2U6MjUsIGdlbmRlcjonYm95J30sXG4gICAgICAgIHtuYW1lOidKZXNzaWUnLCBhZ2U6MzAsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICB7bmFtZTonSm9oYW5uYScsIGFnZToyOCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgIHtuYW1lOidKb3knLCBhZ2U6MTUsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICB7bmFtZTonTWFyeScsIGFnZToyOCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgIHtuYW1lOidQZXRlcicsIGFnZTo5NSwgZ2VuZGVyOidib3knfSxcbiAgICAgICAge25hbWU6J1NlYmFzdGlhbicsIGFnZTo1MCwgZ2VuZGVyOidib3knfSxcbiAgICAgICAge25hbWU6J0VyaWthJywgYWdlOjI3LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAge25hbWU6J1BhdHJpY2snLCBhZ2U6NDAsIGdlbmRlcjonYm95J30sXG4gICAgICAgIHtuYW1lOidTYW1hbnRoYScsIGFnZTo2MCwgZ2VuZGVyOidnaXJsJ31cbiAgICAgIF1cIj5cbiAgICAgICAgSSBoYXZlIHt7ZnJpZW5kcy5sZW5ndGh9fSBmcmllbmRzLiBUaGV5IGFyZTpcbiAgICAgICAgPGlucHV0IHR5cGU9XCJzZWFyY2hcIiBuZy1tb2RlbD1cInFcIiBwbGFjZWhvbGRlcj1cImZpbHRlciBmcmllbmRzLi4uXCIgYXJpYS1sYWJlbD1cImZpbHRlciBmcmllbmRzXCIgLz5cbiAgICAgICAgPHVsIGNsYXNzPVwiZXhhbXBsZS1hbmltYXRlLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxsaSBjbGFzcz1cImFuaW1hdGUtcmVwZWF0XCIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBmaWx0ZXI6cSBhcyByZXN1bHRzXCI+XG4gICAgICAgICAgICBbe3skaW5kZXggKyAxfX1dIHt7ZnJpZW5kLm5hbWV9fSB3aG8gaXMge3tmcmllbmQuYWdlfX0geWVhcnMgb2xkLlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPGxpIGNsYXNzPVwiYW5pbWF0ZS1yZXBlYXRcIiBuZy1pZj1cInJlc3VsdHMubGVuZ3RoID09IDBcIj5cbiAgICAgICAgICAgIDxzdHJvbmc+Tm8gcmVzdWx0cyBmb3VuZC4uLjwvc3Ryb25nPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuZXhhbXBsZS1hbmltYXRlLWNvbnRhaW5lciB7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGxpc3Qtc3R5bGU6bm9uZTtcbiAgICAgICAgbWFyZ2luOjA7XG4gICAgICAgIHBhZGRpbmc6MCAxMHB4O1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQge1xuICAgICAgICBsaW5lLWhlaWdodDo0MHB4O1xuICAgICAgICBsaXN0LXN0eWxlOm5vbmU7XG4gICAgICAgIGJveC1zaXppbmc6Ym9yZGVyLWJveDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUge1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1tb3ZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyIHtcbiAgICAgICAgb3BhY2l0eTowO1xuICAgICAgICBtYXgtaGVpZ2h0OjA7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1tb3ZlLm5nLW1vdmUtYWN0aXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gICAgICAgIG9wYWNpdHk6MTtcbiAgICAgICAgbWF4LWhlaWdodDo0MHB4O1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgZnJpZW5kcyA9IGVsZW1lbnQuYWxsKGJ5LnJlcGVhdGVyKCdmcmllbmQgaW4gZnJpZW5kcycpKTtcblxuICAgICAgaXQoJ3Nob3VsZCByZW5kZXIgaW5pdGlhbCBkYXRhIHNldCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5jb3VudCgpKS50b0JlKDEwKTtcbiAgICAgICAgZXhwZWN0KGZyaWVuZHMuZ2V0KDApLmdldFRleHQoKSkudG9FcXVhbCgnWzFdIEpvaG4gd2hvIGlzIDI1IHllYXJzIG9sZC4nKTtcbiAgICAgICAgZXhwZWN0KGZyaWVuZHMuZ2V0KDEpLmdldFRleHQoKSkudG9FcXVhbCgnWzJdIEplc3NpZSB3aG8gaXMgMzAgeWVhcnMgb2xkLicpO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5sYXN0KCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMTBdIFNhbWFudGhhIHdobyBpcyA2MCB5ZWFycyBvbGQuJyk7XG4gICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2ZyaWVuZHMubGVuZ3RoJykpLmdldFRleHQoKSlcbiAgICAgICAgICAgIC50b01hdGNoKFwiSSBoYXZlIDEwIGZyaWVuZHMuIFRoZXkgYXJlOlwiKTtcbiAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgcmVwZWF0ZXIgd2hlbiBmaWx0ZXIgcHJlZGljYXRlIGNoYW5nZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApO1xuXG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdxJykpLnNlbmRLZXlzKCdtYScpO1xuXG4gICAgICAgICBleHBlY3QoZnJpZW5kcy5jb3VudCgpKS50b0JlKDIpO1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMuZ2V0KDApLmdldFRleHQoKSkudG9FcXVhbCgnWzFdIE1hcnkgd2hvIGlzIDI4IHllYXJzIG9sZC4nKTtcbiAgICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1syXSBTYW1hbnRoYSB3aG8gaXMgNjAgeWVhcnMgb2xkLicpO1xuICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nUmVwZWF0RGlyZWN0aXZlID0gWyckcGFyc2UnLCAnJGFuaW1hdGUnLCBmdW5jdGlvbigkcGFyc2UsICRhbmltYXRlKSB7XG4gIHZhciBOR19SRU1PVkVEID0gJyQkTkdfUkVNT1ZFRCc7XG4gIHZhciBuZ1JlcGVhdE1pbkVyciA9IG1pbkVycignbmdSZXBlYXQnKTtcblxuICB2YXIgdXBkYXRlU2NvcGUgPSBmdW5jdGlvbihzY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgYXJyYXlMZW5ndGgpIHtcbiAgICAvLyBUT0RPKHBlcmYpOiBnZW5lcmF0ZSBzZXR0ZXJzIHRvIHNoYXZlIG9mZiB+NDBtcyBvciAxLTEuNSVcbiAgICBzY29wZVt2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7XG4gICAgaWYgKGtleUlkZW50aWZpZXIpIHNjb3BlW2tleUlkZW50aWZpZXJdID0ga2V5O1xuICAgIHNjb3BlLiRpbmRleCA9IGluZGV4O1xuICAgIHNjb3BlLiRmaXJzdCA9IChpbmRleCA9PT0gMCk7XG4gICAgc2NvcGUuJGxhc3QgPSAoaW5kZXggPT09IChhcnJheUxlbmd0aCAtIDEpKTtcbiAgICBzY29wZS4kbWlkZGxlID0gIShzY29wZS4kZmlyc3QgfHwgc2NvcGUuJGxhc3QpO1xuICAgIC8vIGpzaGludCBiaXR3aXNlOiBmYWxzZVxuICAgIHNjb3BlLiRvZGQgPSAhKHNjb3BlLiRldmVuID0gKGluZGV4JjEpID09PSAwKTtcbiAgICAvLyBqc2hpbnQgYml0d2lzZTogdHJ1ZVxuICB9O1xuXG4gIHZhciBnZXRCbG9ja1N0YXJ0ID0gZnVuY3Rpb24oYmxvY2spIHtcbiAgICByZXR1cm4gYmxvY2suY2xvbmVbMF07XG4gIH07XG5cbiAgdmFyIGdldEJsb2NrRW5kID0gZnVuY3Rpb24oYmxvY2spIHtcbiAgICByZXR1cm4gYmxvY2suY2xvbmVbYmxvY2suY2xvbmUubGVuZ3RoIC0gMV07XG4gIH07XG5cblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgICBwcmlvcml0eTogMTAwMCxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICAkJHRsYjogdHJ1ZSxcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ1JlcGVhdENvbXBpbGUoJGVsZW1lbnQsICRhdHRyKSB7XG4gICAgICB2YXIgZXhwcmVzc2lvbiA9ICRhdHRyLm5nUmVwZWF0O1xuICAgICAgdmFyIG5nUmVwZWF0RW5kQ29tbWVudCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJyBlbmQgbmdSZXBlYXQ6ICcgKyBleHByZXNzaW9uICsgJyAnKTtcblxuICAgICAgdmFyIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaCgvXlxccyooW1xcc1xcU10rPylcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/XFxzKiQvKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWV4cCcsIFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mICdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fWyB0cmFjayBieSBfaWRfXScgYnV0IGdvdCAnezB9Jy5cIixcbiAgICAgICAgICAgIGV4cHJlc3Npb24pO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGhzID0gbWF0Y2hbMV07XG4gICAgICB2YXIgcmhzID0gbWF0Y2hbMl07XG4gICAgICB2YXIgYWxpYXNBcyA9IG1hdGNoWzNdO1xuICAgICAgdmFyIHRyYWNrQnlFeHAgPSBtYXRjaFs0XTtcblxuICAgICAgbWF0Y2ggPSBsaHMubWF0Y2goL14oPzooXFxzKltcXCRcXHddKyl8XFwoXFxzKihbXFwkXFx3XSspXFxzKixcXHMqKFtcXCRcXHddKylcXHMqXFwpKSQvKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWlkZXhwJywgXCInX2l0ZW1fJyBpbiAnX2l0ZW1fIGluIF9jb2xsZWN0aW9uXycgc2hvdWxkIGJlIGFuIGlkZW50aWZpZXIgb3IgJyhfa2V5XywgX3ZhbHVlXyknIGV4cHJlc3Npb24sIGJ1dCBnb3QgJ3swfScuXCIsXG4gICAgICAgICAgICBsaHMpO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlSWRlbnRpZmllciA9IG1hdGNoWzNdIHx8IG1hdGNoWzFdO1xuICAgICAgdmFyIGtleUlkZW50aWZpZXIgPSBtYXRjaFsyXTtcblxuICAgICAgaWYgKGFsaWFzQXMgJiYgKCEvXlskYS16QS1aX11bJGEtekEtWjAtOV9dKiQvLnRlc3QoYWxpYXNBcykgfHxcbiAgICAgICAgICAvXihudWxsfHVuZGVmaW5lZHx0aGlzfFxcJGluZGV4fFxcJGZpcnN0fFxcJG1pZGRsZXxcXCRsYXN0fFxcJGV2ZW58XFwkb2RkfFxcJHBhcmVudHxcXCRyb290fFxcJGlkKSQvLnRlc3QoYWxpYXNBcykpKSB7XG4gICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdiYWRpZGVudCcsIFwiYWxpYXMgJ3swfScgaXMgaW52YWxpZCAtLS0gbXVzdCBiZSBhIHZhbGlkIEpTIGlkZW50aWZpZXIgd2hpY2ggaXMgbm90IGEgcmVzZXJ2ZWQgbmFtZS5cIixcbiAgICAgICAgICBhbGlhc0FzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRyYWNrQnlFeHBHZXR0ZXIsIHRyYWNrQnlJZEV4cEZuLCB0cmFja0J5SWRBcnJheUZuLCB0cmFja0J5SWRPYmpGbjtcbiAgICAgIHZhciBoYXNoRm5Mb2NhbHMgPSB7JGlkOiBoYXNoS2V5fTtcblxuICAgICAgaWYgKHRyYWNrQnlFeHApIHtcbiAgICAgICAgdHJhY2tCeUV4cEdldHRlciA9ICRwYXJzZSh0cmFja0J5RXhwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYWNrQnlJZEFycmF5Rm4gPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGhhc2hLZXkodmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICB0cmFja0J5SWRPYmpGbiA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1JlcGVhdExpbmsoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG5cbiAgICAgICAgaWYgKHRyYWNrQnlFeHBHZXR0ZXIpIHtcbiAgICAgICAgICB0cmFja0J5SWRFeHBGbiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICAvLyBhc3NpZ24ga2V5LCB2YWx1ZSwgYW5kICRpbmRleCB0byB0aGUgbG9jYWxzIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCBpbiBoYXNoIGZ1bmN0aW9uc1xuICAgICAgICAgICAgaWYgKGtleUlkZW50aWZpZXIpIGhhc2hGbkxvY2Fsc1trZXlJZGVudGlmaWVyXSA9IGtleTtcbiAgICAgICAgICAgIGhhc2hGbkxvY2Fsc1t2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7XG4gICAgICAgICAgICBoYXNoRm5Mb2NhbHMuJGluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICByZXR1cm4gdHJhY2tCeUV4cEdldHRlcigkc2NvcGUsIGhhc2hGbkxvY2Fscyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIGEgbGlzdCBvZiBlbGVtZW50cyBmcm9tIHByZXZpb3VzIHJ1bi4gVGhpcyBpcyBhIGhhc2ggd2hlcmUga2V5IGlzIHRoZSBpdGVtIGZyb20gdGhlXG4gICAgICAgIC8vIGl0ZXJhdG9yLCBhbmQgdGhlIHZhbHVlIGlzIG9iamVjdHMgd2l0aCBmb2xsb3dpbmcgcHJvcGVydGllcy5cbiAgICAgICAgLy8gICAtIHNjb3BlOiBib3VuZCBzY29wZVxuICAgICAgICAvLyAgIC0gZWxlbWVudDogcHJldmlvdXMgZWxlbWVudC5cbiAgICAgICAgLy8gICAtIGluZGV4OiBwb3NpdGlvblxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSBhcmUgdXNpbmcgbm8tcHJvdG8gb2JqZWN0IHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBndWFyZCBhZ2FpbnN0IGluaGVyaXRlZCBwcm9wcyB2aWFcbiAgICAgICAgLy8gaGFzT3duUHJvcGVydHkuXG4gICAgICAgIHZhciBsYXN0QmxvY2tNYXAgPSBjcmVhdGVNYXAoKTtcblxuICAgICAgICAvL3dhdGNoIHByb3BzXG4gICAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKHJocywgZnVuY3Rpb24gbmdSZXBlYXRBY3Rpb24oY29sbGVjdGlvbikge1xuICAgICAgICAgIHZhciBpbmRleCwgbGVuZ3RoLFxuICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSAkZWxlbWVudFswXSwgICAgIC8vIG5vZGUgdGhhdCBjbG9uZWQgbm9kZXMgc2hvdWxkIGJlIGluc2VydGVkIGFmdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZWQgdG8gdGhlIGNvbW1lbnQgbm9kZSBhbmNob3JcbiAgICAgICAgICAgICAgbmV4dE5vZGUsXG4gICAgICAgICAgICAgIC8vIFNhbWUgYXMgbGFzdEJsb2NrTWFwIGJ1dCBpdCBoYXMgdGhlIGN1cnJlbnQgc3RhdGUuIEl0IHdpbGwgYmVjb21lIHRoZVxuICAgICAgICAgICAgICAvLyBsYXN0QmxvY2tNYXAgb24gdGhlIG5leHQgaXRlcmF0aW9uLlxuICAgICAgICAgICAgICBuZXh0QmxvY2tNYXAgPSBjcmVhdGVNYXAoKSxcbiAgICAgICAgICAgICAgY29sbGVjdGlvbkxlbmd0aCxcbiAgICAgICAgICAgICAga2V5LCB2YWx1ZSwgLy8ga2V5L3ZhbHVlIG9mIGl0ZXJhdGlvblxuICAgICAgICAgICAgICB0cmFja0J5SWQsXG4gICAgICAgICAgICAgIHRyYWNrQnlJZEZuLFxuICAgICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyxcbiAgICAgICAgICAgICAgYmxvY2ssICAgICAgIC8vIGxhc3Qgb2JqZWN0IGluZm9ybWF0aW9uIHtzY29wZSwgZWxlbWVudCwgaWR9XG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyLFxuICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlO1xuXG4gICAgICAgICAgaWYgKGFsaWFzQXMpIHtcbiAgICAgICAgICAgICRzY29wZVthbGlhc0FzXSA9IGNvbGxlY3Rpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyA9IGNvbGxlY3Rpb247XG4gICAgICAgICAgICB0cmFja0J5SWRGbiA9IHRyYWNrQnlJZEV4cEZuIHx8IHRyYWNrQnlJZEFycmF5Rm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRXhwRm4gfHwgdHJhY2tCeUlkT2JqRm47XG4gICAgICAgICAgICAvLyBpZiBvYmplY3QsIGV4dHJhY3Qga2V5cywgaW4gZW51bWVyYXRpb24gb3JkZXIsIHVuc29ydGVkXG4gICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlbUtleSBpbiBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbGxlY3Rpb24sIGl0ZW1LZXkpICYmIGl0ZW1LZXkuY2hhckF0KDApICE9PSAnJCcpIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uS2V5cy5wdXNoKGl0ZW1LZXkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29sbGVjdGlvbkxlbmd0aCA9IGNvbGxlY3Rpb25LZXlzLmxlbmd0aDtcbiAgICAgICAgICBuZXh0QmxvY2tPcmRlciA9IG5ldyBBcnJheShjb2xsZWN0aW9uTGVuZ3RoKTtcblxuICAgICAgICAgIC8vIGxvY2F0ZSBleGlzdGluZyBpdGVtc1xuICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvbGxlY3Rpb25MZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGtleSA9IChjb2xsZWN0aW9uID09PSBjb2xsZWN0aW9uS2V5cykgPyBpbmRleCA6IGNvbGxlY3Rpb25LZXlzW2luZGV4XTtcbiAgICAgICAgICAgIHZhbHVlID0gY29sbGVjdGlvbltrZXldO1xuICAgICAgICAgICAgdHJhY2tCeUlkID0gdHJhY2tCeUlkRm4oa2V5LCB2YWx1ZSwgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGxhc3RCbG9ja01hcFt0cmFja0J5SWRdKSB7XG4gICAgICAgICAgICAgIC8vIGZvdW5kIHByZXZpb3VzbHkgc2VlbiBibG9ja1xuICAgICAgICAgICAgICBibG9jayA9IGxhc3RCbG9ja01hcFt0cmFja0J5SWRdO1xuICAgICAgICAgICAgICBkZWxldGUgbGFzdEJsb2NrTWFwW3RyYWNrQnlJZF07XG4gICAgICAgICAgICAgIG5leHRCbG9ja01hcFt0cmFja0J5SWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IGJsb2NrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSkge1xuICAgICAgICAgICAgICAvLyBpZiBjb2xsaXNpb24gZGV0ZWN0ZWQuIHJlc3RvcmUgbGFzdEJsb2NrTWFwIGFuZCB0aHJvdyBhbiBlcnJvclxuICAgICAgICAgICAgICBmb3JFYWNoKG5leHRCbG9ja09yZGVyLCBmdW5jdGlvbihibG9jaykge1xuICAgICAgICAgICAgICAgIGlmIChibG9jayAmJiBibG9jay5zY29wZSkgbGFzdEJsb2NrTWFwW2Jsb2NrLmlkXSA9IGJsb2NrO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2R1cGVzJyxcbiAgICAgICAgICAgICAgICAgIFwiRHVwbGljYXRlcyBpbiBhIHJlcGVhdGVyIGFyZSBub3QgYWxsb3dlZC4gVXNlICd0cmFjayBieScgZXhwcmVzc2lvbiB0byBzcGVjaWZ5IHVuaXF1ZSBrZXlzLiBSZXBlYXRlcjogezB9LCBEdXBsaWNhdGUga2V5OiB7MX0sIER1cGxpY2F0ZSB2YWx1ZTogezJ9XCIsXG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uLCB0cmFja0J5SWQsIHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIG5ldyBuZXZlciBiZWZvcmUgc2VlbiBibG9ja1xuICAgICAgICAgICAgICBuZXh0QmxvY2tPcmRlcltpbmRleF0gPSB7aWQ6IHRyYWNrQnlJZCwgc2NvcGU6IHVuZGVmaW5lZCwgY2xvbmU6IHVuZGVmaW5lZH07XG4gICAgICAgICAgICAgIG5leHRCbG9ja01hcFt0cmFja0J5SWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyByZW1vdmUgbGVmdG92ZXIgaXRlbXNcbiAgICAgICAgICBmb3IgKHZhciBibG9ja0tleSBpbiBsYXN0QmxvY2tNYXApIHtcbiAgICAgICAgICAgIGJsb2NrID0gbGFzdEJsb2NrTWFwW2Jsb2NrS2V5XTtcbiAgICAgICAgICAgIGVsZW1lbnRzVG9SZW1vdmUgPSBnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKTtcbiAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGVsZW1lbnRzVG9SZW1vdmUpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnRzVG9SZW1vdmVbMF0ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAvLyBpZiB0aGUgZWxlbWVudCB3YXMgbm90IHJlbW92ZWQgeWV0IGJlY2F1c2Ugb2YgcGVuZGluZyBhbmltYXRpb24sIG1hcmsgaXQgYXMgZGVsZXRlZFxuICAgICAgICAgICAgICAvLyBzbyB0aGF0IHdlIGNhbiBpZ25vcmUgaXQgbGF0ZXJcbiAgICAgICAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzVG9SZW1vdmVbaW5kZXhdW05HX1JFTU9WRURdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvY2suc2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB3ZSBhcmUgbm90IHVzaW5nIGZvckVhY2ggZm9yIHBlcmYgcmVhc29ucyAodHJ5aW5nIHRvIGF2b2lkICNjYWxsKVxuICAgICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvbGxlY3Rpb25MZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGtleSA9IChjb2xsZWN0aW9uID09PSBjb2xsZWN0aW9uS2V5cykgPyBpbmRleCA6IGNvbGxlY3Rpb25LZXlzW2luZGV4XTtcbiAgICAgICAgICAgIHZhbHVlID0gY29sbGVjdGlvbltrZXldO1xuICAgICAgICAgICAgYmxvY2sgPSBuZXh0QmxvY2tPcmRlcltpbmRleF07XG5cbiAgICAgICAgICAgIGlmIChibG9jay5zY29wZSkge1xuICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGFscmVhZHkgc2VlbiB0aGlzIG9iamVjdCwgdGhlbiB3ZSBuZWVkIHRvIHJldXNlIHRoZVxuICAgICAgICAgICAgICAvLyBhc3NvY2lhdGVkIHNjb3BlL2VsZW1lbnRcblxuICAgICAgICAgICAgICBuZXh0Tm9kZSA9IHByZXZpb3VzTm9kZTtcblxuICAgICAgICAgICAgICAvLyBza2lwIG5vZGVzIHRoYXQgYXJlIGFscmVhZHkgcGVuZGluZyByZW1vdmFsIHZpYSBsZWF2ZSBhbmltYXRpb25cbiAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKG5leHROb2RlICYmIG5leHROb2RlW05HX1JFTU9WRURdKTtcblxuICAgICAgICAgICAgICBpZiAoZ2V0QmxvY2tTdGFydChibG9jaykgIT0gbmV4dE5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBleGlzdGluZyBpdGVtIHdoaWNoIGdvdCBtb3ZlZFxuICAgICAgICAgICAgICAgICRhbmltYXRlLm1vdmUoZ2V0QmxvY2tOb2RlcyhibG9jay5jbG9uZSksIG51bGwsIGpxTGl0ZShwcmV2aW91c05vZGUpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBnZXRCbG9ja0VuZChibG9jayk7XG4gICAgICAgICAgICAgIHVwZGF0ZVNjb3BlKGJsb2NrLnNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBjb2xsZWN0aW9uTGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIG5ldyBpdGVtIHdoaWNoIHdlIGRvbid0IGtub3cgYWJvdXRcbiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGUoZnVuY3Rpb24gbmdSZXBlYXRUcmFuc2NsdWRlKGNsb25lLCBzY29wZSkge1xuICAgICAgICAgICAgICAgIGJsb2NrLnNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vY2xvbmUtdnMtY3JlYXRlY29tbWVudFxuICAgICAgICAgICAgICAgIHZhciBlbmROb2RlID0gbmdSZXBlYXRFbmRDb21tZW50LmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgY2xvbmVbY2xvbmUubGVuZ3RoKytdID0gZW5kTm9kZTtcblxuICAgICAgICAgICAgICAgIC8vIFRPRE8ocGVyZik6IHN1cHBvcnQgbmFrZWQgcHJldmlvdXNOb2RlIGluIGBlbnRlcmAgdG8gYXZvaWQgY3JlYXRpb24gb2YganFMaXRlIHdyYXBwZXI/XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIG51bGwsIGpxTGl0ZShwcmV2aW91c05vZGUpKTtcbiAgICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBlbmROb2RlO1xuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIG9ubHkgbmVlZCB0aGUgZmlyc3QvbGFzdCBub2RlIG9mIHRoZSBjbG9uZWQgbm9kZXMuXG4gICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgd2UgbmVlZCB0byBrZWVwIHRoZSByZWZlcmVuY2UgdG8gdGhlIGpxbGl0ZSB3cmFwcGVyIGFzIGl0IG1pZ2h0IGJlIGNoYW5nZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXRzIHRlbXBsYXRlIGFycml2ZXMuXG4gICAgICAgICAgICAgICAgYmxvY2suY2xvbmUgPSBjbG9uZTtcbiAgICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbYmxvY2suaWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgICAgdXBkYXRlU2NvcGUoYmxvY2suc2NvcGUsIGluZGV4LCB2YWx1ZUlkZW50aWZpZXIsIHZhbHVlLCBrZXlJZGVudGlmaWVyLCBrZXksIGNvbGxlY3Rpb25MZW5ndGgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdEJsb2NrTWFwID0gbmV4dEJsb2NrTWFwO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBOR19ISURFX0NMQVNTID0gJ25nLWhpZGUnO1xudmFyIE5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1MgPSAnbmctaGlkZS1hbmltYXRlJztcbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTaG93XG4gKiBAbXVsdGlFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nU2hvd2AgZGlyZWN0aXZlIHNob3dzIG9yIGhpZGVzIHRoZSBnaXZlbiBIVE1MIGVsZW1lbnQgYmFzZWQgb24gdGhlIGV4cHJlc3Npb25cbiAqIHByb3ZpZGVkIHRvIHRoZSBgbmdTaG93YCBhdHRyaWJ1dGUuIFRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiBieSByZW1vdmluZyBvciBhZGRpbmdcbiAqIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50LiBUaGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcHJlZGVmaW5lZFxuICogaW4gQW5ndWxhckpTIGFuZCBzZXRzIHRoZSBkaXNwbGF5IHN0eWxlIHRvIG5vbmUgKHVzaW5nIGFuICFpbXBvcnRhbnQgZmxhZykuXG4gKiBGb3IgQ1NQIG1vZGUgcGxlYXNlIGFkZCBgYW5ndWxhci1jc3AuY3NzYCB0byB5b3VyIGh0bWwgZmlsZSAoc2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDc3AgbmdDc3B9KS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgdHJ1dGh5IChlbGVtZW50IGlzIHZpc2libGUpIC0tPlxuICogPGRpdiBuZy1zaG93PVwibXlWYWx1ZVwiPjwvZGl2PlxuICpcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyBmYWxzeSAoZWxlbWVudCBpcyBoaWRkZW4pIC0tPlxuICogPGRpdiBuZy1zaG93PVwibXlWYWx1ZVwiIGNsYXNzPVwibmctaGlkZVwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYG5nU2hvd2AgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBmYWxzeSB2YWx1ZSB0aGVuIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBhZGRlZCB0byB0aGUgY2xhc3NcbiAqIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBjYXVzaW5nIGl0IHRvIGJlY29tZSBoaWRkZW4uIFdoZW4gdHJ1dGh5LCB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgcmVtb3ZlZFxuICogZnJvbSB0aGUgZWxlbWVudCBjYXVzaW5nIHRoZSBlbGVtZW50IG5vdCB0byBhcHBlYXIgaGlkZGVuLlxuICpcbiAqICMjIFdoeSBpcyAhaW1wb3J0YW50IHVzZWQ/XG4gKlxuICogWW91IG1heSBiZSB3b25kZXJpbmcgd2h5ICFpbXBvcnRhbnQgaXMgdXNlZCBmb3IgdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzLiBUaGlzIGlzIGJlY2F1c2UgdGhlIGAubmctaGlkZWAgc2VsZWN0b3JcbiAqIGNhbiBiZSBlYXNpbHkgb3ZlcnJpZGRlbiBieSBoZWF2aWVyIHNlbGVjdG9ycy4gRm9yIGV4YW1wbGUsIHNvbWV0aGluZyBhcyBzaW1wbGVcbiAqIGFzIGNoYW5naW5nIHRoZSBkaXNwbGF5IHN0eWxlIG9uIGEgSFRNTCBsaXN0IGl0ZW0gd291bGQgbWFrZSBoaWRkZW4gZWxlbWVudHMgYXBwZWFyIHZpc2libGUuXG4gKiBUaGlzIGFsc28gYmVjb21lcyBhIGJpZ2dlciBpc3N1ZSB3aGVuIGRlYWxpbmcgd2l0aCBDU1MgZnJhbWV3b3Jrcy5cbiAqXG4gKiBCeSB1c2luZyAhaW1wb3J0YW50LCB0aGUgc2hvdyBhbmQgaGlkZSBiZWhhdmlvciB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgZGVzcGl0ZSBhbnkgY2xhc2ggYmV0d2VlbiBDU1Mgc2VsZWN0b3JcbiAqIHNwZWNpZmljaXR5ICh3aGVuICFpbXBvcnRhbnQgaXNuJ3QgdXNlZCB3aXRoIGFueSBjb25mbGljdGluZyBzdHlsZXMpLiBJZiBhIGRldmVsb3BlciBjaG9vc2VzIHRvIG92ZXJyaWRlIHRoZVxuICogc3R5bGluZyB0byBjaGFuZ2UgaG93IHRvIGhpZGUgYW4gZWxlbWVudCB0aGVuIGl0IGlzIGp1c3QgYSBtYXR0ZXIgb2YgdXNpbmcgIWltcG9ydGFudCBpbiB0aGVpciBvd24gQ1NTIGNvZGUuXG4gKlxuICogIyMjIE92ZXJyaWRpbmcgYC5uZy1oaWRlYFxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBgLm5nLWhpZGVgIGNsYXNzIHdpbGwgc3R5bGUgdGhlIGVsZW1lbnQgd2l0aCBgZGlzcGxheTogbm9uZSFpbXBvcnRhbnRgLiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2VcbiAqIHRoZSBoaWRlIGJlaGF2aW9yIHdpdGggbmdTaG93L25nSGlkZSB0aGVuIHRoaXMgY2FuIGJlIGFjaGlldmVkIGJ5IHJlc3RhdGluZyB0aGUgc3R5bGVzIGZvciB0aGUgYC5uZy1oaWRlYFxuICogY2xhc3MgQ1NTLiBOb3RlIHRoYXQgdGhlIHNlbGVjdG9yIHRoYXQgbmVlZHMgdG8gYmUgdXNlZCBpcyBhY3R1YWxseSBgLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpYCB0byBjb3BlXG4gKiB3aXRoIGV4dHJhIGFuaW1hdGlvbiBjbGFzc2VzIHRoYXQgY2FuIGJlIGFkZGVkLlxuICpcbiAqIGBgYGNzc1xuICogLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpIHtcbiAqICAgLyYjNDI7IHRoaXMgaXMganVzdCBhbm90aGVyIGZvcm0gb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvXG4gKiAgIGRpc3BsYXk6IGJsb2NrIWltcG9ydGFudDtcbiAqICAgcG9zaXRpb246IGFic29sdXRlO1xuICogICB0b3A6IC05OTk5cHg7XG4gKiAgIGxlZnQ6IC05OTk5cHg7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBCeSBkZWZhdWx0IHlvdSBkb24ndCBuZWVkIHRvIG92ZXJyaWRlIGluIENTUyBhbnl0aGluZyBhbmQgdGhlIGFuaW1hdGlvbnMgd2lsbCB3b3JrIGFyb3VuZCB0aGUgZGlzcGxheSBzdHlsZS5cbiAqXG4gKiAjIyBBIG5vdGUgYWJvdXQgYW5pbWF0aW9ucyB3aXRoIGBuZ1Nob3dgXG4gKlxuICogQW5pbWF0aW9ucyBpbiBuZ1Nob3cvbmdIaWRlIHdvcmsgd2l0aCB0aGUgc2hvdyBhbmQgaGlkZSBldmVudHMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gdGhlIGRpcmVjdGl2ZSBleHByZXNzaW9uXG4gKiBpcyB0cnVlIGFuZCBmYWxzZS4gVGhpcyBzeXN0ZW0gd29ya3MgbGlrZSB0aGUgYW5pbWF0aW9uIHN5c3RlbSBwcmVzZW50IHdpdGggbmdDbGFzcyBleGNlcHQgdGhhdFxuICogeW91IG11c3QgYWxzbyBpbmNsdWRlIHRoZSAhaW1wb3J0YW50IGZsYWcgdG8gb3ZlcnJpZGUgdGhlIGRpc3BsYXkgcHJvcGVydHlcbiAqIHNvIHRoYXQgeW91IGNhbiBwZXJmb3JtIGFuIGFuaW1hdGlvbiB3aGVuIHRoZSBlbGVtZW50IGlzIGhpZGRlbiBkdXJpbmcgdGhlIHRpbWUgb2YgdGhlIGFuaW1hdGlvbi5cbiAqXG4gKiBgYGBjc3NcbiAqIC8vXG4gKiAvL2Egd29ya2luZyBleGFtcGxlIGNhbiBiZSBmb3VuZCBhdCB0aGUgYm90dG9tIG9mIHRoaXMgcGFnZVxuICogLy9cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLCAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7XG4gKiAgIC8mIzQyOyB0aGlzIGlzIHJlcXVpcmVkIGFzIG9mIDEuM3ggdG8gcHJvcGVybHlcbiAqICAgICAgYXBwbHkgYWxsIHN0eWxpbmcgaW4gYSBzaG93L2hpZGUgYW5pbWF0aW9uICYjNDI7L1xuICogICB0cmFuc2l0aW9uOiAwcyBsaW5lYXIgYWxsO1xuICogfVxuICpcbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLWFjdGl2ZSxcbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7XG4gKiAgIC8mIzQyOyB0aGUgdHJhbnNpdGlvbiBpcyBkZWZpbmVkIGluIHRoZSBhY3RpdmUgY2xhc3MgJiM0MjsvXG4gKiAgIHRyYW5zaXRpb246IDFzIGxpbmVhciBhbGw7XG4gKiB9XG4gKlxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLjAtYmV0YS4xMSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgdGhlIGRpc3BsYXlcbiAqIHByb3BlcnR5IHRvIGJsb2NrIGR1cmluZyBhbmltYXRpb24gc3RhdGVzLS1uZ0FuaW1hdGUgd2lsbCBoYW5kbGUgdGhlIHN0eWxlIHRvZ2dsaW5nIGF1dG9tYXRpY2FsbHkgZm9yIHlvdS5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogYWRkQ2xhc3M6IGAubmctaGlkZWAgLSBoYXBwZW5zIGFmdGVyIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSBhbmQgdGhlIGp1c3QgYmVmb3JlIGNvbnRlbnRzIGFyZSBzZXQgdG8gdmlzaWJsZVxuICogcmVtb3ZlQ2xhc3M6IGAubmctaGlkZWAgLSBoYXBwZW5zIGFmdGVyIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIG5vbiB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlblxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1Nob3cgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeVxuICogICAgIHRoZW4gdGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgQ2xpY2sgbWU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIiBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5nSGlkZVwiPjxici8+XG4gICAgICA8ZGl2PlxuICAgICAgICBTaG93OlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLXNob3dcIiBuZy1zaG93PVwiY2hlY2tlZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtdXBcIj48L3NwYW4+IEkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIEhpZGU6XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtc2hvd1wiIG5nLWhpZGU9XCJjaGVja2VkXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRodW1icy1kb3duXCI+PC9zcGFuPiBJIGhpZGUgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJnbHlwaGljb25zLmNzc1wiPlxuICAgICAgQGltcG9ydCB1cmwoLi4vLi4vY29tcG9uZW50cy9ib290c3RyYXAtMy4xLjEvY3NzL2Jvb3RzdHJhcC5jc3MpO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLXNob3cge1xuICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUtYWRkLCAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUtcmVtb3ZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIGxpbmVhciAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUge1xuICAgICAgICBsaW5lLWhlaWdodDogMDtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgcGFkZGluZzogMCAxMHB4O1xuICAgICAgfVxuXG4gICAgICAuY2hlY2stZWxlbWVudCB7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHRodW1ic1VwID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy11cCcpKTtcbiAgICAgIHZhciB0aHVtYnNEb3duID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy1kb3duJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXNob3cgLyBuZy1oaWRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh0aHVtYnNVcC5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KHRodW1ic0Rvd24uaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuXG4gICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTtcblxuICAgICAgICBleHBlY3QodGh1bWJzVXAuaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QodGh1bWJzRG93bi5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdTaG93RGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nU2hvdywgZnVuY3Rpb24gbmdTaG93V2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gd2UncmUgYWRkaW5nIGEgdGVtcG9yYXJ5LCBhbmltYXRpb24tc3BlY2lmaWMgY2xhc3MgZm9yIG5nLWhpZGUgc2luY2UgdGhpcyB3YXlcbiAgICAgICAgLy8gd2UgY2FuIGNvbnRyb2wgd2hlbiB0aGUgZWxlbWVudCBpcyBhY3R1YWxseSBkaXNwbGF5ZWQgb24gc2NyZWVuIHdpdGhvdXQgaGF2aW5nXG4gICAgICAgIC8vIHRvIGhhdmUgYSBnbG9iYWwvZ3JlZWR5IENTUyBzZWxlY3RvciB0aGF0IGJyZWFrcyB3aGVuIG90aGVyIGFuaW1hdGlvbnMgYXJlIHJ1bi5cbiAgICAgICAgLy8gUmVhZDogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTEwMyNpc3N1ZWNvbW1lbnQtNTgzMzU4NDVcbiAgICAgICAgJGFuaW1hdGVbdmFsdWUgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oZWxlbWVudCwgTkdfSElERV9DTEFTUywge1xuICAgICAgICAgIHRlbXBDbGFzc2VzOiBOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0hpZGVcbiAqIEBtdWx0aUVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdIaWRlYCBkaXJlY3RpdmUgc2hvd3Mgb3IgaGlkZXMgdGhlIGdpdmVuIEhUTUwgZWxlbWVudCBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvblxuICogcHJvdmlkZWQgdG8gdGhlIGBuZ0hpZGVgIGF0dHJpYnV0ZS4gVGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIGJ5IHJlbW92aW5nIG9yIGFkZGluZ1xuICogdGhlIGBuZy1oaWRlYCBDU1MgY2xhc3Mgb250byB0aGUgZWxlbWVudC4gVGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHByZWRlZmluZWRcbiAqIGluIEFuZ3VsYXJKUyBhbmQgc2V0cyB0aGUgZGlzcGxheSBzdHlsZSB0byBub25lICh1c2luZyBhbiAhaW1wb3J0YW50IGZsYWcpLlxuICogRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBodG1sIGZpbGUgKHNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuXG4gKlxuICogYGBgaHRtbFxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIHRydXRoeSAoZWxlbWVudCBpcyBoaWRkZW4pIC0tPlxuICogPGRpdiBuZy1oaWRlPVwibXlWYWx1ZVwiIGNsYXNzPVwibmctaGlkZVwiPjwvZGl2PlxuICpcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyBmYWxzeSAoZWxlbWVudCBpcyB2aXNpYmxlKSAtLT5cbiAqIDxkaXYgbmctaGlkZT1cIm15VmFsdWVcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIHRoZW4gdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBjbGFzc1xuICogYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGNhdXNpbmcgaXQgdG8gYmVjb21lIGhpZGRlbi4gV2hlbiBmYWxzeSwgdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHJlbW92ZWRcbiAqIGZyb20gdGhlIGVsZW1lbnQgY2F1c2luZyB0aGUgZWxlbWVudCBub3QgdG8gYXBwZWFyIGhpZGRlbi5cbiAqXG4gKiAjIyBXaHkgaXMgIWltcG9ydGFudCB1c2VkP1xuICpcbiAqIFlvdSBtYXkgYmUgd29uZGVyaW5nIHdoeSAhaW1wb3J0YW50IGlzIHVzZWQgZm9yIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gVGhpcyBpcyBiZWNhdXNlIHRoZSBgLm5nLWhpZGVgIHNlbGVjdG9yXG4gKiBjYW4gYmUgZWFzaWx5IG92ZXJyaWRkZW4gYnkgaGVhdmllciBzZWxlY3RvcnMuIEZvciBleGFtcGxlLCBzb21ldGhpbmcgYXMgc2ltcGxlXG4gKiBhcyBjaGFuZ2luZyB0aGUgZGlzcGxheSBzdHlsZSBvbiBhIEhUTUwgbGlzdCBpdGVtIHdvdWxkIG1ha2UgaGlkZGVuIGVsZW1lbnRzIGFwcGVhciB2aXNpYmxlLlxuICogVGhpcyBhbHNvIGJlY29tZXMgYSBiaWdnZXIgaXNzdWUgd2hlbiBkZWFsaW5nIHdpdGggQ1NTIGZyYW1ld29ya3MuXG4gKlxuICogQnkgdXNpbmcgIWltcG9ydGFudCwgdGhlIHNob3cgYW5kIGhpZGUgYmVoYXZpb3Igd2lsbCB3b3JrIGFzIGV4cGVjdGVkIGRlc3BpdGUgYW55IGNsYXNoIGJldHdlZW4gQ1NTIHNlbGVjdG9yXG4gKiBzcGVjaWZpY2l0eSAod2hlbiAhaW1wb3J0YW50IGlzbid0IHVzZWQgd2l0aCBhbnkgY29uZmxpY3Rpbmcgc3R5bGVzKS4gSWYgYSBkZXZlbG9wZXIgY2hvb3NlcyB0byBvdmVycmlkZSB0aGVcbiAqIHN0eWxpbmcgdG8gY2hhbmdlIGhvdyB0byBoaWRlIGFuIGVsZW1lbnQgdGhlbiBpdCBpcyBqdXN0IGEgbWF0dGVyIG9mIHVzaW5nICFpbXBvcnRhbnQgaW4gdGhlaXIgb3duIENTUyBjb2RlLlxuICpcbiAqICMjIyBPdmVycmlkaW5nIGAubmctaGlkZWBcbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgYC5uZy1oaWRlYCBjbGFzcyB3aWxsIHN0eWxlIHRoZSBlbGVtZW50IHdpdGggYGRpc3BsYXk6IG5vbmUhaW1wb3J0YW50YC4gSWYgeW91IHdpc2ggdG8gY2hhbmdlXG4gKiB0aGUgaGlkZSBiZWhhdmlvciB3aXRoIG5nU2hvdy9uZ0hpZGUgdGhlbiB0aGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXN0YXRpbmcgdGhlIHN0eWxlcyBmb3IgdGhlIGAubmctaGlkZWBcbiAqIGNsYXNzIGluIENTUzpcbiAqXG4gKiBgYGBjc3NcbiAqIC5uZy1oaWRlIHtcbiAqICAgLyYjNDI7IHRoaXMgaXMganVzdCBhbm90aGVyIGZvcm0gb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvXG4gKiAgIGRpc3BsYXk6IGJsb2NrIWltcG9ydGFudDtcbiAqICAgcG9zaXRpb246IGFic29sdXRlO1xuICogICB0b3A6IC05OTk5cHg7XG4gKiAgIGxlZnQ6IC05OTk5cHg7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBCeSBkZWZhdWx0IHlvdSBkb24ndCBuZWVkIHRvIG92ZXJyaWRlIGluIENTUyBhbnl0aGluZyBhbmQgdGhlIGFuaW1hdGlvbnMgd2lsbCB3b3JrIGFyb3VuZCB0aGUgZGlzcGxheSBzdHlsZS5cbiAqXG4gKiAjIyBBIG5vdGUgYWJvdXQgYW5pbWF0aW9ucyB3aXRoIGBuZ0hpZGVgXG4gKlxuICogQW5pbWF0aW9ucyBpbiBuZ1Nob3cvbmdIaWRlIHdvcmsgd2l0aCB0aGUgc2hvdyBhbmQgaGlkZSBldmVudHMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gdGhlIGRpcmVjdGl2ZSBleHByZXNzaW9uXG4gKiBpcyB0cnVlIGFuZCBmYWxzZS4gVGhpcyBzeXN0ZW0gd29ya3MgbGlrZSB0aGUgYW5pbWF0aW9uIHN5c3RlbSBwcmVzZW50IHdpdGggbmdDbGFzcywgZXhjZXB0IHRoYXQgdGhlIGAubmctaGlkZWBcbiAqIENTUyBjbGFzcyBpcyBhZGRlZCBhbmQgcmVtb3ZlZCBmb3IgeW91IGluc3RlYWQgb2YgeW91ciBvd24gQ1NTIGNsYXNzLlxuICpcbiAqIGBgYGNzc1xuICogLy9cbiAqIC8vYSB3b3JraW5nIGV4YW1wbGUgY2FuIGJlIGZvdW5kIGF0IHRoZSBib3R0b20gb2YgdGhpcyBwYWdlXG4gKiAvL1xuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQsIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHtcbiAqICAgdHJhbnNpdGlvbjogMC41cyBsaW5lYXIgYWxsO1xuICogfVxuICpcbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZS5uZy1oaWRlLXJlbW92ZS1hY3RpdmUgeyAuLi4gfVxuICogYGBgXG4gKlxuICogS2VlcCBpbiBtaW5kIHRoYXQsIGFzIG9mIEFuZ3VsYXJKUyB2ZXJzaW9uIDEuMy4wLWJldGEuMTEsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2hhbmdlIHRoZSBkaXNwbGF5XG4gKiBwcm9wZXJ0eSB0byBibG9jayBkdXJpbmcgYW5pbWF0aW9uIHN0YXRlcy0tbmdBbmltYXRlIHdpbGwgaGFuZGxlIHRoZSBzdHlsZSB0b2dnbGluZyBhdXRvbWF0aWNhbGx5IGZvciB5b3UuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIHJlbW92ZUNsYXNzOiBgLm5nLWhpZGVgIC0gaGFwcGVucyBhZnRlciB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlblxuICogYWRkQ2xhc3M6IGAubmctaGlkZWAgLSBoYXBwZW5zIGFmdGVyIHRoZSBgbmdIaWRlYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIG5vbiB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIHZpc2libGVcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdIaWRlIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHkgdGhlblxuICogICAgIHRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiByZXNwZWN0aXZlbHkuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIENsaWNrIG1lOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuZ1Nob3dcIj48YnIvPlxuICAgICAgPGRpdj5cbiAgICAgICAgU2hvdzpcbiAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1oaWRlXCIgbmctc2hvdz1cImNoZWNrZWRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tdGh1bWJzLXVwXCI+PC9zcGFuPiBJIHNob3cgdXAgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICBIaWRlOlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLWhpZGVcIiBuZy1oaWRlPVwiY2hlY2tlZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtZG93blwiPjwvc3Bhbj4gSSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiZ2x5cGhpY29ucy5jc3NcIj5cbiAgICAgIEBpbXBvcnQgdXJsKC4uLy4uL2NvbXBvbmVudHMvYm9vdHN0cmFwLTMuMS4xL2Nzcy9ib290c3RyYXAuY3NzKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1oaWRlIHtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIGxpbmVhciAwLjVzO1xuICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1oaWRlLm5nLWhpZGUge1xuICAgICAgICBsaW5lLWhlaWdodDogMDtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgcGFkZGluZzogMCAxMHB4O1xuICAgICAgfVxuXG4gICAgICAuY2hlY2stZWxlbWVudCB7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHRodW1ic1VwID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy11cCcpKTtcbiAgICAgIHZhciB0aHVtYnNEb3duID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy1kb3duJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXNob3cgLyBuZy1oaWRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh0aHVtYnNVcC5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KHRodW1ic0Rvd24uaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuXG4gICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTtcblxuICAgICAgICBleHBlY3QodGh1bWJzVXAuaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QodGh1bWJzRG93bi5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdIaWRlRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nSGlkZSwgZnVuY3Rpb24gbmdIaWRlV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gVGhlIGNvbW1lbnQgaW5zaWRlIG9mIHRoZSBuZ1Nob3dEaXJlY3RpdmUgZXhwbGFpbnMgd2h5IHdlIGFkZCBhbmRcbiAgICAgICAgLy8gcmVtb3ZlIGEgdGVtcG9yYXJ5IGNsYXNzIGZvciB0aGUgc2hvdy9oaWRlIGFuaW1hdGlvblxuICAgICAgICAkYW5pbWF0ZVt2YWx1ZSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShlbGVtZW50LE5HX0hJREVfQ0xBU1MsIHtcbiAgICAgICAgICB0ZW1wQ2xhc3NlczogTkdfSElERV9JTl9QUk9HUkVTU19DTEFTU1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3R5bGVcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1N0eWxlYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzZXQgQ1NTIHN0eWxlIG9uIGFuIEhUTUwgZWxlbWVudCBjb25kaXRpb25hbGx5LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1N0eWxlXG4gKlxuICoge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gd2hpY2ggZXZhbHMgdG8gYW5cbiAqIG9iamVjdCB3aG9zZSBrZXlzIGFyZSBDU1Mgc3R5bGUgbmFtZXMgYW5kIHZhbHVlcyBhcmUgY29ycmVzcG9uZGluZyB2YWx1ZXMgZm9yIHRob3NlIENTU1xuICoga2V5cy5cbiAqXG4gKiBTaW5jZSBzb21lIENTUyBzdHlsZSBuYW1lcyBhcmUgbm90IHZhbGlkIGtleXMgZm9yIGFuIG9iamVjdCwgdGhleSBtdXN0IGJlIHF1b3RlZC5cbiAqIFNlZSB0aGUgJ2JhY2tncm91bmQtY29sb3InIHN0eWxlIGluIHRoZSBleGFtcGxlIGJlbG93LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cInNldCBjb2xvclwiIG5nLWNsaWNrPVwibXlTdHlsZT17Y29sb3I6J3JlZCd9XCI+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXQgYmFja2dyb3VuZFwiIG5nLWNsaWNrPVwibXlTdHlsZT17J2JhY2tncm91bmQtY29sb3InOidibHVlJ31cIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cImNsZWFyXCIgbmctY2xpY2s9XCJteVN0eWxlPXt9XCI+XG4gICAgICAgIDxici8+XG4gICAgICAgIDxzcGFuIG5nLXN0eWxlPVwibXlTdHlsZVwiPlNhbXBsZSBUZXh0PC9zcGFuPlxuICAgICAgICA8cHJlPm15U3R5bGU9e3tteVN0eWxlfX08L3ByZT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgc3BhbiB7XG4gICAgICAgICBjb2xvcjogYmxhY2s7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgY29sb3JTcGFuID0gZWxlbWVudChieS5jc3MoJ3NwYW4nKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXN0eWxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnaW5wdXRbdmFsdWU9XFwnc2V0IGNvbG9yXFwnXScpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGNvbG9yU3Bhbi5nZXRDc3NWYWx1ZSgnY29sb3InKSkudG9CZSgncmdiYSgyNTUsIDAsIDAsIDEpJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnaW5wdXRbdmFsdWU9Y2xlYXJdJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nU3R5bGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZShmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICBzY29wZS4kd2F0Y2goYXR0ci5uZ1N0eWxlLCBmdW5jdGlvbiBuZ1N0eWxlV2F0Y2hBY3Rpb24obmV3U3R5bGVzLCBvbGRTdHlsZXMpIHtcbiAgICBpZiAob2xkU3R5bGVzICYmIChuZXdTdHlsZXMgIT09IG9sZFN0eWxlcykpIHtcbiAgICAgIGZvckVhY2gob2xkU3R5bGVzLCBmdW5jdGlvbih2YWwsIHN0eWxlKSB7IGVsZW1lbnQuY3NzKHN0eWxlLCAnJyk7fSk7XG4gICAgfVxuICAgIGlmIChuZXdTdHlsZXMpIGVsZW1lbnQuY3NzKG5ld1N0eWxlcyk7XG4gIH0sIHRydWUpO1xufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTd2l0Y2hcbiAqIEByZXN0cmljdCBFQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1N3aXRjaGAgZGlyZWN0aXZlIGlzIHVzZWQgdG8gY29uZGl0aW9uYWxseSBzd2FwIERPTSBzdHJ1Y3R1cmUgb24geW91ciB0ZW1wbGF0ZSBiYXNlZCBvbiBhIHNjb3BlIGV4cHJlc3Npb24uXG4gKiBFbGVtZW50cyB3aXRoaW4gYG5nU3dpdGNoYCBidXQgd2l0aG91dCBgbmdTd2l0Y2hXaGVuYCBvciBgbmdTd2l0Y2hEZWZhdWx0YCBkaXJlY3RpdmVzIHdpbGwgYmUgcHJlc2VydmVkIGF0IHRoZSBsb2NhdGlvblxuICogYXMgc3BlY2lmaWVkIGluIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGl0c2VsZiB3b3JrcyBzaW1pbGFyIHRvIG5nSW5jbHVkZSwgaG93ZXZlciwgaW5zdGVhZCBvZiBkb3dubG9hZGluZyB0ZW1wbGF0ZSBjb2RlIChvciBsb2FkaW5nIGl0XG4gKiBmcm9tIHRoZSB0ZW1wbGF0ZSBjYWNoZSksIGBuZ1N3aXRjaGAgc2ltcGx5IGNob29zZXMgb25lIG9mIHRoZSBuZXN0ZWQgZWxlbWVudHMgYW5kIG1ha2VzIGl0IHZpc2libGUgYmFzZWQgb24gd2hpY2ggZWxlbWVudFxuICogbWF0Y2hlcyB0aGUgdmFsdWUgb2J0YWluZWQgZnJvbSB0aGUgZXZhbHVhdGVkIGV4cHJlc3Npb24uIEluIG90aGVyIHdvcmRzLCB5b3UgZGVmaW5lIGEgY29udGFpbmVyIGVsZW1lbnRcbiAqICh3aGVyZSB5b3UgcGxhY2UgdGhlIGRpcmVjdGl2ZSksIHBsYWNlIGFuIGV4cHJlc3Npb24gb24gdGhlICoqYG9uPVwiLi4uXCJgIGF0dHJpYnV0ZSoqXG4gKiAob3IgdGhlICoqYG5nLXN3aXRjaD1cIi4uLlwiYCBhdHRyaWJ1dGUqKiksIGRlZmluZSBhbnkgaW5uZXIgZWxlbWVudHMgaW5zaWRlIG9mIHRoZSBkaXJlY3RpdmUgYW5kIHBsYWNlXG4gKiBhIHdoZW4gYXR0cmlidXRlIHBlciBlbGVtZW50LiBUaGUgd2hlbiBhdHRyaWJ1dGUgaXMgdXNlZCB0byBpbmZvcm0gbmdTd2l0Y2ggd2hpY2ggZWxlbWVudCB0byBkaXNwbGF5IHdoZW4gdGhlIG9uXG4gKiBleHByZXNzaW9uIGlzIGV2YWx1YXRlZC4gSWYgYSBtYXRjaGluZyBleHByZXNzaW9uIGlzIG5vdCBmb3VuZCB2aWEgYSB3aGVuIGF0dHJpYnV0ZSB0aGVuIGFuIGVsZW1lbnQgd2l0aCB0aGUgZGVmYXVsdFxuICogYXR0cmlidXRlIGlzIGRpc3BsYXllZC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogQmUgYXdhcmUgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlcyB0byBtYXRjaCBhZ2FpbnN0IGNhbm5vdCBiZSBleHByZXNzaW9ucy4gVGhleSBhcmUgaW50ZXJwcmV0ZWRcbiAqIGFzIGxpdGVyYWwgc3RyaW5nIHZhbHVlcyB0byBtYXRjaCBhZ2FpbnN0LlxuICogRm9yIGV4YW1wbGUsICoqYG5nLXN3aXRjaC13aGVuPVwic29tZVZhbFwiYCoqIHdpbGwgbWF0Y2ggYWdhaW5zdCB0aGUgc3RyaW5nIGBcInNvbWVWYWxcImAgbm90IGFnYWluc3QgdGhlXG4gKiB2YWx1ZSBvZiB0aGUgZXhwcmVzc2lvbiBgJHNjb3BlLnNvbWVWYWxgLlxuICogPC9kaXY+XG5cbiAqIEBhbmltYXRpb25zXG4gKiBlbnRlciAtIGhhcHBlbnMgYWZ0ZXIgdGhlIG5nU3dpdGNoIGNvbnRlbnRzIGNoYW5nZSBhbmQgdGhlIG1hdGNoZWQgY2hpbGQgZWxlbWVudCBpcyBwbGFjZWQgaW5zaWRlIHRoZSBjb250YWluZXJcbiAqIGxlYXZlIC0gaGFwcGVucyBqdXN0IGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIGp1c3QgYmVmb3JlIHRoZSBmb3JtZXIgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gKlxuICogQHVzYWdlXG4gKlxuICogYGBgXG4gKiA8QU5ZIG5nLXN3aXRjaD1cImV4cHJlc3Npb25cIj5cbiAqICAgPEFOWSBuZy1zd2l0Y2gtd2hlbj1cIm1hdGNoVmFsdWUxXCI+Li4uPC9BTlk+XG4gKiAgIDxBTlkgbmctc3dpdGNoLXdoZW49XCJtYXRjaFZhbHVlMlwiPi4uLjwvQU5ZPlxuICogICA8QU5ZIG5nLXN3aXRjaC1kZWZhdWx0Pi4uLjwvQU5ZPlxuICogPC9BTlk+XG4gKiBgYGBcbiAqXG4gKlxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgMTIwMFxuICogQHBhcmFtIHsqfSBuZ1N3aXRjaHxvbiBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QgPGNvZGU+bmctc3dpdGNoLXdoZW48L2NvZGU+LlxuICogT24gY2hpbGQgZWxlbWVudHMgYWRkOlxuICpcbiAqICogYG5nU3dpdGNoV2hlbmA6IHRoZSBjYXNlIHN0YXRlbWVudCB0byBtYXRjaCBhZ2FpbnN0LiBJZiBtYXRjaCB0aGVuIHRoaXNcbiAqICAgY2FzZSB3aWxsIGJlIGRpc3BsYXllZC4gSWYgdGhlIHNhbWUgbWF0Y2ggYXBwZWFycyBtdWx0aXBsZSB0aW1lcywgYWxsIHRoZVxuICogICBlbGVtZW50cyB3aWxsIGJlIGRpc3BsYXllZC5cbiAqICogYG5nU3dpdGNoRGVmYXVsdGA6IHRoZSBkZWZhdWx0IGNhc2Ugd2hlbiBubyBvdGhlciBjYXNlIG1hdGNoLiBJZiB0aGVyZVxuICogICBhcmUgbXVsdGlwbGUgZGVmYXVsdCBjYXNlcywgYWxsIG9mIHRoZW0gd2lsbCBiZSBkaXNwbGF5ZWQgd2hlbiBubyBvdGhlclxuICogICBjYXNlIG1hdGNoLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJzd2l0Y2hFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJzZWxlY3Rpb25cIiBuZy1vcHRpb25zPVwiaXRlbSBmb3IgaXRlbSBpbiBpdGVtc1wiPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPGNvZGU+c2VsZWN0aW9uPXt7c2VsZWN0aW9ufX08L2NvZGU+XG4gICAgICAgIDxoci8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlLXN3aXRjaC1jb250YWluZXJcIlxuICAgICAgICAgIG5nLXN3aXRjaCBvbj1cInNlbGVjdGlvblwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLXdoZW49XCJzZXR0aW5nc1wiPlNldHRpbmdzIERpdjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoXCIgbmctc3dpdGNoLXdoZW49XCJob21lXCI+SG9tZSBTcGFuPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtZGVmYXVsdD5kZWZhdWx0PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdzd2l0Y2hFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuaXRlbXMgPSBbJ3NldHRpbmdzJywgJ2hvbWUnLCAnb3RoZXInXTtcbiAgICAgICAgICAkc2NvcGUuc2VsZWN0aW9uID0gJHNjb3BlLml0ZW1zWzBdO1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lciB7XG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBoZWlnaHQ6NDBweDtcbiAgICAgICAgb3ZlcmZsb3c6aGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gge1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1hbmltYXRlIHtcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuXG4gICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICB0b3A6MDtcbiAgICAgICAgbGVmdDowO1xuICAgICAgICByaWdodDowO1xuICAgICAgICBib3R0b206MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSxcbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1lbnRlciB7XG4gICAgICAgIHRvcDotNTBweDtcbiAgICAgIH1cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1sZWF2ZSxcbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICB0b3A6MDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHN3aXRjaEVsZW0gPSBlbGVtZW50KGJ5LmNzcygnW25nLXN3aXRjaF0nKSk7XG4gICAgICB2YXIgc2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgnc2VsZWN0aW9uJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIHN0YXJ0IGluIHNldHRpbmdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvU2V0dGluZ3MgRGl2Lyk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRvIGhvbWUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMSkuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Ib21lIFNwYW4vKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBzZWxlY3QgZGVmYXVsdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgyKS5jbGljaygpO1xuICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL2RlZmF1bHQvKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdTd2l0Y2hEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnbmdTd2l0Y2gnLFxuXG4gICAgLy8gYXNrcyBmb3IgJHNjb3BlIHRvIGZvb2wgdGhlIEJDIGNvbnRyb2xsZXIgbW9kdWxlXG4gICAgY29udHJvbGxlcjogWyckc2NvcGUnLCBmdW5jdGlvbiBuZ1N3aXRjaENvbnRyb2xsZXIoKSB7XG4gICAgIHRoaXMuY2FzZXMgPSB7fTtcbiAgICB9XSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgbmdTd2l0Y2hDb250cm9sbGVyKSB7XG4gICAgICB2YXIgd2F0Y2hFeHByID0gYXR0ci5uZ1N3aXRjaCB8fCBhdHRyLm9uLFxuICAgICAgICAgIHNlbGVjdGVkVHJhbnNjbHVkZXMgPSBbXSxcbiAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzID0gW10sXG4gICAgICAgICAgcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMgPSBbXSxcbiAgICAgICAgICBzZWxlY3RlZFNjb3BlcyA9IFtdO1xuXG4gICAgICB2YXIgc3BsaWNlRmFjdG9yeSA9IGZ1bmN0aW9uKGFycmF5LCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTsgfTtcbiAgICAgIH07XG5cbiAgICAgIHNjb3BlLiR3YXRjaCh3YXRjaEV4cHIsIGZ1bmN0aW9uIG5nU3dpdGNoV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGksIGlpO1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHByZXZpb3VzTGVhdmVBbmltYXRpb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5jYW5jZWwocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzTGVhdmVBbmltYXRpb25zLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBzZWxlY3RlZFNjb3Blcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkID0gZ2V0QmxvY2tOb2RlcyhzZWxlY3RlZEVsZW1lbnRzW2ldLmNsb25lKTtcbiAgICAgICAgICBzZWxlY3RlZFNjb3Blc1tpXS4kZGVzdHJveSgpO1xuICAgICAgICAgIHZhciBwcm9taXNlID0gcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnNbaV0gPSAkYW5pbWF0ZS5sZWF2ZShzZWxlY3RlZCk7XG4gICAgICAgICAgcHJvbWlzZS50aGVuKHNwbGljZUZhY3RvcnkocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMsIGkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGVjdGVkRWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICAgICAgc2VsZWN0ZWRTY29wZXMubGVuZ3RoID0gMDtcblxuICAgICAgICBpZiAoKHNlbGVjdGVkVHJhbnNjbHVkZXMgPSBuZ1N3aXRjaENvbnRyb2xsZXIuY2FzZXNbJyEnICsgdmFsdWVdIHx8IG5nU3dpdGNoQ29udHJvbGxlci5jYXNlc1snPyddKSkge1xuICAgICAgICAgIGZvckVhY2goc2VsZWN0ZWRUcmFuc2NsdWRlcywgZnVuY3Rpb24oc2VsZWN0ZWRUcmFuc2NsdWRlKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFRyYW5zY2x1ZGUudHJhbnNjbHVkZShmdW5jdGlvbihjYXNlRWxlbWVudCwgc2VsZWN0ZWRTY29wZSkge1xuICAgICAgICAgICAgICBzZWxlY3RlZFNjb3Blcy5wdXNoKHNlbGVjdGVkU2NvcGUpO1xuICAgICAgICAgICAgICB2YXIgYW5jaG9yID0gc2VsZWN0ZWRUcmFuc2NsdWRlLmVsZW1lbnQ7XG4gICAgICAgICAgICAgIGNhc2VFbGVtZW50W2Nhc2VFbGVtZW50Lmxlbmd0aCsrXSA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJyBlbmQgbmdTd2l0Y2hXaGVuOiAnKTtcbiAgICAgICAgICAgICAgdmFyIGJsb2NrID0geyBjbG9uZTogY2FzZUVsZW1lbnQgfTtcblxuICAgICAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjYXNlRWxlbWVudCwgYW5jaG9yLnBhcmVudCgpLCBhbmNob3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gIHByaW9yaXR5OiAxMjAwLFxuICByZXF1aXJlOiAnXm5nU3dpdGNoJyxcbiAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG4gICAgY3RybC5jYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dID0gKGN0cmwuY2FzZXNbJyEnICsgYXR0cnMubmdTd2l0Y2hXaGVuXSB8fCBbXSk7XG4gICAgY3RybC5jYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dLnB1c2goeyB0cmFuc2NsdWRlOiAkdHJhbnNjbHVkZSwgZWxlbWVudDogZWxlbWVudCB9KTtcbiAgfVxufSk7XG5cbnZhciBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgcHJpb3JpdHk6IDEyMDAsXG4gIHJlcXVpcmU6ICdebmdTd2l0Y2gnLFxuICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgIGN0cmwuY2FzZXNbJz8nXSA9IChjdHJsLmNhc2VzWyc/J10gfHwgW10pO1xuICAgIGN0cmwuY2FzZXNbJz8nXS5wdXNoKHsgdHJhbnNjbHVkZTogJHRyYW5zY2x1ZGUsIGVsZW1lbnQ6IGVsZW1lbnQgfSk7XG4gICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1RyYW5zY2x1ZGVcbiAqIEByZXN0cmljdCBFQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERpcmVjdGl2ZSB0aGF0IG1hcmtzIHRoZSBpbnNlcnRpb24gcG9pbnQgZm9yIHRoZSB0cmFuc2NsdWRlZCBET00gb2YgdGhlIG5lYXJlc3QgcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHVzZXMgdHJhbnNjbHVzaW9uLlxuICpcbiAqIEFueSBleGlzdGluZyBjb250ZW50IG9mIHRoZSBlbGVtZW50IHRoYXQgdGhpcyBkaXJlY3RpdmUgaXMgcGxhY2VkIG9uIHdpbGwgYmUgcmVtb3ZlZCBiZWZvcmUgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgaW5zZXJ0ZWQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cInRyYW5zY2x1ZGVFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd0cmFuc2NsdWRlRXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5kaXJlY3RpdmUoJ3BhbmUnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAgICAgIHNjb3BlOiB7IHRpdGxlOidAJyB9LFxuICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHN0eWxlPVwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6IGdyYXlcIj57e3RpdGxlfX08L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bmctdHJhbnNjbHVkZT48L25nLXRyYW5zY2x1ZGU+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgfSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICRzY29wZS50aXRsZSA9ICdMb3JlbSBJcHN1bSc7XG4gICAgICAgICAgICRzY29wZS50ZXh0ID0gJ05lcXVlIHBvcnJvIHF1aXNxdWFtIGVzdCBxdWkgZG9sb3JlbSBpcHN1bSBxdWlhIGRvbG9yLi4uJztcbiAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwidGl0bGVcIiBhcmlhLWxhYmVsPVwidGl0bGVcIj4gPGJyLz5cbiAgICAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cInRleHRcIiBhcmlhLWxhYmVsPVwidGV4dFwiPjwvdGV4dGFyZWE+IDxici8+XG4gICAgICAgICA8cGFuZSB0aXRsZT1cInt7dGl0bGV9fVwiPnt7dGV4dH19PC9wYW5lPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBoYXZlIHRyYW5zY2x1ZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRpdGxlRWxlbWVudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RpdGxlJykpO1xuICAgICAgICAgIHRpdGxlRWxlbWVudC5jbGVhcigpO1xuICAgICAgICAgIHRpdGxlRWxlbWVudC5zZW5kS2V5cygnVElUTEUnKTtcbiAgICAgICAgICB2YXIgdGV4dEVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0ZXh0JykpO1xuICAgICAgICAgIHRleHRFbGVtZW50LmNsZWFyKCk7XG4gICAgICAgICAgdGV4dEVsZW1lbnQuc2VuZEtleXMoJ1RFWFQnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd0aXRsZScpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RJVExFJyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGV4dCcpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1RFWFQnKTtcbiAgICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKi9cbnZhciBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIHJlc3RyaWN0OiAnRUFDJyxcbiAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCBjb250cm9sbGVyLCAkdHJhbnNjbHVkZSkge1xuICAgIGlmICghJHRyYW5zY2x1ZGUpIHtcbiAgICAgIHRocm93IG1pbkVycignbmdUcmFuc2NsdWRlJykoJ29ycGhhbicsXG4gICAgICAgJ0lsbGVnYWwgdXNlIG9mIG5nVHJhbnNjbHVkZSBkaXJlY3RpdmUgaW4gdGhlIHRlbXBsYXRlISAnICtcbiAgICAgICAnTm8gcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHJlcXVpcmVzIGEgdHJhbnNjbHVzaW9uIGZvdW5kLiAnICtcbiAgICAgICAnRWxlbWVudDogezB9JyxcbiAgICAgICBzdGFydGluZ1RhZygkZWxlbWVudCkpO1xuICAgIH1cblxuICAgICR0cmFuc2NsdWRlKGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAkZWxlbWVudC5lbXB0eSgpO1xuICAgICAgJGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgc2NyaXB0XG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTG9hZCB0aGUgY29udGVudCBvZiBhIGA8c2NyaXB0PmAgZWxlbWVudCBpbnRvIHtAbGluayBuZy4kdGVtcGxhdGVDYWNoZSBgJHRlbXBsYXRlQ2FjaGVgfSwgc28gdGhhdCB0aGVcbiAqIHRlbXBsYXRlIGNhbiBiZSB1c2VkIGJ5IHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIGBuZ0luY2x1ZGVgfSxcbiAqIHtAbGluayBuZ1JvdXRlLmRpcmVjdGl2ZTpuZ1ZpZXcgYG5nVmlld2B9LCBvciB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LiBUaGUgdHlwZSBvZiB0aGVcbiAqIGA8c2NyaXB0PmAgZWxlbWVudCBtdXN0IGJlIHNwZWNpZmllZCBhcyBgdGV4dC9uZy10ZW1wbGF0ZWAsIGFuZCBhIGNhY2hlIG5hbWUgZm9yIHRoZSB0ZW1wbGF0ZSBtdXN0IGJlXG4gKiBhc3NpZ25lZCB0aHJvdWdoIHRoZSBlbGVtZW50J3MgYGlkYCwgd2hpY2ggY2FuIHRoZW4gYmUgdXNlZCBhcyBhIGRpcmVjdGl2ZSdzIGB0ZW1wbGF0ZVVybGAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgTXVzdCBiZSBzZXQgdG8gYCd0ZXh0L25nLXRlbXBsYXRlJ2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgQ2FjaGUgbmFtZSBvZiB0aGUgdGVtcGxhdGUuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGU+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cIi90cGwuaHRtbFwiPlxuICAgICAgICBDb250ZW50IG9mIHRoZSB0ZW1wbGF0ZS5cbiAgICAgIDwvc2NyaXB0PlxuXG4gICAgICA8YSBuZy1jbGljaz1cImN1cnJlbnRUcGw9Jy90cGwuaHRtbCdcIiBpZD1cInRwbC1saW5rXCI+TG9hZCBpbmxpbmVkIHRlbXBsYXRlPC9hPlxuICAgICAgPGRpdiBpZD1cInRwbC1jb250ZW50XCIgbmctaW5jbHVkZSBzcmM9XCJjdXJyZW50VHBsXCI+PC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZSBkZWZpbmVkIGluc2lkZSBzY3JpcHQgdGFnJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjdHBsLWxpbmsnKSkuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcjdHBsLWNvbnRlbnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRoZSB0ZW1wbGF0ZS8pO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBzY3JpcHREaXJlY3RpdmUgPSBbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIGlmIChhdHRyLnR5cGUgPT0gJ3RleHQvbmctdGVtcGxhdGUnKSB7XG4gICAgICAgIHZhciB0ZW1wbGF0ZVVybCA9IGF0dHIuaWQsXG4gICAgICAgICAgICB0ZXh0ID0gZWxlbWVudFswXS50ZXh0O1xuXG4gICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCh0ZW1wbGF0ZVVybCwgdGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBub29wTmdNb2RlbENvbnRyb2xsZXIgPSB7ICRzZXRWaWV3VmFsdWU6IG5vb3AsICRyZW5kZXI6IG5vb3AgfTtcblxuZnVuY3Rpb24gY2hyb21lSGFjayhvcHRpb25FbGVtZW50KSB7XG4gIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zODE0NTlcbiAgLy8gQWRkaW5nIGFuIDxvcHRpb24gc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPiBlbGVtZW50IHRvIGEgPHNlbGVjdCByZXF1aXJlZD1cInJlcXVpcmVkXCI+IHNob3VsZFxuICAvLyBhdXRvbWF0aWNhbGx5IHNlbGVjdCB0aGUgbmV3IGVsZW1lbnRcbiAgaWYgKG9wdGlvbkVsZW1lbnRbMF0uaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpKSB7XG4gICAgb3B0aW9uRWxlbWVudFswXS5zZWxlY3RlZCA9IHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgIHNlbGVjdC5TZWxlY3RDb250cm9sbGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBjb250cm9sbGVyIGZvciB0aGUgYDxzZWxlY3Q+YCBkaXJlY3RpdmUuIFRoaXMgcHJvdmlkZXMgc3VwcG9ydCBmb3IgcmVhZGluZ1xuICogYW5kIHdyaXRpbmcgdGhlIHNlbGVjdGVkIHZhbHVlKHMpIG9mIHRoZSBjb250cm9sIGFuZCBhbHNvIGNvb3JkaW5hdGVzIGR5bmFtaWNhbGx5XG4gKiBhZGRlZCBgPG9wdGlvbj5gIGVsZW1lbnRzLCBwZXJoYXBzIGJ5IGFuIGBuZ1JlcGVhdGAgZGlyZWN0aXZlLlxuICovXG52YXIgU2VsZWN0Q29udHJvbGxlciA9XG4gICAgICAgIFsnJGVsZW1lbnQnLCAnJHNjb3BlJywgJyRhdHRycycsIGZ1bmN0aW9uKCRlbGVtZW50LCAkc2NvcGUsICRhdHRycykge1xuXG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIG9wdGlvbnNNYXAgPSBuZXcgSGFzaE1hcCgpO1xuXG4gIC8vIElmIHRoZSBuZ01vZGVsIGRvZXNuJ3QgZ2V0IHByb3ZpZGVkIHRoZW4gcHJvdmlkZSBhIGR1bW15IG5vb3AgdmVyc2lvbiB0byBwcmV2ZW50IGVycm9yc1xuICBzZWxmLm5nTW9kZWxDdHJsID0gbm9vcE5nTW9kZWxDb250cm9sbGVyO1xuXG4gIC8vIFRoZSBcInVua25vd25cIiBvcHRpb24gaXMgb25lIHRoYXQgaXMgcHJlcGVuZGVkIHRvIHRoZSBsaXN0IGlmIHRoZSB2aWV3VmFsdWVcbiAgLy8gZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb25zLiBXaGVuIGl0IGlzIHJlbmRlcmVkIHRoZSB2YWx1ZSBvZiB0aGUgdW5rbm93blxuICAvLyBvcHRpb24gaXMgJz8gWFhYID8nIHdoZXJlIFhYWCBpcyB0aGUgaGFzaEtleSBvZiB0aGUgdmFsdWUgdGhhdCBpcyBub3Qga25vd24uXG4gIC8vXG4gIC8vIFdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXG4gIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICBzZWxmLnVua25vd25PcHRpb24gPSBqcUxpdGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJykpO1xuICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgdW5rbm93blZhbCA9ICc/ICcgKyBoYXNoS2V5KHZhbCkgKyAnID8nO1xuICAgIHNlbGYudW5rbm93bk9wdGlvbi52YWwodW5rbm93blZhbCk7XG4gICAgJGVsZW1lbnQucHJlcGVuZChzZWxmLnVua25vd25PcHRpb24pO1xuICAgICRlbGVtZW50LnZhbCh1bmtub3duVmFsKTtcbiAgfTtcblxuICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgIC8vIGRpc2FibGUgdW5rbm93biBvcHRpb24gc28gdGhhdCB3ZSBkb24ndCBkbyB3b3JrIHdoZW4gdGhlIHdob2xlIHNlbGVjdCBpcyBiZWluZyBkZXN0cm95ZWRcbiAgICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBub29wO1xuICB9KTtcblxuICBzZWxmLnJlbW92ZVVua25vd25PcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi51bmtub3duT3B0aW9uLnBhcmVudCgpKSBzZWxmLnVua25vd25PcHRpb24ucmVtb3ZlKCk7XG4gIH07XG5cblxuICAvLyBSZWFkIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0IGNvbnRyb2wsIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGNoYW5nZXMgZGVwZW5kaW5nXG4gIC8vIHVwb24gd2hldGhlciB0aGUgc2VsZWN0IGNhbiBoYXZlIG11bHRpcGxlIHZhbHVlcyBhbmQgd2hldGhlciBuZ09wdGlvbnMgaXMgYXQgd29yay5cbiAgc2VsZi5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkU2luZ2xlVmFsdWUoKSB7XG4gICAgc2VsZi5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG4gICAgcmV0dXJuICRlbGVtZW50LnZhbCgpO1xuICB9O1xuXG5cbiAgLy8gV3JpdGUgdGhlIHZhbHVlIHRvIHRoZSBzZWxlY3QgY29udHJvbCwgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgY2hhbmdlcyBkZXBlbmRpbmdcbiAgLy8gdXBvbiB3aGV0aGVyIHRoZSBzZWxlY3QgY2FuIGhhdmUgbXVsdGlwbGUgdmFsdWVzIGFuZCB3aGV0aGVyIG5nT3B0aW9ucyBpcyBhdCB3b3JrLlxuICBzZWxmLndyaXRlVmFsdWUgPSBmdW5jdGlvbiB3cml0ZVNpbmdsZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHNlbGYuaGFzT3B0aW9uKHZhbHVlKSkge1xuICAgICAgc2VsZi5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG4gICAgICAkZWxlbWVudC52YWwodmFsdWUpO1xuICAgICAgaWYgKHZhbHVlID09PSAnJykgc2VsZi5lbXB0eU9wdGlvbi5wcm9wKCdzZWxlY3RlZCcsIHRydWUpOyAvLyB0byBtYWtlIElFOSBoYXBweVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiBzZWxmLmVtcHR5T3B0aW9uKSB7XG4gICAgICAgIHNlbGYucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgICAkZWxlbWVudC52YWwoJycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5yZW5kZXJVbmtub3duT3B0aW9uKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cblxuICAvLyBUZWxsIHRoZSBzZWxlY3QgY29udHJvbCB0aGF0IGFuIG9wdGlvbiwgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUsIGhhcyBiZWVuIGFkZGVkXG4gIHNlbGYuYWRkT3B0aW9uID0gZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgJ1wib3B0aW9uIHZhbHVlXCInKTtcbiAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICBzZWxmLmVtcHR5T3B0aW9uID0gZWxlbWVudDtcbiAgICB9XG4gICAgdmFyIGNvdW50ID0gb3B0aW9uc01hcC5nZXQodmFsdWUpIHx8IDA7XG4gICAgb3B0aW9uc01hcC5wdXQodmFsdWUsIGNvdW50ICsgMSk7XG4gICAgc2VsZi5uZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgY2hyb21lSGFjayhlbGVtZW50KTtcbiAgfTtcblxuICAvLyBUZWxsIHRoZSBzZWxlY3QgY29udHJvbCB0aGF0IGFuIG9wdGlvbiwgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUsIGhhcyBiZWVuIHJlbW92ZWRcbiAgc2VsZi5yZW1vdmVPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBjb3VudCA9IG9wdGlvbnNNYXAuZ2V0KHZhbHVlKTtcbiAgICBpZiAoY291bnQpIHtcbiAgICAgIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgICBvcHRpb25zTWFwLnJlbW92ZSh2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICBzZWxmLmVtcHR5T3B0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zTWFwLnB1dCh2YWx1ZSwgY291bnQgLSAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2VsZWN0IGNvbnRyb2wgaGFzIGFuIG9wdGlvbiBtYXRjaGluZyB0aGUgZ2l2ZW4gdmFsdWVcbiAgc2VsZi5oYXNPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAhIW9wdGlvbnNNYXAuZ2V0KHZhbHVlKTtcbiAgfTtcblxuXG4gIHNlbGYucmVnaXN0ZXJPcHRpb24gPSBmdW5jdGlvbihvcHRpb25TY29wZSwgb3B0aW9uRWxlbWVudCwgb3B0aW9uQXR0cnMsIGludGVycG9sYXRlVmFsdWVGbiwgaW50ZXJwb2xhdGVUZXh0Rm4pIHtcblxuICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlRm4pIHtcbiAgICAgIC8vIFRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgaW50ZXJwb2xhdGVkXG4gICAgICB2YXIgb2xkVmFsO1xuICAgICAgb3B0aW9uQXR0cnMuJG9ic2VydmUoJ3ZhbHVlJywgZnVuY3Rpb24gdmFsdWVBdHRyaWJ1dGVPYnNlcnZlQWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICBpZiAoaXNEZWZpbmVkKG9sZFZhbCkpIHtcbiAgICAgICAgICBzZWxmLnJlbW92ZU9wdGlvbihvbGRWYWwpO1xuICAgICAgICB9XG4gICAgICAgIG9sZFZhbCA9IG5ld1ZhbDtcbiAgICAgICAgc2VsZi5hZGRPcHRpb24obmV3VmFsLCBvcHRpb25FbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGVUZXh0Rm4pIHtcbiAgICAgIC8vIFRoZSB0ZXh0IGNvbnRlbnQgaXMgaW50ZXJwb2xhdGVkXG4gICAgICBvcHRpb25TY29wZS4kd2F0Y2goaW50ZXJwb2xhdGVUZXh0Rm4sIGZ1bmN0aW9uIGludGVycG9sYXRlV2F0Y2hBY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgb3B0aW9uQXR0cnMuJHNldCgndmFsdWUnLCBuZXdWYWwpO1xuICAgICAgICBpZiAob2xkVmFsICE9PSBuZXdWYWwpIHtcbiAgICAgICAgICBzZWxmLnJlbW92ZU9wdGlvbihvbGRWYWwpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuYWRkT3B0aW9uKG5ld1ZhbCwgb3B0aW9uRWxlbWVudCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBzdGF0aWNcbiAgICAgIHNlbGYuYWRkT3B0aW9uKG9wdGlvbkF0dHJzLnZhbHVlLCBvcHRpb25FbGVtZW50KTtcbiAgICB9XG5cbiAgICBvcHRpb25FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5yZW1vdmVPcHRpb24ob3B0aW9uQXR0cnMudmFsdWUpO1xuICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgfSk7XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBzZWxlY3RcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIGBTRUxFQ1RgIGVsZW1lbnQgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy5cbiAqXG4gKiBUaGUgYHNlbGVjdGAgZGlyZWN0aXZlIGlzIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9IHRvIHByb3ZpZGUgZGF0YS1iaW5kaW5nXG4gKiBiZXR3ZWVuIHRoZSBzY29wZSBhbmQgdGhlIGA8c2VsZWN0PmAgY29udHJvbCAoaW5jbHVkaW5nIHNldHRpbmcgZGVmYXVsdCB2YWx1ZXMpLlxuICogSXQgYWxzbyBoYW5kbGVzIGR5bmFtaWMgYDxvcHRpb24+YCBlbGVtZW50cywgd2hpY2ggY2FuIGJlIGFkZGVkIHVzaW5nIHRoZSB7QGxpbmsgbmdSZXBlYXQgYG5nUmVwZWF0fWAgb3JcbiAqIHtAbGluayBuZ09wdGlvbnMgYG5nT3B0aW9uc2B9IGRpcmVjdGl2ZXMuXG4gKlxuICogV2hlbiBhbiBpdGVtIGluIHRoZSBgPHNlbGVjdD5gIG1lbnUgaXMgc2VsZWN0ZWQsIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmRcbiAqIHRvIHRoZSBtb2RlbCBpZGVudGlmaWVkIGJ5IHRoZSBgbmdNb2RlbGAgZGlyZWN0aXZlLiBXaXRoIHN0YXRpYyBvciByZXBlYXRlZCBvcHRpb25zLCB0aGlzIGlzXG4gKiB0aGUgY29udGVudCBvZiB0aGUgYHZhbHVlYCBhdHRyaWJ1dGUgb3IgdGhlIHRleHRDb250ZW50IG9mIHRoZSBgPG9wdGlvbj5gLCBpZiB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIG1pc3NpbmcuXG4gKiBJZiB5b3Ugd2FudCBkeW5hbWljIHZhbHVlIGF0dHJpYnV0ZXMsIHlvdSBjYW4gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSB2YWx1ZSBhdHRyaWJ1dGUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqIE5vdGUgdGhhdCB0aGUgdmFsdWUgb2YgYSBgc2VsZWN0YCBkaXJlY3RpdmUgdXNlZCB3aXRob3V0IGBuZ09wdGlvbnNgIGlzIGFsd2F5cyBhIHN0cmluZy5cbiAqIFdoZW4gdGhlIG1vZGVsIG5lZWRzIHRvIGJlIGJvdW5kIHRvIGEgbm9uLXN0cmluZyB2YWx1ZSwgeW91IG11c3QgZWl0aGVyIGV4cGxpY3RseSBjb252ZXJ0IGl0XG4gKiB1c2luZyBhIGRpcmVjdGl2ZSAoc2VlIGV4YW1wbGUgYmVsb3cpIG9yIHVzZSBgbmdPcHRpb25zYCB0byBzcGVjaWZ5IHRoZSBzZXQgb2Ygb3B0aW9ucy5cbiAqIFRoaXMgaXMgYmVjYXVzZSBhbiBvcHRpb24gZWxlbWVudCBjYW4gb25seSBiZSBib3VuZCB0byBzdHJpbmcgdmFsdWVzIGF0IHByZXNlbnQuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJZiB0aGUgdmlld1ZhbHVlIG9mIGBuZ01vZGVsYCBkb2VzIG5vdCBtYXRjaCBhbnkgb2YgdGhlIG9wdGlvbnMsIHRoZW4gdGhlIGNvbnRyb2xcbiAqIHdpbGwgYXV0b21hdGljYWxseSBhZGQgYW4gXCJ1bmtub3duXCIgb3B0aW9uLCB3aGljaCBpdCB0aGVuIHJlbW92ZXMgd2hlbiB0aGUgbWlzbWF0Y2ggaXMgcmVzb2x2ZWQuXG4gKlxuICogT3B0aW9uYWxseSwgYSBzaW5nbGUgaGFyZC1jb2RlZCBgPG9wdGlvbj5gIGVsZW1lbnQsIHdpdGggdGhlIHZhbHVlIHNldCB0byBhbiBlbXB0eSBzdHJpbmcsIGNhblxuICogYmUgbmVzdGVkIGludG8gdGhlIGA8c2VsZWN0PmAgZWxlbWVudC4gVGhpcyBlbGVtZW50IHdpbGwgdGhlbiByZXByZXNlbnQgdGhlIGBudWxsYCBvciBcIm5vdCBzZWxlY3RlZFwiXG4gKiBvcHRpb24uIFNlZSBleGFtcGxlIGJlbG93IGZvciBkZW1vbnN0cmF0aW9uLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiBJbiBtYW55IGNhc2VzLCBgbmdSZXBlYXRgIGNhbiBiZSB1c2VkIG9uIGA8b3B0aW9uPmAgZWxlbWVudHMgaW5zdGVhZCBvZiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nT3B0aW9uc1xuICogbmdPcHRpb25zfSB0byBhY2hpZXZlIGEgc2ltaWxhciByZXN1bHQuIEhvd2V2ZXIsIGBuZ09wdGlvbnNgIHByb3ZpZGVzIHNvbWUgYmVuZWZpdHMsIHN1Y2ggYXNcbiAqIG1vcmUgZmxleGliaWxpdHkgaW4gaG93IHRoZSBgPHNlbGVjdD5gJ3MgbW9kZWwgaXMgYXNzaWduZWQgdmlhIHRoZSBgc2VsZWN0YCAqKmBhc2AqKiBwYXJ0IG9mIHRoZVxuICogY29tcHJlaGVuc2lvbiBleHByZXNzaW9uLCBhbmQgYWRkaXRpb25hbGx5IGluIHJlZHVjaW5nIG1lbW9yeSBhbmQgaW5jcmVhc2luZyBzcGVlZCBieSBub3QgY3JlYXRpbmdcbiAqIGEgbmV3IHNjb3BlIGZvciBlYWNoIHJlcGVhdGVkIGluc3RhbmNlLlxuICogPC9kaXY+XG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbXVsdGlwbGUgQWxsb3dzIG11bHRpcGxlIG9wdGlvbnMgdG8gYmUgc2VsZWN0ZWQuIFRoZSBzZWxlY3RlZCB2YWx1ZXMgd2lsbCBiZVxuICogICAgIGJvdW5kIHRvIHRoZSBtb2RlbCBhcyBhbiBhcnJheS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIHJlcXVpcmVkIGF0dHJpYnV0ZSBhbmQgcmVxdWlyZWQgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBuZ1JlcXVpcmVkIGluc3RlYWQgb2YgcmVxdWlyZWRcbiAqIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIHNlbGVjdGVkIG9wdGlvbihzKSBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdPcHRpb25zIHNldHMgdGhlIG9wdGlvbnMgdGhhdCB0aGUgc2VsZWN0IGlzIHBvcHVsYXRlZCB3aXRoIGFuZCBkZWZpbmVzIHdoYXQgaXNcbiAqIHNldCBvbiB0aGUgbW9kZWwgb24gc2VsZWN0aW9uLiBTZWUge0BsaW5rIG5nT3B0aW9ucyBgbmdPcHRpb25zYH0uXG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBTaW1wbGUgYHNlbGVjdGAgZWxlbWVudHMgd2l0aCBzdGF0aWMgb3B0aW9uc1xuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzdGF0aWMtc2VsZWN0XCIgbW9kdWxlPVwic3RhdGljU2VsZWN0XCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICogICAgIDxsYWJlbCBmb3I9XCJzaW5nbGVTZWxlY3RcIj4gU2luZ2xlIHNlbGVjdDogPC9sYWJlbD48YnI+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwic2luZ2xlU2VsZWN0XCIgbmctbW9kZWw9XCJkYXRhLnNpbmdsZVNlbGVjdFwiPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0xXCI+T3B0aW9uIDE8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+PGJyPlxuICpcbiAqICAgICA8bGFiZWwgZm9yPVwic2luZ2xlU2VsZWN0XCI+IFNpbmdsZSBzZWxlY3Qgd2l0aCBcIm5vdCBzZWxlY3RlZFwiIG9wdGlvbiBhbmQgZHluYW1pYyBvcHRpb24gdmFsdWVzOiA8L2xhYmVsPjxicj5cbiAqICAgICA8c2VsZWN0IG5hbWU9XCJzaW5nbGVTZWxlY3RcIiBpZD1cInNpbmdsZVNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5zaW5nbGVTZWxlY3RcIj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tLS1QbGVhc2Ugc2VsZWN0LS0tPC9vcHRpb24+IDwhLS0gbm90IHNlbGVjdGVkIC8gYmxhbmsgb3B0aW9uIC0tPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cInt7ZGF0YS5vcHRpb24xfX1cIj5PcHRpb24gMTwvb3B0aW9uPiA8IS0tIGludGVycG9sYXRpb24gLS0+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTJcIj5PcHRpb24gMjwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0Pjxicj5cbiAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZm9yY2VVbmtub3duT3B0aW9uKClcIj5Gb3JjZSB1bmtub3duIG9wdGlvbjwvYnV0dG9uPjxicj5cbiAqICAgICA8dHQ+c2luZ2xlU2VsZWN0ID0ge3tkYXRhLnNpbmdsZVNlbGVjdH19PC90dD5cbiAqXG4gKiAgICAgPGhyPlxuICogICAgIDxsYWJlbCBmb3I9XCJtdWx0aXBsZVNlbGVjdFwiPiBNdWx0aXBsZSBzZWxlY3Q6IDwvbGFiZWw+PGJyPlxuICogICAgIDxzZWxlY3QgbmFtZT1cIm11bHRpcGxlU2VsZWN0XCIgaWQ9XCJtdWx0aXBsZVNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5tdWx0aXBsZVNlbGVjdFwiIG11bHRpcGxlPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0xXCI+T3B0aW9uIDE8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTNcIj5PcHRpb24gMzwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0Pjxicj5cbiAqICAgICA8dHQ+bXVsdGlwbGVTZWxlY3QgPSB7e2RhdGEubXVsdGlwbGVTZWxlY3R9fTwvdHQ+PGJyLz5cbiAqICAgPC9mb3JtPlxuICogPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgYW5ndWxhci5tb2R1bGUoJ3N0YXRpY1NlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLmRhdGEgPSB7XG4gKiAgICAgICBzaW5nbGVTZWxlY3Q6IG51bGwsXG4gKiAgICAgICBtdWx0aXBsZVNlbGVjdDogW10sXG4gKiAgICAgICBvcHRpb24xOiAnb3B0aW9uLTEnLFxuICogICAgICB9O1xuICpcbiAqICAgICAgJHNjb3BlLmZvcmNlVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICRzY29wZS5kYXRhLnNpbmdsZVNlbGVjdCA9ICdub25zZW5zZSc7XG4gKiAgICAgIH07XG4gKiAgIH1dKTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqICMjIyBVc2luZyBgbmdSZXBlYXRgIHRvIGdlbmVyYXRlIGBzZWxlY3RgIG9wdGlvbnNcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ3JlcGVhdC1zZWxlY3RcIiBtb2R1bGU9XCJuZ3JlcGVhdFNlbGVjdFwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAqICAgICA8bGFiZWwgZm9yPVwicmVwZWF0U2VsZWN0XCI+IFJlcGVhdCBzZWxlY3Q6IDwvbGFiZWw+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwicmVwZWF0U2VsZWN0XCIgaWQ9XCJyZXBlYXRTZWxlY3RcIiBuZy1tb2RlbD1cImRhdGEucmVwZWF0U2VsZWN0XCI+XG4gKiAgICAgICA8b3B0aW9uIG5nLXJlcGVhdD1cIm9wdGlvbiBpbiBkYXRhLmF2YWlsYWJsZU9wdGlvbnNcIiB2YWx1ZT1cInt7b3B0aW9uLmlkfX1cIj57e29wdGlvbi5uYW1lfX08L29wdGlvbj5cbiAqICAgICA8L3NlbGVjdD5cbiAqICAgPC9mb3JtPlxuICogICA8aHI+XG4gKiAgIDx0dD5yZXBlYXRTZWxlY3QgPSB7e2RhdGEucmVwZWF0U2VsZWN0fX08L3R0Pjxici8+XG4gKiA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICBhbmd1bGFyLm1vZHVsZSgnbmdyZXBlYXRTZWxlY3QnLCBbXSlcbiAqICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICRzY29wZS5kYXRhID0ge1xuICogICAgICAgcmVwZWF0U2VsZWN0OiBudWxsLFxuICogICAgICAgYXZhaWxhYmxlT3B0aW9uczogW1xuICogICAgICAgICB7aWQ6ICcxJywgbmFtZTogJ09wdGlvbiBBJ30sXG4gKiAgICAgICAgIHtpZDogJzInLCBuYW1lOiAnT3B0aW9uIEInfSxcbiAqICAgICAgICAge2lkOiAnMycsIG5hbWU6ICdPcHRpb24gQyd9XG4gKiAgICAgICBdLFxuICogICAgICB9O1xuICogICB9XSk7XG4gKiA8L2ZpbGU+XG4gKjwvZXhhbXBsZT5cbiAqXG4gKlxuICogIyMjIFVzaW5nIGBzZWxlY3RgIHdpdGggYG5nT3B0aW9uc2AgYW5kIHNldHRpbmcgYSBkZWZhdWx0IHZhbHVlXG4gKiBTZWUgdGhlIHtAbGluayBuZ09wdGlvbnMgbmdPcHRpb25zIGRvY3VtZW50YXRpb259IGZvciBtb3JlIGBuZ09wdGlvbnNgIHVzYWdlIGV4YW1wbGVzLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3Qtd2l0aC1kZWZhdWx0LXZhbHVlc1wiIG1vZHVsZT1cImRlZmF1bHRWYWx1ZVNlbGVjdFwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAqICAgICA8bGFiZWwgZm9yPVwibXlTZWxlY3RcIj5NYWtlIGEgY2hvaWNlOjwvbGFiZWw+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwibXlTZWxlY3RcIiBpZD1cIm15U2VsZWN0XCJcbiAqICAgICAgIG5nLW9wdGlvbnM9XCJvcHRpb24ubmFtZSBmb3Igb3B0aW9uIGluIGRhdGEuYXZhaWxhYmxlT3B0aW9ucyB0cmFjayBieSBvcHRpb24uaWRcIlxuICogICAgICAgbmctbW9kZWw9XCJkYXRhLnNlbGVjdGVkT3B0aW9uXCI+PC9zZWxlY3Q+XG4gKiAgIDwvZm9ybT5cbiAqICAgPGhyPlxuICogICA8dHQ+b3B0aW9uID0ge3tkYXRhLnNlbGVjdGVkT3B0aW9ufX08L3R0Pjxici8+XG4gKiA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICBhbmd1bGFyLm1vZHVsZSgnZGVmYXVsdFZhbHVlU2VsZWN0JywgW10pXG4gKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAkc2NvcGUuZGF0YSA9IHtcbiAqICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcbiAqICAgICAgICAge2lkOiAnMScsIG5hbWU6ICdPcHRpb24gQSd9LFxuICogICAgICAgICB7aWQ6ICcyJywgbmFtZTogJ09wdGlvbiBCJ30sXG4gKiAgICAgICAgIHtpZDogJzMnLCBuYW1lOiAnT3B0aW9uIEMnfVxuICogICAgICAgXSxcbiAqICAgICAgIHNlbGVjdGVkT3B0aW9uOiB7aWQ6ICczJywgbmFtZTogJ09wdGlvbiBDJ30gLy9UaGlzIHNldHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIHNlbGVjdCBpbiB0aGUgdWlcbiAqICAgICAgIH07XG4gKiAgIH1dKTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqXG4gKiAjIyMgQmluZGluZyBgc2VsZWN0YCB0byBhIG5vbi1zdHJpbmcgdmFsdWUgdmlhIGBuZ01vZGVsYCBwYXJzaW5nIC8gZm9ybWF0dGluZ1xuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3Qtd2l0aC1ub24tc3RyaW5nLW9wdGlvbnNcIiBtb2R1bGU9XCJub25TdHJpbmdTZWxlY3RcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2VsZWN0IG5nLW1vZGVsPVwibW9kZWwuaWRcIiBjb252ZXJ0LXRvLW51bWJlcj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIwXCI+WmVybzwvb3B0aW9uPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIjFcIj5PbmU8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIyXCI+VHdvPC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+XG4gKiAgICAge3sgbW9kZWwgfX1cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICAgYW5ndWxhci5tb2R1bGUoJ25vblN0cmluZ1NlbGVjdCcsIFtdKVxuICogICAgICAgLnJ1bihmdW5jdGlvbigkcm9vdFNjb3BlKSB7XG4gKiAgICAgICAgICRyb290U2NvcGUubW9kZWwgPSB7IGlkOiAyIH07XG4gKiAgICAgICB9KVxuICogICAgICAgLmRpcmVjdGl2ZSgnY29udmVydFRvTnVtYmVyJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICogICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICogICAgICAgICAgICAgbmdNb2RlbC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbCkge1xuICogICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodmFsLCAxMCk7XG4gKiAgICAgICAgICAgICB9KTtcbiAqICAgICAgICAgICAgIG5nTW9kZWwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWwpIHtcbiAqICAgICAgICAgICAgICAgcmV0dXJuICcnICsgdmFsO1xuICogICAgICAgICAgICAgfSk7XG4gKiAgICAgICAgICAgfVxuICogICAgICAgICB9O1xuICogICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgdmFyIHNlbGVjdCA9IGVsZW1lbnQoYnkuY3NzKCdzZWxlY3QnKSk7XG4gKiAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgnbW9kZWwuaWQnKSkuJCgnb3B0aW9uOmNoZWNrZWQnKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1R3bycpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICovXG52YXIgc2VsZWN0RGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnc2VsZWN0JywgJz9uZ01vZGVsJ10sXG4gICAgY29udHJvbGxlcjogU2VsZWN0Q29udHJvbGxlcixcbiAgICBwcmlvcml0eTogMSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IHNlbGVjdFByZUxpbmssXG4gICAgICBwb3N0OiBzZWxlY3RQb3N0TGlua1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzZWxlY3RQcmVMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuXG4gICAgICAvLyBpZiBuZ01vZGVsIGlzIG5vdCBkZWZpbmVkLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nXG4gICAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcbiAgICAgIGlmICghbmdNb2RlbEN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1swXTtcblxuICAgICAgc2VsZWN0Q3RybC5uZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsO1xuXG4gICAgICAvLyBXaGVuIHRoZSBzZWxlY3RlZCBpdGVtKHMpIGNoYW5nZXMgd2UgZGVsZWdhdGUgZ2V0dGluZyB0aGUgdmFsdWUgb2YgdGhlIHNlbGVjdCBjb250cm9sXG4gICAgICAvLyB0byB0aGUgYHJlYWRWYWx1ZWAgbWV0aG9kLCB3aGljaCBjYW4gYmUgY2hhbmdlZCBpZiB0aGUgc2VsZWN0IGNhbiBoYXZlIG11bHRpcGxlXG4gICAgICAvLyBzZWxlY3RlZCB2YWx1ZXMgb3IgaWYgdGhlIG9wdGlvbnMgYXJlIGJlaW5nIGdlbmVyYXRlZCBieSBgbmdPcHRpb25zYFxuICAgICAgZWxlbWVudC5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKHNlbGVjdEN0cmwucmVhZFZhbHVlKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBJZiB0aGUgc2VsZWN0IGFsbG93cyBtdWx0aXBsZSB2YWx1ZXMgdGhlbiB3ZSBuZWVkIHRvIG1vZGlmeSBob3cgd2UgcmVhZCBhbmQgd3JpdGVcbiAgICAgIC8vIHZhbHVlcyBmcm9tIGFuZCB0byB0aGUgY29udHJvbDsgYWxzbyB3aGF0IGl0IG1lYW5zIGZvciB0aGUgdmFsdWUgdG8gYmUgZW1wdHkgYW5kXG4gICAgICAvLyB3ZSBoYXZlIHRvIGFkZCBhbiBleHRyYSB3YXRjaCBzaW5jZSBuZ01vZGVsIGRvZXNuJ3Qgd29yayB3ZWxsIHdpdGggYXJyYXlzIC0gaXRcbiAgICAgIC8vIGRvZXNuJ3QgdHJpZ2dlciByZW5kZXJpbmcgaWYgb25seSBhbiBpdGVtIGluIHRoZSBhcnJheSBjaGFuZ2VzLlxuICAgICAgaWYgKGF0dHIubXVsdGlwbGUpIHtcblxuICAgICAgICAvLyBSZWFkIHZhbHVlIG5vdyBuZWVkcyB0byBjaGVjayBlYWNoIG9wdGlvbiB0byBzZWUgaWYgaXQgaXMgc2VsZWN0ZWRcbiAgICAgICAgc2VsZWN0Q3RybC5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkTXVsdGlwbGVWYWx1ZSgpIHtcbiAgICAgICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICAgICAgICBmb3JFYWNoKGVsZW1lbnQuZmluZCgnb3B0aW9uJyksIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICBhcnJheS5wdXNoKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFdyaXRlIHZhbHVlIG5vdyBuZWVkcyB0byBzZXQgdGhlIHNlbGVjdGVkIHByb3BlcnR5IG9mIGVhY2ggbWF0Y2hpbmcgb3B0aW9uXG4gICAgICAgIHNlbGVjdEN0cmwud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uIHdyaXRlTXVsdGlwbGVWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgIHZhciBpdGVtcyA9IG5ldyBIYXNoTWFwKHZhbHVlKTtcbiAgICAgICAgICBmb3JFYWNoKGVsZW1lbnQuZmluZCgnb3B0aW9uJyksIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gaXNEZWZpbmVkKGl0ZW1zLmdldChvcHRpb24udmFsdWUpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyB3ZSBoYXZlIHRvIGRvIGl0IG9uIGVhY2ggd2F0Y2ggc2luY2UgbmdNb2RlbCB3YXRjaGVzIHJlZmVyZW5jZSwgYnV0XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gd29yayBvZiBhbiBhcnJheSwgc28gd2UgbmVlZCB0byBzZWUgaWYgYW55dGhpbmcgd2FzIGluc2VydGVkL3JlbW92ZWRcbiAgICAgICAgdmFyIGxhc3RWaWV3LCBsYXN0Vmlld1JlZiA9IE5hTjtcbiAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIHNlbGVjdE11bHRpcGxlV2F0Y2goKSB7XG4gICAgICAgICAgaWYgKGxhc3RWaWV3UmVmID09PSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlICYmICFlcXVhbHMobGFzdFZpZXcsIG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpKSB7XG4gICAgICAgICAgICBsYXN0VmlldyA9IHNoYWxsb3dDb3B5KG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpO1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0Vmlld1JlZiA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSBhIG11bHRpcGxlIHNlbGVjdCB0aGVuIHZhbHVlIGlzIG5vdyBhIGNvbGxlY3Rpb25cbiAgICAgICAgLy8gc28gdGhlIG1lYW5pbmcgb2YgJGlzRW1wdHkgY2hhbmdlc1xuICAgICAgICBuZ01vZGVsQ3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDA7XG4gICAgICAgIH07XG5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWxlY3RQb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICAvLyBpZiBuZ01vZGVsIGlzIG5vdCBkZWZpbmVkLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nXG4gICAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcbiAgICAgIGlmICghbmdNb2RlbEN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1swXTtcblxuICAgICAgLy8gV2UgZGVsZWdhdGUgcmVuZGVyaW5nIHRvIHRoZSBgd3JpdGVWYWx1ZWAgbWV0aG9kLCB3aGljaCBjYW4gYmUgY2hhbmdlZFxuICAgICAgLy8gaWYgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZSBzZWxlY3RlZCB2YWx1ZXMgb3IgaWYgdGhlIG9wdGlvbnMgYXJlIGJlaW5nXG4gICAgICAvLyBnZW5lcmF0ZWQgYnkgYG5nT3B0aW9uc2AuXG4gICAgICAvLyBUaGlzIG11c3QgYmUgZG9uZSBpbiB0aGUgcG9zdExpbmsgZm4gdG8gcHJldmVudCAkcmVuZGVyIHRvIGJlIGNhbGxlZCBiZWZvcmVcbiAgICAgIC8vIGFsbCBub2RlcyBoYXZlIGJlZW4gbGlua2VkIGNvcnJlY3RseS5cbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG59O1xuXG5cbi8vIFRoZSBvcHRpb24gZGlyZWN0aXZlIGlzIHB1cmVseSBkZXNpZ25lZCB0byBjb21tdW5pY2F0ZSB0aGUgZXhpc3RlbmNlIChvciBsYWNrIG9mKVxuLy8gb2YgZHluYW1pY2FsbHkgY3JlYXRlZCAoYW5kIGRlc3Ryb3llZCkgb3B0aW9uIGVsZW1lbnRzIHRvIHRoZWlyIGNvbnRhaW5pbmcgc2VsZWN0XG4vLyBkaXJlY3RpdmUgdmlhIGl0cyBjb250cm9sbGVyLlxudmFyIG9wdGlvbkRpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgZnVuY3Rpb24oJGludGVycG9sYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcblxuICAgICAgaWYgKGlzRGVmaW5lZChhdHRyLnZhbHVlKSkge1xuICAgICAgICAvLyBJZiB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIGRlZmluZWQsIGNoZWNrIGlmIGl0IGNvbnRhaW5zIGFuIGludGVycG9sYXRpb25cbiAgICAgICAgdmFyIGludGVycG9sYXRlVmFsdWVGbiA9ICRpbnRlcnBvbGF0ZShhdHRyLnZhbHVlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgbm90IGRlZmluZWQgdGhlbiB3ZSBmYWxsIGJhY2sgdG8gdGhlXG4gICAgICAgIC8vIHRleHQgY29udGVudCBvZiB0aGUgb3B0aW9uIGVsZW1lbnQsIHdoaWNoIG1heSBiZSBpbnRlcnBvbGF0ZWRcbiAgICAgICAgdmFyIGludGVycG9sYXRlVGV4dEZuID0gJGludGVycG9sYXRlKGVsZW1lbnQudGV4dCgpLCB0cnVlKTtcbiAgICAgICAgaWYgKCFpbnRlcnBvbGF0ZVRleHRGbikge1xuICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBlbGVtZW50LnRleHQoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG5cbiAgICAgICAgLy8gVGhpcyBpcyBhbiBvcHRpbWl6YXRpb24gb3ZlciB1c2luZyBeXiBzaW5jZSB3ZSBkb24ndCB3YW50IHRvIGhhdmUgdG8gc2VhcmNoXG4gICAgICAgIC8vIGFsbCB0aGUgd2F5IHRvIHRoZSByb290IG9mIHRoZSBET00gZm9yIGV2ZXJ5IHNpbmdsZSBvcHRpb24gZWxlbWVudFxuICAgICAgICB2YXIgc2VsZWN0Q3RybE5hbWUgPSAnJHNlbGVjdENvbnRyb2xsZXInLFxuICAgICAgICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQoKSxcbiAgICAgICAgICAgIHNlbGVjdEN0cmwgPSBwYXJlbnQuZGF0YShzZWxlY3RDdHJsTmFtZSkgfHxcbiAgICAgICAgICAgICAgcGFyZW50LnBhcmVudCgpLmRhdGEoc2VsZWN0Q3RybE5hbWUpOyAvLyBpbiBjYXNlIHdlIGFyZSBpbiBvcHRncm91cFxuXG4gICAgICAgIGlmIChzZWxlY3RDdHJsKSB7XG4gICAgICAgICAgc2VsZWN0Q3RybC5yZWdpc3Rlck9wdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgaW50ZXJwb2xhdGVWYWx1ZUZuLCBpbnRlcnBvbGF0ZVRleHRGbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbnZhciBzdHlsZURpcmVjdGl2ZSA9IHZhbHVlRm4oe1xuICByZXN0cmljdDogJ0UnLFxuICB0ZXJtaW5hbDogZmFsc2Vcbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUmVxdWlyZWRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBuZ1JlcXVpcmVkIGFkZHMgdGhlIHJlcXVpcmVkIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGB2YWxpZGF0b3JgfSB0byB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LlxuICogSXQgaXMgbW9zdCBvZnRlbiB1c2VkIGZvciB7QGxpbmsgaW5wdXQgYGlucHV0YH0gYW5kIHtAbGluayBzZWxlY3QgYHNlbGVjdGB9IGNvbnRyb2xzLCBidXQgY2FuIGFsc28gYmVcbiAqIGFwcGxpZWQgdG8gY3VzdG9tIGNvbnRyb2xzLlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgc2V0cyB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaWYgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBpbnNpZGVcbiAqIGBuZ1JlcXVpcmVkYCBldmFsdWF0ZXMgdG8gdHJ1ZS4gQSBzcGVjaWFsIGRpcmVjdGl2ZSBmb3Igc2V0dGluZyBgcmVxdWlyZWRgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHdlXG4gKiBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIGByZXF1aXJlZGAuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX1cbiAqIGZvciBtb3JlIGluZm8uXG4gKlxuICogVGhlIHZhbGlkYXRvciB3aWxsIHNldCB0aGUgYHJlcXVpcmVkYCBlcnJvciBrZXkgdG8gdHJ1ZSBpZiB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgaXMgc2V0IGFuZFxuICogY2FsbGluZyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkaXNFbXB0eSBgTmdNb2RlbENvbnRyb2xsZXIuJGlzRW1wdHlgIHdpdGggdGhlXG4gKiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlIGBuZ01vZGVsLiR2aWV3VmFsdWVgfSByZXR1cm5zIGB0cnVlYC4gRm9yIGV4YW1wbGUsIHRoZVxuICogYCRpc0VtcHR5KClgIGltcGxlbWVudGF0aW9uIGZvciBgaW5wdXRbdGV4dF1gIGNoZWNrcyB0aGUgbGVuZ3RoIG9mIHRoZSBgJHZpZXdWYWx1ZWAuIFdoZW4gZGV2ZWxvcGluZ1xuICogY3VzdG9tIGNvbnRyb2xzLCBgJGlzRW1wdHkoKWAgY2FuIGJlIG92ZXJ3cml0dGVuIHRvIGFjY291bnQgZm9yIGEgJHZpZXdWYWx1ZSB0aGF0IGlzIG5vdCBzdHJpbmctYmFzZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ1JlcXVpcmVkRGlyZWN0aXZlXCIgbW9kdWxlPVwibmdSZXF1aXJlZEV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nUmVxdWlyZWRFeGFtcGxlJywgW10pXG4gKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAgJHNjb3BlLnJlcXVpcmVkID0gdHJ1ZTtcbiAqICAgICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwiZm9ybVwiPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwicmVxdWlyZWRcIj5Ub2dnbGUgcmVxdWlyZWQ6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInJlcXVpcmVkXCIgaWQ9XCJyZXF1aXJlZFwiIC8+XG4gKiAgICAgICAgIDxicj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0XCI+VGhpcyBpbnB1dCBtdXN0IGJlIGZpbGxlZCBpZiBgcmVxdWlyZWRgIGlzIHRydWU6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibW9kZWxcIiBpZD1cImlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctcmVxdWlyZWQ9XCJyZXF1aXJlZFwiIC8+PGJyPlxuICogICAgICAgICA8aHI+XG4gKiAgICAgICAgIHJlcXVpcmVkIGVycm9yIHNldD8gPSA8Y29kZT57e2Zvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkfX08L2NvZGU+PGJyPlxuICogICAgICAgICBtb2RlbCA9IDxjb2RlPnt7bW9kZWx9fTwvY29kZT5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIHJlcXVpcmVkID0gZWxlbWVudChieS5iaW5kaW5nKCdmb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCcpKTtcbiAgICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ21vZGVsJykpO1xuICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkuaWQoJ2lucHV0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzZXQgdGhlIHJlcXVpcmVkIGVycm9yJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocmVxdWlyZWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcblxuICAgICAgICAgaW5wdXQuc2VuZEtleXMoJzEyMycpO1xuICAgICAgICAgZXhwZWN0KHJlcXVpcmVkLmdldFRleHQoKSkubm90LnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCcxMjMnKTtcbiAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgcmVxdWlyZWREaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgaWYgKCFjdHJsKSByZXR1cm47XG4gICAgICBhdHRyLnJlcXVpcmVkID0gdHJ1ZTsgLy8gZm9yY2UgdHJ1dGh5IGluIGNhc2Ugd2UgYXJlIG9uIG5vbiBpbnB1dCBlbGVtZW50XG5cbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMucmVxdWlyZWQgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFhdHRyLnJlcXVpcmVkIHx8ICFjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSk7XG4gICAgICB9O1xuXG4gICAgICBhdHRyLiRvYnNlcnZlKCdyZXF1aXJlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1BhdHRlcm5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBuZ1BhdHRlcm4gYWRkcyB0aGUgcGF0dGVybiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgdmFsaWRhdG9yYH0gdG8ge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfS5cbiAqIEl0IGlzIG1vc3Qgb2Z0ZW4gdXNlZCBmb3IgdGV4dC1iYXNlZCB7QGxpbmsgaW5wdXQgYGlucHV0YH0gY29udHJvbHMsIGJ1dCBjYW4gYWxzbyBiZSBhcHBsaWVkIHRvIGN1c3RvbSB0ZXh0LWJhc2VkIGNvbnRyb2xzLlxuICpcbiAqIFRoZSB2YWxpZGF0b3Igc2V0cyB0aGUgYHBhdHRlcm5gIGVycm9yIGtleSBpZiB0aGUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSBgbmdNb2RlbC4kdmlld1ZhbHVlYH1cbiAqIGRvZXMgbm90IG1hdGNoIGEgUmVnRXhwIHdoaWNoIGlzIG9idGFpbmVkIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGVcbiAqIGBuZ1BhdHRlcm5gIGF0dHJpYnV0ZSB2YWx1ZTpcbiAqICogSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gKiAqIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cCBhZnRlciB3cmFwcGluZyBpdFxuICogaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYG5ldyBSZWdFeHAoJ15hYmMkJylgLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICogc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAqIGFjY291bnQuXG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipOb3RlOioqIFRoaXMgZGlyZWN0aXZlIGlzIGFsc28gYWRkZWQgd2hlbiB0aGUgcGxhaW4gYHBhdHRlcm5gIGF0dHJpYnV0ZSBpcyB1c2VkLCB3aXRoIHR3b1xuICogZGlmZmVyZW5jZXM6XG4gKiA8b2w+XG4gKiAgIDxsaT5cbiAqICAgICBgbmdQYXR0ZXJuYCBkb2VzIG5vdCBzZXQgdGhlIGBwYXR0ZXJuYCBhdHRyaWJ1dGUgYW5kIHRoZXJlZm9yZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24gaXNcbiAqICAgICBub3QgYXZhaWxhYmxlLlxuICogICA8L2xpPlxuICogICA8bGk+XG4gKiAgICAgVGhlIGBuZ1BhdHRlcm5gIGF0dHJpYnV0ZSBtdXN0IGJlIGFuIGV4cHJlc3Npb24sIHdoaWxlIHRoZSBgcGF0dGVybmAgdmFsdWUgbXVzdCBiZVxuICogICAgIGludGVycG9sYXRlZC5cbiAqICAgPC9saT5cbiAqIDwvb2w+XG4gKiA8L2Rpdj5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nUGF0dGVybkRpcmVjdGl2ZVwiIG1vZHVsZT1cIm5nUGF0dGVybkV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nUGF0dGVybkV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgICAkc2NvcGUucmVnZXggPSAnXFxcXGQrJztcbiAqICAgICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwiZm9ybVwiPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwicmVnZXhcIj5TZXQgYSBwYXR0ZXJuIChyZWdleCBzdHJpbmcpOiA8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInJlZ2V4XCIgaWQ9XCJyZWdleFwiIC8+XG4gKiAgICAgICAgIDxicj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0XCI+VGhpcyBpbnB1dCBpcyByZXN0cmljdGVkIGJ5IHRoZSBjdXJyZW50IHBhdHRlcm46IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibW9kZWxcIiBpZD1cImlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctcGF0dGVybj1cInJlZ2V4XCIgLz48YnI+XG4gKiAgICAgICAgIDxocj5cbiAqICAgICAgICAgaW5wdXQgdmFsaWQ/ID0gPGNvZGU+e3tmb3JtLmlucHV0LiR2YWxpZH19PC9jb2RlPjxicj5cbiAqICAgICAgICAgbW9kZWwgPSA8Y29kZT57e21vZGVsfX08L2NvZGU+XG4gKiAgICAgICA8L2Zvcm0+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBtb2RlbCA9IGVsZW1lbnQoYnkuYmluZGluZygnbW9kZWwnKSk7XG4gICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5pZCgnaW5wdXQnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHRoZSBpbnB1dCB3aXRoIHRoZSBkZWZhdWx0IHBhdHRlcm4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdhYWEnKTtcbiAgICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLm5vdC50b0NvbnRhaW4oJ2FhYScpO1xuXG4gICAgICAgICBpbnB1dC5jbGVhcigpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcxMjMnKTtcbiAgICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCcxMjMnKTtcbiAgICAgICAgIH0pO1xuICAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBwYXR0ZXJuRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgcmVnZXhwLCBwYXR0ZXJuRXhwID0gYXR0ci5uZ1BhdHRlcm4gfHwgYXR0ci5wYXR0ZXJuO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgncGF0dGVybicsIGZ1bmN0aW9uKHJlZ2V4KSB7XG4gICAgICAgIGlmIChpc1N0cmluZyhyZWdleCkgJiYgcmVnZXgubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyByZWdleCArICckJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVnZXggJiYgIXJlZ2V4LnRlc3QpIHtcbiAgICAgICAgICB0aHJvdyBtaW5FcnIoJ25nUGF0dGVybicpKCdub3JlZ2V4cCcsXG4gICAgICAgICAgICAnRXhwZWN0ZWQgezB9IHRvIGJlIGEgUmVnRXhwIGJ1dCB3YXMgezF9LiBFbGVtZW50OiB7Mn0nLCBwYXR0ZXJuRXhwLFxuICAgICAgICAgICAgcmVnZXgsIHN0YXJ0aW5nVGFnKGVsbSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnZXhwID0gcmVnZXggfHwgdW5kZWZpbmVkO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMucGF0dGVybiA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICAvLyBIVE1MNSBwYXR0ZXJuIGNvbnN0cmFpbnQgdmFsaWRhdGVzIHRoZSBpbnB1dCB2YWx1ZSwgc28gd2UgdmFsaWRhdGUgdGhlIHZpZXdWYWx1ZVxuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IGlzVW5kZWZpbmVkKHJlZ2V4cCkgfHwgcmVnZXhwLnRlc3Qodmlld1ZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01heGxlbmd0aFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIG5nTWF4bGVuZ3RoIGFkZHMgdGhlIG1heGxlbmd0aCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgdmFsaWRhdG9yYH0gdG8ge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfS5cbiAqIEl0IGlzIG1vc3Qgb2Z0ZW4gdXNlZCBmb3IgdGV4dC1iYXNlZCB7QGxpbmsgaW5wdXQgYGlucHV0YH0gY29udHJvbHMsIGJ1dCBjYW4gYWxzbyBiZSBhcHBsaWVkIHRvIGN1c3RvbSB0ZXh0LWJhc2VkIGNvbnRyb2xzLlxuICpcbiAqIFRoZSB2YWxpZGF0b3Igc2V0cyB0aGUgYG1heGxlbmd0aGAgZXJyb3Iga2V5IGlmIHRoZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlIGBuZ01vZGVsLiR2aWV3VmFsdWVgfVxuICogaXMgbG9uZ2VyIHRoYW4gdGhlIGludGVnZXIgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZVxuICogYG5nTWF4bGVuZ3RoYCBhdHRyaWJ1dGUgdmFsdWUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqTm90ZToqKiBUaGlzIGRpcmVjdGl2ZSBpcyBhbHNvIGFkZGVkIHdoZW4gdGhlIHBsYWluIGBtYXhsZW5ndGhgIGF0dHJpYnV0ZSBpcyB1c2VkLCB3aXRoIHR3b1xuICogZGlmZmVyZW5jZXM6XG4gKiA8b2w+XG4gKiAgIDxsaT5cbiAqICAgICBgbmdNYXhsZW5ndGhgIGRvZXMgbm90IHNldCB0aGUgYG1heGxlbmd0aGAgYXR0cmlidXRlIGFuZCB0aGVyZWZvcmUgSFRNTDUgY29uc3RyYWludFxuICogICAgIHZhbGlkYXRpb24gaXMgbm90IGF2YWlsYWJsZS5cbiAqICAgPC9saT5cbiAqICAgPGxpPlxuICogICAgIFRoZSBgbmdNYXhsZW5ndGhgIGF0dHJpYnV0ZSBtdXN0IGJlIGFuIGV4cHJlc3Npb24sIHdoaWxlIHRoZSBgbWF4bGVuZ3RoYCB2YWx1ZSBtdXN0IGJlXG4gKiAgICAgaW50ZXJwb2xhdGVkLlxuICogICA8L2xpPlxuICogPC9vbD5cbiAqIDwvZGl2PlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdNYXhsZW5ndGhEaXJlY3RpdmVcIiBtb2R1bGU9XCJuZ01heGxlbmd0aEV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nTWF4bGVuZ3RoRXhhbXBsZScsIFtdKVxuICogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgICRzY29wZS5tYXhsZW5ndGggPSA1O1xuICogICAgICAgICB9XSk7XG4gKiAgICAgPC9zY3JpcHQ+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxmb3JtIG5hbWU9XCJmb3JtXCI+XG4gKiAgICAgICAgIDxsYWJlbCBmb3I9XCJtYXhsZW5ndGhcIj5TZXQgYSBtYXhsZW5ndGg6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJtYXhsZW5ndGhcIiBpZD1cIm1heGxlbmd0aFwiIC8+XG4gKiAgICAgICAgIDxicj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0XCI+VGhpcyBpbnB1dCBpcyByZXN0cmljdGVkIGJ5IHRoZSBjdXJyZW50IG1heGxlbmd0aDogPC9sYWJlbD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtb2RlbFwiIGlkPVwiaW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tYXhsZW5ndGg9XCJtYXhsZW5ndGhcIiAvPjxicj5cbiAqICAgICAgICAgPGhyPlxuICogICAgICAgICBpbnB1dCB2YWxpZD8gPSA8Y29kZT57e2Zvcm0uaW5wdXQuJHZhbGlkfX08L2NvZGU+PGJyPlxuICogICAgICAgICBtb2RlbCA9IDxjb2RlPnt7bW9kZWx9fTwvY29kZT5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIG1vZGVsID0gZWxlbWVudChieS5iaW5kaW5nKCdtb2RlbCcpKTtcbiAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5LmlkKCdpbnB1dCcpKTtcblxuICAgICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgdGhlIGlucHV0IHdpdGggdGhlIGRlZmF1bHQgbWF4bGVuZ3RoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBpbnB1dC5zZW5kS2V5cygnYWJjZGVmJyk7XG4gICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS5ub3QudG9Db250YWluKCdhYmNkZWYnKTtcblxuICAgICAgICAgaW5wdXQuY2xlYXIoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYWJjZGUnKTtcbiAgICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCdhYmNkZScpO1xuICAgICAgICAgfSk7XG4gICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG1heGxlbmd0aERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIG1heGxlbmd0aCA9IC0xO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWF4bGVuZ3RoJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGludFZhbCA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgbWF4bGVuZ3RoID0gaXNOYU4oaW50VmFsKSA/IC0xIDogaW50VmFsO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLm1heGxlbmd0aCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gKG1heGxlbmd0aCA8IDApIHx8IGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCAodmlld1ZhbHVlLmxlbmd0aCA8PSBtYXhsZW5ndGgpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTWlubGVuZ3RoXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogbmdNaW5sZW5ndGggYWRkcyB0aGUgbWlubGVuZ3RoIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGB2YWxpZGF0b3JgfSB0byB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LlxuICogSXQgaXMgbW9zdCBvZnRlbiB1c2VkIGZvciB0ZXh0LWJhc2VkIHtAbGluayBpbnB1dCBgaW5wdXRgfSBjb250cm9scywgYnV0IGNhbiBhbHNvIGJlIGFwcGxpZWQgdG8gY3VzdG9tIHRleHQtYmFzZWQgY29udHJvbHMuXG4gKlxuICogVGhlIHZhbGlkYXRvciBzZXRzIHRoZSBgbWlubGVuZ3RoYCBlcnJvciBrZXkgaWYgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgYG5nTW9kZWwuJHZpZXdWYWx1ZWB9XG4gKiBpcyBzaG9ydGVyIHRoYW4gdGhlIGludGVnZXIgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZVxuICogYG5nTWlubGVuZ3RoYCBhdHRyaWJ1dGUgdmFsdWUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqTm90ZToqKiBUaGlzIGRpcmVjdGl2ZSBpcyBhbHNvIGFkZGVkIHdoZW4gdGhlIHBsYWluIGBtaW5sZW5ndGhgIGF0dHJpYnV0ZSBpcyB1c2VkLCB3aXRoIHR3b1xuICogZGlmZmVyZW5jZXM6XG4gKiA8b2w+XG4gKiAgIDxsaT5cbiAqICAgICBgbmdNaW5sZW5ndGhgIGRvZXMgbm90IHNldCB0aGUgYG1pbmxlbmd0aGAgYXR0cmlidXRlIGFuZCB0aGVyZWZvcmUgSFRNTDUgY29uc3RyYWludFxuICogICAgIHZhbGlkYXRpb24gaXMgbm90IGF2YWlsYWJsZS5cbiAqICAgPC9saT5cbiAqICAgPGxpPlxuICogICAgIFRoZSBgbmdNaW5sZW5ndGhgIHZhbHVlIG11c3QgYmUgYW4gZXhwcmVzc2lvbiwgd2hpbGUgdGhlIGBtaW5sZW5ndGhgIHZhbHVlIG11c3QgYmVcbiAqICAgICBpbnRlcnBvbGF0ZWQuXG4gKiAgIDwvbGk+XG4gKiA8L29sPlxuICogPC9kaXY+XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ01pbmxlbmd0aERpcmVjdGl2ZVwiIG1vZHVsZT1cIm5nTWlubGVuZ3RoRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxzY3JpcHQ+XG4gKiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbmdNaW5sZW5ndGhFeGFtcGxlJywgW10pXG4gKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAgJHNjb3BlLm1pbmxlbmd0aCA9IDM7XG4gKiAgICAgICAgIH1dKTtcbiAqICAgICA8L3NjcmlwdD5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGZvcm0gbmFtZT1cImZvcm1cIj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cIm1pbmxlbmd0aFwiPlNldCBhIG1pbmxlbmd0aDogPC9sYWJlbD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cIm1pbmxlbmd0aFwiIGlkPVwibWlubGVuZ3RoXCIgLz5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwiaW5wdXRcIj5UaGlzIGlucHV0IGlzIHJlc3RyaWN0ZWQgYnkgdGhlIGN1cnJlbnQgbWlubGVuZ3RoOiA8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm1vZGVsXCIgaWQ9XCJpbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1pbmxlbmd0aD1cIm1pbmxlbmd0aFwiIC8+PGJyPlxuICogICAgICAgICA8aHI+XG4gKiAgICAgICAgIGlucHV0IHZhbGlkPyA9IDxjb2RlPnt7Zm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnI+XG4gKiAgICAgICAgIG1vZGVsID0gPGNvZGU+e3ttb2RlbH19PC9jb2RlPlxuICogICAgICAgPC9mb3JtPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ21vZGVsJykpO1xuICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkuaWQoJ2lucHV0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSB0aGUgaW5wdXQgd2l0aCB0aGUgZGVmYXVsdCBtaW5sZW5ndGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdhYicpO1xuICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkubm90LnRvQ29udGFpbignYWInKTtcblxuICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2FiYycpO1xuICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCdhYmMnKTtcbiAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgbWlubGVuZ3RoRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgbWlubGVuZ3RoID0gMDtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbmxlbmd0aCcsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIG1pbmxlbmd0aCA9IHRvSW50KHZhbHVlKSB8fCAwO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbmxlbmd0aCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IHZpZXdWYWx1ZS5sZW5ndGggPj0gbWlubGVuZ3RoO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG5pZiAod2luZG93LmFuZ3VsYXIuYm9vdHN0cmFwKSB7XG4gIC8vQW5ndWxhckpTIGlzIGFscmVhZHkgbG9hZGVkLCBzbyB3ZSBjYW4gcmV0dXJuIGhlcmUuLi5cbiAgY29uc29sZS5sb2coJ1dBUk5JTkc6IFRyaWVkIHRvIGxvYWQgYW5ndWxhciBtb3JlIHRoYW4gb25jZS4nKTtcbiAgcmV0dXJuO1xufVxuXG4vL3RyeSB0byBiaW5kIHRvIGpxdWVyeSBub3cgc28gdGhhdCBvbmUgY2FuIHdyaXRlIGpxTGl0ZShkb2N1bWVudCkucmVhZHkoKVxuLy9idXQgd2Ugd2lsbCByZWJpbmQgb24gYm9vdHN0cmFwIGFnYWluLlxuYmluZEpRdWVyeSgpO1xuXG5wdWJsaXNoRXh0ZXJuYWxBUEkoYW5ndWxhcik7XG5cbmFuZ3VsYXIubW9kdWxlKFwibmdMb2NhbGVcIiwgW10sIFtcIiRwcm92aWRlXCIsIGZ1bmN0aW9uKCRwcm92aWRlKSB7XG52YXIgUExVUkFMX0NBVEVHT1JZID0ge1pFUk86IFwiemVyb1wiLCBPTkU6IFwib25lXCIsIFRXTzogXCJ0d29cIiwgRkVXOiBcImZld1wiLCBNQU5ZOiBcIm1hbnlcIiwgT1RIRVI6IFwib3RoZXJcIn07XG5mdW5jdGlvbiBnZXREZWNpbWFscyhuKSB7XG4gIG4gPSBuICsgJyc7XG4gIHZhciBpID0gbi5pbmRleE9mKCcuJyk7XG4gIHJldHVybiAoaSA9PSAtMSkgPyAwIDogbi5sZW5ndGggLSBpIC0gMTtcbn1cblxuZnVuY3Rpb24gZ2V0VkYobiwgb3B0X3ByZWNpc2lvbikge1xuICB2YXIgdiA9IG9wdF9wcmVjaXNpb247XG5cbiAgaWYgKHVuZGVmaW5lZCA9PT0gdikge1xuICAgIHYgPSBNYXRoLm1pbihnZXREZWNpbWFscyhuKSwgMyk7XG4gIH1cblxuICB2YXIgYmFzZSA9IE1hdGgucG93KDEwLCB2KTtcbiAgdmFyIGYgPSAoKG4gKiBiYXNlKSB8IDApICUgYmFzZTtcbiAgcmV0dXJuIHt2OiB2LCBmOiBmfTtcbn1cblxuJHByb3ZpZGUudmFsdWUoXCIkbG9jYWxlXCIsIHtcbiAgXCJEQVRFVElNRV9GT1JNQVRTXCI6IHtcbiAgICBcIkFNUE1TXCI6IFtcbiAgICAgIFwiQU1cIixcbiAgICAgIFwiUE1cIlxuICAgIF0sXG4gICAgXCJEQVlcIjogW1xuICAgICAgXCJTdW5kYXlcIixcbiAgICAgIFwiTW9uZGF5XCIsXG4gICAgICBcIlR1ZXNkYXlcIixcbiAgICAgIFwiV2VkbmVzZGF5XCIsXG4gICAgICBcIlRodXJzZGF5XCIsXG4gICAgICBcIkZyaWRheVwiLFxuICAgICAgXCJTYXR1cmRheVwiXG4gICAgXSxcbiAgICBcIkVSQU5BTUVTXCI6IFtcbiAgICAgIFwiQmVmb3JlIENocmlzdFwiLFxuICAgICAgXCJBbm5vIERvbWluaVwiXG4gICAgXSxcbiAgICBcIkVSQVNcIjogW1xuICAgICAgXCJCQ1wiLFxuICAgICAgXCJBRFwiXG4gICAgXSxcbiAgICBcIkZJUlNUREFZT0ZXRUVLXCI6IDYsXG4gICAgXCJNT05USFwiOiBbXG4gICAgICBcIkphbnVhcnlcIixcbiAgICAgIFwiRmVicnVhcnlcIixcbiAgICAgIFwiTWFyY2hcIixcbiAgICAgIFwiQXByaWxcIixcbiAgICAgIFwiTWF5XCIsXG4gICAgICBcIkp1bmVcIixcbiAgICAgIFwiSnVseVwiLFxuICAgICAgXCJBdWd1c3RcIixcbiAgICAgIFwiU2VwdGVtYmVyXCIsXG4gICAgICBcIk9jdG9iZXJcIixcbiAgICAgIFwiTm92ZW1iZXJcIixcbiAgICAgIFwiRGVjZW1iZXJcIlxuICAgIF0sXG4gICAgXCJTSE9SVERBWVwiOiBbXG4gICAgICBcIlN1blwiLFxuICAgICAgXCJNb25cIixcbiAgICAgIFwiVHVlXCIsXG4gICAgICBcIldlZFwiLFxuICAgICAgXCJUaHVcIixcbiAgICAgIFwiRnJpXCIsXG4gICAgICBcIlNhdFwiXG4gICAgXSxcbiAgICBcIlNIT1JUTU9OVEhcIjogW1xuICAgICAgXCJKYW5cIixcbiAgICAgIFwiRmViXCIsXG4gICAgICBcIk1hclwiLFxuICAgICAgXCJBcHJcIixcbiAgICAgIFwiTWF5XCIsXG4gICAgICBcIkp1blwiLFxuICAgICAgXCJKdWxcIixcbiAgICAgIFwiQXVnXCIsXG4gICAgICBcIlNlcFwiLFxuICAgICAgXCJPY3RcIixcbiAgICAgIFwiTm92XCIsXG4gICAgICBcIkRlY1wiXG4gICAgXSxcbiAgICBcIlNUQU5EQUxPTkVNT05USFwiOiBbXG4gICAgICBcIkphbnVhcnlcIixcbiAgICAgIFwiRmVicnVhcnlcIixcbiAgICAgIFwiTWFyY2hcIixcbiAgICAgIFwiQXByaWxcIixcbiAgICAgIFwiTWF5XCIsXG4gICAgICBcIkp1bmVcIixcbiAgICAgIFwiSnVseVwiLFxuICAgICAgXCJBdWd1c3RcIixcbiAgICAgIFwiU2VwdGVtYmVyXCIsXG4gICAgICBcIk9jdG9iZXJcIixcbiAgICAgIFwiTm92ZW1iZXJcIixcbiAgICAgIFwiRGVjZW1iZXJcIlxuICAgIF0sXG4gICAgXCJXRUVLRU5EUkFOR0VcIjogW1xuICAgICAgNSxcbiAgICAgIDZcbiAgICBdLFxuICAgIFwiZnVsbERhdGVcIjogXCJFRUVFLCBNTU1NIGQsIHlcIixcbiAgICBcImxvbmdEYXRlXCI6IFwiTU1NTSBkLCB5XCIsXG4gICAgXCJtZWRpdW1cIjogXCJNTU0gZCwgeSBoOm1tOnNzIGFcIixcbiAgICBcIm1lZGl1bURhdGVcIjogXCJNTU0gZCwgeVwiLFxuICAgIFwibWVkaXVtVGltZVwiOiBcImg6bW06c3MgYVwiLFxuICAgIFwic2hvcnRcIjogXCJNL2QveXkgaDptbSBhXCIsXG4gICAgXCJzaG9ydERhdGVcIjogXCJNL2QveXlcIixcbiAgICBcInNob3J0VGltZVwiOiBcImg6bW0gYVwiXG4gIH0sXG4gIFwiTlVNQkVSX0ZPUk1BVFNcIjoge1xuICAgIFwiQ1VSUkVOQ1lfU1lNXCI6IFwiJFwiLFxuICAgIFwiREVDSU1BTF9TRVBcIjogXCIuXCIsXG4gICAgXCJHUk9VUF9TRVBcIjogXCIsXCIsXG4gICAgXCJQQVRURVJOU1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiZ1NpemVcIjogMyxcbiAgICAgICAgXCJsZ1NpemVcIjogMyxcbiAgICAgICAgXCJtYXhGcmFjXCI6IDMsXG4gICAgICAgIFwibWluRnJhY1wiOiAwLFxuICAgICAgICBcIm1pbkludFwiOiAxLFxuICAgICAgICBcIm5lZ1ByZVwiOiBcIi1cIixcbiAgICAgICAgXCJuZWdTdWZcIjogXCJcIixcbiAgICAgICAgXCJwb3NQcmVcIjogXCJcIixcbiAgICAgICAgXCJwb3NTdWZcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJnU2l6ZVwiOiAzLFxuICAgICAgICBcImxnU2l6ZVwiOiAzLFxuICAgICAgICBcIm1heEZyYWNcIjogMixcbiAgICAgICAgXCJtaW5GcmFjXCI6IDIsXG4gICAgICAgIFwibWluSW50XCI6IDEsXG4gICAgICAgIFwibmVnUHJlXCI6IFwiLVxcdTAwYTRcIixcbiAgICAgICAgXCJuZWdTdWZcIjogXCJcIixcbiAgICAgICAgXCJwb3NQcmVcIjogXCJcXHUwMGE0XCIsXG4gICAgICAgIFwicG9zU3VmXCI6IFwiXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIFwiaWRcIjogXCJlbi11c1wiLFxuICBcInBsdXJhbENhdFwiOiBmdW5jdGlvbihuLCBvcHRfcHJlY2lzaW9uKSB7ICB2YXIgaSA9IG4gfCAwOyAgdmFyIHZmID0gZ2V0VkYobiwgb3B0X3ByZWNpc2lvbik7ICBpZiAoaSA9PSAxICYmIHZmLnYgPT0gMCkgeyAgICByZXR1cm4gUExVUkFMX0NBVEVHT1JZLk9ORTsgIH0gIHJldHVybiBQTFVSQUxfQ0FURUdPUlkuT1RIRVI7fVxufSk7XG59XSk7XG5cbiAganFMaXRlKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBhbmd1bGFySW5pdChkb2N1bWVudCwgYm9vdHN0cmFwKTtcbiAgfSk7XG5cbn0pKHdpbmRvdywgZG9jdW1lbnQpO1xuXG4hd2luZG93LmFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmIHdpbmRvdy5hbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuaGVhZCkucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPkBjaGFyc2V0IFwiVVRGLThcIjtbbmdcXFxcOmNsb2FrXSxbbmctY2xvYWtdLFtkYXRhLW5nLWNsb2FrXSxbeC1uZy1jbG9ha10sLm5nLWNsb2FrLC54LW5nLWNsb2FrLC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9bmdcXFxcOmZvcm17ZGlzcGxheTpibG9jazt9Lm5nLWFuaW1hdGUtc2hpbXt2aXNpYmlsaXR5OmhpZGRlbjt9Lm5nLWFuY2hvcntwb3NpdGlvbjphYnNvbHV0ZTt9PC9zdHlsZT4nKTsiLCIvKlxuIEFuZ3VsYXJKUyB2MS40LjlcbiAoYykgMjAxMC0yMDE1IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuIExpY2Vuc2U6IE1JVFxuKi9cbihmdW5jdGlvbihTLFcsdyl7J3VzZSBzdHJpY3QnO2Z1bmN0aW9uIE0oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGI9YXJndW1lbnRzWzBdLGQ7ZD1cIltcIisoYT9hK1wiOlwiOlwiXCIpK2IrXCJdIGh0dHA6Ly9lcnJvcnMuYW5ndWxhcmpzLm9yZy8xLjQuOS9cIisoYT9hK1wiL1wiOlwiXCIpK2I7Zm9yKGI9MTtiPGFyZ3VtZW50cy5sZW5ndGg7YisrKXtkPWQrKDE9PWI/XCI/XCI6XCImXCIpK1wicFwiKyhiLTEpK1wiPVwiO3ZhciBjPWVuY29kZVVSSUNvbXBvbmVudCxlO2U9YXJndW1lbnRzW2JdO2U9XCJmdW5jdGlvblwiPT10eXBlb2YgZT9lLnRvU3RyaW5nKCkucmVwbGFjZSgvIFxce1tcXHNcXFNdKiQvLFwiXCIpOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6XCJzdHJpbmdcIiE9dHlwZW9mIGU/SlNPTi5zdHJpbmdpZnkoZSk6ZTtkKz1jKGUpfXJldHVybiBFcnJvcihkKX19ZnVuY3Rpb24gQWEoYSl7aWYobnVsbD09YXx8WGEoYSkpcmV0dXJuITE7aWYoRShhKXx8RihhKXx8QSYmYSBpbnN0YW5jZW9mIEEpcmV0dXJuITA7XG52YXIgYj1cImxlbmd0aFwiaW4gT2JqZWN0KGEpJiZhLmxlbmd0aDtyZXR1cm4gUShiKSYmKDA8PWImJihiLTEgaW4gYXx8YSBpbnN0YW5jZW9mIEFycmF5KXx8XCJmdW5jdGlvblwiPT10eXBlb2YgYS5pdGVtKX1mdW5jdGlvbiBuKGEsYixkKXt2YXIgYyxlO2lmKGEpaWYoQihhKSlmb3IoYyBpbiBhKVwicHJvdG90eXBlXCI9PWN8fFwibGVuZ3RoXCI9PWN8fFwibmFtZVwiPT1jfHxhLmhhc093blByb3BlcnR5JiYhYS5oYXNPd25Qcm9wZXJ0eShjKXx8Yi5jYWxsKGQsYVtjXSxjLGEpO2Vsc2UgaWYoRShhKXx8QWEoYSkpe3ZhciBmPVwib2JqZWN0XCIhPT10eXBlb2YgYTtjPTA7Zm9yKGU9YS5sZW5ndGg7YzxlO2MrKykoZnx8YyBpbiBhKSYmYi5jYWxsKGQsYVtjXSxjLGEpfWVsc2UgaWYoYS5mb3JFYWNoJiZhLmZvckVhY2ghPT1uKWEuZm9yRWFjaChiLGQsYSk7ZWxzZSBpZihvYyhhKSlmb3IoYyBpbiBhKWIuY2FsbChkLGFbY10sYyxhKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmhhc093blByb3BlcnR5KWZvcihjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmXG5iLmNhbGwoZCxhW2NdLGMsYSk7ZWxzZSBmb3IoYyBpbiBhKXJhLmNhbGwoYSxjKSYmYi5jYWxsKGQsYVtjXSxjLGEpO3JldHVybiBhfWZ1bmN0aW9uIHBjKGEsYixkKXtmb3IodmFyIGM9T2JqZWN0LmtleXMoYSkuc29ydCgpLGU9MDtlPGMubGVuZ3RoO2UrKyliLmNhbGwoZCxhW2NbZV1dLGNbZV0pO3JldHVybiBjfWZ1bmN0aW9uIHFjKGEpe3JldHVybiBmdW5jdGlvbihiLGQpe2EoZCxiKX19ZnVuY3Rpb24gWGQoKXtyZXR1cm4rK29ifWZ1bmN0aW9uIE9iKGEsYixkKXtmb3IodmFyIGM9YS4kJGhhc2hLZXksZT0wLGY9Yi5sZW5ndGg7ZTxmOysrZSl7dmFyIGc9YltlXTtpZihHKGcpfHxCKGcpKWZvcih2YXIgaD1PYmplY3Qua2V5cyhnKSxrPTAsbD1oLmxlbmd0aDtrPGw7aysrKXt2YXIgbT1oW2tdLHI9Z1ttXTtkJiZHKHIpP2RhKHIpP2FbbV09bmV3IERhdGUoci52YWx1ZU9mKCkpOkxhKHIpP2FbbV09bmV3IFJlZ0V4cChyKTpyLm5vZGVOYW1lP2FbbV09ci5jbG9uZU5vZGUoITApOlxuUGIocik/YVttXT1yLmNsb25lKCk6KEcoYVttXSl8fChhW21dPUUocik/W106e30pLE9iKGFbbV0sW3JdLCEwKSk6YVttXT1yfX1jP2EuJCRoYXNoS2V5PWM6ZGVsZXRlIGEuJCRoYXNoS2V5O3JldHVybiBhfWZ1bmN0aW9uIE4oYSl7cmV0dXJuIE9iKGEsc2EuY2FsbChhcmd1bWVudHMsMSksITEpfWZ1bmN0aW9uIFlkKGEpe3JldHVybiBPYihhLHNhLmNhbGwoYXJndW1lbnRzLDEpLCEwKX1mdW5jdGlvbiBaKGEpe3JldHVybiBwYXJzZUludChhLDEwKX1mdW5jdGlvbiBRYihhLGIpe3JldHVybiBOKE9iamVjdC5jcmVhdGUoYSksYil9ZnVuY3Rpb24geigpe31mdW5jdGlvbiBZYShhKXtyZXR1cm4gYX1mdW5jdGlvbiBuYShhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYX19ZnVuY3Rpb24gcmMoYSl7cmV0dXJuIEIoYS50b1N0cmluZykmJmEudG9TdHJpbmchPT10YX1mdW5jdGlvbiBxKGEpe3JldHVyblwidW5kZWZpbmVkXCI9PT10eXBlb2YgYX1mdW5jdGlvbiB1KGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT1cbnR5cGVvZiBhfWZ1bmN0aW9uIEcoYSl7cmV0dXJuIG51bGwhPT1hJiZcIm9iamVjdFwiPT09dHlwZW9mIGF9ZnVuY3Rpb24gb2MoYSl7cmV0dXJuIG51bGwhPT1hJiZcIm9iamVjdFwiPT09dHlwZW9mIGEmJiFzYyhhKX1mdW5jdGlvbiBGKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYX1mdW5jdGlvbiBRKGEpe3JldHVyblwibnVtYmVyXCI9PT10eXBlb2YgYX1mdW5jdGlvbiBkYShhKXtyZXR1cm5cIltvYmplY3QgRGF0ZV1cIj09PXRhLmNhbGwoYSl9ZnVuY3Rpb24gQihhKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYX1mdW5jdGlvbiBMYShhKXtyZXR1cm5cIltvYmplY3QgUmVnRXhwXVwiPT09dGEuY2FsbChhKX1mdW5jdGlvbiBYYShhKXtyZXR1cm4gYSYmYS53aW5kb3c9PT1hfWZ1bmN0aW9uIFphKGEpe3JldHVybiBhJiZhLiRldmFsQXN5bmMmJmEuJHdhdGNofWZ1bmN0aW9uICRhKGEpe3JldHVyblwiYm9vbGVhblwiPT09dHlwZW9mIGF9ZnVuY3Rpb24gdGMoYSl7cmV0dXJuIGEmJlEoYS5sZW5ndGgpJiZcblpkLnRlc3QodGEuY2FsbChhKSl9ZnVuY3Rpb24gUGIoYSl7cmV0dXJuISghYXx8IShhLm5vZGVOYW1lfHxhLnByb3AmJmEuYXR0ciYmYS5maW5kKSl9ZnVuY3Rpb24gJGQoYSl7dmFyIGI9e307YT1hLnNwbGl0KFwiLFwiKTt2YXIgZDtmb3IoZD0wO2Q8YS5sZW5ndGg7ZCsrKWJbYVtkXV09ITA7cmV0dXJuIGJ9ZnVuY3Rpb24gb2EoYSl7cmV0dXJuIEsoYS5ub2RlTmFtZXx8YVswXSYmYVswXS5ub2RlTmFtZSl9ZnVuY3Rpb24gYWIoYSxiKXt2YXIgZD1hLmluZGV4T2YoYik7MDw9ZCYmYS5zcGxpY2UoZCwxKTtyZXR1cm4gZH1mdW5jdGlvbiBNYShhLGIpe2Z1bmN0aW9uIGQoYSxiKXt2YXIgZD1iLiQkaGFzaEtleSxlO2lmKEUoYSkpe2U9MDtmb3IodmFyIGY9YS5sZW5ndGg7ZTxmO2UrKyliLnB1c2goYyhhW2VdKSl9ZWxzZSBpZihvYyhhKSlmb3IoZSBpbiBhKWJbZV09YyhhW2VdKTtlbHNlIGlmKGEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmhhc093blByb3BlcnR5KWZvcihlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmXG4oYltlXT1jKGFbZV0pKTtlbHNlIGZvcihlIGluIGEpcmEuY2FsbChhLGUpJiYoYltlXT1jKGFbZV0pKTtkP2IuJCRoYXNoS2V5PWQ6ZGVsZXRlIGIuJCRoYXNoS2V5O3JldHVybiBifWZ1bmN0aW9uIGMoYSl7aWYoIUcoYSkpcmV0dXJuIGE7dmFyIGI9ZS5pbmRleE9mKGEpO2lmKC0xIT09YilyZXR1cm4gZltiXTtpZihYYShhKXx8WmEoYSkpdGhyb3cgQmEoXCJjcHdzXCIpO3ZhciBiPSExLGM7RShhKT8oYz1bXSxiPSEwKTp0YyhhKT9jPW5ldyBhLmNvbnN0cnVjdG9yKGEpOmRhKGEpP2M9bmV3IERhdGUoYS5nZXRUaW1lKCkpOkxhKGEpPyhjPW5ldyBSZWdFeHAoYS5zb3VyY2UsYS50b1N0cmluZygpLm1hdGNoKC9bXlxcL10qJC8pWzBdKSxjLmxhc3RJbmRleD1hLmxhc3RJbmRleCk6QihhLmNsb25lTm9kZSk/Yz1hLmNsb25lTm9kZSghMCk6KGM9T2JqZWN0LmNyZWF0ZShzYyhhKSksYj0hMCk7ZS5wdXNoKGEpO2YucHVzaChjKTtyZXR1cm4gYj9kKGEsYyk6Y312YXIgZT1bXSxmPVtdO2lmKGIpe2lmKHRjKGIpKXRocm93IEJhKFwiY3B0YVwiKTtcbmlmKGE9PT1iKXRocm93IEJhKFwiY3BpXCIpO0UoYik/Yi5sZW5ndGg9MDpuKGIsZnVuY3Rpb24oYSxjKXtcIiQkaGFzaEtleVwiIT09YyYmZGVsZXRlIGJbY119KTtlLnB1c2goYSk7Zi5wdXNoKGIpO3JldHVybiBkKGEsYil9cmV0dXJuIGMoYSl9ZnVuY3Rpb24gaGEoYSxiKXtpZihFKGEpKXtiPWJ8fFtdO2Zvcih2YXIgZD0wLGM9YS5sZW5ndGg7ZDxjO2QrKyliW2RdPWFbZF19ZWxzZSBpZihHKGEpKWZvcihkIGluIGI9Ynx8e30sYSlpZihcIiRcIiE9PWQuY2hhckF0KDApfHxcIiRcIiE9PWQuY2hhckF0KDEpKWJbZF09YVtkXTtyZXR1cm4gYnx8YX1mdW5jdGlvbiBrYShhLGIpe2lmKGE9PT1iKXJldHVybiEwO2lmKG51bGw9PT1hfHxudWxsPT09YilyZXR1cm4hMTtpZihhIT09YSYmYiE9PWIpcmV0dXJuITA7dmFyIGQ9dHlwZW9mIGEsYztpZihkPT10eXBlb2YgYiYmXCJvYmplY3RcIj09ZClpZihFKGEpKXtpZighRShiKSlyZXR1cm4hMTtpZigoZD1hLmxlbmd0aCk9PWIubGVuZ3RoKXtmb3IoYz1cbjA7YzxkO2MrKylpZigha2EoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH19ZWxzZXtpZihkYShhKSlyZXR1cm4gZGEoYik/a2EoYS5nZXRUaW1lKCksYi5nZXRUaW1lKCkpOiExO2lmKExhKGEpKXJldHVybiBMYShiKT9hLnRvU3RyaW5nKCk9PWIudG9TdHJpbmcoKTohMTtpZihaYShhKXx8WmEoYil8fFhhKGEpfHxYYShiKXx8RShiKXx8ZGEoYil8fExhKGIpKXJldHVybiExO2Q9ZWEoKTtmb3IoYyBpbiBhKWlmKFwiJFwiIT09Yy5jaGFyQXQoMCkmJiFCKGFbY10pKXtpZigha2EoYVtjXSxiW2NdKSlyZXR1cm4hMTtkW2NdPSEwfWZvcihjIGluIGIpaWYoIShjIGluIGQpJiZcIiRcIiE9PWMuY2hhckF0KDApJiZ1KGJbY10pJiYhQihiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBiYihhLGIsZCl7cmV0dXJuIGEuY29uY2F0KHNhLmNhbGwoYixkKSl9ZnVuY3Rpb24gdWMoYSxiKXt2YXIgZD0yPGFyZ3VtZW50cy5sZW5ndGg/c2EuY2FsbChhcmd1bWVudHMsMik6XG5bXTtyZXR1cm4hQihiKXx8YiBpbnN0YW5jZW9mIFJlZ0V4cD9iOmQubGVuZ3RoP2Z1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/Yi5hcHBseShhLGJiKGQsYXJndW1lbnRzLDApKTpiLmFwcGx5KGEsZCl9OmZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/Yi5hcHBseShhLGFyZ3VtZW50cyk6Yi5jYWxsKGEpfX1mdW5jdGlvbiBhZShhLGIpe3ZhciBkPWI7XCJzdHJpbmdcIj09PXR5cGVvZiBhJiZcIiRcIj09PWEuY2hhckF0KDApJiZcIiRcIj09PWEuY2hhckF0KDEpP2Q9dzpYYShiKT9kPVwiJFdJTkRPV1wiOmImJlc9PT1iP2Q9XCIkRE9DVU1FTlRcIjpaYShiKSYmKGQ9XCIkU0NPUEVcIik7cmV0dXJuIGR9ZnVuY3Rpb24gY2IoYSxiKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIHc7UShiKXx8KGI9Yj8yOm51bGwpO3JldHVybiBKU09OLnN0cmluZ2lmeShhLGFlLGIpfWZ1bmN0aW9uIHZjKGEpe3JldHVybiBGKGEpP0pTT04ucGFyc2UoYSk6YX1mdW5jdGlvbiB3YyhhLFxuYil7dmFyIGQ9RGF0ZS5wYXJzZShcIkphbiAwMSwgMTk3MCAwMDowMDowMCBcIithKS82RTQ7cmV0dXJuIGlzTmFOKGQpP2I6ZH1mdW5jdGlvbiBSYihhLGIsZCl7ZD1kPy0xOjE7dmFyIGM9d2MoYixhLmdldFRpbWV6b25lT2Zmc2V0KCkpO2I9YTthPWQqKGMtYS5nZXRUaW1lem9uZU9mZnNldCgpKTtiPW5ldyBEYXRlKGIuZ2V0VGltZSgpKTtiLnNldE1pbnV0ZXMoYi5nZXRNaW51dGVzKCkrYSk7cmV0dXJuIGJ9ZnVuY3Rpb24gdWEoYSl7YT1BKGEpLmNsb25lKCk7dHJ5e2EuZW1wdHkoKX1jYXRjaChiKXt9dmFyIGQ9QShcIjxkaXY+XCIpLmFwcGVuZChhKS5odG1sKCk7dHJ5e3JldHVybiBhWzBdLm5vZGVUeXBlPT09TmE/SyhkKTpkLm1hdGNoKC9eKDxbXj5dKz4pLylbMV0ucmVwbGFjZSgvXjwoW1xcd1xcLV0rKS8sZnVuY3Rpb24oYSxiKXtyZXR1cm5cIjxcIitLKGIpfSl9Y2F0Y2goYyl7cmV0dXJuIEsoZCl9fWZ1bmN0aW9uIHhjKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGEpfWNhdGNoKGIpe319XG5mdW5jdGlvbiB5YyhhKXt2YXIgYj17fTtuKChhfHxcIlwiKS5zcGxpdChcIiZcIiksZnVuY3Rpb24oYSl7dmFyIGMsZSxmO2EmJihlPWE9YS5yZXBsYWNlKC9cXCsvZyxcIiUyMFwiKSxjPWEuaW5kZXhPZihcIj1cIiksLTEhPT1jJiYoZT1hLnN1YnN0cmluZygwLGMpLGY9YS5zdWJzdHJpbmcoYysxKSksZT14YyhlKSx1KGUpJiYoZj11KGYpP3hjKGYpOiEwLHJhLmNhbGwoYixlKT9FKGJbZV0pP2JbZV0ucHVzaChmKTpiW2VdPVtiW2VdLGZdOmJbZV09ZikpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gU2IoYSl7dmFyIGI9W107bihhLGZ1bmN0aW9uKGEsYyl7RShhKT9uKGEsZnVuY3Rpb24oYSl7Yi5wdXNoKGlhKGMsITApKyghMD09PWE/XCJcIjpcIj1cIitpYShhLCEwKSkpfSk6Yi5wdXNoKGlhKGMsITApKyghMD09PWE/XCJcIjpcIj1cIitpYShhLCEwKSkpfSk7cmV0dXJuIGIubGVuZ3RoP2Iuam9pbihcIiZcIik6XCJcIn1mdW5jdGlvbiBwYihhKXtyZXR1cm4gaWEoYSwhMCkucmVwbGFjZSgvJTI2L2dpLFwiJlwiKS5yZXBsYWNlKC8lM0QvZ2ksXG5cIj1cIikucmVwbGFjZSgvJTJCL2dpLFwiK1wiKX1mdW5jdGlvbiBpYShhLGIpe3JldHVybiBlbmNvZGVVUklDb21wb25lbnQoYSkucmVwbGFjZSgvJTQwL2dpLFwiQFwiKS5yZXBsYWNlKC8lM0EvZ2ksXCI6XCIpLnJlcGxhY2UoLyUyNC9nLFwiJFwiKS5yZXBsYWNlKC8lMkMvZ2ksXCIsXCIpLnJlcGxhY2UoLyUzQi9naSxcIjtcIikucmVwbGFjZSgvJTIwL2csYj9cIiUyMFwiOlwiK1wiKX1mdW5jdGlvbiBiZShhLGIpe3ZhciBkLGMsZT1PYS5sZW5ndGg7Zm9yKGM9MDtjPGU7KytjKWlmKGQ9T2FbY10rYixGKGQ9YS5nZXRBdHRyaWJ1dGUoZCkpKXJldHVybiBkO3JldHVybiBudWxsfWZ1bmN0aW9uIGNlKGEsYil7dmFyIGQsYyxlPXt9O24oT2EsZnVuY3Rpb24oYil7Yis9XCJhcHBcIjshZCYmYS5oYXNBdHRyaWJ1dGUmJmEuaGFzQXR0cmlidXRlKGIpJiYoZD1hLGM9YS5nZXRBdHRyaWJ1dGUoYikpfSk7bihPYSxmdW5jdGlvbihiKXtiKz1cImFwcFwiO3ZhciBlOyFkJiYoZT1hLnF1ZXJ5U2VsZWN0b3IoXCJbXCIrYi5yZXBsYWNlKFwiOlwiLFxuXCJcXFxcOlwiKStcIl1cIikpJiYoZD1lLGM9ZS5nZXRBdHRyaWJ1dGUoYikpfSk7ZCYmKGUuc3RyaWN0RGk9bnVsbCE9PWJlKGQsXCJzdHJpY3QtZGlcIiksYihkLGM/W2NdOltdLGUpKX1mdW5jdGlvbiB6YyhhLGIsZCl7RyhkKXx8KGQ9e30pO2Q9Tih7c3RyaWN0RGk6ITF9LGQpO3ZhciBjPWZ1bmN0aW9uKCl7YT1BKGEpO2lmKGEuaW5qZWN0b3IoKSl7dmFyIGM9YVswXT09PVc/XCJkb2N1bWVudFwiOnVhKGEpO3Rocm93IEJhKFwiYnRzdHJwZFwiLGMucmVwbGFjZSgvPC8sXCImbHQ7XCIpLnJlcGxhY2UoLz4vLFwiJmd0O1wiKSk7fWI9Ynx8W107Yi51bnNoaWZ0KFtcIiRwcm92aWRlXCIsZnVuY3Rpb24oYil7Yi52YWx1ZShcIiRyb290RWxlbWVudFwiLGEpfV0pO2QuZGVidWdJbmZvRW5hYmxlZCYmYi5wdXNoKFtcIiRjb21waWxlUHJvdmlkZXJcIixmdW5jdGlvbihhKXthLmRlYnVnSW5mb0VuYWJsZWQoITApfV0pO2IudW5zaGlmdChcIm5nXCIpO2M9ZGIoYixkLnN0cmljdERpKTtjLmludm9rZShbXCIkcm9vdFNjb3BlXCIsXG5cIiRyb290RWxlbWVudFwiLFwiJGNvbXBpbGVcIixcIiRpbmplY3RvclwiLGZ1bmN0aW9uKGEsYixjLGQpe2EuJGFwcGx5KGZ1bmN0aW9uKCl7Yi5kYXRhKFwiJGluamVjdG9yXCIsZCk7YyhiKShhKX0pfV0pO3JldHVybiBjfSxlPS9eTkdfRU5BQkxFX0RFQlVHX0lORk8hLyxmPS9eTkdfREVGRVJfQk9PVFNUUkFQIS87UyYmZS50ZXN0KFMubmFtZSkmJihkLmRlYnVnSW5mb0VuYWJsZWQ9ITAsUy5uYW1lPVMubmFtZS5yZXBsYWNlKGUsXCJcIikpO2lmKFMmJiFmLnRlc3QoUy5uYW1lKSlyZXR1cm4gYygpO1MubmFtZT1TLm5hbWUucmVwbGFjZShmLFwiXCIpOyQucmVzdW1lQm9vdHN0cmFwPWZ1bmN0aW9uKGEpe24oYSxmdW5jdGlvbihhKXtiLnB1c2goYSl9KTtyZXR1cm4gYygpfTtCKCQucmVzdW1lRGVmZXJyZWRCb290c3RyYXApJiYkLnJlc3VtZURlZmVycmVkQm9vdHN0cmFwKCl9ZnVuY3Rpb24gZGUoKXtTLm5hbWU9XCJOR19FTkFCTEVfREVCVUdfSU5GTyFcIitTLm5hbWU7Uy5sb2NhdGlvbi5yZWxvYWQoKX1cbmZ1bmN0aW9uIGVlKGEpe2E9JC5lbGVtZW50KGEpLmluamVjdG9yKCk7aWYoIWEpdGhyb3cgQmEoXCJ0ZXN0XCIpO3JldHVybiBhLmdldChcIiQkdGVzdGFiaWxpdHlcIil9ZnVuY3Rpb24gQWMoYSxiKXtiPWJ8fFwiX1wiO3JldHVybiBhLnJlcGxhY2UoZmUsZnVuY3Rpb24oYSxjKXtyZXR1cm4oYz9iOlwiXCIpK2EudG9Mb3dlckNhc2UoKX0pfWZ1bmN0aW9uIGdlKCl7dmFyIGE7aWYoIUJjKXt2YXIgYj1xYigpOyhwYT1xKGIpP1MualF1ZXJ5OmI/U1tiXTp3KSYmcGEuZm4ub24/KEE9cGEsTihwYS5mbix7c2NvcGU6UGEuc2NvcGUsaXNvbGF0ZVNjb3BlOlBhLmlzb2xhdGVTY29wZSxjb250cm9sbGVyOlBhLmNvbnRyb2xsZXIsaW5qZWN0b3I6UGEuaW5qZWN0b3IsaW5oZXJpdGVkRGF0YTpQYS5pbmhlcml0ZWREYXRhfSksYT1wYS5jbGVhbkRhdGEscGEuY2xlYW5EYXRhPWZ1bmN0aW9uKGIpe3ZhciBjO2lmKFRiKVRiPSExO2Vsc2UgZm9yKHZhciBlPTAsZjtudWxsIT0oZj1iW2VdKTtlKyspKGM9XG5wYS5fZGF0YShmLFwiZXZlbnRzXCIpKSYmYy4kZGVzdHJveSYmcGEoZikudHJpZ2dlckhhbmRsZXIoXCIkZGVzdHJveVwiKTthKGIpfSk6QT1QOyQuZWxlbWVudD1BO0JjPSEwfX1mdW5jdGlvbiByYihhLGIsZCl7aWYoIWEpdGhyb3cgQmEoXCJhcmVxXCIsYnx8XCI/XCIsZHx8XCJyZXF1aXJlZFwiKTtyZXR1cm4gYX1mdW5jdGlvbiBRYShhLGIsZCl7ZCYmRShhKSYmKGE9YVthLmxlbmd0aC0xXSk7cmIoQihhKSxiLFwibm90IGEgZnVuY3Rpb24sIGdvdCBcIisoYSYmXCJvYmplY3RcIj09PXR5cGVvZiBhP2EuY29uc3RydWN0b3IubmFtZXx8XCJPYmplY3RcIjp0eXBlb2YgYSkpO3JldHVybiBhfWZ1bmN0aW9uIFJhKGEsYil7aWYoXCJoYXNPd25Qcm9wZXJ0eVwiPT09YSl0aHJvdyBCYShcImJhZG5hbWVcIixiKTt9ZnVuY3Rpb24gQ2MoYSxiLGQpe2lmKCFiKXJldHVybiBhO2I9Yi5zcGxpdChcIi5cIik7Zm9yKHZhciBjLGU9YSxmPWIubGVuZ3RoLGc9MDtnPGY7ZysrKWM9YltnXSxhJiYoYT0oZT1hKVtjXSk7cmV0dXJuIWQmJlxuQihhKT91YyhlLGEpOmF9ZnVuY3Rpb24gc2IoYSl7Zm9yKHZhciBiPWFbMF0sZD1hW2EubGVuZ3RoLTFdLGMsZT0xO2IhPT1kJiYoYj1iLm5leHRTaWJsaW5nKTtlKyspaWYoY3x8YVtlXSE9PWIpY3x8KGM9QShzYS5jYWxsKGEsMCxlKSkpLGMucHVzaChiKTtyZXR1cm4gY3x8YX1mdW5jdGlvbiBlYSgpe3JldHVybiBPYmplY3QuY3JlYXRlKG51bGwpfWZ1bmN0aW9uIGhlKGEpe2Z1bmN0aW9uIGIoYSxiLGMpe3JldHVybiBhW2JdfHwoYVtiXT1jKCkpfXZhciBkPU0oXCIkaW5qZWN0b3JcIiksYz1NKFwibmdcIik7YT1iKGEsXCJhbmd1bGFyXCIsT2JqZWN0KTthLiQkbWluRXJyPWEuJCRtaW5FcnJ8fE07cmV0dXJuIGIoYSxcIm1vZHVsZVwiLGZ1bmN0aW9uKCl7dmFyIGE9e307cmV0dXJuIGZ1bmN0aW9uKGYsZyxoKXtpZihcImhhc093blByb3BlcnR5XCI9PT1mKXRocm93IGMoXCJiYWRuYW1lXCIsXCJtb2R1bGVcIik7ZyYmYS5oYXNPd25Qcm9wZXJ0eShmKSYmKGFbZl09bnVsbCk7cmV0dXJuIGIoYSxmLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShiLFxuZCxlLGYpe2Z8fChmPWMpO3JldHVybiBmdW5jdGlvbigpe2ZbZXx8XCJwdXNoXCJdKFtiLGQsYXJndW1lbnRzXSk7cmV0dXJuIHl9fWZ1bmN0aW9uIGIoYSxkKXtyZXR1cm4gZnVuY3Rpb24oYixlKXtlJiZCKGUpJiYoZS4kJG1vZHVsZU5hbWU9Zik7Yy5wdXNoKFthLGQsYXJndW1lbnRzXSk7cmV0dXJuIHl9fWlmKCFnKXRocm93IGQoXCJub21vZFwiLGYpO3ZhciBjPVtdLGU9W10sdD1bXSxDPWEoXCIkaW5qZWN0b3JcIixcImludm9rZVwiLFwicHVzaFwiLGUpLHk9e19pbnZva2VRdWV1ZTpjLF9jb25maWdCbG9ja3M6ZSxfcnVuQmxvY2tzOnQscmVxdWlyZXM6ZyxuYW1lOmYscHJvdmlkZXI6YihcIiRwcm92aWRlXCIsXCJwcm92aWRlclwiKSxmYWN0b3J5OmIoXCIkcHJvdmlkZVwiLFwiZmFjdG9yeVwiKSxzZXJ2aWNlOmIoXCIkcHJvdmlkZVwiLFwic2VydmljZVwiKSx2YWx1ZTphKFwiJHByb3ZpZGVcIixcInZhbHVlXCIpLGNvbnN0YW50OmEoXCIkcHJvdmlkZVwiLFwiY29uc3RhbnRcIixcInVuc2hpZnRcIiksZGVjb3JhdG9yOmIoXCIkcHJvdmlkZVwiLFxuXCJkZWNvcmF0b3JcIiksYW5pbWF0aW9uOmIoXCIkYW5pbWF0ZVByb3ZpZGVyXCIsXCJyZWdpc3RlclwiKSxmaWx0ZXI6YihcIiRmaWx0ZXJQcm92aWRlclwiLFwicmVnaXN0ZXJcIiksY29udHJvbGxlcjpiKFwiJGNvbnRyb2xsZXJQcm92aWRlclwiLFwicmVnaXN0ZXJcIiksZGlyZWN0aXZlOmIoXCIkY29tcGlsZVByb3ZpZGVyXCIsXCJkaXJlY3RpdmVcIiksY29uZmlnOkMscnVuOmZ1bmN0aW9uKGEpe3QucHVzaChhKTtyZXR1cm4gdGhpc319O2gmJkMoaCk7cmV0dXJuIHl9KX19KX1mdW5jdGlvbiBpZShhKXtOKGEse2Jvb3RzdHJhcDp6Yyxjb3B5Ok1hLGV4dGVuZDpOLG1lcmdlOllkLGVxdWFsczprYSxlbGVtZW50OkEsZm9yRWFjaDpuLGluamVjdG9yOmRiLG5vb3A6eixiaW5kOnVjLHRvSnNvbjpjYixmcm9tSnNvbjp2YyxpZGVudGl0eTpZYSxpc1VuZGVmaW5lZDpxLGlzRGVmaW5lZDp1LGlzU3RyaW5nOkYsaXNGdW5jdGlvbjpCLGlzT2JqZWN0OkcsaXNOdW1iZXI6USxpc0VsZW1lbnQ6UGIsaXNBcnJheTpFLFxudmVyc2lvbjpqZSxpc0RhdGU6ZGEsbG93ZXJjYXNlOkssdXBwZXJjYXNlOnRiLGNhbGxiYWNrczp7Y291bnRlcjowfSxnZXRUZXN0YWJpbGl0eTplZSwkJG1pbkVycjpNLCQkY3NwOkNhLHJlbG9hZFdpdGhEZWJ1Z0luZm86ZGV9KTtVYj1oZShTKTtVYihcIm5nXCIsW1wibmdMb2NhbGVcIl0sW1wiJHByb3ZpZGVcIixmdW5jdGlvbihhKXthLnByb3ZpZGVyKHskJHNhbml0aXplVXJpOmtlfSk7YS5wcm92aWRlcihcIiRjb21waWxlXCIsRGMpLmRpcmVjdGl2ZSh7YTpsZSxpbnB1dDpFYyx0ZXh0YXJlYTpFYyxmb3JtOm1lLHNjcmlwdDpuZSxzZWxlY3Q6b2Usc3R5bGU6cGUsb3B0aW9uOnFlLG5nQmluZDpyZSxuZ0JpbmRIdG1sOnNlLG5nQmluZFRlbXBsYXRlOnRlLG5nQ2xhc3M6dWUsbmdDbGFzc0V2ZW46dmUsbmdDbGFzc09kZDp3ZSxuZ0Nsb2FrOnhlLG5nQ29udHJvbGxlcjp5ZSxuZ0Zvcm06emUsbmdIaWRlOkFlLG5nSWY6QmUsbmdJbmNsdWRlOkNlLG5nSW5pdDpEZSxuZ05vbkJpbmRhYmxlOkVlLFxubmdQbHVyYWxpemU6RmUsbmdSZXBlYXQ6R2UsbmdTaG93OkhlLG5nU3R5bGU6SWUsbmdTd2l0Y2g6SmUsbmdTd2l0Y2hXaGVuOktlLG5nU3dpdGNoRGVmYXVsdDpMZSxuZ09wdGlvbnM6TWUsbmdUcmFuc2NsdWRlOk5lLG5nTW9kZWw6T2UsbmdMaXN0OlBlLG5nQ2hhbmdlOlFlLHBhdHRlcm46RmMsbmdQYXR0ZXJuOkZjLHJlcXVpcmVkOkdjLG5nUmVxdWlyZWQ6R2MsbWlubGVuZ3RoOkhjLG5nTWlubGVuZ3RoOkhjLG1heGxlbmd0aDpJYyxuZ01heGxlbmd0aDpJYyxuZ1ZhbHVlOlJlLG5nTW9kZWxPcHRpb25zOlNlfSkuZGlyZWN0aXZlKHtuZ0luY2x1ZGU6VGV9KS5kaXJlY3RpdmUodWIpLmRpcmVjdGl2ZShKYyk7YS5wcm92aWRlcih7JGFuY2hvclNjcm9sbDpVZSwkYW5pbWF0ZTpWZSwkYW5pbWF0ZUNzczpXZSwkJGFuaW1hdGVKczpYZSwkJGFuaW1hdGVRdWV1ZTpZZSwkJEFuaW1hdGVSdW5uZXI6WmUsJCRhbmltYXRlQXN5bmNSdW46JGUsJGJyb3dzZXI6YWYsJGNhY2hlRmFjdG9yeTpiZixcbiRjb250cm9sbGVyOmNmLCRkb2N1bWVudDpkZiwkZXhjZXB0aW9uSGFuZGxlcjplZiwkZmlsdGVyOktjLCQkZm9yY2VSZWZsb3c6ZmYsJGludGVycG9sYXRlOmdmLCRpbnRlcnZhbDpoZiwkaHR0cDpqZiwkaHR0cFBhcmFtU2VyaWFsaXplcjprZiwkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZTpsZiwkaHR0cEJhY2tlbmQ6bWYsJHhockZhY3Rvcnk6bmYsJGxvY2F0aW9uOm9mLCRsb2c6cGYsJHBhcnNlOnFmLCRyb290U2NvcGU6cmYsJHE6c2YsJCRxOnRmLCRzY2U6dWYsJHNjZURlbGVnYXRlOnZmLCRzbmlmZmVyOndmLCR0ZW1wbGF0ZUNhY2hlOnhmLCR0ZW1wbGF0ZVJlcXVlc3Q6eWYsJCR0ZXN0YWJpbGl0eTp6ZiwkdGltZW91dDpBZiwkd2luZG93OkJmLCQkckFGOkNmLCQkanFMaXRlOkRmLCQkSGFzaE1hcDpFZiwkJGNvb2tpZVJlYWRlcjpGZn0pfV0pfWZ1bmN0aW9uIGViKGEpe3JldHVybiBhLnJlcGxhY2UoR2YsZnVuY3Rpb24oYSxkLGMsZSl7cmV0dXJuIGU/Yy50b1VwcGVyQ2FzZSgpOlxuY30pLnJlcGxhY2UoSGYsXCJNb3okMVwiKX1mdW5jdGlvbiBMYyhhKXthPWEubm9kZVR5cGU7cmV0dXJuIDE9PT1hfHwhYXx8OT09PWF9ZnVuY3Rpb24gTWMoYSxiKXt2YXIgZCxjLGU9Yi5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksZj1bXTtpZihWYi50ZXN0KGEpKXtkPWR8fGUuYXBwZW5kQ2hpbGQoYi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtjPShJZi5leGVjKGEpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKTtjPWphW2NdfHxqYS5fZGVmYXVsdDtkLmlubmVySFRNTD1jWzFdK2EucmVwbGFjZShKZixcIjwkMT48LyQyPlwiKStjWzJdO2ZvcihjPWNbMF07Yy0tOylkPWQubGFzdENoaWxkO2Y9YmIoZixkLmNoaWxkTm9kZXMpO2Q9ZS5maXJzdENoaWxkO2QudGV4dENvbnRlbnQ9XCJcIn1lbHNlIGYucHVzaChiLmNyZWF0ZVRleHROb2RlKGEpKTtlLnRleHRDb250ZW50PVwiXCI7ZS5pbm5lckhUTUw9XCJcIjtuKGYsZnVuY3Rpb24oYSl7ZS5hcHBlbmRDaGlsZChhKX0pO3JldHVybiBlfWZ1bmN0aW9uIFAoYSl7aWYoYSBpbnN0YW5jZW9mXG5QKXJldHVybiBhO3ZhciBiO0YoYSkmJihhPVQoYSksYj0hMCk7aWYoISh0aGlzIGluc3RhbmNlb2YgUCkpe2lmKGImJlwiPFwiIT1hLmNoYXJBdCgwKSl0aHJvdyBXYihcIm5vc2VsXCIpO3JldHVybiBuZXcgUChhKX1pZihiKXtiPVc7dmFyIGQ7YT0oZD1LZi5leGVjKGEpKT9bYi5jcmVhdGVFbGVtZW50KGRbMV0pXTooZD1NYyhhLGIpKT9kLmNoaWxkTm9kZXM6W119TmModGhpcyxhKX1mdW5jdGlvbiBYYihhKXtyZXR1cm4gYS5jbG9uZU5vZGUoITApfWZ1bmN0aW9uIHZiKGEsYil7Ynx8d2IoYSk7aWYoYS5xdWVyeVNlbGVjdG9yQWxsKWZvcih2YXIgZD1hLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpLGM9MCxlPWQubGVuZ3RoO2M8ZTtjKyspd2IoZFtjXSl9ZnVuY3Rpb24gT2MoYSxiLGQsYyl7aWYodShjKSl0aHJvdyBXYihcIm9mZmFyZ3NcIik7dmFyIGU9KGM9eGIoYSkpJiZjLmV2ZW50cyxmPWMmJmMuaGFuZGxlO2lmKGYpaWYoYil7dmFyIGc9ZnVuY3Rpb24oYil7dmFyIGM9ZVtiXTt1KGQpJiZcbmFiKGN8fFtdLGQpO3UoZCkmJmMmJjA8Yy5sZW5ndGh8fChhLnJlbW92ZUV2ZW50TGlzdGVuZXIoYixmLCExKSxkZWxldGUgZVtiXSl9O24oYi5zcGxpdChcIiBcIiksZnVuY3Rpb24oYSl7ZyhhKTt5YlthXSYmZyh5YlthXSl9KX1lbHNlIGZvcihiIGluIGUpXCIkZGVzdHJveVwiIT09YiYmYS5yZW1vdmVFdmVudExpc3RlbmVyKGIsZiwhMSksZGVsZXRlIGVbYl19ZnVuY3Rpb24gd2IoYSxiKXt2YXIgZD1hLm5nMzM5LGM9ZCYmZmJbZF07YyYmKGI/ZGVsZXRlIGMuZGF0YVtiXTooYy5oYW5kbGUmJihjLmV2ZW50cy4kZGVzdHJveSYmYy5oYW5kbGUoe30sXCIkZGVzdHJveVwiKSxPYyhhKSksZGVsZXRlIGZiW2RdLGEubmczMzk9dykpfWZ1bmN0aW9uIHhiKGEsYil7dmFyIGQ9YS5uZzMzOSxkPWQmJmZiW2RdO2ImJiFkJiYoYS5uZzMzOT1kPSsrTGYsZD1mYltkXT17ZXZlbnRzOnt9LGRhdGE6e30saGFuZGxlOnd9KTtyZXR1cm4gZH1mdW5jdGlvbiBZYihhLGIsZCl7aWYoTGMoYSkpe3ZhciBjPVxudShkKSxlPSFjJiZiJiYhRyhiKSxmPSFiO2E9KGE9eGIoYSwhZSkpJiZhLmRhdGE7aWYoYylhW2JdPWQ7ZWxzZXtpZihmKXJldHVybiBhO2lmKGUpcmV0dXJuIGEmJmFbYl07TihhLGIpfX19ZnVuY3Rpb24gemIoYSxiKXtyZXR1cm4gYS5nZXRBdHRyaWJ1dGU/LTE8KFwiIFwiKyhhLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKStcIiBcIikucmVwbGFjZSgvW1xcblxcdF0vZyxcIiBcIikuaW5kZXhPZihcIiBcIitiK1wiIFwiKTohMX1mdW5jdGlvbiBBYihhLGIpe2ImJmEuc2V0QXR0cmlidXRlJiZuKGIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGIpe2Euc2V0QXR0cmlidXRlKFwiY2xhc3NcIixUKChcIiBcIisoYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIikrXCIgXCIpLnJlcGxhY2UoL1tcXG5cXHRdL2csXCIgXCIpLnJlcGxhY2UoXCIgXCIrVChiKStcIiBcIixcIiBcIikpKX0pfWZ1bmN0aW9uIEJiKGEsYil7aWYoYiYmYS5zZXRBdHRyaWJ1dGUpe3ZhciBkPShcIiBcIisoYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIikrXCIgXCIpLnJlcGxhY2UoL1tcXG5cXHRdL2csXG5cIiBcIik7bihiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihhKXthPVQoYSk7LTE9PT1kLmluZGV4T2YoXCIgXCIrYStcIiBcIikmJihkKz1hK1wiIFwiKX0pO2Euc2V0QXR0cmlidXRlKFwiY2xhc3NcIixUKGQpKX19ZnVuY3Rpb24gTmMoYSxiKXtpZihiKWlmKGIubm9kZVR5cGUpYVthLmxlbmd0aCsrXT1iO2Vsc2V7dmFyIGQ9Yi5sZW5ndGg7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkJiZiLndpbmRvdyE9PWIpe2lmKGQpZm9yKHZhciBjPTA7YzxkO2MrKylhW2EubGVuZ3RoKytdPWJbY119ZWxzZSBhW2EubGVuZ3RoKytdPWJ9fWZ1bmN0aW9uIFBjKGEsYil7cmV0dXJuIENiKGEsXCIkXCIrKGJ8fFwibmdDb250cm9sbGVyXCIpK1wiQ29udHJvbGxlclwiKX1mdW5jdGlvbiBDYihhLGIsZCl7OT09YS5ub2RlVHlwZSYmKGE9YS5kb2N1bWVudEVsZW1lbnQpO2ZvcihiPUUoYik/YjpbYl07YTspe2Zvcih2YXIgYz0wLGU9Yi5sZW5ndGg7YzxlO2MrKylpZih1KGQ9QS5kYXRhKGEsYltjXSkpKXJldHVybiBkO2E9YS5wYXJlbnROb2RlfHxcbjExPT09YS5ub2RlVHlwZSYmYS5ob3N0fX1mdW5jdGlvbiBRYyhhKXtmb3IodmIoYSwhMCk7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCl9ZnVuY3Rpb24gWmIoYSxiKXtifHx2YihhKTt2YXIgZD1hLnBhcmVudE5vZGU7ZCYmZC5yZW1vdmVDaGlsZChhKX1mdW5jdGlvbiBNZihhLGIpe2I9Ynx8UztpZihcImNvbXBsZXRlXCI9PT1iLmRvY3VtZW50LnJlYWR5U3RhdGUpYi5zZXRUaW1lb3V0KGEpO2Vsc2UgQShiKS5vbihcImxvYWRcIixhKX1mdW5jdGlvbiBSYyhhLGIpe3ZhciBkPURiW2IudG9Mb3dlckNhc2UoKV07cmV0dXJuIGQmJlNjW29hKGEpXSYmZH1mdW5jdGlvbiBOZihhLGIpe3ZhciBkPWZ1bmN0aW9uKGMsZCl7Yy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gYy5kZWZhdWx0UHJldmVudGVkfTt2YXIgZj1iW2R8fGMudHlwZV0sZz1mP2YubGVuZ3RoOjA7aWYoZyl7aWYocShjLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCkpe3ZhciBoPVxuYy5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb247Yy5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb249ZnVuY3Rpb24oKXtjLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD0hMDtjLnN0b3BQcm9wYWdhdGlvbiYmYy5zdG9wUHJvcGFnYXRpb24oKTtoJiZoLmNhbGwoYyl9fWMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9ZnVuY3Rpb24oKXtyZXR1cm4hMD09PWMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkfTt2YXIgaz1mLnNwZWNpYWxIYW5kbGVyV3JhcHBlcnx8T2Y7MTxnJiYoZj1oYShmKSk7Zm9yKHZhciBsPTA7bDxnO2wrKyljLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCl8fGsoYSxjLGZbbF0pfX07ZC5lbGVtPWE7cmV0dXJuIGR9ZnVuY3Rpb24gT2YoYSxiLGQpe2QuY2FsbChhLGIpfWZ1bmN0aW9uIFBmKGEsYixkKXt2YXIgYz1iLnJlbGF0ZWRUYXJnZXQ7YyYmKGM9PT1hfHxRZi5jYWxsKGEsYykpfHxkLmNhbGwoYSxiKX1mdW5jdGlvbiBEZigpe3RoaXMuJGdldD1cbmZ1bmN0aW9uKCl7cmV0dXJuIE4oUCx7aGFzQ2xhc3M6ZnVuY3Rpb24oYSxiKXthLmF0dHImJihhPWFbMF0pO3JldHVybiB6YihhLGIpfSxhZGRDbGFzczpmdW5jdGlvbihhLGIpe2EuYXR0ciYmKGE9YVswXSk7cmV0dXJuIEJiKGEsYil9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGEsYil7YS5hdHRyJiYoYT1hWzBdKTtyZXR1cm4gQWIoYSxiKX19KX19ZnVuY3Rpb24gRGEoYSxiKXt2YXIgZD1hJiZhLiQkaGFzaEtleTtpZihkKXJldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBkJiYoZD1hLiQkaGFzaEtleSgpKSxkO2Q9dHlwZW9mIGE7cmV0dXJuIGQ9XCJmdW5jdGlvblwiPT1kfHxcIm9iamVjdFwiPT1kJiZudWxsIT09YT9hLiQkaGFzaEtleT1kK1wiOlwiKyhifHxYZCkoKTpkK1wiOlwiK2F9ZnVuY3Rpb24gU2EoYSxiKXtpZihiKXt2YXIgZD0wO3RoaXMubmV4dFVpZD1mdW5jdGlvbigpe3JldHVybisrZH19bihhLHRoaXMucHV0LHRoaXMpfWZ1bmN0aW9uIFJmKGEpe3JldHVybihhPWEudG9TdHJpbmcoKS5yZXBsYWNlKFRjLFxuXCJcIikubWF0Y2goVWMpKT9cImZ1bmN0aW9uKFwiKyhhWzFdfHxcIlwiKS5yZXBsYWNlKC9bXFxzXFxyXFxuXSsvLFwiIFwiKStcIilcIjpcImZuXCJ9ZnVuY3Rpb24gZGIoYSxiKXtmdW5jdGlvbiBkKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe2lmKEcoYikpbihiLHFjKGEpKTtlbHNlIHJldHVybiBhKGIsYyl9fWZ1bmN0aW9uIGMoYSxiKXtSYShhLFwic2VydmljZVwiKTtpZihCKGIpfHxFKGIpKWI9dC5pbnN0YW50aWF0ZShiKTtpZighYi4kZ2V0KXRocm93IEVhKFwicGdldFwiLGEpO3JldHVybiByW2ErXCJQcm92aWRlclwiXT1ifWZ1bmN0aW9uIGUoYSxiKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz15Lmludm9rZShiLHRoaXMpO2lmKHEoYykpdGhyb3cgRWEoXCJ1bmRlZlwiLGEpO3JldHVybiBjfX1mdW5jdGlvbiBmKGEsYixkKXtyZXR1cm4gYyhhLHskZ2V0OiExIT09ZD9lKGEsYik6Yn0pfWZ1bmN0aW9uIGcoYSl7cmIocShhKXx8RShhKSxcIm1vZHVsZXNUb0xvYWRcIixcIm5vdCBhbiBhcnJheVwiKTt2YXIgYj1bXSxjO1xubihhLGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGQoYSl7dmFyIGIsYztiPTA7Zm9yKGM9YS5sZW5ndGg7YjxjO2IrKyl7dmFyIGU9YVtiXSxmPXQuZ2V0KGVbMF0pO2ZbZVsxXV0uYXBwbHkoZixlWzJdKX19aWYoIW0uZ2V0KGEpKXttLnB1dChhLCEwKTt0cnl7RihhKT8oYz1VYihhKSxiPWIuY29uY2F0KGcoYy5yZXF1aXJlcykpLmNvbmNhdChjLl9ydW5CbG9ja3MpLGQoYy5faW52b2tlUXVldWUpLGQoYy5fY29uZmlnQmxvY2tzKSk6QihhKT9iLnB1c2godC5pbnZva2UoYSkpOkUoYSk/Yi5wdXNoKHQuaW52b2tlKGEpKTpRYShhLFwibW9kdWxlXCIpfWNhdGNoKGUpe3Rocm93IEUoYSkmJihhPWFbYS5sZW5ndGgtMV0pLGUubWVzc2FnZSYmZS5zdGFjayYmLTE9PWUuc3RhY2suaW5kZXhPZihlLm1lc3NhZ2UpJiYoZT1lLm1lc3NhZ2UrXCJcXG5cIitlLnN0YWNrKSxFYShcIm1vZHVsZXJyXCIsYSxlLnN0YWNrfHxlLm1lc3NhZ2V8fGUpO319fSk7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGMpe2Z1bmN0aW9uIGQoYixcbmUpe2lmKGEuaGFzT3duUHJvcGVydHkoYikpe2lmKGFbYl09PT1rKXRocm93IEVhKFwiY2RlcFwiLGIrXCIgPC0gXCIrbC5qb2luKFwiIDwtIFwiKSk7cmV0dXJuIGFbYl19dHJ5e3JldHVybiBsLnVuc2hpZnQoYiksYVtiXT1rLGFbYl09YyhiLGUpfWNhdGNoKGYpe3Rocm93IGFbYl09PT1rJiZkZWxldGUgYVtiXSxmO31maW5hbGx5e2wuc2hpZnQoKX19ZnVuY3Rpb24gZShhLGMsZixnKXtcInN0cmluZ1wiPT09dHlwZW9mIGYmJihnPWYsZj1udWxsKTt2YXIgaz1bXSxoPWRiLiQkYW5ub3RhdGUoYSxiLGcpLGwsbSx0O209MDtmb3IobD1oLmxlbmd0aDttPGw7bSsrKXt0PWhbbV07aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiB0KXRocm93IEVhKFwiaXRrblwiLHQpO2sucHVzaChmJiZmLmhhc093blByb3BlcnR5KHQpP2ZbdF06ZCh0LGcpKX1FKGEpJiYoYT1hW2xdKTtyZXR1cm4gYS5hcHBseShjLGspfXJldHVybntpbnZva2U6ZSxpbnN0YW50aWF0ZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9T2JqZWN0LmNyZWF0ZSgoRShhKT9cbmFbYS5sZW5ndGgtMV06YSkucHJvdG90eXBlfHxudWxsKTthPWUoYSxkLGIsYyk7cmV0dXJuIEcoYSl8fEIoYSk/YTpkfSxnZXQ6ZCxhbm5vdGF0ZTpkYi4kJGFubm90YXRlLGhhczpmdW5jdGlvbihiKXtyZXR1cm4gci5oYXNPd25Qcm9wZXJ0eShiK1wiUHJvdmlkZXJcIil8fGEuaGFzT3duUHJvcGVydHkoYil9fX1iPSEwPT09Yjt2YXIgaz17fSxsPVtdLG09bmV3IFNhKFtdLCEwKSxyPXskcHJvdmlkZTp7cHJvdmlkZXI6ZChjKSxmYWN0b3J5OmQoZiksc2VydmljZTpkKGZ1bmN0aW9uKGEsYil7cmV0dXJuIGYoYSxbXCIkaW5qZWN0b3JcIixmdW5jdGlvbihhKXtyZXR1cm4gYS5pbnN0YW50aWF0ZShiKX1dKX0pLHZhbHVlOmQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gZihhLG5hKGIpLCExKX0pLGNvbnN0YW50OmQoZnVuY3Rpb24oYSxiKXtSYShhLFwiY29uc3RhbnRcIik7clthXT1iO0NbYV09Yn0pLGRlY29yYXRvcjpmdW5jdGlvbihhLGIpe3ZhciBjPXQuZ2V0KGErXCJQcm92aWRlclwiKSxkPWMuJGdldDtcbmMuJGdldD1mdW5jdGlvbigpe3ZhciBhPXkuaW52b2tlKGQsYyk7cmV0dXJuIHkuaW52b2tlKGIsbnVsbCx7JGRlbGVnYXRlOmF9KX19fX0sdD1yLiRpbmplY3Rvcj1oKHIsZnVuY3Rpb24oYSxiKXskLmlzU3RyaW5nKGIpJiZsLnB1c2goYik7dGhyb3cgRWEoXCJ1bnByXCIsbC5qb2luKFwiIDwtIFwiKSk7fSksQz17fSx5PUMuJGluamVjdG9yPWgoQyxmdW5jdGlvbihhLGIpe3ZhciBjPXQuZ2V0KGErXCJQcm92aWRlclwiLGIpO3JldHVybiB5Lmludm9rZShjLiRnZXQsYyx3LGEpfSk7bihnKGEpLGZ1bmN0aW9uKGEpe2EmJnkuaW52b2tlKGEpfSk7cmV0dXJuIHl9ZnVuY3Rpb24gVWUoKXt2YXIgYT0hMDt0aGlzLmRpc2FibGVBdXRvU2Nyb2xsaW5nPWZ1bmN0aW9uKCl7YT0hMX07dGhpcy4kZ2V0PVtcIiR3aW5kb3dcIixcIiRsb2NhdGlvblwiLFwiJHJvb3RTY29wZVwiLGZ1bmN0aW9uKGIsZCxjKXtmdW5jdGlvbiBlKGEpe3ZhciBiPW51bGw7QXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChhLGZ1bmN0aW9uKGEpe2lmKFwiYVwiPT09XG5vYShhKSlyZXR1cm4gYj1hLCEwfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhKXtpZihhKXthLnNjcm9sbEludG9WaWV3KCk7dmFyIGM7Yz1nLnlPZmZzZXQ7QihjKT9jPWMoKTpQYihjKT8oYz1jWzBdLGM9XCJmaXhlZFwiIT09Yi5nZXRDb21wdXRlZFN0eWxlKGMpLnBvc2l0aW9uPzA6Yy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20pOlEoYyl8fChjPTApO2MmJihhPWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wLGIuc2Nyb2xsQnkoMCxhLWMpKX1lbHNlIGIuc2Nyb2xsVG8oMCwwKX1mdW5jdGlvbiBnKGEpe2E9RihhKT9hOmQuaGFzaCgpO3ZhciBiO2E/KGI9aC5nZXRFbGVtZW50QnlJZChhKSk/ZihiKTooYj1lKGguZ2V0RWxlbWVudHNCeU5hbWUoYSkpKT9mKGIpOlwidG9wXCI9PT1hJiZmKG51bGwpOmYobnVsbCl9dmFyIGg9Yi5kb2N1bWVudDthJiZjLiR3YXRjaChmdW5jdGlvbigpe3JldHVybiBkLmhhc2goKX0sZnVuY3Rpb24oYSxiKXthPT09YiYmXCJcIj09PWF8fE1mKGZ1bmN0aW9uKCl7Yy4kZXZhbEFzeW5jKGcpfSl9KTtcbnJldHVybiBnfV19ZnVuY3Rpb24gZ2IoYSxiKXtpZighYSYmIWIpcmV0dXJuXCJcIjtpZighYSlyZXR1cm4gYjtpZighYilyZXR1cm4gYTtFKGEpJiYoYT1hLmpvaW4oXCIgXCIpKTtFKGIpJiYoYj1iLmpvaW4oXCIgXCIpKTtyZXR1cm4gYStcIiBcIitifWZ1bmN0aW9uIFNmKGEpe0YoYSkmJihhPWEuc3BsaXQoXCIgXCIpKTt2YXIgYj1lYSgpO24oYSxmdW5jdGlvbihhKXthLmxlbmd0aCYmKGJbYV09ITApfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gRmEoYSl7cmV0dXJuIEcoYSk/YTp7fX1mdW5jdGlvbiBUZihhLGIsZCxjKXtmdW5jdGlvbiBlKGEpe3RyeXthLmFwcGx5KG51bGwsc2EuY2FsbChhcmd1bWVudHMsMSkpfWZpbmFsbHl7aWYoeS0tLDA9PT15KWZvcig7Ui5sZW5ndGg7KXRyeXtSLnBvcCgpKCl9Y2F0Y2goYil7ZC5lcnJvcihiKX19fWZ1bmN0aW9uIGYoKXtIPW51bGw7ZygpO2goKX1mdW5jdGlvbiBnKCl7YTp7dHJ5e3A9bS5zdGF0ZTticmVhayBhfWNhdGNoKGEpe31wPXZvaWQgMH1wPXEocCk/XG5udWxsOnA7a2EocCxEKSYmKHA9RCk7RD1wfWZ1bmN0aW9uIGgoKXtpZih2IT09ay51cmwoKXx8eCE9PXApdj1rLnVybCgpLHg9cCxuKGxhLGZ1bmN0aW9uKGEpe2Eoay51cmwoKSxwKX0pfXZhciBrPXRoaXMsbD1hLmxvY2F0aW9uLG09YS5oaXN0b3J5LHI9YS5zZXRUaW1lb3V0LHQ9YS5jbGVhclRpbWVvdXQsQz17fTtrLmlzTW9jaz0hMTt2YXIgeT0wLFI9W107ay4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0PWU7ay4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50PWZ1bmN0aW9uKCl7eSsrfTtrLm5vdGlmeVdoZW5Ob091dHN0YW5kaW5nUmVxdWVzdHM9ZnVuY3Rpb24oYSl7MD09PXk/YSgpOlIucHVzaChhKX07dmFyIHAseCx2PWwuaHJlZixZPWIuZmluZChcImJhc2VcIiksSD1udWxsO2coKTt4PXA7ay51cmw9ZnVuY3Rpb24oYixkLGUpe3EoZSkmJihlPW51bGwpO2whPT1hLmxvY2F0aW9uJiYobD1hLmxvY2F0aW9uKTttIT09YS5oaXN0b3J5JiYobT1hLmhpc3RvcnkpO2lmKGIpe3ZhciBmPVxueD09PWU7aWYodj09PWImJighYy5oaXN0b3J5fHxmKSlyZXR1cm4gazt2YXIgaD12JiZHYSh2KT09PUdhKGIpO3Y9Yjt4PWU7aWYoIWMuaGlzdG9yeXx8aCYmZil7aWYoIWh8fEgpSD1iO2Q/bC5yZXBsYWNlKGIpOmg/KGQ9bCxlPWIuaW5kZXhPZihcIiNcIiksZT0tMT09PWU/XCJcIjpiLnN1YnN0cihlKSxkLmhhc2g9ZSk6bC5ocmVmPWI7bC5ocmVmIT09YiYmKEg9Yil9ZWxzZSBtW2Q/XCJyZXBsYWNlU3RhdGVcIjpcInB1c2hTdGF0ZVwiXShlLFwiXCIsYiksZygpLHg9cDtyZXR1cm4ga31yZXR1cm4gSHx8bC5ocmVmLnJlcGxhY2UoLyUyNy9nLFwiJ1wiKX07ay5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBwfTt2YXIgbGE9W10sST0hMSxEPW51bGw7ay5vblVybENoYW5nZT1mdW5jdGlvbihiKXtpZighSSl7aWYoYy5oaXN0b3J5KUEoYSkub24oXCJwb3BzdGF0ZVwiLGYpO0EoYSkub24oXCJoYXNoY2hhbmdlXCIsZik7ST0hMH1sYS5wdXNoKGIpO3JldHVybiBifTtrLiQkYXBwbGljYXRpb25EZXN0cm95ZWQ9ZnVuY3Rpb24oKXtBKGEpLm9mZihcImhhc2hjaGFuZ2UgcG9wc3RhdGVcIixcbmYpfTtrLiQkY2hlY2tVcmxDaGFuZ2U9aDtrLmJhc2VIcmVmPWZ1bmN0aW9uKCl7dmFyIGE9WS5hdHRyKFwiaHJlZlwiKTtyZXR1cm4gYT9hLnJlcGxhY2UoL14oaHR0cHM/XFw6KT9cXC9cXC9bXlxcL10qLyxcIlwiKTpcIlwifTtrLmRlZmVyPWZ1bmN0aW9uKGEsYil7dmFyIGM7eSsrO2M9cihmdW5jdGlvbigpe2RlbGV0ZSBDW2NdO2UoYSl9LGJ8fDApO0NbY109ITA7cmV0dXJuIGN9O2suZGVmZXIuY2FuY2VsPWZ1bmN0aW9uKGEpe3JldHVybiBDW2FdPyhkZWxldGUgQ1thXSx0KGEpLGUoeiksITApOiExfX1mdW5jdGlvbiBhZigpe3RoaXMuJGdldD1bXCIkd2luZG93XCIsXCIkbG9nXCIsXCIkc25pZmZlclwiLFwiJGRvY3VtZW50XCIsZnVuY3Rpb24oYSxiLGQsYyl7cmV0dXJuIG5ldyBUZihhLGMsYixkKX1dfWZ1bmN0aW9uIGJmKCl7dGhpcy4kZ2V0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGMpe2Z1bmN0aW9uIGUoYSl7YSE9ciYmKHQ/dD09YSYmKHQ9YS5uKTp0PWEsZihhLm4sYS5wKSxmKGEscikscj1hLFxuci5uPW51bGwpfWZ1bmN0aW9uIGYoYSxiKXthIT1iJiYoYSYmKGEucD1iKSxiJiYoYi5uPWEpKX1pZihhIGluIGIpdGhyb3cgTShcIiRjYWNoZUZhY3RvcnlcIikoXCJpaWRcIixhKTt2YXIgZz0wLGg9Tih7fSxjLHtpZDphfSksaz1lYSgpLGw9YyYmYy5jYXBhY2l0eXx8TnVtYmVyLk1BWF9WQUxVRSxtPWVhKCkscj1udWxsLHQ9bnVsbDtyZXR1cm4gYlthXT17cHV0OmZ1bmN0aW9uKGEsYil7aWYoIXEoYikpe2lmKGw8TnVtYmVyLk1BWF9WQUxVRSl7dmFyIGM9bVthXXx8KG1bYV09e2tleTphfSk7ZShjKX1hIGluIGt8fGcrKztrW2FdPWI7Zz5sJiZ0aGlzLnJlbW92ZSh0LmtleSk7cmV0dXJuIGJ9fSxnZXQ6ZnVuY3Rpb24oYSl7aWYobDxOdW1iZXIuTUFYX1ZBTFVFKXt2YXIgYj1tW2FdO2lmKCFiKXJldHVybjtlKGIpfXJldHVybiBrW2FdfSxyZW1vdmU6ZnVuY3Rpb24oYSl7aWYobDxOdW1iZXIuTUFYX1ZBTFVFKXt2YXIgYj1tW2FdO2lmKCFiKXJldHVybjtiPT1yJiYocj1iLnApO2I9PVxudCYmKHQ9Yi5uKTtmKGIubixiLnApO2RlbGV0ZSBtW2FdfWEgaW4gayYmKGRlbGV0ZSBrW2FdLGctLSl9LHJlbW92ZUFsbDpmdW5jdGlvbigpe2s9ZWEoKTtnPTA7bT1lYSgpO3I9dD1udWxsfSxkZXN0cm95OmZ1bmN0aW9uKCl7bT1oPWs9bnVsbDtkZWxldGUgYlthXX0saW5mbzpmdW5jdGlvbigpe3JldHVybiBOKHt9LGgse3NpemU6Z30pfX19dmFyIGI9e307YS5pbmZvPWZ1bmN0aW9uKCl7dmFyIGE9e307bihiLGZ1bmN0aW9uKGIsZSl7YVtlXT1iLmluZm8oKX0pO3JldHVybiBhfTthLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gYlthXX07cmV0dXJuIGF9fWZ1bmN0aW9uIHhmKCl7dGhpcy4kZ2V0PVtcIiRjYWNoZUZhY3RvcnlcIixmdW5jdGlvbihhKXtyZXR1cm4gYShcInRlbXBsYXRlc1wiKX1dfWZ1bmN0aW9uIERjKGEsYil7ZnVuY3Rpb24gZChhLGIsYyl7dmFyIGQ9L15cXHMqKFtAJl18PShcXCo/KSkoXFw/PylcXHMqKFxcdyopXFxzKiQvLGU9e307bihhLGZ1bmN0aW9uKGEsZil7dmFyIGc9YS5tYXRjaChkKTtcbmlmKCFnKXRocm93IGdhKFwiaXNjcFwiLGIsZixhLGM/XCJjb250cm9sbGVyIGJpbmRpbmdzIGRlZmluaXRpb25cIjpcImlzb2xhdGUgc2NvcGUgZGVmaW5pdGlvblwiKTtlW2ZdPXttb2RlOmdbMV1bMF0sY29sbGVjdGlvbjpcIipcIj09PWdbMl0sb3B0aW9uYWw6XCI/XCI9PT1nWzNdLGF0dHJOYW1lOmdbNF18fGZ9fSk7cmV0dXJuIGV9ZnVuY3Rpb24gYyhhKXt2YXIgYj1hLmNoYXJBdCgwKTtpZighYnx8YiE9PUsoYikpdGhyb3cgZ2EoXCJiYWRkaXJcIixhKTtpZihhIT09YS50cmltKCkpdGhyb3cgZ2EoXCJiYWRkaXJcIixhKTt9dmFyIGU9e30sZj0vXlxccypkaXJlY3RpdmVcXDpcXHMqKFtcXHdcXC1dKylcXHMrKC4qKSQvLGc9LygoW1xcd1xcLV0rKSg/OlxcOihbXjtdKykpPzs/KS8saD0kZChcIm5nU3JjLG5nU3Jjc2V0LHNyYyxzcmNzZXRcIiksaz0vXig/OihcXF5cXF4/KT8oXFw/KT8oXFxeXFxePyk/KT8vLGw9L14ob25bYS16XSt8Zm9ybWFjdGlvbikkLzt0aGlzLmRpcmVjdGl2ZT1mdW5jdGlvbiB0KGIsZil7UmEoYixcImRpcmVjdGl2ZVwiKTtcbkYoYik/KGMoYikscmIoZixcImRpcmVjdGl2ZUZhY3RvcnlcIiksZS5oYXNPd25Qcm9wZXJ0eShiKXx8KGVbYl09W10sYS5mYWN0b3J5KGIrXCJEaXJlY3RpdmVcIixbXCIkaW5qZWN0b3JcIixcIiRleGNlcHRpb25IYW5kbGVyXCIsZnVuY3Rpb24oYSxjKXt2YXIgZj1bXTtuKGVbYl0sZnVuY3Rpb24oZSxnKXt0cnl7dmFyIGg9YS5pbnZva2UoZSk7QihoKT9oPXtjb21waWxlOm5hKGgpfTohaC5jb21waWxlJiZoLmxpbmsmJihoLmNvbXBpbGU9bmEoaC5saW5rKSk7aC5wcmlvcml0eT1oLnByaW9yaXR5fHwwO2guaW5kZXg9ZztoLm5hbWU9aC5uYW1lfHxiO2gucmVxdWlyZT1oLnJlcXVpcmV8fGguY29udHJvbGxlciYmaC5uYW1lO2gucmVzdHJpY3Q9aC5yZXN0cmljdHx8XCJFQVwiO3ZhciBrPWgsbD1oLG09aC5uYW1lLHQ9e2lzb2xhdGVTY29wZTpudWxsLGJpbmRUb0NvbnRyb2xsZXI6bnVsbH07RyhsLnNjb3BlKSYmKCEwPT09bC5iaW5kVG9Db250cm9sbGVyPyh0LmJpbmRUb0NvbnRyb2xsZXI9ZChsLnNjb3BlLFxubSwhMCksdC5pc29sYXRlU2NvcGU9e30pOnQuaXNvbGF0ZVNjb3BlPWQobC5zY29wZSxtLCExKSk7RyhsLmJpbmRUb0NvbnRyb2xsZXIpJiYodC5iaW5kVG9Db250cm9sbGVyPWQobC5iaW5kVG9Db250cm9sbGVyLG0sITApKTtpZihHKHQuYmluZFRvQ29udHJvbGxlcikpe3ZhciB5PWwuY29udHJvbGxlcixYPWwuY29udHJvbGxlckFzO2lmKCF5KXRocm93IGdhKFwibm9jdHJsXCIsbSk7dmFyIFU7YTppZihYJiZGKFgpKVU9WDtlbHNle2lmKEYoeSkpe3ZhciBuPVZjLmV4ZWMoeSk7aWYobil7VT1uWzNdO2JyZWFrIGF9fVU9dm9pZCAwfWlmKCFVKXRocm93IGdhKFwibm9pZGVudFwiLG0pO312YXIgcz1rLiQkYmluZGluZ3M9dDtHKHMuaXNvbGF0ZVNjb3BlKSYmKGguJCRpc29sYXRlQmluZGluZ3M9cy5pc29sYXRlU2NvcGUpO2guJCRtb2R1bGVOYW1lPWUuJCRtb2R1bGVOYW1lO2YucHVzaChoKX1jYXRjaCh3KXtjKHcpfX0pO3JldHVybiBmfV0pKSxlW2JdLnB1c2goZikpOm4oYixxYyh0KSk7XG5yZXR1cm4gdGhpc307dGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdD1mdW5jdGlvbihhKXtyZXR1cm4gdShhKT8oYi5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdChhKSx0aGlzKTpiLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KCl9O3RoaXMuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0PWZ1bmN0aW9uKGEpe3JldHVybiB1KGEpPyhiLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdChhKSx0aGlzKTpiLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCgpfTt2YXIgbT0hMDt0aGlzLmRlYnVnSW5mb0VuYWJsZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHUoYSk/KG09YSx0aGlzKTptfTt0aGlzLiRnZXQ9W1wiJGluamVjdG9yXCIsXCIkaW50ZXJwb2xhdGVcIixcIiRleGNlcHRpb25IYW5kbGVyXCIsXCIkdGVtcGxhdGVSZXF1ZXN0XCIsXCIkcGFyc2VcIixcIiRjb250cm9sbGVyXCIsXCIkcm9vdFNjb3BlXCIsXCIkc2NlXCIsXCIkYW5pbWF0ZVwiLFwiJCRzYW5pdGl6ZVVyaVwiLGZ1bmN0aW9uKGEsYixjLFxuZCxwLHgsdixZLEgsbGEpe2Z1bmN0aW9uIEkoYSxiKXt0cnl7YS5hZGRDbGFzcyhiKX1jYXRjaChjKXt9fWZ1bmN0aW9uIEQoYSxiLGMsZCxlKXthIGluc3RhbmNlb2YgQXx8KGE9QShhKSk7bihhLGZ1bmN0aW9uKGIsYyl7Yi5ub2RlVHlwZT09TmEmJmIubm9kZVZhbHVlLm1hdGNoKC9cXFMrLykmJihhW2NdPUEoYikud3JhcChcIjxzcGFuPjwvc3Bhbj5cIikucGFyZW50KClbMF0pfSk7dmFyIGY9TChhLGIsYSxjLGQsZSk7RC4kJGFkZFNjb3BlQ2xhc3MoYSk7dmFyIGc9bnVsbDtyZXR1cm4gZnVuY3Rpb24oYixjLGQpe3JiKGIsXCJzY29wZVwiKTtlJiZlLm5lZWRzTmV3U2NvcGUmJihiPWIuJHBhcmVudC4kbmV3KCkpO2Q9ZHx8e307dmFyIGg9ZC5wYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbixrPWQudHJhbnNjbHVkZUNvbnRyb2xsZXJzO2Q9ZC5mdXR1cmVQYXJlbnRFbGVtZW50O2gmJmguJCRib3VuZFRyYW5zY2x1ZGUmJihoPWguJCRib3VuZFRyYW5zY2x1ZGUpO2d8fChnPShkPWQmJmRbMF0pP1xuXCJmb3JlaWdub2JqZWN0XCIhPT1vYShkKSYmZC50b1N0cmluZygpLm1hdGNoKC9TVkcvKT9cInN2Z1wiOlwiaHRtbFwiOlwiaHRtbFwiKTtkPVwiaHRtbFwiIT09Zz9BKFEoZyxBKFwiPGRpdj5cIikuYXBwZW5kKGEpLmh0bWwoKSkpOmM/UGEuY2xvbmUuY2FsbChhKTphO2lmKGspZm9yKHZhciBsIGluIGspZC5kYXRhKFwiJFwiK2wrXCJDb250cm9sbGVyXCIsa1tsXS5pbnN0YW5jZSk7RC4kJGFkZFNjb3BlSW5mbyhkLGIpO2MmJmMoZCxiKTtmJiZmKGIsZCxkLGgpO3JldHVybiBkfX1mdW5jdGlvbiBMKGEsYixjLGQsZSxmKXtmdW5jdGlvbiBnKGEsYyxkLGUpe3ZhciBmLGssbCxtLHQsdixJO2lmKHApZm9yKEk9QXJyYXkoYy5sZW5ndGgpLG09MDttPGgubGVuZ3RoO20rPTMpZj1oW21dLElbZl09Y1tmXTtlbHNlIEk9YzttPTA7Zm9yKHQ9aC5sZW5ndGg7bTx0OylrPUlbaFttKytdXSxjPWhbbSsrXSxmPWhbbSsrXSxjPyhjLnNjb3BlPyhsPWEuJG5ldygpLEQuJCRhZGRTY29wZUluZm8oQShrKSxsKSk6bD1hLFxudj1jLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50P08oYSxjLnRyYW5zY2x1ZGUsZSk6IWMudGVtcGxhdGVPblRoaXNFbGVtZW50JiZlP2U6IWUmJmI/TyhhLGIpOm51bGwsYyhmLGwsayxkLHYpKTpmJiZmKGEsay5jaGlsZE5vZGVzLHcsZSl9Zm9yKHZhciBoPVtdLGssbCxtLHQscCx2PTA7djxhLmxlbmd0aDt2Kyspe2s9bmV3IGFhO2w9WChhW3ZdLFtdLGssMD09PXY/ZDp3LGUpOyhmPWwubGVuZ3RoP3MobCxhW3ZdLGssYixjLG51bGwsW10sW10sZik6bnVsbCkmJmYuc2NvcGUmJkQuJCRhZGRTY29wZUNsYXNzKGsuJCRlbGVtZW50KTtrPWYmJmYudGVybWluYWx8fCEobT1hW3ZdLmNoaWxkTm9kZXMpfHwhbS5sZW5ndGg/bnVsbDpMKG0sZj8oZi50cmFuc2NsdWRlT25UaGlzRWxlbWVudHx8IWYudGVtcGxhdGVPblRoaXNFbGVtZW50KSYmZi50cmFuc2NsdWRlOmIpO2lmKGZ8fGspaC5wdXNoKHYsZixrKSx0PSEwLHA9cHx8ZjtmPW51bGx9cmV0dXJuIHQ/ZzpudWxsfWZ1bmN0aW9uIE8oYSxcbmIsYyl7cmV0dXJuIGZ1bmN0aW9uKGQsZSxmLGcsaCl7ZHx8KGQ9YS4kbmV3KCExLGgpLGQuJCR0cmFuc2NsdWRlZD0hMCk7cmV0dXJuIGIoZCxlLHtwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjpjLHRyYW5zY2x1ZGVDb250cm9sbGVyczpmLGZ1dHVyZVBhcmVudEVsZW1lbnQ6Z30pfX1mdW5jdGlvbiBYKGEsYixjLGQsZSl7dmFyIGg9Yy4kYXR0cixrO3N3aXRjaChhLm5vZGVUeXBlKXtjYXNlIDE6dShiLHZhKG9hKGEpKSxcIkVcIixkLGUpO2Zvcih2YXIgbCxtLHQscD1hLmF0dHJpYnV0ZXMsdj0wLEk9cCYmcC5sZW5ndGg7djxJO3YrKyl7dmFyIEw9ITEsQz0hMTtsPXBbdl07az1sLm5hbWU7bT1UKGwudmFsdWUpO2w9dmEoayk7aWYodD1pYS50ZXN0KGwpKWs9ay5yZXBsYWNlKFljLFwiXCIpLnN1YnN0cig4KS5yZXBsYWNlKC9fKC4pL2csZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi50b1VwcGVyQ2FzZSgpfSk7KGw9bC5tYXRjaChqYSkpJiZmYShsWzFdKSYmKEw9ayxDPWsuc3Vic3RyKDAsay5sZW5ndGgtXG41KStcImVuZFwiLGs9ay5zdWJzdHIoMCxrLmxlbmd0aC02KSk7bD12YShrLnRvTG93ZXJDYXNlKCkpO2hbbF09aztpZih0fHwhYy5oYXNPd25Qcm9wZXJ0eShsKSljW2xdPW0sUmMoYSxsKSYmKGNbbF09ITApO1AoYSxiLG0sbCx0KTt1KGIsbCxcIkFcIixkLGUsTCxDKX1hPWEuY2xhc3NOYW1lO0coYSkmJihhPWEuYW5pbVZhbCk7aWYoRihhKSYmXCJcIiE9PWEpZm9yKDtrPWcuZXhlYyhhKTspbD12YShrWzJdKSx1KGIsbCxcIkNcIixkLGUpJiYoY1tsXT1UKGtbM10pKSxhPWEuc3Vic3RyKGsuaW5kZXgra1swXS5sZW5ndGgpO2JyZWFrO2Nhc2UgTmE6aWYoMTE9PT1IYSlmb3IoO2EucGFyZW50Tm9kZSYmYS5uZXh0U2libGluZyYmYS5uZXh0U2libGluZy5ub2RlVHlwZT09PU5hOylhLm5vZGVWYWx1ZSs9YS5uZXh0U2libGluZy5ub2RlVmFsdWUsYS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGEubmV4dFNpYmxpbmcpO0ooYixhLm5vZGVWYWx1ZSk7YnJlYWs7Y2FzZSA4OnRyeXtpZihrPWYuZXhlYyhhLm5vZGVWYWx1ZSkpbD1cbnZhKGtbMV0pLHUoYixsLFwiTVwiLGQsZSkmJihjW2xdPVQoa1syXSkpfWNhdGNoKFgpe319Yi5zb3J0KHdhKTtyZXR1cm4gYn1mdW5jdGlvbiBVKGEsYixjKXt2YXIgZD1bXSxlPTA7aWYoYiYmYS5oYXNBdHRyaWJ1dGUmJmEuaGFzQXR0cmlidXRlKGIpKXtkb3tpZighYSl0aHJvdyBnYShcInV0ZXJkaXJcIixiLGMpOzE9PWEubm9kZVR5cGUmJihhLmhhc0F0dHJpYnV0ZShiKSYmZSsrLGEuaGFzQXR0cmlidXRlKGMpJiZlLS0pO2QucHVzaChhKTthPWEubmV4dFNpYmxpbmd9d2hpbGUoMDxlKX1lbHNlIGQucHVzaChhKTtyZXR1cm4gQShkKX1mdW5jdGlvbiBUYShhLGIsYyl7cmV0dXJuIGZ1bmN0aW9uKGQsZSxmLGcsaCl7ZT1VKGVbMF0sYixjKTtyZXR1cm4gYShkLGUsZixnLGgpfX1mdW5jdGlvbiBzKGEsYixkLGUsZixnLGgsbCxtKXtmdW5jdGlvbiB0KGEsYixjLGQpe2lmKGEpe2MmJihhPVRhKGEsYyxkKSk7YS5yZXF1aXJlPXEucmVxdWlyZTthLmRpcmVjdGl2ZU5hbWU9ejtpZihPPT09XG5xfHxxLiQkaXNvbGF0ZVNjb3BlKWE9YmEoYSx7aXNvbGF0ZVNjb3BlOiEwfSk7aC5wdXNoKGEpfWlmKGIpe2MmJihiPVRhKGIsYyxkKSk7Yi5yZXF1aXJlPXEucmVxdWlyZTtiLmRpcmVjdGl2ZU5hbWU9ejtpZihPPT09cXx8cS4kJGlzb2xhdGVTY29wZSliPWJhKGIse2lzb2xhdGVTY29wZTohMH0pO2wucHVzaChiKX19ZnVuY3Rpb24gcChhLGIsYyxkKXt2YXIgZTtpZihGKGIpKXt2YXIgZj1iLm1hdGNoKGspO2I9Yi5zdWJzdHJpbmcoZlswXS5sZW5ndGgpO3ZhciBnPWZbMV18fGZbM10sZj1cIj9cIj09PWZbMl07XCJeXlwiPT09Zz9jPWMucGFyZW50KCk6ZT0oZT1kJiZkW2JdKSYmZS5pbnN0YW5jZTtlfHwoZD1cIiRcIitiK1wiQ29udHJvbGxlclwiLGU9Zz9jLmluaGVyaXRlZERhdGEoZCk6Yy5kYXRhKGQpKTtpZighZSYmIWYpdGhyb3cgZ2EoXCJjdHJlcVwiLGIsYSk7fWVsc2UgaWYoRShiKSlmb3IoZT1bXSxnPTAsZj1iLmxlbmd0aDtnPGY7ZysrKWVbZ109cChhLGJbZ10sYyxkKTtyZXR1cm4gZXx8XG5udWxsfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYpe3ZhciBnPWVhKCksaDtmb3IoaCBpbiBkKXt2YXIgaz1kW2hdLGw9eyRzY29wZTprPT09T3x8ay4kJGlzb2xhdGVTY29wZT9lOmYsJGVsZW1lbnQ6YSwkYXR0cnM6YiwkdHJhbnNjbHVkZTpjfSxtPWsuY29udHJvbGxlcjtcIkBcIj09bSYmKG09YltrLm5hbWVdKTtsPXgobSxsLCEwLGsuY29udHJvbGxlckFzKTtnW2submFtZV09bDtoYnx8YS5kYXRhKFwiJFwiK2submFtZStcIkNvbnRyb2xsZXJcIixsLmluc3RhbmNlKX1yZXR1cm4gZ31mdW5jdGlvbiBJKGEsYyxlLGYsZyl7ZnVuY3Rpb24gayhhLGIsYyl7dmFyIGQ7WmEoYSl8fChjPWIsYj1hLGE9dyk7aGImJihkPVgpO2N8fChjPWhiP3gucGFyZW50KCk6eCk7cmV0dXJuIGcoYSxiLGQsYyxUYSl9dmFyIG0sdCxMLFgseSx4LFU7Yj09PWU/KGY9ZCx4PWQuJCRlbGVtZW50KTooeD1BKGUpLGY9bmV3IGFhKHgsZCkpO0w9YztPP3Q9Yy4kbmV3KCEwKTpDJiYoTD1jLiRwYXJlbnQpO2cmJih5PWssXG55LiQkYm91bmRUcmFuc2NsdWRlPWcpO1ImJihYPXYoeCxmLHksUix0LGMpKTtPJiYoRC4kJGFkZFNjb3BlSW5mbyh4LHQsITAsIShuJiYobj09PU98fG49PT1PLiQkb3JpZ2luYWxEaXJlY3RpdmUpKSksRC4kJGFkZFNjb3BlQ2xhc3MoeCwhMCksdC4kJGlzb2xhdGVCaW5kaW5ncz1PLiQkaXNvbGF0ZUJpbmRpbmdzLChVPVooYyxmLHQsdC4kJGlzb2xhdGVCaW5kaW5ncyxPKSkmJnQuJG9uKFwiJGRlc3Ryb3lcIixVKSk7Zm9yKHZhciBYYyBpbiBYKXtVPVJbWGNdO3ZhciBZPVhbWGNdLEg9VS4kJGJpbmRpbmdzLmJpbmRUb0NvbnRyb2xsZXI7WS5pZGVudGlmaWVyJiZIJiYobT1aKEwsZixZLmluc3RhbmNlLEgsVSkpO3ZhciBxPVkoKTtxIT09WS5pbnN0YW5jZSYmKFkuaW5zdGFuY2U9cSx4LmRhdGEoXCIkXCIrVS5uYW1lK1wiQ29udHJvbGxlclwiLHEpLG0mJm0oKSxtPVooTCxmLFkuaW5zdGFuY2UsSCxVKSl9ZmE9MDtmb3IoSz1oLmxlbmd0aDtmYTxLO2ZhKyspbT1oW2ZhXSxjYShtLG0uaXNvbGF0ZVNjb3BlP1xudDpjLHgsZixtLnJlcXVpcmUmJnAobS5kaXJlY3RpdmVOYW1lLG0ucmVxdWlyZSx4LFgpLHkpO3ZhciBUYT1jO08mJihPLnRlbXBsYXRlfHxudWxsPT09Ty50ZW1wbGF0ZVVybCkmJihUYT10KTthJiZhKFRhLGUuY2hpbGROb2Rlcyx3LGcpO2ZvcihmYT1sLmxlbmd0aC0xOzA8PWZhO2ZhLS0pbT1sW2ZhXSxjYShtLG0uaXNvbGF0ZVNjb3BlP3Q6Yyx4LGYsbS5yZXF1aXJlJiZwKG0uZGlyZWN0aXZlTmFtZSxtLnJlcXVpcmUseCxYKSx5KX1tPW18fHt9O2Zvcih2YXIgTD0tTnVtYmVyLk1BWF9WQUxVRSxDPW0ubmV3U2NvcGVEaXJlY3RpdmUsUj1tLmNvbnRyb2xsZXJEaXJlY3RpdmVzLE89bS5uZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsbj1tLnRlbXBsYXRlRGlyZWN0aXZlLFk9bS5ub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlLEg9ITEsbGE9ITEsaGI9bS5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSx1PWQuJCRlbGVtZW50PUEoYikscSx6LEosaWI9ZSx3YSxmYT0wLEs9YS5sZW5ndGg7ZmE8XG5LO2ZhKyspe3E9YVtmYV07dmFyIE49cS4kJHN0YXJ0LFA9cS4kJGVuZDtOJiYodT1VKGIsTixQKSk7Sj13O2lmKEw+cS5wcmlvcml0eSlicmVhaztpZihKPXEuc2NvcGUpcS50ZW1wbGF0ZVVybHx8KEcoSik/KFVhKFwibmV3L2lzb2xhdGVkIHNjb3BlXCIsT3x8QyxxLHUpLE89cSk6VWEoXCJuZXcvaXNvbGF0ZWQgc2NvcGVcIixPLHEsdSkpLEM9Q3x8cTt6PXEubmFtZTshcS50ZW1wbGF0ZVVybCYmcS5jb250cm9sbGVyJiYoSj1xLmNvbnRyb2xsZXIsUj1SfHxlYSgpLFVhKFwiJ1wiK3orXCInIGNvbnRyb2xsZXJcIixSW3pdLHEsdSksUlt6XT1xKTtpZihKPXEudHJhbnNjbHVkZSlIPSEwLHEuJCR0bGJ8fChVYShcInRyYW5zY2x1c2lvblwiLFkscSx1KSxZPXEpLFwiZWxlbWVudFwiPT1KPyhoYj0hMCxMPXEucHJpb3JpdHksSj11LHU9ZC4kJGVsZW1lbnQ9QShXLmNyZWF0ZUNvbW1lbnQoXCIgXCIreitcIjogXCIrZFt6XStcIiBcIikpLGI9dVswXSxWKGYsc2EuY2FsbChKLDApLGIpLGliPUQoSixlLEwsZyYmZy5uYW1lLFxue25vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6WX0pKTooSj1BKFhiKGIpKS5jb250ZW50cygpLHUuZW1wdHkoKSxpYj1EKEosZSx3LHcse25lZWRzTmV3U2NvcGU6cS4kJGlzb2xhdGVTY29wZXx8cS4kJG5ld1Njb3BlfSkpO2lmKHEudGVtcGxhdGUpaWYobGE9ITAsVWEoXCJ0ZW1wbGF0ZVwiLG4scSx1KSxuPXEsSj1CKHEudGVtcGxhdGUpP3EudGVtcGxhdGUodSxkKTpxLnRlbXBsYXRlLEo9aGEoSikscS5yZXBsYWNlKXtnPXE7Sj1WYi50ZXN0KEopP1pjKFEocS50ZW1wbGF0ZU5hbWVzcGFjZSxUKEopKSk6W107Yj1KWzBdO2lmKDEhPUoubGVuZ3RofHwxIT09Yi5ub2RlVHlwZSl0aHJvdyBnYShcInRwbHJ0XCIseixcIlwiKTtWKGYsdSxiKTtKPXskYXR0cjp7fX07dmFyIEViPVgoYixbXSxKKSwkPWEuc3BsaWNlKGZhKzEsYS5sZW5ndGgtKGZhKzEpKTsoT3x8QykmJldjKEViLE8sQyk7YT1hLmNvbmNhdChFYikuY29uY2F0KCQpO00oZCxKKTtLPWEubGVuZ3RofWVsc2UgdS5odG1sKEopO2lmKHEudGVtcGxhdGVVcmwpbGE9XG4hMCxVYShcInRlbXBsYXRlXCIsbixxLHUpLG49cSxxLnJlcGxhY2UmJihnPXEpLEk9UyhhLnNwbGljZShmYSxhLmxlbmd0aC1mYSksdSxkLGYsSCYmaWIsaCxsLHtjb250cm9sbGVyRGlyZWN0aXZlczpSLG5ld1Njb3BlRGlyZWN0aXZlOkMhPT1xJiZDLG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZTpPLHRlbXBsYXRlRGlyZWN0aXZlOm4sbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZTpZfSksSz1hLmxlbmd0aDtlbHNlIGlmKHEuY29tcGlsZSl0cnl7d2E9cS5jb21waWxlKHUsZCxpYiksQih3YSk/dChudWxsLHdhLE4sUCk6d2EmJnQod2EucHJlLHdhLnBvc3QsTixQKX1jYXRjaChkYSl7YyhkYSx1YSh1KSl9cS50ZXJtaW5hbCYmKEkudGVybWluYWw9ITAsTD1NYXRoLm1heChMLHEucHJpb3JpdHkpKX1JLnNjb3BlPUMmJiEwPT09Qy5zY29wZTtJLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50PUg7SS50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQ9bGE7SS50cmFuc2NsdWRlPWliO20uaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmU9XG5oYjtyZXR1cm4gSX1mdW5jdGlvbiBXYyhhLGIsYyl7Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7ZCsrKWFbZF09UWIoYVtkXSx7JCRpc29sYXRlU2NvcGU6YiwkJG5ld1Njb3BlOmN9KX1mdW5jdGlvbiB1KGIsZCxmLGcsaCxrLGwpe2lmKGQ9PT1oKXJldHVybiBudWxsO2g9bnVsbDtpZihlLmhhc093blByb3BlcnR5KGQpKXt2YXIgbTtkPWEuZ2V0KGQrXCJEaXJlY3RpdmVcIik7Zm9yKHZhciBwPTAsdj1kLmxlbmd0aDtwPHY7cCsrKXRyeXttPWRbcF0sKHEoZyl8fGc+bS5wcmlvcml0eSkmJi0xIT1tLnJlc3RyaWN0LmluZGV4T2YoZikmJihrJiYobT1RYihtLHskJHN0YXJ0OmssJCRlbmQ6bH0pKSxiLnB1c2gobSksaD1tKX1jYXRjaChJKXtjKEkpfX1yZXR1cm4gaH1mdW5jdGlvbiBmYShiKXtpZihlLmhhc093blByb3BlcnR5KGIpKWZvcih2YXIgYz1hLmdldChiK1wiRGlyZWN0aXZlXCIpLGQ9MCxmPWMubGVuZ3RoO2Q8ZjtkKyspaWYoYj1jW2RdLGIubXVsdGlFbGVtZW50KXJldHVybiEwO1xucmV0dXJuITF9ZnVuY3Rpb24gTShhLGIpe3ZhciBjPWIuJGF0dHIsZD1hLiRhdHRyLGU9YS4kJGVsZW1lbnQ7bihhLGZ1bmN0aW9uKGQsZSl7XCIkXCIhPWUuY2hhckF0KDApJiYoYltlXSYmYltlXSE9PWQmJihkKz0oXCJzdHlsZVwiPT09ZT9cIjtcIjpcIiBcIikrYltlXSksYS4kc2V0KGUsZCwhMCxjW2VdKSl9KTtuKGIsZnVuY3Rpb24oYixmKXtcImNsYXNzXCI9PWY/KEkoZSxiKSxhW1wiY2xhc3NcIl09KGFbXCJjbGFzc1wiXT9hW1wiY2xhc3NcIl0rXCIgXCI6XCJcIikrYik6XCJzdHlsZVwiPT1mPyhlLmF0dHIoXCJzdHlsZVwiLGUuYXR0cihcInN0eWxlXCIpK1wiO1wiK2IpLGEuc3R5bGU9KGEuc3R5bGU/YS5zdHlsZStcIjtcIjpcIlwiKStiKTpcIiRcIj09Zi5jaGFyQXQoMCl8fGEuaGFzT3duUHJvcGVydHkoZil8fChhW2ZdPWIsZFtmXT1jW2ZdKX0pfWZ1bmN0aW9uIFMoYSxiLGMsZSxmLGcsaCxrKXt2YXIgbD1bXSxtLHQscD1iWzBdLHY9YS5zaGlmdCgpLEM9UWIodix7dGVtcGxhdGVVcmw6bnVsbCx0cmFuc2NsdWRlOm51bGwscmVwbGFjZTpudWxsLFxuJCRvcmlnaW5hbERpcmVjdGl2ZTp2fSkseD1CKHYudGVtcGxhdGVVcmwpP3YudGVtcGxhdGVVcmwoYixjKTp2LnRlbXBsYXRlVXJsLHk9di50ZW1wbGF0ZU5hbWVzcGFjZTtiLmVtcHR5KCk7ZCh4KS50aGVuKGZ1bmN0aW9uKGQpe3ZhciBSLEQ7ZD1oYShkKTtpZih2LnJlcGxhY2Upe2Q9VmIudGVzdChkKT9aYyhRKHksVChkKSkpOltdO1I9ZFswXTtpZigxIT1kLmxlbmd0aHx8MSE9PVIubm9kZVR5cGUpdGhyb3cgZ2EoXCJ0cGxydFwiLHYubmFtZSx4KTtkPXskYXR0cjp7fX07VihlLGIsUik7dmFyIFU9WChSLFtdLGQpO0codi5zY29wZSkmJldjKFUsITApO2E9VS5jb25jYXQoYSk7TShjLGQpfWVsc2UgUj1wLGIuaHRtbChkKTthLnVuc2hpZnQoQyk7bT1zKGEsUixjLGYsYix2LGcsaCxrKTtuKGUsZnVuY3Rpb24oYSxjKXthPT1SJiYoZVtjXT1iWzBdKX0pO2Zvcih0PUwoYlswXS5jaGlsZE5vZGVzLGYpO2wubGVuZ3RoOyl7ZD1sLnNoaWZ0KCk7RD1sLnNoaWZ0KCk7dmFyIFk9bC5zaGlmdCgpLFxuSD1sLnNoaWZ0KCksVT1iWzBdO2lmKCFkLiQkZGVzdHJveWVkKXtpZihEIT09cCl7dmFyIHE9RC5jbGFzc05hbWU7ay5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSYmdi5yZXBsYWNlfHwoVT1YYihSKSk7VihZLEEoRCksVSk7SShBKFUpLHEpfUQ9bS50cmFuc2NsdWRlT25UaGlzRWxlbWVudD9PKGQsbS50cmFuc2NsdWRlLEgpOkg7bSh0LGQsVSxlLEQpfX1sPW51bGx9KTtyZXR1cm4gZnVuY3Rpb24oYSxiLGMsZCxlKXthPWU7Yi4kJGRlc3Ryb3llZHx8KGw/bC5wdXNoKGIsYyxkLGEpOihtLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50JiYoYT1PKGIsbS50cmFuc2NsdWRlLGUpKSxtKHQsYixjLGQsYSkpKX19ZnVuY3Rpb24gd2EoYSxiKXt2YXIgYz1iLnByaW9yaXR5LWEucHJpb3JpdHk7cmV0dXJuIDAhPT1jP2M6YS5uYW1lIT09Yi5uYW1lP2EubmFtZTxiLm5hbWU/LTE6MTphLmluZGV4LWIuaW5kZXh9ZnVuY3Rpb24gVWEoYSxiLGMsZCl7ZnVuY3Rpb24gZShhKXtyZXR1cm4gYT9cblwiIChtb2R1bGU6IFwiK2ErXCIpXCI6XCJcIn1pZihiKXRocm93IGdhKFwibXVsdGlkaXJcIixiLm5hbWUsZShiLiQkbW9kdWxlTmFtZSksYy5uYW1lLGUoYy4kJG1vZHVsZU5hbWUpLGEsdWEoZCkpO31mdW5jdGlvbiBKKGEsYyl7dmFyIGQ9YihjLCEwKTtkJiZhLnB1c2goe3ByaW9yaXR5OjAsY29tcGlsZTpmdW5jdGlvbihhKXthPWEucGFyZW50KCk7dmFyIGI9ISFhLmxlbmd0aDtiJiZELiQkYWRkQmluZGluZ0NsYXNzKGEpO3JldHVybiBmdW5jdGlvbihhLGMpe3ZhciBlPWMucGFyZW50KCk7Ynx8RC4kJGFkZEJpbmRpbmdDbGFzcyhlKTtELiQkYWRkQmluZGluZ0luZm8oZSxkLmV4cHJlc3Npb25zKTthLiR3YXRjaChkLGZ1bmN0aW9uKGEpe2NbMF0ubm9kZVZhbHVlPWF9KX19fSl9ZnVuY3Rpb24gUShhLGIpe2E9SyhhfHxcImh0bWxcIik7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpjYXNlIFwibWF0aFwiOnZhciBjPVcuY3JlYXRlRWxlbWVudChcImRpdlwiKTtjLmlubmVySFRNTD1cIjxcIithK1wiPlwiK2IrXCI8L1wiK1xuYStcIj5cIjtyZXR1cm4gYy5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXM7ZGVmYXVsdDpyZXR1cm4gYn19ZnVuY3Rpb24gRWIoYSxiKXtpZihcInNyY2RvY1wiPT1iKXJldHVybiBZLkhUTUw7dmFyIGM9b2EoYSk7aWYoXCJ4bGlua0hyZWZcIj09Ynx8XCJmb3JtXCI9PWMmJlwiYWN0aW9uXCI9PWJ8fFwiaW1nXCIhPWMmJihcInNyY1wiPT1ifHxcIm5nU3JjXCI9PWIpKXJldHVybiBZLlJFU09VUkNFX1VSTH1mdW5jdGlvbiBQKGEsYyxkLGUsZil7dmFyIGc9RWIoYSxlKTtmPWhbZV18fGY7dmFyIGs9YihkLCEwLGcsZik7aWYoayl7aWYoXCJtdWx0aXBsZVwiPT09ZSYmXCJzZWxlY3RcIj09PW9hKGEpKXRocm93IGdhKFwic2VsbXVsdGlcIix1YShhKSk7Yy5wdXNoKHtwcmlvcml0eToxMDAsY29tcGlsZTpmdW5jdGlvbigpe3JldHVybntwcmU6ZnVuY3Rpb24oYSxjLGgpe2M9aC4kJG9ic2VydmVyc3x8KGguJCRvYnNlcnZlcnM9ZWEoKSk7aWYobC50ZXN0KGUpKXRocm93IGdhKFwibm9kb21ldmVudHNcIik7dmFyIG09aFtlXTttIT09XG5kJiYoaz1tJiZiKG0sITAsZyxmKSxkPW0pO2smJihoW2VdPWsoYSksKGNbZV18fChjW2VdPVtdKSkuJCRpbnRlcj0hMCwoaC4kJG9ic2VydmVycyYmaC4kJG9ic2VydmVyc1tlXS4kJHNjb3BlfHxhKS4kd2F0Y2goayxmdW5jdGlvbihhLGIpe1wiY2xhc3NcIj09PWUmJmEhPWI/aC4kdXBkYXRlQ2xhc3MoYSxiKTpoLiRzZXQoZSxhKX0pKX19fX0pfX1mdW5jdGlvbiBWKGEsYixjKXt2YXIgZD1iWzBdLGU9Yi5sZW5ndGgsZj1kLnBhcmVudE5vZGUsZyxoO2lmKGEpZm9yKGc9MCxoPWEubGVuZ3RoO2c8aDtnKyspaWYoYVtnXT09ZCl7YVtnKytdPWM7aD1nK2UtMTtmb3IodmFyIGs9YS5sZW5ndGg7ZzxrO2crKyxoKyspaDxrP2FbZ109YVtoXTpkZWxldGUgYVtnXTthLmxlbmd0aC09ZS0xO2EuY29udGV4dD09PWQmJihhLmNvbnRleHQ9Yyk7YnJlYWt9ZiYmZi5yZXBsYWNlQ2hpbGQoYyxkKTthPVcuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO2EuYXBwZW5kQ2hpbGQoZCk7QS5oYXNEYXRhKGQpJiZcbihBLmRhdGEoYyxBLmRhdGEoZCkpLHBhPyhUYj0hMCxwYS5jbGVhbkRhdGEoW2RdKSk6ZGVsZXRlIEEuY2FjaGVbZFtBLmV4cGFuZG9dXSk7ZD0xO2ZvcihlPWIubGVuZ3RoO2Q8ZTtkKyspZj1iW2RdLEEoZikucmVtb3ZlKCksYS5hcHBlbmRDaGlsZChmKSxkZWxldGUgYltkXTtiWzBdPWM7Yi5sZW5ndGg9MX1mdW5jdGlvbiBiYShhLGIpe3JldHVybiBOKGZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxhLGIpfWZ1bmN0aW9uIGNhKGEsYixkLGUsZixnKXt0cnl7YShiLGQsZSxmLGcpfWNhdGNoKGgpe2MoaCx1YShkKSl9fWZ1bmN0aW9uIFooYSxjLGQsZSxmKXt2YXIgZz1bXTtuKGUsZnVuY3Rpb24oZSxoKXt2YXIgaz1lLmF0dHJOYW1lLGw9ZS5vcHRpb25hbCxtLHQsdixJO3N3aXRjaChlLm1vZGUpe2Nhc2UgXCJAXCI6bHx8cmEuY2FsbChjLGspfHwoZFtoXT1jW2tdPXZvaWQgMCk7Yy4kb2JzZXJ2ZShrLGZ1bmN0aW9uKGEpe0YoYSkmJihkW2hdPWEpfSk7XG5jLiQkb2JzZXJ2ZXJzW2tdLiQkc2NvcGU9YTtGKGNba10pJiYoZFtoXT1iKGNba10pKGEpKTticmVhaztjYXNlIFwiPVwiOmlmKCFyYS5jYWxsKGMsaykpe2lmKGwpYnJlYWs7Y1trXT12b2lkIDB9aWYobCYmIWNba10pYnJlYWs7dD1wKGNba10pO0k9dC5saXRlcmFsP2thOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9PT1ifHxhIT09YSYmYiE9PWJ9O3Y9dC5hc3NpZ258fGZ1bmN0aW9uKCl7bT1kW2hdPXQoYSk7dGhyb3cgZ2EoXCJub25hc3NpZ25cIixjW2tdLGYubmFtZSk7fTttPWRbaF09dChhKTtsPWZ1bmN0aW9uKGIpe0koYixkW2hdKXx8KEkoYixtKT92KGEsYj1kW2hdKTpkW2hdPWIpO3JldHVybiBtPWJ9O2wuJHN0YXRlZnVsPSEwO2w9ZS5jb2xsZWN0aW9uP2EuJHdhdGNoQ29sbGVjdGlvbihjW2tdLGwpOmEuJHdhdGNoKHAoY1trXSxsKSxudWxsLHQubGl0ZXJhbCk7Zy5wdXNoKGwpO2JyZWFrO2Nhc2UgXCImXCI6dD1jLmhhc093blByb3BlcnR5KGspP3AoY1trXSk6ejtpZih0PT09eiYmXG5sKWJyZWFrO2RbaF09ZnVuY3Rpb24oYil7cmV0dXJuIHQoYSxiKX19fSk7cmV0dXJuIGcubGVuZ3RoJiZmdW5jdGlvbigpe2Zvcih2YXIgYT0wLGI9Zy5sZW5ndGg7YTxiOysrYSlnW2FdKCl9fXZhciBhYT1mdW5jdGlvbihhLGIpe2lmKGIpe3ZhciBjPU9iamVjdC5rZXlzKGIpLGQsZSxmO2Q9MDtmb3IoZT1jLmxlbmd0aDtkPGU7ZCsrKWY9Y1tkXSx0aGlzW2ZdPWJbZl19ZWxzZSB0aGlzLiRhdHRyPXt9O3RoaXMuJCRlbGVtZW50PWF9O2FhLnByb3RvdHlwZT17JG5vcm1hbGl6ZTp2YSwkYWRkQ2xhc3M6ZnVuY3Rpb24oYSl7YSYmMDxhLmxlbmd0aCYmSC5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCxhKX0sJHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGEpe2EmJjA8YS5sZW5ndGgmJkgucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsYSl9LCR1cGRhdGVDbGFzczpmdW5jdGlvbihhLGIpe3ZhciBjPSRjKGEsYik7YyYmYy5sZW5ndGgmJkguYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsYyk7KGM9XG4kYyhiLGEpKSYmYy5sZW5ndGgmJkgucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsYyl9LCRzZXQ6ZnVuY3Rpb24oYSxiLGQsZSl7dmFyIGY9UmModGhpcy4kJGVsZW1lbnRbMF0sYSksZz1hZFthXSxoPWE7Zj8odGhpcy4kJGVsZW1lbnQucHJvcChhLGIpLGU9Zik6ZyYmKHRoaXNbZ109YixoPWcpO3RoaXNbYV09YjtlP3RoaXMuJGF0dHJbYV09ZTooZT10aGlzLiRhdHRyW2FdKXx8KHRoaXMuJGF0dHJbYV09ZT1BYyhhLFwiLVwiKSk7Zj1vYSh0aGlzLiQkZWxlbWVudCk7aWYoXCJhXCI9PT1mJiZcImhyZWZcIj09PWF8fFwiaW1nXCI9PT1mJiZcInNyY1wiPT09YSl0aGlzW2FdPWI9bGEoYixcInNyY1wiPT09YSk7ZWxzZSBpZihcImltZ1wiPT09ZiYmXCJzcmNzZXRcIj09PWEpe2Zvcih2YXIgZj1cIlwiLGc9VChiKSxrPS8oXFxzK1xcZCt4XFxzKix8XFxzK1xcZCt3XFxzKix8XFxzKyx8LFxccyspLyxrPS9cXHMvLnRlc3QoZyk/azovKCwpLyxnPWcuc3BsaXQoayksaz1NYXRoLmZsb29yKGcubGVuZ3RoLzIpLGw9MDtsPGs7bCsrKXZhciBtPVxuMipsLGY9ZitsYShUKGdbbV0pLCEwKSxmPWYrKFwiIFwiK1QoZ1ttKzFdKSk7Zz1UKGdbMipsXSkuc3BsaXQoL1xccy8pO2YrPWxhKFQoZ1swXSksITApOzI9PT1nLmxlbmd0aCYmKGYrPVwiIFwiK1QoZ1sxXSkpO3RoaXNbYV09Yj1mfSExIT09ZCYmKG51bGw9PT1ifHxxKGIpP3RoaXMuJCRlbGVtZW50LnJlbW92ZUF0dHIoZSk6dGhpcy4kJGVsZW1lbnQuYXR0cihlLGIpKTsoYT10aGlzLiQkb2JzZXJ2ZXJzKSYmbihhW2hdLGZ1bmN0aW9uKGEpe3RyeXthKGIpfWNhdGNoKGQpe2MoZCl9fSl9LCRvYnNlcnZlOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcyxkPWMuJCRvYnNlcnZlcnN8fChjLiQkb2JzZXJ2ZXJzPWVhKCkpLGU9ZFthXXx8KGRbYV09W10pO2UucHVzaChiKTt2LiRldmFsQXN5bmMoZnVuY3Rpb24oKXtlLiQkaW50ZXJ8fCFjLmhhc093blByb3BlcnR5KGEpfHxxKGNbYV0pfHxiKGNbYV0pfSk7cmV0dXJuIGZ1bmN0aW9uKCl7YWIoZSxiKX19fTt2YXIgJD1iLnN0YXJ0U3ltYm9sKCksXG5kYT1iLmVuZFN5bWJvbCgpLGhhPVwie3tcIj09JHx8XCJ9fVwiPT1kYT9ZYTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC9cXHtcXHsvZywkKS5yZXBsYWNlKC99fS9nLGRhKX0saWE9L15uZ0F0dHJbQS1aXS8samE9L14oLispU3RhcnQkLztELiQkYWRkQmluZGluZ0luZm89bT9mdW5jdGlvbihhLGIpe3ZhciBjPWEuZGF0YShcIiRiaW5kaW5nXCIpfHxbXTtFKGIpP2M9Yy5jb25jYXQoYik6Yy5wdXNoKGIpO2EuZGF0YShcIiRiaW5kaW5nXCIsYyl9Ono7RC4kJGFkZEJpbmRpbmdDbGFzcz1tP2Z1bmN0aW9uKGEpe0koYSxcIm5nLWJpbmRpbmdcIil9Ono7RC4kJGFkZFNjb3BlSW5mbz1tP2Z1bmN0aW9uKGEsYixjLGQpe2EuZGF0YShjP2Q/XCIkaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZVwiOlwiJGlzb2xhdGVTY29wZVwiOlwiJHNjb3BlXCIsYil9Ono7RC4kJGFkZFNjb3BlQ2xhc3M9bT9mdW5jdGlvbihhLGIpe0koYSxiP1wibmctaXNvbGF0ZS1zY29wZVwiOlwibmctc2NvcGVcIil9Ono7cmV0dXJuIER9XX1mdW5jdGlvbiB2YShhKXtyZXR1cm4gZWIoYS5yZXBsYWNlKFljLFxuXCJcIikpfWZ1bmN0aW9uICRjKGEsYil7dmFyIGQ9XCJcIixjPWEuc3BsaXQoL1xccysvKSxlPWIuc3BsaXQoL1xccysvKSxmPTA7YTpmb3IoO2Y8Yy5sZW5ndGg7ZisrKXtmb3IodmFyIGc9Y1tmXSxoPTA7aDxlLmxlbmd0aDtoKyspaWYoZz09ZVtoXSljb250aW51ZSBhO2QrPSgwPGQubGVuZ3RoP1wiIFwiOlwiXCIpK2d9cmV0dXJuIGR9ZnVuY3Rpb24gWmMoYSl7YT1BKGEpO3ZhciBiPWEubGVuZ3RoO2lmKDE+PWIpcmV0dXJuIGE7Zm9yKDtiLS07KTg9PT1hW2JdLm5vZGVUeXBlJiZVZi5jYWxsKGEsYiwxKTtyZXR1cm4gYX1mdW5jdGlvbiBjZigpe3ZhciBhPXt9LGI9ITE7dGhpcy5yZWdpc3Rlcj1mdW5jdGlvbihiLGMpe1JhKGIsXCJjb250cm9sbGVyXCIpO0coYik/TihhLGIpOmFbYl09Y307dGhpcy5hbGxvd0dsb2JhbHM9ZnVuY3Rpb24oKXtiPSEwfTt0aGlzLiRnZXQ9W1wiJGluamVjdG9yXCIsXCIkd2luZG93XCIsZnVuY3Rpb24oZCxjKXtmdW5jdGlvbiBlKGEsYixjLGQpe2lmKCFhfHwhRyhhLiRzY29wZSkpdGhyb3cgTShcIiRjb250cm9sbGVyXCIpKFwibm9zY3BcIixcbmQsYik7YS4kc2NvcGVbYl09Y31yZXR1cm4gZnVuY3Rpb24oZixnLGgsayl7dmFyIGwsbSxyO2g9ITA9PT1oO2smJkYoaykmJihyPWspO2lmKEYoZikpe2s9Zi5tYXRjaChWYyk7aWYoIWspdGhyb3cgVmYoXCJjdHJsZm10XCIsZik7bT1rWzFdO3I9cnx8a1szXTtmPWEuaGFzT3duUHJvcGVydHkobSk/YVttXTpDYyhnLiRzY29wZSxtLCEwKXx8KGI/Q2MoYyxtLCEwKTp3KTtRYShmLG0sITApfWlmKGgpcmV0dXJuIGg9KEUoZik/ZltmLmxlbmd0aC0xXTpmKS5wcm90b3R5cGUsbD1PYmplY3QuY3JlYXRlKGh8fG51bGwpLHImJmUoZyxyLGwsbXx8Zi5uYW1lKSxOKGZ1bmN0aW9uKCl7dmFyIGE9ZC5pbnZva2UoZixsLGcsbSk7YSE9PWwmJihHKGEpfHxCKGEpKSYmKGw9YSxyJiZlKGcscixsLG18fGYubmFtZSkpO3JldHVybiBsfSx7aW5zdGFuY2U6bCxpZGVudGlmaWVyOnJ9KTtsPWQuaW5zdGFudGlhdGUoZixnLG0pO3ImJmUoZyxyLGwsbXx8Zi5uYW1lKTtyZXR1cm4gbH19XX1mdW5jdGlvbiBkZigpe3RoaXMuJGdldD1cbltcIiR3aW5kb3dcIixmdW5jdGlvbihhKXtyZXR1cm4gQShhLmRvY3VtZW50KX1dfWZ1bmN0aW9uIGVmKCl7dGhpcy4kZ2V0PVtcIiRsb2dcIixmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYixkKXthLmVycm9yLmFwcGx5KGEsYXJndW1lbnRzKX19XX1mdW5jdGlvbiAkYihhKXtyZXR1cm4gRyhhKT9kYShhKT9hLnRvSVNPU3RyaW5nKCk6Y2IoYSk6YX1mdW5jdGlvbiBrZigpe3RoaXMuJGdldD1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXtpZighYSlyZXR1cm5cIlwiO3ZhciBiPVtdO3BjKGEsZnVuY3Rpb24oYSxjKXtudWxsPT09YXx8cShhKXx8KEUoYSk/bihhLGZ1bmN0aW9uKGEsZCl7Yi5wdXNoKGlhKGMpK1wiPVwiK2lhKCRiKGEpKSl9KTpiLnB1c2goaWEoYykrXCI9XCIraWEoJGIoYSkpKSl9KTtyZXR1cm4gYi5qb2luKFwiJlwiKX19fWZ1bmN0aW9uIGxmKCl7dGhpcy4kZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSxlLGYpe251bGw9PT1hfHxxKGEpfHxcbihFKGEpP24oYSxmdW5jdGlvbihhLGMpe2IoYSxlK1wiW1wiKyhHKGEpP2M6XCJcIikrXCJdXCIpfSk6RyhhKSYmIWRhKGEpP3BjKGEsZnVuY3Rpb24oYSxjKXtiKGEsZSsoZj9cIlwiOlwiW1wiKStjKyhmP1wiXCI6XCJdXCIpKX0pOmQucHVzaChpYShlKStcIj1cIitpYSgkYihhKSkpKX1pZighYSlyZXR1cm5cIlwiO3ZhciBkPVtdO2IoYSxcIlwiLCEwKTtyZXR1cm4gZC5qb2luKFwiJlwiKX19fWZ1bmN0aW9uIGFjKGEsYil7aWYoRihhKSl7dmFyIGQ9YS5yZXBsYWNlKFdmLFwiXCIpLnRyaW0oKTtpZihkKXt2YXIgYz1iKFwiQ29udGVudC1UeXBlXCIpOyhjPWMmJjA9PT1jLmluZGV4T2YoYmQpKXx8KGM9KGM9ZC5tYXRjaChYZikpJiZZZltjWzBdXS50ZXN0KGQpKTtjJiYoYT12YyhkKSl9fXJldHVybiBhfWZ1bmN0aW9uIGNkKGEpe3ZhciBiPWVhKCksZDtGKGEpP24oYS5zcGxpdChcIlxcblwiKSxmdW5jdGlvbihhKXtkPWEuaW5kZXhPZihcIjpcIik7dmFyIGU9SyhUKGEuc3Vic3RyKDAsZCkpKTthPVQoYS5zdWJzdHIoZCsxKSk7ZSYmXG4oYltlXT1iW2VdP2JbZV0rXCIsIFwiK2E6YSl9KTpHKGEpJiZuKGEsZnVuY3Rpb24oYSxkKXt2YXIgZj1LKGQpLGc9VChhKTtmJiYoYltmXT1iW2ZdP2JbZl0rXCIsIFwiK2c6Zyl9KTtyZXR1cm4gYn1mdW5jdGlvbiBkZChhKXt2YXIgYjtyZXR1cm4gZnVuY3Rpb24oZCl7Ynx8KGI9Y2QoYSkpO3JldHVybiBkPyhkPWJbSyhkKV0sdm9pZCAwPT09ZCYmKGQ9bnVsbCksZCk6Yn19ZnVuY3Rpb24gZWQoYSxiLGQsYyl7aWYoQihjKSlyZXR1cm4gYyhhLGIsZCk7bihjLGZ1bmN0aW9uKGMpe2E9YyhhLGIsZCl9KTtyZXR1cm4gYX1mdW5jdGlvbiBqZigpe3ZhciBhPXRoaXMuZGVmYXVsdHM9e3RyYW5zZm9ybVJlc3BvbnNlOlthY10sdHJhbnNmb3JtUmVxdWVzdDpbZnVuY3Rpb24oYSl7cmV0dXJuIEcoYSkmJlwiW29iamVjdCBGaWxlXVwiIT09dGEuY2FsbChhKSYmXCJbb2JqZWN0IEJsb2JdXCIhPT10YS5jYWxsKGEpJiZcIltvYmplY3QgRm9ybURhdGFdXCIhPT10YS5jYWxsKGEpP2NiKGEpOmF9XSxoZWFkZXJzOntjb21tb246e0FjY2VwdDpcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKlwifSxcbnBvc3Q6aGEoYmMpLHB1dDpoYShiYykscGF0Y2g6aGEoYmMpfSx4c3JmQ29va2llTmFtZTpcIlhTUkYtVE9LRU5cIix4c3JmSGVhZGVyTmFtZTpcIlgtWFNSRi1UT0tFTlwiLHBhcmFtU2VyaWFsaXplcjpcIiRodHRwUGFyYW1TZXJpYWxpemVyXCJ9LGI9ITE7dGhpcy51c2VBcHBseUFzeW5jPWZ1bmN0aW9uKGEpe3JldHVybiB1KGEpPyhiPSEhYSx0aGlzKTpifTt2YXIgZD0hMDt0aGlzLnVzZUxlZ2FjeVByb21pc2VFeHRlbnNpb25zPWZ1bmN0aW9uKGEpe3JldHVybiB1KGEpPyhkPSEhYSx0aGlzKTpkfTt2YXIgYz10aGlzLmludGVyY2VwdG9ycz1bXTt0aGlzLiRnZXQ9W1wiJGh0dHBCYWNrZW5kXCIsXCIkJGNvb2tpZVJlYWRlclwiLFwiJGNhY2hlRmFjdG9yeVwiLFwiJHJvb3RTY29wZVwiLFwiJHFcIixcIiRpbmplY3RvclwiLGZ1bmN0aW9uKGUsZixnLGgsayxsKXtmdW5jdGlvbiBtKGIpe2Z1bmN0aW9uIGMoYSl7dmFyIGI9Tih7fSxhKTtiLmRhdGE9ZWQoYS5kYXRhLGEuaGVhZGVycyxhLnN0YXR1cyxmLnRyYW5zZm9ybVJlc3BvbnNlKTtcbmE9YS5zdGF0dXM7cmV0dXJuIDIwMDw9YSYmMzAwPmE/YjprLnJlamVjdChiKX1mdW5jdGlvbiBlKGEsYil7dmFyIGMsZD17fTtuKGEsZnVuY3Rpb24oYSxlKXtCKGEpPyhjPWEoYiksbnVsbCE9YyYmKGRbZV09YykpOmRbZV09YX0pO3JldHVybiBkfWlmKCEkLmlzT2JqZWN0KGIpKXRocm93IE0oXCIkaHR0cFwiKShcImJhZHJlcVwiLGIpO2lmKCFGKGIudXJsKSl0aHJvdyBNKFwiJGh0dHBcIikoXCJiYWRyZXFcIixiLnVybCk7dmFyIGY9Tih7bWV0aG9kOlwiZ2V0XCIsdHJhbnNmb3JtUmVxdWVzdDphLnRyYW5zZm9ybVJlcXVlc3QsdHJhbnNmb3JtUmVzcG9uc2U6YS50cmFuc2Zvcm1SZXNwb25zZSxwYXJhbVNlcmlhbGl6ZXI6YS5wYXJhbVNlcmlhbGl6ZXJ9LGIpO2YuaGVhZGVycz1mdW5jdGlvbihiKXt2YXIgYz1hLmhlYWRlcnMsZD1OKHt9LGIuaGVhZGVycyksZixnLGgsYz1OKHt9LGMuY29tbW9uLGNbSyhiLm1ldGhvZCldKTthOmZvcihmIGluIGMpe2c9SyhmKTtmb3IoaCBpbiBkKWlmKEsoaCk9PT1cbmcpY29udGludWUgYTtkW2ZdPWNbZl19cmV0dXJuIGUoZCxoYShiKSl9KGIpO2YubWV0aG9kPXRiKGYubWV0aG9kKTtmLnBhcmFtU2VyaWFsaXplcj1GKGYucGFyYW1TZXJpYWxpemVyKT9sLmdldChmLnBhcmFtU2VyaWFsaXplcik6Zi5wYXJhbVNlcmlhbGl6ZXI7dmFyIGc9W2Z1bmN0aW9uKGIpe3ZhciBkPWIuaGVhZGVycyxlPWVkKGIuZGF0YSxkZChkKSx3LGIudHJhbnNmb3JtUmVxdWVzdCk7cShlKSYmbihkLGZ1bmN0aW9uKGEsYil7XCJjb250ZW50LXR5cGVcIj09PUsoYikmJmRlbGV0ZSBkW2JdfSk7cShiLndpdGhDcmVkZW50aWFscykmJiFxKGEud2l0aENyZWRlbnRpYWxzKSYmKGIud2l0aENyZWRlbnRpYWxzPWEud2l0aENyZWRlbnRpYWxzKTtyZXR1cm4gcihiLGUpLnRoZW4oYyxjKX0sd10saD1rLndoZW4oZik7Zm9yKG4oeSxmdW5jdGlvbihhKXsoYS5yZXF1ZXN0fHxhLnJlcXVlc3RFcnJvcikmJmcudW5zaGlmdChhLnJlcXVlc3QsYS5yZXF1ZXN0RXJyb3IpOyhhLnJlc3BvbnNlfHxcbmEucmVzcG9uc2VFcnJvcikmJmcucHVzaChhLnJlc3BvbnNlLGEucmVzcG9uc2VFcnJvcil9KTtnLmxlbmd0aDspe2I9Zy5zaGlmdCgpO3ZhciBtPWcuc2hpZnQoKSxoPWgudGhlbihiLG0pfWQ/KGguc3VjY2Vzcz1mdW5jdGlvbihhKXtRYShhLFwiZm5cIik7aC50aGVuKGZ1bmN0aW9uKGIpe2EoYi5kYXRhLGIuc3RhdHVzLGIuaGVhZGVycyxmKX0pO3JldHVybiBofSxoLmVycm9yPWZ1bmN0aW9uKGEpe1FhKGEsXCJmblwiKTtoLnRoZW4obnVsbCxmdW5jdGlvbihiKXthKGIuZGF0YSxiLnN0YXR1cyxiLmhlYWRlcnMsZil9KTtyZXR1cm4gaH0pOihoLnN1Y2Nlc3M9ZmQoXCJzdWNjZXNzXCIpLGguZXJyb3I9ZmQoXCJlcnJvclwiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gcihjLGQpe2Z1bmN0aW9uIGcoYSxjLGQsZSl7ZnVuY3Rpb24gZigpe2woYyxhLGQsZSl9RCYmKDIwMDw9YSYmMzAwPmE/RC5wdXQoWCxbYSxjLGNkKGQpLGVdKTpELnJlbW92ZShYKSk7Yj9oLiRhcHBseUFzeW5jKGYpOihmKCksaC4kJHBoYXNlfHxcbmguJGFwcGx5KCkpfWZ1bmN0aW9uIGwoYSxiLGQsZSl7Yj0tMTw9Yj9iOjA7KDIwMDw9YiYmMzAwPmI/bi5yZXNvbHZlOm4ucmVqZWN0KSh7ZGF0YTphLHN0YXR1czpiLGhlYWRlcnM6ZGQoZCksY29uZmlnOmMsc3RhdHVzVGV4dDplfSl9ZnVuY3Rpb24gcihhKXtsKGEuZGF0YSxhLnN0YXR1cyxoYShhLmhlYWRlcnMoKSksYS5zdGF0dXNUZXh0KX1mdW5jdGlvbiB5KCl7dmFyIGE9bS5wZW5kaW5nUmVxdWVzdHMuaW5kZXhPZihjKTstMSE9PWEmJm0ucGVuZGluZ1JlcXVlc3RzLnNwbGljZShhLDEpfXZhciBuPWsuZGVmZXIoKSxJPW4ucHJvbWlzZSxELEwsTz1jLmhlYWRlcnMsWD10KGMudXJsLGMucGFyYW1TZXJpYWxpemVyKGMucGFyYW1zKSk7bS5wZW5kaW5nUmVxdWVzdHMucHVzaChjKTtJLnRoZW4oeSx5KTshYy5jYWNoZSYmIWEuY2FjaGV8fCExPT09Yy5jYWNoZXx8XCJHRVRcIiE9PWMubWV0aG9kJiZcIkpTT05QXCIhPT1jLm1ldGhvZHx8KEQ9RyhjLmNhY2hlKT9jLmNhY2hlOkcoYS5jYWNoZSk/XG5hLmNhY2hlOkMpO0QmJihMPUQuZ2V0KFgpLHUoTCk/TCYmQihMLnRoZW4pP0wudGhlbihyLHIpOkUoTCk/bChMWzFdLExbMF0saGEoTFsyXSksTFszXSk6bChMLDIwMCx7fSxcIk9LXCIpOkQucHV0KFgsSSkpO3EoTCkmJigoTD1nZChjLnVybCk/ZigpW2MueHNyZkNvb2tpZU5hbWV8fGEueHNyZkNvb2tpZU5hbWVdOncpJiYoT1tjLnhzcmZIZWFkZXJOYW1lfHxhLnhzcmZIZWFkZXJOYW1lXT1MKSxlKGMubWV0aG9kLFgsZCxnLE8sYy50aW1lb3V0LGMud2l0aENyZWRlbnRpYWxzLGMucmVzcG9uc2VUeXBlKSk7cmV0dXJuIEl9ZnVuY3Rpb24gdChhLGIpezA8Yi5sZW5ndGgmJihhKz0oLTE9PWEuaW5kZXhPZihcIj9cIik/XCI/XCI6XCImXCIpK2IpO3JldHVybiBhfXZhciBDPWcoXCIkaHR0cFwiKTthLnBhcmFtU2VyaWFsaXplcj1GKGEucGFyYW1TZXJpYWxpemVyKT9sLmdldChhLnBhcmFtU2VyaWFsaXplcik6YS5wYXJhbVNlcmlhbGl6ZXI7dmFyIHk9W107bihjLGZ1bmN0aW9uKGEpe3kudW5zaGlmdChGKGEpP1xubC5nZXQoYSk6bC5pbnZva2UoYSkpfSk7bS5wZW5kaW5nUmVxdWVzdHM9W107KGZ1bmN0aW9uKGEpe24oYXJndW1lbnRzLGZ1bmN0aW9uKGEpe21bYV09ZnVuY3Rpb24oYixjKXtyZXR1cm4gbShOKHt9LGN8fHt9LHttZXRob2Q6YSx1cmw6Yn0pKX19KX0pKFwiZ2V0XCIsXCJkZWxldGVcIixcImhlYWRcIixcImpzb25wXCIpOyhmdW5jdGlvbihhKXtuKGFyZ3VtZW50cyxmdW5jdGlvbihhKXttW2FdPWZ1bmN0aW9uKGIsYyxkKXtyZXR1cm4gbShOKHt9LGR8fHt9LHttZXRob2Q6YSx1cmw6YixkYXRhOmN9KSl9fSl9KShcInBvc3RcIixcInB1dFwiLFwicGF0Y2hcIik7bS5kZWZhdWx0cz1hO3JldHVybiBtfV19ZnVuY3Rpb24gbmYoKXt0aGlzLiRnZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFMuWE1MSHR0cFJlcXVlc3R9fX1mdW5jdGlvbiBtZigpe3RoaXMuJGdldD1bXCIkYnJvd3NlclwiLFwiJHdpbmRvd1wiLFwiJGRvY3VtZW50XCIsXCIkeGhyRmFjdG9yeVwiLGZ1bmN0aW9uKGEsYixkLFxuYyl7cmV0dXJuIFpmKGEsYyxhLmRlZmVyLGIuYW5ndWxhci5jYWxsYmFja3MsZFswXSl9XX1mdW5jdGlvbiBaZihhLGIsZCxjLGUpe2Z1bmN0aW9uIGYoYSxiLGQpe3ZhciBmPWUuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxtPW51bGw7Zi50eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI7Zi5zcmM9YTtmLmFzeW5jPSEwO209ZnVuY3Rpb24oYSl7Zi5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLG0sITEpO2YucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsbSwhMSk7ZS5ib2R5LnJlbW92ZUNoaWxkKGYpO2Y9bnVsbDt2YXIgZz0tMSxDPVwidW5rbm93blwiO2EmJihcImxvYWRcIiE9PWEudHlwZXx8Y1tiXS5jYWxsZWR8fChhPXt0eXBlOlwiZXJyb3JcIn0pLEM9YS50eXBlLGc9XCJlcnJvclwiPT09YS50eXBlPzQwNDoyMDApO2QmJmQoZyxDKX07Zi5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLG0sITEpO2YuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsbSwhMSk7ZS5ib2R5LmFwcGVuZENoaWxkKGYpO3JldHVybiBtfVxucmV0dXJuIGZ1bmN0aW9uKGUsaCxrLGwsbSxyLHQsQyl7ZnVuY3Rpb24geSgpe3gmJngoKTt2JiZ2LmFib3J0KCl9ZnVuY3Rpb24gUihiLGMsZSxmLGcpe3UoSCkmJmQuY2FuY2VsKEgpO3g9dj1udWxsO2IoYyxlLGYsZyk7YS4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KHopfWEuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCgpO2g9aHx8YS51cmwoKTtpZihcImpzb25wXCI9PUsoZSkpe3ZhciBwPVwiX1wiKyhjLmNvdW50ZXIrKykudG9TdHJpbmcoMzYpO2NbcF09ZnVuY3Rpb24oYSl7Y1twXS5kYXRhPWE7Y1twXS5jYWxsZWQ9ITB9O3ZhciB4PWYoaC5yZXBsYWNlKFwiSlNPTl9DQUxMQkFDS1wiLFwiYW5ndWxhci5jYWxsYmFja3MuXCIrcCkscCxmdW5jdGlvbihhLGIpe1IobCxhLGNbcF0uZGF0YSxcIlwiLGIpO2NbcF09en0pfWVsc2V7dmFyIHY9YihlLGgpO3Yub3BlbihlLGgsITApO24obSxmdW5jdGlvbihhLGIpe3UoYSkmJnYuc2V0UmVxdWVzdEhlYWRlcihiLGEpfSk7di5vbmxvYWQ9XG5mdW5jdGlvbigpe3ZhciBhPXYuc3RhdHVzVGV4dHx8XCJcIixiPVwicmVzcG9uc2VcImluIHY/di5yZXNwb25zZTp2LnJlc3BvbnNlVGV4dCxjPTEyMjM9PT12LnN0YXR1cz8yMDQ6di5zdGF0dXM7MD09PWMmJihjPWI/MjAwOlwiZmlsZVwiPT14YShoKS5wcm90b2NvbD80MDQ6MCk7UihsLGMsYix2LmdldEFsbFJlc3BvbnNlSGVhZGVycygpLGEpfTtlPWZ1bmN0aW9uKCl7UihsLC0xLG51bGwsbnVsbCxcIlwiKX07di5vbmVycm9yPWU7di5vbmFib3J0PWU7dCYmKHYud2l0aENyZWRlbnRpYWxzPSEwKTtpZihDKXRyeXt2LnJlc3BvbnNlVHlwZT1DfWNhdGNoKFkpe2lmKFwianNvblwiIT09Qyl0aHJvdyBZO312LnNlbmQocShrKT9udWxsOmspfWlmKDA8cil2YXIgSD1kKHkscik7ZWxzZSByJiZCKHIudGhlbikmJnIudGhlbih5KX19ZnVuY3Rpb24gZ2YoKXt2YXIgYT1cInt7XCIsYj1cIn19XCI7dGhpcy5zdGFydFN5bWJvbD1mdW5jdGlvbihiKXtyZXR1cm4gYj8oYT1iLHRoaXMpOmF9O3RoaXMuZW5kU3ltYm9sPVxuZnVuY3Rpb24oYSl7cmV0dXJuIGE/KGI9YSx0aGlzKTpifTt0aGlzLiRnZXQ9W1wiJHBhcnNlXCIsXCIkZXhjZXB0aW9uSGFuZGxlclwiLFwiJHNjZVwiLGZ1bmN0aW9uKGQsYyxlKXtmdW5jdGlvbiBmKGEpe3JldHVyblwiXFxcXFxcXFxcXFxcXCIrYX1mdW5jdGlvbiBnKGMpe3JldHVybiBjLnJlcGxhY2UobSxhKS5yZXBsYWNlKHIsYil9ZnVuY3Rpb24gaChmLGgsbSxyKXtmdW5jdGlvbiBwKGEpe3RyeXt2YXIgYj1hO2E9bT9lLmdldFRydXN0ZWQobSxiKTplLnZhbHVlT2YoYik7dmFyIGQ7aWYociYmIXUoYSkpZD1hO2Vsc2UgaWYobnVsbD09YSlkPVwiXCI7ZWxzZXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJzdHJpbmdcIjpicmVhaztjYXNlIFwibnVtYmVyXCI6YT1cIlwiK2E7YnJlYWs7ZGVmYXVsdDphPWNiKGEpfWQ9YX1yZXR1cm4gZH1jYXRjaChnKXtjKElhLmludGVycihmLGcpKX19cj0hIXI7Zm9yKHZhciB4LHYsbj0wLEg9W10scz1bXSxJPWYubGVuZ3RoLEQ9W10sTD1bXTtuPEk7KWlmKC0xIT0oeD1mLmluZGV4T2YoYSxcbm4pKSYmLTEhPSh2PWYuaW5kZXhPZihiLHgraykpKW4hPT14JiZELnB1c2goZyhmLnN1YnN0cmluZyhuLHgpKSksbj1mLnN1YnN0cmluZyh4K2ssdiksSC5wdXNoKG4pLHMucHVzaChkKG4scCkpLG49ditsLEwucHVzaChELmxlbmd0aCksRC5wdXNoKFwiXCIpO2Vsc2V7biE9PUkmJkQucHVzaChnKGYuc3Vic3RyaW5nKG4pKSk7YnJlYWt9bSYmMTxELmxlbmd0aCYmSWEudGhyb3dOb2NvbmNhdChmKTtpZighaHx8SC5sZW5ndGgpe3ZhciBPPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wLGM9SC5sZW5ndGg7YjxjO2IrKyl7aWYociYmcShhW2JdKSlyZXR1cm47RFtMW2JdXT1hW2JdfXJldHVybiBELmpvaW4oXCJcIil9O3JldHVybiBOKGZ1bmN0aW9uKGEpe3ZhciBiPTAsZD1ILmxlbmd0aCxlPUFycmF5KGQpO3RyeXtmb3IoO2I8ZDtiKyspZVtiXT1zW2JdKGEpO3JldHVybiBPKGUpfWNhdGNoKGcpe2MoSWEuaW50ZXJyKGYsZykpfX0se2V4cDpmLGV4cHJlc3Npb25zOkgsJCR3YXRjaERlbGVnYXRlOmZ1bmN0aW9uKGEsXG5iKXt2YXIgYztyZXR1cm4gYS4kd2F0Y2hHcm91cChzLGZ1bmN0aW9uKGQsZSl7dmFyIGY9TyhkKTtCKGIpJiZiLmNhbGwodGhpcyxmLGQhPT1lP2M6ZixhKTtjPWZ9KX19KX19dmFyIGs9YS5sZW5ndGgsbD1iLmxlbmd0aCxtPW5ldyBSZWdFeHAoYS5yZXBsYWNlKC8uL2csZiksXCJnXCIpLHI9bmV3IFJlZ0V4cChiLnJlcGxhY2UoLy4vZyxmKSxcImdcIik7aC5zdGFydFN5bWJvbD1mdW5jdGlvbigpe3JldHVybiBhfTtoLmVuZFN5bWJvbD1mdW5jdGlvbigpe3JldHVybiBifTtyZXR1cm4gaH1dfWZ1bmN0aW9uIGhmKCl7dGhpcy4kZ2V0PVtcIiRyb290U2NvcGVcIixcIiR3aW5kb3dcIixcIiRxXCIsXCIkJHFcIixmdW5jdGlvbihhLGIsZCxjKXtmdW5jdGlvbiBlKGUsaCxrLGwpe3ZhciBtPTQ8YXJndW1lbnRzLmxlbmd0aCxyPW0/c2EuY2FsbChhcmd1bWVudHMsNCk6W10sdD1iLnNldEludGVydmFsLEM9Yi5jbGVhckludGVydmFsLHk9MCxuPXUobCkmJiFsLHA9KG4/YzpkKS5kZWZlcigpLHg9cC5wcm9taXNlO1xuaz11KGspP2s6MDt4LnRoZW4obnVsbCxudWxsLG0/ZnVuY3Rpb24oKXtlLmFwcGx5KG51bGwscil9OmUpO3guJCRpbnRlcnZhbElkPXQoZnVuY3Rpb24oKXtwLm5vdGlmeSh5KyspOzA8ayYmeT49ayYmKHAucmVzb2x2ZSh5KSxDKHguJCRpbnRlcnZhbElkKSxkZWxldGUgZlt4LiQkaW50ZXJ2YWxJZF0pO258fGEuJGFwcGx5KCl9LGgpO2ZbeC4kJGludGVydmFsSWRdPXA7cmV0dXJuIHh9dmFyIGY9e307ZS5jYW5jZWw9ZnVuY3Rpb24oYSl7cmV0dXJuIGEmJmEuJCRpbnRlcnZhbElkIGluIGY/KGZbYS4kJGludGVydmFsSWRdLnJlamVjdChcImNhbmNlbGVkXCIpLGIuY2xlYXJJbnRlcnZhbChhLiQkaW50ZXJ2YWxJZCksZGVsZXRlIGZbYS4kJGludGVydmFsSWRdLCEwKTohMX07cmV0dXJuIGV9XX1mdW5jdGlvbiBjYyhhKXthPWEuc3BsaXQoXCIvXCIpO2Zvcih2YXIgYj1hLmxlbmd0aDtiLS07KWFbYl09cGIoYVtiXSk7cmV0dXJuIGEuam9pbihcIi9cIil9ZnVuY3Rpb24gaGQoYSxiKXt2YXIgZD1cbnhhKGEpO2IuJCRwcm90b2NvbD1kLnByb3RvY29sO2IuJCRob3N0PWQuaG9zdG5hbWU7Yi4kJHBvcnQ9WihkLnBvcnQpfHwkZltkLnByb3RvY29sXXx8bnVsbH1mdW5jdGlvbiBpZChhLGIpe3ZhciBkPVwiL1wiIT09YS5jaGFyQXQoMCk7ZCYmKGE9XCIvXCIrYSk7dmFyIGM9eGEoYSk7Yi4kJHBhdGg9ZGVjb2RlVVJJQ29tcG9uZW50KGQmJlwiL1wiPT09Yy5wYXRobmFtZS5jaGFyQXQoMCk/Yy5wYXRobmFtZS5zdWJzdHJpbmcoMSk6Yy5wYXRobmFtZSk7Yi4kJHNlYXJjaD15YyhjLnNlYXJjaCk7Yi4kJGhhc2g9ZGVjb2RlVVJJQ29tcG9uZW50KGMuaGFzaCk7Yi4kJHBhdGgmJlwiL1wiIT1iLiQkcGF0aC5jaGFyQXQoMCkmJihiLiQkcGF0aD1cIi9cIitiLiQkcGF0aCl9ZnVuY3Rpb24gcWEoYSxiKXtpZigwPT09Yi5pbmRleE9mKGEpKXJldHVybiBiLnN1YnN0cihhLmxlbmd0aCl9ZnVuY3Rpb24gR2EoYSl7dmFyIGI9YS5pbmRleE9mKFwiI1wiKTtyZXR1cm4tMT09Yj9hOmEuc3Vic3RyKDAsYil9ZnVuY3Rpb24gamIoYSl7cmV0dXJuIGEucmVwbGFjZSgvKCMuKyl8IyQvLFxuXCIkMVwiKX1mdW5jdGlvbiBkYyhhLGIsZCl7dGhpcy4kJGh0bWw1PSEwO2Q9ZHx8XCJcIjtoZChhLHRoaXMpO3RoaXMuJCRwYXJzZT1mdW5jdGlvbihhKXt2YXIgZD1xYShiLGEpO2lmKCFGKGQpKXRocm93IEZiKFwiaXB0aHByZnhcIixhLGIpO2lkKGQsdGhpcyk7dGhpcy4kJHBhdGh8fCh0aGlzLiQkcGF0aD1cIi9cIik7dGhpcy4kJGNvbXBvc2UoKX07dGhpcy4kJGNvbXBvc2U9ZnVuY3Rpb24oKXt2YXIgYT1TYih0aGlzLiQkc2VhcmNoKSxkPXRoaXMuJCRoYXNoP1wiI1wiK3BiKHRoaXMuJCRoYXNoKTpcIlwiO3RoaXMuJCR1cmw9Y2ModGhpcy4kJHBhdGgpKyhhP1wiP1wiK2E6XCJcIikrZDt0aGlzLiQkYWJzVXJsPWIrdGhpcy4kJHVybC5zdWJzdHIoMSl9O3RoaXMuJCRwYXJzZUxpbmtVcmw9ZnVuY3Rpb24oYyxlKXtpZihlJiZcIiNcIj09PWVbMF0pcmV0dXJuIHRoaXMuaGFzaChlLnNsaWNlKDEpKSwhMDt2YXIgZixnO3UoZj1xYShhLGMpKT8oZz1mLGc9dShmPXFhKGQsZikpP2IrKHFhKFwiL1wiLGYpfHxmKTpcbmErZyk6dShmPXFhKGIsYykpP2c9YitmOmI9PWMrXCIvXCImJihnPWIpO2cmJnRoaXMuJCRwYXJzZShnKTtyZXR1cm4hIWd9fWZ1bmN0aW9uIGVjKGEsYixkKXtoZChhLHRoaXMpO3RoaXMuJCRwYXJzZT1mdW5jdGlvbihjKXt2YXIgZT1xYShhLGMpfHxxYShiLGMpLGY7cShlKXx8XCIjXCIhPT1lLmNoYXJBdCgwKT90aGlzLiQkaHRtbDU/Zj1lOihmPVwiXCIscShlKSYmKGE9Yyx0aGlzLnJlcGxhY2UoKSkpOihmPXFhKGQsZSkscShmKSYmKGY9ZSkpO2lkKGYsdGhpcyk7Yz10aGlzLiQkcGF0aDt2YXIgZT1hLGc9L15cXC9bQS1aXTooXFwvLiopLzswPT09Zi5pbmRleE9mKGUpJiYoZj1mLnJlcGxhY2UoZSxcIlwiKSk7Zy5leGVjKGYpfHwoYz0oZj1nLmV4ZWMoYykpP2ZbMV06Yyk7dGhpcy4kJHBhdGg9Yzt0aGlzLiQkY29tcG9zZSgpfTt0aGlzLiQkY29tcG9zZT1mdW5jdGlvbigpe3ZhciBiPVNiKHRoaXMuJCRzZWFyY2gpLGU9dGhpcy4kJGhhc2g/XCIjXCIrcGIodGhpcy4kJGhhc2gpOlwiXCI7dGhpcy4kJHVybD1cbmNjKHRoaXMuJCRwYXRoKSsoYj9cIj9cIitiOlwiXCIpK2U7dGhpcy4kJGFic1VybD1hKyh0aGlzLiQkdXJsP2QrdGhpcy4kJHVybDpcIlwiKX07dGhpcy4kJHBhcnNlTGlua1VybD1mdW5jdGlvbihiLGQpe3JldHVybiBHYShhKT09R2EoYik/KHRoaXMuJCRwYXJzZShiKSwhMCk6ITF9fWZ1bmN0aW9uIGpkKGEsYixkKXt0aGlzLiQkaHRtbDU9ITA7ZWMuYXBwbHkodGhpcyxhcmd1bWVudHMpO3RoaXMuJCRwYXJzZUxpbmtVcmw9ZnVuY3Rpb24oYyxlKXtpZihlJiZcIiNcIj09PWVbMF0pcmV0dXJuIHRoaXMuaGFzaChlLnNsaWNlKDEpKSwhMDt2YXIgZixnO2E9PUdhKGMpP2Y9YzooZz1xYShiLGMpKT9mPWErZCtnOmI9PT1jK1wiL1wiJiYoZj1iKTtmJiZ0aGlzLiQkcGFyc2UoZik7cmV0dXJuISFmfTt0aGlzLiQkY29tcG9zZT1mdW5jdGlvbigpe3ZhciBiPVNiKHRoaXMuJCRzZWFyY2gpLGU9dGhpcy4kJGhhc2g/XCIjXCIrcGIodGhpcy4kJGhhc2gpOlwiXCI7dGhpcy4kJHVybD1jYyh0aGlzLiQkcGF0aCkrXG4oYj9cIj9cIitiOlwiXCIpK2U7dGhpcy4kJGFic1VybD1hK2QrdGhpcy4kJHVybH19ZnVuY3Rpb24gR2IoYSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbYV19fWZ1bmN0aW9uIGtkKGEsYil7cmV0dXJuIGZ1bmN0aW9uKGQpe2lmKHEoZCkpcmV0dXJuIHRoaXNbYV07dGhpc1thXT1iKGQpO3RoaXMuJCRjb21wb3NlKCk7cmV0dXJuIHRoaXN9fWZ1bmN0aW9uIG9mKCl7dmFyIGE9XCJcIixiPXtlbmFibGVkOiExLHJlcXVpcmVCYXNlOiEwLHJld3JpdGVMaW5rczohMH07dGhpcy5oYXNoUHJlZml4PWZ1bmN0aW9uKGIpe3JldHVybiB1KGIpPyhhPWIsdGhpcyk6YX07dGhpcy5odG1sNU1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuICRhKGEpPyhiLmVuYWJsZWQ9YSx0aGlzKTpHKGEpPygkYShhLmVuYWJsZWQpJiYoYi5lbmFibGVkPWEuZW5hYmxlZCksJGEoYS5yZXF1aXJlQmFzZSkmJihiLnJlcXVpcmVCYXNlPWEucmVxdWlyZUJhc2UpLCRhKGEucmV3cml0ZUxpbmtzKSYmKGIucmV3cml0ZUxpbmtzPVxuYS5yZXdyaXRlTGlua3MpLHRoaXMpOmJ9O3RoaXMuJGdldD1bXCIkcm9vdFNjb3BlXCIsXCIkYnJvd3NlclwiLFwiJHNuaWZmZXJcIixcIiRyb290RWxlbWVudFwiLFwiJHdpbmRvd1wiLGZ1bmN0aW9uKGQsYyxlLGYsZyl7ZnVuY3Rpb24gaChhLGIsZCl7dmFyIGU9bC51cmwoKSxmPWwuJCRzdGF0ZTt0cnl7Yy51cmwoYSxiLGQpLGwuJCRzdGF0ZT1jLnN0YXRlKCl9Y2F0Y2goZyl7dGhyb3cgbC51cmwoZSksbC4kJHN0YXRlPWYsZzt9fWZ1bmN0aW9uIGsoYSxiKXtkLiRicm9hZGNhc3QoXCIkbG9jYXRpb25DaGFuZ2VTdWNjZXNzXCIsbC5hYnNVcmwoKSxhLGwuJCRzdGF0ZSxiKX12YXIgbCxtO209Yy5iYXNlSHJlZigpO3ZhciByPWMudXJsKCksdDtpZihiLmVuYWJsZWQpe2lmKCFtJiZiLnJlcXVpcmVCYXNlKXRocm93IEZiKFwibm9iYXNlXCIpO3Q9ci5zdWJzdHJpbmcoMCxyLmluZGV4T2YoXCIvXCIsci5pbmRleE9mKFwiLy9cIikrMikpKyhtfHxcIi9cIik7bT1lLmhpc3Rvcnk/ZGM6amR9ZWxzZSB0PUdhKHIpLG09XG5lYzt2YXIgQz10LnN1YnN0cigwLEdhKHQpLmxhc3RJbmRleE9mKFwiL1wiKSsxKTtsPW5ldyBtKHQsQyxcIiNcIithKTtsLiQkcGFyc2VMaW5rVXJsKHIscik7bC4kJHN0YXRlPWMuc3RhdGUoKTt2YXIgeT0vXlxccyooamF2YXNjcmlwdHxtYWlsdG8pOi9pO2Yub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2lmKGIucmV3cml0ZUxpbmtzJiYhYS5jdHJsS2V5JiYhYS5tZXRhS2V5JiYhYS5zaGlmdEtleSYmMiE9YS53aGljaCYmMiE9YS5idXR0b24pe2Zvcih2YXIgZT1BKGEudGFyZ2V0KTtcImFcIiE9PW9hKGVbMF0pOylpZihlWzBdPT09ZlswXXx8IShlPWUucGFyZW50KCkpWzBdKXJldHVybjt2YXIgaD1lLnByb3AoXCJocmVmXCIpLGs9ZS5hdHRyKFwiaHJlZlwiKXx8ZS5hdHRyKFwieGxpbms6aHJlZlwiKTtHKGgpJiZcIltvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddXCI9PT1oLnRvU3RyaW5nKCkmJihoPXhhKGguYW5pbVZhbCkuaHJlZik7eS50ZXN0KGgpfHwhaHx8ZS5hdHRyKFwidGFyZ2V0XCIpfHxhLmlzRGVmYXVsdFByZXZlbnRlZCgpfHxcbiFsLiQkcGFyc2VMaW5rVXJsKGgsayl8fChhLnByZXZlbnREZWZhdWx0KCksbC5hYnNVcmwoKSE9Yy51cmwoKSYmKGQuJGFwcGx5KCksZy5hbmd1bGFyW1wiZmYtNjg0MjA4LXByZXZlbnREZWZhdWx0XCJdPSEwKSl9fSk7amIobC5hYnNVcmwoKSkhPWpiKHIpJiZjLnVybChsLmFic1VybCgpLCEwKTt2YXIgbj0hMDtjLm9uVXJsQ2hhbmdlKGZ1bmN0aW9uKGEsYil7cShxYShDLGEpKT9nLmxvY2F0aW9uLmhyZWY9YTooZC4kZXZhbEFzeW5jKGZ1bmN0aW9uKCl7dmFyIGM9bC5hYnNVcmwoKSxlPWwuJCRzdGF0ZSxmO2E9amIoYSk7bC4kJHBhcnNlKGEpO2wuJCRzdGF0ZT1iO2Y9ZC4kYnJvYWRjYXN0KFwiJGxvY2F0aW9uQ2hhbmdlU3RhcnRcIixhLGMsYixlKS5kZWZhdWx0UHJldmVudGVkO2wuYWJzVXJsKCk9PT1hJiYoZj8obC4kJHBhcnNlKGMpLGwuJCRzdGF0ZT1lLGgoYywhMSxlKSk6KG49ITEsayhjLGUpKSl9KSxkLiQkcGhhc2V8fGQuJGRpZ2VzdCgpKX0pO2QuJHdhdGNoKGZ1bmN0aW9uKCl7dmFyIGE9XG5qYihjLnVybCgpKSxiPWpiKGwuYWJzVXJsKCkpLGY9Yy5zdGF0ZSgpLGc9bC4kJHJlcGxhY2UsbT1hIT09Ynx8bC4kJGh0bWw1JiZlLmhpc3RvcnkmJmYhPT1sLiQkc3RhdGU7aWYobnx8bSluPSExLGQuJGV2YWxBc3luYyhmdW5jdGlvbigpe3ZhciBiPWwuYWJzVXJsKCksYz1kLiRicm9hZGNhc3QoXCIkbG9jYXRpb25DaGFuZ2VTdGFydFwiLGIsYSxsLiQkc3RhdGUsZikuZGVmYXVsdFByZXZlbnRlZDtsLmFic1VybCgpPT09YiYmKGM/KGwuJCRwYXJzZShhKSxsLiQkc3RhdGU9Zik6KG0mJmgoYixnLGY9PT1sLiQkc3RhdGU/bnVsbDpsLiQkc3RhdGUpLGsoYSxmKSkpfSk7bC4kJHJlcGxhY2U9ITF9KTtyZXR1cm4gbH1dfWZ1bmN0aW9uIHBmKCl7dmFyIGE9ITAsYj10aGlzO3RoaXMuZGVidWdFbmFibGVkPWZ1bmN0aW9uKGIpe3JldHVybiB1KGIpPyhhPWIsdGhpcyk6YX07dGhpcy4kZ2V0PVtcIiR3aW5kb3dcIixmdW5jdGlvbihkKXtmdW5jdGlvbiBjKGEpe2EgaW5zdGFuY2VvZiBFcnJvciYmXG4oYS5zdGFjaz9hPWEubWVzc2FnZSYmLTE9PT1hLnN0YWNrLmluZGV4T2YoYS5tZXNzYWdlKT9cIkVycm9yOiBcIithLm1lc3NhZ2UrXCJcXG5cIithLnN0YWNrOmEuc3RhY2s6YS5zb3VyY2VVUkwmJihhPWEubWVzc2FnZStcIlxcblwiK2Euc291cmNlVVJMK1wiOlwiK2EubGluZSkpO3JldHVybiBhfWZ1bmN0aW9uIGUoYSl7dmFyIGI9ZC5jb25zb2xlfHx7fSxlPWJbYV18fGIubG9nfHx6O2E9ITE7dHJ5e2E9ISFlLmFwcGx5fWNhdGNoKGspe31yZXR1cm4gYT9mdW5jdGlvbigpe3ZhciBhPVtdO24oYXJndW1lbnRzLGZ1bmN0aW9uKGIpe2EucHVzaChjKGIpKX0pO3JldHVybiBlLmFwcGx5KGIsYSl9OmZ1bmN0aW9uKGEsYil7ZShhLG51bGw9PWI/XCJcIjpiKX19cmV0dXJue2xvZzplKFwibG9nXCIpLGluZm86ZShcImluZm9cIiksd2FybjplKFwid2FyblwiKSxlcnJvcjplKFwiZXJyb3JcIiksZGVidWc6ZnVuY3Rpb24oKXt2YXIgYz1lKFwiZGVidWdcIik7cmV0dXJuIGZ1bmN0aW9uKCl7YSYmYy5hcHBseShiLGFyZ3VtZW50cyl9fSgpfX1dfVxuZnVuY3Rpb24gVmEoYSxiKXtpZihcIl9fZGVmaW5lR2V0dGVyX19cIj09PWF8fFwiX19kZWZpbmVTZXR0ZXJfX1wiPT09YXx8XCJfX2xvb2t1cEdldHRlcl9fXCI9PT1hfHxcIl9fbG9va3VwU2V0dGVyX19cIj09PWF8fFwiX19wcm90b19fXCI9PT1hKXRocm93IGFhKFwiaXNlY2ZsZFwiLGIpO3JldHVybiBhfWZ1bmN0aW9uIGxkKGEsYil7YSs9XCJcIjtpZighRihhKSl0aHJvdyBhYShcImlzZWNjc3RcIixiKTtyZXR1cm4gYX1mdW5jdGlvbiB5YShhLGIpe2lmKGEpe2lmKGEuY29uc3RydWN0b3I9PT1hKXRocm93IGFhKFwiaXNlY2ZuXCIsYik7aWYoYS53aW5kb3c9PT1hKXRocm93IGFhKFwiaXNlY3dpbmRvd1wiLGIpO2lmKGEuY2hpbGRyZW4mJihhLm5vZGVOYW1lfHxhLnByb3AmJmEuYXR0ciYmYS5maW5kKSl0aHJvdyBhYShcImlzZWNkb21cIixiKTtpZihhPT09T2JqZWN0KXRocm93IGFhKFwiaXNlY29ialwiLGIpO31yZXR1cm4gYX1mdW5jdGlvbiBtZChhLGIpe2lmKGEpe2lmKGEuY29uc3RydWN0b3I9PT1hKXRocm93IGFhKFwiaXNlY2ZuXCIsXG5iKTtpZihhPT09YWd8fGE9PT1iZ3x8YT09PWNnKXRocm93IGFhKFwiaXNlY2ZmXCIsYik7fX1mdW5jdGlvbiBuZChhLGIpe2lmKGEmJihhPT09KDApLmNvbnN0cnVjdG9yfHxhPT09KCExKS5jb25zdHJ1Y3Rvcnx8YT09PVwiXCIuY29uc3RydWN0b3J8fGE9PT17fS5jb25zdHJ1Y3Rvcnx8YT09PVtdLmNvbnN0cnVjdG9yfHxhPT09RnVuY3Rpb24uY29uc3RydWN0b3IpKXRocm93IGFhKFwiaXNlY2FmXCIsYik7fWZ1bmN0aW9uIGRnKGEsYil7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhP2E6Yn1mdW5jdGlvbiBvZChhLGIpe3JldHVyblwidW5kZWZpbmVkXCI9PT10eXBlb2YgYT9iOlwidW5kZWZpbmVkXCI9PT10eXBlb2YgYj9hOmErYn1mdW5jdGlvbiBWKGEsYil7dmFyIGQsYztzd2l0Y2goYS50eXBlKXtjYXNlIHMuUHJvZ3JhbTpkPSEwO24oYS5ib2R5LGZ1bmN0aW9uKGEpe1YoYS5leHByZXNzaW9uLGIpO2Q9ZCYmYS5leHByZXNzaW9uLmNvbnN0YW50fSk7YS5jb25zdGFudD1kO2JyZWFrO2Nhc2Ugcy5MaXRlcmFsOmEuY29uc3RhbnQ9XG4hMDthLnRvV2F0Y2g9W107YnJlYWs7Y2FzZSBzLlVuYXJ5RXhwcmVzc2lvbjpWKGEuYXJndW1lbnQsYik7YS5jb25zdGFudD1hLmFyZ3VtZW50LmNvbnN0YW50O2EudG9XYXRjaD1hLmFyZ3VtZW50LnRvV2F0Y2g7YnJlYWs7Y2FzZSBzLkJpbmFyeUV4cHJlc3Npb246VihhLmxlZnQsYik7VihhLnJpZ2h0LGIpO2EuY29uc3RhbnQ9YS5sZWZ0LmNvbnN0YW50JiZhLnJpZ2h0LmNvbnN0YW50O2EudG9XYXRjaD1hLmxlZnQudG9XYXRjaC5jb25jYXQoYS5yaWdodC50b1dhdGNoKTticmVhaztjYXNlIHMuTG9naWNhbEV4cHJlc3Npb246VihhLmxlZnQsYik7VihhLnJpZ2h0LGIpO2EuY29uc3RhbnQ9YS5sZWZ0LmNvbnN0YW50JiZhLnJpZ2h0LmNvbnN0YW50O2EudG9XYXRjaD1hLmNvbnN0YW50P1tdOlthXTticmVhaztjYXNlIHMuQ29uZGl0aW9uYWxFeHByZXNzaW9uOlYoYS50ZXN0LGIpO1YoYS5hbHRlcm5hdGUsYik7VihhLmNvbnNlcXVlbnQsYik7YS5jb25zdGFudD1hLnRlc3QuY29uc3RhbnQmJlxuYS5hbHRlcm5hdGUuY29uc3RhbnQmJmEuY29uc2VxdWVudC5jb25zdGFudDthLnRvV2F0Y2g9YS5jb25zdGFudD9bXTpbYV07YnJlYWs7Y2FzZSBzLklkZW50aWZpZXI6YS5jb25zdGFudD0hMTthLnRvV2F0Y2g9W2FdO2JyZWFrO2Nhc2Ugcy5NZW1iZXJFeHByZXNzaW9uOlYoYS5vYmplY3QsYik7YS5jb21wdXRlZCYmVihhLnByb3BlcnR5LGIpO2EuY29uc3RhbnQ9YS5vYmplY3QuY29uc3RhbnQmJighYS5jb21wdXRlZHx8YS5wcm9wZXJ0eS5jb25zdGFudCk7YS50b1dhdGNoPVthXTticmVhaztjYXNlIHMuQ2FsbEV4cHJlc3Npb246ZD1hLmZpbHRlcj8hYihhLmNhbGxlZS5uYW1lKS4kc3RhdGVmdWw6ITE7Yz1bXTtuKGEuYXJndW1lbnRzLGZ1bmN0aW9uKGEpe1YoYSxiKTtkPWQmJmEuY29uc3RhbnQ7YS5jb25zdGFudHx8Yy5wdXNoLmFwcGx5KGMsYS50b1dhdGNoKX0pO2EuY29uc3RhbnQ9ZDthLnRvV2F0Y2g9YS5maWx0ZXImJiFiKGEuY2FsbGVlLm5hbWUpLiRzdGF0ZWZ1bD9jOlxuW2FdO2JyZWFrO2Nhc2Ugcy5Bc3NpZ25tZW50RXhwcmVzc2lvbjpWKGEubGVmdCxiKTtWKGEucmlnaHQsYik7YS5jb25zdGFudD1hLmxlZnQuY29uc3RhbnQmJmEucmlnaHQuY29uc3RhbnQ7YS50b1dhdGNoPVthXTticmVhaztjYXNlIHMuQXJyYXlFeHByZXNzaW9uOmQ9ITA7Yz1bXTtuKGEuZWxlbWVudHMsZnVuY3Rpb24oYSl7VihhLGIpO2Q9ZCYmYS5jb25zdGFudDthLmNvbnN0YW50fHxjLnB1c2guYXBwbHkoYyxhLnRvV2F0Y2gpfSk7YS5jb25zdGFudD1kO2EudG9XYXRjaD1jO2JyZWFrO2Nhc2Ugcy5PYmplY3RFeHByZXNzaW9uOmQ9ITA7Yz1bXTtuKGEucHJvcGVydGllcyxmdW5jdGlvbihhKXtWKGEudmFsdWUsYik7ZD1kJiZhLnZhbHVlLmNvbnN0YW50O2EudmFsdWUuY29uc3RhbnR8fGMucHVzaC5hcHBseShjLGEudmFsdWUudG9XYXRjaCl9KTthLmNvbnN0YW50PWQ7YS50b1dhdGNoPWM7YnJlYWs7Y2FzZSBzLlRoaXNFeHByZXNzaW9uOmEuY29uc3RhbnQ9ITEsYS50b1dhdGNoPVxuW119fWZ1bmN0aW9uIHBkKGEpe2lmKDE9PWEubGVuZ3RoKXthPWFbMF0uZXhwcmVzc2lvbjt2YXIgYj1hLnRvV2F0Y2g7cmV0dXJuIDEhPT1iLmxlbmd0aD9iOmJbMF0hPT1hP2I6d319ZnVuY3Rpb24gcWQoYSl7cmV0dXJuIGEudHlwZT09PXMuSWRlbnRpZmllcnx8YS50eXBlPT09cy5NZW1iZXJFeHByZXNzaW9ufWZ1bmN0aW9uIHJkKGEpe2lmKDE9PT1hLmJvZHkubGVuZ3RoJiZxZChhLmJvZHlbMF0uZXhwcmVzc2lvbikpcmV0dXJue3R5cGU6cy5Bc3NpZ25tZW50RXhwcmVzc2lvbixsZWZ0OmEuYm9keVswXS5leHByZXNzaW9uLHJpZ2h0Ont0eXBlOnMuTkdWYWx1ZVBhcmFtZXRlcn0sb3BlcmF0b3I6XCI9XCJ9fWZ1bmN0aW9uIHNkKGEpe3JldHVybiAwPT09YS5ib2R5Lmxlbmd0aHx8MT09PWEuYm9keS5sZW5ndGgmJihhLmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlPT09cy5MaXRlcmFsfHxhLmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlPT09cy5BcnJheUV4cHJlc3Npb258fGEuYm9keVswXS5leHByZXNzaW9uLnR5cGU9PT1cbnMuT2JqZWN0RXhwcmVzc2lvbil9ZnVuY3Rpb24gdGQoYSxiKXt0aGlzLmFzdEJ1aWxkZXI9YTt0aGlzLiRmaWx0ZXI9Yn1mdW5jdGlvbiB1ZChhLGIpe3RoaXMuYXN0QnVpbGRlcj1hO3RoaXMuJGZpbHRlcj1ifWZ1bmN0aW9uIEhiKGEpe3JldHVyblwiY29uc3RydWN0b3JcIj09YX1mdW5jdGlvbiBmYyhhKXtyZXR1cm4gQihhLnZhbHVlT2YpP2EudmFsdWVPZigpOmVnLmNhbGwoYSl9ZnVuY3Rpb24gcWYoKXt2YXIgYT1lYSgpLGI9ZWEoKTt0aGlzLiRnZXQ9W1wiJGZpbHRlclwiLGZ1bmN0aW9uKGQpe2Z1bmN0aW9uIGMoYSxiKXtyZXR1cm4gbnVsbD09YXx8bnVsbD09Yj9hPT09YjpcIm9iamVjdFwiPT09dHlwZW9mIGEmJihhPWZjKGEpLFwib2JqZWN0XCI9PT10eXBlb2YgYSk/ITE6YT09PWJ8fGEhPT1hJiZiIT09Yn1mdW5jdGlvbiBlKGEsYixkLGUsZil7dmFyIGc9ZS5pbnB1dHMsaDtpZigxPT09Zy5sZW5ndGgpe3ZhciBrPWMsZz1nWzBdO3JldHVybiBhLiR3YXRjaChmdW5jdGlvbihhKXt2YXIgYj1cbmcoYSk7YyhiLGspfHwoaD1lKGEsdyx3LFtiXSksaz1iJiZmYyhiKSk7cmV0dXJuIGh9LGIsZCxmKX1mb3IodmFyIGw9W10sbT1bXSxyPTAsbj1nLmxlbmd0aDtyPG47cisrKWxbcl09YyxtW3JdPW51bGw7cmV0dXJuIGEuJHdhdGNoKGZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0hMSxkPTAsZj1nLmxlbmd0aDtkPGY7ZCsrKXt2YXIgaz1nW2RdKGEpO2lmKGJ8fChiPSFjKGssbFtkXSkpKW1bZF09ayxsW2RdPWsmJmZjKGspfWImJihoPWUoYSx3LHcsbSkpO3JldHVybiBofSxiLGQsZil9ZnVuY3Rpb24gZihhLGIsYyxkKXt2YXIgZSxmO3JldHVybiBlPWEuJHdhdGNoKGZ1bmN0aW9uKGEpe3JldHVybiBkKGEpfSxmdW5jdGlvbihhLGMsZCl7Zj1hO0IoYikmJmIuYXBwbHkodGhpcyxhcmd1bWVudHMpO3UoYSkmJmQuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCl7dShmKSYmZSgpfSl9LGMpfWZ1bmN0aW9uIGcoYSxiLGMsZCl7ZnVuY3Rpb24gZShhKXt2YXIgYj0hMDtuKGEsZnVuY3Rpb24oYSl7dShhKXx8XG4oYj0hMSl9KTtyZXR1cm4gYn12YXIgZixnO3JldHVybiBmPWEuJHdhdGNoKGZ1bmN0aW9uKGEpe3JldHVybiBkKGEpfSxmdW5jdGlvbihhLGMsZCl7Zz1hO0IoYikmJmIuY2FsbCh0aGlzLGEsYyxkKTtlKGEpJiZkLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpe2UoZykmJmYoKX0pfSxjKX1mdW5jdGlvbiBoKGEsYixjLGQpe3ZhciBlO3JldHVybiBlPWEuJHdhdGNoKGZ1bmN0aW9uKGEpe3JldHVybiBkKGEpfSxmdW5jdGlvbihhLGMsZCl7QihiKSYmYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7ZSgpfSxjKX1mdW5jdGlvbiBrKGEsYil7aWYoIWIpcmV0dXJuIGE7dmFyIGM9YS4kJHdhdGNoRGVsZWdhdGUsZD0hMSxjPWMhPT1nJiZjIT09Zj9mdW5jdGlvbihjLGUsZixnKXtmPWQmJmc/Z1swXTphKGMsZSxmLGcpO3JldHVybiBiKGYsYyxlKX06ZnVuY3Rpb24oYyxkLGUsZil7ZT1hKGMsZCxlLGYpO2M9YihlLGMsZCk7cmV0dXJuIHUoZSk/YzplfTthLiQkd2F0Y2hEZWxlZ2F0ZSYmYS4kJHdhdGNoRGVsZWdhdGUhPT1cbmU/Yy4kJHdhdGNoRGVsZWdhdGU9YS4kJHdhdGNoRGVsZWdhdGU6Yi4kc3RhdGVmdWx8fChjLiQkd2F0Y2hEZWxlZ2F0ZT1lLGQ9IWEuaW5wdXRzLGMuaW5wdXRzPWEuaW5wdXRzP2EuaW5wdXRzOlthXSk7cmV0dXJuIGN9dmFyIGw9Q2EoKS5ub1Vuc2FmZUV2YWwsbT17Y3NwOmwsZXhwZW5zaXZlQ2hlY2tzOiExfSxyPXtjc3A6bCxleHBlbnNpdmVDaGVja3M6ITB9O3JldHVybiBmdW5jdGlvbihjLGwseSl7dmFyIG4scCx4O3N3aXRjaCh0eXBlb2YgYyl7Y2FzZSBcInN0cmluZ1wiOng9Yz1jLnRyaW0oKTt2YXIgdj15P2I6YTtuPXZbeF07bnx8KFwiOlwiPT09Yy5jaGFyQXQoMCkmJlwiOlwiPT09Yy5jaGFyQXQoMSkmJihwPSEwLGM9Yy5zdWJzdHJpbmcoMikpLHk9eT9yOm0sbj1uZXcgZ2MoeSksbj0obmV3IGhjKG4sZCx5KSkucGFyc2UoYyksbi5jb25zdGFudD9uLiQkd2F0Y2hEZWxlZ2F0ZT1oOnA/bi4kJHdhdGNoRGVsZWdhdGU9bi5saXRlcmFsP2c6ZjpuLmlucHV0cyYmKG4uJCR3YXRjaERlbGVnYXRlPVxuZSksdlt4XT1uKTtyZXR1cm4gayhuLGwpO2Nhc2UgXCJmdW5jdGlvblwiOnJldHVybiBrKGMsbCk7ZGVmYXVsdDpyZXR1cm4gayh6LGwpfX19XX1mdW5jdGlvbiBzZigpe3RoaXMuJGdldD1bXCIkcm9vdFNjb3BlXCIsXCIkZXhjZXB0aW9uSGFuZGxlclwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIHZkKGZ1bmN0aW9uKGIpe2EuJGV2YWxBc3luYyhiKX0sYil9XX1mdW5jdGlvbiB0Zigpe3RoaXMuJGdldD1bXCIkYnJvd3NlclwiLFwiJGV4Y2VwdGlvbkhhbmRsZXJcIixmdW5jdGlvbihhLGIpe3JldHVybiB2ZChmdW5jdGlvbihiKXthLmRlZmVyKGIpfSxiKX1dfWZ1bmN0aW9uIHZkKGEsYil7ZnVuY3Rpb24gZChhLGIsYyl7ZnVuY3Rpb24gZChiKXtyZXR1cm4gZnVuY3Rpb24oYyl7ZXx8KGU9ITAsYi5jYWxsKGEsYykpfX12YXIgZT0hMTtyZXR1cm5bZChiKSxkKGMpXX1mdW5jdGlvbiBjKCl7dGhpcy4kJHN0YXRlPXtzdGF0dXM6MH19ZnVuY3Rpb24gZShhLGIpe3JldHVybiBmdW5jdGlvbihjKXtiLmNhbGwoYSxcbmMpfX1mdW5jdGlvbiBmKGMpeyFjLnByb2Nlc3NTY2hlZHVsZWQmJmMucGVuZGluZyYmKGMucHJvY2Vzc1NjaGVkdWxlZD0hMCxhKGZ1bmN0aW9uKCl7dmFyIGEsZCxlO2U9Yy5wZW5kaW5nO2MucHJvY2Vzc1NjaGVkdWxlZD0hMTtjLnBlbmRpbmc9dztmb3IodmFyIGY9MCxnPWUubGVuZ3RoO2Y8ZzsrK2Ype2Q9ZVtmXVswXTthPWVbZl1bYy5zdGF0dXNdO3RyeXtCKGEpP2QucmVzb2x2ZShhKGMudmFsdWUpKToxPT09Yy5zdGF0dXM/ZC5yZXNvbHZlKGMudmFsdWUpOmQucmVqZWN0KGMudmFsdWUpfWNhdGNoKGgpe2QucmVqZWN0KGgpLGIoaCl9fX0pKX1mdW5jdGlvbiBnKCl7dGhpcy5wcm9taXNlPW5ldyBjO3RoaXMucmVzb2x2ZT1lKHRoaXMsdGhpcy5yZXNvbHZlKTt0aGlzLnJlamVjdD1lKHRoaXMsdGhpcy5yZWplY3QpO3RoaXMubm90aWZ5PWUodGhpcyx0aGlzLm5vdGlmeSl9dmFyIGg9TShcIiRxXCIsVHlwZUVycm9yKTtOKGMucHJvdG90eXBlLHt0aGVuOmZ1bmN0aW9uKGEsYixjKXtpZihxKGEpJiZcbnEoYikmJnEoYykpcmV0dXJuIHRoaXM7dmFyIGQ9bmV3IGc7dGhpcy4kJHN0YXRlLnBlbmRpbmc9dGhpcy4kJHN0YXRlLnBlbmRpbmd8fFtdO3RoaXMuJCRzdGF0ZS5wZW5kaW5nLnB1c2goW2QsYSxiLGNdKTswPHRoaXMuJCRzdGF0ZS5zdGF0dXMmJmYodGhpcy4kJHN0YXRlKTtyZXR1cm4gZC5wcm9taXNlfSxcImNhdGNoXCI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMudGhlbihudWxsLGEpfSxcImZpbmFsbHlcIjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGwoYiwhMCxhKX0sZnVuY3Rpb24oYil7cmV0dXJuIGwoYiwhMSxhKX0sYil9fSk7TihnLnByb3RvdHlwZSx7cmVzb2x2ZTpmdW5jdGlvbihhKXt0aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXN8fChhPT09dGhpcy5wcm9taXNlP3RoaXMuJCRyZWplY3QoaChcInFjeWNsZVwiLGEpKTp0aGlzLiQkcmVzb2x2ZShhKSl9LCQkcmVzb2x2ZTpmdW5jdGlvbihhKXt2YXIgYyxlO2U9ZCh0aGlzLHRoaXMuJCRyZXNvbHZlLFxudGhpcy4kJHJlamVjdCk7dHJ5e2lmKEcoYSl8fEIoYSkpYz1hJiZhLnRoZW47QihjKT8odGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzPS0xLGMuY2FsbChhLGVbMF0sZVsxXSx0aGlzLm5vdGlmeSkpOih0aGlzLnByb21pc2UuJCRzdGF0ZS52YWx1ZT1hLHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cz0xLGYodGhpcy5wcm9taXNlLiQkc3RhdGUpKX1jYXRjaChnKXtlWzFdKGcpLGIoZyl9fSxyZWplY3Q6ZnVuY3Rpb24oYSl7dGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzfHx0aGlzLiQkcmVqZWN0KGEpfSwkJHJlamVjdDpmdW5jdGlvbihhKXt0aGlzLnByb21pc2UuJCRzdGF0ZS52YWx1ZT1hO3RoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cz0yO2YodGhpcy5wcm9taXNlLiQkc3RhdGUpfSxub3RpZnk6ZnVuY3Rpb24oYyl7dmFyIGQ9dGhpcy5wcm9taXNlLiQkc3RhdGUucGVuZGluZzswPj10aGlzLnByb21pc2UuJCRzdGF0ZS5zdGF0dXMmJmQmJmQubGVuZ3RoJiZhKGZ1bmN0aW9uKCl7Zm9yKHZhciBhLFxuZSxmPTAsZz1kLmxlbmd0aDtmPGc7ZisrKXtlPWRbZl1bMF07YT1kW2ZdWzNdO3RyeXtlLm5vdGlmeShCKGEpP2EoYyk6Yyl9Y2F0Y2goaCl7YihoKX19fSl9fSk7dmFyIGs9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgZztiP2MucmVzb2x2ZShhKTpjLnJlamVjdChhKTtyZXR1cm4gYy5wcm9taXNlfSxsPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1udWxsO3RyeXtCKGMpJiYoZD1jKCkpfWNhdGNoKGUpe3JldHVybiBrKGUsITEpfXJldHVybiBkJiZCKGQudGhlbik/ZC50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGsoYSxiKX0sZnVuY3Rpb24oYSl7cmV0dXJuIGsoYSwhMSl9KTprKGEsYil9LG09ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bmV3IGc7ZS5yZXNvbHZlKGEpO3JldHVybiBlLnByb21pc2UudGhlbihiLGMsZCl9LHI9ZnVuY3Rpb24gQyhhKXtpZighQihhKSl0aHJvdyBoKFwibm9yc2x2clwiLGEpO2lmKCEodGhpcyBpbnN0YW5jZW9mIEMpKXJldHVybiBuZXcgQyhhKTt2YXIgYj1uZXcgZztcbmEoZnVuY3Rpb24oYSl7Yi5yZXNvbHZlKGEpfSxmdW5jdGlvbihhKXtiLnJlamVjdChhKX0pO3JldHVybiBiLnByb21pc2V9O3IuZGVmZXI9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGd9O3IucmVqZWN0PWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBnO2IucmVqZWN0KGEpO3JldHVybiBiLnByb21pc2V9O3Iud2hlbj1tO3IucmVzb2x2ZT1tO3IuYWxsPWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBnLGM9MCxkPUUoYSk/W106e307bihhLGZ1bmN0aW9uKGEsZSl7YysrO20oYSkudGhlbihmdW5jdGlvbihhKXtkLmhhc093blByb3BlcnR5KGUpfHwoZFtlXT1hLC0tY3x8Yi5yZXNvbHZlKGQpKX0sZnVuY3Rpb24oYSl7ZC5oYXNPd25Qcm9wZXJ0eShlKXx8Yi5yZWplY3QoYSl9KX0pOzA9PT1jJiZiLnJlc29sdmUoZCk7cmV0dXJuIGIucHJvbWlzZX07cmV0dXJuIHJ9ZnVuY3Rpb24gQ2YoKXt0aGlzLiRnZXQ9W1wiJHdpbmRvd1wiLFwiJHRpbWVvdXRcIixmdW5jdGlvbihhLGIpe3ZhciBkPWEucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxcbmEud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lLGM9YS5jYW5jZWxBbmltYXRpb25GcmFtZXx8YS53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZXx8YS53ZWJraXRDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUsZT0hIWQsZj1lP2Z1bmN0aW9uKGEpe3ZhciBiPWQoYSk7cmV0dXJuIGZ1bmN0aW9uKCl7YyhiKX19OmZ1bmN0aW9uKGEpe3ZhciBjPWIoYSwxNi42NiwhMSk7cmV0dXJuIGZ1bmN0aW9uKCl7Yi5jYW5jZWwoYyl9fTtmLnN1cHBvcnRlZD1lO3JldHVybiBmfV19ZnVuY3Rpb24gcmYoKXtmdW5jdGlvbiBhKGEpe2Z1bmN0aW9uIGIoKXt0aGlzLiQkd2F0Y2hlcnM9dGhpcy4kJG5leHRTaWJsaW5nPXRoaXMuJCRjaGlsZEhlYWQ9dGhpcy4kJGNoaWxkVGFpbD1udWxsO3RoaXMuJCRsaXN0ZW5lcnM9e307dGhpcy4kJGxpc3RlbmVyQ291bnQ9e307dGhpcy4kJHdhdGNoZXJzQ291bnQ9MDt0aGlzLiRpZD0rK29iO3RoaXMuJCRDaGlsZFNjb3BlPW51bGx9Yi5wcm90b3R5cGU9YTtcbnJldHVybiBifXZhciBiPTEwLGQ9TShcIiRyb290U2NvcGVcIiksYz1udWxsLGU9bnVsbDt0aGlzLmRpZ2VzdFR0bD1mdW5jdGlvbihhKXthcmd1bWVudHMubGVuZ3RoJiYoYj1hKTtyZXR1cm4gYn07dGhpcy4kZ2V0PVtcIiRpbmplY3RvclwiLFwiJGV4Y2VwdGlvbkhhbmRsZXJcIixcIiRwYXJzZVwiLFwiJGJyb3dzZXJcIixmdW5jdGlvbihmLGcsaCxrKXtmdW5jdGlvbiBsKGEpe2EuY3VycmVudFNjb3BlLiQkZGVzdHJveWVkPSEwfWZ1bmN0aW9uIG0oYSl7OT09PUhhJiYoYS4kJGNoaWxkSGVhZCYmbShhLiQkY2hpbGRIZWFkKSxhLiQkbmV4dFNpYmxpbmcmJm0oYS4kJG5leHRTaWJsaW5nKSk7YS4kcGFyZW50PWEuJCRuZXh0U2libGluZz1hLiQkcHJldlNpYmxpbmc9YS4kJGNoaWxkSGVhZD1hLiQkY2hpbGRUYWlsPWEuJHJvb3Q9YS4kJHdhdGNoZXJzPW51bGx9ZnVuY3Rpb24gcigpe3RoaXMuJGlkPSsrb2I7dGhpcy4kJHBoYXNlPXRoaXMuJHBhcmVudD10aGlzLiQkd2F0Y2hlcnM9dGhpcy4kJG5leHRTaWJsaW5nPVxudGhpcy4kJHByZXZTaWJsaW5nPXRoaXMuJCRjaGlsZEhlYWQ9dGhpcy4kJGNoaWxkVGFpbD1udWxsO3RoaXMuJHJvb3Q9dGhpczt0aGlzLiQkZGVzdHJveWVkPSExO3RoaXMuJCRsaXN0ZW5lcnM9e307dGhpcy4kJGxpc3RlbmVyQ291bnQ9e307dGhpcy4kJHdhdGNoZXJzQ291bnQ9MDt0aGlzLiQkaXNvbGF0ZUJpbmRpbmdzPW51bGx9ZnVuY3Rpb24gdChhKXtpZih2LiQkcGhhc2UpdGhyb3cgZChcImlucHJvZ1wiLHYuJCRwaGFzZSk7di4kJHBoYXNlPWF9ZnVuY3Rpb24gQyhhLGIpe2RvIGEuJCR3YXRjaGVyc0NvdW50Kz1iO3doaWxlKGE9YS4kcGFyZW50KX1mdW5jdGlvbiB5KGEsYixjKXtkbyBhLiQkbGlzdGVuZXJDb3VudFtjXS09YiwwPT09YS4kJGxpc3RlbmVyQ291bnRbY10mJmRlbGV0ZSBhLiQkbGlzdGVuZXJDb3VudFtjXTt3aGlsZShhPWEuJHBhcmVudCl9ZnVuY3Rpb24gcygpe31mdW5jdGlvbiBwKCl7Zm9yKDt3Lmxlbmd0aDspdHJ5e3cuc2hpZnQoKSgpfWNhdGNoKGEpe2coYSl9ZT1cbm51bGx9ZnVuY3Rpb24geCgpe251bGw9PT1lJiYoZT1rLmRlZmVyKGZ1bmN0aW9uKCl7di4kYXBwbHkocCl9KSl9ci5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOnIsJG5ldzpmdW5jdGlvbihiLGMpe3ZhciBkO2M9Y3x8dGhpcztiPyhkPW5ldyByLGQuJHJvb3Q9dGhpcy4kcm9vdCk6KHRoaXMuJCRDaGlsZFNjb3BlfHwodGhpcy4kJENoaWxkU2NvcGU9YSh0aGlzKSksZD1uZXcgdGhpcy4kJENoaWxkU2NvcGUpO2QuJHBhcmVudD1jO2QuJCRwcmV2U2libGluZz1jLiQkY2hpbGRUYWlsO2MuJCRjaGlsZEhlYWQ/KGMuJCRjaGlsZFRhaWwuJCRuZXh0U2libGluZz1kLGMuJCRjaGlsZFRhaWw9ZCk6Yy4kJGNoaWxkSGVhZD1jLiQkY2hpbGRUYWlsPWQ7KGJ8fGMhPXRoaXMpJiZkLiRvbihcIiRkZXN0cm95XCIsbCk7cmV0dXJuIGR9LCR3YXRjaDpmdW5jdGlvbihhLGIsZCxlKXt2YXIgZj1oKGEpO2lmKGYuJCR3YXRjaERlbGVnYXRlKXJldHVybiBmLiQkd2F0Y2hEZWxlZ2F0ZSh0aGlzLGIsZCxmLFxuYSk7dmFyIGc9dGhpcyxrPWcuJCR3YXRjaGVycyxsPXtmbjpiLGxhc3Q6cyxnZXQ6ZixleHA6ZXx8YSxlcTohIWR9O2M9bnVsbDtCKGIpfHwobC5mbj16KTtrfHwoaz1nLiQkd2F0Y2hlcnM9W10pO2sudW5zaGlmdChsKTtDKHRoaXMsMSk7cmV0dXJuIGZ1bmN0aW9uKCl7MDw9YWIoayxsKSYmQyhnLC0xKTtjPW51bGx9fSwkd2F0Y2hHcm91cDpmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoKXtoPSExO2s/KGs9ITEsYihlLGUsZykpOmIoZSxkLGcpfXZhciBkPUFycmF5KGEubGVuZ3RoKSxlPUFycmF5KGEubGVuZ3RoKSxmPVtdLGc9dGhpcyxoPSExLGs9ITA7aWYoIWEubGVuZ3RoKXt2YXIgbD0hMDtnLiRldmFsQXN5bmMoZnVuY3Rpb24oKXtsJiZiKGUsZSxnKX0pO3JldHVybiBmdW5jdGlvbigpe2w9ITF9fWlmKDE9PT1hLmxlbmd0aClyZXR1cm4gdGhpcy4kd2F0Y2goYVswXSxmdW5jdGlvbihhLGMsZil7ZVswXT1hO2RbMF09YztiKGUsYT09PWM/ZTpkLGYpfSk7bihhLGZ1bmN0aW9uKGEsXG5iKXt2YXIgaz1nLiR3YXRjaChhLGZ1bmN0aW9uKGEsZil7ZVtiXT1hO2RbYl09ZjtofHwoaD0hMCxnLiRldmFsQXN5bmMoYykpfSk7Zi5wdXNoKGspfSk7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKDtmLmxlbmd0aDspZi5zaGlmdCgpKCl9fSwkd2F0Y2hDb2xsZWN0aW9uOmZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXtlPWE7dmFyIGIsZCxnLGg7aWYoIXEoZSkpe2lmKEcoZSkpaWYoQWEoZSkpZm9yKGYhPT1yJiYoZj1yLHA9Zi5sZW5ndGg9MCxsKyspLGE9ZS5sZW5ndGgscCE9PWEmJihsKyssZi5sZW5ndGg9cD1hKSxiPTA7YjxhO2IrKyloPWZbYl0sZz1lW2JdLGQ9aCE9PWgmJmchPT1nLGR8fGg9PT1nfHwobCsrLGZbYl09Zyk7ZWxzZXtmIT09dCYmKGY9dD17fSxwPTAsbCsrKTthPTA7Zm9yKGIgaW4gZSlyYS5jYWxsKGUsYikmJihhKyssZz1lW2JdLGg9ZltiXSxiIGluIGY/KGQ9aCE9PWgmJmchPT1nLGR8fGg9PT1nfHwobCsrLGZbYl09ZykpOihwKyssZltiXT1nLGwrKykpO2lmKHA+XG5hKWZvcihiIGluIGwrKyxmKXJhLmNhbGwoZSxiKXx8KHAtLSxkZWxldGUgZltiXSl9ZWxzZSBmIT09ZSYmKGY9ZSxsKyspO3JldHVybiBsfX1jLiRzdGF0ZWZ1bD0hMDt2YXIgZD10aGlzLGUsZixnLGs9MTxiLmxlbmd0aCxsPTAsbT1oKGEsYykscj1bXSx0PXt9LG49ITAscD0wO3JldHVybiB0aGlzLiR3YXRjaChtLGZ1bmN0aW9uKCl7bj8obj0hMSxiKGUsZSxkKSk6YihlLGcsZCk7aWYoaylpZihHKGUpKWlmKEFhKGUpKXtnPUFycmF5KGUubGVuZ3RoKTtmb3IodmFyIGE9MDthPGUubGVuZ3RoO2ErKylnW2FdPWVbYV19ZWxzZSBmb3IoYSBpbiBnPXt9LGUpcmEuY2FsbChlLGEpJiYoZ1thXT1lW2FdKTtlbHNlIGc9ZX0pfSwkZGlnZXN0OmZ1bmN0aW9uKCl7dmFyIGEsZixoLGwsbSxyLG49YixDLHg9W10scSx5O3QoXCIkZGlnZXN0XCIpO2suJCRjaGVja1VybENoYW5nZSgpO3RoaXM9PT12JiZudWxsIT09ZSYmKGsuZGVmZXIuY2FuY2VsKGUpLHAoKSk7Yz1udWxsO2Rve3I9ITE7Zm9yKEM9XG50aGlzO3UubGVuZ3RoOyl7dHJ5e3k9dS5zaGlmdCgpLHkuc2NvcGUuJGV2YWwoeS5leHByZXNzaW9uLHkubG9jYWxzKX1jYXRjaCh3KXtnKHcpfWM9bnVsbH1hOmRve2lmKGw9Qy4kJHdhdGNoZXJzKWZvcihtPWwubGVuZ3RoO20tLTspdHJ5e2lmKGE9bFttXSlpZigoZj1hLmdldChDKSkhPT0oaD1hLmxhc3QpJiYhKGEuZXE/a2EoZixoKTpcIm51bWJlclwiPT09dHlwZW9mIGYmJlwibnVtYmVyXCI9PT10eXBlb2YgaCYmaXNOYU4oZikmJmlzTmFOKGgpKSlyPSEwLGM9YSxhLmxhc3Q9YS5lcT9NYShmLG51bGwpOmYsYS5mbihmLGg9PT1zP2Y6aCxDKSw1Pm4mJihxPTQtbix4W3FdfHwoeFtxXT1bXSkseFtxXS5wdXNoKHttc2c6QihhLmV4cCk/XCJmbjogXCIrKGEuZXhwLm5hbWV8fGEuZXhwLnRvU3RyaW5nKCkpOmEuZXhwLG5ld1ZhbDpmLG9sZFZhbDpofSkpO2Vsc2UgaWYoYT09PWMpe3I9ITE7YnJlYWsgYX19Y2F0Y2gobGEpe2cobGEpfWlmKCEobD1DLiQkd2F0Y2hlcnNDb3VudCYmQy4kJGNoaWxkSGVhZHx8XG5DIT09dGhpcyYmQy4kJG5leHRTaWJsaW5nKSlmb3IoO0MhPT10aGlzJiYhKGw9Qy4kJG5leHRTaWJsaW5nKTspQz1DLiRwYXJlbnR9d2hpbGUoQz1sKTtpZigocnx8dS5sZW5ndGgpJiYhbi0tKXRocm93IHYuJCRwaGFzZT1udWxsLGQoXCJpbmZkaWdcIixiLHgpO313aGlsZShyfHx1Lmxlbmd0aCk7Zm9yKHYuJCRwaGFzZT1udWxsO0gubGVuZ3RoOyl0cnl7SC5zaGlmdCgpKCl9Y2F0Y2goQSl7ZyhBKX19LCRkZXN0cm95OmZ1bmN0aW9uKCl7aWYoIXRoaXMuJCRkZXN0cm95ZWQpe3ZhciBhPXRoaXMuJHBhcmVudDt0aGlzLiRicm9hZGNhc3QoXCIkZGVzdHJveVwiKTt0aGlzLiQkZGVzdHJveWVkPSEwO3RoaXM9PT12JiZrLiQkYXBwbGljYXRpb25EZXN0cm95ZWQoKTtDKHRoaXMsLXRoaXMuJCR3YXRjaGVyc0NvdW50KTtmb3IodmFyIGIgaW4gdGhpcy4kJGxpc3RlbmVyQ291bnQpeSh0aGlzLHRoaXMuJCRsaXN0ZW5lckNvdW50W2JdLGIpO2EmJmEuJCRjaGlsZEhlYWQ9PXRoaXMmJihhLiQkY2hpbGRIZWFkPVxudGhpcy4kJG5leHRTaWJsaW5nKTthJiZhLiQkY2hpbGRUYWlsPT10aGlzJiYoYS4kJGNoaWxkVGFpbD10aGlzLiQkcHJldlNpYmxpbmcpO3RoaXMuJCRwcmV2U2libGluZyYmKHRoaXMuJCRwcmV2U2libGluZy4kJG5leHRTaWJsaW5nPXRoaXMuJCRuZXh0U2libGluZyk7dGhpcy4kJG5leHRTaWJsaW5nJiYodGhpcy4kJG5leHRTaWJsaW5nLiQkcHJldlNpYmxpbmc9dGhpcy4kJHByZXZTaWJsaW5nKTt0aGlzLiRkZXN0cm95PXRoaXMuJGRpZ2VzdD10aGlzLiRhcHBseT10aGlzLiRldmFsQXN5bmM9dGhpcy4kYXBwbHlBc3luYz16O3RoaXMuJG9uPXRoaXMuJHdhdGNoPXRoaXMuJHdhdGNoR3JvdXA9ZnVuY3Rpb24oKXtyZXR1cm4gen07dGhpcy4kJGxpc3RlbmVycz17fTt0aGlzLiQkbmV4dFNpYmxpbmc9bnVsbDttKHRoaXMpfX0sJGV2YWw6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gaChhKSh0aGlzLGIpfSwkZXZhbEFzeW5jOmZ1bmN0aW9uKGEsYil7di4kJHBoYXNlfHx1Lmxlbmd0aHx8XG5rLmRlZmVyKGZ1bmN0aW9uKCl7dS5sZW5ndGgmJnYuJGRpZ2VzdCgpfSk7dS5wdXNoKHtzY29wZTp0aGlzLGV4cHJlc3Npb246YSxsb2NhbHM6Yn0pfSwkJHBvc3REaWdlc3Q6ZnVuY3Rpb24oYSl7SC5wdXNoKGEpfSwkYXBwbHk6ZnVuY3Rpb24oYSl7dHJ5e3QoXCIkYXBwbHlcIik7dHJ5e3JldHVybiB0aGlzLiRldmFsKGEpfWZpbmFsbHl7di4kJHBoYXNlPW51bGx9fWNhdGNoKGIpe2coYil9ZmluYWxseXt0cnl7di4kZGlnZXN0KCl9Y2F0Y2goYyl7dGhyb3cgZyhjKSxjO319fSwkYXBwbHlBc3luYzpmdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7Yy4kZXZhbChhKX12YXIgYz10aGlzO2EmJncucHVzaChiKTt4KCl9LCRvbjpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuJCRsaXN0ZW5lcnNbYV07Y3x8KHRoaXMuJCRsaXN0ZW5lcnNbYV09Yz1bXSk7Yy5wdXNoKGIpO3ZhciBkPXRoaXM7ZG8gZC4kJGxpc3RlbmVyQ291bnRbYV18fChkLiQkbGlzdGVuZXJDb3VudFthXT0wKSxkLiQkbGlzdGVuZXJDb3VudFthXSsrO1xud2hpbGUoZD1kLiRwYXJlbnQpO3ZhciBlPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGQ9Yy5pbmRleE9mKGIpOy0xIT09ZCYmKGNbZF09bnVsbCx5KGUsMSxhKSl9fSwkZW1pdDpmdW5jdGlvbihhLGIpe3ZhciBjPVtdLGQsZT10aGlzLGY9ITEsaD17bmFtZTphLHRhcmdldFNjb3BlOmUsc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7Zj0hMH0scHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXtoLmRlZmF1bHRQcmV2ZW50ZWQ9ITB9LGRlZmF1bHRQcmV2ZW50ZWQ6ITF9LGs9YmIoW2hdLGFyZ3VtZW50cywxKSxsLG07ZG97ZD1lLiQkbGlzdGVuZXJzW2FdfHxjO2guY3VycmVudFNjb3BlPWU7bD0wO2ZvcihtPWQubGVuZ3RoO2w8bTtsKyspaWYoZFtsXSl0cnl7ZFtsXS5hcHBseShudWxsLGspfWNhdGNoKHIpe2cocil9ZWxzZSBkLnNwbGljZShsLDEpLGwtLSxtLS07aWYoZilyZXR1cm4gaC5jdXJyZW50U2NvcGU9bnVsbCxoO2U9ZS4kcGFyZW50fXdoaWxlKGUpO2guY3VycmVudFNjb3BlPVxubnVsbDtyZXR1cm4gaH0sJGJyb2FkY2FzdDpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMsZD10aGlzLGU9e25hbWU6YSx0YXJnZXRTY29wZTp0aGlzLHByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7ZS5kZWZhdWx0UHJldmVudGVkPSEwfSxkZWZhdWx0UHJldmVudGVkOiExfTtpZighdGhpcy4kJGxpc3RlbmVyQ291bnRbYV0pcmV0dXJuIGU7Zm9yKHZhciBmPWJiKFtlXSxhcmd1bWVudHMsMSksaCxrO2M9ZDspe2UuY3VycmVudFNjb3BlPWM7ZD1jLiQkbGlzdGVuZXJzW2FdfHxbXTtoPTA7Zm9yKGs9ZC5sZW5ndGg7aDxrO2grKylpZihkW2hdKXRyeXtkW2hdLmFwcGx5KG51bGwsZil9Y2F0Y2gobCl7ZyhsKX1lbHNlIGQuc3BsaWNlKGgsMSksaC0tLGstLTtpZighKGQ9Yy4kJGxpc3RlbmVyQ291bnRbYV0mJmMuJCRjaGlsZEhlYWR8fGMhPT10aGlzJiZjLiQkbmV4dFNpYmxpbmcpKWZvcig7YyE9PXRoaXMmJiEoZD1jLiQkbmV4dFNpYmxpbmcpOyljPWMuJHBhcmVudH1lLmN1cnJlbnRTY29wZT1cbm51bGw7cmV0dXJuIGV9fTt2YXIgdj1uZXcgcix1PXYuJCRhc3luY1F1ZXVlPVtdLEg9di4kJHBvc3REaWdlc3RRdWV1ZT1bXSx3PXYuJCRhcHBseUFzeW5jUXVldWU9W107cmV0dXJuIHZ9XX1mdW5jdGlvbiBrZSgpe3ZhciBhPS9eXFxzKihodHRwcz98ZnRwfG1haWx0b3x0ZWx8ZmlsZSk6LyxiPS9eXFxzKigoaHR0cHM/fGZ0cHxmaWxlfGJsb2IpOnxkYXRhOmltYWdlXFwvKS87dGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdD1mdW5jdGlvbihiKXtyZXR1cm4gdShiKT8oYT1iLHRoaXMpOmF9O3RoaXMuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0PWZ1bmN0aW9uKGEpe3JldHVybiB1KGEpPyhiPWEsdGhpcyk6Yn07dGhpcy4kZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGQsYyl7dmFyIGU9Yz9iOmEsZjtmPXhhKGQpLmhyZWY7cmV0dXJuXCJcIj09PWZ8fGYubWF0Y2goZSk/ZDpcInVuc2FmZTpcIitmfX19ZnVuY3Rpb24gZmcoYSl7aWYoXCJzZWxmXCI9PT1hKXJldHVybiBhO1xuaWYoRihhKSl7aWYoLTE8YS5pbmRleE9mKFwiKioqXCIpKXRocm93IHphKFwiaXdjYXJkXCIsYSk7YT13ZChhKS5yZXBsYWNlKFwiXFxcXCpcXFxcKlwiLFwiLipcIikucmVwbGFjZShcIlxcXFwqXCIsXCJbXjovLj8mO10qXCIpO3JldHVybiBuZXcgUmVnRXhwKFwiXlwiK2ErXCIkXCIpfWlmKExhKGEpKXJldHVybiBuZXcgUmVnRXhwKFwiXlwiK2Euc291cmNlK1wiJFwiKTt0aHJvdyB6YShcImltYXRjaGVyXCIpO31mdW5jdGlvbiB4ZChhKXt2YXIgYj1bXTt1KGEpJiZuKGEsZnVuY3Rpb24oYSl7Yi5wdXNoKGZnKGEpKX0pO3JldHVybiBifWZ1bmN0aW9uIHZmKCl7dGhpcy5TQ0VfQ09OVEVYVFM9bWE7dmFyIGE9W1wic2VsZlwiXSxiPVtdO3RoaXMucmVzb3VyY2VVcmxXaGl0ZWxpc3Q9ZnVuY3Rpb24oYil7YXJndW1lbnRzLmxlbmd0aCYmKGE9eGQoYikpO3JldHVybiBhfTt0aGlzLnJlc291cmNlVXJsQmxhY2tsaXN0PWZ1bmN0aW9uKGEpe2FyZ3VtZW50cy5sZW5ndGgmJihiPXhkKGEpKTtyZXR1cm4gYn07dGhpcy4kZ2V0PVtcIiRpbmplY3RvclwiLFxuZnVuY3Rpb24oZCl7ZnVuY3Rpb24gYyhhLGIpe3JldHVyblwic2VsZlwiPT09YT9nZChiKTohIWEuZXhlYyhiLmhyZWYpfWZ1bmN0aW9uIGUoYSl7dmFyIGI9ZnVuY3Rpb24oYSl7dGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZT1mdW5jdGlvbigpe3JldHVybiBhfX07YSYmKGIucHJvdG90eXBlPW5ldyBhKTtiLnByb3RvdHlwZS52YWx1ZU9mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUoKX07Yi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpLnRvU3RyaW5nKCl9O3JldHVybiBifXZhciBmPWZ1bmN0aW9uKGEpe3Rocm93IHphKFwidW5zYWZlXCIpO307ZC5oYXMoXCIkc2FuaXRpemVcIikmJihmPWQuZ2V0KFwiJHNhbml0aXplXCIpKTt2YXIgZz1lKCksaD17fTtoW21hLkhUTUxdPWUoZyk7aFttYS5DU1NdPWUoZyk7aFttYS5VUkxdPWUoZyk7aFttYS5KU109ZShnKTtoW21hLlJFU09VUkNFX1VSTF09XG5lKGhbbWEuVVJMXSk7cmV0dXJue3RydXN0QXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1oLmhhc093blByb3BlcnR5KGEpP2hbYV06bnVsbDtpZighYyl0aHJvdyB6YShcImljb250ZXh0XCIsYSxiKTtpZihudWxsPT09Ynx8cShiKXx8XCJcIj09PWIpcmV0dXJuIGI7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBiKXRocm93IHphKFwiaXR5cGVcIixhKTtyZXR1cm4gbmV3IGMoYil9LGdldFRydXN0ZWQ6ZnVuY3Rpb24oZCxlKXtpZihudWxsPT09ZXx8cShlKXx8XCJcIj09PWUpcmV0dXJuIGU7dmFyIGc9aC5oYXNPd25Qcm9wZXJ0eShkKT9oW2RdOm51bGw7aWYoZyYmZSBpbnN0YW5jZW9mIGcpcmV0dXJuIGUuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtpZihkPT09bWEuUkVTT1VSQ0VfVVJMKXt2YXIgZz14YShlLnRvU3RyaW5nKCkpLHIsdCxuPSExO3I9MDtmb3IodD1hLmxlbmd0aDtyPHQ7cisrKWlmKGMoYVtyXSxnKSl7bj0hMDticmVha31pZihuKWZvcihyPTAsdD1iLmxlbmd0aDtyPHQ7cisrKWlmKGMoYltyXSxcbmcpKXtuPSExO2JyZWFrfWlmKG4pcmV0dXJuIGU7dGhyb3cgemEoXCJpbnNlY3VybFwiLGUudG9TdHJpbmcoKSk7fWlmKGQ9PT1tYS5IVE1MKXJldHVybiBmKGUpO3Rocm93IHphKFwidW5zYWZlXCIpO30sdmFsdWVPZjpmdW5jdGlvbihhKXtyZXR1cm4gYSBpbnN0YW5jZW9mIGc/YS4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpOmF9fX1dfWZ1bmN0aW9uIHVmKCl7dmFyIGE9ITA7dGhpcy5lbmFibGVkPWZ1bmN0aW9uKGIpe2FyZ3VtZW50cy5sZW5ndGgmJihhPSEhYik7cmV0dXJuIGF9O3RoaXMuJGdldD1bXCIkcGFyc2VcIixcIiRzY2VEZWxlZ2F0ZVwiLGZ1bmN0aW9uKGIsZCl7aWYoYSYmOD5IYSl0aHJvdyB6YShcImllcXVpcmtzXCIpO3ZhciBjPWhhKG1hKTtjLmlzRW5hYmxlZD1mdW5jdGlvbigpe3JldHVybiBhfTtjLnRydXN0QXM9ZC50cnVzdEFzO2MuZ2V0VHJ1c3RlZD1kLmdldFRydXN0ZWQ7Yy52YWx1ZU9mPWQudmFsdWVPZjthfHwoYy50cnVzdEFzPWMuZ2V0VHJ1c3RlZD1mdW5jdGlvbihhLGIpe3JldHVybiBifSxcbmMudmFsdWVPZj1ZYSk7Yy5wYXJzZUFzPWZ1bmN0aW9uKGEsZCl7dmFyIGU9YihkKTtyZXR1cm4gZS5saXRlcmFsJiZlLmNvbnN0YW50P2U6YihkLGZ1bmN0aW9uKGIpe3JldHVybiBjLmdldFRydXN0ZWQoYSxiKX0pfTt2YXIgZT1jLnBhcnNlQXMsZj1jLmdldFRydXN0ZWQsZz1jLnRydXN0QXM7bihtYSxmdW5jdGlvbihhLGIpe3ZhciBkPUsoYik7Y1tlYihcInBhcnNlX2FzX1wiK2QpXT1mdW5jdGlvbihiKXtyZXR1cm4gZShhLGIpfTtjW2ViKFwiZ2V0X3RydXN0ZWRfXCIrZCldPWZ1bmN0aW9uKGIpe3JldHVybiBmKGEsYil9O2NbZWIoXCJ0cnVzdF9hc19cIitkKV09ZnVuY3Rpb24oYil7cmV0dXJuIGcoYSxiKX19KTtyZXR1cm4gY31dfWZ1bmN0aW9uIHdmKCl7dGhpcy4kZ2V0PVtcIiR3aW5kb3dcIixcIiRkb2N1bWVudFwiLGZ1bmN0aW9uKGEsYil7dmFyIGQ9e30sYz1aKCgvYW5kcm9pZCAoXFxkKykvLmV4ZWMoSygoYS5uYXZpZ2F0b3J8fHt9KS51c2VyQWdlbnQpKXx8W10pWzFdKSxlPS9Cb3hlZS9pLnRlc3QoKGEubmF2aWdhdG9yfHxcbnt9KS51c2VyQWdlbnQpLGY9YlswXXx8e30sZyxoPS9eKE1venx3ZWJraXR8bXMpKD89W0EtWl0pLyxrPWYuYm9keSYmZi5ib2R5LnN0eWxlLGw9ITEsbT0hMTtpZihrKXtmb3IodmFyIHIgaW4gaylpZihsPWguZXhlYyhyKSl7Zz1sWzBdO2c9Zy5zdWJzdHIoMCwxKS50b1VwcGVyQ2FzZSgpK2cuc3Vic3RyKDEpO2JyZWFrfWd8fChnPVwiV2Via2l0T3BhY2l0eVwiaW4gayYmXCJ3ZWJraXRcIik7bD0hIShcInRyYW5zaXRpb25cImluIGt8fGcrXCJUcmFuc2l0aW9uXCJpbiBrKTttPSEhKFwiYW5pbWF0aW9uXCJpbiBrfHxnK1wiQW5pbWF0aW9uXCJpbiBrKTshY3x8bCYmbXx8KGw9RihrLndlYmtpdFRyYW5zaXRpb24pLG09RihrLndlYmtpdEFuaW1hdGlvbikpfXJldHVybntoaXN0b3J5OiEoIWEuaGlzdG9yeXx8IWEuaGlzdG9yeS5wdXNoU3RhdGV8fDQ+Y3x8ZSksaGFzRXZlbnQ6ZnVuY3Rpb24oYSl7aWYoXCJpbnB1dFwiPT09YSYmMTE+PUhhKXJldHVybiExO2lmKHEoZFthXSkpe3ZhciBiPWYuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbmRbYV09XCJvblwiK2EgaW4gYn1yZXR1cm4gZFthXX0sY3NwOkNhKCksdmVuZG9yUHJlZml4OmcsdHJhbnNpdGlvbnM6bCxhbmltYXRpb25zOm0sYW5kcm9pZDpjfX1dfWZ1bmN0aW9uIHlmKCl7dGhpcy4kZ2V0PVtcIiR0ZW1wbGF0ZUNhY2hlXCIsXCIkaHR0cFwiLFwiJHFcIixcIiRzY2VcIixmdW5jdGlvbihhLGIsZCxjKXtmdW5jdGlvbiBlKGYsZyl7ZS50b3RhbFBlbmRpbmdSZXF1ZXN0cysrO0YoZikmJmEuZ2V0KGYpfHwoZj1jLmdldFRydXN0ZWRSZXNvdXJjZVVybChmKSk7dmFyIGg9Yi5kZWZhdWx0cyYmYi5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZTtFKGgpP2g9aC5maWx0ZXIoZnVuY3Rpb24oYSl7cmV0dXJuIGEhPT1hY30pOmg9PT1hYyYmKGg9bnVsbCk7cmV0dXJuIGIuZ2V0KGYse2NhY2hlOmEsdHJhbnNmb3JtUmVzcG9uc2U6aH0pW1wiZmluYWxseVwiXShmdW5jdGlvbigpe2UudG90YWxQZW5kaW5nUmVxdWVzdHMtLX0pLnRoZW4oZnVuY3Rpb24oYil7YS5wdXQoZixiLmRhdGEpO3JldHVybiBiLmRhdGF9LFxuZnVuY3Rpb24oYSl7aWYoIWcpdGhyb3cgZ2EoXCJ0cGxvYWRcIixmLGEuc3RhdHVzLGEuc3RhdHVzVGV4dCk7cmV0dXJuIGQucmVqZWN0KGEpfSl9ZS50b3RhbFBlbmRpbmdSZXF1ZXN0cz0wO3JldHVybiBlfV19ZnVuY3Rpb24gemYoKXt0aGlzLiRnZXQ9W1wiJHJvb3RTY29wZVwiLFwiJGJyb3dzZXJcIixcIiRsb2NhdGlvblwiLGZ1bmN0aW9uKGEsYixkKXtyZXR1cm57ZmluZEJpbmRpbmdzOmZ1bmN0aW9uKGEsYixkKXthPWEuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIm5nLWJpbmRpbmdcIik7dmFyIGc9W107bihhLGZ1bmN0aW9uKGEpe3ZhciBjPSQuZWxlbWVudChhKS5kYXRhKFwiJGJpbmRpbmdcIik7YyYmbihjLGZ1bmN0aW9uKGMpe2Q/KG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIit3ZChiKStcIihcXFxcc3xcXFxcfHwkKVwiKSkudGVzdChjKSYmZy5wdXNoKGEpOi0xIT1jLmluZGV4T2YoYikmJmcucHVzaChhKX0pfSk7cmV0dXJuIGd9LGZpbmRNb2RlbHM6ZnVuY3Rpb24oYSxiLGQpe2Zvcih2YXIgZz1bXCJuZy1cIixcblwiZGF0YS1uZy1cIixcIm5nXFxcXDpcIl0saD0wO2g8Zy5sZW5ndGg7KytoKXt2YXIgaz1hLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbXCIrZ1toXStcIm1vZGVsXCIrKGQ/XCI9XCI6XCIqPVwiKSsnXCInK2IrJ1wiXScpO2lmKGsubGVuZ3RoKXJldHVybiBrfX0sZ2V0TG9jYXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gZC51cmwoKX0sc2V0TG9jYXRpb246ZnVuY3Rpb24oYil7YiE9PWQudXJsKCkmJihkLnVybChiKSxhLiRkaWdlc3QoKSl9LHdoZW5TdGFibGU6ZnVuY3Rpb24oYSl7Yi5ub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzKGEpfX19XX1mdW5jdGlvbiBBZigpe3RoaXMuJGdldD1bXCIkcm9vdFNjb3BlXCIsXCIkYnJvd3NlclwiLFwiJHFcIixcIiQkcVwiLFwiJGV4Y2VwdGlvbkhhbmRsZXJcIixmdW5jdGlvbihhLGIsZCxjLGUpe2Z1bmN0aW9uIGYoZixrLGwpe0IoZil8fChsPWssaz1mLGY9eik7dmFyIG09c2EuY2FsbChhcmd1bWVudHMsMykscj11KGwpJiYhbCx0PShyP2M6ZCkuZGVmZXIoKSxuPXQucHJvbWlzZSxxO1xucT1iLmRlZmVyKGZ1bmN0aW9uKCl7dHJ5e3QucmVzb2x2ZShmLmFwcGx5KG51bGwsbSkpfWNhdGNoKGIpe3QucmVqZWN0KGIpLGUoYil9ZmluYWxseXtkZWxldGUgZ1tuLiQkdGltZW91dElkXX1yfHxhLiRhcHBseSgpfSxrKTtuLiQkdGltZW91dElkPXE7Z1txXT10O3JldHVybiBufXZhciBnPXt9O2YuY2FuY2VsPWZ1bmN0aW9uKGEpe3JldHVybiBhJiZhLiQkdGltZW91dElkIGluIGc/KGdbYS4kJHRpbWVvdXRJZF0ucmVqZWN0KFwiY2FuY2VsZWRcIiksZGVsZXRlIGdbYS4kJHRpbWVvdXRJZF0sYi5kZWZlci5jYW5jZWwoYS4kJHRpbWVvdXRJZCkpOiExfTtyZXR1cm4gZn1dfWZ1bmN0aW9uIHhhKGEpe0hhJiYoYmEuc2V0QXR0cmlidXRlKFwiaHJlZlwiLGEpLGE9YmEuaHJlZik7YmEuc2V0QXR0cmlidXRlKFwiaHJlZlwiLGEpO3JldHVybntocmVmOmJhLmhyZWYscHJvdG9jb2w6YmEucHJvdG9jb2w/YmEucHJvdG9jb2wucmVwbGFjZSgvOiQvLFwiXCIpOlwiXCIsaG9zdDpiYS5ob3N0LHNlYXJjaDpiYS5zZWFyY2g/XG5iYS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sXCJcIik6XCJcIixoYXNoOmJhLmhhc2g/YmEuaGFzaC5yZXBsYWNlKC9eIy8sXCJcIik6XCJcIixob3N0bmFtZTpiYS5ob3N0bmFtZSxwb3J0OmJhLnBvcnQscGF0aG5hbWU6XCIvXCI9PT1iYS5wYXRobmFtZS5jaGFyQXQoMCk/YmEucGF0aG5hbWU6XCIvXCIrYmEucGF0aG5hbWV9fWZ1bmN0aW9uIGdkKGEpe2E9RihhKT94YShhKTphO3JldHVybiBhLnByb3RvY29sPT09eWQucHJvdG9jb2wmJmEuaG9zdD09PXlkLmhvc3R9ZnVuY3Rpb24gQmYoKXt0aGlzLiRnZXQ9bmEoUyl9ZnVuY3Rpb24gemQoYSl7ZnVuY3Rpb24gYihhKXt0cnl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChhKX1jYXRjaChiKXtyZXR1cm4gYX19dmFyIGQ9YVswXXx8e30sYz17fSxlPVwiXCI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGEsZyxoLGssbDthPWQuY29va2llfHxcIlwiO2lmKGEhPT1lKWZvcihlPWEsYT1lLnNwbGl0KFwiOyBcIiksYz17fSxoPTA7aDxhLmxlbmd0aDtoKyspZz1hW2hdLGs9XG5nLmluZGV4T2YoXCI9XCIpLDA8ayYmKGw9YihnLnN1YnN0cmluZygwLGspKSxxKGNbbF0pJiYoY1tsXT1iKGcuc3Vic3RyaW5nKGsrMSkpKSk7cmV0dXJuIGN9fWZ1bmN0aW9uIEZmKCl7dGhpcy4kZ2V0PXpkfWZ1bmN0aW9uIEtjKGEpe2Z1bmN0aW9uIGIoZCxjKXtpZihHKGQpKXt2YXIgZT17fTtuKGQsZnVuY3Rpb24oYSxjKXtlW2NdPWIoYyxhKX0pO3JldHVybiBlfXJldHVybiBhLmZhY3RvcnkoZCtcIkZpbHRlclwiLGMpfXRoaXMucmVnaXN0ZXI9Yjt0aGlzLiRnZXQ9W1wiJGluamVjdG9yXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBhLmdldChiK1wiRmlsdGVyXCIpfX1dO2IoXCJjdXJyZW5jeVwiLEFkKTtiKFwiZGF0ZVwiLEJkKTtiKFwiZmlsdGVyXCIsZ2cpO2IoXCJqc29uXCIsaGcpO2IoXCJsaW1pdFRvXCIsaWcpO2IoXCJsb3dlcmNhc2VcIixqZyk7YihcIm51bWJlclwiLENkKTtiKFwib3JkZXJCeVwiLERkKTtiKFwidXBwZXJjYXNlXCIsa2cpfWZ1bmN0aW9uIGdnKCl7cmV0dXJuIGZ1bmN0aW9uKGEsXG5iLGQpe2lmKCFBYShhKSl7aWYobnVsbD09YSlyZXR1cm4gYTt0aHJvdyBNKFwiZmlsdGVyXCIpKFwibm90YXJyYXlcIixhKTt9dmFyIGM7c3dpdGNoKGljKGIpKXtjYXNlIFwiZnVuY3Rpb25cIjpicmVhaztjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudWxsXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJzdHJpbmdcIjpjPSEwO2Nhc2UgXCJvYmplY3RcIjpiPWxnKGIsZCxjKTticmVhaztkZWZhdWx0OnJldHVybiBhfXJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYSxiKX19ZnVuY3Rpb24gbGcoYSxiLGQpe3ZhciBjPUcoYSkmJlwiJFwiaW4gYTshMD09PWI/Yj1rYTpCKGIpfHwoYj1mdW5jdGlvbihhLGIpe2lmKHEoYSkpcmV0dXJuITE7aWYobnVsbD09PWF8fG51bGw9PT1iKXJldHVybiBhPT09YjtpZihHKGIpfHxHKGEpJiYhcmMoYSkpcmV0dXJuITE7YT1LKFwiXCIrYSk7Yj1LKFwiXCIrYik7cmV0dXJuLTEhPT1hLmluZGV4T2YoYil9KTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGMmJiFHKGUpP0phKGUsXG5hLiQsYiwhMSk6SmEoZSxhLGIsZCl9fWZ1bmN0aW9uIEphKGEsYixkLGMsZSl7dmFyIGY9aWMoYSksZz1pYyhiKTtpZihcInN0cmluZ1wiPT09ZyYmXCIhXCI9PT1iLmNoYXJBdCgwKSlyZXR1cm4hSmEoYSxiLnN1YnN0cmluZygxKSxkLGMpO2lmKEUoYSkpcmV0dXJuIGEuc29tZShmdW5jdGlvbihhKXtyZXR1cm4gSmEoYSxiLGQsYyl9KTtzd2l0Y2goZil7Y2FzZSBcIm9iamVjdFwiOnZhciBoO2lmKGMpe2ZvcihoIGluIGEpaWYoXCIkXCIhPT1oLmNoYXJBdCgwKSYmSmEoYVtoXSxiLGQsITApKXJldHVybiEwO3JldHVybiBlPyExOkphKGEsYixkLCExKX1pZihcIm9iamVjdFwiPT09Zyl7Zm9yKGggaW4gYilpZihlPWJbaF0sIUIoZSkmJiFxKGUpJiYoZj1cIiRcIj09PWgsIUphKGY/YTphW2hdLGUsZCxmLGYpKSlyZXR1cm4hMTtyZXR1cm4hMH1yZXR1cm4gZChhLGIpO2Nhc2UgXCJmdW5jdGlvblwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuIGQoYSxiKX19ZnVuY3Rpb24gaWMoYSl7cmV0dXJuIG51bGw9PT1cbmE/XCJudWxsXCI6dHlwZW9mIGF9ZnVuY3Rpb24gQWQoYSl7dmFyIGI9YS5OVU1CRVJfRk9STUFUUztyZXR1cm4gZnVuY3Rpb24oYSxjLGUpe3EoYykmJihjPWIuQ1VSUkVOQ1lfU1lNKTtxKGUpJiYoZT1iLlBBVFRFUk5TWzFdLm1heEZyYWMpO3JldHVybiBudWxsPT1hP2E6RWQoYSxiLlBBVFRFUk5TWzFdLGIuR1JPVVBfU0VQLGIuREVDSU1BTF9TRVAsZSkucmVwbGFjZSgvXFx1MDBBNC9nLGMpfX1mdW5jdGlvbiBDZChhKXt2YXIgYj1hLk5VTUJFUl9GT1JNQVRTO3JldHVybiBmdW5jdGlvbihhLGMpe3JldHVybiBudWxsPT1hP2E6RWQoYSxiLlBBVFRFUk5TWzBdLGIuR1JPVVBfU0VQLGIuREVDSU1BTF9TRVAsYyl9fWZ1bmN0aW9uIG1nKGEpe3ZhciBiPTAsZCxjLGUsZixnOy0xPChjPWEuaW5kZXhPZihGZCkpJiYoYT1hLnJlcGxhY2UoRmQsXCJcIikpOzA8KGU9YS5zZWFyY2goL2UvaSkpPygwPmMmJihjPWUpLGMrPSthLnNsaWNlKGUrMSksYT1hLnN1YnN0cmluZygwLGUpKTowPmMmJihjPVxuYS5sZW5ndGgpO2ZvcihlPTA7YS5jaGFyQXQoZSk9PWpjO2UrKyk7aWYoZT09KGc9YS5sZW5ndGgpKWQ9WzBdLGM9MTtlbHNle2ZvcihnLS07YS5jaGFyQXQoZyk9PWpjOylnLS07Yy09ZTtkPVtdO2ZvcihmPTA7ZTw9ZztlKyssZisrKWRbZl09K2EuY2hhckF0KGUpfWM+R2QmJihkPWQuc3BsaWNlKDAsR2QtMSksYj1jLTEsYz0xKTtyZXR1cm57ZDpkLGU6YixpOmN9fWZ1bmN0aW9uIG5nKGEsYixkLGMpe3ZhciBlPWEuZCxmPWUubGVuZ3RoLWEuaTtiPXEoYik/TWF0aC5taW4oTWF0aC5tYXgoZCxmKSxjKTorYjtkPWIrYS5pO2M9ZVtkXTtpZigwPGQpZS5zcGxpY2UoZCk7ZWxzZXthLmk9MTtlLmxlbmd0aD1kPWIrMTtmb3IodmFyIGc9MDtnPGQ7ZysrKWVbZ109MH1mb3IoNTw9YyYmZVtkLTFdKys7ZjxiO2YrKyllLnB1c2goMCk7aWYoYj1lLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uKGEsYixjLGQpe2IrPWE7ZFtjXT1iJTEwO3JldHVybiBNYXRoLmZsb29yKGIvMTApfSwwKSllLnVuc2hpZnQoYiksXG5hLmkrK31mdW5jdGlvbiBFZChhLGIsZCxjLGUpe2lmKCFGKGEpJiYhUShhKXx8aXNOYU4oYSkpcmV0dXJuXCJcIjt2YXIgZj0haXNGaW5pdGUoYSksZz0hMSxoPU1hdGguYWJzKGEpK1wiXCIsaz1cIlwiO2lmKGYpaz1cIlxcdTIyMWVcIjtlbHNle2c9bWcoaCk7bmcoZyxlLGIubWluRnJhYyxiLm1heEZyYWMpO2s9Zy5kO2g9Zy5pO2U9Zy5lO2Y9W107Zm9yKGc9ay5yZWR1Y2UoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYSYmIWJ9LCEwKTswPmg7KWsudW5zaGlmdCgwKSxoKys7MDxoP2Y9ay5zcGxpY2UoaCk6KGY9ayxrPVswXSk7aD1bXTtmb3Ioay5sZW5ndGg+Yi5sZ1NpemUmJmgudW5zaGlmdChrLnNwbGljZSgtYi5sZ1NpemUpLmpvaW4oXCJcIikpO2subGVuZ3RoPmIuZ1NpemU7KWgudW5zaGlmdChrLnNwbGljZSgtYi5nU2l6ZSkuam9pbihcIlwiKSk7ay5sZW5ndGgmJmgudW5zaGlmdChrLmpvaW4oXCJcIikpO2s9aC5qb2luKGQpO2YubGVuZ3RoJiYoays9YytmLmpvaW4oXCJcIikpO2UmJihrKz1cImUrXCIrZSl9cmV0dXJuIDA+XG5hJiYhZz9iLm5lZ1ByZStrK2IubmVnU3VmOmIucG9zUHJlK2srYi5wb3NTdWZ9ZnVuY3Rpb24gSWIoYSxiLGQpe3ZhciBjPVwiXCI7MD5hJiYoYz1cIi1cIixhPS1hKTtmb3IoYT1cIlwiK2E7YS5sZW5ndGg8YjspYT1qYythO2QmJihhPWEuc3Vic3RyKGEubGVuZ3RoLWIpKTtyZXR1cm4gYythfWZ1bmN0aW9uIGNhKGEsYixkLGMpe2Q9ZHx8MDtyZXR1cm4gZnVuY3Rpb24oZSl7ZT1lW1wiZ2V0XCIrYV0oKTtpZigwPGR8fGU+LWQpZSs9ZDswPT09ZSYmLTEyPT1kJiYoZT0xMik7cmV0dXJuIEliKGUsYixjKX19ZnVuY3Rpb24gSmIoYSxiKXtyZXR1cm4gZnVuY3Rpb24oZCxjKXt2YXIgZT1kW1wiZ2V0XCIrYV0oKSxmPXRiKGI/XCJTSE9SVFwiK2E6YSk7cmV0dXJuIGNbZl1bZV19fWZ1bmN0aW9uIEhkKGEpe3ZhciBiPShuZXcgRGF0ZShhLDAsMSkpLmdldERheSgpO3JldHVybiBuZXcgRGF0ZShhLDAsKDQ+PWI/NToxMiktYil9ZnVuY3Rpb24gSWQoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBkPUhkKGIuZ2V0RnVsbFllYXIoKSk7XG5iPStuZXcgRGF0ZShiLmdldEZ1bGxZZWFyKCksYi5nZXRNb250aCgpLGIuZ2V0RGF0ZSgpKyg0LWIuZ2V0RGF5KCkpKS0rZDtiPTErTWF0aC5yb3VuZChiLzYwNDhFNSk7cmV0dXJuIEliKGIsYSl9fWZ1bmN0aW9uIGtjKGEsYil7cmV0dXJuIDA+PWEuZ2V0RnVsbFllYXIoKT9iLkVSQVNbMF06Yi5FUkFTWzFdfWZ1bmN0aW9uIEJkKGEpe2Z1bmN0aW9uIGIoYSl7dmFyIGI7aWYoYj1hLm1hdGNoKGQpKXthPW5ldyBEYXRlKDApO3ZhciBmPTAsZz0wLGg9Yls4XT9hLnNldFVUQ0Z1bGxZZWFyOmEuc2V0RnVsbFllYXIsaz1iWzhdP2Euc2V0VVRDSG91cnM6YS5zZXRIb3VycztiWzldJiYoZj1aKGJbOV0rYlsxMF0pLGc9WihiWzldK2JbMTFdKSk7aC5jYWxsKGEsWihiWzFdKSxaKGJbMl0pLTEsWihiWzNdKSk7Zj1aKGJbNF18fDApLWY7Zz1aKGJbNV18fDApLWc7aD1aKGJbNl18fDApO2I9TWF0aC5yb3VuZCgxRTMqcGFyc2VGbG9hdChcIjAuXCIrKGJbN118fDApKSk7ay5jYWxsKGEsZixnLFxuaCxiKX1yZXR1cm4gYX12YXIgZD0vXihcXGR7NH0pLT8oXFxkXFxkKS0/KFxcZFxcZCkoPzpUKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlxcLihcXGQrKSk/KT8pPyhafChbKy1dKShcXGRcXGQpOj8oXFxkXFxkKSk/KT8kLztyZXR1cm4gZnVuY3Rpb24oYyxkLGYpe3ZhciBnPVwiXCIsaD1bXSxrLGw7ZD1kfHxcIm1lZGl1bURhdGVcIjtkPWEuREFURVRJTUVfRk9STUFUU1tkXXx8ZDtGKGMpJiYoYz1vZy50ZXN0KGMpP1ooYyk6YihjKSk7UShjKSYmKGM9bmV3IERhdGUoYykpO2lmKCFkYShjKXx8IWlzRmluaXRlKGMuZ2V0VGltZSgpKSlyZXR1cm4gYztmb3IoO2Q7KShsPXBnLmV4ZWMoZCkpPyhoPWJiKGgsbCwxKSxkPWgucG9wKCkpOihoLnB1c2goZCksZD1udWxsKTt2YXIgbT1jLmdldFRpbWV6b25lT2Zmc2V0KCk7ZiYmKG09d2MoZixjLmdldFRpbWV6b25lT2Zmc2V0KCkpLGM9UmIoYyxmLCEwKSk7bihoLGZ1bmN0aW9uKGIpe2s9cWdbYl07Zys9az9rKGMsYS5EQVRFVElNRV9GT1JNQVRTLG0pOlxuYi5yZXBsYWNlKC8oXid8JyQpL2csXCJcIikucmVwbGFjZSgvJycvZyxcIidcIil9KTtyZXR1cm4gZ319ZnVuY3Rpb24gaGcoKXtyZXR1cm4gZnVuY3Rpb24oYSxiKXtxKGIpJiYoYj0yKTtyZXR1cm4gY2IoYSxiKX19ZnVuY3Rpb24gaWcoKXtyZXR1cm4gZnVuY3Rpb24oYSxiLGQpe2I9SW5maW5pdHk9PT1NYXRoLmFicyhOdW1iZXIoYikpP051bWJlcihiKTpaKGIpO2lmKGlzTmFOKGIpKXJldHVybiBhO1EoYSkmJihhPWEudG9TdHJpbmcoKSk7aWYoIUUoYSkmJiFGKGEpKXJldHVybiBhO2Q9IWR8fGlzTmFOKGQpPzA6WihkKTtkPTA+ZD9NYXRoLm1heCgwLGEubGVuZ3RoK2QpOmQ7cmV0dXJuIDA8PWI/YS5zbGljZShkLGQrYik6MD09PWQ/YS5zbGljZShiLGEubGVuZ3RoKTphLnNsaWNlKE1hdGgubWF4KDAsZCtiKSxkKX19ZnVuY3Rpb24gRGQoYSl7ZnVuY3Rpb24gYihiLGQpe2Q9ZD8tMToxO3JldHVybiBiLm1hcChmdW5jdGlvbihiKXt2YXIgYz0xLGg9WWE7aWYoQihiKSloPWI7ZWxzZSBpZihGKGIpKXtpZihcIitcIj09XG5iLmNoYXJBdCgwKXx8XCItXCI9PWIuY2hhckF0KDApKWM9XCItXCI9PWIuY2hhckF0KDApPy0xOjEsYj1iLnN1YnN0cmluZygxKTtpZihcIlwiIT09YiYmKGg9YShiKSxoLmNvbnN0YW50KSl2YXIgaz1oKCksaD1mdW5jdGlvbihhKXtyZXR1cm4gYVtrXX19cmV0dXJue2dldDpoLGRlc2NlbmRpbmc6YypkfX0pfWZ1bmN0aW9uIGQoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwibnVtYmVyXCI6Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwic3RyaW5nXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19cmV0dXJuIGZ1bmN0aW9uKGEsZSxmKXtpZighQWEoYSkpcmV0dXJuIGE7RShlKXx8KGU9W2VdKTswPT09ZS5sZW5ndGgmJihlPVtcIitcIl0pO3ZhciBnPWIoZSxmKTtnLnB1c2goe2dldDpmdW5jdGlvbigpe3JldHVybnt9fSxkZXNjZW5kaW5nOmY/LTE6MX0pO2E9QXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGEsZnVuY3Rpb24oYSxiKXtyZXR1cm57dmFsdWU6YSxwcmVkaWNhdGVWYWx1ZXM6Zy5tYXAoZnVuY3Rpb24oYyl7dmFyIGU9XG5jLmdldChhKTtjPXR5cGVvZiBlO2lmKG51bGw9PT1lKWM9XCJzdHJpbmdcIixlPVwibnVsbFwiO2Vsc2UgaWYoXCJzdHJpbmdcIj09PWMpZT1lLnRvTG93ZXJDYXNlKCk7ZWxzZSBpZihcIm9iamVjdFwiPT09YylhOntpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS52YWx1ZU9mJiYoZT1lLnZhbHVlT2YoKSxkKGUpKSlicmVhayBhO2lmKHJjKGUpJiYoZT1lLnRvU3RyaW5nKCksZChlKSkpYnJlYWsgYTtlPWJ9cmV0dXJue3ZhbHVlOmUsdHlwZTpjfX0pfX0pO2Euc29ydChmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wLGQ9MCxlPWcubGVuZ3RoO2Q8ZTsrK2Qpe3ZhciBjPWEucHJlZGljYXRlVmFsdWVzW2RdLGY9Yi5wcmVkaWNhdGVWYWx1ZXNbZF0sbj0wO2MudHlwZT09PWYudHlwZT9jLnZhbHVlIT09Zi52YWx1ZSYmKG49Yy52YWx1ZTxmLnZhbHVlPy0xOjEpOm49Yy50eXBlPGYudHlwZT8tMToxO2lmKGM9bipnW2RdLmRlc2NlbmRpbmcpYnJlYWt9cmV0dXJuIGN9KTtyZXR1cm4gYT1hLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS52YWx1ZX0pfX1cbmZ1bmN0aW9uIEthKGEpe0IoYSkmJihhPXtsaW5rOmF9KTthLnJlc3RyaWN0PWEucmVzdHJpY3R8fFwiQUNcIjtyZXR1cm4gbmEoYSl9ZnVuY3Rpb24gSmQoYSxiLGQsYyxlKXt2YXIgZj10aGlzLGc9W107Zi4kZXJyb3I9e307Zi4kJHN1Y2Nlc3M9e307Zi4kcGVuZGluZz13O2YuJG5hbWU9ZShiLm5hbWV8fGIubmdGb3JtfHxcIlwiKShkKTtmLiRkaXJ0eT0hMTtmLiRwcmlzdGluZT0hMDtmLiR2YWxpZD0hMDtmLiRpbnZhbGlkPSExO2YuJHN1Ym1pdHRlZD0hMTtmLiQkcGFyZW50Rm9ybT1LYjtmLiRyb2xsYmFja1ZpZXdWYWx1ZT1mdW5jdGlvbigpe24oZyxmdW5jdGlvbihhKXthLiRyb2xsYmFja1ZpZXdWYWx1ZSgpfSl9O2YuJGNvbW1pdFZpZXdWYWx1ZT1mdW5jdGlvbigpe24oZyxmdW5jdGlvbihhKXthLiRjb21taXRWaWV3VmFsdWUoKX0pfTtmLiRhZGRDb250cm9sPWZ1bmN0aW9uKGEpe1JhKGEuJG5hbWUsXCJpbnB1dFwiKTtnLnB1c2goYSk7YS4kbmFtZSYmKGZbYS4kbmFtZV09YSk7YS4kJHBhcmVudEZvcm09XG5mfTtmLiQkcmVuYW1lQ29udHJvbD1mdW5jdGlvbihhLGIpe3ZhciBjPWEuJG5hbWU7ZltjXT09PWEmJmRlbGV0ZSBmW2NdO2ZbYl09YTthLiRuYW1lPWJ9O2YuJHJlbW92ZUNvbnRyb2w9ZnVuY3Rpb24oYSl7YS4kbmFtZSYmZlthLiRuYW1lXT09PWEmJmRlbGV0ZSBmW2EuJG5hbWVdO24oZi4kcGVuZGluZyxmdW5jdGlvbihiLGMpe2YuJHNldFZhbGlkaXR5KGMsbnVsbCxhKX0pO24oZi4kZXJyb3IsZnVuY3Rpb24oYixjKXtmLiRzZXRWYWxpZGl0eShjLG51bGwsYSl9KTtuKGYuJCRzdWNjZXNzLGZ1bmN0aW9uKGIsYyl7Zi4kc2V0VmFsaWRpdHkoYyxudWxsLGEpfSk7YWIoZyxhKTthLiQkcGFyZW50Rm9ybT1LYn07S2Qoe2N0cmw6dGhpcywkZWxlbWVudDphLHNldDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9YVtiXTtkPy0xPT09ZC5pbmRleE9mKGMpJiZkLnB1c2goYyk6YVtiXT1bY119LHVuc2V0OmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hW2JdO2QmJihhYihkLGMpLDA9PT1kLmxlbmd0aCYmXG5kZWxldGUgYVtiXSl9LCRhbmltYXRlOmN9KTtmLiRzZXREaXJ0eT1mdW5jdGlvbigpe2MucmVtb3ZlQ2xhc3MoYSxXYSk7Yy5hZGRDbGFzcyhhLExiKTtmLiRkaXJ0eT0hMDtmLiRwcmlzdGluZT0hMTtmLiQkcGFyZW50Rm9ybS4kc2V0RGlydHkoKX07Zi4kc2V0UHJpc3RpbmU9ZnVuY3Rpb24oKXtjLnNldENsYXNzKGEsV2EsTGIrXCIgbmctc3VibWl0dGVkXCIpO2YuJGRpcnR5PSExO2YuJHByaXN0aW5lPSEwO2YuJHN1Ym1pdHRlZD0hMTtuKGcsZnVuY3Rpb24oYSl7YS4kc2V0UHJpc3RpbmUoKX0pfTtmLiRzZXRVbnRvdWNoZWQ9ZnVuY3Rpb24oKXtuKGcsZnVuY3Rpb24oYSl7YS4kc2V0VW50b3VjaGVkKCl9KX07Zi4kc2V0U3VibWl0dGVkPWZ1bmN0aW9uKCl7Yy5hZGRDbGFzcyhhLFwibmctc3VibWl0dGVkXCIpO2YuJHN1Ym1pdHRlZD0hMDtmLiQkcGFyZW50Rm9ybS4kc2V0U3VibWl0dGVkKCl9fWZ1bmN0aW9uIGxjKGEpe2EuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbihiKXtyZXR1cm4gYS4kaXNFbXB0eShiKT9cbmI6Yi50b1N0cmluZygpfSl9ZnVuY3Rpb24ga2IoYSxiLGQsYyxlLGYpe3ZhciBnPUsoYlswXS50eXBlKTtpZighZS5hbmRyb2lkKXt2YXIgaD0hMTtiLm9uKFwiY29tcG9zaXRpb25zdGFydFwiLGZ1bmN0aW9uKGEpe2g9ITB9KTtiLm9uKFwiY29tcG9zaXRpb25lbmRcIixmdW5jdGlvbigpe2g9ITE7aygpfSl9dmFyIGs9ZnVuY3Rpb24oYSl7bCYmKGYuZGVmZXIuY2FuY2VsKGwpLGw9bnVsbCk7aWYoIWgpe3ZhciBlPWIudmFsKCk7YT1hJiZhLnR5cGU7XCJwYXNzd29yZFwiPT09Z3x8ZC5uZ1RyaW0mJlwiZmFsc2VcIj09PWQubmdUcmltfHwoZT1UKGUpKTsoYy4kdmlld1ZhbHVlIT09ZXx8XCJcIj09PWUmJmMuJCRoYXNOYXRpdmVWYWxpZGF0b3JzKSYmYy4kc2V0Vmlld1ZhbHVlKGUsYSl9fTtpZihlLmhhc0V2ZW50KFwiaW5wdXRcIikpYi5vbihcImlucHV0XCIsayk7ZWxzZXt2YXIgbCxtPWZ1bmN0aW9uKGEsYixjKXtsfHwobD1mLmRlZmVyKGZ1bmN0aW9uKCl7bD1udWxsO2ImJmIudmFsdWU9PT1jfHxrKGEpfSkpfTtcbmIub24oXCJrZXlkb3duXCIsZnVuY3Rpb24oYSl7dmFyIGI9YS5rZXlDb2RlOzkxPT09Ynx8MTU8YiYmMTk+Ynx8Mzc8PWImJjQwPj1ifHxtKGEsdGhpcyx0aGlzLnZhbHVlKX0pO2lmKGUuaGFzRXZlbnQoXCJwYXN0ZVwiKSliLm9uKFwicGFzdGUgY3V0XCIsbSl9Yi5vbihcImNoYW5nZVwiLGspO2MuJHJlbmRlcj1mdW5jdGlvbigpe3ZhciBhPWMuJGlzRW1wdHkoYy4kdmlld1ZhbHVlKT9cIlwiOmMuJHZpZXdWYWx1ZTtiLnZhbCgpIT09YSYmYi52YWwoYSl9fWZ1bmN0aW9uIE1iKGEsYil7cmV0dXJuIGZ1bmN0aW9uKGQsYyl7dmFyIGUsZjtpZihkYShkKSlyZXR1cm4gZDtpZihGKGQpKXsnXCInPT1kLmNoYXJBdCgwKSYmJ1wiJz09ZC5jaGFyQXQoZC5sZW5ndGgtMSkmJihkPWQuc3Vic3RyaW5nKDEsZC5sZW5ndGgtMSkpO2lmKHJnLnRlc3QoZCkpcmV0dXJuIG5ldyBEYXRlKGQpO2EubGFzdEluZGV4PTA7aWYoZT1hLmV4ZWMoZCkpcmV0dXJuIGUuc2hpZnQoKSxmPWM/e3l5eXk6Yy5nZXRGdWxsWWVhcigpLFxuTU06Yy5nZXRNb250aCgpKzEsZGQ6Yy5nZXREYXRlKCksSEg6Yy5nZXRIb3VycygpLG1tOmMuZ2V0TWludXRlcygpLHNzOmMuZ2V0U2Vjb25kcygpLHNzczpjLmdldE1pbGxpc2Vjb25kcygpLzFFM306e3l5eXk6MTk3MCxNTToxLGRkOjEsSEg6MCxtbTowLHNzOjAsc3NzOjB9LG4oZSxmdW5jdGlvbihhLGMpe2M8Yi5sZW5ndGgmJihmW2JbY11dPSthKX0pLG5ldyBEYXRlKGYueXl5eSxmLk1NLTEsZi5kZCxmLkhILGYubW0sZi5zc3x8MCwxRTMqZi5zc3N8fDApfXJldHVybiBOYU59fWZ1bmN0aW9uIGxiKGEsYixkLGMpe3JldHVybiBmdW5jdGlvbihlLGYsZyxoLGssbCxtKXtmdW5jdGlvbiByKGEpe3JldHVybiBhJiYhKGEuZ2V0VGltZSYmYS5nZXRUaW1lKCkhPT1hLmdldFRpbWUoKSl9ZnVuY3Rpb24gbihhKXtyZXR1cm4gdShhKSYmIWRhKGEpP2QoYSl8fHc6YX1MZChlLGYsZyxoKTtrYihlLGYsZyxoLGssbCk7dmFyIEM9aCYmaC4kb3B0aW9ucyYmaC4kb3B0aW9ucy50aW1lem9uZSxcbnk7aC4kJHBhcnNlck5hbWU9YTtoLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24oYSl7cmV0dXJuIGguJGlzRW1wdHkoYSk/bnVsbDpiLnRlc3QoYSk/KGE9ZChhLHkpLEMmJihhPVJiKGEsQykpLGEpOnd9KTtoLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24oYSl7aWYoYSYmIWRhKGEpKXRocm93IG1iKFwiZGF0ZWZtdFwiLGEpO2lmKHIoYSkpcmV0dXJuKHk9YSkmJkMmJih5PVJiKHksQywhMCkpLG0oXCJkYXRlXCIpKGEsYyxDKTt5PW51bGw7cmV0dXJuXCJcIn0pO2lmKHUoZy5taW4pfHxnLm5nTWluKXt2YXIgcztoLiR2YWxpZGF0b3JzLm1pbj1mdW5jdGlvbihhKXtyZXR1cm4hcihhKXx8cShzKXx8ZChhKT49c307Zy4kb2JzZXJ2ZShcIm1pblwiLGZ1bmN0aW9uKGEpe3M9bihhKTtoLiR2YWxpZGF0ZSgpfSl9aWYodShnLm1heCl8fGcubmdNYXgpe3ZhciBwO2guJHZhbGlkYXRvcnMubWF4PWZ1bmN0aW9uKGEpe3JldHVybiFyKGEpfHxxKHApfHxkKGEpPD1wfTtnLiRvYnNlcnZlKFwibWF4XCIsZnVuY3Rpb24oYSl7cD1cbm4oYSk7aC4kdmFsaWRhdGUoKX0pfX19ZnVuY3Rpb24gTGQoYSxiLGQsYyl7KGMuJCRoYXNOYXRpdmVWYWxpZGF0b3JzPUcoYlswXS52YWxpZGl0eSkpJiZjLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24oYSl7dmFyIGM9Yi5wcm9wKFwidmFsaWRpdHlcIil8fHt9O3JldHVybiBjLmJhZElucHV0JiYhYy50eXBlTWlzbWF0Y2g/dzphfSl9ZnVuY3Rpb24gTWQoYSxiLGQsYyxlKXtpZih1KGMpKXthPWEoYyk7aWYoIWEuY29uc3RhbnQpdGhyb3cgbWIoXCJjb25zdGV4cHJcIixkLGMpO3JldHVybiBhKGIpfXJldHVybiBlfWZ1bmN0aW9uIG1jKGEsYil7YT1cIm5nQ2xhc3NcIithO3JldHVybltcIiRhbmltYXRlXCIsZnVuY3Rpb24oZCl7ZnVuY3Rpb24gYyhhLGIpe3ZhciBjPVtdLGQ9MDthOmZvcig7ZDxhLmxlbmd0aDtkKyspe2Zvcih2YXIgZT1hW2RdLG09MDttPGIubGVuZ3RoO20rKylpZihlPT1iW21dKWNvbnRpbnVlIGE7Yy5wdXNoKGUpfXJldHVybiBjfWZ1bmN0aW9uIGUoYSl7dmFyIGI9W107cmV0dXJuIEUoYSk/XG4obihhLGZ1bmN0aW9uKGEpe2I9Yi5jb25jYXQoZShhKSl9KSxiKTpGKGEpP2Euc3BsaXQoXCIgXCIpOkcoYSk/KG4oYSxmdW5jdGlvbihhLGMpe2EmJihiPWIuY29uY2F0KGMuc3BsaXQoXCIgXCIpKSl9KSxiKTphfXJldHVybntyZXN0cmljdDpcIkFDXCIsbGluazpmdW5jdGlvbihmLGcsaCl7ZnVuY3Rpb24gayhhLGIpe3ZhciBjPWcuZGF0YShcIiRjbGFzc0NvdW50c1wiKXx8ZWEoKSxkPVtdO24oYSxmdW5jdGlvbihhKXtpZigwPGJ8fGNbYV0pY1thXT0oY1thXXx8MCkrYixjW2FdPT09KygwPGIpJiZkLnB1c2goYSl9KTtnLmRhdGEoXCIkY2xhc3NDb3VudHNcIixjKTtyZXR1cm4gZC5qb2luKFwiIFwiKX1mdW5jdGlvbiBsKGEpe2lmKCEwPT09Ynx8Zi4kaW5kZXglMj09PWIpe3ZhciBsPWUoYXx8W10pO2lmKCFtKXt2YXIgbj1rKGwsMSk7aC4kYWRkQ2xhc3Mobil9ZWxzZSBpZigha2EoYSxtKSl7dmFyIHE9ZShtKSxuPWMobCxxKSxsPWMocSxsKSxuPWsobiwxKSxsPWsobCwtMSk7biYmbi5sZW5ndGgmJlxuZC5hZGRDbGFzcyhnLG4pO2wmJmwubGVuZ3RoJiZkLnJlbW92ZUNsYXNzKGcsbCl9fW09aGEoYSl9dmFyIG07Zi4kd2F0Y2goaFthXSxsLCEwKTtoLiRvYnNlcnZlKFwiY2xhc3NcIixmdW5jdGlvbihiKXtsKGYuJGV2YWwoaFthXSkpfSk7XCJuZ0NsYXNzXCIhPT1hJiZmLiR3YXRjaChcIiRpbmRleFwiLGZ1bmN0aW9uKGMsZCl7dmFyIGc9YyYxO2lmKGchPT0oZCYxKSl7dmFyIGw9ZShmLiRldmFsKGhbYV0pKTtnPT09Yj8oZz1rKGwsMSksaC4kYWRkQ2xhc3MoZykpOihnPWsobCwtMSksaC4kcmVtb3ZlQ2xhc3MoZykpfX0pfX19XX1mdW5jdGlvbiBLZChhKXtmdW5jdGlvbiBiKGEsYil7YiYmIWZbYV0/KGsuYWRkQ2xhc3MoZSxhKSxmW2FdPSEwKTohYiYmZlthXSYmKGsucmVtb3ZlQ2xhc3MoZSxhKSxmW2FdPSExKX1mdW5jdGlvbiBkKGEsYyl7YT1hP1wiLVwiK0FjKGEsXCItXCIpOlwiXCI7YihuYithLCEwPT09Yyk7YihOZCthLCExPT09Yyl9dmFyIGM9YS5jdHJsLGU9YS4kZWxlbWVudCxmPXt9LGc9XG5hLnNldCxoPWEudW5zZXQsaz1hLiRhbmltYXRlO2ZbTmRdPSEoZltuYl09ZS5oYXNDbGFzcyhuYikpO2MuJHNldFZhbGlkaXR5PWZ1bmN0aW9uKGEsZSxmKXtxKGUpPyhjLiRwZW5kaW5nfHwoYy4kcGVuZGluZz17fSksZyhjLiRwZW5kaW5nLGEsZikpOihjLiRwZW5kaW5nJiZoKGMuJHBlbmRpbmcsYSxmKSxPZChjLiRwZW5kaW5nKSYmKGMuJHBlbmRpbmc9dykpOyRhKGUpP2U/KGgoYy4kZXJyb3IsYSxmKSxnKGMuJCRzdWNjZXNzLGEsZikpOihnKGMuJGVycm9yLGEsZiksaChjLiQkc3VjY2VzcyxhLGYpKTooaChjLiRlcnJvcixhLGYpLGgoYy4kJHN1Y2Nlc3MsYSxmKSk7Yy4kcGVuZGluZz8oYihQZCwhMCksYy4kdmFsaWQ9Yy4kaW52YWxpZD13LGQoXCJcIixudWxsKSk6KGIoUGQsITEpLGMuJHZhbGlkPU9kKGMuJGVycm9yKSxjLiRpbnZhbGlkPSFjLiR2YWxpZCxkKFwiXCIsYy4kdmFsaWQpKTtlPWMuJHBlbmRpbmcmJmMuJHBlbmRpbmdbYV0/dzpjLiRlcnJvclthXT8hMTpjLiQkc3VjY2Vzc1thXT9cbiEwOm51bGw7ZChhLGUpO2MuJCRwYXJlbnRGb3JtLiRzZXRWYWxpZGl0eShhLGUsYyl9fWZ1bmN0aW9uIE9kKGEpe2lmKGEpZm9yKHZhciBiIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShiKSlyZXR1cm4hMTtyZXR1cm4hMH12YXIgc2c9L15cXC8oLispXFwvKFthLXpdKikkLyxLPWZ1bmN0aW9uKGEpe3JldHVybiBGKGEpP2EudG9Mb3dlckNhc2UoKTphfSxyYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHRiPWZ1bmN0aW9uKGEpe3JldHVybiBGKGEpP2EudG9VcHBlckNhc2UoKTphfSxIYSxBLHBhLHNhPVtdLnNsaWNlLFVmPVtdLnNwbGljZSx0Zz1bXS5wdXNoLHRhPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsc2M9T2JqZWN0LmdldFByb3RvdHlwZU9mLEJhPU0oXCJuZ1wiKSwkPVMuYW5ndWxhcnx8KFMuYW5ndWxhcj17fSksVWIsb2I9MDtIYT1XLmRvY3VtZW50TW9kZTt6LiRpbmplY3Q9W107WWEuJGluamVjdD1bXTt2YXIgRT1BcnJheS5pc0FycmF5LFpkPS9eXFxbb2JqZWN0ICg/OlVpbnQ4fFVpbnQ4Q2xhbXBlZHxVaW50MTZ8VWludDMyfEludDh8SW50MTZ8SW50MzJ8RmxvYXQzMnxGbG9hdDY0KUFycmF5XFxdJC8sXG5UPWZ1bmN0aW9uKGEpe3JldHVybiBGKGEpP2EudHJpbSgpOmF9LHdkPWZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoLyhbLSgpXFxbXFxde30rPyouJFxcXnwsOiM8IVxcXFxdKS9nLFwiXFxcXCQxXCIpLnJlcGxhY2UoL1xceDA4L2csXCJcXFxceDA4XCIpfSxDYT1mdW5jdGlvbigpe2lmKCF1KENhLnJ1bGVzKSl7dmFyIGE9Vy5xdWVyeVNlbGVjdG9yKFwiW25nLWNzcF1cIil8fFcucXVlcnlTZWxlY3RvcihcIltkYXRhLW5nLWNzcF1cIik7aWYoYSl7dmFyIGI9YS5nZXRBdHRyaWJ1dGUoXCJuZy1jc3BcIil8fGEuZ2V0QXR0cmlidXRlKFwiZGF0YS1uZy1jc3BcIik7Q2EucnVsZXM9e25vVW5zYWZlRXZhbDohYnx8LTEhPT1iLmluZGV4T2YoXCJuby11bnNhZmUtZXZhbFwiKSxub0lubGluZVN0eWxlOiFifHwtMSE9PWIuaW5kZXhPZihcIm5vLWlubGluZS1zdHlsZVwiKX19ZWxzZXthPUNhO3RyeXtuZXcgRnVuY3Rpb24oXCJcIiksYj0hMX1jYXRjaChkKXtiPSEwfWEucnVsZXM9e25vVW5zYWZlRXZhbDpiLG5vSW5saW5lU3R5bGU6ITF9fX1yZXR1cm4gQ2EucnVsZXN9LFxucWI9ZnVuY3Rpb24oKXtpZih1KHFiLm5hbWVfKSlyZXR1cm4gcWIubmFtZV87dmFyIGEsYixkPU9hLmxlbmd0aCxjLGU7Zm9yKGI9MDtiPGQ7KytiKWlmKGM9T2FbYl0sYT1XLnF1ZXJ5U2VsZWN0b3IoXCJbXCIrYy5yZXBsYWNlKFwiOlwiLFwiXFxcXDpcIikrXCJqcV1cIikpe2U9YS5nZXRBdHRyaWJ1dGUoYytcImpxXCIpO2JyZWFrfXJldHVybiBxYi5uYW1lXz1lfSxPYT1bXCJuZy1cIixcImRhdGEtbmctXCIsXCJuZzpcIixcIngtbmctXCJdLGZlPS9bQS1aXS9nLEJjPSExLFRiLE5hPTMsamU9e2Z1bGw6XCIxLjQuOVwiLG1ham9yOjEsbWlub3I6NCxkb3Q6OSxjb2RlTmFtZTpcImltcGxpY2l0LXN1cGVyYW5udWF0aW9uXCJ9O1AuZXhwYW5kbz1cIm5nMzM5XCI7dmFyIGZiPVAuY2FjaGU9e30sTGY9MTtQLl9kYXRhPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmNhY2hlW2FbdGhpcy5leHBhbmRvXV18fHt9fTt2YXIgR2Y9LyhbXFw6XFwtXFxfXSsoLikpL2csSGY9L15tb3ooW0EtWl0pLyx5Yj17bW91c2VsZWF2ZTpcIm1vdXNlb3V0XCIsXG5tb3VzZWVudGVyOlwibW91c2VvdmVyXCJ9LFdiPU0oXCJqcUxpdGVcIiksS2Y9L148KFtcXHctXSspXFxzKlxcLz8+KD86PFxcL1xcMT58KSQvLFZiPS88fCYjP1xcdys7LyxJZj0vPChbXFx3Oi1dKykvLEpmPS88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6LV0rKVtePl0qKVxcLz4vZ2ksamE9e29wdGlvbjpbMSwnPHNlbGVjdCBtdWx0aXBsZT1cIm11bHRpcGxlXCI+JyxcIjwvc2VsZWN0PlwiXSx0aGVhZDpbMSxcIjx0YWJsZT5cIixcIjwvdGFibGU+XCJdLGNvbDpbMixcIjx0YWJsZT48Y29sZ3JvdXA+XCIsXCI8L2NvbGdyb3VwPjwvdGFibGU+XCJdLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sdGQ6WzMsXCI8dGFibGU+PHRib2R5Pjx0cj5cIixcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxfZGVmYXVsdDpbMCxcIlwiLFwiXCJdfTtqYS5vcHRncm91cD1qYS5vcHRpb247amEudGJvZHk9amEudGZvb3Q9amEuY29sZ3JvdXA9amEuY2FwdGlvbj1qYS50aGVhZDtcbmphLnRoPWphLnRkO3ZhciBRZj1Ob2RlLnByb3RvdHlwZS5jb250YWluc3x8ZnVuY3Rpb24oYSl7cmV0dXJuISEodGhpcy5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhKSYxNil9LFBhPVAucHJvdG90eXBlPXtyZWFkeTpmdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7ZHx8KGQ9ITAsYSgpKX12YXIgZD0hMTtcImNvbXBsZXRlXCI9PT1XLnJlYWR5U3RhdGU/c2V0VGltZW91dChiKToodGhpcy5vbihcIkRPTUNvbnRlbnRMb2FkZWRcIixiKSxQKFMpLm9uKFwibG9hZFwiLGIpKX0sdG9TdHJpbmc6ZnVuY3Rpb24oKXt2YXIgYT1bXTtuKHRoaXMsZnVuY3Rpb24oYil7YS5wdXNoKFwiXCIrYil9KTtyZXR1cm5cIltcIithLmpvaW4oXCIsIFwiKStcIl1cIn0sZXE6ZnVuY3Rpb24oYSl7cmV0dXJuIDA8PWE/QSh0aGlzW2FdKTpBKHRoaXNbdGhpcy5sZW5ndGgrYV0pfSxsZW5ndGg6MCxwdXNoOnRnLHNvcnQ6W10uc29ydCxzcGxpY2U6W10uc3BsaWNlfSxEYj17fTtuKFwibXVsdGlwbGUgc2VsZWN0ZWQgY2hlY2tlZCBkaXNhYmxlZCByZWFkT25seSByZXF1aXJlZCBvcGVuXCIuc3BsaXQoXCIgXCIpLFxuZnVuY3Rpb24oYSl7RGJbSyhhKV09YX0pO3ZhciBTYz17fTtuKFwiaW5wdXQgc2VsZWN0IG9wdGlvbiB0ZXh0YXJlYSBidXR0b24gZm9ybSBkZXRhaWxzXCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEpe1NjW2FdPSEwfSk7dmFyIGFkPXtuZ01pbmxlbmd0aDpcIm1pbmxlbmd0aFwiLG5nTWF4bGVuZ3RoOlwibWF4bGVuZ3RoXCIsbmdNaW46XCJtaW5cIixuZ01heDpcIm1heFwiLG5nUGF0dGVybjpcInBhdHRlcm5cIn07bih7ZGF0YTpZYixyZW1vdmVEYXRhOndiLGhhc0RhdGE6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiIGluIGZiW2EubmczMzldKXJldHVybiEwO3JldHVybiExfX0sZnVuY3Rpb24oYSxiKXtQW2JdPWF9KTtuKHtkYXRhOlliLGluaGVyaXRlZERhdGE6Q2Isc2NvcGU6ZnVuY3Rpb24oYSl7cmV0dXJuIEEuZGF0YShhLFwiJHNjb3BlXCIpfHxDYihhLnBhcmVudE5vZGV8fGEsW1wiJGlzb2xhdGVTY29wZVwiLFwiJHNjb3BlXCJdKX0saXNvbGF0ZVNjb3BlOmZ1bmN0aW9uKGEpe3JldHVybiBBLmRhdGEoYSxcIiRpc29sYXRlU2NvcGVcIil8fFxuQS5kYXRhKGEsXCIkaXNvbGF0ZVNjb3BlTm9UZW1wbGF0ZVwiKX0sY29udHJvbGxlcjpQYyxpbmplY3RvcjpmdW5jdGlvbihhKXtyZXR1cm4gQ2IoYSxcIiRpbmplY3RvclwiKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihhLGIpe2EucmVtb3ZlQXR0cmlidXRlKGIpfSxoYXNDbGFzczp6Yixjc3M6ZnVuY3Rpb24oYSxiLGQpe2I9ZWIoYik7aWYodShkKSlhLnN0eWxlW2JdPWQ7ZWxzZSByZXR1cm4gYS5zdHlsZVtiXX0sYXR0cjpmdW5jdGlvbihhLGIsZCl7dmFyIGM9YS5ub2RlVHlwZTtpZihjIT09TmEmJjIhPT1jJiY4IT09YylpZihjPUsoYiksRGJbY10paWYodShkKSlkPyhhW2JdPSEwLGEuc2V0QXR0cmlidXRlKGIsYykpOihhW2JdPSExLGEucmVtb3ZlQXR0cmlidXRlKGMpKTtlbHNlIHJldHVybiBhW2JdfHwoYS5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbShiKXx8eikuc3BlY2lmaWVkP2M6dztlbHNlIGlmKHUoZCkpYS5zZXRBdHRyaWJ1dGUoYixkKTtlbHNlIGlmKGEuZ2V0QXR0cmlidXRlKXJldHVybiBhPVxuYS5nZXRBdHRyaWJ1dGUoYiwyKSxudWxsPT09YT93OmF9LHByb3A6ZnVuY3Rpb24oYSxiLGQpe2lmKHUoZCkpYVtiXT1kO2Vsc2UgcmV0dXJuIGFbYl19LHRleHQ6ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEsZCl7aWYocShkKSl7dmFyIGM9YS5ub2RlVHlwZTtyZXR1cm4gMT09PWN8fGM9PT1OYT9hLnRleHRDb250ZW50OlwiXCJ9YS50ZXh0Q29udGVudD1kfWEuJGR2PVwiXCI7cmV0dXJuIGF9KCksdmFsOmZ1bmN0aW9uKGEsYil7aWYocShiKSl7aWYoYS5tdWx0aXBsZSYmXCJzZWxlY3RcIj09PW9hKGEpKXt2YXIgZD1bXTtuKGEub3B0aW9ucyxmdW5jdGlvbihhKXthLnNlbGVjdGVkJiZkLnB1c2goYS52YWx1ZXx8YS50ZXh0KX0pO3JldHVybiAwPT09ZC5sZW5ndGg/bnVsbDpkfXJldHVybiBhLnZhbHVlfWEudmFsdWU9Yn0saHRtbDpmdW5jdGlvbihhLGIpe2lmKHEoYikpcmV0dXJuIGEuaW5uZXJIVE1MO3ZiKGEsITApO2EuaW5uZXJIVE1MPWJ9LGVtcHR5OlFjfSxmdW5jdGlvbihhLGIpe1AucHJvdG90eXBlW2JdPVxuZnVuY3Rpb24oYixjKXt2YXIgZSxmLGc9dGhpcy5sZW5ndGg7aWYoYSE9PVFjJiZxKDI9PWEubGVuZ3RoJiZhIT09emImJmEhPT1QYz9iOmMpKXtpZihHKGIpKXtmb3IoZT0wO2U8ZztlKyspaWYoYT09PVliKWEodGhpc1tlXSxiKTtlbHNlIGZvcihmIGluIGIpYSh0aGlzW2VdLGYsYltmXSk7cmV0dXJuIHRoaXN9ZT1hLiRkdjtnPXEoZSk/TWF0aC5taW4oZywxKTpnO2ZvcihmPTA7ZjxnO2YrKyl7dmFyIGg9YSh0aGlzW2ZdLGIsYyk7ZT1lP2UraDpofXJldHVybiBlfWZvcihlPTA7ZTxnO2UrKylhKHRoaXNbZV0sYixjKTtyZXR1cm4gdGhpc319KTtuKHtyZW1vdmVEYXRhOndiLG9uOmZ1bmN0aW9uKGEsYixkLGMpe2lmKHUoYykpdGhyb3cgV2IoXCJvbmFyZ3NcIik7aWYoTGMoYSkpe2M9eGIoYSwhMCk7dmFyIGU9Yy5ldmVudHMsZj1jLmhhbmRsZTtmfHwoZj1jLmhhbmRsZT1OZihhLGUpKTtjPTA8PWIuaW5kZXhPZihcIiBcIik/Yi5zcGxpdChcIiBcIik6W2JdO2Zvcih2YXIgZz1jLmxlbmd0aCxcbmg9ZnVuY3Rpb24oYixjLGcpe3ZhciBoPWVbYl07aHx8KGg9ZVtiXT1bXSxoLnNwZWNpYWxIYW5kbGVyV3JhcHBlcj1jLFwiJGRlc3Ryb3lcIj09PWJ8fGd8fGEuYWRkRXZlbnRMaXN0ZW5lcihiLGYsITEpKTtoLnB1c2goZCl9O2ctLTspYj1jW2ddLHliW2JdPyhoKHliW2JdLFBmKSxoKGIsdywhMCkpOmgoYil9fSxvZmY6T2Msb25lOmZ1bmN0aW9uKGEsYixkKXthPUEoYSk7YS5vbihiLGZ1bmN0aW9uIGUoKXthLm9mZihiLGQpO2Eub2ZmKGIsZSl9KTthLm9uKGIsZCl9LHJlcGxhY2VXaXRoOmZ1bmN0aW9uKGEsYil7dmFyIGQsYz1hLnBhcmVudE5vZGU7dmIoYSk7bihuZXcgUChiKSxmdW5jdGlvbihiKXtkP2MuaW5zZXJ0QmVmb3JlKGIsZC5uZXh0U2libGluZyk6Yy5yZXBsYWNlQ2hpbGQoYixhKTtkPWJ9KX0sY2hpbGRyZW46ZnVuY3Rpb24oYSl7dmFyIGI9W107bihhLmNoaWxkTm9kZXMsZnVuY3Rpb24oYSl7MT09PWEubm9kZVR5cGUmJmIucHVzaChhKX0pO3JldHVybiBifSxjb250ZW50czpmdW5jdGlvbihhKXtyZXR1cm4gYS5jb250ZW50RG9jdW1lbnR8fFxuYS5jaGlsZE5vZGVzfHxbXX0sYXBwZW5kOmZ1bmN0aW9uKGEsYil7dmFyIGQ9YS5ub2RlVHlwZTtpZigxPT09ZHx8MTE9PT1kKXtiPW5ldyBQKGIpO2Zvcih2YXIgZD0wLGM9Yi5sZW5ndGg7ZDxjO2QrKylhLmFwcGVuZENoaWxkKGJbZF0pfX0scHJlcGVuZDpmdW5jdGlvbihhLGIpe2lmKDE9PT1hLm5vZGVUeXBlKXt2YXIgZD1hLmZpcnN0Q2hpbGQ7bihuZXcgUChiKSxmdW5jdGlvbihiKXthLmluc2VydEJlZm9yZShiLGQpfSl9fSx3cmFwOmZ1bmN0aW9uKGEsYil7Yj1BKGIpLmVxKDApLmNsb25lKClbMF07dmFyIGQ9YS5wYXJlbnROb2RlO2QmJmQucmVwbGFjZUNoaWxkKGIsYSk7Yi5hcHBlbmRDaGlsZChhKX0scmVtb3ZlOlpiLGRldGFjaDpmdW5jdGlvbihhKXtaYihhLCEwKX0sYWZ0ZXI6ZnVuY3Rpb24oYSxiKXt2YXIgZD1hLGM9YS5wYXJlbnROb2RlO2I9bmV3IFAoYik7Zm9yKHZhciBlPTAsZj1iLmxlbmd0aDtlPGY7ZSsrKXt2YXIgZz1iW2VdO2MuaW5zZXJ0QmVmb3JlKGcsXG5kLm5leHRTaWJsaW5nKTtkPWd9fSxhZGRDbGFzczpCYixyZW1vdmVDbGFzczpBYix0b2dnbGVDbGFzczpmdW5jdGlvbihhLGIsZCl7YiYmbihiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihiKXt2YXIgZT1kO3EoZSkmJihlPSF6YihhLGIpKTsoZT9CYjpBYikoYSxiKX0pfSxwYXJlbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5wYXJlbnROb2RlKSYmMTEhPT1hLm5vZGVUeXBlP2E6bnVsbH0sbmV4dDpmdW5jdGlvbihhKXtyZXR1cm4gYS5uZXh0RWxlbWVudFNpYmxpbmd9LGZpbmQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5nZXRFbGVtZW50c0J5VGFnTmFtZT9hLmdldEVsZW1lbnRzQnlUYWdOYW1lKGIpOltdfSxjbG9uZTpYYix0cmlnZ2VySGFuZGxlcjpmdW5jdGlvbihhLGIsZCl7dmFyIGMsZSxmPWIudHlwZXx8YixnPXhiKGEpO2lmKGc9KGc9ZyYmZy5ldmVudHMpJiZnW2ZdKWM9e3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwfSxpc0RlZmF1bHRQcmV2ZW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMD09PVxudGhpcy5kZWZhdWx0UHJldmVudGVkfSxzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD0hMH0saXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMD09PXRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkfSxzdG9wUHJvcGFnYXRpb246eix0eXBlOmYsdGFyZ2V0OmF9LGIudHlwZSYmKGM9TihjLGIpKSxiPWhhKGcpLGU9ZD9bY10uY29uY2F0KGQpOltjXSxuKGIsZnVuY3Rpb24oYil7Yy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpfHxiLmFwcGx5KGEsZSl9KX19LGZ1bmN0aW9uKGEsYil7UC5wcm90b3R5cGVbYl09ZnVuY3Rpb24oYixjLGUpe2Zvcih2YXIgZixnPTAsaD10aGlzLmxlbmd0aDtnPGg7ZysrKXEoZik/KGY9YSh0aGlzW2ddLGIsYyxlKSx1KGYpJiYoZj1BKGYpKSk6TmMoZixhKHRoaXNbZ10sYixjLGUpKTtyZXR1cm4gdShmKT9mOnRoaXN9O1AucHJvdG90eXBlLmJpbmQ9XG5QLnByb3RvdHlwZS5vbjtQLnByb3RvdHlwZS51bmJpbmQ9UC5wcm90b3R5cGUub2ZmfSk7U2EucHJvdG90eXBlPXtwdXQ6ZnVuY3Rpb24oYSxiKXt0aGlzW0RhKGEsdGhpcy5uZXh0VWlkKV09Yn0sZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzW0RhKGEsdGhpcy5uZXh0VWlkKV19LHJlbW92ZTpmdW5jdGlvbihhKXt2YXIgYj10aGlzW2E9RGEoYSx0aGlzLm5leHRVaWQpXTtkZWxldGUgdGhpc1thXTtyZXR1cm4gYn19O3ZhciBFZj1bZnVuY3Rpb24oKXt0aGlzLiRnZXQ9W2Z1bmN0aW9uKCl7cmV0dXJuIFNhfV19XSxVYz0vXlteXFwoXSpcXChcXHMqKFteXFwpXSopXFwpL20sdWc9LywvLHZnPS9eXFxzKihfPykoXFxTKz8pXFwxXFxzKiQvLFRjPS8oKFxcL1xcLy4qJCl8KFxcL1xcKltcXHNcXFNdKj9cXCpcXC8pKS9tZyxFYT1NKFwiJGluamVjdG9yXCIpO2RiLiQkYW5ub3RhdGU9ZnVuY3Rpb24oYSxiLGQpe3ZhciBjO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXtpZighKGM9YS4kaW5qZWN0KSl7Yz1bXTtpZihhLmxlbmd0aCl7aWYoYil0aHJvdyBGKGQpJiZcbmR8fChkPWEubmFtZXx8UmYoYSkpLEVhKFwic3RyaWN0ZGlcIixkKTtiPWEudG9TdHJpbmcoKS5yZXBsYWNlKFRjLFwiXCIpO2I9Yi5tYXRjaChVYyk7bihiWzFdLnNwbGl0KHVnKSxmdW5jdGlvbihhKXthLnJlcGxhY2UodmcsZnVuY3Rpb24oYSxiLGQpe2MucHVzaChkKX0pfSl9YS4kaW5qZWN0PWN9fWVsc2UgRShhKT8oYj1hLmxlbmd0aC0xLFFhKGFbYl0sXCJmblwiKSxjPWEuc2xpY2UoMCxiKSk6UWEoYSxcImZuXCIsITApO3JldHVybiBjfTt2YXIgUWQ9TShcIiRhbmltYXRlXCIpLFhlPWZ1bmN0aW9uKCl7dGhpcy4kZ2V0PWZ1bmN0aW9uKCl7fX0sWWU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgU2EsYj1bXTt0aGlzLiRnZXQ9W1wiJCRBbmltYXRlUnVubmVyXCIsXCIkcm9vdFNjb3BlXCIsZnVuY3Rpb24oZCxjKXtmdW5jdGlvbiBlKGEsYixjKXt2YXIgZD0hMTtiJiYoYj1GKGIpP2Iuc3BsaXQoXCIgXCIpOkUoYik/YjpbXSxuKGIsZnVuY3Rpb24oYil7YiYmKGQ9ITAsYVtiXT1jKX0pKTtyZXR1cm4gZH1mdW5jdGlvbiBmKCl7bihiLFxuZnVuY3Rpb24oYil7dmFyIGM9YS5nZXQoYik7aWYoYyl7dmFyIGQ9U2YoYi5hdHRyKFwiY2xhc3NcIikpLGU9XCJcIixmPVwiXCI7bihjLGZ1bmN0aW9uKGEsYil7YSE9PSEhZFtiXSYmKGE/ZSs9KGUubGVuZ3RoP1wiIFwiOlwiXCIpK2I6Zis9KGYubGVuZ3RoP1wiIFwiOlwiXCIpK2IpfSk7bihiLGZ1bmN0aW9uKGEpe2UmJkJiKGEsZSk7ZiYmQWIoYSxmKX0pO2EucmVtb3ZlKGIpfX0pO2IubGVuZ3RoPTB9cmV0dXJue2VuYWJsZWQ6eixvbjp6LG9mZjp6LHBpbjp6LHB1c2g6ZnVuY3Rpb24oZyxoLGssbCl7bCYmbCgpO2s9a3x8e307ay5mcm9tJiZnLmNzcyhrLmZyb20pO2sudG8mJmcuY3NzKGsudG8pO2lmKGsuYWRkQ2xhc3N8fGsucmVtb3ZlQ2xhc3MpaWYoaD1rLmFkZENsYXNzLGw9ay5yZW1vdmVDbGFzcyxrPWEuZ2V0KGcpfHx7fSxoPWUoayxoLCEwKSxsPWUoayxsLCExKSxofHxsKWEucHV0KGcsayksYi5wdXNoKGcpLDE9PT1iLmxlbmd0aCYmYy4kJHBvc3REaWdlc3QoZik7Zz1uZXcgZDtnLmNvbXBsZXRlKCk7XG5yZXR1cm4gZ319fV19LFZlPVtcIiRwcm92aWRlXCIsZnVuY3Rpb24oYSl7dmFyIGI9dGhpczt0aGlzLiQkcmVnaXN0ZXJlZEFuaW1hdGlvbnM9T2JqZWN0LmNyZWF0ZShudWxsKTt0aGlzLnJlZ2lzdGVyPWZ1bmN0aW9uKGQsYyl7aWYoZCYmXCIuXCIhPT1kLmNoYXJBdCgwKSl0aHJvdyBRZChcIm5vdGNzZWxcIixkKTt2YXIgZT1kK1wiLWFuaW1hdGlvblwiO2IuJCRyZWdpc3RlcmVkQW5pbWF0aW9uc1tkLnN1YnN0cigxKV09ZTthLmZhY3RvcnkoZSxjKX07dGhpcy5jbGFzc05hbWVGaWx0ZXI9ZnVuY3Rpb24oYSl7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgmJih0aGlzLiQkY2xhc3NOYW1lRmlsdGVyPWEgaW5zdGFuY2VvZiBSZWdFeHA/YTpudWxsKSYmLyhcXHMrfFxcLyluZy1hbmltYXRlKFxccyt8XFwvKS8udGVzdCh0aGlzLiQkY2xhc3NOYW1lRmlsdGVyLnRvU3RyaW5nKCkpKXRocm93IFFkKFwibm9uZ2Nsc1wiLFwibmctYW5pbWF0ZVwiKTtyZXR1cm4gdGhpcy4kJGNsYXNzTmFtZUZpbHRlcn07dGhpcy4kZ2V0PVxuW1wiJCRhbmltYXRlUXVldWVcIixmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEsYyxkKXtpZihkKXt2YXIgaDthOntmb3IoaD0wO2g8ZC5sZW5ndGg7aCsrKXt2YXIgaz1kW2hdO2lmKDE9PT1rLm5vZGVUeXBlKXtoPWs7YnJlYWsgYX19aD12b2lkIDB9IWh8fGgucGFyZW50Tm9kZXx8aC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nfHwoZD1udWxsKX1kP2QuYWZ0ZXIoYSk6Yy5wcmVwZW5kKGEpfXJldHVybntvbjphLm9uLG9mZjphLm9mZixwaW46YS5waW4sZW5hYmxlZDphLmVuYWJsZWQsY2FuY2VsOmZ1bmN0aW9uKGEpe2EuZW5kJiZhLmVuZCgpfSxlbnRlcjpmdW5jdGlvbihlLGYsZyxoKXtmPWYmJkEoZik7Zz1nJiZBKGcpO2Y9Znx8Zy5wYXJlbnQoKTtiKGUsZixnKTtyZXR1cm4gYS5wdXNoKGUsXCJlbnRlclwiLEZhKGgpKX0sbW92ZTpmdW5jdGlvbihlLGYsZyxoKXtmPWYmJkEoZik7Zz1nJiZBKGcpO2Y9Znx8Zy5wYXJlbnQoKTtiKGUsZixnKTtyZXR1cm4gYS5wdXNoKGUsXCJtb3ZlXCIsRmEoaCkpfSxcbmxlYXZlOmZ1bmN0aW9uKGIsYyl7cmV0dXJuIGEucHVzaChiLFwibGVhdmVcIixGYShjKSxmdW5jdGlvbigpe2IucmVtb3ZlKCl9KX0sYWRkQ2xhc3M6ZnVuY3Rpb24oYixjLGcpe2c9RmEoZyk7Zy5hZGRDbGFzcz1nYihnLmFkZGNsYXNzLGMpO3JldHVybiBhLnB1c2goYixcImFkZENsYXNzXCIsZyl9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGIsYyxnKXtnPUZhKGcpO2cucmVtb3ZlQ2xhc3M9Z2IoZy5yZW1vdmVDbGFzcyxjKTtyZXR1cm4gYS5wdXNoKGIsXCJyZW1vdmVDbGFzc1wiLGcpfSxzZXRDbGFzczpmdW5jdGlvbihiLGMsZyxoKXtoPUZhKGgpO2guYWRkQ2xhc3M9Z2IoaC5hZGRDbGFzcyxjKTtoLnJlbW92ZUNsYXNzPWdiKGgucmVtb3ZlQ2xhc3MsZyk7cmV0dXJuIGEucHVzaChiLFwic2V0Q2xhc3NcIixoKX0sYW5pbWF0ZTpmdW5jdGlvbihiLGMsZyxoLGspe2s9RmEoayk7ay5mcm9tPWsuZnJvbT9OKGsuZnJvbSxjKTpjO2sudG89ay50bz9OKGsudG8sZyk6ZztrLnRlbXBDbGFzc2VzPWdiKGsudGVtcENsYXNzZXMsXG5ofHxcIm5nLWlubGluZS1hbmltYXRlXCIpO3JldHVybiBhLnB1c2goYixcImFuaW1hdGVcIixrKX19fV19XSwkZT1mdW5jdGlvbigpe3RoaXMuJGdldD1bXCIkJHJBRlwiLGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYil7ZC5wdXNoKGIpOzE8ZC5sZW5ndGh8fGEoZnVuY3Rpb24oKXtmb3IodmFyIGE9MDthPGQubGVuZ3RoO2ErKylkW2FdKCk7ZD1bXX0pfXZhciBkPVtdO3JldHVybiBmdW5jdGlvbigpe3ZhciBhPSExO2IoZnVuY3Rpb24oKXthPSEwfSk7cmV0dXJuIGZ1bmN0aW9uKGQpe2E/ZCgpOmIoZCl9fX1dfSxaZT1mdW5jdGlvbigpe3RoaXMuJGdldD1bXCIkcVwiLFwiJHNuaWZmZXJcIixcIiQkYW5pbWF0ZUFzeW5jUnVuXCIsXCIkZG9jdW1lbnRcIixcIiR0aW1lb3V0XCIsZnVuY3Rpb24oYSxiLGQsYyxlKXtmdW5jdGlvbiBmKGEpe3RoaXMuc2V0SG9zdChhKTt2YXIgYj1kKCk7dGhpcy5fZG9uZUNhbGxiYWNrcz1bXTt0aGlzLl90aWNrPWZ1bmN0aW9uKGEpe3ZhciBkPWNbMF07ZCYmZC5oaWRkZW4/ZShhLFxuMCwhMSk6YihhKX07dGhpcy5fc3RhdGU9MH1mLmNoYWluPWZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYygpe2lmKGQ9PT1hLmxlbmd0aCliKCEwKTtlbHNlIGFbZF0oZnVuY3Rpb24oYSl7ITE9PT1hP2IoITEpOihkKyssYygpKX0pfXZhciBkPTA7YygpfTtmLmFsbD1mdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoZil7ZT1lJiZmOysrZD09PWEubGVuZ3RoJiZiKGUpfXZhciBkPTAsZT0hMDtuKGEsZnVuY3Rpb24oYSl7YS5kb25lKGMpfSl9O2YucHJvdG90eXBlPXtzZXRIb3N0OmZ1bmN0aW9uKGEpe3RoaXMuaG9zdD1hfHx7fX0sZG9uZTpmdW5jdGlvbihhKXsyPT09dGhpcy5fc3RhdGU/YSgpOnRoaXMuX2RvbmVDYWxsYmFja3MucHVzaChhKX0scHJvZ3Jlc3M6eixnZXRQcm9taXNlOmZ1bmN0aW9uKCl7aWYoIXRoaXMucHJvbWlzZSl7dmFyIGI9dGhpczt0aGlzLnByb21pc2U9YShmdW5jdGlvbihhLGMpe2IuZG9uZShmdW5jdGlvbihiKXshMT09PWI/YygpOmEoKX0pfSl9cmV0dXJuIHRoaXMucHJvbWlzZX0sXG50aGVuOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuZ2V0UHJvbWlzZSgpLnRoZW4oYSxiKX0sXCJjYXRjaFwiOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmdldFByb21pc2UoKVtcImNhdGNoXCJdKGEpfSxcImZpbmFsbHlcIjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5nZXRQcm9taXNlKClbXCJmaW5hbGx5XCJdKGEpfSxwYXVzZTpmdW5jdGlvbigpe3RoaXMuaG9zdC5wYXVzZSYmdGhpcy5ob3N0LnBhdXNlKCl9LHJlc3VtZTpmdW5jdGlvbigpe3RoaXMuaG9zdC5yZXN1bWUmJnRoaXMuaG9zdC5yZXN1bWUoKX0sZW5kOmZ1bmN0aW9uKCl7dGhpcy5ob3N0LmVuZCYmdGhpcy5ob3N0LmVuZCgpO3RoaXMuX3Jlc29sdmUoITApfSxjYW5jZWw6ZnVuY3Rpb24oKXt0aGlzLmhvc3QuY2FuY2VsJiZ0aGlzLmhvc3QuY2FuY2VsKCk7dGhpcy5fcmVzb2x2ZSghMSl9LGNvbXBsZXRlOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7MD09PWIuX3N0YXRlJiYoYi5fc3RhdGU9MSxiLl90aWNrKGZ1bmN0aW9uKCl7Yi5fcmVzb2x2ZShhKX0pKX0sXG5fcmVzb2x2ZTpmdW5jdGlvbihhKXsyIT09dGhpcy5fc3RhdGUmJihuKHRoaXMuX2RvbmVDYWxsYmFja3MsZnVuY3Rpb24oYil7YihhKX0pLHRoaXMuX2RvbmVDYWxsYmFja3MubGVuZ3RoPTAsdGhpcy5fc3RhdGU9Mil9fTtyZXR1cm4gZn1dfSxXZT1mdW5jdGlvbigpe3RoaXMuJGdldD1bXCIkJHJBRlwiLFwiJHFcIixcIiQkQW5pbWF0ZVJ1bm5lclwiLGZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gZnVuY3Rpb24oYixlKXtmdW5jdGlvbiBmKCl7YShmdW5jdGlvbigpe2cuYWRkQ2xhc3MmJihiLmFkZENsYXNzKGcuYWRkQ2xhc3MpLGcuYWRkQ2xhc3M9bnVsbCk7Zy5yZW1vdmVDbGFzcyYmKGIucmVtb3ZlQ2xhc3MoZy5yZW1vdmVDbGFzcyksZy5yZW1vdmVDbGFzcz1udWxsKTtnLnRvJiYoYi5jc3MoZy50byksZy50bz1udWxsKTtofHxrLmNvbXBsZXRlKCk7aD0hMH0pO3JldHVybiBrfXZhciBnPWV8fHt9O2cuJCRwcmVwYXJlZHx8KGc9TWEoZykpO2cuY2xlYW51cFN0eWxlcyYmKGcuZnJvbT1nLnRvPVxubnVsbCk7Zy5mcm9tJiYoYi5jc3MoZy5mcm9tKSxnLmZyb209bnVsbCk7dmFyIGgsaz1uZXcgZDtyZXR1cm57c3RhcnQ6ZixlbmQ6Zn19fV19LGdhPU0oXCIkY29tcGlsZVwiKTtEYy4kaW5qZWN0PVtcIiRwcm92aWRlXCIsXCIkJHNhbml0aXplVXJpUHJvdmlkZXJcIl07dmFyIFljPS9eKCg/Onh8ZGF0YSlbXFw6XFwtX10pL2ksVmY9TShcIiRjb250cm9sbGVyXCIpLFZjPS9eKFxcUyspKFxccythc1xccysoW1xcdyRdKykpPyQvLGZmPWZ1bmN0aW9uKCl7dGhpcy4kZ2V0PVtcIiRkb2N1bWVudFwiLGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXtiPyFiLm5vZGVUeXBlJiZiIGluc3RhbmNlb2YgQSYmKGI9YlswXSk6Yj1hWzBdLmJvZHk7cmV0dXJuIGIub2Zmc2V0V2lkdGgrMX19XX0sYmQ9XCJhcHBsaWNhdGlvbi9qc29uXCIsYmM9e1wiQ29udGVudC1UeXBlXCI6YmQrXCI7Y2hhcnNldD11dGYtOFwifSxYZj0vXlxcW3xeXFx7KD8hXFx7KS8sWWY9e1wiW1wiOi9dJC8sXCJ7XCI6L30kL30sV2Y9L15cXClcXF1cXH0nLD9cXG4vLHdnPVxuTShcIiRodHRwXCIpLGZkPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3Rocm93IHdnKFwibGVnYWN5XCIsYSk7fX0sSWE9JC4kaW50ZXJwb2xhdGVNaW5FcnI9TShcIiRpbnRlcnBvbGF0ZVwiKTtJYS50aHJvd05vY29uY2F0PWZ1bmN0aW9uKGEpe3Rocm93IElhKFwibm9jb25jYXRcIixhKTt9O0lhLmludGVycj1mdW5jdGlvbihhLGIpe3JldHVybiBJYShcImludGVyclwiLGEsYi50b1N0cmluZygpKX07dmFyIHhnPS9eKFteXFw/I10qKShcXD8oW14jXSopKT8oIyguKikpPyQvLCRmPXtodHRwOjgwLGh0dHBzOjQ0MyxmdHA6MjF9LEZiPU0oXCIkbG9jYXRpb25cIikseWc9eyQkaHRtbDU6ITEsJCRyZXBsYWNlOiExLGFic1VybDpHYihcIiQkYWJzVXJsXCIpLHVybDpmdW5jdGlvbihhKXtpZihxKGEpKXJldHVybiB0aGlzLiQkdXJsO3ZhciBiPXhnLmV4ZWMoYSk7KGJbMV18fFwiXCI9PT1hKSYmdGhpcy5wYXRoKGRlY29kZVVSSUNvbXBvbmVudChiWzFdKSk7KGJbMl18fGJbMV18fFwiXCI9PT1hKSYmdGhpcy5zZWFyY2goYlszXXx8XG5cIlwiKTt0aGlzLmhhc2goYls1XXx8XCJcIik7cmV0dXJuIHRoaXN9LHByb3RvY29sOkdiKFwiJCRwcm90b2NvbFwiKSxob3N0OkdiKFwiJCRob3N0XCIpLHBvcnQ6R2IoXCIkJHBvcnRcIikscGF0aDprZChcIiQkcGF0aFwiLGZ1bmN0aW9uKGEpe2E9bnVsbCE9PWE/YS50b1N0cmluZygpOlwiXCI7cmV0dXJuXCIvXCI9PWEuY2hhckF0KDApP2E6XCIvXCIrYX0pLHNlYXJjaDpmdW5jdGlvbihhLGIpe3N3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIHRoaXMuJCRzZWFyY2g7Y2FzZSAxOmlmKEYoYSl8fFEoYSkpYT1hLnRvU3RyaW5nKCksdGhpcy4kJHNlYXJjaD15YyhhKTtlbHNlIGlmKEcoYSkpYT1NYShhLHt9KSxuKGEsZnVuY3Rpb24oYixjKXtudWxsPT1iJiZkZWxldGUgYVtjXX0pLHRoaXMuJCRzZWFyY2g9YTtlbHNlIHRocm93IEZiKFwiaXNyY2hhcmdcIik7YnJlYWs7ZGVmYXVsdDpxKGIpfHxudWxsPT09Yj9kZWxldGUgdGhpcy4kJHNlYXJjaFthXTp0aGlzLiQkc2VhcmNoW2FdPWJ9dGhpcy4kJGNvbXBvc2UoKTtcbnJldHVybiB0aGlzfSxoYXNoOmtkKFwiJCRoYXNoXCIsZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPT1hP2EudG9TdHJpbmcoKTpcIlwifSkscmVwbGFjZTpmdW5jdGlvbigpe3RoaXMuJCRyZXBsYWNlPSEwO3JldHVybiB0aGlzfX07bihbamQsZWMsZGNdLGZ1bmN0aW9uKGEpe2EucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoeWcpO2EucHJvdG90eXBlLnN0YXRlPWZ1bmN0aW9uKGIpe2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLiQkc3RhdGU7aWYoYSE9PWRjfHwhdGhpcy4kJGh0bWw1KXRocm93IEZiKFwibm9zdGF0ZVwiKTt0aGlzLiQkc3RhdGU9cShiKT9udWxsOmI7cmV0dXJuIHRoaXN9fSk7dmFyIGFhPU0oXCIkcGFyc2VcIiksYWc9RnVuY3Rpb24ucHJvdG90eXBlLmNhbGwsYmc9RnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LGNnPUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLE5iPWVhKCk7bihcIisgLSAqIC8gJSA9PT0gIT09ID09ICE9IDwgPiA8PSA+PSAmJiB8fCAhID0gfFwiLnNwbGl0KFwiIFwiKSxcbmZ1bmN0aW9uKGEpe05iW2FdPSEwfSk7dmFyIHpnPXtuOlwiXFxuXCIsZjpcIlxcZlwiLHI6XCJcXHJcIix0OlwiXFx0XCIsdjpcIlxcdlwiLFwiJ1wiOlwiJ1wiLCdcIic6J1wiJ30sZ2M9ZnVuY3Rpb24oYSl7dGhpcy5vcHRpb25zPWF9O2djLnByb3RvdHlwZT17Y29uc3RydWN0b3I6Z2MsbGV4OmZ1bmN0aW9uKGEpe3RoaXMudGV4dD1hO3RoaXMuaW5kZXg9MDtmb3IodGhpcy50b2tlbnM9W107dGhpcy5pbmRleDx0aGlzLnRleHQubGVuZ3RoOylpZihhPXRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCksJ1wiJz09PWF8fFwiJ1wiPT09YSl0aGlzLnJlYWRTdHJpbmcoYSk7ZWxzZSBpZih0aGlzLmlzTnVtYmVyKGEpfHxcIi5cIj09PWEmJnRoaXMuaXNOdW1iZXIodGhpcy5wZWVrKCkpKXRoaXMucmVhZE51bWJlcigpO2Vsc2UgaWYodGhpcy5pc0lkZW50KGEpKXRoaXMucmVhZElkZW50KCk7ZWxzZSBpZih0aGlzLmlzKGEsXCIoKXt9W10uLDs6P1wiKSl0aGlzLnRva2Vucy5wdXNoKHtpbmRleDp0aGlzLmluZGV4LHRleHQ6YX0pLHRoaXMuaW5kZXgrKztcbmVsc2UgaWYodGhpcy5pc1doaXRlc3BhY2UoYSkpdGhpcy5pbmRleCsrO2Vsc2V7dmFyIGI9YSt0aGlzLnBlZWsoKSxkPWIrdGhpcy5wZWVrKDIpLGM9TmJbYl0sZT1OYltkXTtOYlthXXx8Y3x8ZT8oYT1lP2Q6Yz9iOmEsdGhpcy50b2tlbnMucHVzaCh7aW5kZXg6dGhpcy5pbmRleCx0ZXh0OmEsb3BlcmF0b3I6ITB9KSx0aGlzLmluZGV4Kz1hLmxlbmd0aCk6dGhpcy50aHJvd0Vycm9yKFwiVW5leHBlY3RlZCBuZXh0IGNoYXJhY3RlciBcIix0aGlzLmluZGV4LHRoaXMuaW5kZXgrMSl9cmV0dXJuIHRoaXMudG9rZW5zfSxpczpmdW5jdGlvbihhLGIpe3JldHVybi0xIT09Yi5pbmRleE9mKGEpfSxwZWVrOmZ1bmN0aW9uKGEpe2E9YXx8MTtyZXR1cm4gdGhpcy5pbmRleCthPHRoaXMudGV4dC5sZW5ndGg/dGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4K2EpOiExfSxpc051bWJlcjpmdW5jdGlvbihhKXtyZXR1cm5cIjBcIjw9YSYmXCI5XCI+PWEmJlwic3RyaW5nXCI9PT10eXBlb2YgYX0saXNXaGl0ZXNwYWNlOmZ1bmN0aW9uKGEpe3JldHVyblwiIFwiPT09XG5hfHxcIlxcclwiPT09YXx8XCJcXHRcIj09PWF8fFwiXFxuXCI9PT1hfHxcIlxcdlwiPT09YXx8XCJcXHUwMGEwXCI9PT1hfSxpc0lkZW50OmZ1bmN0aW9uKGEpe3JldHVyblwiYVwiPD1hJiZcInpcIj49YXx8XCJBXCI8PWEmJlwiWlwiPj1hfHxcIl9cIj09PWF8fFwiJFwiPT09YX0saXNFeHBPcGVyYXRvcjpmdW5jdGlvbihhKXtyZXR1cm5cIi1cIj09PWF8fFwiK1wiPT09YXx8dGhpcy5pc051bWJlcihhKX0sdGhyb3dFcnJvcjpmdW5jdGlvbihhLGIsZCl7ZD1kfHx0aGlzLmluZGV4O2I9dShiKT9cInMgXCIrYitcIi1cIit0aGlzLmluZGV4K1wiIFtcIit0aGlzLnRleHQuc3Vic3RyaW5nKGIsZCkrXCJdXCI6XCIgXCIrZDt0aHJvdyBhYShcImxleGVyclwiLGEsYix0aGlzLnRleHQpO30scmVhZE51bWJlcjpmdW5jdGlvbigpe2Zvcih2YXIgYT1cIlwiLGI9dGhpcy5pbmRleDt0aGlzLmluZGV4PHRoaXMudGV4dC5sZW5ndGg7KXt2YXIgZD1LKHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCkpO2lmKFwiLlwiPT1kfHx0aGlzLmlzTnVtYmVyKGQpKWErPWQ7ZWxzZXt2YXIgYz1cbnRoaXMucGVlaygpO2lmKFwiZVwiPT1kJiZ0aGlzLmlzRXhwT3BlcmF0b3IoYykpYSs9ZDtlbHNlIGlmKHRoaXMuaXNFeHBPcGVyYXRvcihkKSYmYyYmdGhpcy5pc051bWJlcihjKSYmXCJlXCI9PWEuY2hhckF0KGEubGVuZ3RoLTEpKWErPWQ7ZWxzZSBpZighdGhpcy5pc0V4cE9wZXJhdG9yKGQpfHxjJiZ0aGlzLmlzTnVtYmVyKGMpfHxcImVcIiE9YS5jaGFyQXQoYS5sZW5ndGgtMSkpYnJlYWs7ZWxzZSB0aGlzLnRocm93RXJyb3IoXCJJbnZhbGlkIGV4cG9uZW50XCIpfXRoaXMuaW5kZXgrK310aGlzLnRva2Vucy5wdXNoKHtpbmRleDpiLHRleHQ6YSxjb25zdGFudDohMCx2YWx1ZTpOdW1iZXIoYSl9KX0scmVhZElkZW50OmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuaW5kZXg7dGhpcy5pbmRleDx0aGlzLnRleHQubGVuZ3RoOyl7dmFyIGI9dGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtpZighdGhpcy5pc0lkZW50KGIpJiYhdGhpcy5pc051bWJlcihiKSlicmVhazt0aGlzLmluZGV4Kyt9dGhpcy50b2tlbnMucHVzaCh7aW5kZXg6YSxcbnRleHQ6dGhpcy50ZXh0LnNsaWNlKGEsdGhpcy5pbmRleCksaWRlbnRpZmllcjohMH0pfSxyZWFkU3RyaW5nOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuaW5kZXg7dGhpcy5pbmRleCsrO2Zvcih2YXIgZD1cIlwiLGM9YSxlPSExO3RoaXMuaW5kZXg8dGhpcy50ZXh0Lmxlbmd0aDspe3ZhciBmPXRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCksYz1jK2Y7aWYoZSlcInVcIj09PWY/KGU9dGhpcy50ZXh0LnN1YnN0cmluZyh0aGlzLmluZGV4KzEsdGhpcy5pbmRleCs1KSxlLm1hdGNoKC9bXFxkYS1mXXs0fS9pKXx8dGhpcy50aHJvd0Vycm9yKFwiSW52YWxpZCB1bmljb2RlIGVzY2FwZSBbXFxcXHVcIitlK1wiXVwiKSx0aGlzLmluZGV4Kz00LGQrPVN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoZSwxNikpKTpkKz16Z1tmXXx8ZixlPSExO2Vsc2UgaWYoXCJcXFxcXCI9PT1mKWU9ITA7ZWxzZXtpZihmPT09YSl7dGhpcy5pbmRleCsrO3RoaXMudG9rZW5zLnB1c2goe2luZGV4OmIsdGV4dDpjLGNvbnN0YW50OiEwLFxudmFsdWU6ZH0pO3JldHVybn1kKz1mfXRoaXMuaW5kZXgrK310aGlzLnRocm93RXJyb3IoXCJVbnRlcm1pbmF0ZWQgcXVvdGVcIixiKX19O3ZhciBzPWZ1bmN0aW9uKGEsYil7dGhpcy5sZXhlcj1hO3RoaXMub3B0aW9ucz1ifTtzLlByb2dyYW09XCJQcm9ncmFtXCI7cy5FeHByZXNzaW9uU3RhdGVtZW50PVwiRXhwcmVzc2lvblN0YXRlbWVudFwiO3MuQXNzaWdubWVudEV4cHJlc3Npb249XCJBc3NpZ25tZW50RXhwcmVzc2lvblwiO3MuQ29uZGl0aW9uYWxFeHByZXNzaW9uPVwiQ29uZGl0aW9uYWxFeHByZXNzaW9uXCI7cy5Mb2dpY2FsRXhwcmVzc2lvbj1cIkxvZ2ljYWxFeHByZXNzaW9uXCI7cy5CaW5hcnlFeHByZXNzaW9uPVwiQmluYXJ5RXhwcmVzc2lvblwiO3MuVW5hcnlFeHByZXNzaW9uPVwiVW5hcnlFeHByZXNzaW9uXCI7cy5DYWxsRXhwcmVzc2lvbj1cIkNhbGxFeHByZXNzaW9uXCI7cy5NZW1iZXJFeHByZXNzaW9uPVwiTWVtYmVyRXhwcmVzc2lvblwiO3MuSWRlbnRpZmllcj1cIklkZW50aWZpZXJcIjtzLkxpdGVyYWw9XG5cIkxpdGVyYWxcIjtzLkFycmF5RXhwcmVzc2lvbj1cIkFycmF5RXhwcmVzc2lvblwiO3MuUHJvcGVydHk9XCJQcm9wZXJ0eVwiO3MuT2JqZWN0RXhwcmVzc2lvbj1cIk9iamVjdEV4cHJlc3Npb25cIjtzLlRoaXNFeHByZXNzaW9uPVwiVGhpc0V4cHJlc3Npb25cIjtzLk5HVmFsdWVQYXJhbWV0ZXI9XCJOR1ZhbHVlUGFyYW1ldGVyXCI7cy5wcm90b3R5cGU9e2FzdDpmdW5jdGlvbihhKXt0aGlzLnRleHQ9YTt0aGlzLnRva2Vucz10aGlzLmxleGVyLmxleChhKTthPXRoaXMucHJvZ3JhbSgpOzAhPT10aGlzLnRva2Vucy5sZW5ndGgmJnRoaXMudGhyb3dFcnJvcihcImlzIGFuIHVuZXhwZWN0ZWQgdG9rZW5cIix0aGlzLnRva2Vuc1swXSk7cmV0dXJuIGF9LHByb2dyYW06ZnVuY3Rpb24oKXtmb3IodmFyIGE9W107OylpZigwPHRoaXMudG9rZW5zLmxlbmd0aCYmIXRoaXMucGVlayhcIn1cIixcIilcIixcIjtcIixcIl1cIikmJmEucHVzaCh0aGlzLmV4cHJlc3Npb25TdGF0ZW1lbnQoKSksIXRoaXMuZXhwZWN0KFwiO1wiKSlyZXR1cm57dHlwZTpzLlByb2dyYW0sXG5ib2R5OmF9fSxleHByZXNzaW9uU3RhdGVtZW50OmZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6cy5FeHByZXNzaW9uU3RhdGVtZW50LGV4cHJlc3Npb246dGhpcy5maWx0ZXJDaGFpbigpfX0sZmlsdGVyQ2hhaW46ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5leHByZXNzaW9uKCk7dGhpcy5leHBlY3QoXCJ8XCIpOylhPXRoaXMuZmlsdGVyKGEpO3JldHVybiBhfSxleHByZXNzaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXNzaWdubWVudCgpfSxhc3NpZ25tZW50OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy50ZXJuYXJ5KCk7dGhpcy5leHBlY3QoXCI9XCIpJiYoYT17dHlwZTpzLkFzc2lnbm1lbnRFeHByZXNzaW9uLGxlZnQ6YSxyaWdodDp0aGlzLmFzc2lnbm1lbnQoKSxvcGVyYXRvcjpcIj1cIn0pO3JldHVybiBhfSx0ZXJuYXJ5OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5sb2dpY2FsT1IoKSxiLGQ7cmV0dXJuIHRoaXMuZXhwZWN0KFwiP1wiKSYmKGI9dGhpcy5leHByZXNzaW9uKCksdGhpcy5jb25zdW1lKFwiOlwiKSk/XG4oZD10aGlzLmV4cHJlc3Npb24oKSx7dHlwZTpzLkNvbmRpdGlvbmFsRXhwcmVzc2lvbix0ZXN0OmEsYWx0ZXJuYXRlOmIsY29uc2VxdWVudDpkfSk6YX0sbG9naWNhbE9SOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMubG9naWNhbEFORCgpO3RoaXMuZXhwZWN0KFwifHxcIik7KWE9e3R5cGU6cy5Mb2dpY2FsRXhwcmVzc2lvbixvcGVyYXRvcjpcInx8XCIsbGVmdDphLHJpZ2h0OnRoaXMubG9naWNhbEFORCgpfTtyZXR1cm4gYX0sbG9naWNhbEFORDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmVxdWFsaXR5KCk7dGhpcy5leHBlY3QoXCImJlwiKTspYT17dHlwZTpzLkxvZ2ljYWxFeHByZXNzaW9uLG9wZXJhdG9yOlwiJiZcIixsZWZ0OmEscmlnaHQ6dGhpcy5lcXVhbGl0eSgpfTtyZXR1cm4gYX0sZXF1YWxpdHk6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5yZWxhdGlvbmFsKCksYjtiPXRoaXMuZXhwZWN0KFwiPT1cIixcIiE9XCIsXCI9PT1cIixcIiE9PVwiKTspYT17dHlwZTpzLkJpbmFyeUV4cHJlc3Npb24sXG5vcGVyYXRvcjpiLnRleHQsbGVmdDphLHJpZ2h0OnRoaXMucmVsYXRpb25hbCgpfTtyZXR1cm4gYX0scmVsYXRpb25hbDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmFkZGl0aXZlKCksYjtiPXRoaXMuZXhwZWN0KFwiPFwiLFwiPlwiLFwiPD1cIixcIj49XCIpOylhPXt0eXBlOnMuQmluYXJ5RXhwcmVzc2lvbixvcGVyYXRvcjpiLnRleHQsbGVmdDphLHJpZ2h0OnRoaXMuYWRkaXRpdmUoKX07cmV0dXJuIGF9LGFkZGl0aXZlOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMubXVsdGlwbGljYXRpdmUoKSxiO2I9dGhpcy5leHBlY3QoXCIrXCIsXCItXCIpOylhPXt0eXBlOnMuQmluYXJ5RXhwcmVzc2lvbixvcGVyYXRvcjpiLnRleHQsbGVmdDphLHJpZ2h0OnRoaXMubXVsdGlwbGljYXRpdmUoKX07cmV0dXJuIGF9LG11bHRpcGxpY2F0aXZlOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMudW5hcnkoKSxiO2I9dGhpcy5leHBlY3QoXCIqXCIsXCIvXCIsXCIlXCIpOylhPXt0eXBlOnMuQmluYXJ5RXhwcmVzc2lvbixvcGVyYXRvcjpiLnRleHQsXG5sZWZ0OmEscmlnaHQ6dGhpcy51bmFyeSgpfTtyZXR1cm4gYX0sdW5hcnk6ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4oYT10aGlzLmV4cGVjdChcIitcIixcIi1cIixcIiFcIikpP3t0eXBlOnMuVW5hcnlFeHByZXNzaW9uLG9wZXJhdG9yOmEudGV4dCxwcmVmaXg6ITAsYXJndW1lbnQ6dGhpcy51bmFyeSgpfTp0aGlzLnByaW1hcnkoKX0scHJpbWFyeTpmdW5jdGlvbigpe3ZhciBhO3RoaXMuZXhwZWN0KFwiKFwiKT8oYT10aGlzLmZpbHRlckNoYWluKCksdGhpcy5jb25zdW1lKFwiKVwiKSk6dGhpcy5leHBlY3QoXCJbXCIpP2E9dGhpcy5hcnJheURlY2xhcmF0aW9uKCk6dGhpcy5leHBlY3QoXCJ7XCIpP2E9dGhpcy5vYmplY3QoKTp0aGlzLmNvbnN0YW50cy5oYXNPd25Qcm9wZXJ0eSh0aGlzLnBlZWsoKS50ZXh0KT9hPU1hKHRoaXMuY29uc3RhbnRzW3RoaXMuY29uc3VtZSgpLnRleHRdKTp0aGlzLnBlZWsoKS5pZGVudGlmaWVyP2E9dGhpcy5pZGVudGlmaWVyKCk6dGhpcy5wZWVrKCkuY29uc3RhbnQ/YT10aGlzLmNvbnN0YW50KCk6XG50aGlzLnRocm93RXJyb3IoXCJub3QgYSBwcmltYXJ5IGV4cHJlc3Npb25cIix0aGlzLnBlZWsoKSk7Zm9yKHZhciBiO2I9dGhpcy5leHBlY3QoXCIoXCIsXCJbXCIsXCIuXCIpOylcIihcIj09PWIudGV4dD8oYT17dHlwZTpzLkNhbGxFeHByZXNzaW9uLGNhbGxlZTphLGFyZ3VtZW50czp0aGlzLnBhcnNlQXJndW1lbnRzKCl9LHRoaXMuY29uc3VtZShcIilcIikpOlwiW1wiPT09Yi50ZXh0PyhhPXt0eXBlOnMuTWVtYmVyRXhwcmVzc2lvbixvYmplY3Q6YSxwcm9wZXJ0eTp0aGlzLmV4cHJlc3Npb24oKSxjb21wdXRlZDohMH0sdGhpcy5jb25zdW1lKFwiXVwiKSk6XCIuXCI9PT1iLnRleHQ/YT17dHlwZTpzLk1lbWJlckV4cHJlc3Npb24sb2JqZWN0OmEscHJvcGVydHk6dGhpcy5pZGVudGlmaWVyKCksY29tcHV0ZWQ6ITF9OnRoaXMudGhyb3dFcnJvcihcIklNUE9TU0lCTEVcIik7cmV0dXJuIGF9LGZpbHRlcjpmdW5jdGlvbihhKXthPVthXTtmb3IodmFyIGI9e3R5cGU6cy5DYWxsRXhwcmVzc2lvbixjYWxsZWU6dGhpcy5pZGVudGlmaWVyKCksXG5hcmd1bWVudHM6YSxmaWx0ZXI6ITB9O3RoaXMuZXhwZWN0KFwiOlwiKTspYS5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKTtyZXR1cm4gYn0scGFyc2VBcmd1bWVudHM6ZnVuY3Rpb24oKXt2YXIgYT1bXTtpZihcIilcIiE9PXRoaXMucGVla1Rva2VuKCkudGV4dCl7ZG8gYS5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKTt3aGlsZSh0aGlzLmV4cGVjdChcIixcIikpfXJldHVybiBhfSxpZGVudGlmaWVyOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdW1lKCk7YS5pZGVudGlmaWVyfHx0aGlzLnRocm93RXJyb3IoXCJpcyBub3QgYSB2YWxpZCBpZGVudGlmaWVyXCIsYSk7cmV0dXJue3R5cGU6cy5JZGVudGlmaWVyLG5hbWU6YS50ZXh0fX0sY29uc3RhbnQ6ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTpzLkxpdGVyYWwsdmFsdWU6dGhpcy5jb25zdW1lKCkudmFsdWV9fSxhcnJheURlY2xhcmF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9W107aWYoXCJdXCIhPT10aGlzLnBlZWtUb2tlbigpLnRleHQpe2Rve2lmKHRoaXMucGVlayhcIl1cIikpYnJlYWs7XG5hLnB1c2godGhpcy5leHByZXNzaW9uKCkpfXdoaWxlKHRoaXMuZXhwZWN0KFwiLFwiKSl9dGhpcy5jb25zdW1lKFwiXVwiKTtyZXR1cm57dHlwZTpzLkFycmF5RXhwcmVzc2lvbixlbGVtZW50czphfX0sb2JqZWN0OmZ1bmN0aW9uKCl7dmFyIGE9W10sYjtpZihcIn1cIiE9PXRoaXMucGVla1Rva2VuKCkudGV4dCl7ZG97aWYodGhpcy5wZWVrKFwifVwiKSlicmVhaztiPXt0eXBlOnMuUHJvcGVydHksa2luZDpcImluaXRcIn07dGhpcy5wZWVrKCkuY29uc3RhbnQ/Yi5rZXk9dGhpcy5jb25zdGFudCgpOnRoaXMucGVlaygpLmlkZW50aWZpZXI/Yi5rZXk9dGhpcy5pZGVudGlmaWVyKCk6dGhpcy50aHJvd0Vycm9yKFwiaW52YWxpZCBrZXlcIix0aGlzLnBlZWsoKSk7dGhpcy5jb25zdW1lKFwiOlwiKTtiLnZhbHVlPXRoaXMuZXhwcmVzc2lvbigpO2EucHVzaChiKX13aGlsZSh0aGlzLmV4cGVjdChcIixcIikpfXRoaXMuY29uc3VtZShcIn1cIik7cmV0dXJue3R5cGU6cy5PYmplY3RFeHByZXNzaW9uLHByb3BlcnRpZXM6YX19LFxudGhyb3dFcnJvcjpmdW5jdGlvbihhLGIpe3Rocm93IGFhKFwic3ludGF4XCIsYi50ZXh0LGEsYi5pbmRleCsxLHRoaXMudGV4dCx0aGlzLnRleHQuc3Vic3RyaW5nKGIuaW5kZXgpKTt9LGNvbnN1bWU6ZnVuY3Rpb24oYSl7aWYoMD09PXRoaXMudG9rZW5zLmxlbmd0aCl0aHJvdyBhYShcInVlb2VcIix0aGlzLnRleHQpO3ZhciBiPXRoaXMuZXhwZWN0KGEpO2J8fHRoaXMudGhyb3dFcnJvcihcImlzIHVuZXhwZWN0ZWQsIGV4cGVjdGluZyBbXCIrYStcIl1cIix0aGlzLnBlZWsoKSk7cmV0dXJuIGJ9LHBlZWtUb2tlbjpmdW5jdGlvbigpe2lmKDA9PT10aGlzLnRva2Vucy5sZW5ndGgpdGhyb3cgYWEoXCJ1ZW9lXCIsdGhpcy50ZXh0KTtyZXR1cm4gdGhpcy50b2tlbnNbMF19LHBlZWs6ZnVuY3Rpb24oYSxiLGQsYyl7cmV0dXJuIHRoaXMucGVla0FoZWFkKDAsYSxiLGQsYyl9LHBlZWtBaGVhZDpmdW5jdGlvbihhLGIsZCxjLGUpe2lmKHRoaXMudG9rZW5zLmxlbmd0aD5hKXthPXRoaXMudG9rZW5zW2FdO1xudmFyIGY9YS50ZXh0O2lmKGY9PT1ifHxmPT09ZHx8Zj09PWN8fGY9PT1lfHwhKGJ8fGR8fGN8fGUpKXJldHVybiBhfXJldHVybiExfSxleHBlY3Q6ZnVuY3Rpb24oYSxiLGQsYyl7cmV0dXJuKGE9dGhpcy5wZWVrKGEsYixkLGMpKT8odGhpcy50b2tlbnMuc2hpZnQoKSxhKTohMX0sY29uc3RhbnRzOntcInRydWVcIjp7dHlwZTpzLkxpdGVyYWwsdmFsdWU6ITB9LFwiZmFsc2VcIjp7dHlwZTpzLkxpdGVyYWwsdmFsdWU6ITF9LFwibnVsbFwiOnt0eXBlOnMuTGl0ZXJhbCx2YWx1ZTpudWxsfSx1bmRlZmluZWQ6e3R5cGU6cy5MaXRlcmFsLHZhbHVlOnd9LFwidGhpc1wiOnt0eXBlOnMuVGhpc0V4cHJlc3Npb259fX07dGQucHJvdG90eXBlPXtjb21waWxlOmZ1bmN0aW9uKGEsYil7dmFyIGQ9dGhpcyxjPXRoaXMuYXN0QnVpbGRlci5hc3QoYSk7dGhpcy5zdGF0ZT17bmV4dElkOjAsZmlsdGVyczp7fSxleHBlbnNpdmVDaGVja3M6Yixmbjp7dmFyczpbXSxib2R5OltdLG93bjp7fX0sYXNzaWduOnt2YXJzOltdLFxuYm9keTpbXSxvd246e319LGlucHV0czpbXX07VihjLGQuJGZpbHRlcik7dmFyIGU9XCJcIixmO3RoaXMuc3RhZ2U9XCJhc3NpZ25cIjtpZihmPXJkKGMpKXRoaXMuc3RhdGUuY29tcHV0aW5nPVwiYXNzaWduXCIsZT10aGlzLm5leHRJZCgpLHRoaXMucmVjdXJzZShmLGUpLHRoaXMucmV0dXJuXyhlKSxlPVwiZm4uYXNzaWduPVwiK3RoaXMuZ2VuZXJhdGVGdW5jdGlvbihcImFzc2lnblwiLFwicyx2LGxcIik7Zj1wZChjLmJvZHkpO2Quc3RhZ2U9XCJpbnB1dHNcIjtuKGYsZnVuY3Rpb24oYSxiKXt2YXIgYz1cImZuXCIrYjtkLnN0YXRlW2NdPXt2YXJzOltdLGJvZHk6W10sb3duOnt9fTtkLnN0YXRlLmNvbXB1dGluZz1jO3ZhciBlPWQubmV4dElkKCk7ZC5yZWN1cnNlKGEsZSk7ZC5yZXR1cm5fKGUpO2Quc3RhdGUuaW5wdXRzLnB1c2goYyk7YS53YXRjaElkPWJ9KTt0aGlzLnN0YXRlLmNvbXB1dGluZz1cImZuXCI7dGhpcy5zdGFnZT1cIm1haW5cIjt0aGlzLnJlY3Vyc2UoYyk7ZT0nXCInK3RoaXMuVVNFK1wiIFwiK3RoaXMuU1RSSUNUK1xuJ1wiO1xcbicrdGhpcy5maWx0ZXJQcmVmaXgoKStcInZhciBmbj1cIit0aGlzLmdlbmVyYXRlRnVuY3Rpb24oXCJmblwiLFwicyxsLGEsaVwiKStlK3RoaXMud2F0Y2hGbnMoKStcInJldHVybiBmbjtcIjtlPShuZXcgRnVuY3Rpb24oXCIkZmlsdGVyXCIsXCJlbnN1cmVTYWZlTWVtYmVyTmFtZVwiLFwiZW5zdXJlU2FmZU9iamVjdFwiLFwiZW5zdXJlU2FmZUZ1bmN0aW9uXCIsXCJnZXRTdHJpbmdWYWx1ZVwiLFwiZW5zdXJlU2FmZUFzc2lnbkNvbnRleHRcIixcImlmRGVmaW5lZFwiLFwicGx1c1wiLFwidGV4dFwiLGUpKSh0aGlzLiRmaWx0ZXIsVmEseWEsbWQsbGQsbmQsZGcsb2QsYSk7dGhpcy5zdGF0ZT10aGlzLnN0YWdlPXc7ZS5saXRlcmFsPXNkKGMpO2UuY29uc3RhbnQ9Yy5jb25zdGFudDtyZXR1cm4gZX0sVVNFOlwidXNlXCIsU1RSSUNUOlwic3RyaWN0XCIsd2F0Y2hGbnM6ZnVuY3Rpb24oKXt2YXIgYT1bXSxiPXRoaXMuc3RhdGUuaW5wdXRzLGQ9dGhpcztuKGIsZnVuY3Rpb24oYil7YS5wdXNoKFwidmFyIFwiK2IrXCI9XCIrZC5nZW5lcmF0ZUZ1bmN0aW9uKGIsXG5cInNcIikpfSk7Yi5sZW5ndGgmJmEucHVzaChcImZuLmlucHV0cz1bXCIrYi5qb2luKFwiLFwiKStcIl07XCIpO3JldHVybiBhLmpvaW4oXCJcIil9LGdlbmVyYXRlRnVuY3Rpb246ZnVuY3Rpb24oYSxiKXtyZXR1cm5cImZ1bmN0aW9uKFwiK2IrXCIpe1wiK3RoaXMudmFyc1ByZWZpeChhKSt0aGlzLmJvZHkoYSkrXCJ9O1wifSxmaWx0ZXJQcmVmaXg6ZnVuY3Rpb24oKXt2YXIgYT1bXSxiPXRoaXM7bih0aGlzLnN0YXRlLmZpbHRlcnMsZnVuY3Rpb24oZCxjKXthLnB1c2goZCtcIj0kZmlsdGVyKFwiK2IuZXNjYXBlKGMpK1wiKVwiKX0pO3JldHVybiBhLmxlbmd0aD9cInZhciBcIithLmpvaW4oXCIsXCIpK1wiO1wiOlwiXCJ9LHZhcnNQcmVmaXg6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuc3RhdGVbYV0udmFycy5sZW5ndGg/XCJ2YXIgXCIrdGhpcy5zdGF0ZVthXS52YXJzLmpvaW4oXCIsXCIpK1wiO1wiOlwiXCJ9LGJvZHk6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuc3RhdGVbYV0uYm9keS5qb2luKFwiXCIpfSxyZWN1cnNlOmZ1bmN0aW9uKGEsYixcbmQsYyxlLGYpe3ZhciBnLGgsaz10aGlzLGwsbTtjPWN8fHo7aWYoIWYmJnUoYS53YXRjaElkKSliPWJ8fHRoaXMubmV4dElkKCksdGhpcy5pZl8oXCJpXCIsdGhpcy5sYXp5QXNzaWduKGIsdGhpcy5jb21wdXRlZE1lbWJlcihcImlcIixhLndhdGNoSWQpKSx0aGlzLmxhenlSZWN1cnNlKGEsYixkLGMsZSwhMCkpO2Vsc2Ugc3dpdGNoKGEudHlwZSl7Y2FzZSBzLlByb2dyYW06bihhLmJvZHksZnVuY3Rpb24oYixjKXtrLnJlY3Vyc2UoYi5leHByZXNzaW9uLHcsdyxmdW5jdGlvbihhKXtoPWF9KTtjIT09YS5ib2R5Lmxlbmd0aC0xP2suY3VycmVudCgpLmJvZHkucHVzaChoLFwiO1wiKTprLnJldHVybl8oaCl9KTticmVhaztjYXNlIHMuTGl0ZXJhbDptPXRoaXMuZXNjYXBlKGEudmFsdWUpO3RoaXMuYXNzaWduKGIsbSk7YyhtKTticmVhaztjYXNlIHMuVW5hcnlFeHByZXNzaW9uOnRoaXMucmVjdXJzZShhLmFyZ3VtZW50LHcsdyxmdW5jdGlvbihhKXtoPWF9KTttPWEub3BlcmF0b3IrXCIoXCIrdGhpcy5pZkRlZmluZWQoaCxcbjApK1wiKVwiO3RoaXMuYXNzaWduKGIsbSk7YyhtKTticmVhaztjYXNlIHMuQmluYXJ5RXhwcmVzc2lvbjp0aGlzLnJlY3Vyc2UoYS5sZWZ0LHcsdyxmdW5jdGlvbihhKXtnPWF9KTt0aGlzLnJlY3Vyc2UoYS5yaWdodCx3LHcsZnVuY3Rpb24oYSl7aD1hfSk7bT1cIitcIj09PWEub3BlcmF0b3I/dGhpcy5wbHVzKGcsaCk6XCItXCI9PT1hLm9wZXJhdG9yP3RoaXMuaWZEZWZpbmVkKGcsMCkrYS5vcGVyYXRvcit0aGlzLmlmRGVmaW5lZChoLDApOlwiKFwiK2crXCIpXCIrYS5vcGVyYXRvcitcIihcIitoK1wiKVwiO3RoaXMuYXNzaWduKGIsbSk7YyhtKTticmVhaztjYXNlIHMuTG9naWNhbEV4cHJlc3Npb246Yj1ifHx0aGlzLm5leHRJZCgpO2sucmVjdXJzZShhLmxlZnQsYik7ay5pZl8oXCImJlwiPT09YS5vcGVyYXRvcj9iOmsubm90KGIpLGsubGF6eVJlY3Vyc2UoYS5yaWdodCxiKSk7YyhiKTticmVhaztjYXNlIHMuQ29uZGl0aW9uYWxFeHByZXNzaW9uOmI9Ynx8dGhpcy5uZXh0SWQoKTtrLnJlY3Vyc2UoYS50ZXN0LFxuYik7ay5pZl8oYixrLmxhenlSZWN1cnNlKGEuYWx0ZXJuYXRlLGIpLGsubGF6eVJlY3Vyc2UoYS5jb25zZXF1ZW50LGIpKTtjKGIpO2JyZWFrO2Nhc2Ugcy5JZGVudGlmaWVyOmI9Ynx8dGhpcy5uZXh0SWQoKTtkJiYoZC5jb250ZXh0PVwiaW5wdXRzXCI9PT1rLnN0YWdlP1wic1wiOnRoaXMuYXNzaWduKHRoaXMubmV4dElkKCksdGhpcy5nZXRIYXNPd25Qcm9wZXJ0eShcImxcIixhLm5hbWUpK1wiP2w6c1wiKSxkLmNvbXB1dGVkPSExLGQubmFtZT1hLm5hbWUpO1ZhKGEubmFtZSk7ay5pZl8oXCJpbnB1dHNcIj09PWsuc3RhZ2V8fGsubm90KGsuZ2V0SGFzT3duUHJvcGVydHkoXCJsXCIsYS5uYW1lKSksZnVuY3Rpb24oKXtrLmlmXyhcImlucHV0c1wiPT09ay5zdGFnZXx8XCJzXCIsZnVuY3Rpb24oKXtlJiYxIT09ZSYmay5pZl8oay5ub3Qoay5ub25Db21wdXRlZE1lbWJlcihcInNcIixhLm5hbWUpKSxrLmxhenlBc3NpZ24oay5ub25Db21wdXRlZE1lbWJlcihcInNcIixhLm5hbWUpLFwie31cIikpO2suYXNzaWduKGIsay5ub25Db21wdXRlZE1lbWJlcihcInNcIixcbmEubmFtZSkpfSl9LGImJmsubGF6eUFzc2lnbihiLGsubm9uQ29tcHV0ZWRNZW1iZXIoXCJsXCIsYS5uYW1lKSkpOyhrLnN0YXRlLmV4cGVuc2l2ZUNoZWNrc3x8SGIoYS5uYW1lKSkmJmsuYWRkRW5zdXJlU2FmZU9iamVjdChiKTtjKGIpO2JyZWFrO2Nhc2Ugcy5NZW1iZXJFeHByZXNzaW9uOmc9ZCYmKGQuY29udGV4dD10aGlzLm5leHRJZCgpKXx8dGhpcy5uZXh0SWQoKTtiPWJ8fHRoaXMubmV4dElkKCk7ay5yZWN1cnNlKGEub2JqZWN0LGcsdyxmdW5jdGlvbigpe2suaWZfKGsubm90TnVsbChnKSxmdW5jdGlvbigpe2lmKGEuY29tcHV0ZWQpaD1rLm5leHRJZCgpLGsucmVjdXJzZShhLnByb3BlcnR5LGgpLGsuZ2V0U3RyaW5nVmFsdWUoaCksay5hZGRFbnN1cmVTYWZlTWVtYmVyTmFtZShoKSxlJiYxIT09ZSYmay5pZl8oay5ub3Qoay5jb21wdXRlZE1lbWJlcihnLGgpKSxrLmxhenlBc3NpZ24oay5jb21wdXRlZE1lbWJlcihnLGgpLFwie31cIikpLG09ay5lbnN1cmVTYWZlT2JqZWN0KGsuY29tcHV0ZWRNZW1iZXIoZyxcbmgpKSxrLmFzc2lnbihiLG0pLGQmJihkLmNvbXB1dGVkPSEwLGQubmFtZT1oKTtlbHNle1ZhKGEucHJvcGVydHkubmFtZSk7ZSYmMSE9PWUmJmsuaWZfKGsubm90KGsubm9uQ29tcHV0ZWRNZW1iZXIoZyxhLnByb3BlcnR5Lm5hbWUpKSxrLmxhenlBc3NpZ24oay5ub25Db21wdXRlZE1lbWJlcihnLGEucHJvcGVydHkubmFtZSksXCJ7fVwiKSk7bT1rLm5vbkNvbXB1dGVkTWVtYmVyKGcsYS5wcm9wZXJ0eS5uYW1lKTtpZihrLnN0YXRlLmV4cGVuc2l2ZUNoZWNrc3x8SGIoYS5wcm9wZXJ0eS5uYW1lKSltPWsuZW5zdXJlU2FmZU9iamVjdChtKTtrLmFzc2lnbihiLG0pO2QmJihkLmNvbXB1dGVkPSExLGQubmFtZT1hLnByb3BlcnR5Lm5hbWUpfX0sZnVuY3Rpb24oKXtrLmFzc2lnbihiLFwidW5kZWZpbmVkXCIpfSk7YyhiKX0sISFlKTticmVhaztjYXNlIHMuQ2FsbEV4cHJlc3Npb246Yj1ifHx0aGlzLm5leHRJZCgpO2EuZmlsdGVyPyhoPWsuZmlsdGVyKGEuY2FsbGVlLm5hbWUpLGw9W10sbihhLmFyZ3VtZW50cyxcbmZ1bmN0aW9uKGEpe3ZhciBiPWsubmV4dElkKCk7ay5yZWN1cnNlKGEsYik7bC5wdXNoKGIpfSksbT1oK1wiKFwiK2wuam9pbihcIixcIikrXCIpXCIsay5hc3NpZ24oYixtKSxjKGIpKTooaD1rLm5leHRJZCgpLGc9e30sbD1bXSxrLnJlY3Vyc2UoYS5jYWxsZWUsaCxnLGZ1bmN0aW9uKCl7ay5pZl8oay5ub3ROdWxsKGgpLGZ1bmN0aW9uKCl7ay5hZGRFbnN1cmVTYWZlRnVuY3Rpb24oaCk7bihhLmFyZ3VtZW50cyxmdW5jdGlvbihhKXtrLnJlY3Vyc2UoYSxrLm5leHRJZCgpLHcsZnVuY3Rpb24oYSl7bC5wdXNoKGsuZW5zdXJlU2FmZU9iamVjdChhKSl9KX0pO2cubmFtZT8oay5zdGF0ZS5leHBlbnNpdmVDaGVja3N8fGsuYWRkRW5zdXJlU2FmZU9iamVjdChnLmNvbnRleHQpLG09ay5tZW1iZXIoZy5jb250ZXh0LGcubmFtZSxnLmNvbXB1dGVkKStcIihcIitsLmpvaW4oXCIsXCIpK1wiKVwiKTptPWgrXCIoXCIrbC5qb2luKFwiLFwiKStcIilcIjttPWsuZW5zdXJlU2FmZU9iamVjdChtKTtrLmFzc2lnbihiLG0pfSxcbmZ1bmN0aW9uKCl7ay5hc3NpZ24oYixcInVuZGVmaW5lZFwiKX0pO2MoYil9KSk7YnJlYWs7Y2FzZSBzLkFzc2lnbm1lbnRFeHByZXNzaW9uOmg9dGhpcy5uZXh0SWQoKTtnPXt9O2lmKCFxZChhLmxlZnQpKXRocm93IGFhKFwibHZhbFwiKTt0aGlzLnJlY3Vyc2UoYS5sZWZ0LHcsZyxmdW5jdGlvbigpe2suaWZfKGsubm90TnVsbChnLmNvbnRleHQpLGZ1bmN0aW9uKCl7ay5yZWN1cnNlKGEucmlnaHQsaCk7ay5hZGRFbnN1cmVTYWZlT2JqZWN0KGsubWVtYmVyKGcuY29udGV4dCxnLm5hbWUsZy5jb21wdXRlZCkpO2suYWRkRW5zdXJlU2FmZUFzc2lnbkNvbnRleHQoZy5jb250ZXh0KTttPWsubWVtYmVyKGcuY29udGV4dCxnLm5hbWUsZy5jb21wdXRlZCkrYS5vcGVyYXRvcitoO2suYXNzaWduKGIsbSk7YyhifHxtKX0pfSwxKTticmVhaztjYXNlIHMuQXJyYXlFeHByZXNzaW9uOmw9W107bihhLmVsZW1lbnRzLGZ1bmN0aW9uKGEpe2sucmVjdXJzZShhLGsubmV4dElkKCksdyxmdW5jdGlvbihhKXtsLnB1c2goYSl9KX0pO1xubT1cIltcIitsLmpvaW4oXCIsXCIpK1wiXVwiO3RoaXMuYXNzaWduKGIsbSk7YyhtKTticmVhaztjYXNlIHMuT2JqZWN0RXhwcmVzc2lvbjpsPVtdO24oYS5wcm9wZXJ0aWVzLGZ1bmN0aW9uKGEpe2sucmVjdXJzZShhLnZhbHVlLGsubmV4dElkKCksdyxmdW5jdGlvbihiKXtsLnB1c2goay5lc2NhcGUoYS5rZXkudHlwZT09PXMuSWRlbnRpZmllcj9hLmtleS5uYW1lOlwiXCIrYS5rZXkudmFsdWUpK1wiOlwiK2IpfSl9KTttPVwie1wiK2wuam9pbihcIixcIikrXCJ9XCI7dGhpcy5hc3NpZ24oYixtKTtjKG0pO2JyZWFrO2Nhc2Ugcy5UaGlzRXhwcmVzc2lvbjp0aGlzLmFzc2lnbihiLFwic1wiKTtjKFwic1wiKTticmVhaztjYXNlIHMuTkdWYWx1ZVBhcmFtZXRlcjp0aGlzLmFzc2lnbihiLFwidlwiKSxjKFwidlwiKX19LGdldEhhc093blByb3BlcnR5OmZ1bmN0aW9uKGEsYil7dmFyIGQ9YStcIi5cIitiLGM9dGhpcy5jdXJyZW50KCkub3duO2MuaGFzT3duUHJvcGVydHkoZCl8fChjW2RdPXRoaXMubmV4dElkKCExLGErXCImJihcIitcbnRoaXMuZXNjYXBlKGIpK1wiIGluIFwiK2ErXCIpXCIpKTtyZXR1cm4gY1tkXX0sYXNzaWduOmZ1bmN0aW9uKGEsYil7aWYoYSlyZXR1cm4gdGhpcy5jdXJyZW50KCkuYm9keS5wdXNoKGEsXCI9XCIsYixcIjtcIiksYX0sZmlsdGVyOmZ1bmN0aW9uKGEpe3RoaXMuc3RhdGUuZmlsdGVycy5oYXNPd25Qcm9wZXJ0eShhKXx8KHRoaXMuc3RhdGUuZmlsdGVyc1thXT10aGlzLm5leHRJZCghMCkpO3JldHVybiB0aGlzLnN0YXRlLmZpbHRlcnNbYV19LGlmRGVmaW5lZDpmdW5jdGlvbihhLGIpe3JldHVyblwiaWZEZWZpbmVkKFwiK2ErXCIsXCIrdGhpcy5lc2NhcGUoYikrXCIpXCJ9LHBsdXM6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInBsdXMoXCIrYStcIixcIitiK1wiKVwifSxyZXR1cm5fOmZ1bmN0aW9uKGEpe3RoaXMuY3VycmVudCgpLmJvZHkucHVzaChcInJldHVybiBcIixhLFwiO1wiKX0saWZfOmZ1bmN0aW9uKGEsYixkKXtpZighMD09PWEpYigpO2Vsc2V7dmFyIGM9dGhpcy5jdXJyZW50KCkuYm9keTtjLnB1c2goXCJpZihcIixhLFxuXCIpe1wiKTtiKCk7Yy5wdXNoKFwifVwiKTtkJiYoYy5wdXNoKFwiZWxzZXtcIiksZCgpLGMucHVzaChcIn1cIikpfX0sbm90OmZ1bmN0aW9uKGEpe3JldHVyblwiIShcIithK1wiKVwifSxub3ROdWxsOmZ1bmN0aW9uKGEpe3JldHVybiBhK1wiIT1udWxsXCJ9LG5vbkNvbXB1dGVkTWVtYmVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGErXCIuXCIrYn0sY29tcHV0ZWRNZW1iZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYStcIltcIitiK1wiXVwifSxtZW1iZXI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBkP3RoaXMuY29tcHV0ZWRNZW1iZXIoYSxiKTp0aGlzLm5vbkNvbXB1dGVkTWVtYmVyKGEsYil9LGFkZEVuc3VyZVNhZmVPYmplY3Q6ZnVuY3Rpb24oYSl7dGhpcy5jdXJyZW50KCkuYm9keS5wdXNoKHRoaXMuZW5zdXJlU2FmZU9iamVjdChhKSxcIjtcIil9LGFkZEVuc3VyZVNhZmVNZW1iZXJOYW1lOmZ1bmN0aW9uKGEpe3RoaXMuY3VycmVudCgpLmJvZHkucHVzaCh0aGlzLmVuc3VyZVNhZmVNZW1iZXJOYW1lKGEpLFwiO1wiKX0sXG5hZGRFbnN1cmVTYWZlRnVuY3Rpb246ZnVuY3Rpb24oYSl7dGhpcy5jdXJyZW50KCkuYm9keS5wdXNoKHRoaXMuZW5zdXJlU2FmZUZ1bmN0aW9uKGEpLFwiO1wiKX0sYWRkRW5zdXJlU2FmZUFzc2lnbkNvbnRleHQ6ZnVuY3Rpb24oYSl7dGhpcy5jdXJyZW50KCkuYm9keS5wdXNoKHRoaXMuZW5zdXJlU2FmZUFzc2lnbkNvbnRleHQoYSksXCI7XCIpfSxlbnN1cmVTYWZlT2JqZWN0OmZ1bmN0aW9uKGEpe3JldHVyblwiZW5zdXJlU2FmZU9iamVjdChcIithK1wiLHRleHQpXCJ9LGVuc3VyZVNhZmVNZW1iZXJOYW1lOmZ1bmN0aW9uKGEpe3JldHVyblwiZW5zdXJlU2FmZU1lbWJlck5hbWUoXCIrYStcIix0ZXh0KVwifSxlbnN1cmVTYWZlRnVuY3Rpb246ZnVuY3Rpb24oYSl7cmV0dXJuXCJlbnN1cmVTYWZlRnVuY3Rpb24oXCIrYStcIix0ZXh0KVwifSxnZXRTdHJpbmdWYWx1ZTpmdW5jdGlvbihhKXt0aGlzLmFzc2lnbihhLFwiZ2V0U3RyaW5nVmFsdWUoXCIrYStcIix0ZXh0KVwiKX0sZW5zdXJlU2FmZUFzc2lnbkNvbnRleHQ6ZnVuY3Rpb24oYSl7cmV0dXJuXCJlbnN1cmVTYWZlQXNzaWduQ29udGV4dChcIitcbmErXCIsdGV4dClcIn0sbGF6eVJlY3Vyc2U6ZnVuY3Rpb24oYSxiLGQsYyxlLGYpe3ZhciBnPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKCl7Zy5yZWN1cnNlKGEsYixkLGMsZSxmKX19LGxhenlBc3NpZ246ZnVuY3Rpb24oYSxiKXt2YXIgZD10aGlzO3JldHVybiBmdW5jdGlvbigpe2QuYXNzaWduKGEsYil9fSxzdHJpbmdFc2NhcGVSZWdleDovW14gYS16QS1aMC05XS9nLHN0cmluZ0VzY2FwZUZuOmZ1bmN0aW9uKGEpe3JldHVyblwiXFxcXHVcIisoXCIwMDAwXCIrYS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpfSxlc2NhcGU6ZnVuY3Rpb24oYSl7aWYoRihhKSlyZXR1cm5cIidcIithLnJlcGxhY2UodGhpcy5zdHJpbmdFc2NhcGVSZWdleCx0aGlzLnN0cmluZ0VzY2FwZUZuKStcIidcIjtpZihRKGEpKXJldHVybiBhLnRvU3RyaW5nKCk7aWYoITA9PT1hKXJldHVyblwidHJ1ZVwiO2lmKCExPT09YSlyZXR1cm5cImZhbHNlXCI7aWYobnVsbD09PWEpcmV0dXJuXCJudWxsXCI7aWYoXCJ1bmRlZmluZWRcIj09PVxudHlwZW9mIGEpcmV0dXJuXCJ1bmRlZmluZWRcIjt0aHJvdyBhYShcImVzY1wiKTt9LG5leHRJZDpmdW5jdGlvbihhLGIpe3ZhciBkPVwidlwiK3RoaXMuc3RhdGUubmV4dElkKys7YXx8dGhpcy5jdXJyZW50KCkudmFycy5wdXNoKGQrKGI/XCI9XCIrYjpcIlwiKSk7cmV0dXJuIGR9LGN1cnJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGF0ZVt0aGlzLnN0YXRlLmNvbXB1dGluZ119fTt1ZC5wcm90b3R5cGU9e2NvbXBpbGU6ZnVuY3Rpb24oYSxiKXt2YXIgZD10aGlzLGM9dGhpcy5hc3RCdWlsZGVyLmFzdChhKTt0aGlzLmV4cHJlc3Npb249YTt0aGlzLmV4cGVuc2l2ZUNoZWNrcz1iO1YoYyxkLiRmaWx0ZXIpO3ZhciBlLGY7aWYoZT1yZChjKSlmPXRoaXMucmVjdXJzZShlKTtlPXBkKGMuYm9keSk7dmFyIGc7ZSYmKGc9W10sbihlLGZ1bmN0aW9uKGEsYil7dmFyIGM9ZC5yZWN1cnNlKGEpO2EuaW5wdXQ9YztnLnB1c2goYyk7YS53YXRjaElkPWJ9KSk7dmFyIGg9W107bihjLmJvZHksZnVuY3Rpb24oYSl7aC5wdXNoKGQucmVjdXJzZShhLmV4cHJlc3Npb24pKX0pO1xuZT0wPT09Yy5ib2R5Lmxlbmd0aD9mdW5jdGlvbigpe306MT09PWMuYm9keS5sZW5ndGg/aFswXTpmdW5jdGlvbihhLGIpe3ZhciBjO24oaCxmdW5jdGlvbihkKXtjPWQoYSxiKX0pO3JldHVybiBjfTtmJiYoZS5hc3NpZ249ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBmKGEsYyxiKX0pO2cmJihlLmlucHV0cz1nKTtlLmxpdGVyYWw9c2QoYyk7ZS5jb25zdGFudD1jLmNvbnN0YW50O3JldHVybiBlfSxyZWN1cnNlOmZ1bmN0aW9uKGEsYixkKXt2YXIgYyxlLGY9dGhpcyxnO2lmKGEuaW5wdXQpcmV0dXJuIHRoaXMuaW5wdXRzKGEuaW5wdXQsYS53YXRjaElkKTtzd2l0Y2goYS50eXBlKXtjYXNlIHMuTGl0ZXJhbDpyZXR1cm4gdGhpcy52YWx1ZShhLnZhbHVlLGIpO2Nhc2Ugcy5VbmFyeUV4cHJlc3Npb246cmV0dXJuIGU9dGhpcy5yZWN1cnNlKGEuYXJndW1lbnQpLHRoaXNbXCJ1bmFyeVwiK2Eub3BlcmF0b3JdKGUsYik7Y2FzZSBzLkJpbmFyeUV4cHJlc3Npb246cmV0dXJuIGM9dGhpcy5yZWN1cnNlKGEubGVmdCksXG5lPXRoaXMucmVjdXJzZShhLnJpZ2h0KSx0aGlzW1wiYmluYXJ5XCIrYS5vcGVyYXRvcl0oYyxlLGIpO2Nhc2Ugcy5Mb2dpY2FsRXhwcmVzc2lvbjpyZXR1cm4gYz10aGlzLnJlY3Vyc2UoYS5sZWZ0KSxlPXRoaXMucmVjdXJzZShhLnJpZ2h0KSx0aGlzW1wiYmluYXJ5XCIrYS5vcGVyYXRvcl0oYyxlLGIpO2Nhc2Ugcy5Db25kaXRpb25hbEV4cHJlc3Npb246cmV0dXJuIHRoaXNbXCJ0ZXJuYXJ5PzpcIl0odGhpcy5yZWN1cnNlKGEudGVzdCksdGhpcy5yZWN1cnNlKGEuYWx0ZXJuYXRlKSx0aGlzLnJlY3Vyc2UoYS5jb25zZXF1ZW50KSxiKTtjYXNlIHMuSWRlbnRpZmllcjpyZXR1cm4gVmEoYS5uYW1lLGYuZXhwcmVzc2lvbiksZi5pZGVudGlmaWVyKGEubmFtZSxmLmV4cGVuc2l2ZUNoZWNrc3x8SGIoYS5uYW1lKSxiLGQsZi5leHByZXNzaW9uKTtjYXNlIHMuTWVtYmVyRXhwcmVzc2lvbjpyZXR1cm4gYz10aGlzLnJlY3Vyc2UoYS5vYmplY3QsITEsISFkKSxhLmNvbXB1dGVkfHwoVmEoYS5wcm9wZXJ0eS5uYW1lLFxuZi5leHByZXNzaW9uKSxlPWEucHJvcGVydHkubmFtZSksYS5jb21wdXRlZCYmKGU9dGhpcy5yZWN1cnNlKGEucHJvcGVydHkpKSxhLmNvbXB1dGVkP3RoaXMuY29tcHV0ZWRNZW1iZXIoYyxlLGIsZCxmLmV4cHJlc3Npb24pOnRoaXMubm9uQ29tcHV0ZWRNZW1iZXIoYyxlLGYuZXhwZW5zaXZlQ2hlY2tzLGIsZCxmLmV4cHJlc3Npb24pO2Nhc2Ugcy5DYWxsRXhwcmVzc2lvbjpyZXR1cm4gZz1bXSxuKGEuYXJndW1lbnRzLGZ1bmN0aW9uKGEpe2cucHVzaChmLnJlY3Vyc2UoYSkpfSksYS5maWx0ZXImJihlPXRoaXMuJGZpbHRlcihhLmNhbGxlZS5uYW1lKSksYS5maWx0ZXJ8fChlPXRoaXMucmVjdXJzZShhLmNhbGxlZSwhMCkpLGEuZmlsdGVyP2Z1bmN0aW9uKGEsYyxkLGYpe2Zvcih2YXIgcj1bXSxuPTA7bjxnLmxlbmd0aDsrK24pci5wdXNoKGdbbl0oYSxjLGQsZikpO2E9ZS5hcHBseSh3LHIsZik7cmV0dXJuIGI/e2NvbnRleHQ6dyxuYW1lOncsdmFsdWU6YX06YX06ZnVuY3Rpb24oYSxcbmMsZCxtKXt2YXIgbj1lKGEsYyxkLG0pLHQ7aWYobnVsbCE9bi52YWx1ZSl7eWEobi5jb250ZXh0LGYuZXhwcmVzc2lvbik7bWQobi52YWx1ZSxmLmV4cHJlc3Npb24pO3Q9W107Zm9yKHZhciBxPTA7cTxnLmxlbmd0aDsrK3EpdC5wdXNoKHlhKGdbcV0oYSxjLGQsbSksZi5leHByZXNzaW9uKSk7dD15YShuLnZhbHVlLmFwcGx5KG4uY29udGV4dCx0KSxmLmV4cHJlc3Npb24pfXJldHVybiBiP3t2YWx1ZTp0fTp0fTtjYXNlIHMuQXNzaWdubWVudEV4cHJlc3Npb246cmV0dXJuIGM9dGhpcy5yZWN1cnNlKGEubGVmdCwhMCwxKSxlPXRoaXMucmVjdXJzZShhLnJpZ2h0KSxmdW5jdGlvbihhLGQsZyxtKXt2YXIgbj1jKGEsZCxnLG0pO2E9ZShhLGQsZyxtKTt5YShuLnZhbHVlLGYuZXhwcmVzc2lvbik7bmQobi5jb250ZXh0KTtuLmNvbnRleHRbbi5uYW1lXT1hO3JldHVybiBiP3t2YWx1ZTphfTphfTtjYXNlIHMuQXJyYXlFeHByZXNzaW9uOnJldHVybiBnPVtdLG4oYS5lbGVtZW50cyxmdW5jdGlvbihhKXtnLnB1c2goZi5yZWN1cnNlKGEpKX0pLFxuZnVuY3Rpb24oYSxjLGQsZSl7Zm9yKHZhciBmPVtdLG49MDtuPGcubGVuZ3RoOysrbilmLnB1c2goZ1tuXShhLGMsZCxlKSk7cmV0dXJuIGI/e3ZhbHVlOmZ9OmZ9O2Nhc2Ugcy5PYmplY3RFeHByZXNzaW9uOnJldHVybiBnPVtdLG4oYS5wcm9wZXJ0aWVzLGZ1bmN0aW9uKGEpe2cucHVzaCh7a2V5OmEua2V5LnR5cGU9PT1zLklkZW50aWZpZXI/YS5rZXkubmFtZTpcIlwiK2Eua2V5LnZhbHVlLHZhbHVlOmYucmVjdXJzZShhLnZhbHVlKX0pfSksZnVuY3Rpb24oYSxjLGQsZSl7Zm9yKHZhciBmPXt9LG49MDtuPGcubGVuZ3RoOysrbilmW2dbbl0ua2V5XT1nW25dLnZhbHVlKGEsYyxkLGUpO3JldHVybiBiP3t2YWx1ZTpmfTpmfTtjYXNlIHMuVGhpc0V4cHJlc3Npb246cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiBiP3t2YWx1ZTphfTphfTtjYXNlIHMuTkdWYWx1ZVBhcmFtZXRlcjpyZXR1cm4gZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIGI/e3ZhbHVlOmR9OmR9fX0sXCJ1bmFyeStcIjpmdW5jdGlvbihhLFxuYil7cmV0dXJuIGZ1bmN0aW9uKGQsYyxlLGYpe2Q9YShkLGMsZSxmKTtkPXUoZCk/K2Q6MDtyZXR1cm4gYj97dmFsdWU6ZH06ZH19LFwidW5hcnktXCI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZnVuY3Rpb24oZCxjLGUsZil7ZD1hKGQsYyxlLGYpO2Q9dShkKT8tZDowO3JldHVybiBiP3t2YWx1ZTpkfTpkfX0sXCJ1bmFyeSFcIjpmdW5jdGlvbihhLGIpe3JldHVybiBmdW5jdGlvbihkLGMsZSxmKXtkPSFhKGQsYyxlLGYpO3JldHVybiBiP3t2YWx1ZTpkfTpkfX0sXCJiaW5hcnkrXCI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBmdW5jdGlvbihjLGUsZixnKXt2YXIgaD1hKGMsZSxmLGcpO2M9YihjLGUsZixnKTtoPW9kKGgsYyk7cmV0dXJuIGQ/e3ZhbHVlOmh9Omh9fSxcImJpbmFyeS1cIjpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIGZ1bmN0aW9uKGMsZSxmLGcpe3ZhciBoPWEoYyxlLGYsZyk7Yz1iKGMsZSxmLGcpO2g9KHUoaCk/aDowKS0odShjKT9jOjApO3JldHVybiBkP3t2YWx1ZTpofTpofX0sXCJiaW5hcnkqXCI6ZnVuY3Rpb24oYSxcbmIsZCl7cmV0dXJuIGZ1bmN0aW9uKGMsZSxmLGcpe2M9YShjLGUsZixnKSpiKGMsZSxmLGcpO3JldHVybiBkP3t2YWx1ZTpjfTpjfX0sXCJiaW5hcnkvXCI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBmdW5jdGlvbihjLGUsZixnKXtjPWEoYyxlLGYsZykvYihjLGUsZixnKTtyZXR1cm4gZD97dmFsdWU6Y306Y319LFwiYmluYXJ5JVwiOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gZnVuY3Rpb24oYyxlLGYsZyl7Yz1hKGMsZSxmLGcpJWIoYyxlLGYsZyk7cmV0dXJuIGQ/e3ZhbHVlOmN9OmN9fSxcImJpbmFyeT09PVwiOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gZnVuY3Rpb24oYyxlLGYsZyl7Yz1hKGMsZSxmLGcpPT09YihjLGUsZixnKTtyZXR1cm4gZD97dmFsdWU6Y306Y319LFwiYmluYXJ5IT09XCI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBmdW5jdGlvbihjLGUsZixnKXtjPWEoYyxlLGYsZykhPT1iKGMsZSxmLGcpO3JldHVybiBkP3t2YWx1ZTpjfTpjfX0sXCJiaW5hcnk9PVwiOmZ1bmN0aW9uKGEsYixcbmQpe3JldHVybiBmdW5jdGlvbihjLGUsZixnKXtjPWEoYyxlLGYsZyk9PWIoYyxlLGYsZyk7cmV0dXJuIGQ/e3ZhbHVlOmN9OmN9fSxcImJpbmFyeSE9XCI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBmdW5jdGlvbihjLGUsZixnKXtjPWEoYyxlLGYsZykhPWIoYyxlLGYsZyk7cmV0dXJuIGQ/e3ZhbHVlOmN9OmN9fSxcImJpbmFyeTxcIjpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIGZ1bmN0aW9uKGMsZSxmLGcpe2M9YShjLGUsZixnKTxiKGMsZSxmLGcpO3JldHVybiBkP3t2YWx1ZTpjfTpjfX0sXCJiaW5hcnk+XCI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBmdW5jdGlvbihjLGUsZixnKXtjPWEoYyxlLGYsZyk+YihjLGUsZixnKTtyZXR1cm4gZD97dmFsdWU6Y306Y319LFwiYmluYXJ5PD1cIjpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIGZ1bmN0aW9uKGMsZSxmLGcpe2M9YShjLGUsZixnKTw9YihjLGUsZixnKTtyZXR1cm4gZD97dmFsdWU6Y306Y319LFwiYmluYXJ5Pj1cIjpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIGZ1bmN0aW9uKGMsXG5lLGYsZyl7Yz1hKGMsZSxmLGcpPj1iKGMsZSxmLGcpO3JldHVybiBkP3t2YWx1ZTpjfTpjfX0sXCJiaW5hcnkmJlwiOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gZnVuY3Rpb24oYyxlLGYsZyl7Yz1hKGMsZSxmLGcpJiZiKGMsZSxmLGcpO3JldHVybiBkP3t2YWx1ZTpjfTpjfX0sXCJiaW5hcnl8fFwiOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gZnVuY3Rpb24oYyxlLGYsZyl7Yz1hKGMsZSxmLGcpfHxiKGMsZSxmLGcpO3JldHVybiBkP3t2YWx1ZTpjfTpjfX0sXCJ0ZXJuYXJ5PzpcIjpmdW5jdGlvbihhLGIsZCxjKXtyZXR1cm4gZnVuY3Rpb24oZSxmLGcsaCl7ZT1hKGUsZixnLGgpP2IoZSxmLGcsaCk6ZChlLGYsZyxoKTtyZXR1cm4gYz97dmFsdWU6ZX06ZX19LHZhbHVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGI/e2NvbnRleHQ6dyxuYW1lOncsdmFsdWU6YX06YX19LGlkZW50aWZpZXI6ZnVuY3Rpb24oYSxiLGQsYyxlKXtyZXR1cm4gZnVuY3Rpb24oZixnLGgsayl7Zj1cbmcmJmEgaW4gZz9nOmY7YyYmMSE9PWMmJmYmJiFmW2FdJiYoZlthXT17fSk7Zz1mP2ZbYV06dztiJiZ5YShnLGUpO3JldHVybiBkP3tjb250ZXh0OmYsbmFtZTphLHZhbHVlOmd9Omd9fSxjb21wdXRlZE1lbWJlcjpmdW5jdGlvbihhLGIsZCxjLGUpe3JldHVybiBmdW5jdGlvbihmLGcsaCxrKXt2YXIgbD1hKGYsZyxoLGspLG0sbjtudWxsIT1sJiYobT1iKGYsZyxoLGspLG09bGQobSksVmEobSxlKSxjJiYxIT09YyYmbCYmIWxbbV0mJihsW21dPXt9KSxuPWxbbV0seWEobixlKSk7cmV0dXJuIGQ/e2NvbnRleHQ6bCxuYW1lOm0sdmFsdWU6bn06bn19LG5vbkNvbXB1dGVkTWVtYmVyOmZ1bmN0aW9uKGEsYixkLGMsZSxmKXtyZXR1cm4gZnVuY3Rpb24oZyxoLGssbCl7Zz1hKGcsaCxrLGwpO2UmJjEhPT1lJiZnJiYhZ1tiXSYmKGdbYl09e30pO2g9bnVsbCE9Zz9nW2JdOnc7KGR8fEhiKGIpKSYmeWEoaCxmKTtyZXR1cm4gYz97Y29udGV4dDpnLG5hbWU6Yix2YWx1ZTpofTpofX0saW5wdXRzOmZ1bmN0aW9uKGEsXG5iKXtyZXR1cm4gZnVuY3Rpb24oZCxjLGUsZil7cmV0dXJuIGY/ZltiXTphKGQsYyxlKX19fTt2YXIgaGM9ZnVuY3Rpb24oYSxiLGQpe3RoaXMubGV4ZXI9YTt0aGlzLiRmaWx0ZXI9Yjt0aGlzLm9wdGlvbnM9ZDt0aGlzLmFzdD1uZXcgcyh0aGlzLmxleGVyKTt0aGlzLmFzdENvbXBpbGVyPWQuY3NwP25ldyB1ZCh0aGlzLmFzdCxiKTpuZXcgdGQodGhpcy5hc3QsYil9O2hjLnByb3RvdHlwZT17Y29uc3RydWN0b3I6aGMscGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYXN0Q29tcGlsZXIuY29tcGlsZShhLHRoaXMub3B0aW9ucy5leHBlbnNpdmVDaGVja3MpfX07dmFyIGVnPU9iamVjdC5wcm90b3R5cGUudmFsdWVPZix6YT1NKFwiJHNjZVwiKSxtYT17SFRNTDpcImh0bWxcIixDU1M6XCJjc3NcIixVUkw6XCJ1cmxcIixSRVNPVVJDRV9VUkw6XCJyZXNvdXJjZVVybFwiLEpTOlwianNcIn0sZ2E9TShcIiRjb21waWxlXCIpLGJhPVcuY3JlYXRlRWxlbWVudChcImFcIikseWQ9eGEoUy5sb2NhdGlvbi5ocmVmKTtcbnpkLiRpbmplY3Q9W1wiJGRvY3VtZW50XCJdO0tjLiRpbmplY3Q9W1wiJHByb3ZpZGVcIl07dmFyIEdkPTIyLEZkPVwiLlwiLGpjPVwiMFwiO0FkLiRpbmplY3Q9W1wiJGxvY2FsZVwiXTtDZC4kaW5qZWN0PVtcIiRsb2NhbGVcIl07dmFyIHFnPXt5eXl5OmNhKFwiRnVsbFllYXJcIiw0KSx5eTpjYShcIkZ1bGxZZWFyXCIsMiwwLCEwKSx5OmNhKFwiRnVsbFllYXJcIiwxKSxNTU1NOkpiKFwiTW9udGhcIiksTU1NOkpiKFwiTW9udGhcIiwhMCksTU06Y2EoXCJNb250aFwiLDIsMSksTTpjYShcIk1vbnRoXCIsMSwxKSxkZDpjYShcIkRhdGVcIiwyKSxkOmNhKFwiRGF0ZVwiLDEpLEhIOmNhKFwiSG91cnNcIiwyKSxIOmNhKFwiSG91cnNcIiwxKSxoaDpjYShcIkhvdXJzXCIsMiwtMTIpLGg6Y2EoXCJIb3Vyc1wiLDEsLTEyKSxtbTpjYShcIk1pbnV0ZXNcIiwyKSxtOmNhKFwiTWludXRlc1wiLDEpLHNzOmNhKFwiU2Vjb25kc1wiLDIpLHM6Y2EoXCJTZWNvbmRzXCIsMSksc3NzOmNhKFwiTWlsbGlzZWNvbmRzXCIsMyksRUVFRTpKYihcIkRheVwiKSxFRUU6SmIoXCJEYXlcIiwhMCksXG5hOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDEyPmEuZ2V0SG91cnMoKT9iLkFNUE1TWzBdOmIuQU1QTVNbMV19LFo6ZnVuY3Rpb24oYSxiLGQpe2E9LTEqZDtyZXR1cm4gYT0oMDw9YT9cIitcIjpcIlwiKSsoSWIoTWF0aFswPGE/XCJmbG9vclwiOlwiY2VpbFwiXShhLzYwKSwyKStJYihNYXRoLmFicyhhJTYwKSwyKSl9LHd3OklkKDIpLHc6SWQoMSksRzprYyxHRzprYyxHR0c6a2MsR0dHRzpmdW5jdGlvbihhLGIpe3JldHVybiAwPj1hLmdldEZ1bGxZZWFyKCk/Yi5FUkFOQU1FU1swXTpiLkVSQU5BTUVTWzFdfX0scGc9LygoPzpbXnlNZEhobXNhWkV3RyddKyl8KD86Jyg/OlteJ118JycpKicpfCg/OkUrfHkrfE0rfGQrfEgrfGgrfG0rfHMrfGF8WnxHK3x3KykpKC4qKS8sb2c9L15cXC0/XFxkKyQvO0JkLiRpbmplY3Q9W1wiJGxvY2FsZVwiXTt2YXIgamc9bmEoSyksa2c9bmEodGIpO0RkLiRpbmplY3Q9W1wiJHBhcnNlXCJdO3ZhciBsZT1uYSh7cmVzdHJpY3Q6XCJFXCIsY29tcGlsZTpmdW5jdGlvbihhLGIpe2lmKCFiLmhyZWYmJlxuIWIueGxpbmtIcmVmKXJldHVybiBmdW5jdGlvbihhLGIpe2lmKFwiYVwiPT09YlswXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXt2YXIgZT1cIltvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddXCI9PT10YS5jYWxsKGIucHJvcChcImhyZWZcIikpP1wieGxpbms6aHJlZlwiOlwiaHJlZlwiO2Iub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2IuYXR0cihlKXx8YS5wcmV2ZW50RGVmYXVsdCgpfSl9fX19KSx1Yj17fTtuKERiLGZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gZChhLGQsZSl7YS4kd2F0Y2goZVtjXSxmdW5jdGlvbihhKXtlLiRzZXQoYiwhIWEpfSl9aWYoXCJtdWx0aXBsZVwiIT1hKXt2YXIgYz12YShcIm5nLVwiK2IpLGU9ZDtcImNoZWNrZWRcIj09PWEmJihlPWZ1bmN0aW9uKGEsYixlKXtlLm5nTW9kZWwhPT1lW2NdJiZkKGEsYixlKX0pO3ViW2NdPWZ1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLHByaW9yaXR5OjEwMCxsaW5rOmV9fX19KTtuKGFkLGZ1bmN0aW9uKGEsYil7dWJbYl09ZnVuY3Rpb24oKXtyZXR1cm57cHJpb3JpdHk6MTAwLFxubGluazpmdW5jdGlvbihhLGMsZSl7aWYoXCJuZ1BhdHRlcm5cIj09PWImJlwiL1wiPT1lLm5nUGF0dGVybi5jaGFyQXQoMCkmJihjPWUubmdQYXR0ZXJuLm1hdGNoKHNnKSkpe2UuJHNldChcIm5nUGF0dGVyblwiLG5ldyBSZWdFeHAoY1sxXSxjWzJdKSk7cmV0dXJufWEuJHdhdGNoKGVbYl0sZnVuY3Rpb24oYSl7ZS4kc2V0KGIsYSl9KX19fX0pO24oW1wic3JjXCIsXCJzcmNzZXRcIixcImhyZWZcIl0sZnVuY3Rpb24oYSl7dmFyIGI9dmEoXCJuZy1cIithKTt1YltiXT1mdW5jdGlvbigpe3JldHVybntwcmlvcml0eTo5OSxsaW5rOmZ1bmN0aW9uKGQsYyxlKXt2YXIgZj1hLGc9YTtcImhyZWZcIj09PWEmJlwiW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ11cIj09PXRhLmNhbGwoYy5wcm9wKFwiaHJlZlwiKSkmJihnPVwieGxpbmtIcmVmXCIsZS4kYXR0cltnXT1cInhsaW5rOmhyZWZcIixmPW51bGwpO2UuJG9ic2VydmUoYixmdW5jdGlvbihiKXtiPyhlLiRzZXQoZyxiKSxIYSYmZiYmYy5wcm9wKGYsZVtnXSkpOlwiaHJlZlwiPT09XG5hJiZlLiRzZXQoZyxudWxsKX0pfX19fSk7dmFyIEtiPXskYWRkQ29udHJvbDp6LCQkcmVuYW1lQ29udHJvbDpmdW5jdGlvbihhLGIpe2EuJG5hbWU9Yn0sJHJlbW92ZUNvbnRyb2w6eiwkc2V0VmFsaWRpdHk6eiwkc2V0RGlydHk6eiwkc2V0UHJpc3RpbmU6eiwkc2V0U3VibWl0dGVkOnp9O0pkLiRpbmplY3Q9W1wiJGVsZW1lbnRcIixcIiRhdHRyc1wiLFwiJHNjb3BlXCIsXCIkYW5pbWF0ZVwiLFwiJGludGVycG9sYXRlXCJdO3ZhciBSZD1mdW5jdGlvbihhKXtyZXR1cm5bXCIkdGltZW91dFwiLFwiJHBhcnNlXCIsZnVuY3Rpb24oYixkKXtmdW5jdGlvbiBjKGEpe3JldHVyblwiXCI9PT1hP2QoJ3RoaXNbXCJcIl0nKS5hc3NpZ246ZChhKS5hc3NpZ258fHp9cmV0dXJue25hbWU6XCJmb3JtXCIscmVzdHJpY3Q6YT9cIkVBQ1wiOlwiRVwiLHJlcXVpcmU6W1wiZm9ybVwiLFwiXl4/Zm9ybVwiXSxjb250cm9sbGVyOkpkLGNvbXBpbGU6ZnVuY3Rpb24oZCxmKXtkLmFkZENsYXNzKFdhKS5hZGRDbGFzcyhuYik7dmFyIGc9Zi5uYW1lP1wibmFtZVwiOlxuYSYmZi5uZ0Zvcm0/XCJuZ0Zvcm1cIjohMTtyZXR1cm57cHJlOmZ1bmN0aW9uKGEsZCxlLGYpe3ZhciBuPWZbMF07aWYoIShcImFjdGlvblwiaW4gZSkpe3ZhciB0PWZ1bmN0aW9uKGIpe2EuJGFwcGx5KGZ1bmN0aW9uKCl7bi4kY29tbWl0Vmlld1ZhbHVlKCk7bi4kc2V0U3VibWl0dGVkKCl9KTtiLnByZXZlbnREZWZhdWx0KCl9O2RbMF0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLHQsITEpO2Qub24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7YihmdW5jdGlvbigpe2RbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLHQsITEpfSwwLCExKX0pfShmWzFdfHxuLiQkcGFyZW50Rm9ybSkuJGFkZENvbnRyb2wobik7dmFyIHE9Zz9jKG4uJG5hbWUpOno7ZyYmKHEoYSxuKSxlLiRvYnNlcnZlKGcsZnVuY3Rpb24oYil7bi4kbmFtZSE9PWImJihxKGEsdyksbi4kJHBhcmVudEZvcm0uJCRyZW5hbWVDb250cm9sKG4sYikscT1jKG4uJG5hbWUpLHEoYSxuKSl9KSk7ZC5vbihcIiRkZXN0cm95XCIsXG5mdW5jdGlvbigpe24uJCRwYXJlbnRGb3JtLiRyZW1vdmVDb250cm9sKG4pO3EoYSx3KTtOKG4sS2IpfSl9fX19fV19LG1lPVJkKCksemU9UmQoITApLHJnPS9cXGR7NH0tWzAxXVxcZC1bMC0zXVxcZFRbMC0yXVxcZDpbMC01XVxcZDpbMC01XVxcZFxcLlxcZCsoWystXVswLTJdXFxkOlswLTVdXFxkfFopLyxBZz0vXlthLXpdW2EtelxcZC4rLV0qOlxcLyooPzpbXjpAXSsoPzo6W15AXSspP0ApPyg/OlteXFxzOi8/I10rfFxcW1thLWZcXGQ6XStcXF0pKD86OlxcZCspPyg/OlxcL1tePyNdKik/KD86XFw/W14jXSopPyg/OiMuKik/JC9pLEJnPS9eW2EtejAtOSEjJCUmJyorXFwvPT9eX2B7fH1+Li1dK0BbYS16MC05XShbYS16MC05LV0qW2EtejAtOV0pPyhcXC5bYS16MC05XShbYS16MC05LV0qW2EtejAtOV0pPykqJC9pLENnPS9eXFxzKihcXC18XFwrKT8oXFxkK3woXFxkKihcXC5cXGQqKSkpKFtlRV1bKy1dP1xcZCspP1xccyokLyxTZD0vXihcXGR7NH0pLShcXGR7Mn0pLShcXGR7Mn0pJC8sVGQ9L14oXFxkezR9KS0oXFxkXFxkKS0oXFxkXFxkKVQoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKShcXC5cXGR7MSwzfSk/KT8kLyxcbm5jPS9eKFxcZHs0fSktVyhcXGRcXGQpJC8sVWQ9L14oXFxkezR9KS0oXFxkXFxkKSQvLFZkPS9eKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoXFwuXFxkezEsM30pPyk/JC8sV2Q9e3RleHQ6ZnVuY3Rpb24oYSxiLGQsYyxlLGYpe2tiKGEsYixkLGMsZSxmKTtsYyhjKX0sZGF0ZTpsYihcImRhdGVcIixTZCxNYihTZCxbXCJ5eXl5XCIsXCJNTVwiLFwiZGRcIl0pLFwieXl5eS1NTS1kZFwiKSxcImRhdGV0aW1lLWxvY2FsXCI6bGIoXCJkYXRldGltZWxvY2FsXCIsVGQsTWIoVGQsXCJ5eXl5IE1NIGRkIEhIIG1tIHNzIHNzc1wiLnNwbGl0KFwiIFwiKSksXCJ5eXl5LU1NLWRkVEhIOm1tOnNzLnNzc1wiKSx0aW1lOmxiKFwidGltZVwiLFZkLE1iKFZkLFtcIkhIXCIsXCJtbVwiLFwic3NcIixcInNzc1wiXSksXCJISDptbTpzcy5zc3NcIiksd2VlazpsYihcIndlZWtcIixuYyxmdW5jdGlvbihhLGIpe2lmKGRhKGEpKXJldHVybiBhO2lmKEYoYSkpe25jLmxhc3RJbmRleD0wO3ZhciBkPW5jLmV4ZWMoYSk7aWYoZCl7dmFyIGM9K2RbMV0sZT0rZFsyXSxmPWQ9MCxnPVxuMCxoPTAsaz1IZChjKSxlPTcqKGUtMSk7YiYmKGQ9Yi5nZXRIb3VycygpLGY9Yi5nZXRNaW51dGVzKCksZz1iLmdldFNlY29uZHMoKSxoPWIuZ2V0TWlsbGlzZWNvbmRzKCkpO3JldHVybiBuZXcgRGF0ZShjLDAsay5nZXREYXRlKCkrZSxkLGYsZyxoKX19cmV0dXJuIE5hTn0sXCJ5eXl5LVd3d1wiKSxtb250aDpsYihcIm1vbnRoXCIsVWQsTWIoVWQsW1wieXl5eVwiLFwiTU1cIl0pLFwieXl5eS1NTVwiKSxudW1iZXI6ZnVuY3Rpb24oYSxiLGQsYyxlLGYpe0xkKGEsYixkLGMpO2tiKGEsYixkLGMsZSxmKTtjLiQkcGFyc2VyTmFtZT1cIm51bWJlclwiO2MuJHBhcnNlcnMucHVzaChmdW5jdGlvbihhKXtyZXR1cm4gYy4kaXNFbXB0eShhKT9udWxsOkNnLnRlc3QoYSk/cGFyc2VGbG9hdChhKTp3fSk7Yy4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKGEpe2lmKCFjLiRpc0VtcHR5KGEpKXtpZighUShhKSl0aHJvdyBtYihcIm51bWZtdFwiLGEpO2E9YS50b1N0cmluZygpfXJldHVybiBhfSk7aWYodShkLm1pbil8fFxuZC5uZ01pbil7dmFyIGc7Yy4kdmFsaWRhdG9ycy5taW49ZnVuY3Rpb24oYSl7cmV0dXJuIGMuJGlzRW1wdHkoYSl8fHEoZyl8fGE+PWd9O2QuJG9ic2VydmUoXCJtaW5cIixmdW5jdGlvbihhKXt1KGEpJiYhUShhKSYmKGE9cGFyc2VGbG9hdChhLDEwKSk7Zz1RKGEpJiYhaXNOYU4oYSk/YTp3O2MuJHZhbGlkYXRlKCl9KX1pZih1KGQubWF4KXx8ZC5uZ01heCl7dmFyIGg7Yy4kdmFsaWRhdG9ycy5tYXg9ZnVuY3Rpb24oYSl7cmV0dXJuIGMuJGlzRW1wdHkoYSl8fHEoaCl8fGE8PWh9O2QuJG9ic2VydmUoXCJtYXhcIixmdW5jdGlvbihhKXt1KGEpJiYhUShhKSYmKGE9cGFyc2VGbG9hdChhLDEwKSk7aD1RKGEpJiYhaXNOYU4oYSk/YTp3O2MuJHZhbGlkYXRlKCl9KX19LHVybDpmdW5jdGlvbihhLGIsZCxjLGUsZil7a2IoYSxiLGQsYyxlLGYpO2xjKGMpO2MuJCRwYXJzZXJOYW1lPVwidXJsXCI7Yy4kdmFsaWRhdG9ycy51cmw9ZnVuY3Rpb24oYSxiKXt2YXIgZD1hfHxiO3JldHVybiBjLiRpc0VtcHR5KGQpfHxcbkFnLnRlc3QoZCl9fSxlbWFpbDpmdW5jdGlvbihhLGIsZCxjLGUsZil7a2IoYSxiLGQsYyxlLGYpO2xjKGMpO2MuJCRwYXJzZXJOYW1lPVwiZW1haWxcIjtjLiR2YWxpZGF0b3JzLmVtYWlsPWZ1bmN0aW9uKGEsYil7dmFyIGQ9YXx8YjtyZXR1cm4gYy4kaXNFbXB0eShkKXx8QmcudGVzdChkKX19LHJhZGlvOmZ1bmN0aW9uKGEsYixkLGMpe3EoZC5uYW1lKSYmYi5hdHRyKFwibmFtZVwiLCsrb2IpO2Iub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2JbMF0uY2hlY2tlZCYmYy4kc2V0Vmlld1ZhbHVlKGQudmFsdWUsYSYmYS50eXBlKX0pO2MuJHJlbmRlcj1mdW5jdGlvbigpe2JbMF0uY2hlY2tlZD1kLnZhbHVlPT1jLiR2aWV3VmFsdWV9O2QuJG9ic2VydmUoXCJ2YWx1ZVwiLGMuJHJlbmRlcil9LGNoZWNrYm94OmZ1bmN0aW9uKGEsYixkLGMsZSxmLGcsaCl7dmFyIGs9TWQoaCxhLFwibmdUcnVlVmFsdWVcIixkLm5nVHJ1ZVZhbHVlLCEwKSxsPU1kKGgsYSxcIm5nRmFsc2VWYWx1ZVwiLGQubmdGYWxzZVZhbHVlLFxuITEpO2Iub24oXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2MuJHNldFZpZXdWYWx1ZShiWzBdLmNoZWNrZWQsYSYmYS50eXBlKX0pO2MuJHJlbmRlcj1mdW5jdGlvbigpe2JbMF0uY2hlY2tlZD1jLiR2aWV3VmFsdWV9O2MuJGlzRW1wdHk9ZnVuY3Rpb24oYSl7cmV0dXJuITE9PT1hfTtjLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24oYSl7cmV0dXJuIGthKGEsayl9KTtjLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24oYSl7cmV0dXJuIGE/azpsfSl9LGhpZGRlbjp6LGJ1dHRvbjp6LHN1Ym1pdDp6LHJlc2V0OnosZmlsZTp6fSxFYz1bXCIkYnJvd3NlclwiLFwiJHNuaWZmZXJcIixcIiRmaWx0ZXJcIixcIiRwYXJzZVwiLGZ1bmN0aW9uKGEsYixkLGMpe3JldHVybntyZXN0cmljdDpcIkVcIixyZXF1aXJlOltcIj9uZ01vZGVsXCJdLGxpbms6e3ByZTpmdW5jdGlvbihlLGYsZyxoKXtoWzBdJiYoV2RbSyhnLnR5cGUpXXx8V2QudGV4dCkoZSxmLGcsaFswXSxiLGEsZCxjKX19fX1dLERnPS9eKHRydWV8ZmFsc2V8XFxkKykkLyxcblJlPWZ1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLHByaW9yaXR5OjEwMCxjb21waWxlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIERnLnRlc3QoYi5uZ1ZhbHVlKT9mdW5jdGlvbihhLGIsZSl7ZS4kc2V0KFwidmFsdWVcIixhLiRldmFsKGUubmdWYWx1ZSkpfTpmdW5jdGlvbihhLGIsZSl7YS4kd2F0Y2goZS5uZ1ZhbHVlLGZ1bmN0aW9uKGEpe2UuJHNldChcInZhbHVlXCIsYSl9KX19fX0scmU9W1wiJGNvbXBpbGVcIixmdW5jdGlvbihhKXtyZXR1cm57cmVzdHJpY3Q6XCJBQ1wiLGNvbXBpbGU6ZnVuY3Rpb24oYil7YS4kJGFkZEJpbmRpbmdDbGFzcyhiKTtyZXR1cm4gZnVuY3Rpb24oYixjLGUpe2EuJCRhZGRCaW5kaW5nSW5mbyhjLGUubmdCaW5kKTtjPWNbMF07Yi4kd2F0Y2goZS5uZ0JpbmQsZnVuY3Rpb24oYSl7Yy50ZXh0Q29udGVudD1xKGEpP1wiXCI6YX0pfX19fV0sdGU9W1wiJGludGVycG9sYXRlXCIsXCIkY29tcGlsZVwiLGZ1bmN0aW9uKGEsYil7cmV0dXJue2NvbXBpbGU6ZnVuY3Rpb24oZCl7Yi4kJGFkZEJpbmRpbmdDbGFzcyhkKTtcbnJldHVybiBmdW5jdGlvbihjLGQsZil7Yz1hKGQuYXR0cihmLiRhdHRyLm5nQmluZFRlbXBsYXRlKSk7Yi4kJGFkZEJpbmRpbmdJbmZvKGQsYy5leHByZXNzaW9ucyk7ZD1kWzBdO2YuJG9ic2VydmUoXCJuZ0JpbmRUZW1wbGF0ZVwiLGZ1bmN0aW9uKGEpe2QudGV4dENvbnRlbnQ9cShhKT9cIlwiOmF9KX19fX1dLHNlPVtcIiRzY2VcIixcIiRwYXJzZVwiLFwiJGNvbXBpbGVcIixmdW5jdGlvbihhLGIsZCl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLGNvbXBpbGU6ZnVuY3Rpb24oYyxlKXt2YXIgZj1iKGUubmdCaW5kSHRtbCksZz1iKGUubmdCaW5kSHRtbCxmdW5jdGlvbihhKXtyZXR1cm4oYXx8XCJcIikudG9TdHJpbmcoKX0pO2QuJCRhZGRCaW5kaW5nQ2xhc3MoYyk7cmV0dXJuIGZ1bmN0aW9uKGIsYyxlKXtkLiQkYWRkQmluZGluZ0luZm8oYyxlLm5nQmluZEh0bWwpO2IuJHdhdGNoKGcsZnVuY3Rpb24oKXtjLmh0bWwoYS5nZXRUcnVzdGVkSHRtbChmKGIpKXx8XCJcIil9KX19fX1dLFFlPW5hKHtyZXN0cmljdDpcIkFcIixcbnJlcXVpcmU6XCJuZ01vZGVsXCIsbGluazpmdW5jdGlvbihhLGIsZCxjKXtjLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2goZnVuY3Rpb24oKXthLiRldmFsKGQubmdDaGFuZ2UpfSl9fSksdWU9bWMoXCJcIiwhMCksd2U9bWMoXCJPZGRcIiwwKSx2ZT1tYyhcIkV2ZW5cIiwxKSx4ZT1LYSh7Y29tcGlsZTpmdW5jdGlvbihhLGIpe2IuJHNldChcIm5nQ2xvYWtcIix3KTthLnJlbW92ZUNsYXNzKFwibmctY2xvYWtcIil9fSkseWU9W2Z1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLHNjb3BlOiEwLGNvbnRyb2xsZXI6XCJAXCIscHJpb3JpdHk6NTAwfX1dLEpjPXt9LEVnPXtibHVyOiEwLGZvY3VzOiEwfTtuKFwiY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlbW92ZSBtb3VzZWVudGVyIG1vdXNlbGVhdmUga2V5ZG93biBrZXl1cCBrZXlwcmVzcyBzdWJtaXQgZm9jdXMgYmx1ciBjb3B5IGN1dCBwYXN0ZVwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihhKXt2YXIgYj1cbnZhKFwibmctXCIrYSk7SmNbYl09W1wiJHBhcnNlXCIsXCIkcm9vdFNjb3BlXCIsZnVuY3Rpb24oZCxjKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIsY29tcGlsZTpmdW5jdGlvbihlLGYpe3ZhciBnPWQoZltiXSxudWxsLCEwKTtyZXR1cm4gZnVuY3Rpb24oYixkKXtkLm9uKGEsZnVuY3Rpb24oZCl7dmFyIGU9ZnVuY3Rpb24oKXtnKGIseyRldmVudDpkfSl9O0VnW2FdJiZjLiQkcGhhc2U/Yi4kZXZhbEFzeW5jKGUpOmIuJGFwcGx5KGUpfSl9fX19XX0pO3ZhciBCZT1bXCIkYW5pbWF0ZVwiLGZ1bmN0aW9uKGEpe3JldHVybnttdWx0aUVsZW1lbnQ6ITAsdHJhbnNjbHVkZTpcImVsZW1lbnRcIixwcmlvcml0eTo2MDAsdGVybWluYWw6ITAscmVzdHJpY3Q6XCJBXCIsJCR0bGI6ITAsbGluazpmdW5jdGlvbihiLGQsYyxlLGYpe3ZhciBnLGgsaztiLiR3YXRjaChjLm5nSWYsZnVuY3Rpb24oYil7Yj9ofHxmKGZ1bmN0aW9uKGIsZSl7aD1lO2JbYi5sZW5ndGgrK109Vy5jcmVhdGVDb21tZW50KFwiIGVuZCBuZ0lmOiBcIitcbmMubmdJZitcIiBcIik7Zz17Y2xvbmU6Yn07YS5lbnRlcihiLGQucGFyZW50KCksZCl9KTooayYmKGsucmVtb3ZlKCksaz1udWxsKSxoJiYoaC4kZGVzdHJveSgpLGg9bnVsbCksZyYmKGs9c2IoZy5jbG9uZSksYS5sZWF2ZShrKS50aGVuKGZ1bmN0aW9uKCl7az1udWxsfSksZz1udWxsKSl9KX19fV0sQ2U9W1wiJHRlbXBsYXRlUmVxdWVzdFwiLFwiJGFuY2hvclNjcm9sbFwiLFwiJGFuaW1hdGVcIixmdW5jdGlvbihhLGIsZCl7cmV0dXJue3Jlc3RyaWN0OlwiRUNBXCIscHJpb3JpdHk6NDAwLHRlcm1pbmFsOiEwLHRyYW5zY2x1ZGU6XCJlbGVtZW50XCIsY29udHJvbGxlcjokLm5vb3AsY29tcGlsZTpmdW5jdGlvbihjLGUpe3ZhciBmPWUubmdJbmNsdWRlfHxlLnNyYyxnPWUub25sb2FkfHxcIlwiLGg9ZS5hdXRvc2Nyb2xsO3JldHVybiBmdW5jdGlvbihjLGUsbSxuLHEpe3ZhciBzPTAseSx3LHAseD1mdW5jdGlvbigpe3cmJih3LnJlbW92ZSgpLHc9bnVsbCk7eSYmKHkuJGRlc3Ryb3koKSx5PW51bGwpO3AmJlxuKGQubGVhdmUocCkudGhlbihmdW5jdGlvbigpe3c9bnVsbH0pLHc9cCxwPW51bGwpfTtjLiR3YXRjaChmLGZ1bmN0aW9uKGYpe3ZhciBtPWZ1bmN0aW9uKCl7IXUoaCl8fGgmJiFjLiRldmFsKGgpfHxiKCl9LEg9KytzO2Y/KGEoZiwhMCkudGhlbihmdW5jdGlvbihhKXtpZighYy4kJGRlc3Ryb3llZCYmSD09PXMpe3ZhciBiPWMuJG5ldygpO24udGVtcGxhdGU9YTthPXEoYixmdW5jdGlvbihhKXt4KCk7ZC5lbnRlcihhLG51bGwsZSkudGhlbihtKX0pO3k9YjtwPWE7eS4kZW1pdChcIiRpbmNsdWRlQ29udGVudExvYWRlZFwiLGYpO2MuJGV2YWwoZyl9fSxmdW5jdGlvbigpe2MuJCRkZXN0cm95ZWR8fEghPT1zfHwoeCgpLGMuJGVtaXQoXCIkaW5jbHVkZUNvbnRlbnRFcnJvclwiLGYpKX0pLGMuJGVtaXQoXCIkaW5jbHVkZUNvbnRlbnRSZXF1ZXN0ZWRcIixmKSk6KHgoKSxuLnRlbXBsYXRlPW51bGwpfSl9fX19XSxUZT1bXCIkY29tcGlsZVwiLGZ1bmN0aW9uKGEpe3JldHVybntyZXN0cmljdDpcIkVDQVwiLFxucHJpb3JpdHk6LTQwMCxyZXF1aXJlOlwibmdJbmNsdWRlXCIsbGluazpmdW5jdGlvbihiLGQsYyxlKXsvU1ZHLy50ZXN0KGRbMF0udG9TdHJpbmcoKSk/KGQuZW1wdHkoKSxhKE1jKGUudGVtcGxhdGUsVykuY2hpbGROb2RlcykoYixmdW5jdGlvbihhKXtkLmFwcGVuZChhKX0se2Z1dHVyZVBhcmVudEVsZW1lbnQ6ZH0pKTooZC5odG1sKGUudGVtcGxhdGUpLGEoZC5jb250ZW50cygpKShiKSl9fX1dLERlPUthKHtwcmlvcml0eTo0NTAsY29tcGlsZTpmdW5jdGlvbigpe3JldHVybntwcmU6ZnVuY3Rpb24oYSxiLGQpe2EuJGV2YWwoZC5uZ0luaXQpfX19fSksUGU9ZnVuY3Rpb24oKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIscHJpb3JpdHk6MTAwLHJlcXVpcmU6XCJuZ01vZGVsXCIsbGluazpmdW5jdGlvbihhLGIsZCxjKXt2YXIgZT1iLmF0dHIoZC4kYXR0ci5uZ0xpc3QpfHxcIiwgXCIsZj1cImZhbHNlXCIhPT1kLm5nVHJpbSxnPWY/VChlKTplO2MuJHBhcnNlcnMucHVzaChmdW5jdGlvbihhKXtpZighcShhKSl7dmFyIGI9XG5bXTthJiZuKGEuc3BsaXQoZyksZnVuY3Rpb24oYSl7YSYmYi5wdXNoKGY/VChhKTphKX0pO3JldHVybiBifX0pO2MuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbihhKXtyZXR1cm4gRShhKT9hLmpvaW4oZSk6d30pO2MuJGlzRW1wdHk9ZnVuY3Rpb24oYSl7cmV0dXJuIWF8fCFhLmxlbmd0aH19fX0sbmI9XCJuZy12YWxpZFwiLE5kPVwibmctaW52YWxpZFwiLFdhPVwibmctcHJpc3RpbmVcIixMYj1cIm5nLWRpcnR5XCIsUGQ9XCJuZy1wZW5kaW5nXCIsbWI9TShcIm5nTW9kZWxcIiksRmc9W1wiJHNjb3BlXCIsXCIkZXhjZXB0aW9uSGFuZGxlclwiLFwiJGF0dHJzXCIsXCIkZWxlbWVudFwiLFwiJHBhcnNlXCIsXCIkYW5pbWF0ZVwiLFwiJHRpbWVvdXRcIixcIiRyb290U2NvcGVcIixcIiRxXCIsXCIkaW50ZXJwb2xhdGVcIixmdW5jdGlvbihhLGIsZCxjLGUsZixnLGgsayxsKXt0aGlzLiRtb2RlbFZhbHVlPXRoaXMuJHZpZXdWYWx1ZT1OdW1iZXIuTmFOO3RoaXMuJCRyYXdNb2RlbFZhbHVlPXc7dGhpcy4kdmFsaWRhdG9ycz17fTt0aGlzLiRhc3luY1ZhbGlkYXRvcnM9XG57fTt0aGlzLiRwYXJzZXJzPVtdO3RoaXMuJGZvcm1hdHRlcnM9W107dGhpcy4kdmlld0NoYW5nZUxpc3RlbmVycz1bXTt0aGlzLiR1bnRvdWNoZWQ9ITA7dGhpcy4kdG91Y2hlZD0hMTt0aGlzLiRwcmlzdGluZT0hMDt0aGlzLiRkaXJ0eT0hMTt0aGlzLiR2YWxpZD0hMDt0aGlzLiRpbnZhbGlkPSExO3RoaXMuJGVycm9yPXt9O3RoaXMuJCRzdWNjZXNzPXt9O3RoaXMuJHBlbmRpbmc9dzt0aGlzLiRuYW1lPWwoZC5uYW1lfHxcIlwiLCExKShhKTt0aGlzLiQkcGFyZW50Rm9ybT1LYjt2YXIgbT1lKGQubmdNb2RlbCkscj1tLmFzc2lnbix0PW0scz1yLHk9bnVsbCxBLHA9dGhpczt0aGlzLiQkc2V0T3B0aW9ucz1mdW5jdGlvbihhKXtpZigocC4kb3B0aW9ucz1hKSYmYS5nZXR0ZXJTZXR0ZXIpe3ZhciBiPWUoZC5uZ01vZGVsK1wiKClcIiksZj1lKGQubmdNb2RlbCtcIigkJCRwKVwiKTt0PWZ1bmN0aW9uKGEpe3ZhciBjPW0oYSk7QihjKSYmKGM9YihhKSk7cmV0dXJuIGN9O3M9ZnVuY3Rpb24oYSxcbmIpe0IobShhKSk/ZihhLHskJCRwOnAuJG1vZGVsVmFsdWV9KTpyKGEscC4kbW9kZWxWYWx1ZSl9fWVsc2UgaWYoIW0uYXNzaWduKXRocm93IG1iKFwibm9uYXNzaWduXCIsZC5uZ01vZGVsLHVhKGMpKTt9O3RoaXMuJHJlbmRlcj16O3RoaXMuJGlzRW1wdHk9ZnVuY3Rpb24oYSl7cmV0dXJuIHEoYSl8fFwiXCI9PT1hfHxudWxsPT09YXx8YSE9PWF9O3ZhciB4PTA7S2Qoe2N0cmw6dGhpcywkZWxlbWVudDpjLHNldDpmdW5jdGlvbihhLGIpe2FbYl09ITB9LHVuc2V0OmZ1bmN0aW9uKGEsYil7ZGVsZXRlIGFbYl19LCRhbmltYXRlOmZ9KTt0aGlzLiRzZXRQcmlzdGluZT1mdW5jdGlvbigpe3AuJGRpcnR5PSExO3AuJHByaXN0aW5lPSEwO2YucmVtb3ZlQ2xhc3MoYyxMYik7Zi5hZGRDbGFzcyhjLFdhKX07dGhpcy4kc2V0RGlydHk9ZnVuY3Rpb24oKXtwLiRkaXJ0eT0hMDtwLiRwcmlzdGluZT0hMTtmLnJlbW92ZUNsYXNzKGMsV2EpO2YuYWRkQ2xhc3MoYyxMYik7cC4kJHBhcmVudEZvcm0uJHNldERpcnR5KCl9O1xudGhpcy4kc2V0VW50b3VjaGVkPWZ1bmN0aW9uKCl7cC4kdG91Y2hlZD0hMTtwLiR1bnRvdWNoZWQ9ITA7Zi5zZXRDbGFzcyhjLFwibmctdW50b3VjaGVkXCIsXCJuZy10b3VjaGVkXCIpfTt0aGlzLiRzZXRUb3VjaGVkPWZ1bmN0aW9uKCl7cC4kdG91Y2hlZD0hMDtwLiR1bnRvdWNoZWQ9ITE7Zi5zZXRDbGFzcyhjLFwibmctdG91Y2hlZFwiLFwibmctdW50b3VjaGVkXCIpfTt0aGlzLiRyb2xsYmFja1ZpZXdWYWx1ZT1mdW5jdGlvbigpe2cuY2FuY2VsKHkpO3AuJHZpZXdWYWx1ZT1wLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtwLiRyZW5kZXIoKX07dGhpcy4kdmFsaWRhdGU9ZnVuY3Rpb24oKXtpZighUShwLiRtb2RlbFZhbHVlKXx8IWlzTmFOKHAuJG1vZGVsVmFsdWUpKXt2YXIgYT1wLiQkcmF3TW9kZWxWYWx1ZSxiPXAuJHZhbGlkLGM9cC4kbW9kZWxWYWx1ZSxkPXAuJG9wdGlvbnMmJnAuJG9wdGlvbnMuYWxsb3dJbnZhbGlkO3AuJCRydW5WYWxpZGF0b3JzKGEscC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUsXG5mdW5jdGlvbihlKXtkfHxiPT09ZXx8KHAuJG1vZGVsVmFsdWU9ZT9hOncscC4kbW9kZWxWYWx1ZSE9PWMmJnAuJCR3cml0ZU1vZGVsVG9TY29wZSgpKX0pfX07dGhpcy4kJHJ1blZhbGlkYXRvcnM9ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoKXt2YXIgYz0hMDtuKHAuJHZhbGlkYXRvcnMsZnVuY3Rpb24oZCxlKXt2YXIgZz1kKGEsYik7Yz1jJiZnO2YoZSxnKX0pO3JldHVybiBjPyEwOihuKHAuJGFzeW5jVmFsaWRhdG9ycyxmdW5jdGlvbihhLGIpe2YoYixudWxsKX0pLCExKX1mdW5jdGlvbiBlKCl7dmFyIGM9W10sZD0hMDtuKHAuJGFzeW5jVmFsaWRhdG9ycyxmdW5jdGlvbihlLGcpe3ZhciBoPWUoYSxiKTtpZighaHx8IUIoaC50aGVuKSl0aHJvdyBtYihcIm5vcHJvbWlzZVwiLGgpO2YoZyx3KTtjLnB1c2goaC50aGVuKGZ1bmN0aW9uKCl7ZihnLCEwKX0sZnVuY3Rpb24oYSl7ZD0hMTtmKGcsITEpfSkpfSk7Yy5sZW5ndGg/ay5hbGwoYykudGhlbihmdW5jdGlvbigpe2coZCl9LFxueik6ZyghMCl9ZnVuY3Rpb24gZihhLGIpe2g9PT14JiZwLiRzZXRWYWxpZGl0eShhLGIpfWZ1bmN0aW9uIGcoYSl7aD09PXgmJmMoYSl9eCsrO3ZhciBoPXg7KGZ1bmN0aW9uKCl7dmFyIGE9cC4kJHBhcnNlck5hbWV8fFwicGFyc2VcIjtpZihxKEEpKWYoYSxudWxsKTtlbHNlIHJldHVybiBBfHwobihwLiR2YWxpZGF0b3JzLGZ1bmN0aW9uKGEsYil7ZihiLG51bGwpfSksbihwLiRhc3luY1ZhbGlkYXRvcnMsZnVuY3Rpb24oYSxiKXtmKGIsbnVsbCl9KSksZihhLEEpLEE7cmV0dXJuITB9KSgpP2QoKT9lKCk6ZyghMSk6ZyghMSl9O3RoaXMuJGNvbW1pdFZpZXdWYWx1ZT1mdW5jdGlvbigpe3ZhciBhPXAuJHZpZXdWYWx1ZTtnLmNhbmNlbCh5KTtpZihwLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSE9PWF8fFwiXCI9PT1hJiZwLiQkaGFzTmF0aXZlVmFsaWRhdG9ycylwLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZT1hLHAuJHByaXN0aW5lJiZ0aGlzLiRzZXREaXJ0eSgpLHRoaXMuJCRwYXJzZUFuZFZhbGlkYXRlKCl9O1xudGhpcy4kJHBhcnNlQW5kVmFsaWRhdGU9ZnVuY3Rpb24oKXt2YXIgYj1wLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtpZihBPXEoYik/dzohMClmb3IodmFyIGM9MDtjPHAuJHBhcnNlcnMubGVuZ3RoO2MrKylpZihiPXAuJHBhcnNlcnNbY10oYikscShiKSl7QT0hMTticmVha31RKHAuJG1vZGVsVmFsdWUpJiZpc05hTihwLiRtb2RlbFZhbHVlKSYmKHAuJG1vZGVsVmFsdWU9dChhKSk7dmFyIGQ9cC4kbW9kZWxWYWx1ZSxlPXAuJG9wdGlvbnMmJnAuJG9wdGlvbnMuYWxsb3dJbnZhbGlkO3AuJCRyYXdNb2RlbFZhbHVlPWI7ZSYmKHAuJG1vZGVsVmFsdWU9YixwLiRtb2RlbFZhbHVlIT09ZCYmcC4kJHdyaXRlTW9kZWxUb1Njb3BlKCkpO3AuJCRydW5WYWxpZGF0b3JzKGIscC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUsZnVuY3Rpb24oYSl7ZXx8KHAuJG1vZGVsVmFsdWU9YT9iOncscC4kbW9kZWxWYWx1ZSE9PWQmJnAuJCR3cml0ZU1vZGVsVG9TY29wZSgpKX0pfTt0aGlzLiQkd3JpdGVNb2RlbFRvU2NvcGU9XG5mdW5jdGlvbigpe3MoYSxwLiRtb2RlbFZhbHVlKTtuKHAuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMsZnVuY3Rpb24oYSl7dHJ5e2EoKX1jYXRjaChjKXtiKGMpfX0pfTt0aGlzLiRzZXRWaWV3VmFsdWU9ZnVuY3Rpb24oYSxiKXtwLiR2aWV3VmFsdWU9YTtwLiRvcHRpb25zJiYhcC4kb3B0aW9ucy51cGRhdGVPbkRlZmF1bHR8fHAuJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdChiKX07dGhpcy4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0PWZ1bmN0aW9uKGIpe3ZhciBjPTAsZD1wLiRvcHRpb25zO2QmJnUoZC5kZWJvdW5jZSkmJihkPWQuZGVib3VuY2UsUShkKT9jPWQ6UShkW2JdKT9jPWRbYl06UShkW1wiZGVmYXVsdFwiXSkmJihjPWRbXCJkZWZhdWx0XCJdKSk7Zy5jYW5jZWwoeSk7Yz95PWcoZnVuY3Rpb24oKXtwLiRjb21taXRWaWV3VmFsdWUoKX0sYyk6aC4kJHBoYXNlP3AuJGNvbW1pdFZpZXdWYWx1ZSgpOmEuJGFwcGx5KGZ1bmN0aW9uKCl7cC4kY29tbWl0Vmlld1ZhbHVlKCl9KX07YS4kd2F0Y2goZnVuY3Rpb24oKXt2YXIgYj1cbnQoYSk7aWYoYiE9PXAuJG1vZGVsVmFsdWUmJihwLiRtb2RlbFZhbHVlPT09cC4kbW9kZWxWYWx1ZXx8Yj09PWIpKXtwLiRtb2RlbFZhbHVlPXAuJCRyYXdNb2RlbFZhbHVlPWI7QT13O2Zvcih2YXIgYz1wLiRmb3JtYXR0ZXJzLGQ9Yy5sZW5ndGgsZT1iO2QtLTspZT1jW2RdKGUpO3AuJHZpZXdWYWx1ZSE9PWUmJihwLiR2aWV3VmFsdWU9cC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU9ZSxwLiRyZW5kZXIoKSxwLiQkcnVuVmFsaWRhdG9ycyhiLGUseikpfXJldHVybiBifSl9XSxPZT1bXCIkcm9vdFNjb3BlXCIsZnVuY3Rpb24oYSl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLHJlcXVpcmU6W1wibmdNb2RlbFwiLFwiXj9mb3JtXCIsXCJeP25nTW9kZWxPcHRpb25zXCJdLGNvbnRyb2xsZXI6RmcscHJpb3JpdHk6MSxjb21waWxlOmZ1bmN0aW9uKGIpe2IuYWRkQ2xhc3MoV2EpLmFkZENsYXNzKFwibmctdW50b3VjaGVkXCIpLmFkZENsYXNzKG5iKTtyZXR1cm57cHJlOmZ1bmN0aW9uKGEsYixlLGYpe3ZhciBnPVxuZlswXTtiPWZbMV18fGcuJCRwYXJlbnRGb3JtO2cuJCRzZXRPcHRpb25zKGZbMl0mJmZbMl0uJG9wdGlvbnMpO2IuJGFkZENvbnRyb2woZyk7ZS4kb2JzZXJ2ZShcIm5hbWVcIixmdW5jdGlvbihhKXtnLiRuYW1lIT09YSYmZy4kJHBhcmVudEZvcm0uJCRyZW5hbWVDb250cm9sKGcsYSl9KTthLiRvbihcIiRkZXN0cm95XCIsZnVuY3Rpb24oKXtnLiQkcGFyZW50Rm9ybS4kcmVtb3ZlQ29udHJvbChnKX0pfSxwb3N0OmZ1bmN0aW9uKGIsYyxlLGYpe3ZhciBnPWZbMF07aWYoZy4kb3B0aW9ucyYmZy4kb3B0aW9ucy51cGRhdGVPbiljLm9uKGcuJG9wdGlvbnMudXBkYXRlT24sZnVuY3Rpb24oYSl7Zy4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KGEmJmEudHlwZSl9KTtjLm9uKFwiYmx1clwiLGZ1bmN0aW9uKGMpe2cuJHRvdWNoZWR8fChhLiQkcGhhc2U/Yi4kZXZhbEFzeW5jKGcuJHNldFRvdWNoZWQpOmIuJGFwcGx5KGcuJHNldFRvdWNoZWQpKX0pfX19fX1dLEdnPS8oXFxzK3xeKWRlZmF1bHQoXFxzK3wkKS8sXG5TZT1mdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkFcIixjb250cm9sbGVyOltcIiRzY29wZVwiLFwiJGF0dHJzXCIsZnVuY3Rpb24oYSxiKXt2YXIgZD10aGlzO3RoaXMuJG9wdGlvbnM9TWEoYS4kZXZhbChiLm5nTW9kZWxPcHRpb25zKSk7dSh0aGlzLiRvcHRpb25zLnVwZGF0ZU9uKT8odGhpcy4kb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQ9ITEsdGhpcy4kb3B0aW9ucy51cGRhdGVPbj1UKHRoaXMuJG9wdGlvbnMudXBkYXRlT24ucmVwbGFjZShHZyxmdW5jdGlvbigpe2QuJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0PSEwO3JldHVyblwiIFwifSkpKTp0aGlzLiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdD0hMH1dfX0sRWU9S2Eoe3Rlcm1pbmFsOiEwLHByaW9yaXR5OjFFM30pLEhnPU0oXCJuZ09wdGlvbnNcIiksSWc9L15cXHMqKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2dyb3VwXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK2Rpc2FibGVcXHMrd2hlblxccysoW1xcc1xcU10rPykpP1xccytmb3JcXHMrKD86KFtcXCRcXHddW1xcJFxcd10qKXwoPzpcXChcXHMqKFtcXCRcXHddW1xcJFxcd10qKVxccyosXFxzKihbXFwkXFx3XVtcXCRcXHddKilcXHMqXFwpKSlcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/JC8sXG5NZT1bXCIkY29tcGlsZVwiLFwiJHBhcnNlXCIsZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBkKGEsYyxkKXtmdW5jdGlvbiBlKGEsYixjLGQsZil7dGhpcy5zZWxlY3RWYWx1ZT1hO3RoaXMudmlld1ZhbHVlPWI7dGhpcy5sYWJlbD1jO3RoaXMuZ3JvdXA9ZDt0aGlzLmRpc2FibGVkPWZ9ZnVuY3Rpb24gbChhKXt2YXIgYjtpZighcSYmQWEoYSkpYj1hO2Vsc2V7Yj1bXTtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiZcIiRcIiE9PWMuY2hhckF0KDApJiZiLnB1c2goYyl9cmV0dXJuIGJ9dmFyIG09YS5tYXRjaChJZyk7aWYoIW0pdGhyb3cgSGcoXCJpZXhwXCIsYSx1YShjKSk7dmFyIG49bVs1XXx8bVs3XSxxPW1bNl07YT0vIGFzIC8udGVzdChtWzBdKSYmbVsxXTt2YXIgcz1tWzldO2M9YihtWzJdP21bMV06bik7dmFyIHk9YSYmYihhKXx8Yyx1PXMmJmIocykscD1zP2Z1bmN0aW9uKGEsYil7cmV0dXJuIHUoZCxiKX06ZnVuY3Rpb24oYSl7cmV0dXJuIERhKGEpfSx4PWZ1bmN0aW9uKGEsXG5iKXtyZXR1cm4gcChhLEQoYSxiKSl9LHY9YihtWzJdfHxtWzFdKSx3PWIobVszXXx8XCJcIiksSD1iKG1bNF18fFwiXCIpLEE9YihtWzhdKSx6PXt9LEQ9cT9mdW5jdGlvbihhLGIpe3pbcV09Yjt6W25dPWE7cmV0dXJuIHp9OmZ1bmN0aW9uKGEpe3pbbl09YTtyZXR1cm4gen07cmV0dXJue3RyYWNrQnk6cyxnZXRUcmFja0J5VmFsdWU6eCxnZXRXYXRjaGFibGVzOmIoQSxmdW5jdGlvbihhKXt2YXIgYj1bXTthPWF8fFtdO2Zvcih2YXIgYz1sKGEpLGU9Yy5sZW5ndGgsZj0wO2Y8ZTtmKyspe3ZhciBnPWE9PT1jP2Y6Y1tmXSxrPUQoYVtnXSxnKSxnPXAoYVtnXSxrKTtiLnB1c2goZyk7aWYobVsyXXx8bVsxXSlnPXYoZCxrKSxiLnB1c2goZyk7bVs0XSYmKGs9SChkLGspLGIucHVzaChrKSl9cmV0dXJuIGJ9KSxnZXRPcHRpb25zOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPVtdLGI9e30sYz1BKGQpfHxbXSxmPWwoYyksZz1mLmxlbmd0aCxtPTA7bTxnO20rKyl7dmFyIG49Yz09PWY/bTpmW21dLHI9XG5EKGNbbl0sbikscT15KGQsciksbj1wKHEsciksdD12KGQsciksdT13KGQscikscj1IKGQscikscT1uZXcgZShuLHEsdCx1LHIpO2EucHVzaChxKTtiW25dPXF9cmV0dXJue2l0ZW1zOmEsc2VsZWN0VmFsdWVNYXA6YixnZXRPcHRpb25Gcm9tVmlld1ZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBiW3goYSldfSxnZXRWaWV3VmFsdWVGcm9tT3B0aW9uOmZ1bmN0aW9uKGEpe3JldHVybiBzPyQuY29weShhLnZpZXdWYWx1ZSk6YS52aWV3VmFsdWV9fX19fXZhciBjPVcuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSxlPVcuY3JlYXRlRWxlbWVudChcIm9wdGdyb3VwXCIpO3JldHVybntyZXN0cmljdDpcIkFcIix0ZXJtaW5hbDohMCxyZXF1aXJlOltcInNlbGVjdFwiLFwiP25nTW9kZWxcIl0sbGluazp7cHJlOmZ1bmN0aW9uKGEsYixjLGQpe2RbMF0ucmVnaXN0ZXJPcHRpb249en0scG9zdDpmdW5jdGlvbihiLGcsaCxrKXtmdW5jdGlvbiBsKGEsYil7YS5lbGVtZW50PWI7Yi5kaXNhYmxlZD1hLmRpc2FibGVkO1xuYS5sYWJlbCE9PWIubGFiZWwmJihiLmxhYmVsPWEubGFiZWwsYi50ZXh0Q29udGVudD1hLmxhYmVsKTthLnZhbHVlIT09Yi52YWx1ZSYmKGIudmFsdWU9YS5zZWxlY3RWYWx1ZSl9ZnVuY3Rpb24gbShhLGIsYyxkKXtiJiZLKGIubm9kZU5hbWUpPT09Yz9jPWI6KGM9ZC5jbG9uZU5vZGUoITEpLGI/YS5pbnNlcnRCZWZvcmUoYyxiKTphLmFwcGVuZENoaWxkKGMpKTtyZXR1cm4gY31mdW5jdGlvbiByKGEpe2Zvcih2YXIgYjthOyliPWEubmV4dFNpYmxpbmcsWmIoYSksYT1ifWZ1bmN0aW9uIHEoYSl7dmFyIGI9eCYmeFswXSxjPXomJnpbMF07aWYoYnx8Yylmb3IoO2EmJihhPT09Ynx8YT09PWN8fDg9PT1hLm5vZGVUeXBlfHxcIm9wdGlvblwiPT09b2EoYSkmJlwiXCI9PT1hLnZhbHVlKTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIHMoKXt2YXIgYT1CJiZ1LnJlYWRWYWx1ZSgpO0I9RC5nZXRPcHRpb25zKCk7dmFyIGI9e30sZD1nWzBdLmZpcnN0Q2hpbGQ7SCYmZy5wcmVwZW5kKHgpO1xuZD1xKGQpO0IuaXRlbXMuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgZixoO2EuZ3JvdXA/KGY9YlthLmdyb3VwXSxmfHwoZj1tKGdbMF0sZCxcIm9wdGdyb3VwXCIsZSksZD1mLm5leHRTaWJsaW5nLGYubGFiZWw9YS5ncm91cCxmPWJbYS5ncm91cF09e2dyb3VwRWxlbWVudDpmLGN1cnJlbnRPcHRpb25FbGVtZW50OmYuZmlyc3RDaGlsZH0pLGg9bShmLmdyb3VwRWxlbWVudCxmLmN1cnJlbnRPcHRpb25FbGVtZW50LFwib3B0aW9uXCIsYyksbChhLGgpLGYuY3VycmVudE9wdGlvbkVsZW1lbnQ9aC5uZXh0U2libGluZyk6KGg9bShnWzBdLGQsXCJvcHRpb25cIixjKSxsKGEsaCksZD1oLm5leHRTaWJsaW5nKX0pO09iamVjdC5rZXlzKGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cihiW2FdLmN1cnJlbnRPcHRpb25FbGVtZW50KX0pO3IoZCk7eS4kcmVuZGVyKCk7aWYoIXkuJGlzRW1wdHkoYSkpe3ZhciBmPXUucmVhZFZhbHVlKCk7KEQudHJhY2tCeXx8cD9rYShhLGYpOmE9PT1mKXx8KHkuJHNldFZpZXdWYWx1ZShmKSxcbnkuJHJlbmRlcigpKX19dmFyIHk9a1sxXTtpZih5KXt2YXIgdT1rWzBdLHA9aC5tdWx0aXBsZSx4O2s9MDtmb3IodmFyIHY9Zy5jaGlsZHJlbigpLHc9di5sZW5ndGg7azx3O2srKylpZihcIlwiPT09dltrXS52YWx1ZSl7eD12LmVxKGspO2JyZWFrfXZhciBIPSEheCx6PUEoYy5jbG9uZU5vZGUoITEpKTt6LnZhbChcIj9cIik7dmFyIEIsRD1kKGgubmdPcHRpb25zLGcsYik7cD8oeS4kaXNFbXB0eT1mdW5jdGlvbihhKXtyZXR1cm4hYXx8MD09PWEubGVuZ3RofSx1LndyaXRlVmFsdWU9ZnVuY3Rpb24oYSl7Qi5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZWxlbWVudC5zZWxlY3RlZD0hMX0pO2EmJmEuZm9yRWFjaChmdW5jdGlvbihhKXsoYT1CLmdldE9wdGlvbkZyb21WaWV3VmFsdWUoYSkpJiYhYS5kaXNhYmxlZCYmKGEuZWxlbWVudC5zZWxlY3RlZD0hMCl9KX0sdS5yZWFkVmFsdWU9ZnVuY3Rpb24oKXt2YXIgYT1nLnZhbCgpfHxbXSxiPVtdO24oYSxmdW5jdGlvbihhKXsoYT1CLnNlbGVjdFZhbHVlTWFwW2FdKSYmXG4hYS5kaXNhYmxlZCYmYi5wdXNoKEIuZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbihhKSl9KTtyZXR1cm4gYn0sRC50cmFja0J5JiZiLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24oKXtpZihFKHkuJHZpZXdWYWx1ZSkpcmV0dXJuIHkuJHZpZXdWYWx1ZS5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIEQuZ2V0VHJhY2tCeVZhbHVlKGEpfSl9LGZ1bmN0aW9uKCl7eS4kcmVuZGVyKCl9KSk6KHUud3JpdGVWYWx1ZT1mdW5jdGlvbihhKXt2YXIgYj1CLmdldE9wdGlvbkZyb21WaWV3VmFsdWUoYSk7YiYmIWIuZGlzYWJsZWQ/Z1swXS52YWx1ZSE9PWIuc2VsZWN0VmFsdWUmJih6LnJlbW92ZSgpLEh8fHgucmVtb3ZlKCksZ1swXS52YWx1ZT1iLnNlbGVjdFZhbHVlLGIuZWxlbWVudC5zZWxlY3RlZD0hMCxiLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwic2VsZWN0ZWRcIixcInNlbGVjdGVkXCIpKTpudWxsPT09YXx8SD8oei5yZW1vdmUoKSxIfHxnLnByZXBlbmQoeCksZy52YWwoXCJcIikseC5wcm9wKFwic2VsZWN0ZWRcIixcbiEwKSx4LmF0dHIoXCJzZWxlY3RlZFwiLCEwKSk6KEh8fHgucmVtb3ZlKCksZy5wcmVwZW5kKHopLGcudmFsKFwiP1wiKSx6LnByb3AoXCJzZWxlY3RlZFwiLCEwKSx6LmF0dHIoXCJzZWxlY3RlZFwiLCEwKSl9LHUucmVhZFZhbHVlPWZ1bmN0aW9uKCl7dmFyIGE9Qi5zZWxlY3RWYWx1ZU1hcFtnLnZhbCgpXTtyZXR1cm4gYSYmIWEuZGlzYWJsZWQ/KEh8fHgucmVtb3ZlKCksei5yZW1vdmUoKSxCLmdldFZpZXdWYWx1ZUZyb21PcHRpb24oYSkpOm51bGx9LEQudHJhY2tCeSYmYi4kd2F0Y2goZnVuY3Rpb24oKXtyZXR1cm4gRC5nZXRUcmFja0J5VmFsdWUoeS4kdmlld1ZhbHVlKX0sZnVuY3Rpb24oKXt5LiRyZW5kZXIoKX0pKTtIPyh4LnJlbW92ZSgpLGEoeCkoYikseC5yZW1vdmVDbGFzcyhcIm5nLXNjb3BlXCIpKTp4PUEoYy5jbG9uZU5vZGUoITEpKTtzKCk7Yi4kd2F0Y2hDb2xsZWN0aW9uKEQuZ2V0V2F0Y2hhYmxlcyxzKX19fX19XSxGZT1bXCIkbG9jYWxlXCIsXCIkaW50ZXJwb2xhdGVcIixcIiRsb2dcIixcbmZ1bmN0aW9uKGEsYixkKXt2YXIgYz0ve30vZyxlPS9ed2hlbihNaW51cyk/KC4rKSQvO3JldHVybntsaW5rOmZ1bmN0aW9uKGYsZyxoKXtmdW5jdGlvbiBrKGEpe2cudGV4dChhfHxcIlwiKX12YXIgbD1oLmNvdW50LG09aC4kYXR0ci53aGVuJiZnLmF0dHIoaC4kYXR0ci53aGVuKSxyPWgub2Zmc2V0fHwwLHQ9Zi4kZXZhbChtKXx8e30scz17fSx1PWIuc3RhcnRTeW1ib2woKSx3PWIuZW5kU3ltYm9sKCkscD11K2wrXCItXCIrcit3LHg9JC5ub29wLHY7bihoLGZ1bmN0aW9uKGEsYil7dmFyIGM9ZS5leGVjKGIpO2MmJihjPShjWzFdP1wiLVwiOlwiXCIpK0soY1syXSksdFtjXT1nLmF0dHIoaC4kYXR0cltiXSkpfSk7bih0LGZ1bmN0aW9uKGEsZCl7c1tkXT1iKGEucmVwbGFjZShjLHApKX0pO2YuJHdhdGNoKGwsZnVuY3Rpb24oYil7dmFyIGM9cGFyc2VGbG9hdChiKSxlPWlzTmFOKGMpO2V8fGMgaW4gdHx8KGM9YS5wbHVyYWxDYXQoYy1yKSk7Yz09PXZ8fGUmJlEodikmJmlzTmFOKHYpfHwoeCgpLFxuZT1zW2NdLHEoZSk/KG51bGwhPWImJmQuZGVidWcoXCJuZ1BsdXJhbGl6ZTogbm8gcnVsZSBkZWZpbmVkIGZvciAnXCIrYytcIicgaW4gXCIrbSkseD16LGsoKSk6eD1mLiR3YXRjaChlLGspLHY9Yyl9KX19fV0sR2U9W1wiJHBhcnNlXCIsXCIkYW5pbWF0ZVwiLGZ1bmN0aW9uKGEsYil7dmFyIGQ9TShcIm5nUmVwZWF0XCIpLGM9ZnVuY3Rpb24oYSxiLGMsZCxrLGwsbSl7YVtjXT1kO2smJihhW2tdPWwpO2EuJGluZGV4PWI7YS4kZmlyc3Q9MD09PWI7YS4kbGFzdD1iPT09bS0xO2EuJG1pZGRsZT0hKGEuJGZpcnN0fHxhLiRsYXN0KTthLiRvZGQ9IShhLiRldmVuPTA9PT0oYiYxKSl9O3JldHVybntyZXN0cmljdDpcIkFcIixtdWx0aUVsZW1lbnQ6ITAsdHJhbnNjbHVkZTpcImVsZW1lbnRcIixwcmlvcml0eToxRTMsdGVybWluYWw6ITAsJCR0bGI6ITAsY29tcGlsZTpmdW5jdGlvbihlLGYpe3ZhciBnPWYubmdSZXBlYXQsaD1XLmNyZWF0ZUNvbW1lbnQoXCIgZW5kIG5nUmVwZWF0OiBcIitnK1wiIFwiKSxrPWcubWF0Y2goL15cXHMqKFtcXHNcXFNdKz8pXFxzK2luXFxzKyhbXFxzXFxTXSs/KSg/Olxccythc1xccysoW1xcc1xcU10rPykpPyg/Olxccyt0cmFja1xccytieVxccysoW1xcc1xcU10rPykpP1xccyokLyk7XG5pZighayl0aHJvdyBkKFwiaWV4cFwiLGcpO3ZhciBsPWtbMV0sbT1rWzJdLHI9a1szXSxxPWtbNF0saz1sLm1hdGNoKC9eKD86KFxccypbXFwkXFx3XSspfFxcKFxccyooW1xcJFxcd10rKVxccyosXFxzKihbXFwkXFx3XSspXFxzKlxcKSkkLyk7aWYoIWspdGhyb3cgZChcImlpZGV4cFwiLGwpO3ZhciBzPWtbM118fGtbMV0sdT1rWzJdO2lmKHImJighL15bJGEtekEtWl9dWyRhLXpBLVowLTlfXSokLy50ZXN0KHIpfHwvXihudWxsfHVuZGVmaW5lZHx0aGlzfFxcJGluZGV4fFxcJGZpcnN0fFxcJG1pZGRsZXxcXCRsYXN0fFxcJGV2ZW58XFwkb2RkfFxcJHBhcmVudHxcXCRyb290fFxcJGlkKSQvLnRlc3QocikpKXRocm93IGQoXCJiYWRpZGVudFwiLHIpO3ZhciB6LHAseCx2LEI9eyRpZDpEYX07cT96PWEocSk6KHg9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gRGEoYil9LHY9ZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gZnVuY3Rpb24oYSxlLGYsayxsKXt6JiYocD1mdW5jdGlvbihiLGMsZCl7dSYmKEJbdV09Yik7QltzXT1jO0IuJGluZGV4PVxuZDtyZXR1cm4geihhLEIpfSk7dmFyIHE9ZWEoKTthLiR3YXRjaENvbGxlY3Rpb24obSxmdW5jdGlvbihmKXt2YXIgayxtLHQ9ZVswXSx6LEI9ZWEoKSxELEYsRyxFLEksSixLO3ImJihhW3JdPWYpO2lmKEFhKGYpKUk9ZixtPXB8fHg7ZWxzZSBmb3IoSyBpbiBtPXB8fHYsST1bXSxmKXJhLmNhbGwoZixLKSYmXCIkXCIhPT1LLmNoYXJBdCgwKSYmSS5wdXNoKEspO0Q9SS5sZW5ndGg7Sz1BcnJheShEKTtmb3Ioaz0wO2s8RDtrKyspaWYoRj1mPT09ST9rOklba10sRz1mW0ZdLEU9bShGLEcsaykscVtFXSlKPXFbRV0sZGVsZXRlIHFbRV0sQltFXT1KLEtba109SjtlbHNle2lmKEJbRV0pdGhyb3cgbihLLGZ1bmN0aW9uKGEpe2EmJmEuc2NvcGUmJihxW2EuaWRdPWEpfSksZChcImR1cGVzXCIsZyxFLEcpO0tba109e2lkOkUsc2NvcGU6dyxjbG9uZTp3fTtCW0VdPSEwfWZvcih6IGluIHEpe0o9cVt6XTtFPXNiKEouY2xvbmUpO2IubGVhdmUoRSk7aWYoRVswXS5wYXJlbnROb2RlKWZvcihrPTAsbT1cbkUubGVuZ3RoO2s8bTtrKyspRVtrXS4kJE5HX1JFTU9WRUQ9ITA7Si5zY29wZS4kZGVzdHJveSgpfWZvcihrPTA7azxEO2srKylpZihGPWY9PT1JP2s6SVtrXSxHPWZbRl0sSj1LW2tdLEouc2NvcGUpe3o9dDtkbyB6PXoubmV4dFNpYmxpbmc7d2hpbGUoeiYmei4kJE5HX1JFTU9WRUQpO0ouY2xvbmVbMF0hPXomJmIubW92ZShzYihKLmNsb25lKSxudWxsLEEodCkpO3Q9Si5jbG9uZVtKLmNsb25lLmxlbmd0aC0xXTtjKEouc2NvcGUsayxzLEcsdSxGLEQpfWVsc2UgbChmdW5jdGlvbihhLGQpe0ouc2NvcGU9ZDt2YXIgZT1oLmNsb25lTm9kZSghMSk7YVthLmxlbmd0aCsrXT1lO2IuZW50ZXIoYSxudWxsLEEodCkpO3Q9ZTtKLmNsb25lPWE7QltKLmlkXT1KO2MoSi5zY29wZSxrLHMsRyx1LEYsRCl9KTtxPUJ9KX19fX1dLEhlPVtcIiRhbmltYXRlXCIsZnVuY3Rpb24oYSl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLG11bHRpRWxlbWVudDohMCxsaW5rOmZ1bmN0aW9uKGIsZCxjKXtiLiR3YXRjaChjLm5nU2hvdyxcbmZ1bmN0aW9uKGIpe2FbYj9cInJlbW92ZUNsYXNzXCI6XCJhZGRDbGFzc1wiXShkLFwibmctaGlkZVwiLHt0ZW1wQ2xhc3NlczpcIm5nLWhpZGUtYW5pbWF0ZVwifSl9KX19fV0sQWU9W1wiJGFuaW1hdGVcIixmdW5jdGlvbihhKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIsbXVsdGlFbGVtZW50OiEwLGxpbms6ZnVuY3Rpb24oYixkLGMpe2IuJHdhdGNoKGMubmdIaWRlLGZ1bmN0aW9uKGIpe2FbYj9cImFkZENsYXNzXCI6XCJyZW1vdmVDbGFzc1wiXShkLFwibmctaGlkZVwiLHt0ZW1wQ2xhc3NlczpcIm5nLWhpZGUtYW5pbWF0ZVwifSl9KX19fV0sSWU9S2EoZnVuY3Rpb24oYSxiLGQpe2EuJHdhdGNoKGQubmdTdHlsZSxmdW5jdGlvbihhLGQpe2QmJmEhPT1kJiZuKGQsZnVuY3Rpb24oYSxjKXtiLmNzcyhjLFwiXCIpfSk7YSYmYi5jc3MoYSl9LCEwKX0pLEplPVtcIiRhbmltYXRlXCIsZnVuY3Rpb24oYSl7cmV0dXJue3JlcXVpcmU6XCJuZ1N3aXRjaFwiLGNvbnRyb2xsZXI6W1wiJHNjb3BlXCIsZnVuY3Rpb24oKXt0aGlzLmNhc2VzPXt9fV0sXG5saW5rOmZ1bmN0aW9uKGIsZCxjLGUpe3ZhciBmPVtdLGc9W10saD1bXSxrPVtdLGw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZnVuY3Rpb24oKXthLnNwbGljZShiLDEpfX07Yi4kd2F0Y2goYy5uZ1N3aXRjaHx8Yy5vbixmdW5jdGlvbihiKXt2YXIgYyxkO2M9MDtmb3IoZD1oLmxlbmd0aDtjPGQ7KytjKWEuY2FuY2VsKGhbY10pO2M9aC5sZW5ndGg9MDtmb3IoZD1rLmxlbmd0aDtjPGQ7KytjKXt2YXIgcT1zYihnW2NdLmNsb25lKTtrW2NdLiRkZXN0cm95KCk7KGhbY109YS5sZWF2ZShxKSkudGhlbihsKGgsYykpfWcubGVuZ3RoPTA7ay5sZW5ndGg9MDsoZj1lLmNhc2VzW1wiIVwiK2JdfHxlLmNhc2VzW1wiP1wiXSkmJm4oZixmdW5jdGlvbihiKXtiLnRyYW5zY2x1ZGUoZnVuY3Rpb24oYyxkKXtrLnB1c2goZCk7dmFyIGU9Yi5lbGVtZW50O2NbYy5sZW5ndGgrK109Vy5jcmVhdGVDb21tZW50KFwiIGVuZCBuZ1N3aXRjaFdoZW46IFwiKTtnLnB1c2goe2Nsb25lOmN9KTthLmVudGVyKGMsZS5wYXJlbnQoKSxcbmUpfSl9KX0pfX19XSxLZT1LYSh7dHJhbnNjbHVkZTpcImVsZW1lbnRcIixwcmlvcml0eToxMjAwLHJlcXVpcmU6XCJebmdTd2l0Y2hcIixtdWx0aUVsZW1lbnQ6ITAsbGluazpmdW5jdGlvbihhLGIsZCxjLGUpe2MuY2FzZXNbXCIhXCIrZC5uZ1N3aXRjaFdoZW5dPWMuY2FzZXNbXCIhXCIrZC5uZ1N3aXRjaFdoZW5dfHxbXTtjLmNhc2VzW1wiIVwiK2QubmdTd2l0Y2hXaGVuXS5wdXNoKHt0cmFuc2NsdWRlOmUsZWxlbWVudDpifSl9fSksTGU9S2Eoe3RyYW5zY2x1ZGU6XCJlbGVtZW50XCIscHJpb3JpdHk6MTIwMCxyZXF1aXJlOlwiXm5nU3dpdGNoXCIsbXVsdGlFbGVtZW50OiEwLGxpbms6ZnVuY3Rpb24oYSxiLGQsYyxlKXtjLmNhc2VzW1wiP1wiXT1jLmNhc2VzW1wiP1wiXXx8W107Yy5jYXNlc1tcIj9cIl0ucHVzaCh7dHJhbnNjbHVkZTplLGVsZW1lbnQ6Yn0pfX0pLE5lPUthKHtyZXN0cmljdDpcIkVBQ1wiLGxpbms6ZnVuY3Rpb24oYSxiLGQsYyxlKXtpZighZSl0aHJvdyBNKFwibmdUcmFuc2NsdWRlXCIpKFwib3JwaGFuXCIsXG51YShiKSk7ZShmdW5jdGlvbihhKXtiLmVtcHR5KCk7Yi5hcHBlbmQoYSl9KX19KSxuZT1bXCIkdGVtcGxhdGVDYWNoZVwiLGZ1bmN0aW9uKGEpe3JldHVybntyZXN0cmljdDpcIkVcIix0ZXJtaW5hbDohMCxjb21waWxlOmZ1bmN0aW9uKGIsZCl7XCJ0ZXh0L25nLXRlbXBsYXRlXCI9PWQudHlwZSYmYS5wdXQoZC5pZCxiWzBdLnRleHQpfX19XSxKZz17JHNldFZpZXdWYWx1ZTp6LCRyZW5kZXI6en0sS2c9W1wiJGVsZW1lbnRcIixcIiRzY29wZVwiLFwiJGF0dHJzXCIsZnVuY3Rpb24oYSxiLGQpe3ZhciBjPXRoaXMsZT1uZXcgU2E7Yy5uZ01vZGVsQ3RybD1KZztjLnVua25vd25PcHRpb249QShXLmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpO2MucmVuZGVyVW5rbm93bk9wdGlvbj1mdW5jdGlvbihiKXtiPVwiPyBcIitEYShiKStcIiA/XCI7Yy51bmtub3duT3B0aW9uLnZhbChiKTthLnByZXBlbmQoYy51bmtub3duT3B0aW9uKTthLnZhbChiKX07Yi4kb24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7Yy5yZW5kZXJVbmtub3duT3B0aW9uPVxuen0pO2MucmVtb3ZlVW5rbm93bk9wdGlvbj1mdW5jdGlvbigpe2MudW5rbm93bk9wdGlvbi5wYXJlbnQoKSYmYy51bmtub3duT3B0aW9uLnJlbW92ZSgpfTtjLnJlYWRWYWx1ZT1mdW5jdGlvbigpe2MucmVtb3ZlVW5rbm93bk9wdGlvbigpO3JldHVybiBhLnZhbCgpfTtjLndyaXRlVmFsdWU9ZnVuY3Rpb24oYil7Yy5oYXNPcHRpb24oYik/KGMucmVtb3ZlVW5rbm93bk9wdGlvbigpLGEudmFsKGIpLFwiXCI9PT1iJiZjLmVtcHR5T3B0aW9uLnByb3AoXCJzZWxlY3RlZFwiLCEwKSk6bnVsbD09YiYmYy5lbXB0eU9wdGlvbj8oYy5yZW1vdmVVbmtub3duT3B0aW9uKCksYS52YWwoXCJcIikpOmMucmVuZGVyVW5rbm93bk9wdGlvbihiKX07Yy5hZGRPcHRpb249ZnVuY3Rpb24oYSxiKXtSYShhLCdcIm9wdGlvbiB2YWx1ZVwiJyk7XCJcIj09PWEmJihjLmVtcHR5T3B0aW9uPWIpO3ZhciBkPWUuZ2V0KGEpfHwwO2UucHV0KGEsZCsxKTtjLm5nTW9kZWxDdHJsLiRyZW5kZXIoKTtiWzBdLmhhc0F0dHJpYnV0ZShcInNlbGVjdGVkXCIpJiZcbihiWzBdLnNlbGVjdGVkPSEwKX07Yy5yZW1vdmVPcHRpb249ZnVuY3Rpb24oYSl7dmFyIGI9ZS5nZXQoYSk7YiYmKDE9PT1iPyhlLnJlbW92ZShhKSxcIlwiPT09YSYmKGMuZW1wdHlPcHRpb249dykpOmUucHV0KGEsYi0xKSl9O2MuaGFzT3B0aW9uPWZ1bmN0aW9uKGEpe3JldHVybiEhZS5nZXQoYSl9O2MucmVnaXN0ZXJPcHRpb249ZnVuY3Rpb24oYSxiLGQsZSxsKXtpZihlKXt2YXIgbTtkLiRvYnNlcnZlKFwidmFsdWVcIixmdW5jdGlvbihhKXt1KG0pJiZjLnJlbW92ZU9wdGlvbihtKTttPWE7Yy5hZGRPcHRpb24oYSxiKX0pfWVsc2UgbD9hLiR3YXRjaChsLGZ1bmN0aW9uKGEsZSl7ZC4kc2V0KFwidmFsdWVcIixhKTtlIT09YSYmYy5yZW1vdmVPcHRpb24oZSk7Yy5hZGRPcHRpb24oYSxiKX0pOmMuYWRkT3B0aW9uKGQudmFsdWUsYik7Yi5vbihcIiRkZXN0cm95XCIsZnVuY3Rpb24oKXtjLnJlbW92ZU9wdGlvbihkLnZhbHVlKTtjLm5nTW9kZWxDdHJsLiRyZW5kZXIoKX0pfX1dLG9lPWZ1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiRVwiLFxucmVxdWlyZTpbXCJzZWxlY3RcIixcIj9uZ01vZGVsXCJdLGNvbnRyb2xsZXI6S2cscHJpb3JpdHk6MSxsaW5rOntwcmU6ZnVuY3Rpb24oYSxiLGQsYyl7dmFyIGU9Y1sxXTtpZihlKXt2YXIgZj1jWzBdO2YubmdNb2RlbEN0cmw9ZTtiLm9uKFwiY2hhbmdlXCIsZnVuY3Rpb24oKXthLiRhcHBseShmdW5jdGlvbigpe2UuJHNldFZpZXdWYWx1ZShmLnJlYWRWYWx1ZSgpKX0pfSk7aWYoZC5tdWx0aXBsZSl7Zi5yZWFkVmFsdWU9ZnVuY3Rpb24oKXt2YXIgYT1bXTtuKGIuZmluZChcIm9wdGlvblwiKSxmdW5jdGlvbihiKXtiLnNlbGVjdGVkJiZhLnB1c2goYi52YWx1ZSl9KTtyZXR1cm4gYX07Zi53cml0ZVZhbHVlPWZ1bmN0aW9uKGEpe3ZhciBjPW5ldyBTYShhKTtuKGIuZmluZChcIm9wdGlvblwiKSxmdW5jdGlvbihhKXthLnNlbGVjdGVkPXUoYy5nZXQoYS52YWx1ZSkpfSl9O3ZhciBnLGg9TmFOO2EuJHdhdGNoKGZ1bmN0aW9uKCl7aCE9PWUuJHZpZXdWYWx1ZXx8a2EoZyxlLiR2aWV3VmFsdWUpfHwoZz1cbmhhKGUuJHZpZXdWYWx1ZSksZS4kcmVuZGVyKCkpO2g9ZS4kdmlld1ZhbHVlfSk7ZS4kaXNFbXB0eT1mdW5jdGlvbihhKXtyZXR1cm4hYXx8MD09PWEubGVuZ3RofX19fSxwb3N0OmZ1bmN0aW9uKGEsYixkLGMpe3ZhciBlPWNbMV07aWYoZSl7dmFyIGY9Y1swXTtlLiRyZW5kZXI9ZnVuY3Rpb24oKXtmLndyaXRlVmFsdWUoZS4kdmlld1ZhbHVlKX19fX19fSxxZT1bXCIkaW50ZXJwb2xhdGVcIixmdW5jdGlvbihhKXtyZXR1cm57cmVzdHJpY3Q6XCJFXCIscHJpb3JpdHk6MTAwLGNvbXBpbGU6ZnVuY3Rpb24oYixkKXtpZih1KGQudmFsdWUpKXZhciBjPWEoZC52YWx1ZSwhMCk7ZWxzZXt2YXIgZT1hKGIudGV4dCgpLCEwKTtlfHxkLiRzZXQoXCJ2YWx1ZVwiLGIudGV4dCgpKX1yZXR1cm4gZnVuY3Rpb24oYSxiLGQpe3ZhciBrPWIucGFyZW50KCk7KGs9ay5kYXRhKFwiJHNlbGVjdENvbnRyb2xsZXJcIil8fGsucGFyZW50KCkuZGF0YShcIiRzZWxlY3RDb250cm9sbGVyXCIpKSYmay5yZWdpc3Rlck9wdGlvbihhLFxuYixkLGMsZSl9fX19XSxwZT1uYSh7cmVzdHJpY3Q6XCJFXCIsdGVybWluYWw6ITF9KSxHYz1mdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkFcIixyZXF1aXJlOlwiP25nTW9kZWxcIixsaW5rOmZ1bmN0aW9uKGEsYixkLGMpe2MmJihkLnJlcXVpcmVkPSEwLGMuJHZhbGlkYXRvcnMucmVxdWlyZWQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4hZC5yZXF1aXJlZHx8IWMuJGlzRW1wdHkoYil9LGQuJG9ic2VydmUoXCJyZXF1aXJlZFwiLGZ1bmN0aW9uKCl7Yy4kdmFsaWRhdGUoKX0pKX19fSxGYz1mdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkFcIixyZXF1aXJlOlwiP25nTW9kZWxcIixsaW5rOmZ1bmN0aW9uKGEsYixkLGMpe2lmKGMpe3ZhciBlLGY9ZC5uZ1BhdHRlcm58fGQucGF0dGVybjtkLiRvYnNlcnZlKFwicGF0dGVyblwiLGZ1bmN0aW9uKGEpe0YoYSkmJjA8YS5sZW5ndGgmJihhPW5ldyBSZWdFeHAoXCJeXCIrYStcIiRcIikpO2lmKGEmJiFhLnRlc3QpdGhyb3cgTShcIm5nUGF0dGVyblwiKShcIm5vcmVnZXhwXCIsXG5mLGEsdWEoYikpO2U9YXx8dztjLiR2YWxpZGF0ZSgpfSk7Yy4kdmFsaWRhdG9ycy5wYXR0ZXJuPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGMuJGlzRW1wdHkoYil8fHEoZSl8fGUudGVzdChiKX19fX19LEljPWZ1bmN0aW9uKCl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLHJlcXVpcmU6XCI/bmdNb2RlbFwiLGxpbms6ZnVuY3Rpb24oYSxiLGQsYyl7aWYoYyl7dmFyIGU9LTE7ZC4kb2JzZXJ2ZShcIm1heGxlbmd0aFwiLGZ1bmN0aW9uKGEpe2E9WihhKTtlPWlzTmFOKGEpPy0xOmE7Yy4kdmFsaWRhdGUoKX0pO2MuJHZhbGlkYXRvcnMubWF4bGVuZ3RoPWZ1bmN0aW9uKGEsYil7cmV0dXJuIDA+ZXx8Yy4kaXNFbXB0eShiKXx8Yi5sZW5ndGg8PWV9fX19fSxIYz1mdW5jdGlvbigpe3JldHVybntyZXN0cmljdDpcIkFcIixyZXF1aXJlOlwiP25nTW9kZWxcIixsaW5rOmZ1bmN0aW9uKGEsYixkLGMpe2lmKGMpe3ZhciBlPTA7ZC4kb2JzZXJ2ZShcIm1pbmxlbmd0aFwiLGZ1bmN0aW9uKGEpe2U9WihhKXx8MDtjLiR2YWxpZGF0ZSgpfSk7XG5jLiR2YWxpZGF0b3JzLm1pbmxlbmd0aD1mdW5jdGlvbihhLGIpe3JldHVybiBjLiRpc0VtcHR5KGIpfHxiLmxlbmd0aD49ZX19fX19O1MuYW5ndWxhci5ib290c3RyYXA/Y29uc29sZS5sb2coXCJXQVJOSU5HOiBUcmllZCB0byBsb2FkIGFuZ3VsYXIgbW9yZSB0aGFuIG9uY2UuXCIpOihnZSgpLGllKCQpLCQubW9kdWxlKFwibmdMb2NhbGVcIixbXSxbXCIkcHJvdmlkZVwiLGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSl7YSs9XCJcIjt2YXIgYj1hLmluZGV4T2YoXCIuXCIpO3JldHVybi0xPT1iPzA6YS5sZW5ndGgtYi0xfWEudmFsdWUoXCIkbG9jYWxlXCIse0RBVEVUSU1FX0ZPUk1BVFM6e0FNUE1TOltcIkFNXCIsXCJQTVwiXSxEQVk6XCJTdW5kYXkgTW9uZGF5IFR1ZXNkYXkgV2VkbmVzZGF5IFRodXJzZGF5IEZyaWRheSBTYXR1cmRheVwiLnNwbGl0KFwiIFwiKSxFUkFOQU1FUzpbXCJCZWZvcmUgQ2hyaXN0XCIsXCJBbm5vIERvbWluaVwiXSxFUkFTOltcIkJDXCIsXCJBRFwiXSxGSVJTVERBWU9GV0VFSzo2LE1PTlRIOlwiSmFudWFyeSBGZWJydWFyeSBNYXJjaCBBcHJpbCBNYXkgSnVuZSBKdWx5IEF1Z3VzdCBTZXB0ZW1iZXIgT2N0b2JlciBOb3ZlbWJlciBEZWNlbWJlclwiLnNwbGl0KFwiIFwiKSxcblNIT1JUREFZOlwiU3VuIE1vbiBUdWUgV2VkIFRodSBGcmkgU2F0XCIuc3BsaXQoXCIgXCIpLFNIT1JUTU9OVEg6XCJKYW4gRmViIE1hciBBcHIgTWF5IEp1biBKdWwgQXVnIFNlcCBPY3QgTm92IERlY1wiLnNwbGl0KFwiIFwiKSxTVEFOREFMT05FTU9OVEg6XCJKYW51YXJ5IEZlYnJ1YXJ5IE1hcmNoIEFwcmlsIE1heSBKdW5lIEp1bHkgQXVndXN0IFNlcHRlbWJlciBPY3RvYmVyIE5vdmVtYmVyIERlY2VtYmVyXCIuc3BsaXQoXCIgXCIpLFdFRUtFTkRSQU5HRTpbNSw2XSxmdWxsRGF0ZTpcIkVFRUUsIE1NTU0gZCwgeVwiLGxvbmdEYXRlOlwiTU1NTSBkLCB5XCIsbWVkaXVtOlwiTU1NIGQsIHkgaDptbTpzcyBhXCIsbWVkaXVtRGF0ZTpcIk1NTSBkLCB5XCIsbWVkaXVtVGltZTpcImg6bW06c3MgYVwiLFwic2hvcnRcIjpcIk0vZC95eSBoOm1tIGFcIixzaG9ydERhdGU6XCJNL2QveXlcIixzaG9ydFRpbWU6XCJoOm1tIGFcIn0sTlVNQkVSX0ZPUk1BVFM6e0NVUlJFTkNZX1NZTTpcIiRcIixERUNJTUFMX1NFUDpcIi5cIixHUk9VUF9TRVA6XCIsXCIsXG5QQVRURVJOUzpbe2dTaXplOjMsbGdTaXplOjMsbWF4RnJhYzozLG1pbkZyYWM6MCxtaW5JbnQ6MSxuZWdQcmU6XCItXCIsbmVnU3VmOlwiXCIscG9zUHJlOlwiXCIscG9zU3VmOlwiXCJ9LHtnU2l6ZTozLGxnU2l6ZTozLG1heEZyYWM6MixtaW5GcmFjOjIsbWluSW50OjEsbmVnUHJlOlwiLVxcdTAwYTRcIixuZWdTdWY6XCJcIixwb3NQcmU6XCJcXHUwMGE0XCIscG9zU3VmOlwiXCJ9XX0saWQ6XCJlbi11c1wiLHBsdXJhbENhdDpmdW5jdGlvbihhLGMpe3ZhciBlPWF8MCxmPWM7dz09PWYmJihmPU1hdGgubWluKGIoYSksMykpO01hdGgucG93KDEwLGYpO3JldHVybiAxPT1lJiYwPT1mP1wib25lXCI6XCJvdGhlclwifX0pfV0pLEEoVykucmVhZHkoZnVuY3Rpb24oKXtjZShXLHpjKX0pKX0pKHdpbmRvdyxkb2N1bWVudCk7IXdpbmRvdy5hbmd1bGFyLiQkY3NwKCkubm9JbmxpbmVTdHlsZSYmd2luZG93LmFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5oZWFkKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+QGNoYXJzZXQgXCJVVEYtOFwiO1tuZ1xcXFw6Y2xvYWtdLFtuZy1jbG9ha10sW2RhdGEtbmctY2xvYWtdLFt4LW5nLWNsb2FrXSwubmctY2xvYWssLngtbmctY2xvYWssLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpe2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50O31uZ1xcXFw6Zm9ybXtkaXNwbGF5OmJsb2NrO30ubmctYW5pbWF0ZS1zaGlte3Zpc2liaWxpdHk6aGlkZGVuO30ubmctYW5jaG9ye3Bvc2l0aW9uOmFic29sdXRlO308L3N0eWxlPicpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5ndWxhci5taW4uanMubWFwXG4iLCJyZXF1aXJlKCcuL2FuZ3VsYXInKTtcbm1vZHVsZS5leHBvcnRzID0gYW5ndWxhcjtcbiIsIi8qKlxuICogQGxpY2Vuc2UgQW5ndWxhckpTIHYxLjQuOVxuICogKGMpIDIwMTAtMjAxNSBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmdcbiAqIExpY2Vuc2U6IE1JVFxuICovXG5cbihmdW5jdGlvbigpIHsndXNlIHN0cmljdCc7XG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7fTtcblxuLyogZ2xvYmFsOiB0b0RlYnVnU3RyaW5nOiB0cnVlICovXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZU9iamVjdChvYmopIHtcbiAgdmFyIHNlZW4gPSBbXTtcblxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBmdW5jdGlvbihrZXksIHZhbCkge1xuICAgIHZhbCA9IHRvSnNvblJlcGxhY2VyKGtleSwgdmFsKTtcbiAgICBpZiAoaXNPYmplY3QodmFsKSkge1xuXG4gICAgICBpZiAoc2Vlbi5pbmRleE9mKHZhbCkgPj0gMCkgcmV0dXJuICcuLi4nO1xuXG4gICAgICBzZWVuLnB1c2godmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHRvRGVidWdTdHJpbmcob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG9iai50b1N0cmluZygpLnJlcGxhY2UoLyBcXHtbXFxzXFxTXSokLywgJycpO1xuICB9IGVsc2UgaWYgKGlzVW5kZWZpbmVkKG9iaikpIHtcbiAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9iaiAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc2VyaWFsaXplT2JqZWN0KG9iaik7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGlzIG9iamVjdCBwcm92aWRlcyBhIHV0aWxpdHkgZm9yIHByb2R1Y2luZyByaWNoIEVycm9yIG1lc3NhZ2VzIHdpdGhpblxuICogQW5ndWxhci4gSXQgY2FuIGJlIGNhbGxlZCBhcyBmb2xsb3dzOlxuICpcbiAqIHZhciBleGFtcGxlTWluRXJyID0gbWluRXJyKCdleGFtcGxlJyk7XG4gKiB0aHJvdyBleGFtcGxlTWluRXJyKCdvbmUnLCAnVGhpcyB7MH0gaXMgezF9JywgZm9vLCBiYXIpO1xuICpcbiAqIFRoZSBhYm92ZSBjcmVhdGVzIGFuIGluc3RhbmNlIG9mIG1pbkVyciBpbiB0aGUgZXhhbXBsZSBuYW1lc3BhY2UuIFRoZVxuICogcmVzdWx0aW5nIGVycm9yIHdpbGwgaGF2ZSBhIG5hbWVzcGFjZWQgZXJyb3IgY29kZSBvZiBleGFtcGxlLm9uZS4gIFRoZVxuICogcmVzdWx0aW5nIGVycm9yIHdpbGwgcmVwbGFjZSB7MH0gd2l0aCB0aGUgdmFsdWUgb2YgZm9vLCBhbmQgezF9IHdpdGggdGhlXG4gKiB2YWx1ZSBvZiBiYXIuIFRoZSBvYmplY3QgaXMgbm90IHJlc3RyaWN0ZWQgaW4gdGhlIG51bWJlciBvZiBhcmd1bWVudHMgaXQgY2FuXG4gKiB0YWtlLlxuICpcbiAqIElmIGZld2VyIGFyZ3VtZW50cyBhcmUgc3BlY2lmaWVkIHRoYW4gbmVjZXNzYXJ5IGZvciBpbnRlcnBvbGF0aW9uLCB0aGUgZXh0cmFcbiAqIGludGVycG9sYXRpb24gbWFya2VycyB3aWxsIGJlIHByZXNlcnZlZCBpbiB0aGUgZmluYWwgc3RyaW5nLlxuICpcbiAqIFNpbmNlIGRhdGEgd2lsbCBiZSBwYXJzZWQgc3RhdGljYWxseSBkdXJpbmcgYSBidWlsZCBzdGVwLCBzb21lIHJlc3RyaWN0aW9uc1xuICogYXJlIGFwcGxpZWQgd2l0aCByZXNwZWN0IHRvIGhvdyBtaW5FcnIgaW5zdGFuY2VzIGFyZSBjcmVhdGVkIGFuZCBjYWxsZWQuXG4gKiBJbnN0YW5jZXMgc2hvdWxkIGhhdmUgbmFtZXMgb2YgdGhlIGZvcm0gbmFtZXNwYWNlTWluRXJyIGZvciBhIG1pbkVyciBjcmVhdGVkXG4gKiB1c2luZyBtaW5FcnIoJ25hbWVzcGFjZScpIC4gRXJyb3IgY29kZXMsIG5hbWVzcGFjZXMgYW5kIHRlbXBsYXRlIHN0cmluZ3NcbiAqIHNob3VsZCBhbGwgYmUgc3RhdGljIHN0cmluZ3MsIG5vdCB2YXJpYWJsZXMgb3IgZ2VuZXJhbCBleHByZXNzaW9ucy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlIFRoZSBuYW1lc3BhY2UgdG8gdXNlIGZvciB0aGUgbmV3IG1pbkVyciBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IEVycm9yQ29uc3RydWN0b3IgQ3VzdG9tIGVycm9yIGNvbnN0cnVjdG9yIHRvIGJlIGluc3RhbnRpYXRlZCB3aGVuIHJldHVybmluZ1xuICogICBlcnJvciBmcm9tIHJldHVybmVkIGZ1bmN0aW9uLCBmb3IgY2FzZXMgd2hlbiBhIHBhcnRpY3VsYXIgdHlwZSBvZiBlcnJvciBpcyB1c2VmdWwuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29kZTpzdHJpbmcsIHRlbXBsYXRlOnN0cmluZywgLi4udGVtcGxhdGVBcmdzKTogRXJyb3J9IG1pbkVyciBpbnN0YW5jZVxuICovXG5cbmZ1bmN0aW9uIG1pbkVycihtb2R1bGUsIEVycm9yQ29uc3RydWN0b3IpIHtcbiAgRXJyb3JDb25zdHJ1Y3RvciA9IEVycm9yQ29uc3RydWN0b3IgfHwgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgU0tJUF9JTkRFWEVTID0gMjtcblxuICAgIHZhciB0ZW1wbGF0ZUFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICBjb2RlID0gdGVtcGxhdGVBcmdzWzBdLFxuICAgICAgbWVzc2FnZSA9ICdbJyArIChtb2R1bGUgPyBtb2R1bGUgKyAnOicgOiAnJykgKyBjb2RlICsgJ10gJyxcbiAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGVBcmdzWzFdLFxuICAgICAgcGFyYW1QcmVmaXgsIGk7XG5cbiAgICBtZXNzYWdlICs9IHRlbXBsYXRlLnJlcGxhY2UoL1xce1xcZCtcXH0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHZhciBpbmRleCA9ICttYXRjaC5zbGljZSgxLCAtMSksXG4gICAgICAgIHNoaWZ0ZWRJbmRleCA9IGluZGV4ICsgU0tJUF9JTkRFWEVTO1xuXG4gICAgICBpZiAoc2hpZnRlZEluZGV4IDwgdGVtcGxhdGVBcmdzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdG9EZWJ1Z1N0cmluZyh0ZW1wbGF0ZUFyZ3Nbc2hpZnRlZEluZGV4XSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIG1lc3NhZ2UgKz0gJ1xcbmh0dHA6Ly9lcnJvcnMuYW5ndWxhcmpzLm9yZy8xLjQuOS8nICtcbiAgICAgIChtb2R1bGUgPyBtb2R1bGUgKyAnLycgOiAnJykgKyBjb2RlO1xuXG4gICAgZm9yIChpID0gU0tJUF9JTkRFWEVTLCBwYXJhbVByZWZpeCA9ICc/JzsgaSA8IHRlbXBsYXRlQXJncy5sZW5ndGg7IGkrKywgcGFyYW1QcmVmaXggPSAnJicpIHtcbiAgICAgIG1lc3NhZ2UgKz0gcGFyYW1QcmVmaXggKyAncCcgKyAoaSAtIFNLSVBfSU5ERVhFUykgKyAnPScgK1xuICAgICAgICBlbmNvZGVVUklDb21wb25lbnQodG9EZWJ1Z1N0cmluZyh0ZW1wbGF0ZUFyZ3NbaV0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEVycm9yQ29uc3RydWN0b3IobWVzc2FnZSk7XG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBJbnRlcmZhY2UgZm9yIGNvbmZpZ3VyaW5nIGFuZ3VsYXIge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9LlxuICovXG5cbmZ1bmN0aW9uIHNldHVwTW9kdWxlTG9hZGVyKHdpbmRvdykge1xuXG4gIHZhciAkaW5qZWN0b3JNaW5FcnIgPSBtaW5FcnIoJyRpbmplY3RvcicpO1xuICB2YXIgbmdNaW5FcnIgPSBtaW5FcnIoJ25nJyk7XG5cbiAgZnVuY3Rpb24gZW5zdXJlKG9iaiwgbmFtZSwgZmFjdG9yeSkge1xuICAgIHJldHVybiBvYmpbbmFtZV0gfHwgKG9ialtuYW1lXSA9IGZhY3RvcnkoKSk7XG4gIH1cblxuICB2YXIgYW5ndWxhciA9IGVuc3VyZSh3aW5kb3csICdhbmd1bGFyJywgT2JqZWN0KTtcblxuICAvLyBXZSBuZWVkIHRvIGV4cG9zZSBgYW5ndWxhci4kJG1pbkVycmAgdG8gbW9kdWxlcyBzdWNoIGFzIGBuZ1Jlc291cmNlYCB0aGF0IHJlZmVyZW5jZSBpdCBkdXJpbmcgYm9vdHN0cmFwXG4gIGFuZ3VsYXIuJCRtaW5FcnIgPSBhbmd1bGFyLiQkbWluRXJyIHx8IG1pbkVycjtcblxuICByZXR1cm4gZW5zdXJlKGFuZ3VsYXIsICdtb2R1bGUnLCBmdW5jdGlvbigpIHtcbiAgICAvKiogQHR5cGUge09iamVjdC48c3RyaW5nLCBhbmd1bGFyLk1vZHVsZT59ICovXG4gICAgdmFyIG1vZHVsZXMgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIGFuZ3VsYXIubW9kdWxlXG4gICAgICogQG1vZHVsZSBuZ1xuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogVGhlIGBhbmd1bGFyLm1vZHVsZWAgaXMgYSBnbG9iYWwgcGxhY2UgZm9yIGNyZWF0aW5nLCByZWdpc3RlcmluZyBhbmQgcmV0cmlldmluZyBBbmd1bGFyXG4gICAgICogbW9kdWxlcy5cbiAgICAgKiBBbGwgbW9kdWxlcyAoYW5ndWxhciBjb3JlIG9yIDNyZCBwYXJ0eSkgdGhhdCBzaG91bGQgYmUgYXZhaWxhYmxlIHRvIGFuIGFwcGxpY2F0aW9uIG11c3QgYmVcbiAgICAgKiByZWdpc3RlcmVkIHVzaW5nIHRoaXMgbWVjaGFuaXNtLlxuICAgICAqXG4gICAgICogUGFzc2luZyBvbmUgYXJndW1lbnQgcmV0cmlldmVzIGFuIGV4aXN0aW5nIHtAbGluayBhbmd1bGFyLk1vZHVsZX0sXG4gICAgICogd2hlcmVhcyBwYXNzaW5nIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQgY3JlYXRlcyBhIG5ldyB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9XG4gICAgICpcbiAgICAgKlxuICAgICAqICMgTW9kdWxlXG4gICAgICpcbiAgICAgKiBBIG1vZHVsZSBpcyBhIGNvbGxlY3Rpb24gb2Ygc2VydmljZXMsIGRpcmVjdGl2ZXMsIGNvbnRyb2xsZXJzLCBmaWx0ZXJzLCBhbmQgY29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbi5cbiAgICAgKiBgYW5ndWxhci5tb2R1bGVgIGlzIHVzZWQgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZVxuICAgICAqIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdteU1vZHVsZScsIFtdKTtcbiAgICAgKlxuICAgICAqIC8vIHJlZ2lzdGVyIGEgbmV3IHNlcnZpY2VcbiAgICAgKiBteU1vZHVsZS52YWx1ZSgnYXBwTmFtZScsICdNeUNvb2xBcHAnKTtcbiAgICAgKlxuICAgICAqIC8vIGNvbmZpZ3VyZSBleGlzdGluZyBzZXJ2aWNlcyBpbnNpZGUgaW5pdGlhbGl6YXRpb24gYmxvY2tzLlxuICAgICAqIG15TW9kdWxlLmNvbmZpZyhbJyRsb2NhdGlvblByb3ZpZGVyJywgZnVuY3Rpb24oJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICAgKiAgIC8vIENvbmZpZ3VyZSBleGlzdGluZyBwcm92aWRlcnNcbiAgICAgKiAgICRsb2NhdGlvblByb3ZpZGVyLmhhc2hQcmVmaXgoJyEnKTtcbiAgICAgKiB9XSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGVuIHlvdSBjYW4gY3JlYXRlIGFuIGluamVjdG9yIGFuZCBsb2FkIHlvdXIgbW9kdWxlcyBsaWtlIHRoaXM6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIHZhciBpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZycsICdteU1vZHVsZSddKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogSG93ZXZlciBpdCdzIG1vcmUgbGlrZWx5IHRoYXQgeW91J2xsIGp1c3QgdXNlXG4gICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0gb3JcbiAgICAgKiB7QGxpbmsgYW5ndWxhci5ib290c3RyYXB9IHRvIHNpbXBsaWZ5IHRoaXMgcHJvY2VzcyBmb3IgeW91LlxuICAgICAqXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBtb2R1bGUgdG8gY3JlYXRlIG9yIHJldHJpZXZlLlxuICAgICAqIEBwYXJhbSB7IUFycmF5LjxzdHJpbmc+PX0gcmVxdWlyZXMgSWYgc3BlY2lmaWVkIHRoZW4gbmV3IG1vZHVsZSBpcyBiZWluZyBjcmVhdGVkLiBJZlxuICAgICAqICAgICAgICB1bnNwZWNpZmllZCB0aGVuIHRoZSBtb2R1bGUgaXMgYmVpbmcgcmV0cmlldmVkIGZvciBmdXJ0aGVyIGNvbmZpZ3VyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNvbmZpZ0ZuIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gZm9yIHRoZSBtb2R1bGUuIFNhbWUgYXNcbiAgICAgKiAgICAgICAge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZyBNb2R1bGUjY29uZmlnKCl9LlxuICAgICAqIEByZXR1cm5zIHthbmd1bGFyLk1vZHVsZX0gbmV3IG1vZHVsZSB3aXRoIHRoZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9IGFwaS5cbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gbW9kdWxlKG5hbWUsIHJlcXVpcmVzLCBjb25maWdGbikge1xuICAgICAgdmFyIGFzc2VydE5vdEhhc093blByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSwgY29udGV4dCkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2hhc093blByb3BlcnR5Jykge1xuICAgICAgICAgIHRocm93IG5nTWluRXJyKCdiYWRuYW1lJywgJ2hhc093blByb3BlcnR5IGlzIG5vdCBhIHZhbGlkIHswfSBuYW1lJywgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdtb2R1bGUnKTtcbiAgICAgIGlmIChyZXF1aXJlcyAmJiBtb2R1bGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIG1vZHVsZXNbbmFtZV0gPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVuc3VyZShtb2R1bGVzLCBuYW1lLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFyZXF1aXJlcykge1xuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignbm9tb2QnLCBcIk1vZHVsZSAnezB9JyBpcyBub3QgYXZhaWxhYmxlISBZb3UgZWl0aGVyIG1pc3NwZWxsZWQgXCIgK1xuICAgICAgICAgICAgIFwidGhlIG1vZHVsZSBuYW1lIG9yIGZvcmdvdCB0byBsb2FkIGl0LiBJZiByZWdpc3RlcmluZyBhIG1vZHVsZSBlbnN1cmUgdGhhdCB5b3UgXCIgK1xuICAgICAgICAgICAgIFwic3BlY2lmeSB0aGUgZGVwZW5kZW5jaWVzIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXCIsIG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEFycmF5LjwqPj59ICovXG4gICAgICAgIHZhciBpbnZva2VRdWV1ZSA9IFtdO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxGdW5jdGlvbj59ICovXG4gICAgICAgIHZhciBjb25maWdCbG9ja3MgPSBbXTtcblxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48RnVuY3Rpb24+fSAqL1xuICAgICAgICB2YXIgcnVuQmxvY2tzID0gW107XG5cbiAgICAgICAgdmFyIGNvbmZpZyA9IGludm9rZUxhdGVyKCckaW5qZWN0b3InLCAnaW52b2tlJywgJ3B1c2gnLCBjb25maWdCbG9ja3MpO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7YW5ndWxhci5Nb2R1bGV9ICovXG4gICAgICAgIHZhciBtb2R1bGVJbnN0YW5jZSA9IHtcbiAgICAgICAgICAvLyBQcml2YXRlIHN0YXRlXG4gICAgICAgICAgX2ludm9rZVF1ZXVlOiBpbnZva2VRdWV1ZSxcbiAgICAgICAgICBfY29uZmlnQmxvY2tzOiBjb25maWdCbG9ja3MsXG4gICAgICAgICAgX3J1bkJsb2NrczogcnVuQmxvY2tzLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcmVxdWlyZXNcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBIb2xkcyB0aGUgbGlzdCBvZiBtb2R1bGVzIHdoaWNoIHRoZSBpbmplY3RvciB3aWxsIGxvYWQgYmVmb3JlIHRoZSBjdXJyZW50IG1vZHVsZSBpc1xuICAgICAgICAgICAqIGxvYWRlZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICByZXF1aXJlczogcmVxdWlyZXMsXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNuYW1lXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogTmFtZSBvZiB0aGUgbW9kdWxlLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIG5hbWU6IG5hbWUsXG5cblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNwcm92aWRlclxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm92aWRlclR5cGUgQ29uc3RydWN0aW9uIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgdGhlXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI3Byb3ZpZGVyICRwcm92aWRlLnByb3ZpZGVyKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHByb3ZpZGVyOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ3Byb3ZpZGVyJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZmFjdG9yeVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm92aWRlckZ1bmN0aW9uIEZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgJHByb3ZpZGUuZmFjdG9yeSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBmYWN0b3J5OiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ2ZhY3RvcnknKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNzZXJ2aWNlXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIEEgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHNlcnZpY2U6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAnc2VydmljZScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3ZhbHVlXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFNlcnZpY2UgaW5zdGFuY2Ugb2JqZWN0LlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSAkcHJvdmlkZS52YWx1ZSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB2YWx1ZTogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3ZhbHVlJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29uc3RhbnRcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgY29uc3RhbnQgbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IENvbnN0YW50IHZhbHVlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIEJlY2F1c2UgdGhlIGNvbnN0YW50cyBhcmUgZml4ZWQsIHRoZXkgZ2V0IGFwcGxpZWQgYmVmb3JlIG90aGVyIHByb3ZpZGUgbWV0aG9kcy5cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjY29uc3RhbnQgJHByb3ZpZGUuY29uc3RhbnQoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uc3RhbnQ6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdjb25zdGFudCcsICd1bnNoaWZ0JyksXG5cbiAgICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2RlY29yYXRvclxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gZGVjb3JhdGUuXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgc2VydmljZSBuZWVkcyB0byBiZVxuICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFudGlhdGVkIGFuZCBzaG91bGQgcmV0dXJuIHRoZSBkZWNvcmF0ZWQgc2VydmljZSBpbnN0YW5jZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yICRwcm92aWRlLmRlY29yYXRvcigpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBkZWNvcmF0b3I6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJHByb3ZpZGUnLCAnZGVjb3JhdG9yJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjYW5pbWF0aW9uXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGFuaW1hdGlvbiBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYW5pbWF0aW9uRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgYW5cbiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqICoqTk9URSoqOiBhbmltYXRpb25zIHRha2UgZWZmZWN0IG9ubHkgaWYgdGhlICoqbmdBbmltYXRlKiogbW9kdWxlIGlzIGxvYWRlZC5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogRGVmaW5lcyBhbiBhbmltYXRpb24gaG9vayB0aGF0IGNhbiBiZSBsYXRlciB1c2VkIHdpdGhcbiAgICAgICAgICAgKiB7QGxpbmsgJGFuaW1hdGUgJGFuaW1hdGV9IHNlcnZpY2UgYW5kIGRpcmVjdGl2ZXMgdGhhdCB1c2UgdGhpcyBzZXJ2aWNlLlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogYGBganNcbiAgICAgICAgICAgKiBtb2R1bGUuYW5pbWF0aW9uKCcuYW5pbWF0aW9uLW5hbWUnLCBmdW5jdGlvbigkaW5qZWN0MSwgJGluamVjdDIpIHtcbiAgICAgICAgICAgKiAgIHJldHVybiB7XG4gICAgICAgICAgICogICAgIGV2ZW50TmFtZSA6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHtcbiAgICAgICAgICAgKiAgICAgICAvL2NvZGUgdG8gcnVuIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgKiAgICAgICAvL29uY2UgY29tcGxldGUsIHRoZW4gcnVuIGRvbmUoKVxuICAgICAgICAgICAqICAgICAgIHJldHVybiBmdW5jdGlvbiBjYW5jZWxsYXRpb25GdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICogICAgICAgICAvL2NvZGUgdG8gY2FuY2VsIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgKiAgICAgICB9XG4gICAgICAgICAgICogICAgIH1cbiAgICAgICAgICAgKiAgIH1cbiAgICAgICAgICAgKiB9KVxuICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAqXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kYW5pbWF0ZVByb3ZpZGVyI3JlZ2lzdGVyICRhbmltYXRlUHJvdmlkZXIucmVnaXN0ZXIoKX0gYW5kXG4gICAgICAgICAgICoge0BsaW5rIG5nQW5pbWF0ZSBuZ0FuaW1hdGUgbW9kdWxlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBhbmltYXRpb246IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGFuaW1hdGVQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2ZpbHRlclxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBGaWx0ZXIgbmFtZSAtIHRoaXMgbXVzdCBiZSBhIHZhbGlkIGFuZ3VsYXIgZXhwcmVzc2lvbiBpZGVudGlmaWVyXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmlsdGVyRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgZmlsdGVyLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcigpfS5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICAgICAgICogKipOb3RlOioqIEZpbHRlciBuYW1lcyBtdXN0IGJlIHZhbGlkIGFuZ3VsYXIge0BsaW5rIGV4cHJlc3Npb259IGlkZW50aWZpZXJzLCBzdWNoIGFzIGB1cHBlcmNhc2VgIG9yIGBvcmRlckJ5YC5cbiAgICAgICAgICAgKiBOYW1lcyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycywgc3VjaCBhcyBoeXBoZW5zIGFuZCBkb3RzLCBhcmUgbm90IGFsbG93ZWQuIElmIHlvdSB3aXNoIHRvIG5hbWVzcGFjZVxuICAgICAgICAgICAqIHlvdXIgZmlsdGVycywgdGhlbiB5b3UgY2FuIHVzZSBjYXBpdGFsaXphdGlvbiAoYG15YXBwU3Vic2VjdGlvbkZpbHRlcnhgKSBvciB1bmRlcnNjb3Jlc1xuICAgICAgICAgICAqIChgbXlhcHBfc3Vic2VjdGlvbl9maWx0ZXJ4YCkuXG4gICAgICAgICAgICogPC9kaXY+XG4gICAgICAgICAgICovXG4gICAgICAgICAgZmlsdGVyOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRmaWx0ZXJQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnRyb2xsZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIENvbnRyb2xsZXIgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBjb250cm9sbGVycyB3aGVyZSB0aGVcbiAgICAgICAgICAgKiAgICBrZXlzIGFyZSB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjb25zdHJ1Y3RvcnMuXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ29udHJvbGxlciBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXIgJGNvbnRyb2xsZXJQcm92aWRlci5yZWdpc3RlcigpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb250cm9sbGVyOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRjb250cm9sbGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNkaXJlY3RpdmVcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIERpcmVjdGl2ZSBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGRpcmVjdGl2ZXMgd2hlcmUgdGhlXG4gICAgICAgICAgICogICAga2V5cyBhcmUgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmFjdG9yaWVzLlxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGRpcmVjdGl2ZUZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mXG4gICAgICAgICAgICogZGlyZWN0aXZlcy5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlICRjb21waWxlUHJvdmlkZXIuZGlyZWN0aXZlKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGRpcmVjdGl2ZTogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckY29tcGlsZVByb3ZpZGVyJywgJ2RpcmVjdGl2ZScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZ1xuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWdGbiBFeGVjdXRlIHRoaXMgZnVuY3Rpb24gb24gbW9kdWxlIGxvYWQuIFVzZWZ1bCBmb3Igc2VydmljZVxuICAgICAgICAgICAqICAgIGNvbmZpZ3VyYXRpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggbmVlZHMgdG8gYmUgcGVyZm9ybWVkIG9uIG1vZHVsZSBsb2FkaW5nLlxuICAgICAgICAgICAqIEZvciBtb3JlIGFib3V0IGhvdyB0byBjb25maWd1cmUgc2VydmljZXMsIHNlZVxuICAgICAgICAgICAqIHtAbGluayBwcm92aWRlcnMjcHJvdmlkZXItcmVjaXBlIFByb3ZpZGVyIFJlY2lwZX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uZmlnOiBjb25maWcsXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcnVuXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGluaXRpYWxpemF0aW9uRm4gRXhlY3V0ZSB0aGlzIGZ1bmN0aW9uIGFmdGVyIGluamVjdG9yIGNyZWF0aW9uLlxuICAgICAgICAgICAqICAgIFVzZWZ1bCBmb3IgYXBwbGljYXRpb24gaW5pdGlhbGl6YXRpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggc2hvdWxkIGJlIHBlcmZvcm1lZCB3aGVuIHRoZSBpbmplY3RvciBpcyBkb25lXG4gICAgICAgICAgICogbG9hZGluZyBhbGwgbW9kdWxlcy5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBydW46IGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgICAgICAgICBydW5CbG9ja3MucHVzaChibG9jayk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGNvbmZpZ0ZuKSB7XG4gICAgICAgICAgY29uZmlnKGNvbmZpZ0ZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3ZpZGVyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmc9fSBpbnNlcnRNZXRob2RcbiAgICAgICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gaW52b2tlTGF0ZXIocHJvdmlkZXIsIG1ldGhvZCwgaW5zZXJ0TWV0aG9kLCBxdWV1ZSkge1xuICAgICAgICAgIGlmICghcXVldWUpIHF1ZXVlID0gaW52b2tlUXVldWU7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcXVldWVbaW5zZXJ0TWV0aG9kIHx8ICdwdXNoJ10oW3Byb3ZpZGVyLCBtZXRob2QsIGFyZ3VtZW50c10pO1xuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3ZpZGVyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICAgICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKHByb3ZpZGVyLCBtZXRob2QpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVjaXBlTmFtZSwgZmFjdG9yeUZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZmFjdG9yeUZ1bmN0aW9uICYmIGlzRnVuY3Rpb24oZmFjdG9yeUZ1bmN0aW9uKSkgZmFjdG9yeUZ1bmN0aW9uLiQkbW9kdWxlTmFtZSA9IG5hbWU7XG4gICAgICAgICAgICBpbnZva2VRdWV1ZS5wdXNoKFtwcm92aWRlciwgbWV0aG9kLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxufVxuXG5zZXR1cE1vZHVsZUxvYWRlcih3aW5kb3cpO1xufSkod2luZG93KTtcblxuLyoqXG4gKiBDbG9zdXJlIGNvbXBpbGVyIHR5cGUgaW5mb3JtYXRpb25cbiAqXG4gKiBAdHlwZWRlZiB7IHtcbiAqICAgcmVxdWlyZXM6ICFBcnJheS48c3RyaW5nPixcbiAqICAgaW52b2tlUXVldWU6ICFBcnJheS48QXJyYXkuPCo+PixcbiAqXG4gKiAgIHNlcnZpY2U6IGZ1bmN0aW9uKHN0cmluZywgRnVuY3Rpb24pOmFuZ3VsYXIuTW9kdWxlLFxuICogICBmYWN0b3J5OiBmdW5jdGlvbihzdHJpbmcsIEZ1bmN0aW9uKTphbmd1bGFyLk1vZHVsZSxcbiAqICAgdmFsdWU6IGZ1bmN0aW9uKHN0cmluZywgKik6YW5ndWxhci5Nb2R1bGUsXG4gKlxuICogICBmaWx0ZXI6IGZ1bmN0aW9uKHN0cmluZywgRnVuY3Rpb24pOmFuZ3VsYXIuTW9kdWxlLFxuICpcbiAqICAgaW5pdDogZnVuY3Rpb24oRnVuY3Rpb24pOmFuZ3VsYXIuTW9kdWxlXG4gKiB9IH1cbiAqL1xuYW5ndWxhci5Nb2R1bGU7XG5cbiIsIi8qXG4gQW5ndWxhckpTIHYxLjQuOVxuIChjKSAyMDEwLTIwMTUgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gTGljZW5zZTogTUlUXG4qL1xuKGZ1bmN0aW9uKCl7J3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGQoYil7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGE9YXJndW1lbnRzWzBdLGU7ZT1cIltcIisoYj9iK1wiOlwiOlwiXCIpK2ErXCJdIGh0dHA6Ly9lcnJvcnMuYW5ndWxhcmpzLm9yZy8xLjQuOS9cIisoYj9iK1wiL1wiOlwiXCIpK2E7Zm9yKGE9MTthPGFyZ3VtZW50cy5sZW5ndGg7YSsrKXtlPWUrKDE9PWE/XCI/XCI6XCImXCIpK1wicFwiKyhhLTEpK1wiPVwiO3ZhciBkPWVuY29kZVVSSUNvbXBvbmVudCxjO2M9YXJndW1lbnRzW2FdO2M9XCJmdW5jdGlvblwiPT10eXBlb2YgYz9jLnRvU3RyaW5nKCkucmVwbGFjZSgvIFxce1tcXHNcXFNdKiQvLFwiXCIpOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBjP1widW5kZWZpbmVkXCI6XCJzdHJpbmdcIiE9dHlwZW9mIGM/SlNPTi5zdHJpbmdpZnkoYyk6YztlKz1kKGMpfXJldHVybiBFcnJvcihlKX19KGZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGEoYyxhLGIpe3JldHVybiBjW2FdfHwoY1thXT1iKCkpfXZhciBlPWQoXCIkaW5qZWN0b3JcIiksbj1kKFwibmdcIik7XG5iPWEoYixcImFuZ3VsYXJcIixPYmplY3QpO2IuJCRtaW5FcnI9Yi4kJG1pbkVycnx8ZDtyZXR1cm4gYShiLFwibW9kdWxlXCIsZnVuY3Rpb24oKXt2YXIgYz17fTtyZXR1cm4gZnVuY3Rpb24oYixkLGgpe2lmKFwiaGFzT3duUHJvcGVydHlcIj09PWIpdGhyb3cgbihcImJhZG5hbWVcIixcIm1vZHVsZVwiKTtkJiZjLmhhc093blByb3BlcnR5KGIpJiYoY1tiXT1udWxsKTtyZXR1cm4gYShjLGIsZnVuY3Rpb24oKXtmdW5jdGlvbiBjKGEsYixkLGUpe2V8fChlPWYpO3JldHVybiBmdW5jdGlvbigpe2VbZHx8XCJwdXNoXCJdKFthLGIsYXJndW1lbnRzXSk7cmV0dXJuIGd9fWZ1bmN0aW9uIGEoYyxlKXtyZXR1cm4gZnVuY3Rpb24oYSxkKXtkJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCYmKGQuJCRtb2R1bGVOYW1lPWIpO2YucHVzaChbYyxlLGFyZ3VtZW50c10pO3JldHVybiBnfX1pZighZCl0aHJvdyBlKFwibm9tb2RcIixiKTt2YXIgZj1bXSxrPVtdLGw9W10sbT1jKFwiJGluamVjdG9yXCIsXCJpbnZva2VcIixcInB1c2hcIixcbmspLGc9e19pbnZva2VRdWV1ZTpmLF9jb25maWdCbG9ja3M6ayxfcnVuQmxvY2tzOmwscmVxdWlyZXM6ZCxuYW1lOmIscHJvdmlkZXI6YShcIiRwcm92aWRlXCIsXCJwcm92aWRlclwiKSxmYWN0b3J5OmEoXCIkcHJvdmlkZVwiLFwiZmFjdG9yeVwiKSxzZXJ2aWNlOmEoXCIkcHJvdmlkZVwiLFwic2VydmljZVwiKSx2YWx1ZTpjKFwiJHByb3ZpZGVcIixcInZhbHVlXCIpLGNvbnN0YW50OmMoXCIkcHJvdmlkZVwiLFwiY29uc3RhbnRcIixcInVuc2hpZnRcIiksZGVjb3JhdG9yOmEoXCIkcHJvdmlkZVwiLFwiZGVjb3JhdG9yXCIpLGFuaW1hdGlvbjphKFwiJGFuaW1hdGVQcm92aWRlclwiLFwicmVnaXN0ZXJcIiksZmlsdGVyOmEoXCIkZmlsdGVyUHJvdmlkZXJcIixcInJlZ2lzdGVyXCIpLGNvbnRyb2xsZXI6YShcIiRjb250cm9sbGVyUHJvdmlkZXJcIixcInJlZ2lzdGVyXCIpLGRpcmVjdGl2ZTphKFwiJGNvbXBpbGVQcm92aWRlclwiLFwiZGlyZWN0aXZlXCIpLGNvbmZpZzptLHJ1bjpmdW5jdGlvbihhKXtsLnB1c2goYSk7cmV0dXJuIHRoaXN9fTtoJiZtKGgpO1xucmV0dXJuIGd9KX19KX0pKHdpbmRvdyl9KSh3aW5kb3cpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5ndWxhci1sb2FkZXIubWluLmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuNC45XG4gKiAoYykgMjAxMC0yMDE1IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbih3aW5kb3csIGFuZ3VsYXIsIHVuZGVmaW5lZCkge1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgYW5ndWxhci5tb2NrXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBOYW1lc3BhY2UgZnJvbSAnYW5ndWxhci1tb2Nrcy5qcycgd2hpY2ggY29udGFpbnMgdGVzdGluZyByZWxhdGVkIGNvZGUuXG4gKi9cbmFuZ3VsYXIubW9jayA9IHt9O1xuXG4vKipcbiAqICEgVGhpcyBpcyBhIHByaXZhdGUgdW5kb2N1bWVudGVkIHNlcnZpY2UgIVxuICpcbiAqIEBuYW1lICRicm93c2VyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHNlcnZpY2UgaXMgYSBtb2NrIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBuZy4kYnJvd3Nlcn0uIEl0IHByb3ZpZGVzIGZha2VcbiAqIGltcGxlbWVudGF0aW9uIGZvciBjb21tb25seSB1c2VkIGJyb3dzZXIgYXBpcyB0aGF0IGFyZSBoYXJkIHRvIHRlc3QsIGUuZy4gc2V0VGltZW91dCwgeGhyLFxuICogY29va2llcywgZXRjLi4uXG4gKlxuICogVGhlIGFwaSBvZiB0aGlzIHNlcnZpY2UgaXMgdGhlIHNhbWUgYXMgdGhhdCBvZiB0aGUgcmVhbCB7QGxpbmsgbmcuJGJyb3dzZXIgJGJyb3dzZXJ9LCBleGNlcHRcbiAqIHRoYXQgdGhlcmUgYXJlIHNldmVyYWwgaGVscGVyIG1ldGhvZHMgYXZhaWxhYmxlIHdoaWNoIGNhbiBiZSB1c2VkIGluIHRlc3RzLlxuICovXG5hbmd1bGFyLm1vY2suJEJyb3dzZXJQcm92aWRlciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IGFuZ3VsYXIubW9jay4kQnJvd3NlcigpO1xuICB9O1xufTtcblxuYW5ndWxhci5tb2NrLiRCcm93c2VyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLmlzTW9jayA9IHRydWU7XG4gIHNlbGYuJCR1cmwgPSBcImh0dHA6Ly9zZXJ2ZXIvXCI7XG4gIHNlbGYuJCRsYXN0VXJsID0gc2VsZi4kJHVybDsgLy8gdXNlZCBieSB1cmwgcG9sbGluZyBmblxuICBzZWxmLnBvbGxGbnMgPSBbXTtcblxuICAvLyBUT0RPKHZvanRhKTogcmVtb3ZlIHRoaXMgdGVtcG9yYXJ5IGFwaVxuICBzZWxmLiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QgPSBhbmd1bGFyLm5vb3A7XG4gIHNlbGYuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9IGFuZ3VsYXIubm9vcDtcblxuXG4gIC8vIHJlZ2lzdGVyIHVybCBwb2xsaW5nIGZuXG5cbiAgc2VsZi5vblVybENoYW5nZSA9IGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgc2VsZi5wb2xsRm5zLnB1c2goXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHNlbGYuJCRsYXN0VXJsICE9PSBzZWxmLiQkdXJsIHx8IHNlbGYuJCRzdGF0ZSAhPT0gc2VsZi4kJGxhc3RTdGF0ZSkge1xuICAgICAgICAgIHNlbGYuJCRsYXN0VXJsID0gc2VsZi4kJHVybDtcbiAgICAgICAgICBzZWxmLiQkbGFzdFN0YXRlID0gc2VsZi4kJHN0YXRlO1xuICAgICAgICAgIGxpc3RlbmVyKHNlbGYuJCR1cmwsIHNlbGYuJCRzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuXG4gICAgcmV0dXJuIGxpc3RlbmVyO1xuICB9O1xuXG4gIHNlbGYuJCRhcHBsaWNhdGlvbkRlc3Ryb3llZCA9IGFuZ3VsYXIubm9vcDtcbiAgc2VsZi4kJGNoZWNrVXJsQ2hhbmdlID0gYW5ndWxhci5ub29wO1xuXG4gIHNlbGYuZGVmZXJyZWRGbnMgPSBbXTtcbiAgc2VsZi5kZWZlcnJlZE5leHRJZCA9IDA7XG5cbiAgc2VsZi5kZWZlciA9IGZ1bmN0aW9uKGZuLCBkZWxheSkge1xuICAgIGRlbGF5ID0gZGVsYXkgfHwgMDtcbiAgICBzZWxmLmRlZmVycmVkRm5zLnB1c2goe3RpbWU6KHNlbGYuZGVmZXIubm93ICsgZGVsYXkpLCBmbjpmbiwgaWQ6IHNlbGYuZGVmZXJyZWROZXh0SWR9KTtcbiAgICBzZWxmLmRlZmVycmVkRm5zLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYS50aW1lIC0gYi50aW1lO30pO1xuICAgIHJldHVybiBzZWxmLmRlZmVycmVkTmV4dElkKys7XG4gIH07XG5cblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjZGVmZXIubm93XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDdXJyZW50IG1pbGxpc2Vjb25kcyBtb2NrIHRpbWUuXG4gICAqL1xuICBzZWxmLmRlZmVyLm5vdyA9IDA7XG5cblxuICBzZWxmLmRlZmVyLmNhbmNlbCA9IGZ1bmN0aW9uKGRlZmVySWQpIHtcbiAgICB2YXIgZm5JbmRleDtcblxuICAgIGFuZ3VsYXIuZm9yRWFjaChzZWxmLmRlZmVycmVkRm5zLCBmdW5jdGlvbihmbiwgaW5kZXgpIHtcbiAgICAgIGlmIChmbi5pZCA9PT0gZGVmZXJJZCkgZm5JbmRleCA9IGluZGV4O1xuICAgIH0pO1xuXG4gICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGZuSW5kZXgpKSB7XG4gICAgICBzZWxmLmRlZmVycmVkRm5zLnNwbGljZShmbkluZGV4LCAxKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNkZWZlci5mbHVzaFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRmx1c2hlcyBhbGwgcGVuZGluZyByZXF1ZXN0cyBhbmQgZXhlY3V0ZXMgdGhlIGRlZmVyIGNhbGxiYWNrcy5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXI9fSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGZsdXNoLiBTZWUge0BsaW5rICNkZWZlci5ub3d9XG4gICAqL1xuICBzZWxmLmRlZmVyLmZsdXNoID0gZnVuY3Rpb24oZGVsYXkpIHtcbiAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoZGVsYXkpKSB7XG4gICAgICBzZWxmLmRlZmVyLm5vdyArPSBkZWxheTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNlbGYuZGVmZXJyZWRGbnMubGVuZ3RoKSB7XG4gICAgICAgIHNlbGYuZGVmZXIubm93ID0gc2VsZi5kZWZlcnJlZEZuc1tzZWxmLmRlZmVycmVkRm5zLmxlbmd0aCAtIDFdLnRpbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGRlZmVycmVkIHRhc2tzIHRvIGJlIGZsdXNoZWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aGlsZSAoc2VsZi5kZWZlcnJlZEZucy5sZW5ndGggJiYgc2VsZi5kZWZlcnJlZEZuc1swXS50aW1lIDw9IHNlbGYuZGVmZXIubm93KSB7XG4gICAgICBzZWxmLmRlZmVycmVkRm5zLnNoaWZ0KCkuZm4oKTtcbiAgICB9XG4gIH07XG5cbiAgc2VsZi4kJGJhc2VIcmVmID0gJy8nO1xuICBzZWxmLmJhc2VIcmVmID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJCRiYXNlSHJlZjtcbiAgfTtcbn07XG5hbmd1bGFyLm1vY2suJEJyb3dzZXIucHJvdG90eXBlID0ge1xuXG4vKipcbiAgKiBAbmFtZSAkYnJvd3NlciNwb2xsXG4gICpcbiAgKiBAZGVzY3JpcHRpb25cbiAgKiBydW4gYWxsIGZucyBpbiBwb2xsRm5zXG4gICovXG4gIHBvbGw6IGZ1bmN0aW9uIHBvbGwoKSB7XG4gICAgYW5ndWxhci5mb3JFYWNoKHRoaXMucG9sbEZucywgZnVuY3Rpb24ocG9sbEZuKSB7XG4gICAgICBwb2xsRm4oKTtcbiAgICB9KTtcbiAgfSxcblxuICB1cmw6IGZ1bmN0aW9uKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChzdGF0ZSkpIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHVybCkge1xuICAgICAgdGhpcy4kJHVybCA9IHVybDtcbiAgICAgIC8vIE5hdGl2ZSBwdXNoU3RhdGUgc2VyaWFsaXplcyAmIGNvcGllcyB0aGUgb2JqZWN0OyBzaW11bGF0ZSBpdC5cbiAgICAgIHRoaXMuJCRzdGF0ZSA9IGFuZ3VsYXIuY29weShzdGF0ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy4kJHVybDtcbiAgfSxcblxuICBzdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJCRzdGF0ZTtcbiAgfSxcblxuICBub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzOiBmdW5jdGlvbihmbikge1xuICAgIGZuKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRleGNlcHRpb25IYW5kbGVyUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbmZpZ3VyZXMgdGhlIG1vY2sgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyfSB0byByZXRocm93IG9yIHRvIGxvZyBlcnJvcnNcbiAqIHBhc3NlZCB0byB0aGUgYCRleGNlcHRpb25IYW5kbGVyYC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkZXhjZXB0aW9uSGFuZGxlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTW9jayBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXJ9IHRoYXQgcmV0aHJvd3Mgb3IgbG9ncyBlcnJvcnMgcGFzc2VkXG4gKiB0byBpdC4gU2VlIHtAbGluayBuZ01vY2suJGV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlciAkZXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyfSBmb3IgY29uZmlndXJhdGlvblxuICogaW5mb3JtYXRpb24uXG4gKlxuICpcbiAqIGBgYGpzXG4gKiAgIGRlc2NyaWJlKCckZXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyJywgZnVuY3Rpb24oKSB7XG4gKlxuICogICAgIGl0KCdzaG91bGQgY2FwdHVyZSBsb2cgbWVzc2FnZXMgYW5kIGV4Y2VwdGlvbnMnLCBmdW5jdGlvbigpIHtcbiAqXG4gKiAgICAgICBtb2R1bGUoZnVuY3Rpb24oJGV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcikge1xuICogICAgICAgICAkZXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLm1vZGUoJ2xvZycpO1xuICogICAgICAgfSk7XG4gKlxuICogICAgICAgaW5qZWN0KGZ1bmN0aW9uKCRsb2csICRleGNlcHRpb25IYW5kbGVyLCAkdGltZW91dCkge1xuICogICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHsgJGxvZy5sb2coMSk7IH0pO1xuICogICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHsgJGxvZy5sb2coMik7IHRocm93ICdiYW5hbmEgcGVlbCc7IH0pO1xuICogICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHsgJGxvZy5sb2coMyk7IH0pO1xuICogICAgICAgICBleHBlY3QoJGV4Y2VwdGlvbkhhbmRsZXIuZXJyb3JzKS50b0VxdWFsKFtdKTtcbiAqICAgICAgICAgZXhwZWN0KCRsb2cuYXNzZXJ0RW1wdHkoKSk7XG4gKiAgICAgICAgICR0aW1lb3V0LmZsdXNoKCk7XG4gKiAgICAgICAgIGV4cGVjdCgkZXhjZXB0aW9uSGFuZGxlci5lcnJvcnMpLnRvRXF1YWwoWydiYW5hbmEgcGVlbCddKTtcbiAqICAgICAgICAgZXhwZWN0KCRsb2cubG9nLmxvZ3MpLnRvRXF1YWwoW1sxXSwgWzJdLCBbM11dKTtcbiAqICAgICAgIH0pO1xuICogICAgIH0pO1xuICogICB9KTtcbiAqIGBgYFxuICovXG5cbmFuZ3VsYXIubW9jay4kRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBoYW5kbGVyO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRleGNlcHRpb25IYW5kbGVyUHJvdmlkZXIjbW9kZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgbG9nZ2luZyBtb2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZSBNb2RlIG9mIG9wZXJhdGlvbiwgZGVmYXVsdHMgdG8gYHJldGhyb3dgLlxuICAgKlxuICAgKiAgIC0gYGxvZ2A6IFNvbWV0aW1lcyBpdCBpcyBkZXNpcmFibGUgdG8gdGVzdCB0aGF0IGFuIGVycm9yIGlzIHRocm93biwgZm9yIHRoaXMgY2FzZSB0aGUgYGxvZ2BcbiAgICogICAgICAgICAgICBtb2RlIHN0b3JlcyBhbiBhcnJheSBvZiBlcnJvcnMgaW4gYCRleGNlcHRpb25IYW5kbGVyLmVycm9yc2AsIHRvIGFsbG93IGxhdGVyXG4gICAqICAgICAgICAgICAgYXNzZXJ0aW9uIG9mIHRoZW0uIFNlZSB7QGxpbmsgbmdNb2NrLiRsb2cjYXNzZXJ0RW1wdHkgYXNzZXJ0RW1wdHkoKX0gYW5kXG4gICAqICAgICAgICAgICAge0BsaW5rIG5nTW9jay4kbG9nI3Jlc2V0IHJlc2V0KCl9XG4gICAqICAgLSBgcmV0aHJvd2A6IElmIGFueSBlcnJvcnMgYXJlIHBhc3NlZCB0byB0aGUgaGFuZGxlciBpbiB0ZXN0cywgaXQgdHlwaWNhbGx5IG1lYW5zIHRoYXQgdGhlcmVcbiAgICogICAgICAgICAgICAgICAgaXMgYSBidWcgaW4gdGhlIGFwcGxpY2F0aW9uIG9yIHRlc3QsIHNvIHRoaXMgbW9jayB3aWxsIG1ha2UgdGhlc2UgdGVzdHMgZmFpbC5cbiAgICogICAgICAgICAgICAgICAgRm9yIGFueSBpbXBsZW1lbnRhdGlvbnMgdGhhdCBleHBlY3QgZXhjZXB0aW9ucyB0byBiZSB0aHJvd24sIHRoZSBgcmV0aHJvd2AgbW9kZVxuICAgKiAgICAgICAgICAgICAgICB3aWxsIGFsc28gbWFpbnRhaW4gYSBsb2cgb2YgdGhyb3duIGVycm9ycy5cbiAgICovXG4gIHRoaXMubW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHtcblxuICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgY2FzZSAnbG9nJzpcbiAgICAgIGNhc2UgJ3JldGhyb3cnOlxuICAgICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICAgIGhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RlID09PSBcInJldGhyb3dcIikge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGhhbmRsZXIuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gbW9kZSAnXCIgKyBtb2RlICsgXCInLCBvbmx5ICdsb2cnLydyZXRocm93JyBtb2RlcyBhcmUgYWxsb3dlZCFcIik7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoYW5kbGVyO1xuICB9O1xuXG4gIHRoaXMubW9kZSgncmV0aHJvdycpO1xufTtcblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbG9nXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBNb2NrIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBuZy4kbG9nfSB0aGF0IGdhdGhlcnMgYWxsIGxvZ2dlZCBtZXNzYWdlcyBpbiBhcnJheXNcbiAqIChvbmUgYXJyYXkgcGVyIGxvZ2dpbmcgbGV2ZWwpLiBUaGVzZSBhcnJheXMgYXJlIGV4cG9zZWQgYXMgYGxvZ3NgIHByb3BlcnR5IG9mIGVhY2ggb2YgdGhlXG4gKiBsZXZlbC1zcGVjaWZpYyBsb2cgZnVuY3Rpb24sIGUuZy4gZm9yIGxldmVsIGBlcnJvcmAgdGhlIGFycmF5IGlzIGV4cG9zZWQgYXMgYCRsb2cuZXJyb3IubG9nc2AuXG4gKlxuICovXG5hbmd1bGFyLm1vY2suJExvZ1Byb3ZpZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBkZWJ1ZyA9IHRydWU7XG5cbiAgZnVuY3Rpb24gY29uY2F0KGFycmF5MSwgYXJyYXkyLCBpbmRleCkge1xuICAgIHJldHVybiBhcnJheTEuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycmF5MiwgaW5kZXgpKTtcbiAgfVxuXG4gIHRoaXMuZGVidWdFbmFibGVkID0gZnVuY3Rpb24oZmxhZykge1xuICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChmbGFnKSkge1xuICAgICAgZGVidWcgPSBmbGFnO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkZWJ1ZztcbiAgICB9XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyICRsb2cgPSB7XG4gICAgICBsb2c6IGZ1bmN0aW9uKCkgeyAkbG9nLmxvZy5sb2dzLnB1c2goY29uY2F0KFtdLCBhcmd1bWVudHMsIDApKTsgfSxcbiAgICAgIHdhcm46IGZ1bmN0aW9uKCkgeyAkbG9nLndhcm4ubG9ncy5wdXNoKGNvbmNhdChbXSwgYXJndW1lbnRzLCAwKSk7IH0sXG4gICAgICBpbmZvOiBmdW5jdGlvbigpIHsgJGxvZy5pbmZvLmxvZ3MucHVzaChjb25jYXQoW10sIGFyZ3VtZW50cywgMCkpOyB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkgeyAkbG9nLmVycm9yLmxvZ3MucHVzaChjb25jYXQoW10sIGFyZ3VtZW50cywgMCkpOyB9LFxuICAgICAgZGVidWc6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgICAkbG9nLmRlYnVnLmxvZ3MucHVzaChjb25jYXQoW10sIGFyZ3VtZW50cywgMCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkbG9nI3Jlc2V0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXNldCBhbGwgb2YgdGhlIGxvZ2dpbmcgYXJyYXlzIHRvIGVtcHR5LlxuICAgICAqL1xuICAgICRsb2cucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgKiBAbmFtZSAkbG9nI2xvZy5sb2dzXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBcnJheSBvZiBtZXNzYWdlcyBsb2dnZWQgdXNpbmcge0BsaW5rIG5nLiRsb2cjbG9nIGBsb2coKWB9LlxuICAgICAgICpcbiAgICAgICAqIEBleGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogJGxvZy5sb2coJ1NvbWUgTG9nJyk7XG4gICAgICAgKiB2YXIgZmlyc3QgPSAkbG9nLmxvZy5sb2dzLnVuc2hpZnQoKTtcbiAgICAgICAqIGBgYFxuICAgICAgICovXG4gICAgICAkbG9nLmxvZy5sb2dzID0gW107XG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICogQG5hbWUgJGxvZyNpbmZvLmxvZ3NcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEFycmF5IG9mIG1lc3NhZ2VzIGxvZ2dlZCB1c2luZyB7QGxpbmsgbmcuJGxvZyNpbmZvIGBpbmZvKClgfS5cbiAgICAgICAqXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAqICRsb2cuaW5mbygnU29tZSBJbmZvJyk7XG4gICAgICAgKiB2YXIgZmlyc3QgPSAkbG9nLmluZm8ubG9ncy51bnNoaWZ0KCk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqL1xuICAgICAgJGxvZy5pbmZvLmxvZ3MgPSBbXTtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgKiBAbmFtZSAkbG9nI3dhcm4ubG9nc1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQXJyYXkgb2YgbWVzc2FnZXMgbG9nZ2VkIHVzaW5nIHtAbGluayBuZy4kbG9nI3dhcm4gYHdhcm4oKWB9LlxuICAgICAgICpcbiAgICAgICAqIEBleGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogJGxvZy53YXJuKCdTb21lIFdhcm5pbmcnKTtcbiAgICAgICAqIHZhciBmaXJzdCA9ICRsb2cud2Fybi5sb2dzLnVuc2hpZnQoKTtcbiAgICAgICAqIGBgYFxuICAgICAgICovXG4gICAgICAkbG9nLndhcm4ubG9ncyA9IFtdO1xuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAqIEBuYW1lICRsb2cjZXJyb3IubG9nc1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQXJyYXkgb2YgbWVzc2FnZXMgbG9nZ2VkIHVzaW5nIHtAbGluayBuZy4kbG9nI2Vycm9yIGBlcnJvcigpYH0uXG4gICAgICAgKlxuICAgICAgICogQGV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAkbG9nLmVycm9yKCdTb21lIEVycm9yJyk7XG4gICAgICAgKiB2YXIgZmlyc3QgPSAkbG9nLmVycm9yLmxvZ3MudW5zaGlmdCgpO1xuICAgICAgICogYGBgXG4gICAgICAgKi9cbiAgICAgICRsb2cuZXJyb3IubG9ncyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICogQG5hbWUgJGxvZyNkZWJ1Zy5sb2dzXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBcnJheSBvZiBtZXNzYWdlcyBsb2dnZWQgdXNpbmcge0BsaW5rIG5nLiRsb2cjZGVidWcgYGRlYnVnKClgfS5cbiAgICAgICAqXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAqICRsb2cuZGVidWcoJ1NvbWUgRXJyb3InKTtcbiAgICAgICAqIHZhciBmaXJzdCA9ICRsb2cuZGVidWcubG9ncy51bnNoaWZ0KCk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqL1xuICAgICAgJGxvZy5kZWJ1Zy5sb2dzID0gW107XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkbG9nI2Fzc2VydEVtcHR5XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBc3NlcnQgdGhhdCBhbGwgb2YgdGhlIGxvZ2dpbmcgbWV0aG9kcyBoYXZlIG5vIGxvZ2dlZCBtZXNzYWdlcy4gSWYgYW55IG1lc3NhZ2VzIGFyZSBwcmVzZW50LFxuICAgICAqIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gICAgICovXG4gICAgJGxvZy5hc3NlcnRFbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgYW5ndWxhci5mb3JFYWNoKFsnZXJyb3InLCAnd2FybicsICdpbmZvJywgJ2xvZycsICdkZWJ1ZyddLCBmdW5jdGlvbihsb2dMZXZlbCkge1xuICAgICAgICBhbmd1bGFyLmZvckVhY2goJGxvZ1tsb2dMZXZlbF0ubG9ncywgZnVuY3Rpb24obG9nKSB7XG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGxvZywgZnVuY3Rpb24obG9nSXRlbSkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goJ01PQ0sgJGxvZyAoJyArIGxvZ0xldmVsICsgJyk6ICcgKyBTdHJpbmcobG9nSXRlbSkgKyAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAobG9nSXRlbS5zdGFjayB8fCAnJykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgZXJyb3JzLnVuc2hpZnQoXCJFeHBlY3RlZCAkbG9nIHRvIGJlIGVtcHR5ISBFaXRoZXIgYSBtZXNzYWdlIHdhcyBsb2dnZWQgdW5leHBlY3RlZGx5LCBvciBcIiArXG4gICAgICAgICAgXCJhbiBleHBlY3RlZCBsb2cgbWVzc2FnZSB3YXMgbm90IGNoZWNrZWQgYW5kIHJlbW92ZWQ6XCIpO1xuICAgICAgICBlcnJvcnMucHVzaCgnJyk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMuam9pbignXFxuLS0tLS0tLS0tXFxuJykpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAkbG9nLnJlc2V0KCk7XG4gICAgcmV0dXJuICRsb2c7XG4gIH07XG59O1xuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRpbnRlcnZhbFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTW9jayBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgJGludGVydmFsIHNlcnZpY2UuXG4gKlxuICogVXNlIHtAbGluayBuZ01vY2suJGludGVydmFsI2ZsdXNoIGAkaW50ZXJ2YWwuZmx1c2gobWlsbGlzKWB9IHRvXG4gKiBtb3ZlIGZvcndhcmQgYnkgYG1pbGxpc2AgbWlsbGlzZWNvbmRzIGFuZCB0cmlnZ2VyIGFueSBmdW5jdGlvbnMgc2NoZWR1bGVkIHRvIHJ1biBpbiB0aGF0XG4gKiB0aW1lLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQgcmVwZWF0ZWRseS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gZWFjaCBmdW5jdGlvbiBjYWxsLlxuICogQHBhcmFtIHtudW1iZXI9fSBbY291bnQ9MF0gTnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdC4gSWYgbm90IHNldCwgb3IgMCwgd2lsbCByZXBlYXRcbiAqICAgaW5kZWZpbml0ZWx5LlxuICogQHBhcmFtIHtib29sZWFuPX0gW2ludm9rZUFwcGx5PXRydWVdIElmIHNldCB0byBgZmFsc2VgIHNraXBzIG1vZGVsIGRpcnR5IGNoZWNraW5nLCBvdGhlcndpc2VcbiAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLlxuICogQHBhcmFtIHsuLi4qPX0gUGFzcyBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gdGhlIGV4ZWN1dGVkIGZ1bmN0aW9uLlxuICogQHJldHVybnMge3Byb21pc2V9IEEgcHJvbWlzZSB3aGljaCB3aWxsIGJlIG5vdGlmaWVkIG9uIGVhY2ggaXRlcmF0aW9uLlxuICovXG5hbmd1bGFyLm1vY2suJEludGVydmFsUHJvdmlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckcm9vdFNjb3BlJywgJyRxJywgJyQkcScsXG4gICAgICAgZnVuY3Rpb24oJGJyb3dzZXIsICAgJHJvb3RTY29wZSwgICAkcSwgICAkJHEpIHtcbiAgICB2YXIgcmVwZWF0Rm5zID0gW10sXG4gICAgICAgIG5leHRSZXBlYXRJZCA9IDAsXG4gICAgICAgIG5vdyA9IDA7XG5cbiAgICB2YXIgJGludGVydmFsID0gZnVuY3Rpb24oZm4sIGRlbGF5LCBjb3VudCwgaW52b2tlQXBwbHkpIHtcbiAgICAgIHZhciBoYXNQYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gNCxcbiAgICAgICAgICBhcmdzID0gaGFzUGFyYW1zID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCA0KSA6IFtdLFxuICAgICAgICAgIGl0ZXJhdGlvbiA9IDAsXG4gICAgICAgICAgc2tpcEFwcGx5ID0gKGFuZ3VsYXIuaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHkpLFxuICAgICAgICAgIGRlZmVycmVkID0gKHNraXBBcHBseSA/ICQkcSA6ICRxKS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICBjb3VudCA9IChhbmd1bGFyLmlzRGVmaW5lZChjb3VudCkpID8gY291bnQgOiAwO1xuICAgICAgcHJvbWlzZS50aGVuKG51bGwsIG51bGwsICghaGFzUGFyYW1zKSA/IGZuIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgfSk7XG5cbiAgICAgIHByb21pc2UuJCRpbnRlcnZhbElkID0gbmV4dFJlcGVhdElkO1xuXG4gICAgICBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgICBkZWZlcnJlZC5ub3RpZnkoaXRlcmF0aW9uKyspO1xuXG4gICAgICAgIGlmIChjb3VudCA+IDAgJiYgaXRlcmF0aW9uID49IGNvdW50KSB7XG4gICAgICAgICAgdmFyIGZuSW5kZXg7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShpdGVyYXRpb24pO1xuXG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHJlcGVhdEZucywgZnVuY3Rpb24oZm4sIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoZm4uaWQgPT09IHByb21pc2UuJCRpbnRlcnZhbElkKSBmbkluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoZm5JbmRleCkpIHtcbiAgICAgICAgICAgIHJlcGVhdEZucy5zcGxpY2UoZm5JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNraXBBcHBseSkge1xuICAgICAgICAgICRicm93c2VyLmRlZmVyLmZsdXNoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXBlYXRGbnMucHVzaCh7XG4gICAgICAgIG5leHRUaW1lOihub3cgKyBkZWxheSksXG4gICAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgICAgZm46IHRpY2ssXG4gICAgICAgIGlkOiBuZXh0UmVwZWF0SWQsXG4gICAgICAgIGRlZmVycmVkOiBkZWZlcnJlZFxuICAgICAgfSk7XG4gICAgICByZXBlYXRGbnMuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBhLm5leHRUaW1lIC0gYi5uZXh0VGltZTt9KTtcblxuICAgICAgbmV4dFJlcGVhdElkKys7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaW50ZXJ2YWwjY2FuY2VsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDYW5jZWxzIGEgdGFzayBhc3NvY2lhdGVkIHdpdGggdGhlIGBwcm9taXNlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cHJvbWlzZX0gcHJvbWlzZSBBIHByb21pc2UgZnJvbSBjYWxsaW5nIHRoZSBgJGludGVydmFsYCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgd2FzIHN1Y2Nlc3NmdWxseSBjYW5jZWxsZWQuXG4gICAgICovXG4gICAgJGludGVydmFsLmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmICghcHJvbWlzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgdmFyIGZuSW5kZXg7XG5cbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChyZXBlYXRGbnMsIGZ1bmN0aW9uKGZuLCBpbmRleCkge1xuICAgICAgICBpZiAoZm4uaWQgPT09IHByb21pc2UuJCRpbnRlcnZhbElkKSBmbkluZGV4ID0gaW5kZXg7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGZuSW5kZXgpKSB7XG4gICAgICAgIHJlcGVhdEZuc1tmbkluZGV4XS5kZWZlcnJlZC5yZWplY3QoJ2NhbmNlbGVkJyk7XG4gICAgICAgIHJlcGVhdEZucy5zcGxpY2UoZm5JbmRleCwgMSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaW50ZXJ2YWwjZmx1c2hcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFJ1bnMgaW50ZXJ2YWwgdGFza3Mgc2NoZWR1bGVkIHRvIGJlIHJ1biBpbiB0aGUgbmV4dCBgbWlsbGlzYCBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG1pbGxpcyBtYXhpbXVtIHRpbWVvdXQgYW1vdW50IHRvIGZsdXNoIHVwIHVudGlsLlxuICAgICAqXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgYW1vdW50IG9mIHRpbWUgbW92ZWQgZm9yd2FyZC5cbiAgICAgKi9cbiAgICAkaW50ZXJ2YWwuZmx1c2ggPSBmdW5jdGlvbihtaWxsaXMpIHtcbiAgICAgIG5vdyArPSBtaWxsaXM7XG4gICAgICB3aGlsZSAocmVwZWF0Rm5zLmxlbmd0aCAmJiByZXBlYXRGbnNbMF0ubmV4dFRpbWUgPD0gbm93KSB7XG4gICAgICAgIHZhciB0YXNrID0gcmVwZWF0Rm5zWzBdO1xuICAgICAgICB0YXNrLmZuKCk7XG4gICAgICAgIHRhc2submV4dFRpbWUgKz0gdGFzay5kZWxheTtcbiAgICAgICAgcmVwZWF0Rm5zLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYS5uZXh0VGltZSAtIGIubmV4dFRpbWU7fSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWlsbGlzO1xuICAgIH07XG5cbiAgICByZXR1cm4gJGludGVydmFsO1xuICB9XTtcbn07XG5cblxuLyoganNoaW50IC1XMTAxICovXG4vKiBUaGUgUl9JU084MDYxX1NUUiByZWdleCBpcyBuZXZlciBnb2luZyB0byBmaXQgaW50byB0aGUgMTAwIGNoYXIgbGltaXQhXG4gKiBUaGlzIGRpcmVjdGl2ZSBzaG91bGQgZ28gaW5zaWRlIHRoZSBhbm9ueW1vdXMgZnVuY3Rpb24gYnV0IGEgYnVnIGluIEpTSGludCBtZWFucyB0aGF0IGl0IHdvdWxkXG4gKiBub3QgYmUgZW5hY3RlZCBlYXJseSBlbm91Z2ggdG8gcHJldmVudCB0aGUgd2FybmluZy5cbiAqL1xudmFyIFJfSVNPODA2MV9TVFIgPSAvXihcXGR7NH0pLT8oXFxkXFxkKS0/KFxcZFxcZCkoPzpUKFxcZFxcZCkoPzpcXDo/KFxcZFxcZCkoPzpcXDo/KFxcZFxcZCkoPzpcXC4oXFxkezN9KSk/KT8pPyhafChbKy1dKShcXGRcXGQpOj8oXFxkXFxkKSkpPyQvO1xuXG5mdW5jdGlvbiBqc29uU3RyaW5nVG9EYXRlKHN0cmluZykge1xuICB2YXIgbWF0Y2g7XG4gIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChSX0lTTzgwNjFfU1RSKSkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoMCksXG4gICAgICAgIHR6SG91ciA9IDAsXG4gICAgICAgIHR6TWluICA9IDA7XG4gICAgaWYgKG1hdGNoWzldKSB7XG4gICAgICB0ekhvdXIgPSB0b0ludChtYXRjaFs5XSArIG1hdGNoWzEwXSk7XG4gICAgICB0ek1pbiA9IHRvSW50KG1hdGNoWzldICsgbWF0Y2hbMTFdKTtcbiAgICB9XG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih0b0ludChtYXRjaFsxXSksIHRvSW50KG1hdGNoWzJdKSAtIDEsIHRvSW50KG1hdGNoWzNdKSk7XG4gICAgZGF0ZS5zZXRVVENIb3Vycyh0b0ludChtYXRjaFs0XSB8fCAwKSAtIHR6SG91cixcbiAgICAgICAgICAgICAgICAgICAgIHRvSW50KG1hdGNoWzVdIHx8IDApIC0gdHpNaW4sXG4gICAgICAgICAgICAgICAgICAgICB0b0ludChtYXRjaFs2XSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgIHRvSW50KG1hdGNoWzddIHx8IDApKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gc3RyaW5nO1xufVxuXG5mdW5jdGlvbiB0b0ludChzdHIpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHN0ciwgMTApO1xufVxuXG5mdW5jdGlvbiBwYWROdW1iZXIobnVtLCBkaWdpdHMsIHRyaW0pIHtcbiAgdmFyIG5lZyA9ICcnO1xuICBpZiAobnVtIDwgMCkge1xuICAgIG5lZyA9ICAnLSc7XG4gICAgbnVtID0gLW51bTtcbiAgfVxuICBudW0gPSAnJyArIG51bTtcbiAgd2hpbGUgKG51bS5sZW5ndGggPCBkaWdpdHMpIG51bSA9ICcwJyArIG51bTtcbiAgaWYgKHRyaW0pIHtcbiAgICBudW0gPSBudW0uc3Vic3RyKG51bS5sZW5ndGggLSBkaWdpdHMpO1xuICB9XG4gIHJldHVybiBuZWcgKyBudW07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgYW5ndWxhci5tb2NrLlR6RGF0ZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogKk5PVEUqOiB0aGlzIGlzIG5vdCBhbiBpbmplY3RhYmxlIGluc3RhbmNlLCBqdXN0IGEgZ2xvYmFsbHkgYXZhaWxhYmxlIG1vY2sgY2xhc3Mgb2YgYERhdGVgLlxuICpcbiAqIE1vY2sgb2YgdGhlIERhdGUgdHlwZSB3aGljaCBoYXMgaXRzIHRpbWV6b25lIHNwZWNpZmllZCB2aWEgY29uc3RydWN0b3IgYXJnLlxuICpcbiAqIFRoZSBtYWluIHB1cnBvc2UgaXMgdG8gY3JlYXRlIERhdGUtbGlrZSBpbnN0YW5jZXMgd2l0aCB0aW1lem9uZSBmaXhlZCB0byB0aGUgc3BlY2lmaWVkIHRpbWV6b25lXG4gKiBvZmZzZXQsIHNvIHRoYXQgd2UgY2FuIHRlc3QgY29kZSB0aGF0IGRlcGVuZHMgb24gbG9jYWwgdGltZXpvbmUgc2V0dGluZ3Mgd2l0aG91dCBkZXBlbmRlbmN5IG9uXG4gKiB0aGUgdGltZSB6b25lIHNldHRpbmdzIG9mIHRoZSBtYWNoaW5lIHdoZXJlIHRoZSBjb2RlIGlzIHJ1bm5pbmcuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBPZmZzZXQgb2YgdGhlICpkZXNpcmVkKiB0aW1lem9uZSBpbiBob3VycyAoZnJhY3Rpb25zIHdpbGwgYmUgaG9ub3JlZClcbiAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSB0aW1lc3RhbXAgVGltZXN0YW1wIHJlcHJlc2VudGluZyB0aGUgZGVzaXJlZCB0aW1lIGluICpVVEMqXG4gKlxuICogQGV4YW1wbGVcbiAqICEhISEgV0FSTklORyAhISEhIVxuICogVGhpcyBpcyBub3QgYSBjb21wbGV0ZSBEYXRlIG9iamVjdCBzbyBvbmx5IG1ldGhvZHMgdGhhdCB3ZXJlIGltcGxlbWVudGVkIGNhbiBiZSBjYWxsZWQgc2FmZWx5LlxuICogVG8gbWFrZSBtYXR0ZXJzIHdvcnNlLCBUekRhdGUgaW5zdGFuY2VzIGluaGVyaXQgc3R1ZmYgZnJvbSBEYXRlIHZpYSBhIHByb3RvdHlwZS5cbiAqXG4gKiBXZSBkbyBvdXIgYmVzdCB0byBpbnRlcmNlcHQgY2FsbHMgdG8gXCJ1bmltcGxlbWVudGVkXCIgbWV0aG9kcywgYnV0IHNpbmNlIHRoZSBsaXN0IG9mIG1ldGhvZHMgaXNcbiAqIGluY29tcGxldGUgd2UgbWlnaHQgYmUgbWlzc2luZyBzb21lIG5vbi1zdGFuZGFyZCBtZXRob2RzLiBUaGlzIGNhbiByZXN1bHQgaW4gZXJyb3JzIGxpa2U6XG4gKiBcIkRhdGUucHJvdG90eXBlLmZvbyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIE9iamVjdFwiLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgbmV3WWVhckluQnJhdGlzbGF2YSA9IG5ldyBUekRhdGUoLTEsICcyMDA5LTEyLTMxVDIzOjAwOjAwWicpO1xuICogbmV3WWVhckluQnJhdGlzbGF2YS5nZXRUaW1lem9uZU9mZnNldCgpID0+IC02MDtcbiAqIG5ld1llYXJJbkJyYXRpc2xhdmEuZ2V0RnVsbFllYXIoKSA9PiAyMDEwO1xuICogbmV3WWVhckluQnJhdGlzbGF2YS5nZXRNb250aCgpID0+IDA7XG4gKiBuZXdZZWFySW5CcmF0aXNsYXZhLmdldERhdGUoKSA9PiAxO1xuICogbmV3WWVhckluQnJhdGlzbGF2YS5nZXRIb3VycygpID0+IDA7XG4gKiBuZXdZZWFySW5CcmF0aXNsYXZhLmdldE1pbnV0ZXMoKSA9PiAwO1xuICogbmV3WWVhckluQnJhdGlzbGF2YS5nZXRTZWNvbmRzKCkgPT4gMDtcbiAqIGBgYFxuICpcbiAqL1xuYW5ndWxhci5tb2NrLlR6RGF0ZSA9IGZ1bmN0aW9uKG9mZnNldCwgdGltZXN0YW1wKSB7XG4gIHZhciBzZWxmID0gbmV3IERhdGUoMCk7XG4gIGlmIChhbmd1bGFyLmlzU3RyaW5nKHRpbWVzdGFtcCkpIHtcbiAgICB2YXIgdHNTdHIgPSB0aW1lc3RhbXA7XG5cbiAgICBzZWxmLm9yaWdEYXRlID0ganNvblN0cmluZ1RvRGF0ZSh0aW1lc3RhbXApO1xuXG4gICAgdGltZXN0YW1wID0gc2VsZi5vcmlnRGF0ZS5nZXRUaW1lKCk7XG4gICAgaWYgKGlzTmFOKHRpbWVzdGFtcCkpIHtcbiAgICAgIHRocm93IHtcbiAgICAgICAgbmFtZTogXCJJbGxlZ2FsIEFyZ3VtZW50XCIsXG4gICAgICAgIG1lc3NhZ2U6IFwiQXJnICdcIiArIHRzU3RyICsgXCInIHBhc3NlZCBpbnRvIFR6RGF0ZSBjb25zdHJ1Y3RvciBpcyBub3QgYSB2YWxpZCBkYXRlIHN0cmluZ1wiXG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzZWxmLm9yaWdEYXRlID0gbmV3IERhdGUodGltZXN0YW1wKTtcbiAgfVxuXG4gIHZhciBsb2NhbE9mZnNldCA9IG5ldyBEYXRlKHRpbWVzdGFtcCkuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgc2VsZi5vZmZzZXREaWZmID0gbG9jYWxPZmZzZXQgKiA2MCAqIDEwMDAgLSBvZmZzZXQgKiAxMDAwICogNjAgKiA2MDtcbiAgc2VsZi5kYXRlID0gbmV3IERhdGUodGltZXN0YW1wICsgc2VsZi5vZmZzZXREaWZmKTtcblxuICBzZWxmLmdldFRpbWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi5kYXRlLmdldFRpbWUoKSAtIHNlbGYub2Zmc2V0RGlmZjtcbiAgfTtcblxuICBzZWxmLnRvTG9jYWxlRGF0ZVN0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLmRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCk7XG4gIH07XG5cbiAgc2VsZi5nZXRGdWxsWWVhciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLmRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgfTtcblxuICBzZWxmLmdldE1vbnRoID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYuZGF0ZS5nZXRNb250aCgpO1xuICB9O1xuXG4gIHNlbGYuZ2V0RGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLmRhdGUuZ2V0RGF0ZSgpO1xuICB9O1xuXG4gIHNlbGYuZ2V0SG91cnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi5kYXRlLmdldEhvdXJzKCk7XG4gIH07XG5cbiAgc2VsZi5nZXRNaW51dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYuZGF0ZS5nZXRNaW51dGVzKCk7XG4gIH07XG5cbiAgc2VsZi5nZXRTZWNvbmRzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYuZGF0ZS5nZXRTZWNvbmRzKCk7XG4gIH07XG5cbiAgc2VsZi5nZXRNaWxsaXNlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi5kYXRlLmdldE1pbGxpc2Vjb25kcygpO1xuICB9O1xuXG4gIHNlbGYuZ2V0VGltZXpvbmVPZmZzZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb2Zmc2V0ICogNjA7XG4gIH07XG5cbiAgc2VsZi5nZXRVVENGdWxsWWVhciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLm9yaWdEYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIH07XG5cbiAgc2VsZi5nZXRVVENNb250aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLm9yaWdEYXRlLmdldFVUQ01vbnRoKCk7XG4gIH07XG5cbiAgc2VsZi5nZXRVVENEYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYub3JpZ0RhdGUuZ2V0VVRDRGF0ZSgpO1xuICB9O1xuXG4gIHNlbGYuZ2V0VVRDSG91cnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi5vcmlnRGF0ZS5nZXRVVENIb3VycygpO1xuICB9O1xuXG4gIHNlbGYuZ2V0VVRDTWludXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLm9yaWdEYXRlLmdldFVUQ01pbnV0ZXMoKTtcbiAgfTtcblxuICBzZWxmLmdldFVUQ1NlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi5vcmlnRGF0ZS5nZXRVVENTZWNvbmRzKCk7XG4gIH07XG5cbiAgc2VsZi5nZXRVVENNaWxsaXNlY29uZHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi5vcmlnRGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgfTtcblxuICBzZWxmLmdldERheSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLmRhdGUuZ2V0RGF5KCk7XG4gIH07XG5cbiAgLy8gcHJvdmlkZSB0aGlzIG1ldGhvZCBvbmx5IG9uIGJyb3dzZXJzIHRoYXQgYWxyZWFkeSBoYXZlIGl0XG4gIGlmIChzZWxmLnRvSVNPU3RyaW5nKSB7XG4gICAgc2VsZi50b0lTT1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHBhZE51bWJlcihzZWxmLm9yaWdEYXRlLmdldFVUQ0Z1bGxZZWFyKCksIDQpICsgJy0nICtcbiAgICAgICAgICAgIHBhZE51bWJlcihzZWxmLm9yaWdEYXRlLmdldFVUQ01vbnRoKCkgKyAxLCAyKSArICctJyArXG4gICAgICAgICAgICBwYWROdW1iZXIoc2VsZi5vcmlnRGF0ZS5nZXRVVENEYXRlKCksIDIpICsgJ1QnICtcbiAgICAgICAgICAgIHBhZE51bWJlcihzZWxmLm9yaWdEYXRlLmdldFVUQ0hvdXJzKCksIDIpICsgJzonICtcbiAgICAgICAgICAgIHBhZE51bWJlcihzZWxmLm9yaWdEYXRlLmdldFVUQ01pbnV0ZXMoKSwgMikgKyAnOicgK1xuICAgICAgICAgICAgcGFkTnVtYmVyKHNlbGYub3JpZ0RhdGUuZ2V0VVRDU2Vjb25kcygpLCAyKSArICcuJyArXG4gICAgICAgICAgICBwYWROdW1iZXIoc2VsZi5vcmlnRGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKSwgMykgKyAnWic7XG4gICAgfTtcbiAgfVxuXG4gIC8vaGlkZSBhbGwgbWV0aG9kcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBtb2NrIHRoYXQgdGhlIERhdGUgcHJvdG90eXBlIGV4cG9zZXNcbiAgdmFyIHVuaW1wbGVtZW50ZWRNZXRob2RzID0gWydnZXRVVENEYXknLFxuICAgICAgJ2dldFllYXInLCAnc2V0RGF0ZScsICdzZXRGdWxsWWVhcicsICdzZXRIb3VycycsICdzZXRNaWxsaXNlY29uZHMnLFxuICAgICAgJ3NldE1pbnV0ZXMnLCAnc2V0TW9udGgnLCAnc2V0U2Vjb25kcycsICdzZXRUaW1lJywgJ3NldFVUQ0RhdGUnLCAnc2V0VVRDRnVsbFllYXInLFxuICAgICAgJ3NldFVUQ0hvdXJzJywgJ3NldFVUQ01pbGxpc2Vjb25kcycsICdzZXRVVENNaW51dGVzJywgJ3NldFVUQ01vbnRoJywgJ3NldFVUQ1NlY29uZHMnLFxuICAgICAgJ3NldFllYXInLCAndG9EYXRlU3RyaW5nJywgJ3RvR01UU3RyaW5nJywgJ3RvSlNPTicsICd0b0xvY2FsZUZvcm1hdCcsICd0b0xvY2FsZVN0cmluZycsXG4gICAgICAndG9Mb2NhbGVUaW1lU3RyaW5nJywgJ3RvU291cmNlJywgJ3RvU3RyaW5nJywgJ3RvVGltZVN0cmluZycsICd0b1VUQ1N0cmluZycsICd2YWx1ZU9mJ107XG5cbiAgYW5ndWxhci5mb3JFYWNoKHVuaW1wbGVtZW50ZWRNZXRob2RzLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgc2VsZlttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kICdcIiArIG1ldGhvZE5hbWUgKyBcIicgaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBUekRhdGUgbW9ja1wiKTtcbiAgICB9O1xuICB9KTtcblxuICByZXR1cm4gc2VsZjtcbn07XG5cbi8vbWFrZSBcInR6RGF0ZUluc3RhbmNlIGluc3RhbmNlb2YgRGF0ZVwiIHJldHVybiB0cnVlXG5hbmd1bGFyLm1vY2suVHpEYXRlLnByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xuLyoganNoaW50ICtXMTAxICovXG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGFuaW1hdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE1vY2sgaW1wbGVtZW50YXRpb24gb2YgdGhlIHtAbGluayBuZy4kYW5pbWF0ZSBgJGFuaW1hdGVgfSBzZXJ2aWNlLiBFeHBvc2VzIHR3byBhZGRpdGlvbmFsIG1ldGhvZHNcbiAqIGZvciB0ZXN0aW5nIGFuaW1hdGlvbnMuXG4gKi9cbmFuZ3VsYXIubW9jay5hbmltYXRlID0gYW5ndWxhci5tb2R1bGUoJ25nQW5pbWF0ZU1vY2snLCBbJ25nJ10pXG5cbiAgLmNvbmZpZyhbJyRwcm92aWRlJywgZnVuY3Rpb24oJHByb3ZpZGUpIHtcblxuICAgICRwcm92aWRlLmZhY3RvcnkoJyQkZm9yY2VSZWZsb3cnLCBmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIHJlZmxvd0ZuKCkge1xuICAgICAgICByZWZsb3dGbi50b3RhbFJlZmxvd3MrKztcbiAgICAgIH1cbiAgICAgIHJlZmxvd0ZuLnRvdGFsUmVmbG93cyA9IDA7XG4gICAgICByZXR1cm4gcmVmbG93Rm47XG4gICAgfSk7XG5cbiAgICAkcHJvdmlkZS5mYWN0b3J5KCckJGFuaW1hdGVBc3luY1J1bicsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHF1ZXVlID0gW107XG4gICAgICB2YXIgcXVldWVGbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICBxdWV1ZUZuLmZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgcXVldWVbaV0oKTtcbiAgICAgICAgfVxuICAgICAgICBxdWV1ZSA9IFtdO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBxdWV1ZUZuO1xuICAgIH0pO1xuXG4gICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckJGFuaW1hdGVKcycsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24oJGRlbGVnYXRlKSB7XG4gICAgICB2YXIgcnVubmVycyA9IFtdO1xuXG4gICAgICB2YXIgYW5pbWF0ZUpzQ29uc3RydWN0b3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFuaW1hdG9yID0gJGRlbGVnYXRlLmFwcGx5KCRkZWxlZ2F0ZSwgYXJndW1lbnRzKTtcbiAgICAgICAgLy8gSWYgbm8gamF2YXNjcmlwdCBhbmltYXRpb24gaXMgZm91bmQsIGFuaW1hdG9yIGlzIHVuZGVmaW5lZFxuICAgICAgICBpZiAoYW5pbWF0b3IpIHtcbiAgICAgICAgICBydW5uZXJzLnB1c2goYW5pbWF0b3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRvcjtcbiAgICAgIH07XG5cbiAgICAgIGFuaW1hdGVKc0NvbnN0cnVjdG9yLiRjbG9zZUFuZEZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJ1bm5lcnMuZm9yRWFjaChmdW5jdGlvbihydW5uZXIpIHtcbiAgICAgICAgICBydW5uZXIuZW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBydW5uZXJzID0gW107XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gYW5pbWF0ZUpzQ29uc3RydWN0b3I7XG4gICAgfV0pO1xuXG4gICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckYW5pbWF0ZUNzcycsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24oJGRlbGVnYXRlKSB7XG4gICAgICB2YXIgcnVubmVycyA9IFtdO1xuXG4gICAgICB2YXIgYW5pbWF0ZUNzc0NvbnN0cnVjdG9yID0gZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgYW5pbWF0b3IgPSAkZGVsZWdhdGUoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIHJ1bm5lcnMucHVzaChhbmltYXRvcik7XG4gICAgICAgIHJldHVybiBhbmltYXRvcjtcbiAgICAgIH07XG5cbiAgICAgIGFuaW1hdGVDc3NDb25zdHJ1Y3Rvci4kY2xvc2VBbmRGbHVzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBydW5uZXJzLmZvckVhY2goZnVuY3Rpb24ocnVubmVyKSB7XG4gICAgICAgICAgcnVubmVyLmVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcnVubmVycyA9IFtdO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGFuaW1hdGVDc3NDb25zdHJ1Y3RvcjtcbiAgICB9XSk7XG5cbiAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRhbmltYXRlJywgWyckZGVsZWdhdGUnLCAnJHRpbWVvdXQnLCAnJGJyb3dzZXInLCAnJCRyQUYnLCAnJGFuaW1hdGVDc3MnLCAnJCRhbmltYXRlSnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyQkZm9yY2VSZWZsb3cnLCAnJCRhbmltYXRlQXN5bmNSdW4nLCAnJHJvb3RTY29wZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGRlbGVnYXRlLCAgICR0aW1lb3V0LCAgICRicm93c2VyLCAgICQkckFGLCAgICRhbmltYXRlQ3NzLCAgICQkYW5pbWF0ZUpzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQkZm9yY2VSZWZsb3csICAgJCRhbmltYXRlQXN5bmNSdW4sICAkcm9vdFNjb3BlKSB7XG4gICAgICB2YXIgYW5pbWF0ZSA9IHtcbiAgICAgICAgcXVldWU6IFtdLFxuICAgICAgICBjYW5jZWw6ICRkZWxlZ2F0ZS5jYW5jZWwsXG4gICAgICAgIG9uOiAkZGVsZWdhdGUub24sXG4gICAgICAgIG9mZjogJGRlbGVnYXRlLm9mZixcbiAgICAgICAgcGluOiAkZGVsZWdhdGUucGluLFxuICAgICAgICBnZXQgcmVmbG93cygpIHtcbiAgICAgICAgICByZXR1cm4gJCRmb3JjZVJlZmxvdy50b3RhbFJlZmxvd3M7XG4gICAgICAgIH0sXG4gICAgICAgIGVuYWJsZWQ6ICRkZWxlZ2F0ZS5lbmFibGVkLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNjbG9zZUFuZEZsdXNoXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIGNsb3NlIGFsbCBwZW5kaW5nIGFuaW1hdGlvbnMgKGJvdGgge0BsaW5rIG5nQW5pbWF0ZSNqYXZhc2NyaXB0LWJhc2VkLWFuaW1hdGlvbnMgSmF2YXNjcmlwdH1cbiAgICAgICAgICogYW5kIHtAbGluayBuZ0FuaW1hdGUuJGFuaW1hdGVDc3MgQ1NTfSkgYW5kIGl0IHdpbGwgYWxzbyBmbHVzaCBhbnkgcmVtYWluaW5nIGFuaW1hdGlvbiBmcmFtZXMgYW5kL29yIGNhbGxiYWNrcy5cbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlQW5kRmx1c2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIHdlIGFsbG93IHRoZSBmbHVzaCBjb21tYW5kIHRvIHN3YWxsb3cgdGhlIGVycm9yc1xuICAgICAgICAgIC8vIGJlY2F1c2UgZGVwZW5kaW5nIG9uIHdoZXRoZXIgQ1NTIG9yIEpTIGFuaW1hdGlvbnMgYXJlXG4gICAgICAgICAgLy8gdXNlZCwgdGhlcmUgbWF5IG5vdCBiZSBhIFJBRiBmbHVzaC4gVGhlIHByaW1hcnkgZmx1c2hcbiAgICAgICAgICAvLyBhdCB0aGUgZW5kIG9mIHRoaXMgZnVuY3Rpb24gbXVzdCB0aHJvdyBhbiBleGNlcHRpb25cbiAgICAgICAgICAvLyBiZWNhdXNlIGl0IHdpbGwgdHJhY2sgaWYgdGhlcmUgd2VyZSBwZW5kaW5nIGFuaW1hdGlvbnNcbiAgICAgICAgICB0aGlzLmZsdXNoKHRydWUpO1xuICAgICAgICAgICRhbmltYXRlQ3NzLiRjbG9zZUFuZEZsdXNoKCk7XG4gICAgICAgICAgJCRhbmltYXRlSnMuJGNsb3NlQW5kRmx1c2goKTtcbiAgICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRhbmltYXRlI2ZsdXNoXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIGZsdXNoIHRoZSBwZW5kaW5nIGNhbGxiYWNrcyBhbmQgYW5pbWF0aW9uIGZyYW1lcyB0byBlaXRoZXIgc3RhcnRcbiAgICAgICAgICogYW4gYW5pbWF0aW9uIG9yIGNvbmNsdWRlIGFuIGFuaW1hdGlvbi4gTm90ZSB0aGF0IHRoaXMgd2lsbCBub3QgYWN0dWFsbHkgY2xvc2UgYW5cbiAgICAgICAgICogYWN0aXZlbHkgcnVubmluZyBhbmltYXRpb24gKHNlZSB7QGxpbmsgbmdNb2NrLiRhbmltYXRlI2Nsb3NlQW5kRmx1c2ggYGNsb3NlQW5kRmx1c2goKWB9IGZvciB0aGF0KS5cbiAgICAgICAgICovXG4gICAgICAgIGZsdXNoOiBmdW5jdGlvbihoaWRlRXJyb3JzKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG5cbiAgICAgICAgICB2YXIgZG9OZXh0UnVuLCBzb21ldGhpbmdGbHVzaGVkID0gZmFsc2U7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgZG9OZXh0UnVuID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmICgkJHJBRi5xdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgJCRyQUYuZmx1c2goKTtcbiAgICAgICAgICAgICAgZG9OZXh0UnVuID0gc29tZXRoaW5nRmx1c2hlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkJGFuaW1hdGVBc3luY1J1bi5mbHVzaCgpKSB7XG4gICAgICAgICAgICAgIGRvTmV4dFJ1biA9IHNvbWV0aGluZ0ZsdXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gd2hpbGUgKGRvTmV4dFJ1bik7XG5cbiAgICAgICAgICBpZiAoIXNvbWV0aGluZ0ZsdXNoZWQgJiYgIWhpZGVFcnJvcnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcGVuZGluZyBhbmltYXRpb25zIHJlYWR5IHRvIGJlIGNsb3NlZCBvciBmbHVzaGVkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChcbiAgICAgICAgWydhbmltYXRlJywnZW50ZXInLCdsZWF2ZScsJ21vdmUnLCdhZGRDbGFzcycsJ3JlbW92ZUNsYXNzJywnc2V0Q2xhc3MnXSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICAgIGFuaW1hdGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGFuaW1hdGUucXVldWUucHVzaCh7XG4gICAgICAgICAgICBldmVudDogbWV0aG9kLFxuICAgICAgICAgICAgZWxlbWVudDogYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgb3B0aW9uczogYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSxcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3VtZW50c1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiAkZGVsZWdhdGVbbWV0aG9kXS5hcHBseSgkZGVsZWdhdGUsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGFuaW1hdGU7XG4gICAgfV0pO1xuXG4gIH1dKTtcblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5tb2NrLmR1bXBcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqICpOT1RFKjogdGhpcyBpcyBub3QgYW4gaW5qZWN0YWJsZSBpbnN0YW5jZSwganVzdCBhIGdsb2JhbGx5IGF2YWlsYWJsZSBmdW5jdGlvbi5cbiAqXG4gKiBNZXRob2QgZm9yIHNlcmlhbGl6aW5nIGNvbW1vbiBhbmd1bGFyIG9iamVjdHMgKHNjb3BlLCBlbGVtZW50cywgZXRjLi4pIGludG8gc3RyaW5ncywgdXNlZnVsIGZvclxuICogZGVidWdnaW5nLlxuICpcbiAqIFRoaXMgbWV0aG9kIGlzIGFsc28gYXZhaWxhYmxlIG9uIHdpbmRvdywgd2hlcmUgaXQgY2FuIGJlIHVzZWQgdG8gZGlzcGxheSBvYmplY3RzIG9uIGRlYnVnXG4gKiBjb25zb2xlLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IC0gYW55IG9iamVjdCB0byB0dXJuIGludG8gc3RyaW5nLlxuICogQHJldHVybiB7c3RyaW5nfSBhIHNlcmlhbGl6ZWQgc3RyaW5nIG9mIHRoZSBhcmd1bWVudFxuICovXG5hbmd1bGFyLm1vY2suZHVtcCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICByZXR1cm4gc2VyaWFsaXplKG9iamVjdCk7XG5cbiAgZnVuY3Rpb24gc2VyaWFsaXplKG9iamVjdCkge1xuICAgIHZhciBvdXQ7XG5cbiAgICBpZiAoYW5ndWxhci5pc0VsZW1lbnQob2JqZWN0KSkge1xuICAgICAgb2JqZWN0ID0gYW5ndWxhci5lbGVtZW50KG9iamVjdCk7XG4gICAgICBvdXQgPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXY+PC9kaXY+Jyk7XG4gICAgICBhbmd1bGFyLmZvckVhY2gob2JqZWN0LCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIG91dC5hcHBlbmQoYW5ndWxhci5lbGVtZW50KGVsZW1lbnQpLmNsb25lKCkpO1xuICAgICAgfSk7XG4gICAgICBvdXQgPSBvdXQuaHRtbCgpO1xuICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgIG91dCA9IFtdO1xuICAgICAgYW5ndWxhci5mb3JFYWNoKG9iamVjdCwgZnVuY3Rpb24obykge1xuICAgICAgICBvdXQucHVzaChzZXJpYWxpemUobykpO1xuICAgICAgfSk7XG4gICAgICBvdXQgPSAnWyAnICsgb3V0LmpvaW4oJywgJykgKyAnIF0nO1xuICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc09iamVjdChvYmplY3QpKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKG9iamVjdC4kZXZhbCkgJiYgYW5ndWxhci5pc0Z1bmN0aW9uKG9iamVjdC4kYXBwbHkpKSB7XG4gICAgICAgIG91dCA9IHNlcmlhbGl6ZVNjb3BlKG9iamVjdCk7XG4gICAgICB9IGVsc2UgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIG91dCA9IG9iamVjdC5zdGFjayB8fCAoJycgKyBvYmplY3QubmFtZSArICc6ICcgKyBvYmplY3QubWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPKGkpOiB0aGlzIHByZXZlbnRzIG1ldGhvZHMgYmVpbmcgbG9nZ2VkLFxuICAgICAgICAvLyB3ZSBzaG91bGQgaGF2ZSBhIGJldHRlciB3YXkgdG8gc2VyaWFsaXplIG9iamVjdHNcbiAgICAgICAgb3V0ID0gYW5ndWxhci50b0pzb24ob2JqZWN0LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gU3RyaW5nKG9iamVjdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcmlhbGl6ZVNjb3BlKHNjb3BlLCBvZmZzZXQpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgICcgICc7XG4gICAgdmFyIGxvZyA9IFtvZmZzZXQgKyAnU2NvcGUoJyArIHNjb3BlLiRpZCArICcpOiB7J107XG4gICAgZm9yICh2YXIga2V5IGluIHNjb3BlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNjb3BlLCBrZXkpICYmICFrZXkubWF0Y2goL14oXFwkfHRoaXMpLykpIHtcbiAgICAgICAgbG9nLnB1c2goJyAgJyArIGtleSArICc6ICcgKyBhbmd1bGFyLnRvSnNvbihzY29wZVtrZXldKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjaGlsZCA9IHNjb3BlLiQkY2hpbGRIZWFkO1xuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbG9nLnB1c2goc2VyaWFsaXplU2NvcGUoY2hpbGQsIG9mZnNldCArICcgICcpKTtcbiAgICAgIGNoaWxkID0gY2hpbGQuJCRuZXh0U2libGluZztcbiAgICB9XG4gICAgbG9nLnB1c2goJ30nKTtcbiAgICByZXR1cm4gbG9nLmpvaW4oJ1xcbicgKyBvZmZzZXQpO1xuICB9XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkaHR0cEJhY2tlbmRcbiAqIEBkZXNjcmlwdGlvblxuICogRmFrZSBIVFRQIGJhY2tlbmQgaW1wbGVtZW50YXRpb24gc3VpdGFibGUgZm9yIHVuaXQgdGVzdGluZyBhcHBsaWNhdGlvbnMgdGhhdCB1c2UgdGhlXG4gKiB7QGxpbmsgbmcuJGh0dHAgJGh0dHAgc2VydmljZX0uXG4gKlxuICogKk5vdGUqOiBGb3IgZmFrZSBIVFRQIGJhY2tlbmQgaW1wbGVtZW50YXRpb24gc3VpdGFibGUgZm9yIGVuZC10by1lbmQgdGVzdGluZyBvciBiYWNrZW5kLWxlc3NcbiAqIGRldmVsb3BtZW50IHBsZWFzZSBzZWUge0BsaW5rIG5nTW9ja0UyRS4kaHR0cEJhY2tlbmQgZTJlICRodHRwQmFja2VuZCBtb2NrfS5cbiAqXG4gKiBEdXJpbmcgdW5pdCB0ZXN0aW5nLCB3ZSB3YW50IG91ciB1bml0IHRlc3RzIHRvIHJ1biBxdWlja2x5IGFuZCBoYXZlIG5vIGV4dGVybmFsIGRlcGVuZGVuY2llcyBzb1xuICogd2UgZG9u4oCZdCB3YW50IHRvIHNlbmQgW1hIUl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4veG1saHR0cHJlcXVlc3QpIG9yXG4gKiBbSlNPTlBdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlApIHJlcXVlc3RzIHRvIGEgcmVhbCBzZXJ2ZXIuIEFsbCB3ZSByZWFsbHkgbmVlZCBpc1xuICogdG8gdmVyaWZ5IHdoZXRoZXIgYSBjZXJ0YWluIHJlcXVlc3QgaGFzIGJlZW4gc2VudCBvciBub3QsIG9yIGFsdGVybmF0aXZlbHkganVzdCBsZXQgdGhlXG4gKiBhcHBsaWNhdGlvbiBtYWtlIHJlcXVlc3RzLCByZXNwb25kIHdpdGggcHJlLXRyYWluZWQgcmVzcG9uc2VzIGFuZCBhc3NlcnQgdGhhdCB0aGUgZW5kIHJlc3VsdCBpc1xuICogd2hhdCB3ZSBleHBlY3QgaXQgdG8gYmUuXG4gKlxuICogVGhpcyBtb2NrIGltcGxlbWVudGF0aW9uIGNhbiBiZSB1c2VkIHRvIHJlc3BvbmQgd2l0aCBzdGF0aWMgb3IgZHluYW1pYyByZXNwb25zZXMgdmlhIHRoZVxuICogYGV4cGVjdGAgYW5kIGB3aGVuYCBhcGlzIGFuZCB0aGVpciBzaG9ydGN1dHMgKGBleHBlY3RHRVRgLCBgd2hlblBPU1RgLCBldGMpLlxuICpcbiAqIFdoZW4gYW4gQW5ndWxhciBhcHBsaWNhdGlvbiBuZWVkcyBzb21lIGRhdGEgZnJvbSBhIHNlcnZlciwgaXQgY2FsbHMgdGhlICRodHRwIHNlcnZpY2UsIHdoaWNoXG4gKiBzZW5kcyB0aGUgcmVxdWVzdCB0byBhIHJlYWwgc2VydmVyIHVzaW5nICRodHRwQmFja2VuZCBzZXJ2aWNlLiBXaXRoIGRlcGVuZGVuY3kgaW5qZWN0aW9uLCBpdCBpc1xuICogZWFzeSB0byBpbmplY3QgJGh0dHBCYWNrZW5kIG1vY2sgKHdoaWNoIGhhcyB0aGUgc2FtZSBBUEkgYXMgJGh0dHBCYWNrZW5kKSBhbmQgdXNlIGl0IHRvIHZlcmlmeVxuICogdGhlIHJlcXVlc3RzIGFuZCByZXNwb25kIHdpdGggc29tZSB0ZXN0aW5nIGRhdGEgd2l0aG91dCBzZW5kaW5nIGEgcmVxdWVzdCB0byBhIHJlYWwgc2VydmVyLlxuICpcbiAqIFRoZXJlIGFyZSB0d28gd2F5cyB0byBzcGVjaWZ5IHdoYXQgdGVzdCBkYXRhIHNob3VsZCBiZSByZXR1cm5lZCBhcyBodHRwIHJlc3BvbnNlcyBieSB0aGUgbW9ja1xuICogYmFja2VuZCB3aGVuIHRoZSBjb2RlIHVuZGVyIHRlc3QgbWFrZXMgaHR0cCByZXF1ZXN0czpcbiAqXG4gKiAtIGAkaHR0cEJhY2tlbmQuZXhwZWN0YCAtIHNwZWNpZmllcyBhIHJlcXVlc3QgZXhwZWN0YXRpb25cbiAqIC0gYCRodHRwQmFja2VuZC53aGVuYCAtIHNwZWNpZmllcyBhIGJhY2tlbmQgZGVmaW5pdGlvblxuICpcbiAqXG4gKiAjIFJlcXVlc3QgRXhwZWN0YXRpb25zIHZzIEJhY2tlbmQgRGVmaW5pdGlvbnNcbiAqXG4gKiBSZXF1ZXN0IGV4cGVjdGF0aW9ucyBwcm92aWRlIGEgd2F5IHRvIG1ha2UgYXNzZXJ0aW9ucyBhYm91dCByZXF1ZXN0cyBtYWRlIGJ5IHRoZSBhcHBsaWNhdGlvbiBhbmRcbiAqIHRvIGRlZmluZSByZXNwb25zZXMgZm9yIHRob3NlIHJlcXVlc3RzLiBUaGUgdGVzdCB3aWxsIGZhaWwgaWYgdGhlIGV4cGVjdGVkIHJlcXVlc3RzIGFyZSBub3QgbWFkZVxuICogb3IgdGhleSBhcmUgbWFkZSBpbiB0aGUgd3Jvbmcgb3JkZXIuXG4gKlxuICogQmFja2VuZCBkZWZpbml0aW9ucyBhbGxvdyB5b3UgdG8gZGVmaW5lIGEgZmFrZSBiYWNrZW5kIGZvciB5b3VyIGFwcGxpY2F0aW9uIHdoaWNoIGRvZXNuJ3QgYXNzZXJ0XG4gKiBpZiBhIHBhcnRpY3VsYXIgcmVxdWVzdCB3YXMgbWFkZSBvciBub3QsIGl0IGp1c3QgcmV0dXJucyBhIHRyYWluZWQgcmVzcG9uc2UgaWYgYSByZXF1ZXN0IGlzIG1hZGUuXG4gKiBUaGUgdGVzdCB3aWxsIHBhc3Mgd2hldGhlciBvciBub3QgdGhlIHJlcXVlc3QgZ2V0cyBtYWRlIGR1cmluZyB0ZXN0aW5nLlxuICpcbiAqXG4gKiA8dGFibGUgY2xhc3M9XCJ0YWJsZVwiPlxuICogICA8dHI+PHRoIHdpZHRoPVwiMjIwcHhcIj48L3RoPjx0aD5SZXF1ZXN0IGV4cGVjdGF0aW9uczwvdGg+PHRoPkJhY2tlbmQgZGVmaW5pdGlvbnM8L3RoPjwvdHI+XG4gKiAgIDx0cj5cbiAqICAgICA8dGg+U3ludGF4PC90aD5cbiAqICAgICA8dGQ+LmV4cGVjdCguLi4pLnJlc3BvbmQoLi4uKTwvdGQ+XG4gKiAgICAgPHRkPi53aGVuKC4uLikucmVzcG9uZCguLi4pPC90ZD5cbiAqICAgPC90cj5cbiAqICAgPHRyPlxuICogICAgIDx0aD5UeXBpY2FsIHVzYWdlPC90aD5cbiAqICAgICA8dGQ+c3RyaWN0IHVuaXQgdGVzdHM8L3RkPlxuICogICAgIDx0ZD5sb29zZSAoYmxhY2stYm94KSB1bml0IHRlc3Rpbmc8L3RkPlxuICogICA8L3RyPlxuICogICA8dHI+XG4gKiAgICAgPHRoPkZ1bGZpbGxzIG11bHRpcGxlIHJlcXVlc3RzPC90aD5cbiAqICAgICA8dGQ+Tk88L3RkPlxuICogICAgIDx0ZD5ZRVM8L3RkPlxuICogICA8L3RyPlxuICogICA8dHI+XG4gKiAgICAgPHRoPk9yZGVyIG9mIHJlcXVlc3RzIG1hdHRlcnM8L3RoPlxuICogICAgIDx0ZD5ZRVM8L3RkPlxuICogICAgIDx0ZD5OTzwvdGQ+XG4gKiAgIDwvdHI+XG4gKiAgIDx0cj5cbiAqICAgICA8dGg+UmVxdWVzdCByZXF1aXJlZDwvdGg+XG4gKiAgICAgPHRkPllFUzwvdGQ+XG4gKiAgICAgPHRkPk5PPC90ZD5cbiAqICAgPC90cj5cbiAqICAgPHRyPlxuICogICAgIDx0aD5SZXNwb25zZSByZXF1aXJlZDwvdGg+XG4gKiAgICAgPHRkPm9wdGlvbmFsIChzZWUgYmVsb3cpPC90ZD5cbiAqICAgICA8dGQ+WUVTPC90ZD5cbiAqICAgPC90cj5cbiAqIDwvdGFibGU+XG4gKlxuICogSW4gY2FzZXMgd2hlcmUgYm90aCBiYWNrZW5kIGRlZmluaXRpb25zIGFuZCByZXF1ZXN0IGV4cGVjdGF0aW9ucyBhcmUgc3BlY2lmaWVkIGR1cmluZyB1bml0XG4gKiB0ZXN0aW5nLCB0aGUgcmVxdWVzdCBleHBlY3RhdGlvbnMgYXJlIGV2YWx1YXRlZCBmaXJzdC5cbiAqXG4gKiBJZiBhIHJlcXVlc3QgZXhwZWN0YXRpb24gaGFzIG5vIHJlc3BvbnNlIHNwZWNpZmllZCwgdGhlIGFsZ29yaXRobSB3aWxsIHNlYXJjaCB5b3VyIGJhY2tlbmRcbiAqIGRlZmluaXRpb25zIGZvciBhbiBhcHByb3ByaWF0ZSByZXNwb25zZS5cbiAqXG4gKiBJZiBhIHJlcXVlc3QgZGlkbid0IG1hdGNoIGFueSBleHBlY3RhdGlvbiBvciBpZiB0aGUgZXhwZWN0YXRpb24gZG9lc24ndCBoYXZlIHRoZSByZXNwb25zZVxuICogZGVmaW5lZCwgdGhlIGJhY2tlbmQgZGVmaW5pdGlvbnMgYXJlIGV2YWx1YXRlZCBpbiBzZXF1ZW50aWFsIG9yZGVyIHRvIHNlZSBpZiBhbnkgb2YgdGhlbSBtYXRjaFxuICogdGhlIHJlcXVlc3QuIFRoZSByZXNwb25zZSBmcm9tIHRoZSBmaXJzdCBtYXRjaGVkIGRlZmluaXRpb24gaXMgcmV0dXJuZWQuXG4gKlxuICpcbiAqICMgRmx1c2hpbmcgSFRUUCByZXF1ZXN0c1xuICpcbiAqIFRoZSAkaHR0cEJhY2tlbmQgdXNlZCBpbiBwcm9kdWN0aW9uIGFsd2F5cyByZXNwb25kcyB0byByZXF1ZXN0cyBhc3luY2hyb25vdXNseS4gSWYgd2UgcHJlc2VydmVkXG4gKiB0aGlzIGJlaGF2aW9yIGluIHVuaXQgdGVzdGluZywgd2UnZCBoYXZlIHRvIGNyZWF0ZSBhc3luYyB1bml0IHRlc3RzLCB3aGljaCBhcmUgaGFyZCB0byB3cml0ZSxcbiAqIHRvIGZvbGxvdyBhbmQgdG8gbWFpbnRhaW4uIEJ1dCBuZWl0aGVyIGNhbiB0aGUgdGVzdGluZyBtb2NrIHJlc3BvbmQgc3luY2hyb25vdXNseTsgdGhhdCB3b3VsZFxuICogY2hhbmdlIHRoZSBleGVjdXRpb24gb2YgdGhlIGNvZGUgdW5kZXIgdGVzdC4gRm9yIHRoaXMgcmVhc29uLCB0aGUgbW9jayAkaHR0cEJhY2tlbmQgaGFzIGFcbiAqIGBmbHVzaCgpYCBtZXRob2QsIHdoaWNoIGFsbG93cyB0aGUgdGVzdCB0byBleHBsaWNpdGx5IGZsdXNoIHBlbmRpbmcgcmVxdWVzdHMuIFRoaXMgcHJlc2VydmVzXG4gKiB0aGUgYXN5bmMgYXBpIG9mIHRoZSBiYWNrZW5kLCB3aGlsZSBhbGxvd2luZyB0aGUgdGVzdCB0byBleGVjdXRlIHN5bmNocm9ub3VzbHkuXG4gKlxuICpcbiAqICMgVW5pdCB0ZXN0aW5nIHdpdGggbW9jayAkaHR0cEJhY2tlbmRcbiAqIFRoZSBmb2xsb3dpbmcgY29kZSBzaG93cyBob3cgdG8gc2V0dXAgYW5kIHVzZSB0aGUgbW9jayBiYWNrZW5kIHdoZW4gdW5pdCB0ZXN0aW5nIGEgY29udHJvbGxlci5cbiAqIEZpcnN0IHdlIGNyZWF0ZSB0aGUgY29udHJvbGxlciB1bmRlciB0ZXN0OlxuICpcbiAgYGBganNcbiAgLy8gVGhlIG1vZHVsZSBjb2RlXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdNeUFwcCcsIFtdKVxuICAgIC5jb250cm9sbGVyKCdNeUNvbnRyb2xsZXInLCBNeUNvbnRyb2xsZXIpO1xuXG4gIC8vIFRoZSBjb250cm9sbGVyIGNvZGVcbiAgZnVuY3Rpb24gTXlDb250cm9sbGVyKCRzY29wZSwgJGh0dHApIHtcbiAgICB2YXIgYXV0aFRva2VuO1xuXG4gICAgJGh0dHAuZ2V0KCcvYXV0aC5weScpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICBhdXRoVG9rZW4gPSBoZWFkZXJzKCdBLVRva2VuJyk7XG4gICAgICAkc2NvcGUudXNlciA9IGRhdGE7XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuc2F2ZU1lc3NhZ2UgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICB2YXIgaGVhZGVycyA9IHsgJ0F1dGhvcml6YXRpb24nOiBhdXRoVG9rZW4gfTtcbiAgICAgICRzY29wZS5zdGF0dXMgPSAnU2F2aW5nLi4uJztcblxuICAgICAgJGh0dHAucG9zdCgnL2FkZC1tc2cucHknLCBtZXNzYWdlLCB7IGhlYWRlcnM6IGhlYWRlcnMgfSApLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICcnO1xuICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5zdGF0dXMgPSAnRmFpbGVkLi4uJztcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbiAgYGBgXG4gKlxuICogTm93IHdlIHNldHVwIHRoZSBtb2NrIGJhY2tlbmQgYW5kIGNyZWF0ZSB0aGUgdGVzdCBzcGVjczpcbiAqXG4gIGBgYGpzXG4gICAgLy8gdGVzdGluZyBjb250cm9sbGVyXG4gICAgZGVzY3JpYmUoJ015Q29udHJvbGxlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgIHZhciAkaHR0cEJhY2tlbmQsICRyb290U2NvcGUsIGNyZWF0ZUNvbnRyb2xsZXIsIGF1dGhSZXF1ZXN0SGFuZGxlcjtcblxuICAgICAgIC8vIFNldCB1cCB0aGUgbW9kdWxlXG4gICAgICAgYmVmb3JlRWFjaChtb2R1bGUoJ015QXBwJykpO1xuXG4gICAgICAgYmVmb3JlRWFjaChpbmplY3QoZnVuY3Rpb24oJGluamVjdG9yKSB7XG4gICAgICAgICAvLyBTZXQgdXAgdGhlIG1vY2sgaHR0cCBzZXJ2aWNlIHJlc3BvbnNlc1xuICAgICAgICAgJGh0dHBCYWNrZW5kID0gJGluamVjdG9yLmdldCgnJGh0dHBCYWNrZW5kJyk7XG4gICAgICAgICAvLyBiYWNrZW5kIGRlZmluaXRpb24gY29tbW9uIGZvciBhbGwgdGVzdHNcbiAgICAgICAgIGF1dGhSZXF1ZXN0SGFuZGxlciA9ICRodHRwQmFja2VuZC53aGVuKCdHRVQnLCAnL2F1dGgucHknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVzcG9uZCh7dXNlcklkOiAndXNlclgnfSwgeydBLVRva2VuJzogJ3h4eCd9KTtcblxuICAgICAgICAgLy8gR2V0IGhvbGQgb2YgYSBzY29wZSAoaS5lLiB0aGUgcm9vdCBzY29wZSlcbiAgICAgICAgICRyb290U2NvcGUgPSAkaW5qZWN0b3IuZ2V0KCckcm9vdFNjb3BlJyk7XG4gICAgICAgICAvLyBUaGUgJGNvbnRyb2xsZXIgc2VydmljZSBpcyB1c2VkIHRvIGNyZWF0ZSBpbnN0YW5jZXMgb2YgY29udHJvbGxlcnNcbiAgICAgICAgIHZhciAkY29udHJvbGxlciA9ICRpbmplY3Rvci5nZXQoJyRjb250cm9sbGVyJyk7XG5cbiAgICAgICAgIGNyZWF0ZUNvbnRyb2xsZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgcmV0dXJuICRjb250cm9sbGVyKCdNeUNvbnRyb2xsZXInLCB7JyRzY29wZScgOiAkcm9vdFNjb3BlIH0pO1xuICAgICAgICAgfTtcbiAgICAgICB9KSk7XG5cblxuICAgICAgIGFmdGVyRWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICRodHRwQmFja2VuZC52ZXJpZnlOb091dHN0YW5kaW5nRXhwZWN0YXRpb24oKTtcbiAgICAgICAgICRodHRwQmFja2VuZC52ZXJpZnlOb091dHN0YW5kaW5nUmVxdWVzdCgpO1xuICAgICAgIH0pO1xuXG5cbiAgICAgICBpdCgnc2hvdWxkIGZldGNoIGF1dGhlbnRpY2F0aW9uIHRva2VuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAkaHR0cEJhY2tlbmQuZXhwZWN0R0VUKCcvYXV0aC5weScpO1xuICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBjcmVhdGVDb250cm9sbGVyKCk7XG4gICAgICAgICAkaHR0cEJhY2tlbmQuZmx1c2goKTtcbiAgICAgICB9KTtcblxuXG4gICAgICAgaXQoJ3Nob3VsZCBmYWlsIGF1dGhlbnRpY2F0aW9uJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgIC8vIE5vdGljZSBob3cgeW91IGNhbiBjaGFuZ2UgdGhlIHJlc3BvbnNlIGV2ZW4gYWZ0ZXIgaXQgd2FzIHNldFxuICAgICAgICAgYXV0aFJlcXVlc3RIYW5kbGVyLnJlc3BvbmQoNDAxLCAnJyk7XG5cbiAgICAgICAgICRodHRwQmFja2VuZC5leHBlY3RHRVQoJy9hdXRoLnB5Jyk7XG4gICAgICAgICB2YXIgY29udHJvbGxlciA9IGNyZWF0ZUNvbnRyb2xsZXIoKTtcbiAgICAgICAgICRodHRwQmFja2VuZC5mbHVzaCgpO1xuICAgICAgICAgZXhwZWN0KCRyb290U2NvcGUuc3RhdHVzKS50b0JlKCdGYWlsZWQuLi4nKTtcbiAgICAgICB9KTtcblxuXG4gICAgICAgaXQoJ3Nob3VsZCBzZW5kIG1zZyB0byBzZXJ2ZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBjb250cm9sbGVyID0gY3JlYXRlQ29udHJvbGxlcigpO1xuICAgICAgICAgJGh0dHBCYWNrZW5kLmZsdXNoKCk7XG5cbiAgICAgICAgIC8vIG5vdyB5b3UgZG9u4oCZdCBjYXJlIGFib3V0IHRoZSBhdXRoZW50aWNhdGlvbiwgYnV0XG4gICAgICAgICAvLyB0aGUgY29udHJvbGxlciB3aWxsIHN0aWxsIHNlbmQgdGhlIHJlcXVlc3QgYW5kXG4gICAgICAgICAvLyAkaHR0cEJhY2tlbmQgd2lsbCByZXNwb25kIHdpdGhvdXQgeW91IGhhdmluZyB0b1xuICAgICAgICAgLy8gc3BlY2lmeSB0aGUgZXhwZWN0YXRpb24gYW5kIHJlc3BvbnNlIGZvciB0aGlzIHJlcXVlc3RcblxuICAgICAgICAgJGh0dHBCYWNrZW5kLmV4cGVjdFBPU1QoJy9hZGQtbXNnLnB5JywgJ21lc3NhZ2UgY29udGVudCcpLnJlc3BvbmQoMjAxLCAnJyk7XG4gICAgICAgICAkcm9vdFNjb3BlLnNhdmVNZXNzYWdlKCdtZXNzYWdlIGNvbnRlbnQnKTtcbiAgICAgICAgIGV4cGVjdCgkcm9vdFNjb3BlLnN0YXR1cykudG9CZSgnU2F2aW5nLi4uJyk7XG4gICAgICAgICAkaHR0cEJhY2tlbmQuZmx1c2goKTtcbiAgICAgICAgIGV4cGVjdCgkcm9vdFNjb3BlLnN0YXR1cykudG9CZSgnJyk7XG4gICAgICAgfSk7XG5cblxuICAgICAgIGl0KCdzaG91bGQgc2VuZCBhdXRoIGhlYWRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBjcmVhdGVDb250cm9sbGVyKCk7XG4gICAgICAgICAkaHR0cEJhY2tlbmQuZmx1c2goKTtcblxuICAgICAgICAgJGh0dHBCYWNrZW5kLmV4cGVjdFBPU1QoJy9hZGQtbXNnLnB5JywgdW5kZWZpbmVkLCBmdW5jdGlvbihoZWFkZXJzKSB7XG4gICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBoZWFkZXIgd2FzIHNlbnQsIGlmIGl0IHdhc24ndCB0aGUgZXhwZWN0YXRpb24gd29uJ3RcbiAgICAgICAgICAgLy8gbWF0Y2ggdGhlIHJlcXVlc3QgYW5kIHRoZSB0ZXN0IHdpbGwgZmFpbFxuICAgICAgICAgICByZXR1cm4gaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID09ICd4eHgnO1xuICAgICAgICAgfSkucmVzcG9uZCgyMDEsICcnKTtcblxuICAgICAgICAgJHJvb3RTY29wZS5zYXZlTWVzc2FnZSgnd2hhdGV2ZXInKTtcbiAgICAgICAgICRodHRwQmFja2VuZC5mbHVzaCgpO1xuICAgICAgIH0pO1xuICAgIH0pO1xuICAgYGBgXG4gKi9cbmFuZ3VsYXIubW9jay4kSHR0cEJhY2tlbmRQcm92aWRlciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJHRpbWVvdXQnLCBjcmVhdGVIdHRwQmFja2VuZE1vY2tdO1xufTtcblxuLyoqXG4gKiBHZW5lcmFsIGZhY3RvcnkgZnVuY3Rpb24gZm9yICRodHRwQmFja2VuZCBtb2NrLlxuICogUmV0dXJucyBpbnN0YW5jZSBmb3IgdW5pdCB0ZXN0aW5nICh3aGVuIG5vIGFyZ3VtZW50cyBzcGVjaWZpZWQpOlxuICogICAtIHBhc3NpbmcgdGhyb3VnaCBpcyBkaXNhYmxlZFxuICogICAtIGF1dG8gZmx1c2hpbmcgaXMgZGlzYWJsZWRcbiAqXG4gKiBSZXR1cm5zIGluc3RhbmNlIGZvciBlMmUgdGVzdGluZyAod2hlbiBgJGRlbGVnYXRlYCBhbmQgYCRicm93c2VyYCBzcGVjaWZpZWQpOlxuICogICAtIHBhc3NpbmcgdGhyb3VnaCAoZGVsZWdhdGluZyByZXF1ZXN0IHRvIHJlYWwgYmFja2VuZCkgaXMgZW5hYmxlZFxuICogICAtIGF1dG8gZmx1c2hpbmcgaXMgZW5hYmxlZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PX0gJGRlbGVnYXRlIFJlYWwgJGh0dHBCYWNrZW5kIGluc3RhbmNlIChhbGxvdyBwYXNzaW5nIHRocm91Z2ggaWYgc3BlY2lmaWVkKVxuICogQHBhcmFtIHtPYmplY3Q9fSAkYnJvd3NlciBBdXRvLWZsdXNoaW5nIGVuYWJsZWQgaWYgc3BlY2lmaWVkXG4gKiBAcmV0dXJuIHtPYmplY3R9IEluc3RhbmNlIG9mICRodHRwQmFja2VuZCBtb2NrXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUh0dHBCYWNrZW5kTW9jaygkcm9vdFNjb3BlLCAkdGltZW91dCwgJGRlbGVnYXRlLCAkYnJvd3Nlcikge1xuICB2YXIgZGVmaW5pdGlvbnMgPSBbXSxcbiAgICAgIGV4cGVjdGF0aW9ucyA9IFtdLFxuICAgICAgcmVzcG9uc2VzID0gW10sXG4gICAgICByZXNwb25zZXNQdXNoID0gYW5ndWxhci5iaW5kKHJlc3BvbnNlcywgcmVzcG9uc2VzLnB1c2gpLFxuICAgICAgY29weSA9IGFuZ3VsYXIuY29weTtcblxuICBmdW5jdGlvbiBjcmVhdGVSZXNwb25zZShzdGF0dXMsIGRhdGEsIGhlYWRlcnMsIHN0YXR1c1RleHQpIHtcbiAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHN0YXR1cykpIHJldHVybiBzdGF0dXM7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYW5ndWxhci5pc051bWJlcihzdGF0dXMpXG4gICAgICAgICAgPyBbc3RhdHVzLCBkYXRhLCBoZWFkZXJzLCBzdGF0dXNUZXh0XVxuICAgICAgICAgIDogWzIwMCwgc3RhdHVzLCBkYXRhLCBoZWFkZXJzXTtcbiAgICB9O1xuICB9XG5cbiAgLy8gVE9ETyh2b2p0YSk6IGNoYW5nZSBwYXJhbXMgdG86IG1ldGhvZCwgdXJsLCBkYXRhLCBoZWFkZXJzLCBjYWxsYmFja1xuICBmdW5jdGlvbiAkaHR0cEJhY2tlbmQobWV0aG9kLCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBoZWFkZXJzLCB0aW1lb3V0LCB3aXRoQ3JlZGVudGlhbHMpIHtcbiAgICB2YXIgeGhyID0gbmV3IE1vY2tYaHIoKSxcbiAgICAgICAgZXhwZWN0YXRpb24gPSBleHBlY3RhdGlvbnNbMF0sXG4gICAgICAgIHdhc0V4cGVjdGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBwcmV0dHlQcmludChkYXRhKSB7XG4gICAgICByZXR1cm4gKGFuZ3VsYXIuaXNTdHJpbmcoZGF0YSkgfHwgYW5ndWxhci5pc0Z1bmN0aW9uKGRhdGEpIHx8IGRhdGEgaW5zdGFuY2VvZiBSZWdFeHApXG4gICAgICAgICAgPyBkYXRhXG4gICAgICAgICAgOiBhbmd1bGFyLnRvSnNvbihkYXRhKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3cmFwUmVzcG9uc2Uod3JhcHBlZCkge1xuICAgICAgaWYgKCEkYnJvd3NlciAmJiB0aW1lb3V0KSB7XG4gICAgICAgIHRpbWVvdXQudGhlbiA/IHRpbWVvdXQudGhlbihoYW5kbGVUaW1lb3V0KSA6ICR0aW1lb3V0KGhhbmRsZVRpbWVvdXQsIHRpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGFuZGxlUmVzcG9uc2U7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZVJlc3BvbnNlKCkge1xuICAgICAgICB2YXIgcmVzcG9uc2UgPSB3cmFwcGVkLnJlc3BvbnNlKG1ldGhvZCwgdXJsLCBkYXRhLCBoZWFkZXJzKTtcbiAgICAgICAgeGhyLiQkcmVzcEhlYWRlcnMgPSByZXNwb25zZVsyXTtcbiAgICAgICAgY2FsbGJhY2soY29weShyZXNwb25zZVswXSksIGNvcHkocmVzcG9uc2VbMV0pLCB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCksXG4gICAgICAgICAgICAgICAgIGNvcHkocmVzcG9uc2VbM10gfHwgJycpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVzcG9uc2VzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICBpZiAocmVzcG9uc2VzW2ldID09PSBoYW5kbGVSZXNwb25zZSkge1xuICAgICAgICAgICAgcmVzcG9uc2VzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKC0xLCB1bmRlZmluZWQsICcnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHBlY3RhdGlvbiAmJiBleHBlY3RhdGlvbi5tYXRjaChtZXRob2QsIHVybCkpIHtcbiAgICAgIGlmICghZXhwZWN0YXRpb24ubWF0Y2hEYXRhKGRhdGEpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgJyArIGV4cGVjdGF0aW9uICsgJyB3aXRoIGRpZmZlcmVudCBkYXRhXFxuJyArXG4gICAgICAgICAgICAnRVhQRUNURUQ6ICcgKyBwcmV0dHlQcmludChleHBlY3RhdGlvbi5kYXRhKSArICdcXG5HT1Q6ICAgICAgJyArIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWV4cGVjdGF0aW9uLm1hdGNoSGVhZGVycyhoZWFkZXJzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkICcgKyBleHBlY3RhdGlvbiArICcgd2l0aCBkaWZmZXJlbnQgaGVhZGVyc1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0VYUEVDVEVEOiAnICsgcHJldHR5UHJpbnQoZXhwZWN0YXRpb24uaGVhZGVycykgKyAnXFxuR09UOiAgICAgICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldHR5UHJpbnQoaGVhZGVycykpO1xuICAgICAgfVxuXG4gICAgICBleHBlY3RhdGlvbnMuc2hpZnQoKTtcblxuICAgICAgaWYgKGV4cGVjdGF0aW9uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlc3BvbnNlcy5wdXNoKHdyYXBSZXNwb25zZShleHBlY3RhdGlvbikpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3YXNFeHBlY3RlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAtMSwgZGVmaW5pdGlvbjtcbiAgICB3aGlsZSAoKGRlZmluaXRpb24gPSBkZWZpbml0aW9uc1srK2ldKSkge1xuICAgICAgaWYgKGRlZmluaXRpb24ubWF0Y2gobWV0aG9kLCB1cmwsIGRhdGEsIGhlYWRlcnMgfHwge30pKSB7XG4gICAgICAgIGlmIChkZWZpbml0aW9uLnJlc3BvbnNlKSB7XG4gICAgICAgICAgLy8gaWYgJGJyb3dzZXIgc3BlY2lmaWVkLCB3ZSBkbyBhdXRvIGZsdXNoIGFsbCByZXF1ZXN0c1xuICAgICAgICAgICgkYnJvd3NlciA/ICRicm93c2VyLmRlZmVyIDogcmVzcG9uc2VzUHVzaCkod3JhcFJlc3BvbnNlKGRlZmluaXRpb24pKTtcbiAgICAgICAgfSBlbHNlIGlmIChkZWZpbml0aW9uLnBhc3NUaHJvdWdoKSB7XG4gICAgICAgICAgJGRlbGVnYXRlKG1ldGhvZCwgdXJsLCBkYXRhLCBjYWxsYmFjaywgaGVhZGVycywgdGltZW91dCwgd2l0aENyZWRlbnRpYWxzKTtcbiAgICAgICAgfSBlbHNlIHRocm93IG5ldyBFcnJvcignTm8gcmVzcG9uc2UgZGVmaW5lZCAhJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgd2FzRXhwZWN0ZWQgP1xuICAgICAgICBuZXcgRXJyb3IoJ05vIHJlc3BvbnNlIGRlZmluZWQgIScpIDpcbiAgICAgICAgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHJlcXVlc3Q6ICcgKyBtZXRob2QgKyAnICcgKyB1cmwgKyAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAoZXhwZWN0YXRpb24gPyAnRXhwZWN0ZWQgJyArIGV4cGVjdGF0aW9uIDogJ05vIG1vcmUgcmVxdWVzdCBleHBlY3RlZCcpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwQmFja2VuZCN3aGVuXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgbmV3IGJhY2tlbmQgZGVmaW5pdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCBIVFRQIG1ldGhvZC5cbiAgICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfGZ1bmN0aW9uKHN0cmluZyl9IHVybCBIVFRQIHVybCBvciBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgdXJsXG4gICAqICAgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgdXJsIG1hdGNoZXMgdGhlIGN1cnJlbnQgZGVmaW5pdGlvbi5cbiAgICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cHxmdW5jdGlvbihzdHJpbmcpKT19IGRhdGEgSFRUUCByZXF1ZXN0IGJvZHkgb3IgZnVuY3Rpb24gdGhhdCByZWNlaXZlc1xuICAgKiAgIGRhdGEgc3RyaW5nIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIGRhdGEgaXMgYXMgZXhwZWN0ZWQuXG4gICAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbihPYmplY3QpKT19IGhlYWRlcnMgSFRUUCBoZWFkZXJzIG9yIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgaHR0cCBoZWFkZXJcbiAgICogICBvYmplY3QgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGVhZGVycyBtYXRjaCB0aGUgY3VycmVudCBkZWZpbml0aW9uLlxuICAgKiBAcmV0dXJucyB7cmVxdWVzdEhhbmRsZXJ9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggYHJlc3BvbmRgIG1ldGhvZCB0aGF0IGNvbnRyb2xzIGhvdyBhIG1hdGNoZWRcbiAgICogICByZXF1ZXN0IGlzIGhhbmRsZWQuIFlvdSBjYW4gc2F2ZSB0aGlzIG9iamVjdCBmb3IgbGF0ZXIgdXNlIGFuZCBpbnZva2UgYHJlc3BvbmRgIGFnYWluIGluXG4gICAqICAgb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICAgKlxuICAgKiAgLSByZXNwb25kIOKAk1xuICAgKiAgICAgIGB7ZnVuY3Rpb24oW3N0YXR1cyxdIGRhdGFbLCBoZWFkZXJzLCBzdGF0dXNUZXh0XSlcbiAgICogICAgICB8IGZ1bmN0aW9uKGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBkYXRhLCBoZWFkZXJzKX1gXG4gICAqICAgIOKAkyBUaGUgcmVzcG9uZCBtZXRob2QgdGFrZXMgYSBzZXQgb2Ygc3RhdGljIGRhdGEgdG8gYmUgcmV0dXJuZWQgb3IgYSBmdW5jdGlvbiB0aGF0IGNhblxuICAgKiAgICByZXR1cm4gYW4gYXJyYXkgY29udGFpbmluZyByZXNwb25zZSBzdGF0dXMgKG51bWJlciksIHJlc3BvbnNlIGRhdGEgKHN0cmluZyksIHJlc3BvbnNlXG4gICAqICAgIGhlYWRlcnMgKE9iamVjdCksIGFuZCB0aGUgdGV4dCBmb3IgdGhlIHN0YXR1cyAoc3RyaW5nKS4gVGhlIHJlc3BvbmQgbWV0aG9kIHJldHVybnMgdGhlXG4gICAqICAgIGByZXF1ZXN0SGFuZGxlcmAgb2JqZWN0IGZvciBwb3NzaWJsZSBvdmVycmlkZXMuXG4gICAqL1xuICAkaHR0cEJhY2tlbmQud2hlbiA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBkYXRhLCBoZWFkZXJzKSB7XG4gICAgdmFyIGRlZmluaXRpb24gPSBuZXcgTW9ja0h0dHBFeHBlY3RhdGlvbihtZXRob2QsIHVybCwgZGF0YSwgaGVhZGVycyksXG4gICAgICAgIGNoYWluID0ge1xuICAgICAgICAgIHJlc3BvbmQ6IGZ1bmN0aW9uKHN0YXR1cywgZGF0YSwgaGVhZGVycywgc3RhdHVzVGV4dCkge1xuICAgICAgICAgICAgZGVmaW5pdGlvbi5wYXNzVGhyb3VnaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGRlZmluaXRpb24ucmVzcG9uc2UgPSBjcmVhdGVSZXNwb25zZShzdGF0dXMsIGRhdGEsIGhlYWRlcnMsIHN0YXR1c1RleHQpO1xuICAgICAgICAgICAgcmV0dXJuIGNoYWluO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIGlmICgkYnJvd3Nlcikge1xuICAgICAgY2hhaW4ucGFzc1Rocm91Z2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZGVmaW5pdGlvbi5yZXNwb25zZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGVmaW5pdGlvbi5wYXNzVGhyb3VnaCA9IHRydWU7XG4gICAgICAgIHJldHVybiBjaGFpbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZGVmaW5pdGlvbnMucHVzaChkZWZpbml0aW9uKTtcbiAgICByZXR1cm4gY2hhaW47XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGh0dHBCYWNrZW5kI3doZW5HRVRcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBuZXcgYmFja2VuZCBkZWZpbml0aW9uIGZvciBHRVQgcmVxdWVzdHMuIEZvciBtb3JlIGluZm8gc2VlIGB3aGVuKClgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB8ZnVuY3Rpb24oc3RyaW5nKX0gdXJsIEhUVFAgdXJsIG9yIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSB1cmxcbiAgICogICBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSB1cmwgbWF0Y2hlcyB0aGUgY3VycmVudCBkZWZpbml0aW9uLlxuICAgKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oT2JqZWN0KSk9fSBoZWFkZXJzIEhUVFAgaGVhZGVycy5cbiAgICogQHJldHVybnMge3JlcXVlc3RIYW5kbGVyfSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIGByZXNwb25kYCBtZXRob2QgdGhhdCBjb250cm9scyBob3cgYSBtYXRjaGVkXG4gICAqIHJlcXVlc3QgaXMgaGFuZGxlZC4gWW91IGNhbiBzYXZlIHRoaXMgb2JqZWN0IGZvciBsYXRlciB1c2UgYW5kIGludm9rZSBgcmVzcG9uZGAgYWdhaW4gaW5cbiAgICogb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaHR0cEJhY2tlbmQjd2hlbkhFQURcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBuZXcgYmFja2VuZCBkZWZpbml0aW9uIGZvciBIRUFEIHJlcXVlc3RzLiBGb3IgbW9yZSBpbmZvIHNlZSBgd2hlbigpYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfGZ1bmN0aW9uKHN0cmluZyl9IHVybCBIVFRQIHVybCBvciBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgdXJsXG4gICAqICAgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgdXJsIG1hdGNoZXMgdGhlIGN1cnJlbnQgZGVmaW5pdGlvbi5cbiAgICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKE9iamVjdCkpPX0gaGVhZGVycyBIVFRQIGhlYWRlcnMuXG4gICAqIEByZXR1cm5zIHtyZXF1ZXN0SGFuZGxlcn0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgcmVzcG9uZGAgbWV0aG9kIHRoYXQgY29udHJvbHMgaG93IGEgbWF0Y2hlZFxuICAgKiByZXF1ZXN0IGlzIGhhbmRsZWQuIFlvdSBjYW4gc2F2ZSB0aGlzIG9iamVjdCBmb3IgbGF0ZXIgdXNlIGFuZCBpbnZva2UgYHJlc3BvbmRgIGFnYWluIGluXG4gICAqIG9yZGVyIHRvIGNoYW5nZSBob3cgYSBtYXRjaGVkIHJlcXVlc3QgaXMgaGFuZGxlZC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGh0dHBCYWNrZW5kI3doZW5ERUxFVEVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBuZXcgYmFja2VuZCBkZWZpbml0aW9uIGZvciBERUxFVEUgcmVxdWVzdHMuIEZvciBtb3JlIGluZm8gc2VlIGB3aGVuKClgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB8ZnVuY3Rpb24oc3RyaW5nKX0gdXJsIEhUVFAgdXJsIG9yIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSB1cmxcbiAgICogICBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSB1cmwgbWF0Y2hlcyB0aGUgY3VycmVudCBkZWZpbml0aW9uLlxuICAgKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oT2JqZWN0KSk9fSBoZWFkZXJzIEhUVFAgaGVhZGVycy5cbiAgICogQHJldHVybnMge3JlcXVlc3RIYW5kbGVyfSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIGByZXNwb25kYCBtZXRob2QgdGhhdCBjb250cm9scyBob3cgYSBtYXRjaGVkXG4gICAqIHJlcXVlc3QgaXMgaGFuZGxlZC4gWW91IGNhbiBzYXZlIHRoaXMgb2JqZWN0IGZvciBsYXRlciB1c2UgYW5kIGludm9rZSBgcmVzcG9uZGAgYWdhaW4gaW5cbiAgICogb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaHR0cEJhY2tlbmQjd2hlblBPU1RcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBuZXcgYmFja2VuZCBkZWZpbml0aW9uIGZvciBQT1NUIHJlcXVlc3RzLiBGb3IgbW9yZSBpbmZvIHNlZSBgd2hlbigpYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfGZ1bmN0aW9uKHN0cmluZyl9IHVybCBIVFRQIHVybCBvciBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgdXJsXG4gICAqICAgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgdXJsIG1hdGNoZXMgdGhlIGN1cnJlbnQgZGVmaW5pdGlvbi5cbiAgICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cHxmdW5jdGlvbihzdHJpbmcpKT19IGRhdGEgSFRUUCByZXF1ZXN0IGJvZHkgb3IgZnVuY3Rpb24gdGhhdCByZWNlaXZlc1xuICAgKiAgIGRhdGEgc3RyaW5nIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIGRhdGEgaXMgYXMgZXhwZWN0ZWQuXG4gICAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbihPYmplY3QpKT19IGhlYWRlcnMgSFRUUCBoZWFkZXJzLlxuICAgKiBAcmV0dXJucyB7cmVxdWVzdEhhbmRsZXJ9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggYHJlc3BvbmRgIG1ldGhvZCB0aGF0IGNvbnRyb2xzIGhvdyBhIG1hdGNoZWRcbiAgICogcmVxdWVzdCBpcyBoYW5kbGVkLiBZb3UgY2FuIHNhdmUgdGhpcyBvYmplY3QgZm9yIGxhdGVyIHVzZSBhbmQgaW52b2tlIGByZXNwb25kYCBhZ2FpbiBpblxuICAgKiBvcmRlciB0byBjaGFuZ2UgaG93IGEgbWF0Y2hlZCByZXF1ZXN0IGlzIGhhbmRsZWQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwQmFja2VuZCN3aGVuUFVUXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgbmV3IGJhY2tlbmQgZGVmaW5pdGlvbiBmb3IgUFVUIHJlcXVlc3RzLiAgRm9yIG1vcmUgaW5mbyBzZWUgYHdoZW4oKWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfFJlZ0V4cHxmdW5jdGlvbihzdHJpbmcpfSB1cmwgSFRUUCB1cmwgb3IgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBhIHVybFxuICAgKiAgIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIHVybCBtYXRjaGVzIHRoZSBjdXJyZW50IGRlZmluaXRpb24uXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xSZWdFeHB8ZnVuY3Rpb24oc3RyaW5nKSk9fSBkYXRhIEhUVFAgcmVxdWVzdCBib2R5IG9yIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXNcbiAgICogICBkYXRhIHN0cmluZyBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSBkYXRhIGlzIGFzIGV4cGVjdGVkLlxuICAgKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oT2JqZWN0KSk9fSBoZWFkZXJzIEhUVFAgaGVhZGVycy5cbiAgICogQHJldHVybnMge3JlcXVlc3RIYW5kbGVyfSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIGByZXNwb25kYCBtZXRob2QgdGhhdCBjb250cm9scyBob3cgYSBtYXRjaGVkXG4gICAqIHJlcXVlc3QgaXMgaGFuZGxlZC4gWW91IGNhbiBzYXZlIHRoaXMgb2JqZWN0IGZvciBsYXRlciB1c2UgYW5kIGludm9rZSBgcmVzcG9uZGAgYWdhaW4gaW5cbiAgICogb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaHR0cEJhY2tlbmQjd2hlbkpTT05QXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgbmV3IGJhY2tlbmQgZGVmaW5pdGlvbiBmb3IgSlNPTlAgcmVxdWVzdHMuIEZvciBtb3JlIGluZm8gc2VlIGB3aGVuKClgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB8ZnVuY3Rpb24oc3RyaW5nKX0gdXJsIEhUVFAgdXJsIG9yIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSB1cmxcbiAgICogICBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSB1cmwgbWF0Y2hlcyB0aGUgY3VycmVudCBkZWZpbml0aW9uLlxuICAgKiBAcmV0dXJucyB7cmVxdWVzdEhhbmRsZXJ9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggYHJlc3BvbmRgIG1ldGhvZCB0aGF0IGNvbnRyb2xzIGhvdyBhIG1hdGNoZWRcbiAgICogcmVxdWVzdCBpcyBoYW5kbGVkLiBZb3UgY2FuIHNhdmUgdGhpcyBvYmplY3QgZm9yIGxhdGVyIHVzZSBhbmQgaW52b2tlIGByZXNwb25kYCBhZ2FpbiBpblxuICAgKiBvcmRlciB0byBjaGFuZ2UgaG93IGEgbWF0Y2hlZCByZXF1ZXN0IGlzIGhhbmRsZWQuXG4gICAqL1xuICBjcmVhdGVTaG9ydE1ldGhvZHMoJ3doZW4nKTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwQmFja2VuZCNleHBlY3RcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBuZXcgcmVxdWVzdCBleHBlY3RhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCBIVFRQIG1ldGhvZC5cbiAgICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfGZ1bmN0aW9uKHN0cmluZyl9IHVybCBIVFRQIHVybCBvciBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgdXJsXG4gICAqICAgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgdXJsIG1hdGNoZXMgdGhlIGN1cnJlbnQgZGVmaW5pdGlvbi5cbiAgICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cHxmdW5jdGlvbihzdHJpbmcpfE9iamVjdCk9fSBkYXRhIEhUVFAgcmVxdWVzdCBib2R5IG9yIGZ1bmN0aW9uIHRoYXRcbiAgICogIHJlY2VpdmVzIGRhdGEgc3RyaW5nIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIGRhdGEgaXMgYXMgZXhwZWN0ZWQsIG9yIE9iamVjdCBpZiByZXF1ZXN0IGJvZHlcbiAgICogIGlzIGluIEpTT04gZm9ybWF0LlxuICAgKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oT2JqZWN0KSk9fSBoZWFkZXJzIEhUVFAgaGVhZGVycyBvciBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGh0dHAgaGVhZGVyXG4gICAqICAgb2JqZWN0IGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIGhlYWRlcnMgbWF0Y2ggdGhlIGN1cnJlbnQgZXhwZWN0YXRpb24uXG4gICAqIEByZXR1cm5zIHtyZXF1ZXN0SGFuZGxlcn0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgcmVzcG9uZGAgbWV0aG9kIHRoYXQgY29udHJvbHMgaG93IGEgbWF0Y2hlZFxuICAgKiAgcmVxdWVzdCBpcyBoYW5kbGVkLiBZb3UgY2FuIHNhdmUgdGhpcyBvYmplY3QgZm9yIGxhdGVyIHVzZSBhbmQgaW52b2tlIGByZXNwb25kYCBhZ2FpbiBpblxuICAgKiAgb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICAgKlxuICAgKiAgLSByZXNwb25kIOKAk1xuICAgKiAgICBge2Z1bmN0aW9uKFtzdGF0dXMsXSBkYXRhWywgaGVhZGVycywgc3RhdHVzVGV4dF0pXG4gICAqICAgIHwgZnVuY3Rpb24oZnVuY3Rpb24obWV0aG9kLCB1cmwsIGRhdGEsIGhlYWRlcnMpfWBcbiAgICogICAg4oCTIFRoZSByZXNwb25kIG1ldGhvZCB0YWtlcyBhIHNldCBvZiBzdGF0aWMgZGF0YSB0byBiZSByZXR1cm5lZCBvciBhIGZ1bmN0aW9uIHRoYXQgY2FuXG4gICAqICAgIHJldHVybiBhbiBhcnJheSBjb250YWluaW5nIHJlc3BvbnNlIHN0YXR1cyAobnVtYmVyKSwgcmVzcG9uc2UgZGF0YSAoc3RyaW5nKSwgcmVzcG9uc2VcbiAgICogICAgaGVhZGVycyAoT2JqZWN0KSwgYW5kIHRoZSB0ZXh0IGZvciB0aGUgc3RhdHVzIChzdHJpbmcpLiBUaGUgcmVzcG9uZCBtZXRob2QgcmV0dXJucyB0aGVcbiAgICogICAgYHJlcXVlc3RIYW5kbGVyYCBvYmplY3QgZm9yIHBvc3NpYmxlIG92ZXJyaWRlcy5cbiAgICovXG4gICRodHRwQmFja2VuZC5leHBlY3QgPSBmdW5jdGlvbihtZXRob2QsIHVybCwgZGF0YSwgaGVhZGVycykge1xuICAgIHZhciBleHBlY3RhdGlvbiA9IG5ldyBNb2NrSHR0cEV4cGVjdGF0aW9uKG1ldGhvZCwgdXJsLCBkYXRhLCBoZWFkZXJzKSxcbiAgICAgICAgY2hhaW4gPSB7XG4gICAgICAgICAgcmVzcG9uZDogZnVuY3Rpb24oc3RhdHVzLCBkYXRhLCBoZWFkZXJzLCBzdGF0dXNUZXh0KSB7XG4gICAgICAgICAgICBleHBlY3RhdGlvbi5yZXNwb25zZSA9IGNyZWF0ZVJlc3BvbnNlKHN0YXR1cywgZGF0YSwgaGVhZGVycywgc3RhdHVzVGV4dCk7XG4gICAgICAgICAgICByZXR1cm4gY2hhaW47XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgZXhwZWN0YXRpb25zLnB1c2goZXhwZWN0YXRpb24pO1xuICAgIHJldHVybiBjaGFpbjtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwQmFja2VuZCNleHBlY3RHRVRcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBuZXcgcmVxdWVzdCBleHBlY3RhdGlvbiBmb3IgR0VUIHJlcXVlc3RzLiBGb3IgbW9yZSBpbmZvIHNlZSBgZXhwZWN0KClgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB8ZnVuY3Rpb24oc3RyaW5nKX0gdXJsIEhUVFAgdXJsIG9yIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSB1cmxcbiAgICogICBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSB1cmwgbWF0Y2hlcyB0aGUgY3VycmVudCBkZWZpbml0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdD19IGhlYWRlcnMgSFRUUCBoZWFkZXJzLlxuICAgKiBAcmV0dXJucyB7cmVxdWVzdEhhbmRsZXJ9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggYHJlc3BvbmRgIG1ldGhvZCB0aGF0IGNvbnRyb2xzIGhvdyBhIG1hdGNoZWRcbiAgICogcmVxdWVzdCBpcyBoYW5kbGVkLiBZb3UgY2FuIHNhdmUgdGhpcyBvYmplY3QgZm9yIGxhdGVyIHVzZSBhbmQgaW52b2tlIGByZXNwb25kYCBhZ2FpbiBpblxuICAgKiBvcmRlciB0byBjaGFuZ2UgaG93IGEgbWF0Y2hlZCByZXF1ZXN0IGlzIGhhbmRsZWQuIFNlZSAjZXhwZWN0IGZvciBtb3JlIGluZm8uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwQmFja2VuZCNleHBlY3RIRUFEXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgbmV3IHJlcXVlc3QgZXhwZWN0YXRpb24gZm9yIEhFQUQgcmVxdWVzdHMuIEZvciBtb3JlIGluZm8gc2VlIGBleHBlY3QoKWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfFJlZ0V4cHxmdW5jdGlvbihzdHJpbmcpfSB1cmwgSFRUUCB1cmwgb3IgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBhIHVybFxuICAgKiAgIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIHVybCBtYXRjaGVzIHRoZSBjdXJyZW50IGRlZmluaXRpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gaGVhZGVycyBIVFRQIGhlYWRlcnMuXG4gICAqIEByZXR1cm5zIHtyZXF1ZXN0SGFuZGxlcn0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgcmVzcG9uZGAgbWV0aG9kIHRoYXQgY29udHJvbHMgaG93IGEgbWF0Y2hlZFxuICAgKiAgIHJlcXVlc3QgaXMgaGFuZGxlZC4gWW91IGNhbiBzYXZlIHRoaXMgb2JqZWN0IGZvciBsYXRlciB1c2UgYW5kIGludm9rZSBgcmVzcG9uZGAgYWdhaW4gaW5cbiAgICogICBvcmRlciB0byBjaGFuZ2UgaG93IGEgbWF0Y2hlZCByZXF1ZXN0IGlzIGhhbmRsZWQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwQmFja2VuZCNleHBlY3RERUxFVEVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBuZXcgcmVxdWVzdCBleHBlY3RhdGlvbiBmb3IgREVMRVRFIHJlcXVlc3RzLiBGb3IgbW9yZSBpbmZvIHNlZSBgZXhwZWN0KClgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB8ZnVuY3Rpb24oc3RyaW5nKX0gdXJsIEhUVFAgdXJsIG9yIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSB1cmxcbiAgICogICBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSB1cmwgbWF0Y2hlcyB0aGUgY3VycmVudCBkZWZpbml0aW9uLlxuICAgKiBAcGFyYW0ge09iamVjdD19IGhlYWRlcnMgSFRUUCBoZWFkZXJzLlxuICAgKiBAcmV0dXJucyB7cmVxdWVzdEhhbmRsZXJ9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggYHJlc3BvbmRgIG1ldGhvZCB0aGF0IGNvbnRyb2xzIGhvdyBhIG1hdGNoZWRcbiAgICogICByZXF1ZXN0IGlzIGhhbmRsZWQuIFlvdSBjYW4gc2F2ZSB0aGlzIG9iamVjdCBmb3IgbGF0ZXIgdXNlIGFuZCBpbnZva2UgYHJlc3BvbmRgIGFnYWluIGluXG4gICAqICAgb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaHR0cEJhY2tlbmQjZXhwZWN0UE9TVFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ3JlYXRlcyBhIG5ldyByZXF1ZXN0IGV4cGVjdGF0aW9uIGZvciBQT1NUIHJlcXVlc3RzLiBGb3IgbW9yZSBpbmZvIHNlZSBgZXhwZWN0KClgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB8ZnVuY3Rpb24oc3RyaW5nKX0gdXJsIEhUVFAgdXJsIG9yIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSB1cmxcbiAgICogICBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSB1cmwgbWF0Y2hlcyB0aGUgY3VycmVudCBkZWZpbml0aW9uLlxuICAgKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwfGZ1bmN0aW9uKHN0cmluZyl8T2JqZWN0KT19IGRhdGEgSFRUUCByZXF1ZXN0IGJvZHkgb3IgZnVuY3Rpb24gdGhhdFxuICAgKiAgcmVjZWl2ZXMgZGF0YSBzdHJpbmcgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgZGF0YSBpcyBhcyBleHBlY3RlZCwgb3IgT2JqZWN0IGlmIHJlcXVlc3QgYm9keVxuICAgKiAgaXMgaW4gSlNPTiBmb3JtYXQuXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gaGVhZGVycyBIVFRQIGhlYWRlcnMuXG4gICAqIEByZXR1cm5zIHtyZXF1ZXN0SGFuZGxlcn0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgcmVzcG9uZGAgbWV0aG9kIHRoYXQgY29udHJvbHMgaG93IGEgbWF0Y2hlZFxuICAgKiAgIHJlcXVlc3QgaXMgaGFuZGxlZC4gWW91IGNhbiBzYXZlIHRoaXMgb2JqZWN0IGZvciBsYXRlciB1c2UgYW5kIGludm9rZSBgcmVzcG9uZGAgYWdhaW4gaW5cbiAgICogICBvcmRlciB0byBjaGFuZ2UgaG93IGEgbWF0Y2hlZCByZXF1ZXN0IGlzIGhhbmRsZWQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwQmFja2VuZCNleHBlY3RQVVRcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBuZXcgcmVxdWVzdCBleHBlY3RhdGlvbiBmb3IgUFVUIHJlcXVlc3RzLiBGb3IgbW9yZSBpbmZvIHNlZSBgZXhwZWN0KClgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB8ZnVuY3Rpb24oc3RyaW5nKX0gdXJsIEhUVFAgdXJsIG9yIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSB1cmxcbiAgICogICBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSB1cmwgbWF0Y2hlcyB0aGUgY3VycmVudCBkZWZpbml0aW9uLlxuICAgKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwfGZ1bmN0aW9uKHN0cmluZyl8T2JqZWN0KT19IGRhdGEgSFRUUCByZXF1ZXN0IGJvZHkgb3IgZnVuY3Rpb24gdGhhdFxuICAgKiAgcmVjZWl2ZXMgZGF0YSBzdHJpbmcgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgZGF0YSBpcyBhcyBleHBlY3RlZCwgb3IgT2JqZWN0IGlmIHJlcXVlc3QgYm9keVxuICAgKiAgaXMgaW4gSlNPTiBmb3JtYXQuXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gaGVhZGVycyBIVFRQIGhlYWRlcnMuXG4gICAqIEByZXR1cm5zIHtyZXF1ZXN0SGFuZGxlcn0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgcmVzcG9uZGAgbWV0aG9kIHRoYXQgY29udHJvbHMgaG93IGEgbWF0Y2hlZFxuICAgKiAgIHJlcXVlc3QgaXMgaGFuZGxlZC4gWW91IGNhbiBzYXZlIHRoaXMgb2JqZWN0IGZvciBsYXRlciB1c2UgYW5kIGludm9rZSBgcmVzcG9uZGAgYWdhaW4gaW5cbiAgICogICBvcmRlciB0byBjaGFuZ2UgaG93IGEgbWF0Y2hlZCByZXF1ZXN0IGlzIGhhbmRsZWQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwQmFja2VuZCNleHBlY3RQQVRDSFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ3JlYXRlcyBhIG5ldyByZXF1ZXN0IGV4cGVjdGF0aW9uIGZvciBQQVRDSCByZXF1ZXN0cy4gRm9yIG1vcmUgaW5mbyBzZWUgYGV4cGVjdCgpYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfGZ1bmN0aW9uKHN0cmluZyl9IHVybCBIVFRQIHVybCBvciBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgdXJsXG4gICAqICAgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgdXJsIG1hdGNoZXMgdGhlIGN1cnJlbnQgZGVmaW5pdGlvbi5cbiAgICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cHxmdW5jdGlvbihzdHJpbmcpfE9iamVjdCk9fSBkYXRhIEhUVFAgcmVxdWVzdCBib2R5IG9yIGZ1bmN0aW9uIHRoYXRcbiAgICogIHJlY2VpdmVzIGRhdGEgc3RyaW5nIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIGRhdGEgaXMgYXMgZXhwZWN0ZWQsIG9yIE9iamVjdCBpZiByZXF1ZXN0IGJvZHlcbiAgICogIGlzIGluIEpTT04gZm9ybWF0LlxuICAgKiBAcGFyYW0ge09iamVjdD19IGhlYWRlcnMgSFRUUCBoZWFkZXJzLlxuICAgKiBAcmV0dXJucyB7cmVxdWVzdEhhbmRsZXJ9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggYHJlc3BvbmRgIG1ldGhvZCB0aGF0IGNvbnRyb2xzIGhvdyBhIG1hdGNoZWRcbiAgICogICByZXF1ZXN0IGlzIGhhbmRsZWQuIFlvdSBjYW4gc2F2ZSB0aGlzIG9iamVjdCBmb3IgbGF0ZXIgdXNlIGFuZCBpbnZva2UgYHJlc3BvbmRgIGFnYWluIGluXG4gICAqICAgb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICAgKi9cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaHR0cEJhY2tlbmQjZXhwZWN0SlNPTlBcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBuZXcgcmVxdWVzdCBleHBlY3RhdGlvbiBmb3IgSlNPTlAgcmVxdWVzdHMuIEZvciBtb3JlIGluZm8gc2VlIGBleHBlY3QoKWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfFJlZ0V4cHxmdW5jdGlvbihzdHJpbmcpfSB1cmwgSFRUUCB1cmwgb3IgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBhbiB1cmxcbiAgICogICBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSB1cmwgbWF0Y2hlcyB0aGUgY3VycmVudCBkZWZpbml0aW9uLlxuICAgKiBAcmV0dXJucyB7cmVxdWVzdEhhbmRsZXJ9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggYHJlc3BvbmRgIG1ldGhvZCB0aGF0IGNvbnRyb2xzIGhvdyBhIG1hdGNoZWRcbiAgICogICByZXF1ZXN0IGlzIGhhbmRsZWQuIFlvdSBjYW4gc2F2ZSB0aGlzIG9iamVjdCBmb3IgbGF0ZXIgdXNlIGFuZCBpbnZva2UgYHJlc3BvbmRgIGFnYWluIGluXG4gICAqICAgb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICAgKi9cbiAgY3JlYXRlU2hvcnRNZXRob2RzKCdleHBlY3QnKTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwQmFja2VuZCNmbHVzaFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRmx1c2hlcyBhbGwgcGVuZGluZyByZXF1ZXN0cyB1c2luZyB0aGUgdHJhaW5lZCByZXNwb25zZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gY291bnQgTnVtYmVyIG9mIHJlc3BvbnNlcyB0byBmbHVzaCAoaW4gdGhlIG9yZGVyIHRoZXkgYXJyaXZlZCkuIElmIHVuZGVmaW5lZCxcbiAgICogICBhbGwgcGVuZGluZyByZXF1ZXN0cyB3aWxsIGJlIGZsdXNoZWQuIElmIHRoZXJlIGFyZSBubyBwZW5kaW5nIHJlcXVlc3RzIHdoZW4gdGhlIGZsdXNoIG1ldGhvZFxuICAgKiAgIGlzIGNhbGxlZCBhbiBleGNlcHRpb24gaXMgdGhyb3duIChhcyB0aGlzIHR5cGljYWxseSBhIHNpZ24gb2YgcHJvZ3JhbW1pbmcgZXJyb3IpLlxuICAgKi9cbiAgJGh0dHBCYWNrZW5kLmZsdXNoID0gZnVuY3Rpb24oY291bnQsIGRpZ2VzdCkge1xuICAgIGlmIChkaWdlc3QgIT09IGZhbHNlKSAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICBpZiAoIXJlc3BvbnNlcy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignTm8gcGVuZGluZyByZXF1ZXN0IHRvIGZsdXNoICEnKTtcblxuICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChjb3VudCkgJiYgY291bnQgIT09IG51bGwpIHtcbiAgICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICAgIGlmICghcmVzcG9uc2VzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdObyBtb3JlIHBlbmRpbmcgcmVxdWVzdCB0byBmbHVzaCAhJyk7XG4gICAgICAgIHJlc3BvbnNlcy5zaGlmdCgpKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlIChyZXNwb25zZXMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3BvbnNlcy5zaGlmdCgpKCk7XG4gICAgICB9XG4gICAgfVxuICAgICRodHRwQmFja2VuZC52ZXJpZnlOb091dHN0YW5kaW5nRXhwZWN0YXRpb24oZGlnZXN0KTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwQmFja2VuZCN2ZXJpZnlOb091dHN0YW5kaW5nRXhwZWN0YXRpb25cbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFZlcmlmaWVzIHRoYXQgYWxsIG9mIHRoZSByZXF1ZXN0cyBkZWZpbmVkIHZpYSB0aGUgYGV4cGVjdGAgYXBpIHdlcmUgbWFkZS4gSWYgYW55IG9mIHRoZVxuICAgKiByZXF1ZXN0cyB3ZXJlIG5vdCBtYWRlLCB2ZXJpZnlOb091dHN0YW5kaW5nRXhwZWN0YXRpb24gdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICpcbiAgICogVHlwaWNhbGx5LCB5b3Ugd291bGQgY2FsbCB0aGlzIG1ldGhvZCBmb2xsb3dpbmcgZWFjaCB0ZXN0IGNhc2UgdGhhdCBhc3NlcnRzIHJlcXVlc3RzIHVzaW5nIGFuXG4gICAqIFwiYWZ0ZXJFYWNoXCIgY2xhdXNlLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIGFmdGVyRWFjaCgkaHR0cEJhY2tlbmQudmVyaWZ5Tm9PdXRzdGFuZGluZ0V4cGVjdGF0aW9uKTtcbiAgICogYGBgXG4gICAqL1xuICAkaHR0cEJhY2tlbmQudmVyaWZ5Tm9PdXRzdGFuZGluZ0V4cGVjdGF0aW9uID0gZnVuY3Rpb24oZGlnZXN0KSB7XG4gICAgaWYgKGRpZ2VzdCAhPT0gZmFsc2UpICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgIGlmIChleHBlY3RhdGlvbnMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc2F0aXNmaWVkIHJlcXVlc3RzOiAnICsgZXhwZWN0YXRpb25zLmpvaW4oJywgJykpO1xuICAgIH1cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRodHRwQmFja2VuZCN2ZXJpZnlOb091dHN0YW5kaW5nUmVxdWVzdFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVmVyaWZpZXMgdGhhdCB0aGVyZSBhcmUgbm8gb3V0c3RhbmRpbmcgcmVxdWVzdHMgdGhhdCBuZWVkIHRvIGJlIGZsdXNoZWQuXG4gICAqXG4gICAqIFR5cGljYWxseSwgeW91IHdvdWxkIGNhbGwgdGhpcyBtZXRob2QgZm9sbG93aW5nIGVhY2ggdGVzdCBjYXNlIHRoYXQgYXNzZXJ0cyByZXF1ZXN0cyB1c2luZyBhblxuICAgKiBcImFmdGVyRWFjaFwiIGNsYXVzZS5cbiAgICpcbiAgICogYGBganNcbiAgICogICBhZnRlckVhY2goJGh0dHBCYWNrZW5kLnZlcmlmeU5vT3V0c3RhbmRpbmdSZXF1ZXN0KTtcbiAgICogYGBgXG4gICAqL1xuICAkaHR0cEJhY2tlbmQudmVyaWZ5Tm9PdXRzdGFuZGluZ1JlcXVlc3QgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAocmVzcG9uc2VzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmZsdXNoZWQgcmVxdWVzdHM6ICcgKyByZXNwb25zZXMubGVuZ3RoKTtcbiAgICB9XG4gIH07XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaHR0cEJhY2tlbmQjcmVzZXRFeHBlY3RhdGlvbnNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlc2V0cyBhbGwgcmVxdWVzdCBleHBlY3RhdGlvbnMsIGJ1dCBwcmVzZXJ2ZXMgYWxsIGJhY2tlbmQgZGVmaW5pdGlvbnMuIFR5cGljYWxseSwgeW91IHdvdWxkXG4gICAqIGNhbGwgcmVzZXRFeHBlY3RhdGlvbnMgZHVyaW5nIGEgbXVsdGlwbGUtcGhhc2UgdGVzdCB3aGVuIHlvdSB3YW50IHRvIHJldXNlIHRoZSBzYW1lIGluc3RhbmNlIG9mXG4gICAqICRodHRwQmFja2VuZCBtb2NrLlxuICAgKi9cbiAgJGh0dHBCYWNrZW5kLnJlc2V0RXhwZWN0YXRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0YXRpb25zLmxlbmd0aCA9IDA7XG4gICAgcmVzcG9uc2VzLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgcmV0dXJuICRodHRwQmFja2VuZDtcblxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kcyhwcmVmaXgpIHtcbiAgICBhbmd1bGFyLmZvckVhY2goWydHRVQnLCAnREVMRVRFJywgJ0pTT05QJywgJ0hFQUQnXSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICRodHRwQmFja2VuZFtwcmVmaXggKyBtZXRob2RdID0gZnVuY3Rpb24odXJsLCBoZWFkZXJzKSB7XG4gICAgICAgcmV0dXJuICRodHRwQmFja2VuZFtwcmVmaXhdKG1ldGhvZCwgdXJsLCB1bmRlZmluZWQsIGhlYWRlcnMpO1xuICAgICB9O1xuICAgIH0pO1xuXG4gICAgYW5ndWxhci5mb3JFYWNoKFsnUFVUJywgJ1BPU1QnLCAnUEFUQ0gnXSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICAkaHR0cEJhY2tlbmRbcHJlZml4ICsgbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgaGVhZGVycykge1xuICAgICAgICByZXR1cm4gJGh0dHBCYWNrZW5kW3ByZWZpeF0obWV0aG9kLCB1cmwsIGRhdGEsIGhlYWRlcnMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb2NrSHR0cEV4cGVjdGF0aW9uKG1ldGhvZCwgdXJsLCBkYXRhLCBoZWFkZXJzKSB7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcblxuICB0aGlzLm1hdGNoID0gZnVuY3Rpb24obSwgdSwgZCwgaCkge1xuICAgIGlmIChtZXRob2QgIT0gbSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghdGhpcy5tYXRjaFVybCh1KSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChkKSAmJiAhdGhpcy5tYXRjaERhdGEoZCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoaCkgJiYgIXRoaXMubWF0Y2hIZWFkZXJzKGgpKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgdGhpcy5tYXRjaFVybCA9IGZ1bmN0aW9uKHUpIHtcbiAgICBpZiAoIXVybCkgcmV0dXJuIHRydWU7XG4gICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbih1cmwudGVzdCkpIHJldHVybiB1cmwudGVzdCh1KTtcbiAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHVybCkpIHJldHVybiB1cmwodSk7XG4gICAgcmV0dXJuIHVybCA9PSB1O1xuICB9O1xuXG4gIHRoaXMubWF0Y2hIZWFkZXJzID0gZnVuY3Rpb24oaCkge1xuICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKGhlYWRlcnMpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKGhlYWRlcnMpKSByZXR1cm4gaGVhZGVycyhoKTtcbiAgICByZXR1cm4gYW5ndWxhci5lcXVhbHMoaGVhZGVycywgaCk7XG4gIH07XG5cbiAgdGhpcy5tYXRjaERhdGEgPSBmdW5jdGlvbihkKSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoZGF0YSkpIHJldHVybiB0cnVlO1xuICAgIGlmIChkYXRhICYmIGFuZ3VsYXIuaXNGdW5jdGlvbihkYXRhLnRlc3QpKSByZXR1cm4gZGF0YS50ZXN0KGQpO1xuICAgIGlmIChkYXRhICYmIGFuZ3VsYXIuaXNGdW5jdGlvbihkYXRhKSkgcmV0dXJuIGRhdGEoZCk7XG4gICAgaWYgKGRhdGEgJiYgIWFuZ3VsYXIuaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBhbmd1bGFyLmVxdWFscyhhbmd1bGFyLmZyb21Kc29uKGFuZ3VsYXIudG9Kc29uKGRhdGEpKSwgYW5ndWxhci5mcm9tSnNvbihkKSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhID09IGQ7XG4gIH07XG5cbiAgdGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBtZXRob2QgKyAnICcgKyB1cmw7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vY2tYaHIoKSB7XG4gIHJldHVybiBuZXcgTW9ja1hocigpO1xufVxuXG5mdW5jdGlvbiBNb2NrWGhyKCkge1xuXG4gIC8vIGhhY2sgZm9yIHRlc3RpbmcgJGh0dHAsICRodHRwQmFja2VuZFxuICBNb2NrWGhyLiQkbGFzdEluc3RhbmNlID0gdGhpcztcblxuICB0aGlzLm9wZW4gPSBmdW5jdGlvbihtZXRob2QsIHVybCwgYXN5bmMpIHtcbiAgICB0aGlzLiQkbWV0aG9kID0gbWV0aG9kO1xuICAgIHRoaXMuJCR1cmwgPSB1cmw7XG4gICAgdGhpcy4kJGFzeW5jID0gYXN5bmM7XG4gICAgdGhpcy4kJHJlcUhlYWRlcnMgPSB7fTtcbiAgICB0aGlzLiQkcmVzcEhlYWRlcnMgPSB7fTtcbiAgfTtcblxuICB0aGlzLnNlbmQgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgdGhpcy4kJGRhdGEgPSBkYXRhO1xuICB9O1xuXG4gIHRoaXMuc2V0UmVxdWVzdEhlYWRlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLiQkcmVxSGVhZGVyc1trZXldID0gdmFsdWU7XG4gIH07XG5cbiAgdGhpcy5nZXRSZXNwb25zZUhlYWRlciA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAvLyB0aGUgbG9va3VwIG11c3QgYmUgY2FzZSBpbnNlbnNpdGl2ZSxcbiAgICAvLyB0aGF0J3Mgd2h5IHdlIHRyeSB0d28gcXVpY2sgbG9va3VwcyBmaXJzdCBhbmQgZnVsbCBzY2FuIGxhc3RcbiAgICB2YXIgaGVhZGVyID0gdGhpcy4kJHJlc3BIZWFkZXJzW25hbWVdO1xuICAgIGlmIChoZWFkZXIpIHJldHVybiBoZWFkZXI7XG5cbiAgICBuYW1lID0gYW5ndWxhci5sb3dlcmNhc2UobmFtZSk7XG4gICAgaGVhZGVyID0gdGhpcy4kJHJlc3BIZWFkZXJzW25hbWVdO1xuICAgIGlmIChoZWFkZXIpIHJldHVybiBoZWFkZXI7XG5cbiAgICBoZWFkZXIgPSB1bmRlZmluZWQ7XG4gICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuJCRyZXNwSGVhZGVycywgZnVuY3Rpb24oaGVhZGVyVmFsLCBoZWFkZXJOYW1lKSB7XG4gICAgICBpZiAoIWhlYWRlciAmJiBhbmd1bGFyLmxvd2VyY2FzZShoZWFkZXJOYW1lKSA9PSBuYW1lKSBoZWFkZXIgPSBoZWFkZXJWYWw7XG4gICAgfSk7XG4gICAgcmV0dXJuIGhlYWRlcjtcbiAgfTtcblxuICB0aGlzLmdldEFsbFJlc3BvbnNlSGVhZGVycyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsaW5lcyA9IFtdO1xuXG4gICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuJCRyZXNwSGVhZGVycywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgbGluZXMucHVzaChrZXkgKyAnOiAnICsgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbiAgfTtcblxuICB0aGlzLmFib3J0ID0gYW5ndWxhci5ub29wO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR0aW1lb3V0XG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGlzIHNlcnZpY2UgaXMganVzdCBhIHNpbXBsZSBkZWNvcmF0b3IgZm9yIHtAbGluayBuZy4kdGltZW91dCAkdGltZW91dH0gc2VydmljZVxuICogdGhhdCBhZGRzIGEgXCJmbHVzaFwiIGFuZCBcInZlcmlmeU5vUGVuZGluZ1Rhc2tzXCIgbWV0aG9kcy5cbiAqL1xuXG5hbmd1bGFyLm1vY2suJFRpbWVvdXREZWNvcmF0b3IgPSBbJyRkZWxlZ2F0ZScsICckYnJvd3NlcicsIGZ1bmN0aW9uKCRkZWxlZ2F0ZSwgJGJyb3dzZXIpIHtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkdGltZW91dCNmbHVzaFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRmx1c2hlcyB0aGUgcXVldWUgb2YgcGVuZGluZyB0YXNrcy5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXI9fSBkZWxheSBtYXhpbXVtIHRpbWVvdXQgYW1vdW50IHRvIGZsdXNoIHVwIHVudGlsXG4gICAqL1xuICAkZGVsZWdhdGUuZmx1c2ggPSBmdW5jdGlvbihkZWxheSkge1xuICAgICRicm93c2VyLmRlZmVyLmZsdXNoKGRlbGF5KTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkdGltZW91dCN2ZXJpZnlOb1BlbmRpbmdUYXNrc1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVmVyaWZpZXMgdGhhdCB0aGVyZSBhcmUgbm8gcGVuZGluZyB0YXNrcyB0aGF0IG5lZWQgdG8gYmUgZmx1c2hlZC5cbiAgICovXG4gICRkZWxlZ2F0ZS52ZXJpZnlOb1BlbmRpbmdUYXNrcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICgkYnJvd3Nlci5kZWZlcnJlZEZucy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGVmZXJyZWQgdGFza3MgdG8gZmx1c2ggKCcgKyAkYnJvd3Nlci5kZWZlcnJlZEZucy5sZW5ndGggKyAnKTogJyArXG4gICAgICAgICAgZm9ybWF0UGVuZGluZ1Rhc2tzQXNTdHJpbmcoJGJyb3dzZXIuZGVmZXJyZWRGbnMpKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVuZGluZ1Rhc2tzQXNTdHJpbmcodGFza3MpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgYW5ndWxhci5mb3JFYWNoKHRhc2tzLCBmdW5jdGlvbih0YXNrKSB7XG4gICAgICByZXN1bHQucHVzaCgne2lkOiAnICsgdGFzay5pZCArICcsICcgKyAndGltZTogJyArIHRhc2sudGltZSArICd9Jyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oJywgJyk7XG4gIH1cblxuICByZXR1cm4gJGRlbGVnYXRlO1xufV07XG5cbmFuZ3VsYXIubW9jay4kUkFGRGVjb3JhdG9yID0gWyckZGVsZWdhdGUnLCBmdW5jdGlvbigkZGVsZWdhdGUpIHtcbiAgdmFyIHJhZkZuID0gZnVuY3Rpb24oZm4pIHtcbiAgICB2YXIgaW5kZXggPSByYWZGbi5xdWV1ZS5sZW5ndGg7XG4gICAgcmFmRm4ucXVldWUucHVzaChmbik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmFmRm4ucXVldWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9O1xuICB9O1xuXG4gIHJhZkZuLnF1ZXVlID0gW107XG4gIHJhZkZuLnN1cHBvcnRlZCA9ICRkZWxlZ2F0ZS5zdXBwb3J0ZWQ7XG5cbiAgcmFmRm4uZmx1c2ggPSBmdW5jdGlvbigpIHtcbiAgICBpZiAocmFmRm4ucXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHJBRiBjYWxsYmFja3MgcHJlc2VudCcpO1xuICAgIH1cblxuICAgIHZhciBsZW5ndGggPSByYWZGbi5xdWV1ZS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmFmRm4ucXVldWVbaV0oKTtcbiAgICB9XG5cbiAgICByYWZGbi5xdWV1ZSA9IHJhZkZuLnF1ZXVlLnNsaWNlKGkpO1xuICB9O1xuXG4gIHJldHVybiByYWZGbjtcbn1dO1xuXG4vKipcbiAqXG4gKi9cbmFuZ3VsYXIubW9jay4kUm9vdEVsZW1lbnRQcm92aWRlciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYW5ndWxhci5lbGVtZW50KCc8ZGl2IG5nLWFwcD48L2Rpdj4nKTtcbiAgfTtcbn07XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRjb250cm9sbGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZGVjb3JhdG9yIGZvciB7QGxpbmsgbmcuJGNvbnRyb2xsZXJ9IHdpdGggYWRkaXRpb25hbCBgYmluZGluZ3NgIHBhcmFtZXRlciwgdXNlZnVsIHdoZW4gdGVzdGluZ1xuICogY29udHJvbGxlcnMgb2YgZGlyZWN0aXZlcyB0aGF0IHVzZSB7QGxpbmsgJGNvbXBpbGUjLWJpbmR0b2NvbnRyb2xsZXItIGBiaW5kVG9Db250cm9sbGVyYH0uXG4gKlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICpcbiAqIC8vIERpcmVjdGl2ZSBkZWZpbml0aW9uIC4uLlxuICpcbiAqIG15TW9kLmRpcmVjdGl2ZSgnbXlEaXJlY3RpdmUnLCB7XG4gKiAgIGNvbnRyb2xsZXI6ICdNeURpcmVjdGl2ZUNvbnRyb2xsZXInLFxuICogICBiaW5kVG9Db250cm9sbGVyOiB7XG4gKiAgICAgbmFtZTogJ0AnXG4gKiAgIH1cbiAqIH0pO1xuICpcbiAqXG4gKiAvLyBDb250cm9sbGVyIGRlZmluaXRpb24gLi4uXG4gKlxuICogbXlNb2QuY29udHJvbGxlcignTXlEaXJlY3RpdmVDb250cm9sbGVyJywgWyckbG9nJywgZnVuY3Rpb24oJGxvZykge1xuICogICAkbG9nLmluZm8odGhpcy5uYW1lKTtcbiAqIH0pXTtcbiAqXG4gKlxuICogLy8gSW4gYSB0ZXN0IC4uLlxuICpcbiAqIGRlc2NyaWJlKCdteURpcmVjdGl2ZUNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAqICAgaXQoJ3Nob3VsZCB3cml0ZSB0aGUgYm91bmQgbmFtZSB0byB0aGUgbG9nJywgaW5qZWN0KGZ1bmN0aW9uKCRjb250cm9sbGVyLCAkbG9nKSB7XG4gKiAgICAgdmFyIGN0cmwgPSAkY29udHJvbGxlcignTXlEaXJlY3RpdmVDb250cm9sbGVyJywgeyAvKiBubyBsb2NhbHMgJiM0MjsvIH0sIHsgbmFtZTogJ0NsYXJrIEtlbnQnIH0pO1xuICogICAgIGV4cGVjdChjdHJsLm5hbWUpLnRvRXF1YWwoJ0NsYXJrIEtlbnQnKTtcbiAqICAgICBleHBlY3QoJGxvZy5pbmZvLmxvZ3MpLnRvRXF1YWwoWydDbGFyayBLZW50J10pO1xuICogICB9KTtcbiAqIH0pO1xuICpcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBjb25zdHJ1Y3RvciBJZiBjYWxsZWQgd2l0aCBhIGZ1bmN0aW9uIHRoZW4gaXQncyBjb25zaWRlcmVkIHRvIGJlIHRoZVxuICogICAgY29udHJvbGxlciBjb25zdHJ1Y3RvciBmdW5jdGlvbi4gT3RoZXJ3aXNlIGl0J3MgY29uc2lkZXJlZCB0byBiZSBhIHN0cmluZyB3aGljaCBpcyB1c2VkXG4gKiAgICB0byByZXRyaWV2ZSB0aGUgY29udHJvbGxlciBjb25zdHJ1Y3RvciB1c2luZyB0aGUgZm9sbG93aW5nIHN0ZXBzOlxuICpcbiAqICAgICogY2hlY2sgaWYgYSBjb250cm9sbGVyIHdpdGggZ2l2ZW4gbmFtZSBpcyByZWdpc3RlcmVkIHZpYSBgJGNvbnRyb2xsZXJQcm92aWRlcmBcbiAqICAgICogY2hlY2sgaWYgZXZhbHVhdGluZyB0aGUgc3RyaW5nIG9uIHRoZSBjdXJyZW50IHNjb3BlIHJldHVybnMgYSBjb25zdHJ1Y3RvclxuICogICAgKiBpZiAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFscywgY2hlY2sgYHdpbmRvd1tjb25zdHJ1Y3Rvcl1gIG9uIHRoZSBnbG9iYWxcbiAqICAgICAgYHdpbmRvd2Agb2JqZWN0IChub3QgcmVjb21tZW5kZWQpXG4gKlxuICogICAgVGhlIHN0cmluZyBjYW4gdXNlIHRoZSBgY29udHJvbGxlciBhcyBwcm9wZXJ0eWAgc3ludGF4LCB3aGVyZSB0aGUgY29udHJvbGxlciBpbnN0YW5jZSBpcyBwdWJsaXNoZWRcbiAqICAgIGFzIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkgb24gdGhlIGBzY29wZWA7IHRoZSBgc2NvcGVgIG11c3QgYmUgaW5qZWN0ZWQgaW50byBgbG9jYWxzYCBwYXJhbSBmb3IgdGhpc1xuICogICAgdG8gd29yayBjb3JyZWN0bHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGxvY2FscyBJbmplY3Rpb24gbG9jYWxzIGZvciBDb250cm9sbGVyLlxuICogQHBhcmFtIHtPYmplY3Q9fSBiaW5kaW5ncyBQcm9wZXJ0aWVzIHRvIGFkZCB0byB0aGUgY29udHJvbGxlciBiZWZvcmUgaW52b2tpbmcgdGhlIGNvbnN0cnVjdG9yLiBUaGlzIGlzIHVzZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gc2ltdWxhdGUgdGhlIGBiaW5kVG9Db250cm9sbGVyYCBmZWF0dXJlIGFuZCBzaW1wbGlmeSBjZXJ0YWluIGtpbmRzIG9mIHRlc3RzLlxuICogQHJldHVybiB7T2JqZWN0fSBJbnN0YW5jZSBvZiBnaXZlbiBjb250cm9sbGVyLlxuICovXG5hbmd1bGFyLm1vY2suJENvbnRyb2xsZXJEZWNvcmF0b3IgPSBbJyRkZWxlZ2F0ZScsIGZ1bmN0aW9uKCRkZWxlZ2F0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oZXhwcmVzc2lvbiwgbG9jYWxzLCBsYXRlciwgaWRlbnQpIHtcbiAgICBpZiAobGF0ZXIgJiYgdHlwZW9mIGxhdGVyID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGNyZWF0ZSA9ICRkZWxlZ2F0ZShleHByZXNzaW9uLCBsb2NhbHMsIHRydWUsIGlkZW50KTtcbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKGNyZWF0ZS5pbnN0YW5jZSwgbGF0ZXIpO1xuICAgICAgcmV0dXJuIGNyZWF0ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gJGRlbGVnYXRlKGV4cHJlc3Npb24sIGxvY2FscywgbGF0ZXIsIGlkZW50KTtcbiAgfTtcbn1dO1xuXG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbmdNb2NrXG4gKiBAcGFja2FnZU5hbWUgYW5ndWxhci1tb2Nrc1xuICogQGRlc2NyaXB0aW9uXG4gKlxuICogIyBuZ01vY2tcbiAqXG4gKiBUaGUgYG5nTW9ja2AgbW9kdWxlIHByb3ZpZGVzIHN1cHBvcnQgdG8gaW5qZWN0IGFuZCBtb2NrIEFuZ3VsYXIgc2VydmljZXMgaW50byB1bml0IHRlc3RzLlxuICogSW4gYWRkaXRpb24sIG5nTW9jayBhbHNvIGV4dGVuZHMgdmFyaW91cyBjb3JlIG5nIHNlcnZpY2VzIHN1Y2ggdGhhdCB0aGV5IGNhbiBiZVxuICogaW5zcGVjdGVkIGFuZCBjb250cm9sbGVkIGluIGEgc3luY2hyb25vdXMgbWFubmVyIHdpdGhpbiB0ZXN0IGNvZGUuXG4gKlxuICpcbiAqIDxkaXYgZG9jLW1vZHVsZS1jb21wb25lbnRzPVwibmdNb2NrXCI+PC9kaXY+XG4gKlxuICovXG5hbmd1bGFyLm1vZHVsZSgnbmdNb2NrJywgWyduZyddKS5wcm92aWRlcih7XG4gICRicm93c2VyOiBhbmd1bGFyLm1vY2suJEJyb3dzZXJQcm92aWRlcixcbiAgJGV4Y2VwdGlvbkhhbmRsZXI6IGFuZ3VsYXIubW9jay4kRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLFxuICAkbG9nOiBhbmd1bGFyLm1vY2suJExvZ1Byb3ZpZGVyLFxuICAkaW50ZXJ2YWw6IGFuZ3VsYXIubW9jay4kSW50ZXJ2YWxQcm92aWRlcixcbiAgJGh0dHBCYWNrZW5kOiBhbmd1bGFyLm1vY2suJEh0dHBCYWNrZW5kUHJvdmlkZXIsXG4gICRyb290RWxlbWVudDogYW5ndWxhci5tb2NrLiRSb290RWxlbWVudFByb3ZpZGVyXG59KS5jb25maWcoWyckcHJvdmlkZScsIGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gICRwcm92aWRlLmRlY29yYXRvcignJHRpbWVvdXQnLCBhbmd1bGFyLm1vY2suJFRpbWVvdXREZWNvcmF0b3IpO1xuICAkcHJvdmlkZS5kZWNvcmF0b3IoJyQkckFGJywgYW5ndWxhci5tb2NrLiRSQUZEZWNvcmF0b3IpO1xuICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRyb290U2NvcGUnLCBhbmd1bGFyLm1vY2suJFJvb3RTY29wZURlY29yYXRvcik7XG4gICRwcm92aWRlLmRlY29yYXRvcignJGNvbnRyb2xsZXInLCBhbmd1bGFyLm1vY2suJENvbnRyb2xsZXJEZWNvcmF0b3IpO1xufV0pO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG5nTW9ja0UyRVxuICogQG1vZHVsZSBuZ01vY2tFMkVcbiAqIEBwYWNrYWdlTmFtZSBhbmd1bGFyLW1vY2tzXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGUgYG5nTW9ja0UyRWAgaXMgYW4gYW5ndWxhciBtb2R1bGUgd2hpY2ggY29udGFpbnMgbW9ja3Mgc3VpdGFibGUgZm9yIGVuZC10by1lbmQgdGVzdGluZy5cbiAqIEN1cnJlbnRseSB0aGVyZSBpcyBvbmx5IG9uZSBtb2NrIHByZXNlbnQgaW4gdGhpcyBtb2R1bGUgLVxuICogdGhlIHtAbGluayBuZ01vY2tFMkUuJGh0dHBCYWNrZW5kIGUyZSAkaHR0cEJhY2tlbmR9IG1vY2suXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCduZ01vY2tFMkUnLCBbJ25nJ10pLmNvbmZpZyhbJyRwcm92aWRlJywgZnVuY3Rpb24oJHByb3ZpZGUpIHtcbiAgJHByb3ZpZGUuZGVjb3JhdG9yKCckaHR0cEJhY2tlbmQnLCBhbmd1bGFyLm1vY2suZTJlLiRodHRwQmFja2VuZERlY29yYXRvcik7XG59XSk7XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRodHRwQmFja2VuZFxuICogQG1vZHVsZSBuZ01vY2tFMkVcbiAqIEBkZXNjcmlwdGlvblxuICogRmFrZSBIVFRQIGJhY2tlbmQgaW1wbGVtZW50YXRpb24gc3VpdGFibGUgZm9yIGVuZC10by1lbmQgdGVzdGluZyBvciBiYWNrZW5kLWxlc3MgZGV2ZWxvcG1lbnQgb2ZcbiAqIGFwcGxpY2F0aW9ucyB0aGF0IHVzZSB0aGUge0BsaW5rIG5nLiRodHRwICRodHRwIHNlcnZpY2V9LlxuICpcbiAqICpOb3RlKjogRm9yIGZha2UgaHR0cCBiYWNrZW5kIGltcGxlbWVudGF0aW9uIHN1aXRhYmxlIGZvciB1bml0IHRlc3RpbmcgcGxlYXNlIHNlZVxuICoge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgdW5pdC10ZXN0aW5nICRodHRwQmFja2VuZCBtb2NrfS5cbiAqXG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIGNhbiBiZSB1c2VkIHRvIHJlc3BvbmQgd2l0aCBzdGF0aWMgb3IgZHluYW1pYyByZXNwb25zZXMgdmlhIHRoZSBgd2hlbmAgYXBpXG4gKiBhbmQgaXRzIHNob3J0Y3V0cyAoYHdoZW5HRVRgLCBgd2hlblBPU1RgLCBldGMpIGFuZCBvcHRpb25hbGx5IHBhc3MgdGhyb3VnaCByZXF1ZXN0cyB0byB0aGVcbiAqIHJlYWwgJGh0dHBCYWNrZW5kIGZvciBzcGVjaWZpYyByZXF1ZXN0cyAoZS5nLiB0byBpbnRlcmFjdCB3aXRoIGNlcnRhaW4gcmVtb3RlIGFwaXMgb3IgdG8gZmV0Y2hcbiAqIHRlbXBsYXRlcyBmcm9tIGEgd2Vic2VydmVyKS5cbiAqXG4gKiBBcyBvcHBvc2VkIHRvIHVuaXQtdGVzdGluZywgaW4gYW4gZW5kLXRvLWVuZCB0ZXN0aW5nIHNjZW5hcmlvIG9yIGluIHNjZW5hcmlvIHdoZW4gYW4gYXBwbGljYXRpb25cbiAqIGlzIGJlaW5nIGRldmVsb3BlZCB3aXRoIHRoZSByZWFsIGJhY2tlbmQgYXBpIHJlcGxhY2VkIHdpdGggYSBtb2NrLCBpdCBpcyBvZnRlbiBkZXNpcmFibGUgZm9yXG4gKiBjZXJ0YWluIGNhdGVnb3J5IG9mIHJlcXVlc3RzIHRvIGJ5cGFzcyB0aGUgbW9jayBhbmQgaXNzdWUgYSByZWFsIGh0dHAgcmVxdWVzdCAoZS5nLiB0byBmZXRjaFxuICogdGVtcGxhdGVzIG9yIHN0YXRpYyBmaWxlcyBmcm9tIHRoZSB3ZWJzZXJ2ZXIpLiBUbyBjb25maWd1cmUgdGhlIGJhY2tlbmQgd2l0aCB0aGlzIGJlaGF2aW9yXG4gKiB1c2UgdGhlIGBwYXNzVGhyb3VnaGAgcmVxdWVzdCBoYW5kbGVyIG9mIGB3aGVuYCBpbnN0ZWFkIG9mIGByZXNwb25kYC5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIHdlIGRvbid0IHdhbnQgdG8gbWFudWFsbHkgaGF2ZSB0byBmbHVzaCBtb2NrZWQgb3V0IHJlcXVlc3RzIGxpa2Ugd2UgZG8gZHVyaW5nIHVuaXRcbiAqIHRlc3RpbmcuIEZvciB0aGlzIHJlYXNvbiB0aGUgZTJlICRodHRwQmFja2VuZCBmbHVzaGVzIG1vY2tlZCBvdXQgcmVxdWVzdHNcbiAqIGF1dG9tYXRpY2FsbHksIGNsb3NlbHkgc2ltdWxhdGluZyB0aGUgYmVoYXZpb3Igb2YgdGhlIFhNTEh0dHBSZXF1ZXN0IG9iamVjdC5cbiAqXG4gKiBUbyBzZXR1cCB0aGUgYXBwbGljYXRpb24gdG8gcnVuIHdpdGggdGhpcyBodHRwIGJhY2tlbmQsIHlvdSBoYXZlIHRvIGNyZWF0ZSBhIG1vZHVsZSB0aGF0IGRlcGVuZHNcbiAqIG9uIHRoZSBgbmdNb2NrRTJFYCBhbmQgeW91ciBhcHBsaWNhdGlvbiBtb2R1bGVzIGFuZCBkZWZpbmVzIHRoZSBmYWtlIGJhY2tlbmQ6XG4gKlxuICogYGBganNcbiAqICAgbXlBcHBEZXYgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHBEZXYnLCBbJ215QXBwJywgJ25nTW9ja0UyRSddKTtcbiAqICAgbXlBcHBEZXYucnVuKGZ1bmN0aW9uKCRodHRwQmFja2VuZCkge1xuICogICAgIHBob25lcyA9IFt7bmFtZTogJ3Bob25lMSd9LCB7bmFtZTogJ3Bob25lMid9XTtcbiAqXG4gKiAgICAgLy8gcmV0dXJucyB0aGUgY3VycmVudCBsaXN0IG9mIHBob25lc1xuICogICAgICRodHRwQmFja2VuZC53aGVuR0VUKCcvcGhvbmVzJykucmVzcG9uZChwaG9uZXMpO1xuICpcbiAqICAgICAvLyBhZGRzIGEgbmV3IHBob25lIHRvIHRoZSBwaG9uZXMgYXJyYXlcbiAqICAgICAkaHR0cEJhY2tlbmQud2hlblBPU1QoJy9waG9uZXMnKS5yZXNwb25kKGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBkYXRhKSB7XG4gKiAgICAgICB2YXIgcGhvbmUgPSBhbmd1bGFyLmZyb21Kc29uKGRhdGEpO1xuICogICAgICAgcGhvbmVzLnB1c2gocGhvbmUpO1xuICogICAgICAgcmV0dXJuIFsyMDAsIHBob25lLCB7fV07XG4gKiAgICAgfSk7XG4gKiAgICAgJGh0dHBCYWNrZW5kLndoZW5HRVQoL15cXC90ZW1wbGF0ZXNcXC8vKS5wYXNzVGhyb3VnaCgpO1xuICogICAgIC8vLi4uXG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogQWZ0ZXJ3YXJkcywgYm9vdHN0cmFwIHlvdXIgYXBwIHdpdGggdGhpcyBuZXcgbW9kdWxlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGh0dHBCYWNrZW5kI3doZW5cbiAqIEBtb2R1bGUgbmdNb2NrRTJFXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBuZXcgYmFja2VuZCBkZWZpbml0aW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgSFRUUCBtZXRob2QuXG4gKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB8ZnVuY3Rpb24oc3RyaW5nKX0gdXJsIEhUVFAgdXJsIG9yIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSB1cmxcbiAqICAgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgdXJsIG1hdGNoZXMgdGhlIGN1cnJlbnQgZGVmaW5pdGlvbi5cbiAqIEBwYXJhbSB7KHN0cmluZ3xSZWdFeHApPX0gZGF0YSBIVFRQIHJlcXVlc3QgYm9keS5cbiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbihPYmplY3QpKT19IGhlYWRlcnMgSFRUUCBoZWFkZXJzIG9yIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgaHR0cCBoZWFkZXJcbiAqICAgb2JqZWN0IGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIGhlYWRlcnMgbWF0Y2ggdGhlIGN1cnJlbnQgZGVmaW5pdGlvbi5cbiAqIEByZXR1cm5zIHtyZXF1ZXN0SGFuZGxlcn0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgcmVzcG9uZGAgYW5kIGBwYXNzVGhyb3VnaGAgbWV0aG9kcyB0aGF0XG4gKiAgIGNvbnRyb2wgaG93IGEgbWF0Y2hlZCByZXF1ZXN0IGlzIGhhbmRsZWQuIFlvdSBjYW4gc2F2ZSB0aGlzIG9iamVjdCBmb3IgbGF0ZXIgdXNlIGFuZCBpbnZva2VcbiAqICAgYHJlc3BvbmRgIG9yIGBwYXNzVGhyb3VnaGAgYWdhaW4gaW4gb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICpcbiAqICAtIHJlc3BvbmQg4oCTXG4gKiAgICBge2Z1bmN0aW9uKFtzdGF0dXMsXSBkYXRhWywgaGVhZGVycywgc3RhdHVzVGV4dF0pXG4gKiAgICB8IGZ1bmN0aW9uKGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBkYXRhLCBoZWFkZXJzKX1gXG4gKiAgICDigJMgVGhlIHJlc3BvbmQgbWV0aG9kIHRha2VzIGEgc2V0IG9mIHN0YXRpYyBkYXRhIHRvIGJlIHJldHVybmVkIG9yIGEgZnVuY3Rpb24gdGhhdCBjYW4gcmV0dXJuXG4gKiAgICBhbiBhcnJheSBjb250YWluaW5nIHJlc3BvbnNlIHN0YXR1cyAobnVtYmVyKSwgcmVzcG9uc2UgZGF0YSAoc3RyaW5nKSwgcmVzcG9uc2UgaGVhZGVyc1xuICogICAgKE9iamVjdCksIGFuZCB0aGUgdGV4dCBmb3IgdGhlIHN0YXR1cyAoc3RyaW5nKS5cbiAqICAtIHBhc3NUaHJvdWdoIOKAkyBge2Z1bmN0aW9uKCl9YCDigJMgQW55IHJlcXVlc3QgbWF0Y2hpbmcgYSBiYWNrZW5kIGRlZmluaXRpb24gd2l0aFxuICogICAgYHBhc3NUaHJvdWdoYCBoYW5kbGVyIHdpbGwgYmUgcGFzc2VkIHRocm91Z2ggdG8gdGhlIHJlYWwgYmFja2VuZCAoYW4gWEhSIHJlcXVlc3Qgd2lsbCBiZSBtYWRlXG4gKiAgICB0byB0aGUgc2VydmVyLilcbiAqICAtIEJvdGggbWV0aG9kcyByZXR1cm4gdGhlIGByZXF1ZXN0SGFuZGxlcmAgb2JqZWN0IGZvciBwb3NzaWJsZSBvdmVycmlkZXMuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaHR0cEJhY2tlbmQjd2hlbkdFVFxuICogQG1vZHVsZSBuZ01vY2tFMkVcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhIG5ldyBiYWNrZW5kIGRlZmluaXRpb24gZm9yIEdFVCByZXF1ZXN0cy4gRm9yIG1vcmUgaW5mbyBzZWUgYHdoZW4oKWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfGZ1bmN0aW9uKHN0cmluZyl9IHVybCBIVFRQIHVybCBvciBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgdXJsXG4gKiAgIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIHVybCBtYXRjaGVzIHRoZSBjdXJyZW50IGRlZmluaXRpb24uXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oT2JqZWN0KSk9fSBoZWFkZXJzIEhUVFAgaGVhZGVycy5cbiAqIEByZXR1cm5zIHtyZXF1ZXN0SGFuZGxlcn0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgcmVzcG9uZGAgYW5kIGBwYXNzVGhyb3VnaGAgbWV0aG9kcyB0aGF0XG4gKiAgIGNvbnRyb2wgaG93IGEgbWF0Y2hlZCByZXF1ZXN0IGlzIGhhbmRsZWQuIFlvdSBjYW4gc2F2ZSB0aGlzIG9iamVjdCBmb3IgbGF0ZXIgdXNlIGFuZCBpbnZva2VcbiAqICAgYHJlc3BvbmRgIG9yIGBwYXNzVGhyb3VnaGAgYWdhaW4gaW4gb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGh0dHBCYWNrZW5kI3doZW5IRUFEXG4gKiBAbW9kdWxlIG5nTW9ja0UyRVxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgbmV3IGJhY2tlbmQgZGVmaW5pdGlvbiBmb3IgSEVBRCByZXF1ZXN0cy4gRm9yIG1vcmUgaW5mbyBzZWUgYHdoZW4oKWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfGZ1bmN0aW9uKHN0cmluZyl9IHVybCBIVFRQIHVybCBvciBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgdXJsXG4gKiAgIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIHVybCBtYXRjaGVzIHRoZSBjdXJyZW50IGRlZmluaXRpb24uXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oT2JqZWN0KSk9fSBoZWFkZXJzIEhUVFAgaGVhZGVycy5cbiAqIEByZXR1cm5zIHtyZXF1ZXN0SGFuZGxlcn0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgcmVzcG9uZGAgYW5kIGBwYXNzVGhyb3VnaGAgbWV0aG9kcyB0aGF0XG4gKiAgIGNvbnRyb2wgaG93IGEgbWF0Y2hlZCByZXF1ZXN0IGlzIGhhbmRsZWQuIFlvdSBjYW4gc2F2ZSB0aGlzIG9iamVjdCBmb3IgbGF0ZXIgdXNlIGFuZCBpbnZva2VcbiAqICAgYHJlc3BvbmRgIG9yIGBwYXNzVGhyb3VnaGAgYWdhaW4gaW4gb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGh0dHBCYWNrZW5kI3doZW5ERUxFVEVcbiAqIEBtb2R1bGUgbmdNb2NrRTJFXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBuZXcgYmFja2VuZCBkZWZpbml0aW9uIGZvciBERUxFVEUgcmVxdWVzdHMuIEZvciBtb3JlIGluZm8gc2VlIGB3aGVuKClgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfFJlZ0V4cHxmdW5jdGlvbihzdHJpbmcpfSB1cmwgSFRUUCB1cmwgb3IgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBhIHVybFxuICogICBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSB1cmwgbWF0Y2hlcyB0aGUgY3VycmVudCBkZWZpbml0aW9uLlxuICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKE9iamVjdCkpPX0gaGVhZGVycyBIVFRQIGhlYWRlcnMuXG4gKiBAcmV0dXJucyB7cmVxdWVzdEhhbmRsZXJ9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggYHJlc3BvbmRgIGFuZCBgcGFzc1Rocm91Z2hgIG1ldGhvZHMgdGhhdFxuICogICBjb250cm9sIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLiBZb3UgY2FuIHNhdmUgdGhpcyBvYmplY3QgZm9yIGxhdGVyIHVzZSBhbmQgaW52b2tlXG4gKiAgIGByZXNwb25kYCBvciBgcGFzc1Rocm91Z2hgIGFnYWluIGluIG9yZGVyIHRvIGNoYW5nZSBob3cgYSBtYXRjaGVkIHJlcXVlc3QgaXMgaGFuZGxlZC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRodHRwQmFja2VuZCN3aGVuUE9TVFxuICogQG1vZHVsZSBuZ01vY2tFMkVcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhIG5ldyBiYWNrZW5kIGRlZmluaXRpb24gZm9yIFBPU1QgcmVxdWVzdHMuIEZvciBtb3JlIGluZm8gc2VlIGB3aGVuKClgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfFJlZ0V4cHxmdW5jdGlvbihzdHJpbmcpfSB1cmwgSFRUUCB1cmwgb3IgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBhIHVybFxuICogICBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSB1cmwgbWF0Y2hlcyB0aGUgY3VycmVudCBkZWZpbml0aW9uLlxuICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCk9fSBkYXRhIEhUVFAgcmVxdWVzdCBib2R5LlxuICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKE9iamVjdCkpPX0gaGVhZGVycyBIVFRQIGhlYWRlcnMuXG4gKiBAcmV0dXJucyB7cmVxdWVzdEhhbmRsZXJ9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggYHJlc3BvbmRgIGFuZCBgcGFzc1Rocm91Z2hgIG1ldGhvZHMgdGhhdFxuICogICBjb250cm9sIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLiBZb3UgY2FuIHNhdmUgdGhpcyBvYmplY3QgZm9yIGxhdGVyIHVzZSBhbmQgaW52b2tlXG4gKiAgIGByZXNwb25kYCBvciBgcGFzc1Rocm91Z2hgIGFnYWluIGluIG9yZGVyIHRvIGNoYW5nZSBob3cgYSBtYXRjaGVkIHJlcXVlc3QgaXMgaGFuZGxlZC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRodHRwQmFja2VuZCN3aGVuUFVUXG4gKiBAbW9kdWxlIG5nTW9ja0UyRVxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgbmV3IGJhY2tlbmQgZGVmaW5pdGlvbiBmb3IgUFVUIHJlcXVlc3RzLiAgRm9yIG1vcmUgaW5mbyBzZWUgYHdoZW4oKWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfGZ1bmN0aW9uKHN0cmluZyl9IHVybCBIVFRQIHVybCBvciBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgdXJsXG4gKiAgIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIHVybCBtYXRjaGVzIHRoZSBjdXJyZW50IGRlZmluaXRpb24uXG4gKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwKT19IGRhdGEgSFRUUCByZXF1ZXN0IGJvZHkuXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oT2JqZWN0KSk9fSBoZWFkZXJzIEhUVFAgaGVhZGVycy5cbiAqIEByZXR1cm5zIHtyZXF1ZXN0SGFuZGxlcn0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgcmVzcG9uZGAgYW5kIGBwYXNzVGhyb3VnaGAgbWV0aG9kcyB0aGF0XG4gKiAgIGNvbnRyb2wgaG93IGEgbWF0Y2hlZCByZXF1ZXN0IGlzIGhhbmRsZWQuIFlvdSBjYW4gc2F2ZSB0aGlzIG9iamVjdCBmb3IgbGF0ZXIgdXNlIGFuZCBpbnZva2VcbiAqICAgYHJlc3BvbmRgIG9yIGBwYXNzVGhyb3VnaGAgYWdhaW4gaW4gb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGh0dHBCYWNrZW5kI3doZW5QQVRDSFxuICogQG1vZHVsZSBuZ01vY2tFMkVcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhIG5ldyBiYWNrZW5kIGRlZmluaXRpb24gZm9yIFBBVENIIHJlcXVlc3RzLiAgRm9yIG1vcmUgaW5mbyBzZWUgYHdoZW4oKWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfGZ1bmN0aW9uKHN0cmluZyl9IHVybCBIVFRQIHVybCBvciBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgdXJsXG4gKiAgIGFuZCByZXR1cm5zIHRydWUgaWYgdGhlIHVybCBtYXRjaGVzIHRoZSBjdXJyZW50IGRlZmluaXRpb24uXG4gKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwKT19IGRhdGEgSFRUUCByZXF1ZXN0IGJvZHkuXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oT2JqZWN0KSk9fSBoZWFkZXJzIEhUVFAgaGVhZGVycy5cbiAqIEByZXR1cm5zIHtyZXF1ZXN0SGFuZGxlcn0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgcmVzcG9uZGAgYW5kIGBwYXNzVGhyb3VnaGAgbWV0aG9kcyB0aGF0XG4gKiAgIGNvbnRyb2wgaG93IGEgbWF0Y2hlZCByZXF1ZXN0IGlzIGhhbmRsZWQuIFlvdSBjYW4gc2F2ZSB0aGlzIG9iamVjdCBmb3IgbGF0ZXIgdXNlIGFuZCBpbnZva2VcbiAqICAgYHJlc3BvbmRgIG9yIGBwYXNzVGhyb3VnaGAgYWdhaW4gaW4gb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGh0dHBCYWNrZW5kI3doZW5KU09OUFxuICogQG1vZHVsZSBuZ01vY2tFMkVcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhIG5ldyBiYWNrZW5kIGRlZmluaXRpb24gZm9yIEpTT05QIHJlcXVlc3RzLiBGb3IgbW9yZSBpbmZvIHNlZSBgd2hlbigpYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB8ZnVuY3Rpb24oc3RyaW5nKX0gdXJsIEhUVFAgdXJsIG9yIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSB1cmxcbiAqICAgYW5kIHJldHVybnMgdHJ1ZSBpZiB0aGUgdXJsIG1hdGNoZXMgdGhlIGN1cnJlbnQgZGVmaW5pdGlvbi5cbiAqIEByZXR1cm5zIHtyZXF1ZXN0SGFuZGxlcn0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBgcmVzcG9uZGAgYW5kIGBwYXNzVGhyb3VnaGAgbWV0aG9kcyB0aGF0XG4gKiAgIGNvbnRyb2wgaG93IGEgbWF0Y2hlZCByZXF1ZXN0IGlzIGhhbmRsZWQuIFlvdSBjYW4gc2F2ZSB0aGlzIG9iamVjdCBmb3IgbGF0ZXIgdXNlIGFuZCBpbnZva2VcbiAqICAgYHJlc3BvbmRgIG9yIGBwYXNzVGhyb3VnaGAgYWdhaW4gaW4gb3JkZXIgdG8gY2hhbmdlIGhvdyBhIG1hdGNoZWQgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICovXG5hbmd1bGFyLm1vY2suZTJlID0ge307XG5hbmd1bGFyLm1vY2suZTJlLiRodHRwQmFja2VuZERlY29yYXRvciA9XG4gIFsnJHJvb3RTY29wZScsICckdGltZW91dCcsICckZGVsZWdhdGUnLCAnJGJyb3dzZXInLCBjcmVhdGVIdHRwQmFja2VuZE1vY2tdO1xuXG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lICRyb290U2NvcGUuU2NvcGVcbiAqIEBtb2R1bGUgbmdNb2NrXG4gKiBAZGVzY3JpcHRpb25cbiAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIFNjb3BlfSB0eXBlIGRlY29yYXRlZCB3aXRoIGhlbHBlciBtZXRob2RzIHVzZWZ1bCBmb3IgdGVzdGluZy4gVGhlc2VcbiAqIG1ldGhvZHMgYXJlIGF1dG9tYXRpY2FsbHkgYXZhaWxhYmxlIG9uIGFueSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gaW5zdGFuY2Ugd2hlblxuICogYG5nTW9ja2AgbW9kdWxlIGlzIGxvYWRlZC5cbiAqXG4gKiBJbiBhZGRpdGlvbiB0byBhbGwgdGhlIHJlZ3VsYXIgYFNjb3BlYCBtZXRob2RzLCB0aGUgZm9sbG93aW5nIGhlbHBlciBtZXRob2RzIGFyZSBhdmFpbGFibGU6XG4gKi9cbmFuZ3VsYXIubW9jay4kUm9vdFNjb3BlRGVjb3JhdG9yID0gWyckZGVsZWdhdGUnLCBmdW5jdGlvbigkZGVsZWdhdGUpIHtcblxuICB2YXIgJHJvb3RTY29wZVByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZigkZGVsZWdhdGUpO1xuXG4gICRyb290U2NvcGVQcm90b3R5cGUuJGNvdW50Q2hpbGRTY29wZXMgPSBjb3VudENoaWxkU2NvcGVzO1xuICAkcm9vdFNjb3BlUHJvdG90eXBlLiRjb3VudFdhdGNoZXJzID0gY291bnRXYXRjaGVycztcblxuICByZXR1cm4gJGRlbGVnYXRlO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGNvdW50Q2hpbGRTY29wZXNcbiAgICogQG1vZHVsZSBuZ01vY2tcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvdW50cyBhbGwgdGhlIGRpcmVjdCBhbmQgaW5kaXJlY3QgY2hpbGQgc2NvcGVzIG9mIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgKlxuICAgKiBUaGUgY3VycmVudCBzY29wZSBpcyBleGNsdWRlZCBmcm9tIHRoZSBjb3VudC4gVGhlIGNvdW50IGluY2x1ZGVzIGFsbCBpc29sYXRlIGNoaWxkIHNjb3Blcy5cbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn0gVG90YWwgbnVtYmVyIG9mIGNoaWxkIHNjb3Blcy5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50Q2hpbGRTY29wZXMoKSB7XG4gICAgLy8ganNoaW50IHZhbGlkdGhpczogdHJ1ZVxuICAgIHZhciBjb3VudCA9IDA7IC8vIGV4Y2x1ZGUgdGhlIGN1cnJlbnQgc2NvcGVcbiAgICB2YXIgcGVuZGluZ0NoaWxkSGVhZHMgPSBbdGhpcy4kJGNoaWxkSGVhZF07XG4gICAgdmFyIGN1cnJlbnRTY29wZTtcblxuICAgIHdoaWxlIChwZW5kaW5nQ2hpbGRIZWFkcy5sZW5ndGgpIHtcbiAgICAgIGN1cnJlbnRTY29wZSA9IHBlbmRpbmdDaGlsZEhlYWRzLnNoaWZ0KCk7XG5cbiAgICAgIHdoaWxlIChjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgY291bnQgKz0gMTtcbiAgICAgICAgcGVuZGluZ0NoaWxkSGVhZHMucHVzaChjdXJyZW50U2NvcGUuJCRjaGlsZEhlYWQpO1xuICAgICAgICBjdXJyZW50U2NvcGUgPSBjdXJyZW50U2NvcGUuJCRuZXh0U2libGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY291bnQ7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGNvdW50V2F0Y2hlcnNcbiAgICogQG1vZHVsZSBuZ01vY2tcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvdW50cyBhbGwgdGhlIHdhdGNoZXJzIG9mIGRpcmVjdCBhbmQgaW5kaXJlY3QgY2hpbGQgc2NvcGVzIG9mIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgKlxuICAgKiBUaGUgd2F0Y2hlcnMgb2YgdGhlIGN1cnJlbnQgc2NvcGUgYXJlIGluY2x1ZGVkIGluIHRoZSBjb3VudCBhbmQgc28gYXJlIGFsbCB0aGUgd2F0Y2hlcnMgb2ZcbiAgICogaXNvbGF0ZSBjaGlsZCBzY29wZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFRvdGFsIG51bWJlciBvZiB3YXRjaGVycy5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50V2F0Y2hlcnMoKSB7XG4gICAgLy8ganNoaW50IHZhbGlkdGhpczogdHJ1ZVxuICAgIHZhciBjb3VudCA9IHRoaXMuJCR3YXRjaGVycyA/IHRoaXMuJCR3YXRjaGVycy5sZW5ndGggOiAwOyAvLyBpbmNsdWRlIHRoZSBjdXJyZW50IHNjb3BlXG4gICAgdmFyIHBlbmRpbmdDaGlsZEhlYWRzID0gW3RoaXMuJCRjaGlsZEhlYWRdO1xuICAgIHZhciBjdXJyZW50U2NvcGU7XG5cbiAgICB3aGlsZSAocGVuZGluZ0NoaWxkSGVhZHMubGVuZ3RoKSB7XG4gICAgICBjdXJyZW50U2NvcGUgPSBwZW5kaW5nQ2hpbGRIZWFkcy5zaGlmdCgpO1xuXG4gICAgICB3aGlsZSAoY3VycmVudFNjb3BlKSB7XG4gICAgICAgIGNvdW50ICs9IGN1cnJlbnRTY29wZS4kJHdhdGNoZXJzID8gY3VycmVudFNjb3BlLiQkd2F0Y2hlcnMubGVuZ3RoIDogMDtcbiAgICAgICAgcGVuZGluZ0NoaWxkSGVhZHMucHVzaChjdXJyZW50U2NvcGUuJCRjaGlsZEhlYWQpO1xuICAgICAgICBjdXJyZW50U2NvcGUgPSBjdXJyZW50U2NvcGUuJCRuZXh0U2libGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY291bnQ7XG4gIH1cbn1dO1xuXG5cbmlmICh3aW5kb3cuamFzbWluZSB8fCB3aW5kb3cubW9jaGEpIHtcblxuICB2YXIgY3VycmVudFNwZWMgPSBudWxsLFxuICAgICAgYW5ub3RhdGVkRnVuY3Rpb25zID0gW10sXG4gICAgICBpc1NwZWNSdW5uaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhIWN1cnJlbnRTcGVjO1xuICAgICAgfTtcblxuICBhbmd1bGFyLm1vY2suJCRhbm5vdGF0ZSA9IGFuZ3VsYXIuaW5qZWN0b3IuJCRhbm5vdGF0ZTtcbiAgYW5ndWxhci5pbmplY3Rvci4kJGFubm90YXRlID0gZnVuY3Rpb24oZm4pIHtcbiAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmICFmbi4kaW5qZWN0KSB7XG4gICAgICBhbm5vdGF0ZWRGdW5jdGlvbnMucHVzaChmbik7XG4gICAgfVxuICAgIHJldHVybiBhbmd1bGFyLm1vY2suJCRhbm5vdGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuXG5cbiAgKHdpbmRvdy5iZWZvcmVFYWNoIHx8IHdpbmRvdy5zZXR1cCkoZnVuY3Rpb24oKSB7XG4gICAgYW5ub3RhdGVkRnVuY3Rpb25zID0gW107XG4gICAgY3VycmVudFNwZWMgPSB0aGlzO1xuICB9KTtcblxuICAod2luZG93LmFmdGVyRWFjaCB8fCB3aW5kb3cudGVhcmRvd24pKGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmplY3RvciA9IGN1cnJlbnRTcGVjLiRpbmplY3RvcjtcblxuICAgIGFubm90YXRlZEZ1bmN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGZuKSB7XG4gICAgICBkZWxldGUgZm4uJGluamVjdDtcbiAgICB9KTtcblxuICAgIGFuZ3VsYXIuZm9yRWFjaChjdXJyZW50U3BlYy4kbW9kdWxlcywgZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBpZiAobW9kdWxlICYmIG1vZHVsZS4kJGhhc2hLZXkpIHtcbiAgICAgICAgbW9kdWxlLiQkaGFzaEtleSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGN1cnJlbnRTcGVjLiRpbmplY3RvciA9IG51bGw7XG4gICAgY3VycmVudFNwZWMuJG1vZHVsZXMgPSBudWxsO1xuICAgIGN1cnJlbnRTcGVjID0gbnVsbDtcblxuICAgIGlmIChpbmplY3Rvcikge1xuICAgICAgaW5qZWN0b3IuZ2V0KCckcm9vdEVsZW1lbnQnKS5vZmYoKTtcbiAgICB9XG5cbiAgICAvLyBjbGVhbiB1cCBqcXVlcnkncyBmcmFnbWVudCBjYWNoZVxuICAgIGFuZ3VsYXIuZm9yRWFjaChhbmd1bGFyLmVsZW1lbnQuZnJhZ21lbnRzLCBmdW5jdGlvbih2YWwsIGtleSkge1xuICAgICAgZGVsZXRlIGFuZ3VsYXIuZWxlbWVudC5mcmFnbWVudHNba2V5XTtcbiAgICB9KTtcblxuICAgIE1vY2tYaHIuJCRsYXN0SW5zdGFuY2UgPSBudWxsO1xuXG4gICAgYW5ndWxhci5mb3JFYWNoKGFuZ3VsYXIuY2FsbGJhY2tzLCBmdW5jdGlvbih2YWwsIGtleSkge1xuICAgICAgZGVsZXRlIGFuZ3VsYXIuY2FsbGJhY2tzW2tleV07XG4gICAgfSk7XG4gICAgYW5ndWxhci5jYWxsYmFja3MuY291bnRlciA9IDA7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgYW5ndWxhci5tb2NrLm1vZHVsZVxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogKk5PVEUqOiBUaGlzIGZ1bmN0aW9uIGlzIGFsc28gcHVibGlzaGVkIG9uIHdpbmRvdyBmb3IgZWFzeSBhY2Nlc3MuPGJyPlxuICAgKiAqTk9URSo6IFRoaXMgZnVuY3Rpb24gaXMgZGVjbGFyZWQgT05MWSBXSEVOIHJ1bm5pbmcgdGVzdHMgd2l0aCBqYXNtaW5lIG9yIG1vY2hhXG4gICAqXG4gICAqIFRoaXMgZnVuY3Rpb24gcmVnaXN0ZXJzIGEgbW9kdWxlIGNvbmZpZ3VyYXRpb24gY29kZS4gSXQgY29sbGVjdHMgdGhlIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb25cbiAgICogd2hpY2ggd2lsbCBiZSB1c2VkIHdoZW4gdGhlIGluamVjdG9yIGlzIGNyZWF0ZWQgYnkge0BsaW5rIGFuZ3VsYXIubW9jay5pbmplY3QgaW5qZWN0fS5cbiAgICpcbiAgICogU2VlIHtAbGluayBhbmd1bGFyLm1vY2suaW5qZWN0IGluamVjdH0gZm9yIHVzYWdlIGV4YW1wbGVcbiAgICpcbiAgICogQHBhcmFtIHsuLi4oc3RyaW5nfEZ1bmN0aW9ufE9iamVjdCl9IGZucyBhbnkgbnVtYmVyIG9mIG1vZHVsZXMgd2hpY2ggYXJlIHJlcHJlc2VudGVkIGFzIHN0cmluZ1xuICAgKiAgICAgICAgYWxpYXNlcyBvciBhcyBhbm9ueW1vdXMgbW9kdWxlIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9ucy4gVGhlIG1vZHVsZXMgYXJlIHVzZWQgdG9cbiAgICogICAgICAgIGNvbmZpZ3VyZSB0aGUgaW5qZWN0b3IuIFRoZSAnbmcnIGFuZCAnbmdNb2NrJyBtb2R1bGVzIGFyZSBhdXRvbWF0aWNhbGx5IGxvYWRlZC4gSWYgYW5cbiAgICogICAgICAgIG9iamVjdCBsaXRlcmFsIGlzIHBhc3NlZCBlYWNoIGtleS12YWx1ZSBwYWlyIHdpbGwgYmUgcmVnaXN0ZXJlZCBvbiB0aGUgbW9kdWxlIHZpYVxuICAgKiAgICAgICAge0BsaW5rIGF1dG8uJHByb3ZpZGUgJHByb3ZpZGV9LnZhbHVlLCB0aGUga2V5IGJlaW5nIHRoZSBzdHJpbmcgbmFtZSAob3IgdG9rZW4pIHRvIGFzc29jaWF0ZVxuICAgKiAgICAgICAgd2l0aCB0aGUgdmFsdWUgb24gdGhlIGluamVjdG9yLlxuICAgKi9cbiAgd2luZG93Lm1vZHVsZSA9IGFuZ3VsYXIubW9jay5tb2R1bGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbW9kdWxlRm5zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICByZXR1cm4gaXNTcGVjUnVubmluZygpID8gd29ya0ZuKCkgOiB3b3JrRm47XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgZnVuY3Rpb24gd29ya0ZuKCkge1xuICAgICAgaWYgKGN1cnJlbnRTcGVjLiRpbmplY3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luamVjdG9yIGFscmVhZHkgY3JlYXRlZCwgY2FuIG5vdCByZWdpc3RlciBhIG1vZHVsZSEnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtb2R1bGVzID0gY3VycmVudFNwZWMuJG1vZHVsZXMgfHwgKGN1cnJlbnRTcGVjLiRtb2R1bGVzID0gW10pO1xuICAgICAgICBhbmd1bGFyLmZvckVhY2gobW9kdWxlRm5zLCBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgICAgICBpZiAoYW5ndWxhci5pc09iamVjdChtb2R1bGUpICYmICFhbmd1bGFyLmlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgICAgICAgbW9kdWxlcy5wdXNoKGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChtb2R1bGUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAkcHJvdmlkZS52YWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlcy5wdXNoKG1vZHVsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBhbmd1bGFyLm1vY2suaW5qZWN0XG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiAqTk9URSo6IFRoaXMgZnVuY3Rpb24gaXMgYWxzbyBwdWJsaXNoZWQgb24gd2luZG93IGZvciBlYXN5IGFjY2Vzcy48YnI+XG4gICAqICpOT1RFKjogVGhpcyBmdW5jdGlvbiBpcyBkZWNsYXJlZCBPTkxZIFdIRU4gcnVubmluZyB0ZXN0cyB3aXRoIGphc21pbmUgb3IgbW9jaGFcbiAgICpcbiAgICogVGhlIGluamVjdCBmdW5jdGlvbiB3cmFwcyBhIGZ1bmN0aW9uIGludG8gYW4gaW5qZWN0YWJsZSBmdW5jdGlvbi4gVGhlIGluamVjdCgpIGNyZWF0ZXMgbmV3XG4gICAqIGluc3RhbmNlIG9mIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9IHBlciB0ZXN0LCB3aGljaCBpcyB0aGVuIHVzZWQgZm9yXG4gICAqIHJlc29sdmluZyByZWZlcmVuY2VzLlxuICAgKlxuICAgKlxuICAgKiAjIyBSZXNvbHZpbmcgUmVmZXJlbmNlcyAoVW5kZXJzY29yZSBXcmFwcGluZylcbiAgICogT2Z0ZW4sIHdlIHdvdWxkIGxpa2UgdG8gaW5qZWN0IGEgcmVmZXJlbmNlIG9uY2UsIGluIGEgYGJlZm9yZUVhY2goKWAgYmxvY2sgYW5kIHJldXNlIHRoaXNcbiAgICogaW4gbXVsdGlwbGUgYGl0KClgIGNsYXVzZXMuIFRvIGJlIGFibGUgdG8gZG8gdGhpcyB3ZSBtdXN0IGFzc2lnbiB0aGUgcmVmZXJlbmNlIHRvIGEgdmFyaWFibGVcbiAgICogdGhhdCBpcyBkZWNsYXJlZCBpbiB0aGUgc2NvcGUgb2YgdGhlIGBkZXNjcmliZSgpYCBibG9jay4gU2luY2Ugd2Ugd291bGQsIG1vc3QgbGlrZWx5LCB3YW50XG4gICAqIHRoZSB2YXJpYWJsZSB0byBoYXZlIHRoZSBzYW1lIG5hbWUgb2YgdGhlIHJlZmVyZW5jZSB3ZSBoYXZlIGEgcHJvYmxlbSwgc2luY2UgdGhlIHBhcmFtZXRlclxuICAgKiB0byB0aGUgYGluamVjdCgpYCBmdW5jdGlvbiB3b3VsZCBoaWRlIHRoZSBvdXRlciB2YXJpYWJsZS5cbiAgICpcbiAgICogVG8gaGVscCB3aXRoIHRoaXMsIHRoZSBpbmplY3RlZCBwYXJhbWV0ZXJzIGNhbiwgb3B0aW9uYWxseSwgYmUgZW5jbG9zZWQgd2l0aCB1bmRlcnNjb3Jlcy5cbiAgICogVGhlc2UgYXJlIGlnbm9yZWQgYnkgdGhlIGluamVjdG9yIHdoZW4gdGhlIHJlZmVyZW5jZSBuYW1lIGlzIHJlc29sdmVkLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgdGhlIHBhcmFtZXRlciBgX215U2VydmljZV9gIHdvdWxkIGJlIHJlc29sdmVkIGFzIHRoZSByZWZlcmVuY2UgYG15U2VydmljZWAuXG4gICAqIFNpbmNlIGl0IGlzIGF2YWlsYWJsZSBpbiB0aGUgZnVuY3Rpb24gYm9keSBhcyBfbXlTZXJ2aWNlXywgd2UgY2FuIHRoZW4gYXNzaWduIGl0IHRvIGEgdmFyaWFibGVcbiAgICogZGVmaW5lZCBpbiBhbiBvdXRlciBzY29wZS5cbiAgICpcbiAgICogYGBgXG4gICAqIC8vIERlZmluZWQgb3V0IHJlZmVyZW5jZSB2YXJpYWJsZSBvdXRzaWRlXG4gICAqIHZhciBteVNlcnZpY2U7XG4gICAqXG4gICAqIC8vIFdyYXAgdGhlIHBhcmFtZXRlciBpbiB1bmRlcnNjb3Jlc1xuICAgKiBiZWZvcmVFYWNoKCBpbmplY3QoIGZ1bmN0aW9uKF9teVNlcnZpY2VfKXtcbiAgICogICBteVNlcnZpY2UgPSBfbXlTZXJ2aWNlXztcbiAgICogfSkpO1xuICAgKlxuICAgKiAvLyBVc2UgbXlTZXJ2aWNlIGluIGEgc2VyaWVzIG9mIHRlc3RzLlxuICAgKiBpdCgnbWFrZXMgdXNlIG9mIG15U2VydmljZScsIGZ1bmN0aW9uKCkge1xuICAgKiAgIG15U2VydmljZS5kb1N0dWZmKCk7XG4gICAqIH0pO1xuICAgKlxuICAgKiBgYGBcbiAgICpcbiAgICogU2VlIGFsc28ge0BsaW5rIGFuZ3VsYXIubW9jay5tb2R1bGUgYW5ndWxhci5tb2NrLm1vZHVsZX1cbiAgICpcbiAgICogIyMgRXhhbXBsZVxuICAgKiBFeGFtcGxlIG9mIHdoYXQgYSB0eXBpY2FsIGphc21pbmUgdGVzdHMgbG9va3MgbGlrZSB3aXRoIHRoZSBpbmplY3QgbWV0aG9kLlxuICAgKiBgYGBqc1xuICAgKlxuICAgKiAgIGFuZ3VsYXIubW9kdWxlKCdteUFwcGxpY2F0aW9uTW9kdWxlJywgW10pXG4gICAqICAgICAgIC52YWx1ZSgnbW9kZScsICdhcHAnKVxuICAgKiAgICAgICAudmFsdWUoJ3ZlcnNpb24nLCAndjEuMC4xJyk7XG4gICAqXG4gICAqXG4gICAqICAgZGVzY3JpYmUoJ015QXBwJywgZnVuY3Rpb24oKSB7XG4gICAqXG4gICAqICAgICAvLyBZb3UgbmVlZCB0byBsb2FkIG1vZHVsZXMgdGhhdCB5b3Ugd2FudCB0byB0ZXN0LFxuICAgKiAgICAgLy8gaXQgbG9hZHMgb25seSB0aGUgXCJuZ1wiIG1vZHVsZSBieSBkZWZhdWx0LlxuICAgKiAgICAgYmVmb3JlRWFjaChtb2R1bGUoJ215QXBwbGljYXRpb25Nb2R1bGUnKSk7XG4gICAqXG4gICAqXG4gICAqICAgICAvLyBpbmplY3QoKSBpcyB1c2VkIHRvIGluamVjdCBhcmd1bWVudHMgb2YgYWxsIGdpdmVuIGZ1bmN0aW9uc1xuICAgKiAgICAgaXQoJ3Nob3VsZCBwcm92aWRlIGEgdmVyc2lvbicsIGluamVjdChmdW5jdGlvbihtb2RlLCB2ZXJzaW9uKSB7XG4gICAqICAgICAgIGV4cGVjdCh2ZXJzaW9uKS50b0VxdWFsKCd2MS4wLjEnKTtcbiAgICogICAgICAgZXhwZWN0KG1vZGUpLnRvRXF1YWwoJ2FwcCcpO1xuICAgKiAgICAgfSkpO1xuICAgKlxuICAgKlxuICAgKiAgICAgLy8gVGhlIGluamVjdCBhbmQgbW9kdWxlIG1ldGhvZCBjYW4gYWxzbyBiZSB1c2VkIGluc2lkZSBvZiB0aGUgaXQgb3IgYmVmb3JlRWFjaFxuICAgKiAgICAgaXQoJ3Nob3VsZCBvdmVycmlkZSBhIHZlcnNpb24gYW5kIHRlc3QgdGhlIG5ldyB2ZXJzaW9uIGlzIGluamVjdGVkJywgZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIC8vIG1vZHVsZSgpIHRha2VzIGZ1bmN0aW9ucyBvciBzdHJpbmdzIChtb2R1bGUgYWxpYXNlcylcbiAgICogICAgICAgbW9kdWxlKGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gICAqICAgICAgICAgJHByb3ZpZGUudmFsdWUoJ3ZlcnNpb24nLCAnb3ZlcnJpZGRlbicpOyAvLyBvdmVycmlkZSB2ZXJzaW9uIGhlcmVcbiAgICogICAgICAgfSk7XG4gICAqXG4gICAqICAgICAgIGluamVjdChmdW5jdGlvbih2ZXJzaW9uKSB7XG4gICAqICAgICAgICAgZXhwZWN0KHZlcnNpb24pLnRvRXF1YWwoJ292ZXJyaWRkZW4nKTtcbiAgICogICAgICAgfSk7XG4gICAqICAgICB9KTtcbiAgICogICB9KTtcbiAgICpcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZucyBhbnkgbnVtYmVyIG9mIGZ1bmN0aW9ucyB3aGljaCB3aWxsIGJlIGluamVjdGVkIHVzaW5nIHRoZSBpbmplY3Rvci5cbiAgICovXG5cblxuXG4gIHZhciBFcnJvckFkZGluZ0RlY2xhcmF0aW9uTG9jYXRpb25TdGFjayA9IGZ1bmN0aW9uKGUsIGVycm9yRm9yU3RhY2spIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBlLm1lc3NhZ2U7XG4gICAgdGhpcy5uYW1lID0gZS5uYW1lO1xuICAgIGlmIChlLmxpbmUpIHRoaXMubGluZSA9IGUubGluZTtcbiAgICBpZiAoZS5zb3VyY2VJZCkgdGhpcy5zb3VyY2VJZCA9IGUuc291cmNlSWQ7XG4gICAgaWYgKGUuc3RhY2sgJiYgZXJyb3JGb3JTdGFjaylcbiAgICAgIHRoaXMuc3RhY2sgPSBlLnN0YWNrICsgJ1xcbicgKyBlcnJvckZvclN0YWNrLnN0YWNrO1xuICAgIGlmIChlLnN0YWNrQXJyYXkpIHRoaXMuc3RhY2tBcnJheSA9IGUuc3RhY2tBcnJheTtcbiAgfTtcbiAgRXJyb3JBZGRpbmdEZWNsYXJhdGlvbkxvY2F0aW9uU3RhY2sucHJvdG90eXBlLnRvU3RyaW5nID0gRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4gIHdpbmRvdy5pbmplY3QgPSBhbmd1bGFyLm1vY2suaW5qZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJsb2NrRm5zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICB2YXIgZXJyb3JGb3JTdGFjayA9IG5ldyBFcnJvcignRGVjbGFyYXRpb24gTG9jYXRpb24nKTtcbiAgICByZXR1cm4gaXNTcGVjUnVubmluZygpID8gd29ya0ZuLmNhbGwoY3VycmVudFNwZWMpIDogd29ya0ZuO1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGZ1bmN0aW9uIHdvcmtGbigpIHtcbiAgICAgIHZhciBtb2R1bGVzID0gY3VycmVudFNwZWMuJG1vZHVsZXMgfHwgW107XG4gICAgICB2YXIgc3RyaWN0RGkgPSAhIWN1cnJlbnRTcGVjLiRpbmplY3RvclN0cmljdDtcbiAgICAgIG1vZHVsZXMudW5zaGlmdCgnbmdNb2NrJyk7XG4gICAgICBtb2R1bGVzLnVuc2hpZnQoJ25nJyk7XG4gICAgICB2YXIgaW5qZWN0b3IgPSBjdXJyZW50U3BlYy4kaW5qZWN0b3I7XG4gICAgICBpZiAoIWluamVjdG9yKSB7XG4gICAgICAgIGlmIChzdHJpY3REaSkge1xuICAgICAgICAgIC8vIElmIHN0cmljdERpIGlzIGVuYWJsZWQsIGFubm90YXRlIHRoZSBwcm92aWRlckluamVjdG9yIGJsb2Nrc1xuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChtb2R1bGVzLCBmdW5jdGlvbihtb2R1bGVGbikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGVGbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgIGFuZ3VsYXIuaW5qZWN0b3IuJCRhbm5vdGF0ZShtb2R1bGVGbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5qZWN0b3IgPSBjdXJyZW50U3BlYy4kaW5qZWN0b3IgPSBhbmd1bGFyLmluamVjdG9yKG1vZHVsZXMsIHN0cmljdERpKTtcbiAgICAgICAgY3VycmVudFNwZWMuJGluamVjdG9yU3RyaWN0ID0gc3RyaWN0RGk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBibG9ja0Zucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGlmIChjdXJyZW50U3BlYy4kaW5qZWN0b3JTdHJpY3QpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgaW5qZWN0b3IgaXMgc3RyaWN0IC8gc3RyaWN0RGksIGFuZCB0aGUgc3BlYyB3YW50cyB0byBpbmplY3QgdXNpbmcgYXV0b21hdGljXG4gICAgICAgICAgLy8gYW5ub3RhdGlvbiwgdGhlbiBhbm5vdGF0ZSB0aGUgZnVuY3Rpb24gaGVyZS5cbiAgICAgICAgICBpbmplY3Rvci5hbm5vdGF0ZShibG9ja0Zuc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvKiBqc2hpbnQgLVcwNDAgKi8vKiBKYXNtaW5lIGV4cGxpY2l0bHkgcHJvdmlkZXMgYSBgdGhpc2Agb2JqZWN0IHdoZW4gY2FsbGluZyBmdW5jdGlvbnMgKi9cbiAgICAgICAgICBpbmplY3Rvci5pbnZva2UoYmxvY2tGbnNbaV0gfHwgYW5ndWxhci5ub29wLCB0aGlzKTtcbiAgICAgICAgICAvKiBqc2hpbnQgK1cwNDAgKi9cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmIChlLnN0YWNrICYmIGVycm9yRm9yU3RhY2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvckFkZGluZ0RlY2xhcmF0aW9uTG9jYXRpb25TdGFjayhlLCBlcnJvckZvclN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBlcnJvckZvclN0YWNrID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuXG4gIGFuZ3VsYXIubW9jay5pbmplY3Quc3RyaWN0RGkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA/ICEhdmFsdWUgOiB0cnVlO1xuICAgIHJldHVybiBpc1NwZWNSdW5uaW5nKCkgPyB3b3JrRm4oKSA6IHdvcmtGbjtcblxuICAgIGZ1bmN0aW9uIHdvcmtGbigpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gY3VycmVudFNwZWMuJGluamVjdG9yU3RyaWN0KSB7XG4gICAgICAgIGlmIChjdXJyZW50U3BlYy4kaW5qZWN0b3IpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luamVjdG9yIGFscmVhZHkgY3JlYXRlZCwgY2FuIG5vdCBtb2RpZnkgc3RyaWN0IGFubm90YXRpb25zJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudFNwZWMuJGluamVjdG9yU3RyaWN0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cblxufSkod2luZG93LCB3aW5kb3cuYW5ndWxhcik7XG4iLCJyZXF1aXJlKCcuL2FuZ3VsYXItbW9ja3MnKTtcbm1vZHVsZS5leHBvcnRzID0gJ25nQW5pbWF0ZU1vY2snO1xuIiwicmVxdWlyZSgnLi9hbmd1bGFyLW1vY2tzJyk7XG5tb2R1bGUuZXhwb3J0cyA9ICduZ01vY2snO1xuIiwicmVxdWlyZSgnLi9hbmd1bGFyLW1vY2tzJyk7XG5tb2R1bGUuZXhwb3J0cyA9ICduZ01vY2tFMkUnO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuNC45XG4gKiAoYykgMjAxMC0yMDE1IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbih3aW5kb3csIGFuZ3VsYXIsIHVuZGVmaW5lZCkgeyd1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBuZ1JvdXRlXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiAjIG5nUm91dGVcbiAqXG4gKiBUaGUgYG5nUm91dGVgIG1vZHVsZSBwcm92aWRlcyByb3V0aW5nIGFuZCBkZWVwbGlua2luZyBzZXJ2aWNlcyBhbmQgZGlyZWN0aXZlcyBmb3IgYW5ndWxhciBhcHBzLlxuICpcbiAqICMjIEV4YW1wbGVcbiAqIFNlZSB7QGxpbmsgbmdSb3V0ZS4kcm91dGUjZXhhbXBsZSAkcm91dGV9IGZvciBhbiBleGFtcGxlIG9mIGNvbmZpZ3VyaW5nIGFuZCB1c2luZyBgbmdSb3V0ZWAuXG4gKlxuICpcbiAqIDxkaXYgZG9jLW1vZHVsZS1jb21wb25lbnRzPVwibmdSb3V0ZVwiPjwvZGl2PlxuICovXG4gLyogZ2xvYmFsIC1uZ1JvdXRlTW9kdWxlICovXG52YXIgbmdSb3V0ZU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCduZ1JvdXRlJywgWyduZyddKS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyKCckcm91dGUnLCAkUm91dGVQcm92aWRlciksXG4gICAgJHJvdXRlTWluRXJyID0gYW5ndWxhci4kJG1pbkVycignbmdSb3V0ZScpO1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHJvdXRlUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBVc2VkIGZvciBjb25maWd1cmluZyByb3V0ZXMuXG4gKlxuICogIyMgRXhhbXBsZVxuICogU2VlIHtAbGluayBuZ1JvdXRlLiRyb3V0ZSNleGFtcGxlICRyb3V0ZX0gZm9yIGFuIGV4YW1wbGUgb2YgY29uZmlndXJpbmcgYW5kIHVzaW5nIGBuZ1JvdXRlYC5cbiAqXG4gKiAjIyBEZXBlbmRlbmNpZXNcbiAqIFJlcXVpcmVzIHRoZSB7QGxpbmsgbmdSb3V0ZSBgbmdSb3V0ZWB9IG1vZHVsZSB0byBiZSBpbnN0YWxsZWQuXG4gKi9cbmZ1bmN0aW9uICRSb3V0ZVByb3ZpZGVyKCkge1xuICBmdW5jdGlvbiBpbmhlcml0KHBhcmVudCwgZXh0cmEpIHtcbiAgICByZXR1cm4gYW5ndWxhci5leHRlbmQoT2JqZWN0LmNyZWF0ZShwYXJlbnQpLCBleHRyYSk7XG4gIH1cblxuICB2YXIgcm91dGVzID0ge307XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHJvdXRlUHJvdmlkZXIjd2hlblxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBSb3V0ZSBwYXRoIChtYXRjaGVkIGFnYWluc3QgYCRsb2NhdGlvbi5wYXRoYCkuIElmIGAkbG9jYXRpb24ucGF0aGBcbiAgICogICAgY29udGFpbnMgcmVkdW5kYW50IHRyYWlsaW5nIHNsYXNoIG9yIGlzIG1pc3Npbmcgb25lLCB0aGUgcm91dGUgd2lsbCBzdGlsbCBtYXRjaCBhbmQgdGhlXG4gICAqICAgIGAkbG9jYXRpb24ucGF0aGAgd2lsbCBiZSB1cGRhdGVkIHRvIGFkZCBvciBkcm9wIHRoZSB0cmFpbGluZyBzbGFzaCB0byBleGFjdGx5IG1hdGNoIHRoZVxuICAgKiAgICByb3V0ZSBkZWZpbml0aW9uLlxuICAgKlxuICAgKiAgICAqIGBwYXRoYCBjYW4gY29udGFpbiBuYW1lZCBncm91cHMgc3RhcnRpbmcgd2l0aCBhIGNvbG9uOiBlLmcuIGA6bmFtZWAuIEFsbCBjaGFyYWN0ZXJzIHVwXG4gICAqICAgICAgICB0byB0aGUgbmV4dCBzbGFzaCBhcmUgbWF0Y2hlZCBhbmQgc3RvcmVkIGluIGAkcm91dGVQYXJhbXNgIHVuZGVyIHRoZSBnaXZlbiBgbmFtZWBcbiAgICogICAgICAgIHdoZW4gdGhlIHJvdXRlIG1hdGNoZXMuXG4gICAqICAgICogYHBhdGhgIGNhbiBjb250YWluIG5hbWVkIGdyb3VwcyBzdGFydGluZyB3aXRoIGEgY29sb24gYW5kIGVuZGluZyB3aXRoIGEgc3RhcjpcbiAgICogICAgICAgIGUuZy5gOm5hbWUqYC4gQWxsIGNoYXJhY3RlcnMgYXJlIGVhZ2VybHkgc3RvcmVkIGluIGAkcm91dGVQYXJhbXNgIHVuZGVyIHRoZSBnaXZlbiBgbmFtZWBcbiAgICogICAgICAgIHdoZW4gdGhlIHJvdXRlIG1hdGNoZXMuXG4gICAqICAgICogYHBhdGhgIGNhbiBjb250YWluIG9wdGlvbmFsIG5hbWVkIGdyb3VwcyB3aXRoIGEgcXVlc3Rpb24gbWFyazogZS5nLmA6bmFtZT9gLlxuICAgKlxuICAgKiAgICBGb3IgZXhhbXBsZSwgcm91dGVzIGxpa2UgYC9jb2xvci86Y29sb3IvbGFyZ2Vjb2RlLzpsYXJnZWNvZGUqXFwvZWRpdGAgd2lsbCBtYXRjaFxuICAgKiAgICBgL2NvbG9yL2Jyb3duL2xhcmdlY29kZS9jb2RlL3dpdGgvc2xhc2hlcy9lZGl0YCBhbmQgZXh0cmFjdDpcbiAgICpcbiAgICogICAgKiBgY29sb3I6IGJyb3duYFxuICAgKiAgICAqIGBsYXJnZWNvZGU6IGNvZGUvd2l0aC9zbGFzaGVzYC5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHJvdXRlIE1hcHBpbmcgaW5mb3JtYXRpb24gdG8gYmUgYXNzaWduZWQgdG8gYCRyb3V0ZS5jdXJyZW50YCBvbiByb3V0ZVxuICAgKiAgICBtYXRjaC5cbiAgICpcbiAgICogICAgT2JqZWN0IHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgIC0gYGNvbnRyb2xsZXJgIOKAkyBgeyhzdHJpbmd8ZnVuY3Rpb24oKT19YCDigJMgQ29udHJvbGxlciBmbiB0aGF0IHNob3VsZCBiZSBhc3NvY2lhdGVkIHdpdGhcbiAgICogICAgICBuZXdseSBjcmVhdGVkIHNjb3BlIG9yIHRoZSBuYW1lIG9mIGEge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbnRyb2xsZXIgcmVnaXN0ZXJlZFxuICAgKiAgICAgIGNvbnRyb2xsZXJ9IGlmIHBhc3NlZCBhcyBhIHN0cmluZy5cbiAgICogICAgLSBgY29udHJvbGxlckFzYCDigJMgYHtzdHJpbmc9fWAg4oCTIEFuIGlkZW50aWZpZXIgbmFtZSBmb3IgYSByZWZlcmVuY2UgdG8gdGhlIGNvbnRyb2xsZXIuXG4gICAqICAgICAgSWYgcHJlc2VudCwgdGhlIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgdG8gc2NvcGUgdW5kZXIgdGhlIGBjb250cm9sbGVyQXNgIG5hbWUuXG4gICAqICAgIC0gYHRlbXBsYXRlYCDigJMgYHtzdHJpbmc9fGZ1bmN0aW9uKCk9fWAg4oCTIGh0bWwgdGVtcGxhdGUgYXMgYSBzdHJpbmcgb3IgYSBmdW5jdGlvbiB0aGF0XG4gICAqICAgICAgcmV0dXJucyBhbiBodG1sIHRlbXBsYXRlIGFzIGEgc3RyaW5nIHdoaWNoIHNob3VsZCBiZSB1c2VkIGJ5IHtAbGlua1xuICAgKiAgICAgIG5nUm91dGUuZGlyZWN0aXZlOm5nVmlldyBuZ1ZpZXd9IG9yIHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIG5nSW5jbHVkZX0gZGlyZWN0aXZlcy5cbiAgICogICAgICBUaGlzIHByb3BlcnR5IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgdGVtcGxhdGVVcmxgLlxuICAgKlxuICAgKiAgICAgIElmIGB0ZW1wbGF0ZWAgaXMgYSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gICAqXG4gICAqICAgICAgLSBge0FycmF5LjxPYmplY3Q+fWAgLSByb3V0ZSBwYXJhbWV0ZXJzIGV4dHJhY3RlZCBmcm9tIHRoZSBjdXJyZW50XG4gICAqICAgICAgICBgJGxvY2F0aW9uLnBhdGgoKWAgYnkgYXBwbHlpbmcgdGhlIGN1cnJlbnQgcm91dGVcbiAgICpcbiAgICogICAgLSBgdGVtcGxhdGVVcmxgIOKAkyBge3N0cmluZz18ZnVuY3Rpb24oKT19YCDigJMgcGF0aCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBwYXRoIHRvIGFuIGh0bWxcbiAgICogICAgICB0ZW1wbGF0ZSB0aGF0IHNob3VsZCBiZSB1c2VkIGJ5IHtAbGluayBuZ1JvdXRlLmRpcmVjdGl2ZTpuZ1ZpZXcgbmdWaWV3fS5cbiAgICpcbiAgICogICAgICBJZiBgdGVtcGxhdGVVcmxgIGlzIGEgZnVuY3Rpb24sIGl0IHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICAgKlxuICAgKiAgICAgIC0gYHtBcnJheS48T2JqZWN0Pn1gIC0gcm91dGUgcGFyYW1ldGVycyBleHRyYWN0ZWQgZnJvbSB0aGUgY3VycmVudFxuICAgKiAgICAgICAgYCRsb2NhdGlvbi5wYXRoKClgIGJ5IGFwcGx5aW5nIHRoZSBjdXJyZW50IHJvdXRlXG4gICAqXG4gICAqICAgIC0gYHJlc29sdmVgIC0gYHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24+PX1gIC0gQW4gb3B0aW9uYWwgbWFwIG9mIGRlcGVuZGVuY2llcyB3aGljaCBzaG91bGRcbiAgICogICAgICBiZSBpbmplY3RlZCBpbnRvIHRoZSBjb250cm9sbGVyLiBJZiBhbnkgb2YgdGhlc2UgZGVwZW5kZW5jaWVzIGFyZSBwcm9taXNlcywgdGhlIHJvdXRlclxuICAgKiAgICAgIHdpbGwgd2FpdCBmb3IgdGhlbSBhbGwgdG8gYmUgcmVzb2x2ZWQgb3Igb25lIHRvIGJlIHJlamVjdGVkIGJlZm9yZSB0aGUgY29udHJvbGxlciBpc1xuICAgKiAgICAgIGluc3RhbnRpYXRlZC5cbiAgICogICAgICBJZiBhbGwgdGhlIHByb21pc2VzIGFyZSByZXNvbHZlZCBzdWNjZXNzZnVsbHksIHRoZSB2YWx1ZXMgb2YgdGhlIHJlc29sdmVkIHByb21pc2VzIGFyZVxuICAgKiAgICAgIGluamVjdGVkIGFuZCB7QGxpbmsgbmdSb3V0ZS4kcm91dGUjJHJvdXRlQ2hhbmdlU3VjY2VzcyAkcm91dGVDaGFuZ2VTdWNjZXNzfSBldmVudCBpc1xuICAgKiAgICAgIGZpcmVkLiBJZiBhbnkgb2YgdGhlIHByb21pc2VzIGFyZSByZWplY3RlZCB0aGVcbiAgICogICAgICB7QGxpbmsgbmdSb3V0ZS4kcm91dGUjJHJvdXRlQ2hhbmdlRXJyb3IgJHJvdXRlQ2hhbmdlRXJyb3J9IGV2ZW50IGlzIGZpcmVkLiBUaGUgbWFwIG9iamVjdFxuICAgKiAgICAgIGlzOlxuICAgKlxuICAgKiAgICAgIC0gYGtleWAg4oCTIGB7c3RyaW5nfWA6IGEgbmFtZSBvZiBhIGRlcGVuZGVuY3kgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgY29udHJvbGxlci5cbiAgICogICAgICAtIGBmYWN0b3J5YCAtIGB7c3RyaW5nfGZ1bmN0aW9ufWA6IElmIGBzdHJpbmdgIHRoZW4gaXQgaXMgYW4gYWxpYXMgZm9yIGEgc2VydmljZS5cbiAgICogICAgICAgIE90aGVyd2lzZSBpZiBmdW5jdGlvbiwgdGhlbiBpdCBpcyB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW52b2tlIGluamVjdGVkfVxuICAgKiAgICAgICAgYW5kIHRoZSByZXR1cm4gdmFsdWUgaXMgdHJlYXRlZCBhcyB0aGUgZGVwZW5kZW5jeS4gSWYgdGhlIHJlc3VsdCBpcyBhIHByb21pc2UsIGl0IGlzXG4gICAqICAgICAgICByZXNvbHZlZCBiZWZvcmUgaXRzIHZhbHVlIGlzIGluamVjdGVkIGludG8gdGhlIGNvbnRyb2xsZXIuIEJlIGF3YXJlIHRoYXRcbiAgICogICAgICAgIGBuZ1JvdXRlLiRyb3V0ZVBhcmFtc2Agd2lsbCBzdGlsbCByZWZlciB0byB0aGUgcHJldmlvdXMgcm91dGUgd2l0aGluIHRoZXNlIHJlc29sdmVcbiAgICogICAgICAgIGZ1bmN0aW9ucy4gIFVzZSBgJHJvdXRlLmN1cnJlbnQucGFyYW1zYCB0byBhY2Nlc3MgdGhlIG5ldyByb3V0ZSBwYXJhbWV0ZXJzLCBpbnN0ZWFkLlxuICAgKlxuICAgKiAgICAtIGByZWRpcmVjdFRvYCDigJMgeyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSDigJMgdmFsdWUgdG8gdXBkYXRlXG4gICAqICAgICAge0BsaW5rIG5nLiRsb2NhdGlvbiAkbG9jYXRpb259IHBhdGggd2l0aCBhbmQgdHJpZ2dlciByb3V0ZSByZWRpcmVjdGlvbi5cbiAgICpcbiAgICogICAgICBJZiBgcmVkaXJlY3RUb2AgaXMgYSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gICAqXG4gICAqICAgICAgLSBge09iamVjdC48c3RyaW5nPn1gIC0gcm91dGUgcGFyYW1ldGVycyBleHRyYWN0ZWQgZnJvbSB0aGUgY3VycmVudFxuICAgKiAgICAgICAgYCRsb2NhdGlvbi5wYXRoKClgIGJ5IGFwcGx5aW5nIHRoZSBjdXJyZW50IHJvdXRlIHRlbXBsYXRlVXJsLlxuICAgKiAgICAgIC0gYHtzdHJpbmd9YCAtIGN1cnJlbnQgYCRsb2NhdGlvbi5wYXRoKClgXG4gICAqICAgICAgLSBge09iamVjdH1gIC0gY3VycmVudCBgJGxvY2F0aW9uLnNlYXJjaCgpYFxuICAgKlxuICAgKiAgICAgIFRoZSBjdXN0b20gYHJlZGlyZWN0VG9gIGZ1bmN0aW9uIGlzIGV4cGVjdGVkIHRvIHJldHVybiBhIHN0cmluZyB3aGljaCB3aWxsIGJlIHVzZWRcbiAgICogICAgICB0byB1cGRhdGUgYCRsb2NhdGlvbi5wYXRoKClgIGFuZCBgJGxvY2F0aW9uLnNlYXJjaCgpYC5cbiAgICpcbiAgICogICAgLSBgW3JlbG9hZE9uU2VhcmNoPXRydWVdYCAtIHtib29sZWFuPX0gLSByZWxvYWQgcm91dGUgd2hlbiBvbmx5IGAkbG9jYXRpb24uc2VhcmNoKClgXG4gICAqICAgICAgb3IgYCRsb2NhdGlvbi5oYXNoKClgIGNoYW5nZXMuXG4gICAqXG4gICAqICAgICAgSWYgdGhlIG9wdGlvbiBpcyBzZXQgdG8gYGZhbHNlYCBhbmQgdXJsIGluIHRoZSBicm93c2VyIGNoYW5nZXMsIHRoZW5cbiAgICogICAgICBgJHJvdXRlVXBkYXRlYCBldmVudCBpcyBicm9hZGNhc3RlZCBvbiB0aGUgcm9vdCBzY29wZS5cbiAgICpcbiAgICogICAgLSBgW2Nhc2VJbnNlbnNpdGl2ZU1hdGNoPWZhbHNlXWAgLSB7Ym9vbGVhbj19IC0gbWF0Y2ggcm91dGVzIHdpdGhvdXQgYmVpbmcgY2FzZSBzZW5zaXRpdmVcbiAgICpcbiAgICogICAgICBJZiB0aGUgb3B0aW9uIGlzIHNldCB0byBgdHJ1ZWAsIHRoZW4gdGhlIHBhcnRpY3VsYXIgcm91dGUgY2FuIGJlIG1hdGNoZWQgd2l0aG91dCBiZWluZ1xuICAgKiAgICAgIGNhc2Ugc2Vuc2l0aXZlXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IHNlbGZcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFkZHMgYSBuZXcgcm91dGUgZGVmaW5pdGlvbiB0byB0aGUgYCRyb3V0ZWAgc2VydmljZS5cbiAgICovXG4gIHRoaXMud2hlbiA9IGZ1bmN0aW9uKHBhdGgsIHJvdXRlKSB7XG4gICAgLy9jb3B5IG9yaWdpbmFsIHJvdXRlIG9iamVjdCB0byBwcmVzZXJ2ZSBwYXJhbXMgaW5oZXJpdGVkIGZyb20gcHJvdG8gY2hhaW5cbiAgICB2YXIgcm91dGVDb3B5ID0gYW5ndWxhci5jb3B5KHJvdXRlKTtcbiAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChyb3V0ZUNvcHkucmVsb2FkT25TZWFyY2gpKSB7XG4gICAgICByb3V0ZUNvcHkucmVsb2FkT25TZWFyY2ggPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChyb3V0ZUNvcHkuY2FzZUluc2Vuc2l0aXZlTWF0Y2gpKSB7XG4gICAgICByb3V0ZUNvcHkuY2FzZUluc2Vuc2l0aXZlTWF0Y2ggPSB0aGlzLmNhc2VJbnNlbnNpdGl2ZU1hdGNoO1xuICAgIH1cbiAgICByb3V0ZXNbcGF0aF0gPSBhbmd1bGFyLmV4dGVuZChcbiAgICAgIHJvdXRlQ29weSxcbiAgICAgIHBhdGggJiYgcGF0aFJlZ0V4cChwYXRoLCByb3V0ZUNvcHkpXG4gICAgKTtcblxuICAgIC8vIGNyZWF0ZSByZWRpcmVjdGlvbiBmb3IgdHJhaWxpbmcgc2xhc2hlc1xuICAgIGlmIChwYXRoKSB7XG4gICAgICB2YXIgcmVkaXJlY3RQYXRoID0gKHBhdGhbcGF0aC5sZW5ndGggLSAxXSA9PSAnLycpXG4gICAgICAgICAgICA/IHBhdGguc3Vic3RyKDAsIHBhdGgubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgIDogcGF0aCArICcvJztcblxuICAgICAgcm91dGVzW3JlZGlyZWN0UGF0aF0gPSBhbmd1bGFyLmV4dGVuZChcbiAgICAgICAge3JlZGlyZWN0VG86IHBhdGh9LFxuICAgICAgICBwYXRoUmVnRXhwKHJlZGlyZWN0UGF0aCwgcm91dGVDb3B5KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIHByb3BlcnR5XG4gICAqIEBuYW1lICRyb3V0ZVByb3ZpZGVyI2Nhc2VJbnNlbnNpdGl2ZU1hdGNoXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBBIGJvb2xlYW4gcHJvcGVydHkgaW5kaWNhdGluZyBpZiByb3V0ZXMgZGVmaW5lZFxuICAgKiB1c2luZyB0aGlzIHByb3ZpZGVyIHNob3VsZCBiZSBtYXRjaGVkIHVzaW5nIGEgY2FzZSBpbnNlbnNpdGl2ZVxuICAgKiBhbGdvcml0aG0uIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAqL1xuICB0aGlzLmNhc2VJbnNlbnNpdGl2ZU1hdGNoID0gZmFsc2U7XG5cbiAgIC8qKlxuICAgICogQHBhcmFtIHBhdGgge3N0cmluZ30gcGF0aFxuICAgICogQHBhcmFtIG9wdHMge09iamVjdH0gb3B0aW9uc1xuICAgICogQHJldHVybiB7P09iamVjdH1cbiAgICAqXG4gICAgKiBAZGVzY3JpcHRpb25cbiAgICAqIE5vcm1hbGl6ZXMgdGhlIGdpdmVuIHBhdGgsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgICogYW5kIHRoZSBvcmlnaW5hbCBwYXRoLlxuICAgICpcbiAgICAqIEluc3BpcmVkIGJ5IHBhdGhSZXhwIGluIHZpc2lvbm1lZGlhL2V4cHJlc3MvbGliL3V0aWxzLmpzLlxuICAgICovXG4gIGZ1bmN0aW9uIHBhdGhSZWdFeHAocGF0aCwgb3B0cykge1xuICAgIHZhciBpbnNlbnNpdGl2ZSA9IG9wdHMuY2FzZUluc2Vuc2l0aXZlTWF0Y2gsXG4gICAgICAgIHJldCA9IHtcbiAgICAgICAgICBvcmlnaW5hbFBhdGg6IHBhdGgsXG4gICAgICAgICAgcmVnZXhwOiBwYXRoXG4gICAgICAgIH0sXG4gICAgICAgIGtleXMgPSByZXQua2V5cyA9IFtdO1xuXG4gICAgcGF0aCA9IHBhdGhcbiAgICAgIC5yZXBsYWNlKC8oWygpLl0pL2csICdcXFxcJDEnKVxuICAgICAgLnJlcGxhY2UoLyhcXC8pPzooXFx3KykoW1xcP1xcKl0pPy9nLCBmdW5jdGlvbihfLCBzbGFzaCwga2V5LCBvcHRpb24pIHtcbiAgICAgICAgdmFyIG9wdGlvbmFsID0gb3B0aW9uID09PSAnPycgPyBvcHRpb24gOiBudWxsO1xuICAgICAgICB2YXIgc3RhciA9IG9wdGlvbiA9PT0gJyonID8gb3B0aW9uIDogbnVsbDtcbiAgICAgICAga2V5cy5wdXNoKHsgbmFtZToga2V5LCBvcHRpb25hbDogISFvcHRpb25hbCB9KTtcbiAgICAgICAgc2xhc2ggPSBzbGFzaCB8fCAnJztcbiAgICAgICAgcmV0dXJuICcnXG4gICAgICAgICAgKyAob3B0aW9uYWwgPyAnJyA6IHNsYXNoKVxuICAgICAgICAgICsgJyg/OidcbiAgICAgICAgICArIChvcHRpb25hbCA/IHNsYXNoIDogJycpXG4gICAgICAgICAgKyAoc3RhciAmJiAnKC4rPyknIHx8ICcoW14vXSspJylcbiAgICAgICAgICArIChvcHRpb25hbCB8fCAnJylcbiAgICAgICAgICArICcpJ1xuICAgICAgICAgICsgKG9wdGlvbmFsIHx8ICcnKTtcbiAgICAgIH0pXG4gICAgICAucmVwbGFjZSgvKFtcXC8kXFwqXSkvZywgJ1xcXFwkMScpO1xuXG4gICAgcmV0LnJlZ2V4cCA9IG5ldyBSZWdFeHAoJ14nICsgcGF0aCArICckJywgaW5zZW5zaXRpdmUgPyAnaScgOiAnJyk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRyb3V0ZVByb3ZpZGVyI290aGVyd2lzZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyByb3V0ZSBkZWZpbml0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIG9uIHJvdXRlIGNoYW5nZSB3aGVuIG5vIG90aGVyIHJvdXRlIGRlZmluaXRpb25cbiAgICogaXMgbWF0Y2hlZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R8c3RyaW5nfSBwYXJhbXMgTWFwcGluZyBpbmZvcm1hdGlvbiB0byBiZSBhc3NpZ25lZCB0byBgJHJvdXRlLmN1cnJlbnRgLlxuICAgKiBJZiBjYWxsZWQgd2l0aCBhIHN0cmluZywgdGhlIHZhbHVlIG1hcHMgdG8gYHJlZGlyZWN0VG9gLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBzZWxmXG4gICAqL1xuICB0aGlzLm90aGVyd2lzZSA9IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAnc3RyaW5nJykge1xuICAgICAgcGFyYW1zID0ge3JlZGlyZWN0VG86IHBhcmFtc307XG4gICAgfVxuICAgIHRoaXMud2hlbihudWxsLCBwYXJhbXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJyxcbiAgICAgICAgICAgICAgICckbG9jYXRpb24nLFxuICAgICAgICAgICAgICAgJyRyb3V0ZVBhcmFtcycsXG4gICAgICAgICAgICAgICAnJHEnLFxuICAgICAgICAgICAgICAgJyRpbmplY3RvcicsXG4gICAgICAgICAgICAgICAnJHRlbXBsYXRlUmVxdWVzdCcsXG4gICAgICAgICAgICAgICAnJHNjZScsXG4gICAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgJHEsICRpbmplY3RvciwgJHRlbXBsYXRlUmVxdWVzdCwgJHNjZSkge1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkcm91dGVcbiAgICAgKiBAcmVxdWlyZXMgJGxvY2F0aW9uXG4gICAgICogQHJlcXVpcmVzICRyb3V0ZVBhcmFtc1xuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtPYmplY3R9IGN1cnJlbnQgUmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHJvdXRlIGRlZmluaXRpb24uXG4gICAgICogVGhlIHJvdXRlIGRlZmluaXRpb24gY29udGFpbnM6XG4gICAgICpcbiAgICAgKiAgIC0gYGNvbnRyb2xsZXJgOiBUaGUgY29udHJvbGxlciBjb25zdHJ1Y3RvciBhcyBkZWZpbmUgaW4gcm91dGUgZGVmaW5pdGlvbi5cbiAgICAgKiAgIC0gYGxvY2Fsc2A6IEEgbWFwIG9mIGxvY2FscyB3aGljaCBpcyB1c2VkIGJ5IHtAbGluayBuZy4kY29udHJvbGxlciAkY29udHJvbGxlcn0gc2VydmljZSBmb3JcbiAgICAgKiAgICAgY29udHJvbGxlciBpbnN0YW50aWF0aW9uLiBUaGUgYGxvY2Fsc2AgY29udGFpblxuICAgICAqICAgICB0aGUgcmVzb2x2ZWQgdmFsdWVzIG9mIHRoZSBgcmVzb2x2ZWAgbWFwLiBBZGRpdGlvbmFsbHkgdGhlIGBsb2NhbHNgIGFsc28gY29udGFpbjpcbiAgICAgKlxuICAgICAqICAgICAtIGAkc2NvcGVgIC0gVGhlIGN1cnJlbnQgcm91dGUgc2NvcGUuXG4gICAgICogICAgIC0gYCR0ZW1wbGF0ZWAgLSBUaGUgY3VycmVudCByb3V0ZSB0ZW1wbGF0ZSBIVE1MLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtPYmplY3R9IHJvdXRlcyBPYmplY3Qgd2l0aCBhbGwgcm91dGUgY29uZmlndXJhdGlvbiBPYmplY3RzIGFzIGl0cyBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogYCRyb3V0ZWAgaXMgdXNlZCBmb3IgZGVlcC1saW5raW5nIFVSTHMgdG8gY29udHJvbGxlcnMgYW5kIHZpZXdzIChIVE1MIHBhcnRpYWxzKS5cbiAgICAgKiBJdCB3YXRjaGVzIGAkbG9jYXRpb24udXJsKClgIGFuZCB0cmllcyB0byBtYXAgdGhlIHBhdGggdG8gYW4gZXhpc3Rpbmcgcm91dGUgZGVmaW5pdGlvbi5cbiAgICAgKlxuICAgICAqIFJlcXVpcmVzIHRoZSB7QGxpbmsgbmdSb3V0ZSBgbmdSb3V0ZWB9IG1vZHVsZSB0byBiZSBpbnN0YWxsZWQuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIGRlZmluZSByb3V0ZXMgdGhyb3VnaCB7QGxpbmsgbmdSb3V0ZS4kcm91dGVQcm92aWRlciAkcm91dGVQcm92aWRlcn0ncyBBUEkuXG4gICAgICpcbiAgICAgKiBUaGUgYCRyb3V0ZWAgc2VydmljZSBpcyB0eXBpY2FsbHkgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZVxuICAgICAqIHtAbGluayBuZ1JvdXRlLmRpcmVjdGl2ZTpuZ1ZpZXcgYG5nVmlld2B9IGRpcmVjdGl2ZSBhbmQgdGhlXG4gICAgICoge0BsaW5rIG5nUm91dGUuJHJvdXRlUGFyYW1zIGAkcm91dGVQYXJhbXNgfSBzZXJ2aWNlLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBUaGlzIGV4YW1wbGUgc2hvd3MgaG93IGNoYW5naW5nIHRoZSBVUkwgaGFzaCBjYXVzZXMgdGhlIGAkcm91dGVgIHRvIG1hdGNoIGEgcm91dGUgYWdhaW5zdCB0aGVcbiAgICAgKiBVUkwsIGFuZCB0aGUgYG5nVmlld2AgcHVsbHMgaW4gdGhlIHBhcnRpYWwuXG4gICAgICpcbiAgICAgKiA8ZXhhbXBsZSBuYW1lPVwiJHJvdXRlLXNlcnZpY2VcIiBtb2R1bGU9XCJuZ1JvdXRlRXhhbXBsZVwiXG4gICAgICogICAgICAgICAgZGVwcz1cImFuZ3VsYXItcm91dGUuanNcIiBmaXhCYXNlPVwidHJ1ZVwiPlxuICAgICAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTWFpbkNvbnRyb2xsZXJcIj5cbiAgICAgKiAgICAgICBDaG9vc2U6XG4gICAgICogICAgICAgPGEgaHJlZj1cIkJvb2svTW9ieVwiPk1vYnk8L2E+IHxcbiAgICAgKiAgICAgICA8YSBocmVmPVwiQm9vay9Nb2J5L2NoLzFcIj5Nb2J5OiBDaDE8L2E+IHxcbiAgICAgKiAgICAgICA8YSBocmVmPVwiQm9vay9HYXRzYnlcIj5HYXRzYnk8L2E+IHxcbiAgICAgKiAgICAgICA8YSBocmVmPVwiQm9vay9HYXRzYnkvY2gvND9rZXk9dmFsdWVcIj5HYXRzYnk6IENoNDwvYT4gfFxuICAgICAqICAgICAgIDxhIGhyZWY9XCJCb29rL1NjYXJsZXRcIj5TY2FybGV0IExldHRlcjwvYT48YnIvPlxuICAgICAqXG4gICAgICogICAgICAgPGRpdiBuZy12aWV3PjwvZGl2PlxuICAgICAqXG4gICAgICogICAgICAgPGhyIC8+XG4gICAgICpcbiAgICAgKiAgICAgICA8cHJlPiRsb2NhdGlvbi5wYXRoKCkgPSB7eyRsb2NhdGlvbi5wYXRoKCl9fTwvcHJlPlxuICAgICAqICAgICAgIDxwcmU+JHJvdXRlLmN1cnJlbnQudGVtcGxhdGVVcmwgPSB7eyRyb3V0ZS5jdXJyZW50LnRlbXBsYXRlVXJsfX08L3ByZT5cbiAgICAgKiAgICAgICA8cHJlPiRyb3V0ZS5jdXJyZW50LnBhcmFtcyA9IHt7JHJvdXRlLmN1cnJlbnQucGFyYW1zfX08L3ByZT5cbiAgICAgKiAgICAgICA8cHJlPiRyb3V0ZS5jdXJyZW50LnNjb3BlLm5hbWUgPSB7eyRyb3V0ZS5jdXJyZW50LnNjb3BlLm5hbWV9fTwvcHJlPlxuICAgICAqICAgICAgIDxwcmU+JHJvdXRlUGFyYW1zID0ge3skcm91dGVQYXJhbXN9fTwvcHJlPlxuICAgICAqICAgICA8L2Rpdj5cbiAgICAgKiAgIDwvZmlsZT5cbiAgICAgKlxuICAgICAqICAgPGZpbGUgbmFtZT1cImJvb2suaHRtbFwiPlxuICAgICAqICAgICBjb250cm9sbGVyOiB7e25hbWV9fTxiciAvPlxuICAgICAqICAgICBCb29rIElkOiB7e3BhcmFtcy5ib29rSWR9fTxiciAvPlxuICAgICAqICAgPC9maWxlPlxuICAgICAqXG4gICAgICogICA8ZmlsZSBuYW1lPVwiY2hhcHRlci5odG1sXCI+XG4gICAgICogICAgIGNvbnRyb2xsZXI6IHt7bmFtZX19PGJyIC8+XG4gICAgICogICAgIEJvb2sgSWQ6IHt7cGFyYW1zLmJvb2tJZH19PGJyIC8+XG4gICAgICogICAgIENoYXB0ZXIgSWQ6IHt7cGFyYW1zLmNoYXB0ZXJJZH19XG4gICAgICogICA8L2ZpbGU+XG4gICAgICpcbiAgICAgKiAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgKiAgICAgYW5ndWxhci5tb2R1bGUoJ25nUm91dGVFeGFtcGxlJywgWyduZ1JvdXRlJ10pXG4gICAgICpcbiAgICAgKiAgICAgIC5jb250cm9sbGVyKCdNYWluQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJHJvdXRlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbikge1xuICAgICAqICAgICAgICAgICRzY29wZS4kcm91dGUgPSAkcm91dGU7XG4gICAgICogICAgICAgICAgJHNjb3BlLiRsb2NhdGlvbiA9ICRsb2NhdGlvbjtcbiAgICAgKiAgICAgICAgICAkc2NvcGUuJHJvdXRlUGFyYW1zID0gJHJvdXRlUGFyYW1zO1xuICAgICAqICAgICAgfSlcbiAgICAgKlxuICAgICAqICAgICAgLmNvbnRyb2xsZXIoJ0Jvb2tDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkcm91dGVQYXJhbXMpIHtcbiAgICAgKiAgICAgICAgICAkc2NvcGUubmFtZSA9IFwiQm9va0NvbnRyb2xsZXJcIjtcbiAgICAgKiAgICAgICAgICAkc2NvcGUucGFyYW1zID0gJHJvdXRlUGFyYW1zO1xuICAgICAqICAgICAgfSlcbiAgICAgKlxuICAgICAqICAgICAgLmNvbnRyb2xsZXIoJ0NoYXB0ZXJDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkcm91dGVQYXJhbXMpIHtcbiAgICAgKiAgICAgICAgICAkc2NvcGUubmFtZSA9IFwiQ2hhcHRlckNvbnRyb2xsZXJcIjtcbiAgICAgKiAgICAgICAgICAkc2NvcGUucGFyYW1zID0gJHJvdXRlUGFyYW1zO1xuICAgICAqICAgICAgfSlcbiAgICAgKlxuICAgICAqICAgICAuY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xuICAgICAqICAgICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICogICAgICAgIC53aGVuKCcvQm9vay86Ym9va0lkJywge1xuICAgICAqICAgICAgICAgdGVtcGxhdGVVcmw6ICdib29rLmh0bWwnLFxuICAgICAqICAgICAgICAgY29udHJvbGxlcjogJ0Jvb2tDb250cm9sbGVyJyxcbiAgICAgKiAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgKiAgICAgICAgICAgLy8gSSB3aWxsIGNhdXNlIGEgMSBzZWNvbmQgZGVsYXlcbiAgICAgKiAgICAgICAgICAgZGVsYXk6IGZ1bmN0aW9uKCRxLCAkdGltZW91dCkge1xuICAgICAqICAgICAgICAgICAgIHZhciBkZWxheSA9ICRxLmRlZmVyKCk7XG4gICAgICogICAgICAgICAgICAgJHRpbWVvdXQoZGVsYXkucmVzb2x2ZSwgMTAwMCk7XG4gICAgICogICAgICAgICAgICAgcmV0dXJuIGRlbGF5LnByb21pc2U7XG4gICAgICogICAgICAgICAgIH1cbiAgICAgKiAgICAgICAgIH1cbiAgICAgKiAgICAgICB9KVxuICAgICAqICAgICAgIC53aGVuKCcvQm9vay86Ym9va0lkL2NoLzpjaGFwdGVySWQnLCB7XG4gICAgICogICAgICAgICB0ZW1wbGF0ZVVybDogJ2NoYXB0ZXIuaHRtbCcsXG4gICAgICogICAgICAgICBjb250cm9sbGVyOiAnQ2hhcHRlckNvbnRyb2xsZXInXG4gICAgICogICAgICAgfSk7XG4gICAgICpcbiAgICAgKiAgICAgICAvLyBjb25maWd1cmUgaHRtbDUgdG8gZ2V0IGxpbmtzIHdvcmtpbmcgb24ganNmaWRkbGVcbiAgICAgKiAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG4gICAgICogICAgIH0pO1xuICAgICAqXG4gICAgICogICA8L2ZpbGU+XG4gICAgICpcbiAgICAgKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgKiAgICAgaXQoJ3Nob3VsZCBsb2FkIGFuZCBjb21waWxlIGNvcnJlY3QgdGVtcGxhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgICBlbGVtZW50KGJ5LmxpbmtUZXh0KCdNb2J5OiBDaDEnKSkuY2xpY2soKTtcbiAgICAgKiAgICAgICB2YXIgY29udGVudCA9IGVsZW1lbnQoYnkuY3NzKCdbbmctdmlld10nKSkuZ2V0VGV4dCgpO1xuICAgICAqICAgICAgIGV4cGVjdChjb250ZW50KS50b01hdGNoKC9jb250cm9sbGVyXFw6IENoYXB0ZXJDb250cm9sbGVyLyk7XG4gICAgICogICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL0Jvb2sgSWRcXDogTW9ieS8pO1xuICAgICAqICAgICAgIGV4cGVjdChjb250ZW50KS50b01hdGNoKC9DaGFwdGVyIElkXFw6IDEvKTtcbiAgICAgKlxuICAgICAqICAgICAgIGVsZW1lbnQoYnkucGFydGlhbExpbmtUZXh0KCdTY2FybGV0JykpLmNsaWNrKCk7XG4gICAgICpcbiAgICAgKiAgICAgICBjb250ZW50ID0gZWxlbWVudChieS5jc3MoJ1tuZy12aWV3XScpKS5nZXRUZXh0KCk7XG4gICAgICogICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL2NvbnRyb2xsZXJcXDogQm9va0NvbnRyb2xsZXIvKTtcbiAgICAgKiAgICAgICBleHBlY3QoY29udGVudCkudG9NYXRjaCgvQm9vayBJZFxcOiBTY2FybGV0Lyk7XG4gICAgICogICAgIH0pO1xuICAgICAqICAgPC9maWxlPlxuICAgICAqIDwvZXhhbXBsZT5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAqIEBuYW1lICRyb3V0ZSMkcm91dGVDaGFuZ2VTdGFydFxuICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBCcm9hZGNhc3RlZCBiZWZvcmUgYSByb3V0ZSBjaGFuZ2UuIEF0IHRoaXMgIHBvaW50IHRoZSByb3V0ZSBzZXJ2aWNlcyBzdGFydHNcbiAgICAgKiByZXNvbHZpbmcgYWxsIG9mIHRoZSBkZXBlbmRlbmNpZXMgbmVlZGVkIGZvciB0aGUgcm91dGUgY2hhbmdlIHRvIG9jY3VyLlxuICAgICAqIFR5cGljYWxseSB0aGlzIGludm9sdmVzIGZldGNoaW5nIHRoZSB2aWV3IHRlbXBsYXRlIGFzIHdlbGwgYXMgYW55IGRlcGVuZGVuY2llc1xuICAgICAqIGRlZmluZWQgaW4gYHJlc29sdmVgIHJvdXRlIHByb3BlcnR5LiBPbmNlICBhbGwgb2YgdGhlIGRlcGVuZGVuY2llcyBhcmUgcmVzb2x2ZWRcbiAgICAgKiBgJHJvdXRlQ2hhbmdlU3VjY2Vzc2AgaXMgZmlyZWQuXG4gICAgICpcbiAgICAgKiBUaGUgcm91dGUgY2hhbmdlIChhbmQgdGhlIGAkbG9jYXRpb25gIGNoYW5nZSB0aGF0IHRyaWdnZXJlZCBpdCkgY2FuIGJlIHByZXZlbnRlZFxuICAgICAqIGJ5IGNhbGxpbmcgYHByZXZlbnREZWZhdWx0YCBtZXRob2Qgb2YgdGhlIGV2ZW50LiBTZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMgYWJvdXQgZXZlbnQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Um91dGV9IG5leHQgRnV0dXJlIHJvdXRlIGluZm9ybWF0aW9uLlxuICAgICAqIEBwYXJhbSB7Um91dGV9IGN1cnJlbnQgQ3VycmVudCByb3V0ZSBpbmZvcm1hdGlvbi5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAqIEBuYW1lICRyb3V0ZSMkcm91dGVDaGFuZ2VTdWNjZXNzXG4gICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEJyb2FkY2FzdGVkIGFmdGVyIGEgcm91dGUgY2hhbmdlIGhhcyBoYXBwZW5lZCBzdWNjZXNzZnVsbHkuXG4gICAgICogVGhlIGByZXNvbHZlYCBkZXBlbmRlbmNpZXMgYXJlIG5vdyBhdmFpbGFibGUgaW4gdGhlIGBjdXJyZW50LmxvY2Fsc2AgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiB7QGxpbmsgbmdSb3V0ZS5kaXJlY3RpdmU6bmdWaWV3IG5nVmlld30gbGlzdGVucyBmb3IgdGhlIGRpcmVjdGl2ZVxuICAgICAqIHRvIGluc3RhbnRpYXRlIHRoZSBjb250cm9sbGVyIGFuZCByZW5kZXIgdGhlIHZpZXcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSb3V0ZX0gY3VycmVudCBDdXJyZW50IHJvdXRlIGluZm9ybWF0aW9uLlxuICAgICAqIEBwYXJhbSB7Um91dGV8VW5kZWZpbmVkfSBwcmV2aW91cyBQcmV2aW91cyByb3V0ZSBpbmZvcm1hdGlvbiwgb3IgdW5kZWZpbmVkIGlmIGN1cnJlbnQgaXNcbiAgICAgKiBmaXJzdCByb3V0ZSBlbnRlcmVkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGV2ZW50XG4gICAgICogQG5hbWUgJHJvdXRlIyRyb3V0ZUNoYW5nZUVycm9yXG4gICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEJyb2FkY2FzdGVkIGlmIGFueSBvZiB0aGUgcmVzb2x2ZSBwcm9taXNlcyBhcmUgcmVqZWN0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge1JvdXRlfSBjdXJyZW50IEN1cnJlbnQgcm91dGUgaW5mb3JtYXRpb24uXG4gICAgICogQHBhcmFtIHtSb3V0ZX0gcHJldmlvdXMgUHJldmlvdXMgcm91dGUgaW5mb3JtYXRpb24uXG4gICAgICogQHBhcmFtIHtSb3V0ZX0gcmVqZWN0aW9uIFJlamVjdGlvbiBvZiB0aGUgcHJvbWlzZS4gVXN1YWxseSB0aGUgZXJyb3Igb2YgdGhlIGZhaWxlZCBwcm9taXNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGV2ZW50XG4gICAgICogQG5hbWUgJHJvdXRlIyRyb3V0ZVVwZGF0ZVxuICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHJvb3Qgc2NvcGVcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUaGUgYHJlbG9hZE9uU2VhcmNoYCBwcm9wZXJ0eSBoYXMgYmVlbiBzZXQgdG8gZmFsc2UsIGFuZCB3ZSBhcmUgcmV1c2luZyB0aGUgc2FtZVxuICAgICAqIGluc3RhbmNlIG9mIHRoZSBDb250cm9sbGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0XG4gICAgICogQHBhcmFtIHtSb3V0ZX0gY3VycmVudCBDdXJyZW50L3ByZXZpb3VzIHJvdXRlIGluZm9ybWF0aW9uLlxuICAgICAqL1xuXG4gICAgdmFyIGZvcmNlUmVsb2FkID0gZmFsc2UsXG4gICAgICAgIHByZXBhcmVkUm91dGUsXG4gICAgICAgIHByZXBhcmVkUm91dGVJc1VwZGF0ZU9ubHksXG4gICAgICAgICRyb3V0ZSA9IHtcbiAgICAgICAgICByb3V0ZXM6IHJvdXRlcyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSAkcm91dGUjcmVsb2FkXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBDYXVzZXMgYCRyb3V0ZWAgc2VydmljZSB0byByZWxvYWQgdGhlIGN1cnJlbnQgcm91dGUgZXZlbiBpZlxuICAgICAgICAgICAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9ufSBoYXNuJ3QgY2hhbmdlZC5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEFzIGEgcmVzdWx0IG9mIHRoYXQsIHtAbGluayBuZ1JvdXRlLmRpcmVjdGl2ZTpuZ1ZpZXcgbmdWaWV3fVxuICAgICAgICAgICAqIGNyZWF0ZXMgbmV3IHNjb3BlIGFuZCByZWluc3RhbnRpYXRlcyB0aGUgY29udHJvbGxlci5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICByZWxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9yY2VSZWxvYWQgPSB0cnVlO1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyBEb24ndCBzdXBwb3J0IGNhbmNlbGxhdGlvbiBvZiBhIHJlbG9hZCBmb3Igbm93Li4uXG4gICAgICAgICAgICAgIHByZXBhcmVSb3V0ZSgpO1xuICAgICAgICAgICAgICBjb21taXRSb3V0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSAkcm91dGUjdXBkYXRlUGFyYW1zXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBDYXVzZXMgYCRyb3V0ZWAgc2VydmljZSB0byB1cGRhdGUgdGhlIGN1cnJlbnQgVVJMLCByZXBsYWNpbmdcbiAgICAgICAgICAgKiBjdXJyZW50IHJvdXRlIHBhcmFtZXRlcnMgd2l0aCB0aG9zZSBzcGVjaWZpZWQgaW4gYG5ld1BhcmFtc2AuXG4gICAgICAgICAgICogUHJvdmlkZWQgcHJvcGVydHkgbmFtZXMgdGhhdCBtYXRjaCB0aGUgcm91dGUncyBwYXRoIHNlZ21lbnRcbiAgICAgICAgICAgKiBkZWZpbml0aW9ucyB3aWxsIGJlIGludGVycG9sYXRlZCBpbnRvIHRoZSBsb2NhdGlvbidzIHBhdGgsIHdoaWxlXG4gICAgICAgICAgICogcmVtYWluaW5nIHByb3BlcnRpZXMgd2lsbCBiZSB0cmVhdGVkIGFzIHF1ZXJ5IHBhcmFtcy5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsIHN0cmluZz59IG5ld1BhcmFtcyBtYXBwaW5nIG9mIFVSTCBwYXJhbWV0ZXIgbmFtZXMgdG8gdmFsdWVzXG4gICAgICAgICAgICovXG4gICAgICAgICAgdXBkYXRlUGFyYW1zOiBmdW5jdGlvbihuZXdQYXJhbXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnQgJiYgdGhpcy5jdXJyZW50LiQkcm91dGUpIHtcbiAgICAgICAgICAgICAgbmV3UGFyYW1zID0gYW5ndWxhci5leHRlbmQoe30sIHRoaXMuY3VycmVudC5wYXJhbXMsIG5ld1BhcmFtcyk7XG4gICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKGludGVycG9sYXRlKHRoaXMuY3VycmVudC4kJHJvdXRlLm9yaWdpbmFsUGF0aCwgbmV3UGFyYW1zKSk7XG4gICAgICAgICAgICAgIC8vIGludGVycG9sYXRlIG1vZGlmaWVzIG5ld1BhcmFtcywgb25seSBxdWVyeSBwYXJhbXMgYXJlIGxlZnRcbiAgICAgICAgICAgICAgJGxvY2F0aW9uLnNlYXJjaChuZXdQYXJhbXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgJHJvdXRlTWluRXJyKCdub3JvdXQnLCAnVHJpZWQgdXBkYXRpbmcgcm91dGUgd2hlbiB3aXRoIG5vIGN1cnJlbnQgcm91dGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAkcm9vdFNjb3BlLiRvbignJGxvY2F0aW9uQ2hhbmdlU3RhcnQnLCBwcmVwYXJlUm91dGUpO1xuICAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgY29tbWl0Um91dGUpO1xuXG4gICAgcmV0dXJuICRyb3V0ZTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb24ge3N0cmluZ30gY3VycmVudCB1cmxcbiAgICAgKiBAcGFyYW0gcm91dGUge09iamVjdH0gcm91dGUgcmVnZXhwIHRvIG1hdGNoIHRoZSB1cmwgYWdhaW5zdFxuICAgICAqIEByZXR1cm4gez9PYmplY3R9XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDaGVjayBpZiB0aGUgcm91dGUgbWF0Y2hlcyB0aGUgY3VycmVudCB1cmwuXG4gICAgICpcbiAgICAgKiBJbnNwaXJlZCBieSBtYXRjaCBpblxuICAgICAqIHZpc2lvbm1lZGlhL2V4cHJlc3MvbGliL3JvdXRlci9yb3V0ZXIuanMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3dpdGNoUm91dGVNYXRjaGVyKG9uLCByb3V0ZSkge1xuICAgICAgdmFyIGtleXMgPSByb3V0ZS5rZXlzLFxuICAgICAgICAgIHBhcmFtcyA9IHt9O1xuXG4gICAgICBpZiAoIXJvdXRlLnJlZ2V4cCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIHZhciBtID0gcm91dGUucmVnZXhwLmV4ZWMob24pO1xuICAgICAgaWYgKCFtKSByZXR1cm4gbnVsbDtcblxuICAgICAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IG0ubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaSAtIDFdO1xuXG4gICAgICAgIHZhciB2YWwgPSBtW2ldO1xuXG4gICAgICAgIGlmIChrZXkgJiYgdmFsKSB7XG4gICAgICAgICAgcGFyYW1zW2tleS5uYW1lXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlUm91dGUoJGxvY2F0aW9uRXZlbnQpIHtcbiAgICAgIHZhciBsYXN0Um91dGUgPSAkcm91dGUuY3VycmVudDtcblxuICAgICAgcHJlcGFyZWRSb3V0ZSA9IHBhcnNlUm91dGUoKTtcbiAgICAgIHByZXBhcmVkUm91dGVJc1VwZGF0ZU9ubHkgPSBwcmVwYXJlZFJvdXRlICYmIGxhc3RSb3V0ZSAmJiBwcmVwYXJlZFJvdXRlLiQkcm91dGUgPT09IGxhc3RSb3V0ZS4kJHJvdXRlXG4gICAgICAgICAgJiYgYW5ndWxhci5lcXVhbHMocHJlcGFyZWRSb3V0ZS5wYXRoUGFyYW1zLCBsYXN0Um91dGUucGF0aFBhcmFtcylcbiAgICAgICAgICAmJiAhcHJlcGFyZWRSb3V0ZS5yZWxvYWRPblNlYXJjaCAmJiAhZm9yY2VSZWxvYWQ7XG5cbiAgICAgIGlmICghcHJlcGFyZWRSb3V0ZUlzVXBkYXRlT25seSAmJiAobGFzdFJvdXRlIHx8IHByZXBhcmVkUm91dGUpKSB7XG4gICAgICAgIGlmICgkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRyb3V0ZUNoYW5nZVN0YXJ0JywgcHJlcGFyZWRSb3V0ZSwgbGFzdFJvdXRlKS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgaWYgKCRsb2NhdGlvbkV2ZW50KSB7XG4gICAgICAgICAgICAkbG9jYXRpb25FdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbW1pdFJvdXRlKCkge1xuICAgICAgdmFyIGxhc3RSb3V0ZSA9ICRyb3V0ZS5jdXJyZW50O1xuICAgICAgdmFyIG5leHRSb3V0ZSA9IHByZXBhcmVkUm91dGU7XG5cbiAgICAgIGlmIChwcmVwYXJlZFJvdXRlSXNVcGRhdGVPbmx5KSB7XG4gICAgICAgIGxhc3RSb3V0ZS5wYXJhbXMgPSBuZXh0Um91dGUucGFyYW1zO1xuICAgICAgICBhbmd1bGFyLmNvcHkobGFzdFJvdXRlLnBhcmFtcywgJHJvdXRlUGFyYW1zKTtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckcm91dGVVcGRhdGUnLCBsYXN0Um91dGUpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0Um91dGUgfHwgbGFzdFJvdXRlKSB7XG4gICAgICAgIGZvcmNlUmVsb2FkID0gZmFsc2U7XG4gICAgICAgICRyb3V0ZS5jdXJyZW50ID0gbmV4dFJvdXRlO1xuICAgICAgICBpZiAobmV4dFJvdXRlKSB7XG4gICAgICAgICAgaWYgKG5leHRSb3V0ZS5yZWRpcmVjdFRvKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhuZXh0Um91dGUucmVkaXJlY3RUbykpIHtcbiAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoaW50ZXJwb2xhdGUobmV4dFJvdXRlLnJlZGlyZWN0VG8sIG5leHRSb3V0ZS5wYXJhbXMpKS5zZWFyY2gobmV4dFJvdXRlLnBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICRsb2NhdGlvbi51cmwobmV4dFJvdXRlLnJlZGlyZWN0VG8obmV4dFJvdXRlLnBhdGhQYXJhbXMsICRsb2NhdGlvbi5wYXRoKCksICRsb2NhdGlvbi5zZWFyY2goKSkpXG4gICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJHEud2hlbihuZXh0Um91dGUpLlxuICAgICAgICAgIHRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAobmV4dFJvdXRlKSB7XG4gICAgICAgICAgICAgIHZhciBsb2NhbHMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgbmV4dFJvdXRlLnJlc29sdmUpLFxuICAgICAgICAgICAgICAgICAgdGVtcGxhdGUsIHRlbXBsYXRlVXJsO1xuXG4gICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChsb2NhbHMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBsb2NhbHNba2V5XSA9IGFuZ3VsYXIuaXNTdHJpbmcodmFsdWUpID9cbiAgICAgICAgICAgICAgICAgICAgJGluamVjdG9yLmdldCh2YWx1ZSkgOiAkaW5qZWN0b3IuaW52b2tlKHZhbHVlLCBudWxsLCBudWxsLCBrZXkpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQodGVtcGxhdGUgPSBuZXh0Um91dGUudGVtcGxhdGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbih0ZW1wbGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUobmV4dFJvdXRlLnBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHRlbXBsYXRlVXJsID0gbmV4dFJvdXRlLnRlbXBsYXRlVXJsKSkge1xuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24odGVtcGxhdGVVcmwpKSB7XG4gICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybCA9IHRlbXBsYXRlVXJsKG5leHRSb3V0ZS5wYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQodGVtcGxhdGVVcmwpKSB7XG4gICAgICAgICAgICAgICAgICBuZXh0Um91dGUubG9hZGVkVGVtcGxhdGVVcmwgPSAkc2NlLnZhbHVlT2YodGVtcGxhdGVVcmwpO1xuICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgPSAkdGVtcGxhdGVSZXF1ZXN0KHRlbXBsYXRlVXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHRlbXBsYXRlKSkge1xuICAgICAgICAgICAgICAgIGxvY2Fsc1snJHRlbXBsYXRlJ10gPSB0ZW1wbGF0ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gJHEuYWxsKGxvY2Fscyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuXG4gICAgICAgICAgdGhlbihmdW5jdGlvbihsb2NhbHMpIHtcbiAgICAgICAgICAgIC8vIGFmdGVyIHJvdXRlIGNoYW5nZVxuICAgICAgICAgICAgaWYgKG5leHRSb3V0ZSA9PSAkcm91dGUuY3VycmVudCkge1xuICAgICAgICAgICAgICBpZiAobmV4dFJvdXRlKSB7XG4gICAgICAgICAgICAgICAgbmV4dFJvdXRlLmxvY2FscyA9IGxvY2FscztcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmNvcHkobmV4dFJvdXRlLnBhcmFtcywgJHJvdXRlUGFyYW1zKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRyb3V0ZUNoYW5nZVN1Y2Nlc3MnLCBuZXh0Um91dGUsIGxhc3RSb3V0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChuZXh0Um91dGUgPT0gJHJvdXRlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckcm91dGVDaGFuZ2VFcnJvcicsIG5leHRSb3V0ZSwgbGFzdFJvdXRlLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSB0aGUgY3VycmVudCBhY3RpdmUgcm91dGUsIGJ5IG1hdGNoaW5nIGl0IGFnYWluc3QgdGhlIFVSTFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlUm91dGUoKSB7XG4gICAgICAvLyBNYXRjaCBhIHJvdXRlXG4gICAgICB2YXIgcGFyYW1zLCBtYXRjaDtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChyb3V0ZXMsIGZ1bmN0aW9uKHJvdXRlLCBwYXRoKSB7XG4gICAgICAgIGlmICghbWF0Y2ggJiYgKHBhcmFtcyA9IHN3aXRjaFJvdXRlTWF0Y2hlcigkbG9jYXRpb24ucGF0aCgpLCByb3V0ZSkpKSB7XG4gICAgICAgICAgbWF0Y2ggPSBpbmhlcml0KHJvdXRlLCB7XG4gICAgICAgICAgICBwYXJhbXM6IGFuZ3VsYXIuZXh0ZW5kKHt9LCAkbG9jYXRpb24uc2VhcmNoKCksIHBhcmFtcyksXG4gICAgICAgICAgICBwYXRoUGFyYW1zOiBwYXJhbXN9KTtcbiAgICAgICAgICBtYXRjaC4kJHJvdXRlID0gcm91dGU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gTm8gcm91dGUgbWF0Y2hlZDsgZmFsbGJhY2sgdG8gXCJvdGhlcndpc2VcIiByb3V0ZVxuICAgICAgcmV0dXJuIG1hdGNoIHx8IHJvdXRlc1tudWxsXSAmJiBpbmhlcml0KHJvdXRlc1tudWxsXSwge3BhcmFtczoge30sIHBhdGhQYXJhbXM6e319KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBpbnRlcnBvbGF0aW9uIG9mIHRoZSByZWRpcmVjdCBwYXRoIHdpdGggdGhlIHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzdHJpbmcsIHBhcmFtcykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYW5ndWxhci5mb3JFYWNoKChzdHJpbmcgfHwgJycpLnNwbGl0KCc6JyksIGZ1bmN0aW9uKHNlZ21lbnQsIGkpIHtcbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICByZXN1bHQucHVzaChzZWdtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc2VnbWVudE1hdGNoID0gc2VnbWVudC5tYXRjaCgvKFxcdyspKD86Wz8qXSk/KC4qKS8pO1xuICAgICAgICAgIHZhciBrZXkgPSBzZWdtZW50TWF0Y2hbMV07XG4gICAgICAgICAgcmVzdWx0LnB1c2gocGFyYW1zW2tleV0pO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHNlZ21lbnRNYXRjaFsyXSB8fCAnJyk7XG4gICAgICAgICAgZGVsZXRlIHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gICAgfVxuICB9XTtcbn1cblxubmdSb3V0ZU1vZHVsZS5wcm92aWRlcignJHJvdXRlUGFyYW1zJywgJFJvdXRlUGFyYW1zUHJvdmlkZXIpO1xuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRyb3V0ZVBhcmFtc1xuICogQHJlcXVpcmVzICRyb3V0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGAkcm91dGVQYXJhbXNgIHNlcnZpY2UgYWxsb3dzIHlvdSB0byByZXRyaWV2ZSB0aGUgY3VycmVudCBzZXQgb2Ygcm91dGUgcGFyYW1ldGVycy5cbiAqXG4gKiBSZXF1aXJlcyB0aGUge0BsaW5rIG5nUm91dGUgYG5nUm91dGVgfSBtb2R1bGUgdG8gYmUgaW5zdGFsbGVkLlxuICpcbiAqIFRoZSByb3V0ZSBwYXJhbWV0ZXJzIGFyZSBhIGNvbWJpbmF0aW9uIG9mIHtAbGluayBuZy4kbG9jYXRpb24gYCRsb2NhdGlvbmB9J3NcbiAqIHtAbGluayBuZy4kbG9jYXRpb24jc2VhcmNoIGBzZWFyY2goKWB9IGFuZCB7QGxpbmsgbmcuJGxvY2F0aW9uI3BhdGggYHBhdGgoKWB9LlxuICogVGhlIGBwYXRoYCBwYXJhbWV0ZXJzIGFyZSBleHRyYWN0ZWQgd2hlbiB0aGUge0BsaW5rIG5nUm91dGUuJHJvdXRlIGAkcm91dGVgfSBwYXRoIGlzIG1hdGNoZWQuXG4gKlxuICogSW4gY2FzZSBvZiBwYXJhbWV0ZXIgbmFtZSBjb2xsaXNpb24sIGBwYXRoYCBwYXJhbXMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgYHNlYXJjaGAgcGFyYW1zLlxuICpcbiAqIFRoZSBzZXJ2aWNlIGd1YXJhbnRlZXMgdGhhdCB0aGUgaWRlbnRpdHkgb2YgdGhlIGAkcm91dGVQYXJhbXNgIG9iamVjdCB3aWxsIHJlbWFpbiB1bmNoYW5nZWRcbiAqIChidXQgaXRzIHByb3BlcnRpZXMgd2lsbCBsaWtlbHkgY2hhbmdlKSBldmVuIHdoZW4gYSByb3V0ZSBjaGFuZ2Ugb2NjdXJzLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgYCRyb3V0ZVBhcmFtc2AgYXJlIG9ubHkgdXBkYXRlZCAqYWZ0ZXIqIGEgcm91dGUgY2hhbmdlIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuXG4gKiBUaGlzIG1lYW5zIHRoYXQgeW91IGNhbm5vdCByZWx5IG9uIGAkcm91dGVQYXJhbXNgIGJlaW5nIGNvcnJlY3QgaW4gcm91dGUgcmVzb2x2ZSBmdW5jdGlvbnMuXG4gKiBJbnN0ZWFkIHlvdSBjYW4gdXNlIGAkcm91dGUuY3VycmVudC5wYXJhbXNgIHRvIGFjY2VzcyB0aGUgbmV3IHJvdXRlJ3MgcGFyYW1ldGVycy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqICAvLyBHaXZlbjpcbiAqICAvLyBVUkw6IGh0dHA6Ly9zZXJ2ZXIuY29tL2luZGV4Lmh0bWwjL0NoYXB0ZXIvMS9TZWN0aW9uLzI/c2VhcmNoPW1vYnlcbiAqICAvLyBSb3V0ZTogL0NoYXB0ZXIvOmNoYXB0ZXJJZC9TZWN0aW9uLzpzZWN0aW9uSWRcbiAqICAvL1xuICogIC8vIFRoZW5cbiAqICAkcm91dGVQYXJhbXMgPT0+IHtjaGFwdGVySWQ6JzEnLCBzZWN0aW9uSWQ6JzInLCBzZWFyY2g6J21vYnknfVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uICRSb3V0ZVBhcmFtc1Byb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHt9OyB9O1xufVxuXG5uZ1JvdXRlTW9kdWxlLmRpcmVjdGl2ZSgnbmdWaWV3JywgbmdWaWV3RmFjdG9yeSk7XG5uZ1JvdXRlTW9kdWxlLmRpcmVjdGl2ZSgnbmdWaWV3JywgbmdWaWV3RmlsbENvbnRlbnRGYWN0b3J5KTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nVmlld1xuICogQHJlc3RyaWN0IEVDQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogIyBPdmVydmlld1xuICogYG5nVmlld2AgaXMgYSBkaXJlY3RpdmUgdGhhdCBjb21wbGVtZW50cyB0aGUge0BsaW5rIG5nUm91dGUuJHJvdXRlICRyb3V0ZX0gc2VydmljZSBieVxuICogaW5jbHVkaW5nIHRoZSByZW5kZXJlZCB0ZW1wbGF0ZSBvZiB0aGUgY3VycmVudCByb3V0ZSBpbnRvIHRoZSBtYWluIGxheW91dCAoYGluZGV4Lmh0bWxgKSBmaWxlLlxuICogRXZlcnkgdGltZSB0aGUgY3VycmVudCByb3V0ZSBjaGFuZ2VzLCB0aGUgaW5jbHVkZWQgdmlldyBjaGFuZ2VzIHdpdGggaXQgYWNjb3JkaW5nIHRvIHRoZVxuICogY29uZmlndXJhdGlvbiBvZiB0aGUgYCRyb3V0ZWAgc2VydmljZS5cbiAqXG4gKiBSZXF1aXJlcyB0aGUge0BsaW5rIG5nUm91dGUgYG5nUm91dGVgfSBtb2R1bGUgdG8gYmUgaW5zdGFsbGVkLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiBlbnRlciAtIGFuaW1hdGlvbiBpcyB1c2VkIHRvIGJyaW5nIG5ldyBjb250ZW50IGludG8gdGhlIGJyb3dzZXIuXG4gKiBsZWF2ZSAtIGFuaW1hdGlvbiBpcyB1c2VkIHRvIGFuaW1hdGUgZXhpc3RpbmcgY29udGVudCBhd2F5LlxuICpcbiAqIFRoZSBlbnRlciBhbmQgbGVhdmUgYW5pbWF0aW9uIG9jY3VyIGNvbmN1cnJlbnRseS5cbiAqXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA0MDBcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb25sb2FkIEV4cHJlc3Npb24gdG8gZXZhbHVhdGUgd2hlbmV2ZXIgdGhlIHZpZXcgdXBkYXRlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGF1dG9zY3JvbGwgV2hldGhlciBgbmdWaWV3YCBzaG91bGQgY2FsbCB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbFxuICogICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsfSB0byBzY3JvbGwgdGhlIHZpZXdwb3J0IGFmdGVyIHRoZSB2aWV3IGlzIHVwZGF0ZWQuXG4gKlxuICogICAgICAgICAgICAgICAgICAtIElmIHRoZSBhdHRyaWJ1dGUgaXMgbm90IHNldCwgZGlzYWJsZSBzY3JvbGxpbmcuXG4gKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBzZXQgd2l0aG91dCB2YWx1ZSwgZW5hYmxlIHNjcm9sbGluZy5cbiAqICAgICAgICAgICAgICAgICAgLSBPdGhlcndpc2UgZW5hYmxlIHNjcm9sbGluZyBvbmx5IGlmIHRoZSBgYXV0b3Njcm9sbGAgYXR0cmlidXRlIHZhbHVlIGV2YWx1YXRlZFxuICogICAgICAgICAgICAgICAgICAgIGFzIGFuIGV4cHJlc3Npb24geWllbGRzIGEgdHJ1dGh5IHZhbHVlLlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmdWaWV3LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIm5nVmlld0V4YW1wbGVcIlxuICAgICAgICAgICAgIGRlcHM9XCJhbmd1bGFyLXJvdXRlLmpzO2FuZ3VsYXItYW5pbWF0ZS5qc1wiXG4gICAgICAgICAgICAgYW5pbWF0aW9ucz1cInRydWVcIiBmaXhCYXNlPVwidHJ1ZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTWFpbkN0cmwgYXMgbWFpblwiPlxuICAgICAgICAgIENob29zZTpcbiAgICAgICAgICA8YSBocmVmPVwiQm9vay9Nb2J5XCI+TW9ieTwvYT4gfFxuICAgICAgICAgIDxhIGhyZWY9XCJCb29rL01vYnkvY2gvMVwiPk1vYnk6IENoMTwvYT4gfFxuICAgICAgICAgIDxhIGhyZWY9XCJCb29rL0dhdHNieVwiPkdhdHNieTwvYT4gfFxuICAgICAgICAgIDxhIGhyZWY9XCJCb29rL0dhdHNieS9jaC80P2tleT12YWx1ZVwiPkdhdHNieTogQ2g0PC9hPiB8XG4gICAgICAgICAgPGEgaHJlZj1cIkJvb2svU2NhcmxldFwiPlNjYXJsZXQgTGV0dGVyPC9hPjxici8+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidmlldy1hbmltYXRlLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBuZy12aWV3IGNsYXNzPVwidmlldy1hbmltYXRlXCI+PC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGhyIC8+XG5cbiAgICAgICAgICA8cHJlPiRsb2NhdGlvbi5wYXRoKCkgPSB7e21haW4uJGxvY2F0aW9uLnBhdGgoKX19PC9wcmU+XG4gICAgICAgICAgPHByZT4kcm91dGUuY3VycmVudC50ZW1wbGF0ZVVybCA9IHt7bWFpbi4kcm91dGUuY3VycmVudC50ZW1wbGF0ZVVybH19PC9wcmU+XG4gICAgICAgICAgPHByZT4kcm91dGUuY3VycmVudC5wYXJhbXMgPSB7e21haW4uJHJvdXRlLmN1cnJlbnQucGFyYW1zfX08L3ByZT5cbiAgICAgICAgICA8cHJlPiRyb3V0ZVBhcmFtcyA9IHt7bWFpbi4kcm91dGVQYXJhbXN9fTwvcHJlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmlsZT5cblxuICAgICAgPGZpbGUgbmFtZT1cImJvb2suaHRtbFwiPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIGNvbnRyb2xsZXI6IHt7Ym9vay5uYW1lfX08YnIgLz5cbiAgICAgICAgICBCb29rIElkOiB7e2Jvb2sucGFyYW1zLmJvb2tJZH19PGJyIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuXG4gICAgICA8ZmlsZSBuYW1lPVwiY2hhcHRlci5odG1sXCI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgY29udHJvbGxlcjoge3tjaGFwdGVyLm5hbWV9fTxiciAvPlxuICAgICAgICAgIEJvb2sgSWQ6IHt7Y2hhcHRlci5wYXJhbXMuYm9va0lkfX08YnIgLz5cbiAgICAgICAgICBDaGFwdGVyIElkOiB7e2NoYXB0ZXIucGFyYW1zLmNoYXB0ZXJJZH19XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuXG4gICAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgICAgLnZpZXctYW5pbWF0ZS1jb250YWluZXIge1xuICAgICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICAgIGhlaWdodDoxMDBweCFpbXBvcnRhbnQ7XG4gICAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICAgIGhlaWdodDo0MHB4O1xuICAgICAgICAgIG92ZXJmbG93OmhpZGRlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC52aWV3LWFuaW1hdGUge1xuICAgICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgICAgfVxuXG4gICAgICAgIC52aWV3LWFuaW1hdGUubmctZW50ZXIsIC52aWV3LWFuaW1hdGUubmctbGVhdmUge1xuICAgICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMS41cztcblxuICAgICAgICAgIGRpc3BsYXk6YmxvY2s7XG4gICAgICAgICAgd2lkdGg6MTAwJTtcbiAgICAgICAgICBib3JkZXItbGVmdDoxcHggc29saWQgYmxhY2s7XG5cbiAgICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgICB0b3A6MDtcbiAgICAgICAgICBsZWZ0OjA7XG4gICAgICAgICAgcmlnaHQ6MDtcbiAgICAgICAgICBib3R0b206MDtcbiAgICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICAgIH1cblxuICAgICAgICAudmlldy1hbmltYXRlLm5nLWVudGVyIHtcbiAgICAgICAgICBsZWZ0OjEwMCU7XG4gICAgICAgIH1cbiAgICAgICAgLnZpZXctYW5pbWF0ZS5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICAgIGxlZnQ6MDtcbiAgICAgICAgfVxuICAgICAgICAudmlldy1hbmltYXRlLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7XG4gICAgICAgICAgbGVmdDotMTAwJTtcbiAgICAgICAgfVxuICAgICAgPC9maWxlPlxuXG4gICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ1ZpZXdFeGFtcGxlJywgWyduZ1JvdXRlJywgJ25nQW5pbWF0ZSddKVxuICAgICAgICAgIC5jb25maWcoWyckcm91dGVQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlcicsXG4gICAgICAgICAgICBmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAgICAgICAud2hlbignL0Jvb2svOmJvb2tJZCcsIHtcbiAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYm9vay5odG1sJyxcbiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdCb29rQ3RybCcsXG4gICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdib29rJ1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLndoZW4oJy9Cb29rLzpib29rSWQvY2gvOmNoYXB0ZXJJZCcsIHtcbiAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY2hhcHRlci5odG1sJyxcbiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDaGFwdGVyQ3RybCcsXG4gICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdjaGFwdGVyJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcbiAgICAgICAgICB9XSlcbiAgICAgICAgICAuY29udHJvbGxlcignTWFpbkN0cmwnLCBbJyRyb3V0ZScsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCRyb3V0ZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgdGhpcy4kcm91dGUgPSAkcm91dGU7XG4gICAgICAgICAgICAgIHRoaXMuJGxvY2F0aW9uID0gJGxvY2F0aW9uO1xuICAgICAgICAgICAgICB0aGlzLiRyb3V0ZVBhcmFtcyA9ICRyb3V0ZVBhcmFtcztcbiAgICAgICAgICB9XSlcbiAgICAgICAgICAuY29udHJvbGxlcignQm9va0N0cmwnLCBbJyRyb3V0ZVBhcmFtcycsIGZ1bmN0aW9uKCRyb3V0ZVBhcmFtcykge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gXCJCb29rQ3RybFwiO1xuICAgICAgICAgICAgdGhpcy5wYXJhbXMgPSAkcm91dGVQYXJhbXM7XG4gICAgICAgICAgfV0pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0NoYXB0ZXJDdHJsJywgWyckcm91dGVQYXJhbXMnLCBmdW5jdGlvbigkcm91dGVQYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiQ2hhcHRlckN0cmxcIjtcbiAgICAgICAgICAgIHRoaXMucGFyYW1zID0gJHJvdXRlUGFyYW1zO1xuICAgICAgICAgIH1dKTtcblxuICAgICAgPC9maWxlPlxuXG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgbG9hZCBhbmQgY29tcGlsZSBjb3JyZWN0IHRlbXBsYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5saW5rVGV4dCgnTW9ieTogQ2gxJykpLmNsaWNrKCk7XG4gICAgICAgICAgdmFyIGNvbnRlbnQgPSBlbGVtZW50KGJ5LmNzcygnW25nLXZpZXddJykpLmdldFRleHQoKTtcbiAgICAgICAgICBleHBlY3QoY29udGVudCkudG9NYXRjaCgvY29udHJvbGxlclxcOiBDaGFwdGVyQ3RybC8pO1xuICAgICAgICAgIGV4cGVjdChjb250ZW50KS50b01hdGNoKC9Cb29rIElkXFw6IE1vYnkvKTtcbiAgICAgICAgICBleHBlY3QoY29udGVudCkudG9NYXRjaCgvQ2hhcHRlciBJZFxcOiAxLyk7XG5cbiAgICAgICAgICBlbGVtZW50KGJ5LnBhcnRpYWxMaW5rVGV4dCgnU2NhcmxldCcpKS5jbGljaygpO1xuXG4gICAgICAgICAgY29udGVudCA9IGVsZW1lbnQoYnkuY3NzKCdbbmctdmlld10nKSkuZ2V0VGV4dCgpO1xuICAgICAgICAgIGV4cGVjdChjb250ZW50KS50b01hdGNoKC9jb250cm9sbGVyXFw6IEJvb2tDdHJsLyk7XG4gICAgICAgICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL0Jvb2sgSWRcXDogU2NhcmxldC8pO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBldmVudFxuICogQG5hbWUgbmdWaWV3IyR2aWV3Q29udGVudExvYWRlZFxuICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBjdXJyZW50IG5nVmlldyBzY29wZVxuICogQGRlc2NyaXB0aW9uXG4gKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIG5nVmlldyBjb250ZW50IGlzIHJlbG9hZGVkLlxuICovXG5uZ1ZpZXdGYWN0b3J5LiRpbmplY3QgPSBbJyRyb3V0ZScsICckYW5jaG9yU2Nyb2xsJywgJyRhbmltYXRlJ107XG5mdW5jdGlvbiBuZ1ZpZXdGYWN0b3J5KCRyb3V0ZSwgJGFuY2hvclNjcm9sbCwgJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VDQScsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgcHJpb3JpdHk6IDQwMCxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50LCBhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICB2YXIgY3VycmVudFNjb3BlLFxuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQsXG4gICAgICAgICAgICBwcmV2aW91c0xlYXZlQW5pbWF0aW9uLFxuICAgICAgICAgICAgYXV0b1Njcm9sbEV4cCA9IGF0dHIuYXV0b3Njcm9sbCxcbiAgICAgICAgICAgIG9ubG9hZEV4cCA9IGF0dHIub25sb2FkIHx8ICcnO1xuXG4gICAgICAgIHNjb3BlLiRvbignJHJvdXRlQ2hhbmdlU3VjY2VzcycsIHVwZGF0ZSk7XG4gICAgICAgIHVwZGF0ZSgpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFudXBMYXN0VmlldygpIHtcbiAgICAgICAgICBpZiAocHJldmlvdXNMZWF2ZUFuaW1hdGlvbikge1xuICAgICAgICAgICAgJGFuaW1hdGUuY2FuY2VsKHByZXZpb3VzTGVhdmVBbmltYXRpb24pO1xuICAgICAgICAgICAgcHJldmlvdXNMZWF2ZUFuaW1hdGlvbiA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGN1cnJlbnRTY29wZSkge1xuICAgICAgICAgICAgY3VycmVudFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICBjdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHByZXZpb3VzTGVhdmVBbmltYXRpb24gPSAkYW5pbWF0ZS5sZWF2ZShjdXJyZW50RWxlbWVudCk7XG4gICAgICAgICAgICBwcmV2aW91c0xlYXZlQW5pbWF0aW9uLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzTGVhdmVBbmltYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICAgIHZhciBsb2NhbHMgPSAkcm91dGUuY3VycmVudCAmJiAkcm91dGUuY3VycmVudC5sb2NhbHMsXG4gICAgICAgICAgICAgIHRlbXBsYXRlID0gbG9jYWxzICYmIGxvY2Fscy4kdGVtcGxhdGU7XG5cbiAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQodGVtcGxhdGUpKSB7XG4gICAgICAgICAgICB2YXIgbmV3U2NvcGUgPSBzY29wZS4kbmV3KCk7XG4gICAgICAgICAgICB2YXIgY3VycmVudCA9ICRyb3V0ZS5jdXJyZW50O1xuXG4gICAgICAgICAgICAvLyBOb3RlOiBUaGlzIHdpbGwgYWxzbyBsaW5rIGFsbCBjaGlsZHJlbiBvZiBuZy12aWV3IHRoYXQgd2VyZSBjb250YWluZWQgaW4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAvLyBodG1sLiBJZiB0aGF0IGNvbnRlbnQgY29udGFpbnMgY29udHJvbGxlcnMsIC4uLiB0aGV5IGNvdWxkIHBvbGx1dGUvY2hhbmdlIHRoZSBzY29wZS5cbiAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHVzaW5nIG5nLXZpZXcgb24gYW4gZWxlbWVudCB3aXRoIGFkZGl0aW9uYWwgY29udGVudCBkb2VzIG5vdCBtYWtlIHNlbnNlLi4uXG4gICAgICAgICAgICAvLyBOb3RlOiBXZSBjYW4ndCByZW1vdmUgdGhlbSBpbiB0aGUgY2xvbmVBdHRjaEZuIG9mICR0cmFuc2NsdWRlIGFzIHRoYXRcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uIGlzIGNhbGxlZCBiZWZvcmUgbGlua2luZyB0aGUgY29udGVudCwgd2hpY2ggd291bGQgYXBwbHkgY2hpbGRcbiAgICAgICAgICAgIC8vIGRpcmVjdGl2ZXMgdG8gbm9uIGV4aXN0aW5nIGVsZW1lbnRzLlxuICAgICAgICAgICAgdmFyIGNsb25lID0gJHRyYW5zY2x1ZGUobmV3U2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBudWxsLCBjdXJyZW50RWxlbWVudCB8fCAkZWxlbWVudCkudGhlbihmdW5jdGlvbiBvbk5nVmlld0VudGVyKCkge1xuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChhdXRvU2Nyb2xsRXhwKVxuICAgICAgICAgICAgICAgICAgJiYgKCFhdXRvU2Nyb2xsRXhwIHx8IHNjb3BlLiRldmFsKGF1dG9TY3JvbGxFeHApKSkge1xuICAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGNsZWFudXBMYXN0VmlldygpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY2xvbmU7XG4gICAgICAgICAgICBjdXJyZW50U2NvcGUgPSBjdXJyZW50LnNjb3BlID0gbmV3U2NvcGU7XG4gICAgICAgICAgICBjdXJyZW50U2NvcGUuJGVtaXQoJyR2aWV3Q29udGVudExvYWRlZCcpO1xuICAgICAgICAgICAgY3VycmVudFNjb3BlLiRldmFsKG9ubG9hZEV4cCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsZWFudXBMYXN0VmlldygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuLy8gVGhpcyBkaXJlY3RpdmUgaXMgY2FsbGVkIGR1cmluZyB0aGUgJHRyYW5zY2x1ZGUgY2FsbCBvZiB0aGUgZmlyc3QgYG5nVmlld2AgZGlyZWN0aXZlLlxuLy8gSXQgd2lsbCByZXBsYWNlIGFuZCBjb21waWxlIHRoZSBjb250ZW50IG9mIHRoZSBlbGVtZW50IHdpdGggdGhlIGxvYWRlZCB0ZW1wbGF0ZS5cbi8vIFdlIG5lZWQgdGhpcyBkaXJlY3RpdmUgc28gdGhhdCB0aGUgZWxlbWVudCBjb250ZW50IGlzIGFscmVhZHkgZmlsbGVkIHdoZW5cbi8vIHRoZSBsaW5rIGZ1bmN0aW9uIG9mIGFub3RoZXIgZGlyZWN0aXZlIG9uIHRoZSBzYW1lIGVsZW1lbnQgYXMgbmdWaWV3XG4vLyBpcyBjYWxsZWQuXG5uZ1ZpZXdGaWxsQ29udGVudEZhY3RvcnkuJGluamVjdCA9IFsnJGNvbXBpbGUnLCAnJGNvbnRyb2xsZXInLCAnJHJvdXRlJ107XG5mdW5jdGlvbiBuZ1ZpZXdGaWxsQ29udGVudEZhY3RvcnkoJGNvbXBpbGUsICRjb250cm9sbGVyLCAkcm91dGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VDQScsXG4gICAgcHJpb3JpdHk6IC00MDAsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsICRlbGVtZW50KSB7XG4gICAgICB2YXIgY3VycmVudCA9ICRyb3V0ZS5jdXJyZW50LFxuICAgICAgICAgIGxvY2FscyA9IGN1cnJlbnQubG9jYWxzO1xuXG4gICAgICAkZWxlbWVudC5odG1sKGxvY2Fscy4kdGVtcGxhdGUpO1xuXG4gICAgICB2YXIgbGluayA9ICRjb21waWxlKCRlbGVtZW50LmNvbnRlbnRzKCkpO1xuXG4gICAgICBpZiAoY3VycmVudC5jb250cm9sbGVyKSB7XG4gICAgICAgIGxvY2Fscy4kc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSAkY29udHJvbGxlcihjdXJyZW50LmNvbnRyb2xsZXIsIGxvY2Fscyk7XG4gICAgICAgIGlmIChjdXJyZW50LmNvbnRyb2xsZXJBcykge1xuICAgICAgICAgIHNjb3BlW2N1cnJlbnQuY29udHJvbGxlckFzXSA9IGNvbnRyb2xsZXI7XG4gICAgICAgIH1cbiAgICAgICAgJGVsZW1lbnQuZGF0YSgnJG5nQ29udHJvbGxlckNvbnRyb2xsZXInLCBjb250cm9sbGVyKTtcbiAgICAgICAgJGVsZW1lbnQuY2hpbGRyZW4oKS5kYXRhKCckbmdDb250cm9sbGVyQ29udHJvbGxlcicsIGNvbnRyb2xsZXIpO1xuICAgICAgfVxuXG4gICAgICBsaW5rKHNjb3BlKTtcbiAgICB9XG4gIH07XG59XG5cblxufSkod2luZG93LCB3aW5kb3cuYW5ndWxhcik7XG4iLCIvKlxuIEFuZ3VsYXJKUyB2MS40LjlcbiAoYykgMjAxMC0yMDE1IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuIExpY2Vuc2U6IE1JVFxuKi9cbihmdW5jdGlvbihwLGMsQyl7J3VzZSBzdHJpY3QnO2Z1bmN0aW9uIHYocixoLGcpe3JldHVybntyZXN0cmljdDpcIkVDQVwiLHRlcm1pbmFsOiEwLHByaW9yaXR5OjQwMCx0cmFuc2NsdWRlOlwiZWxlbWVudFwiLGxpbms6ZnVuY3Rpb24oYSxmLGIsZCx5KXtmdW5jdGlvbiB6KCl7ayYmKGcuY2FuY2VsKGspLGs9bnVsbCk7bCYmKGwuJGRlc3Ryb3koKSxsPW51bGwpO20mJihrPWcubGVhdmUobSksay50aGVuKGZ1bmN0aW9uKCl7az1udWxsfSksbT1udWxsKX1mdW5jdGlvbiB4KCl7dmFyIGI9ci5jdXJyZW50JiZyLmN1cnJlbnQubG9jYWxzO2lmKGMuaXNEZWZpbmVkKGImJmIuJHRlbXBsYXRlKSl7dmFyIGI9YS4kbmV3KCksZD1yLmN1cnJlbnQ7bT15KGIsZnVuY3Rpb24oYil7Zy5lbnRlcihiLG51bGwsbXx8ZikudGhlbihmdW5jdGlvbigpeyFjLmlzRGVmaW5lZCh0KXx8dCYmIWEuJGV2YWwodCl8fGgoKX0pO3ooKX0pO2w9ZC5zY29wZT1iO2wuJGVtaXQoXCIkdmlld0NvbnRlbnRMb2FkZWRcIik7XG5sLiRldmFsKHcpfWVsc2UgeigpfXZhciBsLG0sayx0PWIuYXV0b3Njcm9sbCx3PWIub25sb2FkfHxcIlwiO2EuJG9uKFwiJHJvdXRlQ2hhbmdlU3VjY2Vzc1wiLHgpO3goKX19fWZ1bmN0aW9uIEEoYyxoLGcpe3JldHVybntyZXN0cmljdDpcIkVDQVwiLHByaW9yaXR5Oi00MDAsbGluazpmdW5jdGlvbihhLGYpe3ZhciBiPWcuY3VycmVudCxkPWIubG9jYWxzO2YuaHRtbChkLiR0ZW1wbGF0ZSk7dmFyIHk9YyhmLmNvbnRlbnRzKCkpO2IuY29udHJvbGxlciYmKGQuJHNjb3BlPWEsZD1oKGIuY29udHJvbGxlcixkKSxiLmNvbnRyb2xsZXJBcyYmKGFbYi5jb250cm9sbGVyQXNdPWQpLGYuZGF0YShcIiRuZ0NvbnRyb2xsZXJDb250cm9sbGVyXCIsZCksZi5jaGlsZHJlbigpLmRhdGEoXCIkbmdDb250cm9sbGVyQ29udHJvbGxlclwiLGQpKTt5KGEpfX19cD1jLm1vZHVsZShcIm5nUm91dGVcIixbXCJuZ1wiXSkucHJvdmlkZXIoXCIkcm91dGVcIixmdW5jdGlvbigpe2Z1bmN0aW9uIHIoYSxmKXtyZXR1cm4gYy5leHRlbmQoT2JqZWN0LmNyZWF0ZShhKSxcbmYpfWZ1bmN0aW9uIGgoYSxjKXt2YXIgYj1jLmNhc2VJbnNlbnNpdGl2ZU1hdGNoLGQ9e29yaWdpbmFsUGF0aDphLHJlZ2V4cDphfSxnPWQua2V5cz1bXTthPWEucmVwbGFjZSgvKFsoKS5dKS9nLFwiXFxcXCQxXCIpLnJlcGxhY2UoLyhcXC8pPzooXFx3KykoW1xcP1xcKl0pPy9nLGZ1bmN0aW9uKGEsYyxiLGQpe2E9XCI/XCI9PT1kP2Q6bnVsbDtkPVwiKlwiPT09ZD9kOm51bGw7Zy5wdXNoKHtuYW1lOmIsb3B0aW9uYWw6ISFhfSk7Yz1jfHxcIlwiO3JldHVyblwiXCIrKGE/XCJcIjpjKStcIig/OlwiKyhhP2M6XCJcIikrKGQmJlwiKC4rPylcInx8XCIoW14vXSspXCIpKyhhfHxcIlwiKStcIilcIisoYXx8XCJcIil9KS5yZXBsYWNlKC8oW1xcLyRcXCpdKS9nLFwiXFxcXCQxXCIpO2QucmVnZXhwPW5ldyBSZWdFeHAoXCJeXCIrYStcIiRcIixiP1wiaVwiOlwiXCIpO3JldHVybiBkfXZhciBnPXt9O3RoaXMud2hlbj1mdW5jdGlvbihhLGYpe3ZhciBiPWMuY29weShmKTtjLmlzVW5kZWZpbmVkKGIucmVsb2FkT25TZWFyY2gpJiYoYi5yZWxvYWRPblNlYXJjaD0hMCk7XG5jLmlzVW5kZWZpbmVkKGIuY2FzZUluc2Vuc2l0aXZlTWF0Y2gpJiYoYi5jYXNlSW5zZW5zaXRpdmVNYXRjaD10aGlzLmNhc2VJbnNlbnNpdGl2ZU1hdGNoKTtnW2FdPWMuZXh0ZW5kKGIsYSYmaChhLGIpKTtpZihhKXt2YXIgZD1cIi9cIj09YVthLmxlbmd0aC0xXT9hLnN1YnN0cigwLGEubGVuZ3RoLTEpOmErXCIvXCI7Z1tkXT1jLmV4dGVuZCh7cmVkaXJlY3RUbzphfSxoKGQsYikpfXJldHVybiB0aGlzfTt0aGlzLmNhc2VJbnNlbnNpdGl2ZU1hdGNoPSExO3RoaXMub3RoZXJ3aXNlPWZ1bmN0aW9uKGEpe1wic3RyaW5nXCI9PT10eXBlb2YgYSYmKGE9e3JlZGlyZWN0VG86YX0pO3RoaXMud2hlbihudWxsLGEpO3JldHVybiB0aGlzfTt0aGlzLiRnZXQ9W1wiJHJvb3RTY29wZVwiLFwiJGxvY2F0aW9uXCIsXCIkcm91dGVQYXJhbXNcIixcIiRxXCIsXCIkaW5qZWN0b3JcIixcIiR0ZW1wbGF0ZVJlcXVlc3RcIixcIiRzY2VcIixmdW5jdGlvbihhLGYsYixkLGgscCx4KXtmdW5jdGlvbiBsKGIpe3ZhciBlPXMuY3VycmVudDtcbih2PShuPWsoKSkmJmUmJm4uJCRyb3V0ZT09PWUuJCRyb3V0ZSYmYy5lcXVhbHMobi5wYXRoUGFyYW1zLGUucGF0aFBhcmFtcykmJiFuLnJlbG9hZE9uU2VhcmNoJiYhdyl8fCFlJiYhbnx8YS4kYnJvYWRjYXN0KFwiJHJvdXRlQ2hhbmdlU3RhcnRcIixuLGUpLmRlZmF1bHRQcmV2ZW50ZWQmJmImJmIucHJldmVudERlZmF1bHQoKX1mdW5jdGlvbiBtKCl7dmFyIHU9cy5jdXJyZW50LGU9bjtpZih2KXUucGFyYW1zPWUucGFyYW1zLGMuY29weSh1LnBhcmFtcyxiKSxhLiRicm9hZGNhc3QoXCIkcm91dGVVcGRhdGVcIix1KTtlbHNlIGlmKGV8fHUpdz0hMSwocy5jdXJyZW50PWUpJiZlLnJlZGlyZWN0VG8mJihjLmlzU3RyaW5nKGUucmVkaXJlY3RUbyk/Zi5wYXRoKHQoZS5yZWRpcmVjdFRvLGUucGFyYW1zKSkuc2VhcmNoKGUucGFyYW1zKS5yZXBsYWNlKCk6Zi51cmwoZS5yZWRpcmVjdFRvKGUucGF0aFBhcmFtcyxmLnBhdGgoKSxmLnNlYXJjaCgpKSkucmVwbGFjZSgpKSxkLndoZW4oZSkudGhlbihmdW5jdGlvbigpe2lmKGUpe3ZhciBhPVxuYy5leHRlbmQoe30sZS5yZXNvbHZlKSxiLGY7Yy5mb3JFYWNoKGEsZnVuY3Rpb24oYixlKXthW2VdPWMuaXNTdHJpbmcoYik/aC5nZXQoYik6aC5pbnZva2UoYixudWxsLG51bGwsZSl9KTtjLmlzRGVmaW5lZChiPWUudGVtcGxhdGUpP2MuaXNGdW5jdGlvbihiKSYmKGI9YihlLnBhcmFtcykpOmMuaXNEZWZpbmVkKGY9ZS50ZW1wbGF0ZVVybCkmJihjLmlzRnVuY3Rpb24oZikmJihmPWYoZS5wYXJhbXMpKSxjLmlzRGVmaW5lZChmKSYmKGUubG9hZGVkVGVtcGxhdGVVcmw9eC52YWx1ZU9mKGYpLGI9cChmKSkpO2MuaXNEZWZpbmVkKGIpJiYoYS4kdGVtcGxhdGU9Yik7cmV0dXJuIGQuYWxsKGEpfX0pLnRoZW4oZnVuY3Rpb24oZil7ZT09cy5jdXJyZW50JiYoZSYmKGUubG9jYWxzPWYsYy5jb3B5KGUucGFyYW1zLGIpKSxhLiRicm9hZGNhc3QoXCIkcm91dGVDaGFuZ2VTdWNjZXNzXCIsZSx1KSl9LGZ1bmN0aW9uKGIpe2U9PXMuY3VycmVudCYmYS4kYnJvYWRjYXN0KFwiJHJvdXRlQ2hhbmdlRXJyb3JcIixcbmUsdSxiKX0pfWZ1bmN0aW9uIGsoKXt2YXIgYSxiO2MuZm9yRWFjaChnLGZ1bmN0aW9uKGQsZyl7dmFyIHE7aWYocT0hYil7dmFyIGg9Zi5wYXRoKCk7cT1kLmtleXM7dmFyIGw9e307aWYoZC5yZWdleHApaWYoaD1kLnJlZ2V4cC5leGVjKGgpKXtmb3IodmFyIGs9MSxtPWgubGVuZ3RoO2s8bTsrK2spe3ZhciBuPXFbay0xXSxwPWhba107biYmcCYmKGxbbi5uYW1lXT1wKX1xPWx9ZWxzZSBxPW51bGw7ZWxzZSBxPW51bGw7cT1hPXF9cSYmKGI9cihkLHtwYXJhbXM6Yy5leHRlbmQoe30sZi5zZWFyY2goKSxhKSxwYXRoUGFyYW1zOmF9KSxiLiQkcm91dGU9ZCl9KTtyZXR1cm4gYnx8Z1tudWxsXSYmcihnW251bGxdLHtwYXJhbXM6e30scGF0aFBhcmFtczp7fX0pfWZ1bmN0aW9uIHQoYSxiKXt2YXIgZD1bXTtjLmZvckVhY2goKGF8fFwiXCIpLnNwbGl0KFwiOlwiKSxmdW5jdGlvbihhLGMpe2lmKDA9PT1jKWQucHVzaChhKTtlbHNle3ZhciBmPWEubWF0Y2goLyhcXHcrKSg/Ols/Kl0pPyguKikvKSxcbmc9ZlsxXTtkLnB1c2goYltnXSk7ZC5wdXNoKGZbMl18fFwiXCIpO2RlbGV0ZSBiW2ddfX0pO3JldHVybiBkLmpvaW4oXCJcIil9dmFyIHc9ITEsbix2LHM9e3JvdXRlczpnLHJlbG9hZDpmdW5jdGlvbigpe3c9ITA7YS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCl7bCgpO20oKX0pfSx1cGRhdGVQYXJhbXM6ZnVuY3Rpb24oYSl7aWYodGhpcy5jdXJyZW50JiZ0aGlzLmN1cnJlbnQuJCRyb3V0ZSlhPWMuZXh0ZW5kKHt9LHRoaXMuY3VycmVudC5wYXJhbXMsYSksZi5wYXRoKHQodGhpcy5jdXJyZW50LiQkcm91dGUub3JpZ2luYWxQYXRoLGEpKSxmLnNlYXJjaChhKTtlbHNlIHRocm93IEIoXCJub3JvdXRcIik7fX07YS4kb24oXCIkbG9jYXRpb25DaGFuZ2VTdGFydFwiLGwpO2EuJG9uKFwiJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc1wiLG0pO3JldHVybiBzfV19KTt2YXIgQj1jLiQkbWluRXJyKFwibmdSb3V0ZVwiKTtwLnByb3ZpZGVyKFwiJHJvdXRlUGFyYW1zXCIsZnVuY3Rpb24oKXt0aGlzLiRnZXQ9ZnVuY3Rpb24oKXtyZXR1cm57fX19KTtcbnAuZGlyZWN0aXZlKFwibmdWaWV3XCIsdik7cC5kaXJlY3RpdmUoXCJuZ1ZpZXdcIixBKTt2LiRpbmplY3Q9W1wiJHJvdXRlXCIsXCIkYW5jaG9yU2Nyb2xsXCIsXCIkYW5pbWF0ZVwiXTtBLiRpbmplY3Q9W1wiJGNvbXBpbGVcIixcIiRjb250cm9sbGVyXCIsXCIkcm91dGVcIl19KSh3aW5kb3csd2luZG93LmFuZ3VsYXIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5ndWxhci1yb3V0ZS5taW4uanMubWFwXG4iLCJyZXF1aXJlKCcuL2FuZ3VsYXItcm91dGUnKTtcbm1vZHVsZS5leHBvcnRzID0gJ25nUm91dGUnO1xuIiwidmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG52YXIgZ3VscCA9IHJlcXVpcmUoJ2d1bHAnKTtcblxuLy8gTG9hZCBhbGwgZ3VscCBwbHVnaW5zIGF1dG9tYXRpY2FsbHlcbi8vIGFuZCBhdHRhY2ggdGhlbSB0byB0aGUgYHBsdWdpbnNgIG9iamVjdFxudmFyIHBsdWdpbnMgPSByZXF1aXJlKCdndWxwLWxvYWQtcGx1Z2lucycpKCk7XG5cbi8vIFRlbXBvcmFyeSBzb2x1dGlvbiB1bnRpbCBndWxwIDRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ndWxwanMvZ3VscC9pc3N1ZXMvMzU1XG52YXIgcnVuU2VxdWVuY2UgPSByZXF1aXJlKCdydW4tc2VxdWVuY2UnKTtcblxudmFyIHBrZyA9IHJlcXVpcmUoJy4vcGFja2FnZS5qc29uJyk7XG52YXIgZGlycyA9IHBrZ1snaDVicC1jb25maWdzJ10uZGlyZWN0b3JpZXM7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gfCBIZWxwZXIgdGFza3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZ3VscC50YXNrKCdhcmNoaXZlOmNyZWF0ZV9hcmNoaXZlX2RpcicsIGZ1bmN0aW9uICgpIHtcbiAgICBmcy5ta2RpclN5bmMocGF0aC5yZXNvbHZlKGRpcnMuYXJjaGl2ZSksICcwNzU1Jyk7XG59KTtcblxuZ3VscC50YXNrKCdhcmNoaXZlOnppcCcsIGZ1bmN0aW9uIChkb25lKSB7XG5cbiAgICB2YXIgYXJjaGl2ZU5hbWUgPSBwYXRoLnJlc29sdmUoZGlycy5hcmNoaXZlLCBwa2cubmFtZSArICdfdicgKyBwa2cudmVyc2lvbiArICcuemlwJyk7XG4gICAgdmFyIGFyY2hpdmVyID0gcmVxdWlyZSgnYXJjaGl2ZXInKSgnemlwJyk7XG4gICAgdmFyIGZpbGVzID0gcmVxdWlyZSgnZ2xvYicpLnN5bmMoJyoqLyouKicsIHtcbiAgICAgICAgJ2N3ZCc6IGRpcnMuZGlzdCxcbiAgICAgICAgJ2RvdCc6IHRydWUgLy8gaW5jbHVkZSBoaWRkZW4gZmlsZXNcbiAgICB9KTtcbiAgICB2YXIgb3V0cHV0ID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oYXJjaGl2ZU5hbWUpO1xuXG4gICAgYXJjaGl2ZXIub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSk7XG5cbiAgICBvdXRwdXQub24oJ2Nsb3NlJywgZG9uZSk7XG5cbiAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7XG5cbiAgICAgICAgdmFyIGZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKGRpcnMuZGlzdCwgZmlsZSk7XG5cbiAgICAgICAgLy8gYGFyY2hpdmVyLmJ1bGtgIGRvZXMgbm90IG1haW50YWluIHRoZSBmaWxlXG4gICAgICAgIC8vIHBlcm1pc3Npb25zLCBzbyB3ZSBuZWVkIHRvIGFkZCBmaWxlcyBpbmRpdmlkdWFsbHlcbiAgICAgICAgYXJjaGl2ZXIuYXBwZW5kKGZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZVBhdGgpLCB7XG4gICAgICAgICAgICAnbmFtZSc6IGZpbGUsXG4gICAgICAgICAgICAnbW9kZSc6IGZzLnN0YXRTeW5jKGZpbGVQYXRoKVxuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgYXJjaGl2ZXIucGlwZShvdXRwdXQpO1xuICAgIGFyY2hpdmVyLmZpbmFsaXplKCk7XG5cbn0pO1xuXG5ndWxwLnRhc2soJ2NsZWFuJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICByZXF1aXJlKCdkZWwnKShbXG4gICAgICAgIGRpcnMuYXJjaGl2ZSxcbiAgICAgICAgZGlycy5kaXN0XG4gICAgXSwgZG9uZSk7XG59KTtcblxuZ3VscC50YXNrKCdjb3B5JywgW1xuICAgICdjb3B5Oi5odGFjY2VzcycsXG4gICAgJ2NvcHk6aW5kZXguaHRtbCcsXG4gICAgJ2NvcHk6anF1ZXJ5JyxcbiAgICAnY29weTpsaWNlbnNlJyxcbiAgICAnY29weTptYWluLmNzcycsXG4gICAgJ2NvcHk6bWlzYycsXG4gICAgJ2NvcHk6bm9ybWFsaXplJ1xuXSk7XG5cbmd1bHAudGFzaygnY29weTouaHRhY2Nlc3MnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGd1bHAuc3JjKCdub2RlX21vZHVsZXMvYXBhY2hlLXNlcnZlci1jb25maWdzL2Rpc3QvLmh0YWNjZXNzJylcbiAgICAgICAgICAgICAgIC5waXBlKHBsdWdpbnMucmVwbGFjZSgvIyBFcnJvckRvY3VtZW50L2csICdFcnJvckRvY3VtZW50JykpXG4gICAgICAgICAgICAgICAucGlwZShndWxwLmRlc3QoZGlycy5kaXN0KSk7XG59KTtcblxuZ3VscC50YXNrKCdjb3B5OmluZGV4Lmh0bWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGd1bHAuc3JjKGRpcnMuc3JjICsgJy9pbmRleC5odG1sJylcbiAgICAgICAgICAgICAgIC5waXBlKHBsdWdpbnMucmVwbGFjZSgve3tKUVVFUllfVkVSU0lPTn19L2csIHBrZy5kZXZEZXBlbmRlbmNpZXMuanF1ZXJ5KSlcbiAgICAgICAgICAgICAgIC5waXBlKGd1bHAuZGVzdChkaXJzLmRpc3QpKTtcbn0pO1xuXG5ndWxwLnRhc2soJ2NvcHk6anF1ZXJ5JywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBndWxwLnNyYyhbJ25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkubWluLmpzJ10pXG4gICAgICAgICAgICAgICAucGlwZShwbHVnaW5zLnJlbmFtZSgnanF1ZXJ5LScgKyBwa2cuZGV2RGVwZW5kZW5jaWVzLmpxdWVyeSArICcubWluLmpzJykpXG4gICAgICAgICAgICAgICAucGlwZShndWxwLmRlc3QoZGlycy5kaXN0ICsgJy9qcy92ZW5kb3InKSk7XG59KTtcblxuZ3VscC50YXNrKCdjb3B5OmxpY2Vuc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGd1bHAuc3JjKCdMSUNFTlNFLnR4dCcpXG4gICAgICAgICAgICAgICAucGlwZShndWxwLmRlc3QoZGlycy5kaXN0KSk7XG59KTtcblxuZ3VscC50YXNrKCdjb3B5Om1haW4uY3NzJywgZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIGJhbm5lciA9ICcvKiEgSFRNTDUgQm9pbGVycGxhdGUgdicgKyBwa2cudmVyc2lvbiArXG4gICAgICAgICAgICAgICAgICAgICcgfCAnICsgcGtnLmxpY2Vuc2UudHlwZSArICcgTGljZW5zZScgK1xuICAgICAgICAgICAgICAgICAgICAnIHwgJyArIHBrZy5ob21lcGFnZSArICcgKi9cXG5cXG4nO1xuXG4gICAgcmV0dXJuIGd1bHAuc3JjKGRpcnMuc3JjICsgJy9jc3MvbWFpbi5jc3MnKVxuICAgICAgICAgICAgICAgLnBpcGUocGx1Z2lucy5oZWFkZXIoYmFubmVyKSlcbiAgICAgICAgICAgICAgIC5waXBlKHBsdWdpbnMuYXV0b3ByZWZpeGVyKHtcbiAgICAgICAgICAgICAgICAgICBicm93c2VyczogWydsYXN0IDIgdmVyc2lvbnMnLCAnaWUgPj0gOCcsICc+IDElJ10sXG4gICAgICAgICAgICAgICAgICAgY2FzY2FkZTogZmFsc2VcbiAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgLnBpcGUoZ3VscC5kZXN0KGRpcnMuZGlzdCArICcvY3NzJykpO1xufSk7XG5cbmd1bHAudGFzaygnY29weTptaXNjJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBndWxwLnNyYyhbXG5cbiAgICAgICAgLy8gQ29weSBhbGwgZmlsZXNcbiAgICAgICAgZGlycy5zcmMgKyAnLyoqLyonLFxuXG4gICAgICAgIC8vIEV4Y2x1ZGUgdGhlIGZvbGxvd2luZyBmaWxlc1xuICAgICAgICAvLyAob3RoZXIgdGFza3Mgd2lsbCBoYW5kbGUgdGhlIGNvcHlpbmcgb2YgdGhlc2UgZmlsZXMpXG4gICAgICAgICchJyArIGRpcnMuc3JjICsgJy9jc3MvbWFpbi5jc3MnLFxuICAgICAgICAnIScgKyBkaXJzLnNyYyArICcvaW5kZXguaHRtbCdcblxuICAgIF0sIHtcblxuICAgICAgICAvLyBJbmNsdWRlIGhpZGRlbiBmaWxlcyBieSBkZWZhdWx0XG4gICAgICAgIGRvdDogdHJ1ZVxuXG4gICAgfSkucGlwZShndWxwLmRlc3QoZGlycy5kaXN0KSk7XG59KTtcblxuZ3VscC50YXNrKCdjb3B5Om5vcm1hbGl6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ3VscC5zcmMoJ25vZGVfbW9kdWxlcy9ub3JtYWxpemUuY3NzL25vcm1hbGl6ZS5jc3MnKVxuICAgICAgICAgICAgICAgLnBpcGUoZ3VscC5kZXN0KGRpcnMuZGlzdCArICcvY3NzJykpO1xufSk7XG5cbmd1bHAudGFzaygnbGludDpqcycsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ3VscC5zcmMoW1xuICAgICAgICAnZ3VscGZpbGUuanMnLFxuICAgICAgICBkaXJzLnNyYyArICcvanMvKi5qcycsXG4gICAgICAgIGRpcnMudGVzdCArICcvKi5qcydcbiAgICBdKS5waXBlKHBsdWdpbnMuanNjcygpKVxuICAgICAgLnBpcGUocGx1Z2lucy5qc2hpbnQoKSlcbiAgICAgIC5waXBlKHBsdWdpbnMuanNoaW50LnJlcG9ydGVyKCdqc2hpbnQtc3R5bGlzaCcpKVxuICAgICAgLnBpcGUocGx1Z2lucy5qc2hpbnQucmVwb3J0ZXIoJ2ZhaWwnKSk7XG59KTtcblxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIHwgTWFpbiB0YXNrcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmd1bHAudGFzaygnYXJjaGl2ZScsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgcnVuU2VxdWVuY2UoXG4gICAgICAgICdidWlsZCcsXG4gICAgICAgICdhcmNoaXZlOmNyZWF0ZV9hcmNoaXZlX2RpcicsXG4gICAgICAgICdhcmNoaXZlOnppcCcsXG4gICAgZG9uZSk7XG59KTtcblxuZ3VscC50YXNrKCdidWlsZCcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgcnVuU2VxdWVuY2UoXG4gICAgICAgIFsnY2xlYW4nLCAnbGludDpqcyddLFxuICAgICAgICAnY29weScsXG4gICAgZG9uZSk7XG59KTtcblxuZ3VscC50YXNrKCdkZWZhdWx0JywgWydidWlsZCddKTtcbiIsIi8vIEF2b2lkIGBjb25zb2xlYCBlcnJvcnMgaW4gYnJvd3NlcnMgdGhhdCBsYWNrIGEgY29uc29sZS5cbihmdW5jdGlvbigpIHtcbiAgICB2YXIgbWV0aG9kO1xuICAgIHZhciBub29wID0gZnVuY3Rpb24gKCkge307XG4gICAgdmFyIG1ldGhvZHMgPSBbXG4gICAgICAgICdhc3NlcnQnLCAnY2xlYXInLCAnY291bnQnLCAnZGVidWcnLCAnZGlyJywgJ2RpcnhtbCcsICdlcnJvcicsXG4gICAgICAgICdleGNlcHRpb24nLCAnZ3JvdXAnLCAnZ3JvdXBDb2xsYXBzZWQnLCAnZ3JvdXBFbmQnLCAnaW5mbycsICdsb2cnLFxuICAgICAgICAnbWFya1RpbWVsaW5lJywgJ3Byb2ZpbGUnLCAncHJvZmlsZUVuZCcsICd0YWJsZScsICd0aW1lJywgJ3RpbWVFbmQnLFxuICAgICAgICAndGltZWxpbmUnLCAndGltZWxpbmVFbmQnLCAndGltZVN0YW1wJywgJ3RyYWNlJywgJ3dhcm4nXG4gICAgXTtcbiAgICB2YXIgbGVuZ3RoID0gbWV0aG9kcy5sZW5ndGg7XG4gICAgdmFyIGNvbnNvbGUgPSAod2luZG93LmNvbnNvbGUgPSB3aW5kb3cuY29uc29sZSB8fCB7fSk7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgbWV0aG9kID0gbWV0aG9kc1tsZW5ndGhdO1xuXG4gICAgICAgIC8vIE9ubHkgc3R1YiB1bmRlZmluZWQgbWV0aG9kcy5cbiAgICAgICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHtcbiAgICAgICAgICAgIGNvbnNvbGVbbWV0aG9kXSA9IG5vb3A7XG4gICAgICAgIH1cbiAgICB9XG59KCkpO1xuXG4vLyBQbGFjZSBhbnkgalF1ZXJ5L2hlbHBlciBwbHVnaW5zIGluIGhlcmUuXG4iLCIvLyBBdm9pZCBgY29uc29sZWAgZXJyb3JzIGluIGJyb3dzZXJzIHRoYXQgbGFjayBhIGNvbnNvbGUuXG4oZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1ldGhvZDtcbiAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIHZhciBtZXRob2RzID0gW1xuICAgICAgICAnYXNzZXJ0JywgJ2NsZWFyJywgJ2NvdW50JywgJ2RlYnVnJywgJ2RpcicsICdkaXJ4bWwnLCAnZXJyb3InLFxuICAgICAgICAnZXhjZXB0aW9uJywgJ2dyb3VwJywgJ2dyb3VwQ29sbGFwc2VkJywgJ2dyb3VwRW5kJywgJ2luZm8nLCAnbG9nJyxcbiAgICAgICAgJ21hcmtUaW1lbGluZScsICdwcm9maWxlJywgJ3Byb2ZpbGVFbmQnLCAndGFibGUnLCAndGltZScsICd0aW1lRW5kJyxcbiAgICAgICAgJ3RpbWVsaW5lJywgJ3RpbWVsaW5lRW5kJywgJ3RpbWVTdGFtcCcsICd0cmFjZScsICd3YXJuJ1xuICAgIF07XG4gICAgdmFyIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoO1xuICAgIHZhciBjb25zb2xlID0gKHdpbmRvdy5jb25zb2xlID0gd2luZG93LmNvbnNvbGUgfHwge30pO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIG1ldGhvZCA9IG1ldGhvZHNbbGVuZ3RoXTtcblxuICAgICAgICAvLyBPbmx5IHN0dWIgdW5kZWZpbmVkIG1ldGhvZHMuXG4gICAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7XG4gICAgICAgICAgICBjb25zb2xlW21ldGhvZF0gPSBub29wO1xuICAgICAgICB9XG4gICAgfVxufSgpKTtcblxuLy8gUGxhY2UgYW55IGpRdWVyeS9oZWxwZXIgcGx1Z2lucyBpbiBoZXJlLlxuIiwiLyohIGpRdWVyeSB2MS4xMS4zIHwgKGMpIDIwMDUsIDIwMTUgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gfCBqcXVlcnkub3JnL2xpY2Vuc2UgKi9cbiFmdW5jdGlvbihhLGIpe1wib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1hLmRvY3VtZW50P2IoYSwhMCk6ZnVuY3Rpb24oYSl7aWYoIWEuZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTtyZXR1cm4gYihhKX06YihhKX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyxmdW5jdGlvbihhLGIpe3ZhciBjPVtdLGQ9Yy5zbGljZSxlPWMuY29uY2F0LGY9Yy5wdXNoLGc9Yy5pbmRleE9mLGg9e30saT1oLnRvU3RyaW5nLGo9aC5oYXNPd25Qcm9wZXJ0eSxrPXt9LGw9XCIxLjExLjNcIixtPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBtLmZuLmluaXQoYSxiKX0sbj0vXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csbz0vXi1tcy0vLHA9Ly0oW1xcZGEtel0pL2dpLHE9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi50b1VwcGVyQ2FzZSgpfTttLmZuPW0ucHJvdG90eXBlPXtqcXVlcnk6bCxjb25zdHJ1Y3RvcjptLHNlbGVjdG9yOlwiXCIsbGVuZ3RoOjAsdG9BcnJheTpmdW5jdGlvbigpe3JldHVybiBkLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YT8wPmE/dGhpc1thK3RoaXMubGVuZ3RoXTp0aGlzW2FdOmQuY2FsbCh0aGlzKX0scHVzaFN0YWNrOmZ1bmN0aW9uKGEpe3ZhciBiPW0ubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLGEpO3JldHVybiBiLnByZXZPYmplY3Q9dGhpcyxiLmNvbnRleHQ9dGhpcy5jb250ZXh0LGJ9LGVhY2g6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbS5lYWNoKHRoaXMsYSxiKX0sbWFwOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnB1c2hTdGFjayhtLm1hcCh0aGlzLGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGEuY2FsbChiLGMsYil9KSl9LHNsaWNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGQuYXBwbHkodGhpcyxhcmd1bWVudHMpKX0sZmlyc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgwKX0sbGFzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKC0xKX0sZXE6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5sZW5ndGgsYz0rYSsoMD5hP2I6MCk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGM+PTAmJmI+Yz9bdGhpc1tjXV06W10pfSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmV2T2JqZWN0fHx0aGlzLmNvbnN0cnVjdG9yKG51bGwpfSxwdXNoOmYsc29ydDpjLnNvcnQsc3BsaWNlOmMuc3BsaWNlfSxtLmV4dGVuZD1tLmZuLmV4dGVuZD1mdW5jdGlvbigpe3ZhciBhLGIsYyxkLGUsZixnPWFyZ3VtZW50c1swXXx8e30saD0xLGk9YXJndW1lbnRzLmxlbmd0aCxqPSExO2ZvcihcImJvb2xlYW5cIj09dHlwZW9mIGcmJihqPWcsZz1hcmd1bWVudHNbaF18fHt9LGgrKyksXCJvYmplY3RcIj09dHlwZW9mIGd8fG0uaXNGdW5jdGlvbihnKXx8KGc9e30pLGg9PT1pJiYoZz10aGlzLGgtLSk7aT5oO2grKylpZihudWxsIT0oZT1hcmd1bWVudHNbaF0pKWZvcihkIGluIGUpYT1nW2RdLGM9ZVtkXSxnIT09YyYmKGomJmMmJihtLmlzUGxhaW5PYmplY3QoYyl8fChiPW0uaXNBcnJheShjKSkpPyhiPyhiPSExLGY9YSYmbS5pc0FycmF5KGEpP2E6W10pOmY9YSYmbS5pc1BsYWluT2JqZWN0KGEpP2E6e30sZ1tkXT1tLmV4dGVuZChqLGYsYykpOnZvaWQgMCE9PWMmJihnW2RdPWMpKTtyZXR1cm4gZ30sbS5leHRlbmQoe2V4cGFuZG86XCJqUXVlcnlcIisobCtNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cXEQvZyxcIlwiKSxpc1JlYWR5OiEwLGVycm9yOmZ1bmN0aW9uKGEpe3Rocm93IG5ldyBFcnJvcihhKX0sbm9vcDpmdW5jdGlvbigpe30saXNGdW5jdGlvbjpmdW5jdGlvbihhKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT1tLnR5cGUoYSl9LGlzQXJyYXk6QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oYSl7cmV0dXJuXCJhcnJheVwiPT09bS50eXBlKGEpfSxpc1dpbmRvdzpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YSYmYT09YS53aW5kb3d9LGlzTnVtZXJpYzpmdW5jdGlvbihhKXtyZXR1cm4hbS5pc0FycmF5KGEpJiZhLXBhcnNlRmxvYXQoYSkrMT49MH0saXNFbXB0eU9iamVjdDpmdW5jdGlvbihhKXt2YXIgYjtmb3IoYiBpbiBhKXJldHVybiExO3JldHVybiEwfSxpc1BsYWluT2JqZWN0OmZ1bmN0aW9uKGEpe3ZhciBiO2lmKCFhfHxcIm9iamVjdFwiIT09bS50eXBlKGEpfHxhLm5vZGVUeXBlfHxtLmlzV2luZG93KGEpKXJldHVybiExO3RyeXtpZihhLmNvbnN0cnVjdG9yJiYhai5jYWxsKGEsXCJjb25zdHJ1Y3RvclwiKSYmIWouY2FsbChhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxcImlzUHJvdG90eXBlT2ZcIikpcmV0dXJuITF9Y2F0Y2goYyl7cmV0dXJuITF9aWYoay5vd25MYXN0KWZvcihiIGluIGEpcmV0dXJuIGouY2FsbChhLGIpO2ZvcihiIGluIGEpO3JldHVybiB2b2lkIDA9PT1ifHxqLmNhbGwoYSxiKX0sdHlwZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9hK1wiXCI6XCJvYmplY3RcIj09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGE/aFtpLmNhbGwoYSldfHxcIm9iamVjdFwiOnR5cGVvZiBhfSxnbG9iYWxFdmFsOmZ1bmN0aW9uKGIpe2ImJm0udHJpbShiKSYmKGEuZXhlY1NjcmlwdHx8ZnVuY3Rpb24oYil7YS5ldmFsLmNhbGwoYSxiKX0pKGIpfSxjYW1lbENhc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZShvLFwibXMtXCIpLnJlcGxhY2UocCxxKX0sbm9kZU5hbWU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09Yi50b0xvd2VyQ2FzZSgpfSxlYWNoOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlPTAsZj1hLmxlbmd0aCxnPXIoYSk7aWYoYyl7aWYoZyl7Zm9yKDtmPmU7ZSsrKWlmKGQ9Yi5hcHBseShhW2VdLGMpLGQ9PT0hMSlicmVha31lbHNlIGZvcihlIGluIGEpaWYoZD1iLmFwcGx5KGFbZV0sYyksZD09PSExKWJyZWFrfWVsc2UgaWYoZyl7Zm9yKDtmPmU7ZSsrKWlmKGQ9Yi5jYWxsKGFbZV0sZSxhW2VdKSxkPT09ITEpYnJlYWt9ZWxzZSBmb3IoZSBpbiBhKWlmKGQ9Yi5jYWxsKGFbZV0sZSxhW2VdKSxkPT09ITEpYnJlYWs7cmV0dXJuIGF9LHRyaW06ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/XCJcIjooYStcIlwiKS5yZXBsYWNlKG4sXCJcIil9LG1ha2VBcnJheTpmdW5jdGlvbihhLGIpe3ZhciBjPWJ8fFtdO3JldHVybiBudWxsIT1hJiYocihPYmplY3QoYSkpP20ubWVyZ2UoYyxcInN0cmluZ1wiPT10eXBlb2YgYT9bYV06YSk6Zi5jYWxsKGMsYSkpLGN9LGluQXJyYXk6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkO2lmKGIpe2lmKGcpcmV0dXJuIGcuY2FsbChiLGEsYyk7Zm9yKGQ9Yi5sZW5ndGgsYz1jPzA+Yz9NYXRoLm1heCgwLGQrYyk6YzowO2Q+YztjKyspaWYoYyBpbiBiJiZiW2NdPT09YSlyZXR1cm4gY31yZXR1cm4tMX0sbWVyZ2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz0rYi5sZW5ndGgsZD0wLGU9YS5sZW5ndGg7d2hpbGUoYz5kKWFbZSsrXT1iW2QrK107aWYoYyE9PWMpd2hpbGUodm9pZCAwIT09YltkXSlhW2UrK109YltkKytdO3JldHVybiBhLmxlbmd0aD1lLGF9LGdyZXA6ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZCxlPVtdLGY9MCxnPWEubGVuZ3RoLGg9IWM7Zz5mO2YrKylkPSFiKGFbZl0sZiksZCE9PWgmJmUucHVzaChhW2ZdKTtyZXR1cm4gZX0sbWFwOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxmPTAsZz1hLmxlbmd0aCxoPXIoYSksaT1bXTtpZihoKWZvcig7Zz5mO2YrKylkPWIoYVtmXSxmLGMpLG51bGwhPWQmJmkucHVzaChkKTtlbHNlIGZvcihmIGluIGEpZD1iKGFbZl0sZixjKSxudWxsIT1kJiZpLnB1c2goZCk7cmV0dXJuIGUuYXBwbHkoW10saSl9LGd1aWQ6MSxwcm94eTpmdW5jdGlvbihhLGIpe3ZhciBjLGUsZjtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYiYmKGY9YVtiXSxiPWEsYT1mKSxtLmlzRnVuY3Rpb24oYSk/KGM9ZC5jYWxsKGFyZ3VtZW50cywyKSxlPWZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYnx8dGhpcyxjLmNvbmNhdChkLmNhbGwoYXJndW1lbnRzKSkpfSxlLmd1aWQ9YS5ndWlkPWEuZ3VpZHx8bS5ndWlkKyssZSk6dm9pZCAwfSxub3c6ZnVuY3Rpb24oKXtyZXR1cm4rbmV3IERhdGV9LHN1cHBvcnQ6a30pLG0uZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3JcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oYSxiKXtoW1wiW29iamVjdCBcIitiK1wiXVwiXT1iLnRvTG93ZXJDYXNlKCl9KTtmdW5jdGlvbiByKGEpe3ZhciBiPVwibGVuZ3RoXCJpbiBhJiZhLmxlbmd0aCxjPW0udHlwZShhKTtyZXR1cm5cImZ1bmN0aW9uXCI9PT1jfHxtLmlzV2luZG93KGEpPyExOjE9PT1hLm5vZGVUeXBlJiZiPyEwOlwiYXJyYXlcIj09PWN8fDA9PT1ifHxcIm51bWJlclwiPT10eXBlb2YgYiYmYj4wJiZiLTEgaW4gYX12YXIgcz1mdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaCxpLGosayxsLG0sbixvLHAscSxyLHMsdCx1PVwic2l6emxlXCIrMSpuZXcgRGF0ZSx2PWEuZG9jdW1lbnQsdz0wLHg9MCx5PWhhKCksej1oYSgpLEE9aGEoKSxCPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9PT1iJiYobD0hMCksMH0sQz0xPDwzMSxEPXt9Lmhhc093blByb3BlcnR5LEU9W10sRj1FLnBvcCxHPUUucHVzaCxIPUUucHVzaCxJPUUuc2xpY2UsSj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wLGQ9YS5sZW5ndGg7ZD5jO2MrKylpZihhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX0sSz1cImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsTD1cIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsTT1cIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcXFx4MDAtXFxcXHhhMF0pK1wiLE49TS5yZXBsYWNlKFwid1wiLFwidyNcIiksTz1cIlxcXFxbXCIrTCtcIiooXCIrTStcIikoPzpcIitMK1wiKihbKl4kfCF+XT89KVwiK0wrXCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIitOK1wiKSl8KVwiK0wrXCIqXFxcXF1cIixQPVwiOihcIitNK1wiKSg/OlxcXFwoKCgnKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIitPK1wiKSopfC4qKVxcXFwpfClcIixRPW5ldyBSZWdFeHAoTCtcIitcIixcImdcIiksUj1uZXcgUmVnRXhwKFwiXlwiK0wrXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiK0wrXCIrJFwiLFwiZ1wiKSxTPW5ldyBSZWdFeHAoXCJeXCIrTCtcIiosXCIrTCtcIipcIiksVD1uZXcgUmVnRXhwKFwiXlwiK0wrXCIqKFs+K35dfFwiK0wrXCIpXCIrTCtcIipcIiksVT1uZXcgUmVnRXhwKFwiPVwiK0wrXCIqKFteXFxcXF0nXFxcIl0qPylcIitMK1wiKlxcXFxdXCIsXCJnXCIpLFY9bmV3IFJlZ0V4cChQKSxXPW5ldyBSZWdFeHAoXCJeXCIrTitcIiRcIiksWD17SUQ6bmV3IFJlZ0V4cChcIl4jKFwiK00rXCIpXCIpLENMQVNTOm5ldyBSZWdFeHAoXCJeXFxcXC4oXCIrTStcIilcIiksVEFHOm5ldyBSZWdFeHAoXCJeKFwiK00ucmVwbGFjZShcIndcIixcIncqXCIpK1wiKVwiKSxBVFRSOm5ldyBSZWdFeHAoXCJeXCIrTyksUFNFVURPOm5ldyBSZWdFeHAoXCJeXCIrUCksQ0hJTEQ6bmV3IFJlZ0V4cChcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIrTCtcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiK0wrXCIqKD86KFsrLV18KVwiK0wrXCIqKFxcXFxkKyl8KSlcIitMK1wiKlxcXFwpfClcIixcImlcIiksYm9vbDpuZXcgUmVnRXhwKFwiXig/OlwiK0srXCIpJFwiLFwiaVwiKSxuZWVkc0NvbnRleHQ6bmV3IFJlZ0V4cChcIl5cIitMK1wiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIitMK1wiKigoPzotXFxcXGQpP1xcXFxkKilcIitMK1wiKlxcXFwpfCkoPz1bXi1dfCQpXCIsXCJpXCIpfSxZPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksWj0vXmhcXGQkL2ksJD0vXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLF89L14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sYWE9L1srfl0vLGJhPS8nfFxcXFwvZyxjYT1uZXcgUmVnRXhwKFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIrTCtcIj98KFwiK0wrXCIpfC4pXCIsXCJpZ1wiKSxkYT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9XCIweFwiK2ItNjU1MzY7cmV0dXJuIGQhPT1kfHxjP2I6MD5kP1N0cmluZy5mcm9tQ2hhckNvZGUoZCs2NTUzNik6U3RyaW5nLmZyb21DaGFyQ29kZShkPj4xMHw1NTI5NiwxMDIzJmR8NTYzMjApfSxlYT1mdW5jdGlvbigpe20oKX07dHJ5e0guYXBwbHkoRT1JLmNhbGwodi5jaGlsZE5vZGVzKSx2LmNoaWxkTm9kZXMpLEVbdi5jaGlsZE5vZGVzLmxlbmd0aF0ubm9kZVR5cGV9Y2F0Y2goZmEpe0g9e2FwcGx5OkUubGVuZ3RoP2Z1bmN0aW9uKGEsYil7Ry5hcHBseShhLEkuY2FsbChiKSl9OmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5sZW5ndGgsZD0wO3doaWxlKGFbYysrXT1iW2QrK10pO2EubGVuZ3RoPWMtMX19fWZ1bmN0aW9uIGdhKGEsYixkLGUpe3ZhciBmLGgsaixrLGwsbyxyLHMsdyx4O2lmKChiP2Iub3duZXJEb2N1bWVudHx8Yjp2KSE9PW4mJm0oYiksYj1ifHxuLGQ9ZHx8W10saz1iLm5vZGVUeXBlLFwic3RyaW5nXCIhPXR5cGVvZiBhfHwhYXx8MSE9PWsmJjkhPT1rJiYxMSE9PWspcmV0dXJuIGQ7aWYoIWUmJnApe2lmKDExIT09ayYmKGY9Xy5leGVjKGEpKSlpZihqPWZbMV0pe2lmKDk9PT1rKXtpZihoPWIuZ2V0RWxlbWVudEJ5SWQoaiksIWh8fCFoLnBhcmVudE5vZGUpcmV0dXJuIGQ7aWYoaC5pZD09PWopcmV0dXJuIGQucHVzaChoKSxkfWVsc2UgaWYoYi5vd25lckRvY3VtZW50JiYoaD1iLm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaikpJiZ0KGIsaCkmJmguaWQ9PT1qKXJldHVybiBkLnB1c2goaCksZH1lbHNle2lmKGZbMl0pcmV0dXJuIEguYXBwbHkoZCxiLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpKSxkO2lmKChqPWZbM10pJiZjLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpcmV0dXJuIEguYXBwbHkoZCxiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoaikpLGR9aWYoYy5xc2EmJighcXx8IXEudGVzdChhKSkpe2lmKHM9cj11LHc9Yix4PTEhPT1rJiZhLDE9PT1rJiZcIm9iamVjdFwiIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXtvPWcoYSksKHI9Yi5nZXRBdHRyaWJ1dGUoXCJpZFwiKSk/cz1yLnJlcGxhY2UoYmEsXCJcXFxcJCZcIik6Yi5zZXRBdHRyaWJ1dGUoXCJpZFwiLHMpLHM9XCJbaWQ9J1wiK3MrXCInXSBcIixsPW8ubGVuZ3RoO3doaWxlKGwtLSlvW2xdPXMrcmEob1tsXSk7dz1hYS50ZXN0KGEpJiZwYShiLnBhcmVudE5vZGUpfHxiLHg9by5qb2luKFwiLFwiKX1pZih4KXRyeXtyZXR1cm4gSC5hcHBseShkLHcucXVlcnlTZWxlY3RvckFsbCh4KSksZH1jYXRjaCh5KXt9ZmluYWxseXtyfHxiLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpfX19cmV0dXJuIGkoYS5yZXBsYWNlKFIsXCIkMVwiKSxiLGQsZSl9ZnVuY3Rpb24gaGEoKXt2YXIgYT1bXTtmdW5jdGlvbiBiKGMsZSl7cmV0dXJuIGEucHVzaChjK1wiIFwiKT5kLmNhY2hlTGVuZ3RoJiZkZWxldGUgYlthLnNoaWZ0KCldLGJbYytcIiBcIl09ZX1yZXR1cm4gYn1mdW5jdGlvbiBpYShhKXtyZXR1cm4gYVt1XT0hMCxhfWZ1bmN0aW9uIGphKGEpe3ZhciBiPW4uY3JlYXRlRWxlbWVudChcImRpdlwiKTt0cnl7cmV0dXJuISFhKGIpfWNhdGNoKGMpe3JldHVybiExfWZpbmFsbHl7Yi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYiksYj1udWxsfX1mdW5jdGlvbiBrYShhLGIpe3ZhciBjPWEuc3BsaXQoXCJ8XCIpLGU9YS5sZW5ndGg7d2hpbGUoZS0tKWQuYXR0ckhhbmRsZVtjW2VdXT1ifWZ1bmN0aW9uIGxhKGEsYil7dmFyIGM9YiYmYSxkPWMmJjE9PT1hLm5vZGVUeXBlJiYxPT09Yi5ub2RlVHlwZSYmKH5iLnNvdXJjZUluZGV4fHxDKS0ofmEuc291cmNlSW5kZXh8fEMpO2lmKGQpcmV0dXJuIGQ7aWYoYyl3aGlsZShjPWMubmV4dFNpYmxpbmcpaWYoYz09PWIpcmV0dXJuLTE7cmV0dXJuIGE/MTotMX1mdW5jdGlvbiBtYShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWMmJmIudHlwZT09PWF9fWZ1bmN0aW9uIG5hKGEpe3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuKFwiaW5wdXRcIj09PWN8fFwiYnV0dG9uXCI9PT1jKSYmYi50eXBlPT09YX19ZnVuY3Rpb24gb2EoYSl7cmV0dXJuIGlhKGZ1bmN0aW9uKGIpe3JldHVybiBiPStiLGlhKGZ1bmN0aW9uKGMsZCl7dmFyIGUsZj1hKFtdLGMubGVuZ3RoLGIpLGc9Zi5sZW5ndGg7d2hpbGUoZy0tKWNbZT1mW2ddXSYmKGNbZV09IShkW2VdPWNbZV0pKX0pfSl9ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGEmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEVsZW1lbnRzQnlUYWdOYW1lJiZhfWM9Z2Euc3VwcG9ydD17fSxmPWdhLmlzWE1MPWZ1bmN0aW9uKGEpe3ZhciBiPWEmJihhLm93bmVyRG9jdW1lbnR8fGEpLmRvY3VtZW50RWxlbWVudDtyZXR1cm4gYj9cIkhUTUxcIiE9PWIubm9kZU5hbWU6ITF9LG09Z2Euc2V0RG9jdW1lbnQ9ZnVuY3Rpb24oYSl7dmFyIGIsZSxnPWE/YS5vd25lckRvY3VtZW50fHxhOnY7cmV0dXJuIGchPT1uJiY5PT09Zy5ub2RlVHlwZSYmZy5kb2N1bWVudEVsZW1lbnQ/KG49ZyxvPWcuZG9jdW1lbnRFbGVtZW50LGU9Zy5kZWZhdWx0VmlldyxlJiZlIT09ZS50b3AmJihlLmFkZEV2ZW50TGlzdGVuZXI/ZS5hZGRFdmVudExpc3RlbmVyKFwidW5sb2FkXCIsZWEsITEpOmUuYXR0YWNoRXZlbnQmJmUuYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLGVhKSkscD0hZihnKSxjLmF0dHJpYnV0ZXM9amEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuY2xhc3NOYW1lPVwiaVwiLCFhLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKX0pLGMuZ2V0RWxlbWVudHNCeVRhZ05hbWU9amEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuYXBwZW5kQ2hpbGQoZy5jcmVhdGVDb21tZW50KFwiXCIpKSwhYS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RofSksYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPSQudGVzdChnLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpLGMuZ2V0QnlJZD1qYShmdW5jdGlvbihhKXtyZXR1cm4gby5hcHBlbmRDaGlsZChhKS5pZD11LCFnLmdldEVsZW1lbnRzQnlOYW1lfHwhZy5nZXRFbGVtZW50c0J5TmFtZSh1KS5sZW5ndGh9KSxjLmdldEJ5SWQ/KGQuZmluZC5JRD1mdW5jdGlvbihhLGIpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBiLmdldEVsZW1lbnRCeUlkJiZwKXt2YXIgYz1iLmdldEVsZW1lbnRCeUlkKGEpO3JldHVybiBjJiZjLnBhcmVudE5vZGU/W2NdOltdfX0sZC5maWx0ZXIuSUQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKGNhLGRhKTtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJuIGEuZ2V0QXR0cmlidXRlKFwiaWRcIik9PT1ifX0pOihkZWxldGUgZC5maW5kLklELGQuZmlsdGVyLklEPWZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShjYSxkYSk7cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBjPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEF0dHJpYnV0ZU5vZGUmJmEuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO3JldHVybiBjJiZjLnZhbHVlPT09Yn19KSxkLmZpbmQuVEFHPWMuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgYi5nZXRFbGVtZW50c0J5VGFnTmFtZT9iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpOmMucXNhP2IucXVlcnlTZWxlY3RvckFsbChhKTp2b2lkIDB9OmZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPTAsZj1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpO2lmKFwiKlwiPT09YSl7d2hpbGUoYz1mW2UrK10pMT09PWMubm9kZVR5cGUmJmQucHVzaChjKTtyZXR1cm4gZH1yZXR1cm4gZn0sZC5maW5kLkNMQVNTPWMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmZnVuY3Rpb24oYSxiKXtyZXR1cm4gcD9iLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoYSk6dm9pZCAwfSxyPVtdLHE9W10sKGMucXNhPSQudGVzdChnLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKGphKGZ1bmN0aW9uKGEpe28uYXBwZW5kQ2hpbGQoYSkuaW5uZXJIVE1MPVwiPGEgaWQ9J1wiK3UrXCInPjwvYT48c2VsZWN0IGlkPSdcIit1K1wiLVxcZl0nIG1zYWxsb3djYXB0dXJlPScnPjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCIsYS5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoJiZxLnB1c2goXCJbKl4kXT1cIitMK1wiKig/OicnfFxcXCJcXFwiKVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aHx8cS5wdXNoKFwiXFxcXFtcIitMK1wiKig/OnZhbHVlfFwiK0srXCIpXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIltpZH49XCIrdStcIi1dXCIpLmxlbmd0aHx8cS5wdXNoKFwifj1cIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RofHxxLnB1c2goXCI6Y2hlY2tlZFwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhI1wiK3UrXCIrKlwiKS5sZW5ndGh8fHEucHVzaChcIi4jLitbK35dXCIpfSksamEoZnVuY3Rpb24oYSl7dmFyIGI9Zy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7Yi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJoaWRkZW5cIiksYS5hcHBlbmRDaGlsZChiKS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJEXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCYmcS5wdXNoKFwibmFtZVwiK0wrXCIqWypeJHwhfl0/PVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGh8fHEucHVzaChcIjplbmFibGVkXCIsXCI6ZGlzYWJsZWRcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKSxxLnB1c2goXCIsLio6XCIpfSkpLChjLm1hdGNoZXNTZWxlY3Rvcj0kLnRlc3Qocz1vLm1hdGNoZXN8fG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxvLm1vek1hdGNoZXNTZWxlY3Rvcnx8by5vTWF0Y2hlc1NlbGVjdG9yfHxvLm1zTWF0Y2hlc1NlbGVjdG9yKSkmJmphKGZ1bmN0aW9uKGEpe2MuZGlzY29ubmVjdGVkTWF0Y2g9cy5jYWxsKGEsXCJkaXZcIikscy5jYWxsKGEsXCJbcyE9JyddOnhcIiksci5wdXNoKFwiIT1cIixQKX0pLHE9cS5sZW5ndGgmJm5ldyBSZWdFeHAocS5qb2luKFwifFwiKSkscj1yLmxlbmd0aCYmbmV3IFJlZ0V4cChyLmpvaW4oXCJ8XCIpKSxiPSQudGVzdChvLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSx0PWJ8fCQudGVzdChvLmNvbnRhaW5zKT9mdW5jdGlvbihhLGIpe3ZhciBjPTk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEsZD1iJiZiLnBhcmVudE5vZGU7cmV0dXJuIGE9PT1kfHwhKCFkfHwxIT09ZC5ub2RlVHlwZXx8IShjLmNvbnRhaW5zP2MuY29udGFpbnMoZCk6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiYmMTYmYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihkKSkpfTpmdW5jdGlvbihhLGIpe2lmKGIpd2hpbGUoYj1iLnBhcmVudE5vZGUpaWYoYj09PWEpcmV0dXJuITA7cmV0dXJuITF9LEI9Yj9mdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBsPSEwLDA7dmFyIGQ9IWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24tIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247cmV0dXJuIGQ/ZDooZD0oYS5vd25lckRvY3VtZW50fHxhKT09PShiLm93bmVyRG9jdW1lbnR8fGIpP2EuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYik6MSwxJmR8fCFjLnNvcnREZXRhY2hlZCYmYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhKT09PWQ/YT09PWd8fGEub3duZXJEb2N1bWVudD09PXYmJnQodixhKT8tMTpiPT09Z3x8Yi5vd25lckRvY3VtZW50PT09diYmdCh2LGIpPzE6az9KKGssYSktSihrLGIpOjA6NCZkPy0xOjEpfTpmdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBsPSEwLDA7dmFyIGMsZD0wLGU9YS5wYXJlbnROb2RlLGY9Yi5wYXJlbnROb2RlLGg9W2FdLGk9W2JdO2lmKCFlfHwhZilyZXR1cm4gYT09PWc/LTE6Yj09PWc/MTplPy0xOmY/MTprP0ooayxhKS1KKGssYik6MDtpZihlPT09ZilyZXR1cm4gbGEoYSxiKTtjPWE7d2hpbGUoYz1jLnBhcmVudE5vZGUpaC51bnNoaWZ0KGMpO2M9Yjt3aGlsZShjPWMucGFyZW50Tm9kZSlpLnVuc2hpZnQoYyk7d2hpbGUoaFtkXT09PWlbZF0pZCsrO3JldHVybiBkP2xhKGhbZF0saVtkXSk6aFtkXT09PXY/LTE6aVtkXT09PXY/MTowfSxnKTpufSxnYS5tYXRjaGVzPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdhKGEsbnVsbCxudWxsLGIpfSxnYS5tYXRjaGVzU2VsZWN0b3I9ZnVuY3Rpb24oYSxiKXtpZigoYS5vd25lckRvY3VtZW50fHxhKSE9PW4mJm0oYSksYj1iLnJlcGxhY2UoVSxcIj0nJDEnXVwiKSwhKCFjLm1hdGNoZXNTZWxlY3Rvcnx8IXB8fHImJnIudGVzdChiKXx8cSYmcS50ZXN0KGIpKSl0cnl7dmFyIGQ9cy5jYWxsKGEsYik7aWYoZHx8Yy5kaXNjb25uZWN0ZWRNYXRjaHx8YS5kb2N1bWVudCYmMTEhPT1hLmRvY3VtZW50Lm5vZGVUeXBlKXJldHVybiBkfWNhdGNoKGUpe31yZXR1cm4gZ2EoYixuLG51bGwsW2FdKS5sZW5ndGg+MH0sZ2EuY29udGFpbnM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYS5vd25lckRvY3VtZW50fHxhKSE9PW4mJm0oYSksdChhLGIpfSxnYS5hdHRyPWZ1bmN0aW9uKGEsYil7KGEub3duZXJEb2N1bWVudHx8YSkhPT1uJiZtKGEpO3ZhciBlPWQuYXR0ckhhbmRsZVtiLnRvTG93ZXJDYXNlKCldLGY9ZSYmRC5jYWxsKGQuYXR0ckhhbmRsZSxiLnRvTG93ZXJDYXNlKCkpP2UoYSxiLCFwKTp2b2lkIDA7cmV0dXJuIHZvaWQgMCE9PWY/ZjpjLmF0dHJpYnV0ZXN8fCFwP2EuZ2V0QXR0cmlidXRlKGIpOihmPWEuZ2V0QXR0cmlidXRlTm9kZShiKSkmJmYuc3BlY2lmaWVkP2YudmFsdWU6bnVsbH0sZ2EuZXJyb3I9ZnVuY3Rpb24oYSl7dGhyb3cgbmV3IEVycm9yKFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIrYSl9LGdhLnVuaXF1ZVNvcnQ9ZnVuY3Rpb24oYSl7dmFyIGIsZD1bXSxlPTAsZj0wO2lmKGw9IWMuZGV0ZWN0RHVwbGljYXRlcyxrPSFjLnNvcnRTdGFibGUmJmEuc2xpY2UoMCksYS5zb3J0KEIpLGwpe3doaWxlKGI9YVtmKytdKWI9PT1hW2ZdJiYoZT1kLnB1c2goZikpO3doaWxlKGUtLSlhLnNwbGljZShkW2VdLDEpfXJldHVybiBrPW51bGwsYX0sZT1nYS5nZXRUZXh0PWZ1bmN0aW9uKGEpe3ZhciBiLGM9XCJcIixkPTAsZj1hLm5vZGVUeXBlO2lmKGYpe2lmKDE9PT1mfHw5PT09Znx8MTE9PT1mKXtpZihcInN0cmluZ1wiPT10eXBlb2YgYS50ZXh0Q29udGVudClyZXR1cm4gYS50ZXh0Q29udGVudDtmb3IoYT1hLmZpcnN0Q2hpbGQ7YTthPWEubmV4dFNpYmxpbmcpYys9ZShhKX1lbHNlIGlmKDM9PT1mfHw0PT09ZilyZXR1cm4gYS5ub2RlVmFsdWV9ZWxzZSB3aGlsZShiPWFbZCsrXSljKz1lKGIpO3JldHVybiBjfSxkPWdhLnNlbGVjdG9ycz17Y2FjaGVMZW5ndGg6NTAsY3JlYXRlUHNldWRvOmlhLG1hdGNoOlgsYXR0ckhhbmRsZTp7fSxmaW5kOnt9LHJlbGF0aXZlOntcIj5cIjp7ZGlyOlwicGFyZW50Tm9kZVwiLGZpcnN0OiEwfSxcIiBcIjp7ZGlyOlwicGFyZW50Tm9kZVwifSxcIitcIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCIsZmlyc3Q6ITB9LFwiflwiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihhKXtyZXR1cm4gYVsxXT1hWzFdLnJlcGxhY2UoY2EsZGEpLGFbM109KGFbM118fGFbNF18fGFbNV18fFwiXCIpLnJlcGxhY2UoY2EsZGEpLFwifj1cIj09PWFbMl0mJihhWzNdPVwiIFwiK2FbM10rXCIgXCIpLGEuc2xpY2UoMCw0KX0sQ0hJTEQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGFbMV09YVsxXS50b0xvd2VyQ2FzZSgpLFwibnRoXCI9PT1hWzFdLnNsaWNlKDAsMyk/KGFbM118fGdhLmVycm9yKGFbMF0pLGFbNF09KyhhWzRdP2FbNV0rKGFbNl18fDEpOjIqKFwiZXZlblwiPT09YVszXXx8XCJvZGRcIj09PWFbM10pKSxhWzVdPSsoYVs3XSthWzhdfHxcIm9kZFwiPT09YVszXSkpOmFbM10mJmdhLmVycm9yKGFbMF0pLGF9LFBTRVVETzpmdW5jdGlvbihhKXt2YXIgYixjPSFhWzZdJiZhWzJdO3JldHVybiBYLkNISUxELnRlc3QoYVswXSk/bnVsbDooYVszXT9hWzJdPWFbNF18fGFbNV18fFwiXCI6YyYmVi50ZXN0KGMpJiYoYj1nKGMsITApKSYmKGI9Yy5pbmRleE9mKFwiKVwiLGMubGVuZ3RoLWIpLWMubGVuZ3RoKSYmKGFbMF09YVswXS5zbGljZSgwLGIpLGFbMl09Yy5zbGljZSgwLGIpKSxhLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKGNhLGRhKS50b0xvd2VyQ2FzZSgpO3JldHVyblwiKlwiPT09YT9mdW5jdGlvbigpe3JldHVybiEwfTpmdW5jdGlvbihhKXtyZXR1cm4gYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09Yn19LENMQVNTOmZ1bmN0aW9uKGEpe3ZhciBiPXlbYStcIiBcIl07cmV0dXJuIGJ8fChiPW5ldyBSZWdFeHAoXCIoXnxcIitMK1wiKVwiK2ErXCIoXCIrTCtcInwkKVwiKSkmJnkoYSxmdW5jdGlvbihhKXtyZXR1cm4gYi50ZXN0KFwic3RyaW5nXCI9PXR5cGVvZiBhLmNsYXNzTmFtZSYmYS5jbGFzc05hbWV8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEF0dHJpYnV0ZSYmYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIil9KX0sQVRUUjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGZ1bmN0aW9uKGQpe3ZhciBlPWdhLmF0dHIoZCxhKTtyZXR1cm4gbnVsbD09ZT9cIiE9XCI9PT1iOmI/KGUrPVwiXCIsXCI9XCI9PT1iP2U9PT1jOlwiIT1cIj09PWI/ZSE9PWM6XCJePVwiPT09Yj9jJiYwPT09ZS5pbmRleE9mKGMpOlwiKj1cIj09PWI/YyYmZS5pbmRleE9mKGMpPi0xOlwiJD1cIj09PWI/YyYmZS5zbGljZSgtYy5sZW5ndGgpPT09YzpcIn49XCI9PT1iPyhcIiBcIitlLnJlcGxhY2UoUSxcIiBcIikrXCIgXCIpLmluZGV4T2YoYyk+LTE6XCJ8PVwiPT09Yj9lPT09Y3x8ZS5zbGljZSgwLGMubGVuZ3RoKzEpPT09YytcIi1cIjohMSk6ITB9fSxDSElMRDpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVwibnRoXCIhPT1hLnNsaWNlKDAsMyksZz1cImxhc3RcIiE9PWEuc2xpY2UoLTQpLGg9XCJvZi10eXBlXCI9PT1iO3JldHVybiAxPT09ZCYmMD09PWU/ZnVuY3Rpb24oYSl7cmV0dXJuISFhLnBhcmVudE5vZGV9OmZ1bmN0aW9uKGIsYyxpKXt2YXIgaixrLGwsbSxuLG8scD1mIT09Zz9cIm5leHRTaWJsaW5nXCI6XCJwcmV2aW91c1NpYmxpbmdcIixxPWIucGFyZW50Tm9kZSxyPWgmJmIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxzPSFpJiYhaDtpZihxKXtpZihmKXt3aGlsZShwKXtsPWI7d2hpbGUobD1sW3BdKWlmKGg/bC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09cjoxPT09bC5ub2RlVHlwZSlyZXR1cm4hMTtvPXA9XCJvbmx5XCI9PT1hJiYhbyYmXCJuZXh0U2libGluZ1wifXJldHVybiEwfWlmKG89W2c/cS5maXJzdENoaWxkOnEubGFzdENoaWxkXSxnJiZzKXtrPXFbdV18fChxW3VdPXt9KSxqPWtbYV18fFtdLG49alswXT09PXcmJmpbMV0sbT1qWzBdPT09dyYmalsyXSxsPW4mJnEuY2hpbGROb2Rlc1tuXTt3aGlsZShsPSsrbiYmbCYmbFtwXXx8KG09bj0wKXx8by5wb3AoKSlpZigxPT09bC5ub2RlVHlwZSYmKyttJiZsPT09Yil7a1thXT1bdyxuLG1dO2JyZWFrfX1lbHNlIGlmKHMmJihqPShiW3VdfHwoYlt1XT17fSkpW2FdKSYmalswXT09PXcpbT1qWzFdO2Vsc2Ugd2hpbGUobD0rK24mJmwmJmxbcF18fChtPW49MCl8fG8ucG9wKCkpaWYoKGg/bC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09cjoxPT09bC5ub2RlVHlwZSkmJisrbSYmKHMmJigobFt1XXx8KGxbdV09e30pKVthXT1bdyxtXSksbD09PWIpKWJyZWFrO3JldHVybiBtLT1lLG09PT1kfHxtJWQ9PT0wJiZtL2Q+PTB9fX0sUFNFVURPOmZ1bmN0aW9uKGEsYil7dmFyIGMsZT1kLnBzZXVkb3NbYV18fGQuc2V0RmlsdGVyc1thLnRvTG93ZXJDYXNlKCldfHxnYS5lcnJvcihcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIrYSk7cmV0dXJuIGVbdV0/ZShiKTplLmxlbmd0aD4xPyhjPVthLGEsXCJcIixiXSxkLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoYS50b0xvd2VyQ2FzZSgpKT9pYShmdW5jdGlvbihhLGMpe3ZhciBkLGY9ZShhLGIpLGc9Zi5sZW5ndGg7d2hpbGUoZy0tKWQ9SihhLGZbZ10pLGFbZF09IShjW2RdPWZbZ10pfSk6ZnVuY3Rpb24oYSl7cmV0dXJuIGUoYSwwLGMpfSk6ZX19LHBzZXVkb3M6e25vdDppYShmdW5jdGlvbihhKXt2YXIgYj1bXSxjPVtdLGQ9aChhLnJlcGxhY2UoUixcIiQxXCIpKTtyZXR1cm4gZFt1XT9pYShmdW5jdGlvbihhLGIsYyxlKXt2YXIgZixnPWQoYSxudWxsLGUsW10pLGg9YS5sZW5ndGg7d2hpbGUoaC0tKShmPWdbaF0pJiYoYVtoXT0hKGJbaF09ZikpfSk6ZnVuY3Rpb24oYSxlLGYpe3JldHVybiBiWzBdPWEsZChiLG51bGwsZixjKSxiWzBdPW51bGwsIWMucG9wKCl9fSksaGFzOmlhKGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gZ2EoYSxiKS5sZW5ndGg+MH19KSxjb250YWluczppYShmdW5jdGlvbihhKXtyZXR1cm4gYT1hLnJlcGxhY2UoY2EsZGEpLGZ1bmN0aW9uKGIpe3JldHVybihiLnRleHRDb250ZW50fHxiLmlubmVyVGV4dHx8ZShiKSkuaW5kZXhPZihhKT4tMX19KSxsYW5nOmlhKGZ1bmN0aW9uKGEpe3JldHVybiBXLnRlc3QoYXx8XCJcIil8fGdhLmVycm9yKFwidW5zdXBwb3J0ZWQgbGFuZzogXCIrYSksYT1hLnJlcGxhY2UoY2EsZGEpLnRvTG93ZXJDYXNlKCksZnVuY3Rpb24oYil7dmFyIGM7ZG8gaWYoYz1wP2IubGFuZzpiLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpfHxiLmdldEF0dHJpYnV0ZShcImxhbmdcIikpcmV0dXJuIGM9Yy50b0xvd2VyQ2FzZSgpLGM9PT1hfHwwPT09Yy5pbmRleE9mKGErXCItXCIpO3doaWxlKChiPWIucGFyZW50Tm9kZSkmJjE9PT1iLm5vZGVUeXBlKTtyZXR1cm4hMX19KSx0YXJnZXQ6ZnVuY3Rpb24oYil7dmFyIGM9YS5sb2NhdGlvbiYmYS5sb2NhdGlvbi5oYXNoO3JldHVybiBjJiZjLnNsaWNlKDEpPT09Yi5pZH0scm9vdDpmdW5jdGlvbihhKXtyZXR1cm4gYT09PW99LGZvY3VzOmZ1bmN0aW9uKGEpe3JldHVybiBhPT09bi5hY3RpdmVFbGVtZW50JiYoIW4uaGFzRm9jdXN8fG4uaGFzRm9jdXMoKSkmJiEhKGEudHlwZXx8YS5ocmVmfHx+YS50YWJJbmRleCl9LGVuYWJsZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzYWJsZWQ9PT0hMX0sZGlzYWJsZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzYWJsZWQ9PT0hMH0sY2hlY2tlZDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09YiYmISFhLmNoZWNrZWR8fFwib3B0aW9uXCI9PT1iJiYhIWEuc2VsZWN0ZWR9LHNlbGVjdGVkOmZ1bmN0aW9uKGEpe3JldHVybiBhLnBhcmVudE5vZGUmJmEucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LGEuc2VsZWN0ZWQ9PT0hMH0sZW1wdHk6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5maXJzdENoaWxkO2E7YT1hLm5leHRTaWJsaW5nKWlmKGEubm9kZVR5cGU8NilyZXR1cm4hMTtyZXR1cm4hMH0scGFyZW50OmZ1bmN0aW9uKGEpe3JldHVybiFkLnBzZXVkb3MuZW1wdHkoYSl9LGhlYWRlcjpmdW5jdGlvbihhKXtyZXR1cm4gWi50ZXN0KGEubm9kZU5hbWUpfSxpbnB1dDpmdW5jdGlvbihhKXtyZXR1cm4gWS50ZXN0KGEubm9kZU5hbWUpfSxidXR0b246ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWImJlwiYnV0dG9uXCI9PT1hLnR5cGV8fFwiYnV0dG9uXCI9PT1ifSx0ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiO3JldHVyblwiaW5wdXRcIj09PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSYmXCJ0ZXh0XCI9PT1hLnR5cGUmJihudWxsPT0oYj1hLmdldEF0dHJpYnV0ZShcInR5cGVcIikpfHxcInRleHRcIj09PWIudG9Mb3dlckNhc2UoKSl9LGZpcnN0Om9hKGZ1bmN0aW9uKCl7cmV0dXJuWzBdfSksbGFzdDpvYShmdW5jdGlvbihhLGIpe3JldHVybltiLTFdfSksZXE6b2EoZnVuY3Rpb24oYSxiLGMpe3JldHVyblswPmM/YytiOmNdfSksZXZlbjpvYShmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wO2I+YztjKz0yKWEucHVzaChjKTtyZXR1cm4gYX0pLG9kZDpvYShmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0xO2I+YztjKz0yKWEucHVzaChjKTtyZXR1cm4gYX0pLGx0Om9hKGZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9MD5jP2MrYjpjOy0tZD49MDspYS5wdXNoKGQpO3JldHVybiBhfSksZ3Q6b2EoZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD0wPmM/YytiOmM7KytkPGI7KWEucHVzaChkKTtyZXR1cm4gYX0pfX0sZC5wc2V1ZG9zLm50aD1kLnBzZXVkb3MuZXE7Zm9yKGIgaW57cmFkaW86ITAsY2hlY2tib3g6ITAsZmlsZTohMCxwYXNzd29yZDohMCxpbWFnZTohMH0pZC5wc2V1ZG9zW2JdPW1hKGIpO2ZvcihiIGlue3N1Ym1pdDohMCxyZXNldDohMH0pZC5wc2V1ZG9zW2JdPW5hKGIpO2Z1bmN0aW9uIHFhKCl7fXFhLnByb3RvdHlwZT1kLmZpbHRlcnM9ZC5wc2V1ZG9zLGQuc2V0RmlsdGVycz1uZXcgcWEsZz1nYS50b2tlbml6ZT1mdW5jdGlvbihhLGIpe3ZhciBjLGUsZixnLGgsaSxqLGs9elthK1wiIFwiXTtpZihrKXJldHVybiBiPzA6ay5zbGljZSgwKTtoPWEsaT1bXSxqPWQucHJlRmlsdGVyO3doaWxlKGgpeyghY3x8KGU9Uy5leGVjKGgpKSkmJihlJiYoaD1oLnNsaWNlKGVbMF0ubGVuZ3RoKXx8aCksaS5wdXNoKGY9W10pKSxjPSExLChlPVQuZXhlYyhoKSkmJihjPWUuc2hpZnQoKSxmLnB1c2goe3ZhbHVlOmMsdHlwZTplWzBdLnJlcGxhY2UoUixcIiBcIil9KSxoPWguc2xpY2UoYy5sZW5ndGgpKTtmb3IoZyBpbiBkLmZpbHRlcikhKGU9WFtnXS5leGVjKGgpKXx8altnXSYmIShlPWpbZ10oZSkpfHwoYz1lLnNoaWZ0KCksZi5wdXNoKHt2YWx1ZTpjLHR5cGU6ZyxtYXRjaGVzOmV9KSxoPWguc2xpY2UoYy5sZW5ndGgpKTtpZighYylicmVha31yZXR1cm4gYj9oLmxlbmd0aDpoP2dhLmVycm9yKGEpOnooYSxpKS5zbGljZSgwKX07ZnVuY3Rpb24gcmEoYSl7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aCxkPVwiXCI7Yz5iO2IrKylkKz1hW2JdLnZhbHVlO3JldHVybiBkfWZ1bmN0aW9uIHNhKGEsYixjKXt2YXIgZD1iLmRpcixlPWMmJlwicGFyZW50Tm9kZVwiPT09ZCxmPXgrKztyZXR1cm4gYi5maXJzdD9mdW5jdGlvbihiLGMsZil7d2hpbGUoYj1iW2RdKWlmKDE9PT1iLm5vZGVUeXBlfHxlKXJldHVybiBhKGIsYyxmKX06ZnVuY3Rpb24oYixjLGcpe3ZhciBoLGksaj1bdyxmXTtpZihnKXt3aGlsZShiPWJbZF0paWYoKDE9PT1iLm5vZGVUeXBlfHxlKSYmYShiLGMsZykpcmV0dXJuITB9ZWxzZSB3aGlsZShiPWJbZF0paWYoMT09PWIubm9kZVR5cGV8fGUpe2lmKGk9Ylt1XXx8KGJbdV09e30pLChoPWlbZF0pJiZoWzBdPT09dyYmaFsxXT09PWYpcmV0dXJuIGpbMl09aFsyXTtpZihpW2RdPWosalsyXT1hKGIsYyxnKSlyZXR1cm4hMH19fWZ1bmN0aW9uIHRhKGEpe3JldHVybiBhLmxlbmd0aD4xP2Z1bmN0aW9uKGIsYyxkKXt2YXIgZT1hLmxlbmd0aDt3aGlsZShlLS0paWYoIWFbZV0oYixjLGQpKXJldHVybiExO3JldHVybiEwfTphWzBdfWZ1bmN0aW9uIHVhKGEsYixjKXtmb3IodmFyIGQ9MCxlPWIubGVuZ3RoO2U+ZDtkKyspZ2EoYSxiW2RdLGMpO3JldHVybiBjfWZ1bmN0aW9uIHZhKGEsYixjLGQsZSl7Zm9yKHZhciBmLGc9W10saD0wLGk9YS5sZW5ndGgsaj1udWxsIT1iO2k+aDtoKyspKGY9YVtoXSkmJighY3x8YyhmLGQsZSkpJiYoZy5wdXNoKGYpLGomJmIucHVzaChoKSk7cmV0dXJuIGd9ZnVuY3Rpb24gd2EoYSxiLGMsZCxlLGYpe3JldHVybiBkJiYhZFt1XSYmKGQ9d2EoZCkpLGUmJiFlW3VdJiYoZT13YShlLGYpKSxpYShmdW5jdGlvbihmLGcsaCxpKXt2YXIgaixrLGwsbT1bXSxuPVtdLG89Zy5sZW5ndGgscD1mfHx1YShifHxcIipcIixoLm5vZGVUeXBlP1toXTpoLFtdKSxxPSFhfHwhZiYmYj9wOnZhKHAsbSxhLGgsaSkscj1jP2V8fChmP2E6b3x8ZCk/W106ZzpxO2lmKGMmJmMocSxyLGgsaSksZCl7aj12YShyLG4pLGQoaixbXSxoLGkpLGs9ai5sZW5ndGg7d2hpbGUoay0tKShsPWpba10pJiYocltuW2tdXT0hKHFbbltrXV09bCkpfWlmKGYpe2lmKGV8fGEpe2lmKGUpe2o9W10saz1yLmxlbmd0aDt3aGlsZShrLS0pKGw9cltrXSkmJmoucHVzaChxW2tdPWwpO2UobnVsbCxyPVtdLGosaSl9az1yLmxlbmd0aDt3aGlsZShrLS0pKGw9cltrXSkmJihqPWU/SihmLGwpOm1ba10pPi0xJiYoZltqXT0hKGdbal09bCkpfX1lbHNlIHI9dmEocj09PWc/ci5zcGxpY2UobyxyLmxlbmd0aCk6ciksZT9lKG51bGwsZyxyLGkpOkguYXBwbHkoZyxyKX0pfWZ1bmN0aW9uIHhhKGEpe2Zvcih2YXIgYixjLGUsZj1hLmxlbmd0aCxnPWQucmVsYXRpdmVbYVswXS50eXBlXSxoPWd8fGQucmVsYXRpdmVbXCIgXCJdLGk9Zz8xOjAsaz1zYShmdW5jdGlvbihhKXtyZXR1cm4gYT09PWJ9LGgsITApLGw9c2EoZnVuY3Rpb24oYSl7cmV0dXJuIEooYixhKT4tMX0saCwhMCksbT1bZnVuY3Rpb24oYSxjLGQpe3ZhciBlPSFnJiYoZHx8YyE9PWopfHwoKGI9Yykubm9kZVR5cGU/ayhhLGMsZCk6bChhLGMsZCkpO3JldHVybiBiPW51bGwsZX1dO2Y+aTtpKyspaWYoYz1kLnJlbGF0aXZlW2FbaV0udHlwZV0pbT1bc2EodGEobSksYyldO2Vsc2V7aWYoYz1kLmZpbHRlclthW2ldLnR5cGVdLmFwcGx5KG51bGwsYVtpXS5tYXRjaGVzKSxjW3VdKXtmb3IoZT0rK2k7Zj5lO2UrKylpZihkLnJlbGF0aXZlW2FbZV0udHlwZV0pYnJlYWs7cmV0dXJuIHdhKGk+MSYmdGEobSksaT4xJiZyYShhLnNsaWNlKDAsaS0xKS5jb25jYXQoe3ZhbHVlOlwiIFwiPT09YVtpLTJdLnR5cGU/XCIqXCI6XCJcIn0pKS5yZXBsYWNlKFIsXCIkMVwiKSxjLGU+aSYmeGEoYS5zbGljZShpLGUpKSxmPmUmJnhhKGE9YS5zbGljZShlKSksZj5lJiZyYShhKSl9bS5wdXNoKGMpfXJldHVybiB0YShtKX1mdW5jdGlvbiB5YShhLGIpe3ZhciBjPWIubGVuZ3RoPjAsZT1hLmxlbmd0aD4wLGY9ZnVuY3Rpb24oZixnLGgsaSxrKXt2YXIgbCxtLG8scD0wLHE9XCIwXCIscj1mJiZbXSxzPVtdLHQ9aix1PWZ8fGUmJmQuZmluZC5UQUcoXCIqXCIsayksdj13Kz1udWxsPT10PzE6TWF0aC5yYW5kb20oKXx8LjEseD11Lmxlbmd0aDtmb3IoayYmKGo9ZyE9PW4mJmcpO3EhPT14JiZudWxsIT0obD11W3FdKTtxKyspe2lmKGUmJmwpe209MDt3aGlsZShvPWFbbSsrXSlpZihvKGwsZyxoKSl7aS5wdXNoKGwpO2JyZWFrfWsmJih3PXYpfWMmJigobD0hbyYmbCkmJnAtLSxmJiZyLnB1c2gobCkpfWlmKHArPXEsYyYmcSE9PXApe209MDt3aGlsZShvPWJbbSsrXSlvKHIscyxnLGgpO2lmKGYpe2lmKHA+MCl3aGlsZShxLS0pcltxXXx8c1txXXx8KHNbcV09Ri5jYWxsKGkpKTtzPXZhKHMpfUguYXBwbHkoaSxzKSxrJiYhZiYmcy5sZW5ndGg+MCYmcCtiLmxlbmd0aD4xJiZnYS51bmlxdWVTb3J0KGkpfXJldHVybiBrJiYodz12LGo9dCkscn07cmV0dXJuIGM/aWEoZik6Zn1yZXR1cm4gaD1nYS5jb21waWxlPWZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPVtdLGY9QVthK1wiIFwiXTtpZighZil7Ynx8KGI9ZyhhKSksYz1iLmxlbmd0aDt3aGlsZShjLS0pZj14YShiW2NdKSxmW3VdP2QucHVzaChmKTplLnB1c2goZik7Zj1BKGEseWEoZSxkKSksZi5zZWxlY3Rvcj1hfXJldHVybiBmfSxpPWdhLnNlbGVjdD1mdW5jdGlvbihhLGIsZSxmKXt2YXIgaSxqLGssbCxtLG49XCJmdW5jdGlvblwiPT10eXBlb2YgYSYmYSxvPSFmJiZnKGE9bi5zZWxlY3Rvcnx8YSk7aWYoZT1lfHxbXSwxPT09by5sZW5ndGgpe2lmKGo9b1swXT1vWzBdLnNsaWNlKDApLGoubGVuZ3RoPjImJlwiSURcIj09PShrPWpbMF0pLnR5cGUmJmMuZ2V0QnlJZCYmOT09PWIubm9kZVR5cGUmJnAmJmQucmVsYXRpdmVbalsxXS50eXBlXSl7aWYoYj0oZC5maW5kLklEKGsubWF0Y2hlc1swXS5yZXBsYWNlKGNhLGRhKSxiKXx8W10pWzBdLCFiKXJldHVybiBlO24mJihiPWIucGFyZW50Tm9kZSksYT1hLnNsaWNlKGouc2hpZnQoKS52YWx1ZS5sZW5ndGgpfWk9WC5uZWVkc0NvbnRleHQudGVzdChhKT8wOmoubGVuZ3RoO3doaWxlKGktLSl7aWYoaz1qW2ldLGQucmVsYXRpdmVbbD1rLnR5cGVdKWJyZWFrO2lmKChtPWQuZmluZFtsXSkmJihmPW0oay5tYXRjaGVzWzBdLnJlcGxhY2UoY2EsZGEpLGFhLnRlc3QoalswXS50eXBlKSYmcGEoYi5wYXJlbnROb2RlKXx8YikpKXtpZihqLnNwbGljZShpLDEpLGE9Zi5sZW5ndGgmJnJhKGopLCFhKXJldHVybiBILmFwcGx5KGUsZiksZTticmVha319fXJldHVybihufHxoKGEsbykpKGYsYiwhcCxlLGFhLnRlc3QoYSkmJnBhKGIucGFyZW50Tm9kZSl8fGIpLGV9LGMuc29ydFN0YWJsZT11LnNwbGl0KFwiXCIpLnNvcnQoQikuam9pbihcIlwiKT09PXUsYy5kZXRlY3REdXBsaWNhdGVzPSEhbCxtKCksYy5zb3J0RGV0YWNoZWQ9amEoZnVuY3Rpb24oYSl7cmV0dXJuIDEmYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpfSksamEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuaW5uZXJIVE1MPVwiPGEgaHJlZj0nIyc+PC9hPlwiLFwiI1wiPT09YS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIil9KXx8a2EoXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsZnVuY3Rpb24oYSxiLGMpe3JldHVybiBjP3ZvaWQgMDphLmdldEF0dHJpYnV0ZShiLFwidHlwZVwiPT09Yi50b0xvd2VyQ2FzZSgpPzE6Mil9KSxjLmF0dHJpYnV0ZXMmJmphKGZ1bmN0aW9uKGEpe3JldHVybiBhLmlubmVySFRNTD1cIjxpbnB1dC8+XCIsYS5maXJzdENoaWxkLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIiksXCJcIj09PWEuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKX0pfHxrYShcInZhbHVlXCIsZnVuY3Rpb24oYSxiLGMpe3JldHVybiBjfHxcImlucHV0XCIhPT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/dm9pZCAwOmEuZGVmYXVsdFZhbHVlfSksamEoZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWEuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIil9KXx8a2EoSyxmdW5jdGlvbihhLGIsYyl7dmFyIGQ7cmV0dXJuIGM/dm9pZCAwOmFbYl09PT0hMD9iLnRvTG93ZXJDYXNlKCk6KGQ9YS5nZXRBdHRyaWJ1dGVOb2RlKGIpKSYmZC5zcGVjaWZpZWQ/ZC52YWx1ZTpudWxsfSksZ2F9KGEpO20uZmluZD1zLG0uZXhwcj1zLnNlbGVjdG9ycyxtLmV4cHJbXCI6XCJdPW0uZXhwci5wc2V1ZG9zLG0udW5pcXVlPXMudW5pcXVlU29ydCxtLnRleHQ9cy5nZXRUZXh0LG0uaXNYTUxEb2M9cy5pc1hNTCxtLmNvbnRhaW5zPXMuY29udGFpbnM7dmFyIHQ9bS5leHByLm1hdGNoLm5lZWRzQ29udGV4dCx1PS9ePChcXHcrKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLyx2PS9eLlteOiNcXFtcXC4sXSokLztmdW5jdGlvbiB3KGEsYixjKXtpZihtLmlzRnVuY3Rpb24oYikpcmV0dXJuIG0uZ3JlcChhLGZ1bmN0aW9uKGEsZCl7cmV0dXJuISFiLmNhbGwoYSxkLGEpIT09Y30pO2lmKGIubm9kZVR5cGUpcmV0dXJuIG0uZ3JlcChhLGZ1bmN0aW9uKGEpe3JldHVybiBhPT09YiE9PWN9KTtpZihcInN0cmluZ1wiPT10eXBlb2YgYil7aWYodi50ZXN0KGIpKXJldHVybiBtLmZpbHRlcihiLGEsYyk7Yj1tLmZpbHRlcihiLGEpfXJldHVybiBtLmdyZXAoYSxmdW5jdGlvbihhKXtyZXR1cm4gbS5pbkFycmF5KGEsYik+PTAhPT1jfSl9bS5maWx0ZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWJbMF07cmV0dXJuIGMmJihhPVwiOm5vdChcIithK1wiKVwiKSwxPT09Yi5sZW5ndGgmJjE9PT1kLm5vZGVUeXBlP20uZmluZC5tYXRjaGVzU2VsZWN0b3IoZCxhKT9bZF06W106bS5maW5kLm1hdGNoZXMoYSxtLmdyZXAoYixmdW5jdGlvbihhKXtyZXR1cm4gMT09PWEubm9kZVR5cGV9KSl9LG0uZm4uZXh0ZW5kKHtmaW5kOmZ1bmN0aW9uKGEpe3ZhciBiLGM9W10sZD10aGlzLGU9ZC5sZW5ndGg7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGEpcmV0dXJuIHRoaXMucHVzaFN0YWNrKG0oYSkuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKGI9MDtlPmI7YisrKWlmKG0uY29udGFpbnMoZFtiXSx0aGlzKSlyZXR1cm4hMH0pKTtmb3IoYj0wO2U+YjtiKyspbS5maW5kKGEsZFtiXSxjKTtyZXR1cm4gYz10aGlzLnB1c2hTdGFjayhlPjE/bS51bmlxdWUoYyk6YyksYy5zZWxlY3Rvcj10aGlzLnNlbGVjdG9yP3RoaXMuc2VsZWN0b3IrXCIgXCIrYTphLGN9LGZpbHRlcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2sodyh0aGlzLGF8fFtdLCExKSl9LG5vdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2sodyh0aGlzLGF8fFtdLCEwKSl9LGlzOmZ1bmN0aW9uKGEpe3JldHVybiEhdyh0aGlzLFwic3RyaW5nXCI9PXR5cGVvZiBhJiZ0LnRlc3QoYSk/bShhKTphfHxbXSwhMSkubGVuZ3RofX0pO3ZhciB4LHk9YS5kb2N1bWVudCx6PS9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLEE9bS5mbi5pbml0PWZ1bmN0aW9uKGEsYil7dmFyIGMsZDtpZighYSlyZXR1cm4gdGhpcztpZihcInN0cmluZ1wiPT10eXBlb2YgYSl7aWYoYz1cIjxcIj09PWEuY2hhckF0KDApJiZcIj5cIj09PWEuY2hhckF0KGEubGVuZ3RoLTEpJiZhLmxlbmd0aD49Mz9bbnVsbCxhLG51bGxdOnouZXhlYyhhKSwhY3x8IWNbMV0mJmIpcmV0dXJuIWJ8fGIuanF1ZXJ5PyhifHx4KS5maW5kKGEpOnRoaXMuY29uc3RydWN0b3IoYikuZmluZChhKTtpZihjWzFdKXtpZihiPWIgaW5zdGFuY2VvZiBtP2JbMF06YixtLm1lcmdlKHRoaXMsbS5wYXJzZUhUTUwoY1sxXSxiJiZiLm5vZGVUeXBlP2Iub3duZXJEb2N1bWVudHx8Yjp5LCEwKSksdS50ZXN0KGNbMV0pJiZtLmlzUGxhaW5PYmplY3QoYikpZm9yKGMgaW4gYiltLmlzRnVuY3Rpb24odGhpc1tjXSk/dGhpc1tjXShiW2NdKTp0aGlzLmF0dHIoYyxiW2NdKTtyZXR1cm4gdGhpc31pZihkPXkuZ2V0RWxlbWVudEJ5SWQoY1syXSksZCYmZC5wYXJlbnROb2RlKXtpZihkLmlkIT09Y1syXSlyZXR1cm4geC5maW5kKGEpO3RoaXMubGVuZ3RoPTEsdGhpc1swXT1kfXJldHVybiB0aGlzLmNvbnRleHQ9eSx0aGlzLnNlbGVjdG9yPWEsdGhpc31yZXR1cm4gYS5ub2RlVHlwZT8odGhpcy5jb250ZXh0PXRoaXNbMF09YSx0aGlzLmxlbmd0aD0xLHRoaXMpOm0uaXNGdW5jdGlvbihhKT9cInVuZGVmaW5lZFwiIT10eXBlb2YgeC5yZWFkeT94LnJlYWR5KGEpOmEobSk6KHZvaWQgMCE9PWEuc2VsZWN0b3ImJih0aGlzLnNlbGVjdG9yPWEuc2VsZWN0b3IsdGhpcy5jb250ZXh0PWEuY29udGV4dCksbS5tYWtlQXJyYXkoYSx0aGlzKSl9O0EucHJvdG90eXBlPW0uZm4seD1tKHkpO3ZhciBCPS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLEM9e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07bS5leHRlbmQoe2RpcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9W10sZT1hW2JdO3doaWxlKGUmJjkhPT1lLm5vZGVUeXBlJiYodm9pZCAwPT09Y3x8MSE9PWUubm9kZVR5cGV8fCFtKGUpLmlzKGMpKSkxPT09ZS5ub2RlVHlwZSYmZC5wdXNoKGUpLGU9ZVtiXTtyZXR1cm4gZH0sc2libGluZzpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1bXTthO2E9YS5uZXh0U2libGluZykxPT09YS5ub2RlVHlwZSYmYSE9PWImJmMucHVzaChhKTtyZXR1cm4gY319KSxtLmZuLmV4dGVuZCh7aGFzOmZ1bmN0aW9uKGEpe3ZhciBiLGM9bShhLHRoaXMpLGQ9Yy5sZW5ndGg7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKGI9MDtkPmI7YisrKWlmKG0uY29udGFpbnModGhpcyxjW2JdKSlyZXR1cm4hMH0pfSxjbG9zZXN0OmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjLGQ9MCxlPXRoaXMubGVuZ3RoLGY9W10sZz10LnRlc3QoYSl8fFwic3RyaW5nXCIhPXR5cGVvZiBhP20oYSxifHx0aGlzLmNvbnRleHQpOjA7ZT5kO2QrKylmb3IoYz10aGlzW2RdO2MmJmMhPT1iO2M9Yy5wYXJlbnROb2RlKWlmKGMubm9kZVR5cGU8MTEmJihnP2cuaW5kZXgoYyk+LTE6MT09PWMubm9kZVR5cGUmJm0uZmluZC5tYXRjaGVzU2VsZWN0b3IoYyxhKSkpe2YucHVzaChjKTticmVha31yZXR1cm4gdGhpcy5wdXNoU3RhY2soZi5sZW5ndGg+MT9tLnVuaXF1ZShmKTpmKX0saW5kZXg6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/XCJzdHJpbmdcIj09dHlwZW9mIGE/bS5pbkFycmF5KHRoaXNbMF0sbShhKSk6bS5pbkFycmF5KGEuanF1ZXJ5P2FbMF06YSx0aGlzKTp0aGlzWzBdJiZ0aGlzWzBdLnBhcmVudE5vZGU/dGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGg6LTF9LGFkZDpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnB1c2hTdGFjayhtLnVuaXF1ZShtLm1lcmdlKHRoaXMuZ2V0KCksbShhLGIpKSkpfSxhZGRCYWNrOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFkZChudWxsPT1hP3RoaXMucHJldk9iamVjdDp0aGlzLnByZXZPYmplY3QuZmlsdGVyKGEpKX19KTtmdW5jdGlvbiBEKGEsYil7ZG8gYT1hW2JdO3doaWxlKGEmJjEhPT1hLm5vZGVUeXBlKTtyZXR1cm4gYX1tLmVhY2goe3BhcmVudDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7cmV0dXJuIGImJjExIT09Yi5ub2RlVHlwZT9iOm51bGx9LHBhcmVudHM6ZnVuY3Rpb24oYSl7cmV0dXJuIG0uZGlyKGEsXCJwYXJlbnROb2RlXCIpfSxwYXJlbnRzVW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBtLmRpcihhLFwicGFyZW50Tm9kZVwiLGMpfSxuZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBEKGEsXCJuZXh0U2libGluZ1wiKX0scHJldjpmdW5jdGlvbihhKXtyZXR1cm4gRChhLFwicHJldmlvdXNTaWJsaW5nXCIpfSxuZXh0QWxsOmZ1bmN0aW9uKGEpe3JldHVybiBtLmRpcihhLFwibmV4dFNpYmxpbmdcIil9LHByZXZBbGw6ZnVuY3Rpb24oYSl7cmV0dXJuIG0uZGlyKGEsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRVbnRpbDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG0uZGlyKGEsXCJuZXh0U2libGluZ1wiLGMpfSxwcmV2VW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBtLmRpcihhLFwicHJldmlvdXNTaWJsaW5nXCIsYyl9LHNpYmxpbmdzOmZ1bmN0aW9uKGEpe3JldHVybiBtLnNpYmxpbmcoKGEucGFyZW50Tm9kZXx8e30pLmZpcnN0Q2hpbGQsYSl9LGNoaWxkcmVuOmZ1bmN0aW9uKGEpe3JldHVybiBtLnNpYmxpbmcoYS5maXJzdENoaWxkKX0sY29udGVudHM6ZnVuY3Rpb24oYSl7cmV0dXJuIG0ubm9kZU5hbWUoYSxcImlmcmFtZVwiKT9hLmNvbnRlbnREb2N1bWVudHx8YS5jb250ZW50V2luZG93LmRvY3VtZW50Om0ubWVyZ2UoW10sYS5jaGlsZE5vZGVzKX19LGZ1bmN0aW9uKGEsYil7bS5mblthXT1mdW5jdGlvbihjLGQpe3ZhciBlPW0ubWFwKHRoaXMsYixjKTtyZXR1cm5cIlVudGlsXCIhPT1hLnNsaWNlKC01KSYmKGQ9YyksZCYmXCJzdHJpbmdcIj09dHlwZW9mIGQmJihlPW0uZmlsdGVyKGQsZSkpLHRoaXMubGVuZ3RoPjEmJihDW2FdfHwoZT1tLnVuaXF1ZShlKSksQi50ZXN0KGEpJiYoZT1lLnJldmVyc2UoKSkpLHRoaXMucHVzaFN0YWNrKGUpfX0pO3ZhciBFPS9cXFMrL2csRj17fTtmdW5jdGlvbiBHKGEpe3ZhciBiPUZbYV09e307cmV0dXJuIG0uZWFjaChhLm1hdGNoKEUpfHxbXSxmdW5jdGlvbihhLGMpe2JbY109ITB9KSxifW0uQ2FsbGJhY2tzPWZ1bmN0aW9uKGEpe2E9XCJzdHJpbmdcIj09dHlwZW9mIGE/RlthXXx8RyhhKTptLmV4dGVuZCh7fSxhKTt2YXIgYixjLGQsZSxmLGcsaD1bXSxpPSFhLm9uY2UmJltdLGo9ZnVuY3Rpb24obCl7Zm9yKGM9YS5tZW1vcnkmJmwsZD0hMCxmPWd8fDAsZz0wLGU9aC5sZW5ndGgsYj0hMDtoJiZlPmY7ZisrKWlmKGhbZl0uYXBwbHkobFswXSxsWzFdKT09PSExJiZhLnN0b3BPbkZhbHNlKXtjPSExO2JyZWFrfWI9ITEsaCYmKGk/aS5sZW5ndGgmJmooaS5zaGlmdCgpKTpjP2g9W106ay5kaXNhYmxlKCkpfSxrPXthZGQ6ZnVuY3Rpb24oKXtpZihoKXt2YXIgZD1oLmxlbmd0aDshZnVuY3Rpb24gZihiKXttLmVhY2goYixmdW5jdGlvbihiLGMpe3ZhciBkPW0udHlwZShjKTtcImZ1bmN0aW9uXCI9PT1kP2EudW5pcXVlJiZrLmhhcyhjKXx8aC5wdXNoKGMpOmMmJmMubGVuZ3RoJiZcInN0cmluZ1wiIT09ZCYmZihjKX0pfShhcmd1bWVudHMpLGI/ZT1oLmxlbmd0aDpjJiYoZz1kLGooYykpfXJldHVybiB0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gaCYmbS5lYWNoKGFyZ3VtZW50cyxmdW5jdGlvbihhLGMpe3ZhciBkO3doaWxlKChkPW0uaW5BcnJheShjLGgsZCkpPi0xKWguc3BsaWNlKGQsMSksYiYmKGU+PWQmJmUtLSxmPj1kJiZmLS0pfSksdGhpc30saGFzOmZ1bmN0aW9uKGEpe3JldHVybiBhP20uaW5BcnJheShhLGgpPi0xOiEoIWh8fCFoLmxlbmd0aCl9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIGg9W10sZT0wLHRoaXN9LGRpc2FibGU6ZnVuY3Rpb24oKXtyZXR1cm4gaD1pPWM9dm9pZCAwLHRoaXN9LGRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIWh9LGxvY2s6ZnVuY3Rpb24oKXtyZXR1cm4gaT12b2lkIDAsY3x8ay5kaXNhYmxlKCksdGhpc30sbG9ja2VkOmZ1bmN0aW9uKCl7cmV0dXJuIWl9LGZpcmVXaXRoOmZ1bmN0aW9uKGEsYyl7cmV0dXJuIWh8fGQmJiFpfHwoYz1jfHxbXSxjPVthLGMuc2xpY2U/Yy5zbGljZSgpOmNdLGI/aS5wdXNoKGMpOmooYykpLHRoaXN9LGZpcmU6ZnVuY3Rpb24oKXtyZXR1cm4gay5maXJlV2l0aCh0aGlzLGFyZ3VtZW50cyksdGhpc30sZmlyZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWR9fTtyZXR1cm4ga30sbS5leHRlbmQoe0RlZmVycmVkOmZ1bmN0aW9uKGEpe3ZhciBiPVtbXCJyZXNvbHZlXCIsXCJkb25lXCIsbS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcInJlc29sdmVkXCJdLFtcInJlamVjdFwiLFwiZmFpbFwiLG0uQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksXCJyZWplY3RlZFwiXSxbXCJub3RpZnlcIixcInByb2dyZXNzXCIsbS5DYWxsYmFja3MoXCJtZW1vcnlcIildXSxjPVwicGVuZGluZ1wiLGQ9e3N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGN9LGFsd2F5czpmdW5jdGlvbigpe3JldHVybiBlLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sdGhlbjpmdW5jdGlvbigpe3ZhciBhPWFyZ3VtZW50cztyZXR1cm4gbS5EZWZlcnJlZChmdW5jdGlvbihjKXttLmVhY2goYixmdW5jdGlvbihiLGYpe3ZhciBnPW0uaXNGdW5jdGlvbihhW2JdKSYmYVtiXTtlW2ZbMV1dKGZ1bmN0aW9uKCl7dmFyIGE9ZyYmZy5hcHBseSh0aGlzLGFyZ3VtZW50cyk7YSYmbS5pc0Z1bmN0aW9uKGEucHJvbWlzZSk/YS5wcm9taXNlKCkuZG9uZShjLnJlc29sdmUpLmZhaWwoYy5yZWplY3QpLnByb2dyZXNzKGMubm90aWZ5KTpjW2ZbMF0rXCJXaXRoXCJdKHRoaXM9PT1kP2MucHJvbWlzZSgpOnRoaXMsZz9bYV06YXJndW1lbnRzKX0pfSksYT1udWxsfSkucHJvbWlzZSgpfSxwcm9taXNlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsIT1hP20uZXh0ZW5kKGEsZCk6ZH19LGU9e307cmV0dXJuIGQucGlwZT1kLnRoZW4sbS5lYWNoKGIsZnVuY3Rpb24oYSxmKXt2YXIgZz1mWzJdLGg9ZlszXTtkW2ZbMV1dPWcuYWRkLGgmJmcuYWRkKGZ1bmN0aW9uKCl7Yz1ofSxiWzFeYV1bMl0uZGlzYWJsZSxiWzJdWzJdLmxvY2spLGVbZlswXV09ZnVuY3Rpb24oKXtyZXR1cm4gZVtmWzBdK1wiV2l0aFwiXSh0aGlzPT09ZT9kOnRoaXMsYXJndW1lbnRzKSx0aGlzfSxlW2ZbMF0rXCJXaXRoXCJdPWcuZmlyZVdpdGh9KSxkLnByb21pc2UoZSksYSYmYS5jYWxsKGUsZSksZX0sd2hlbjpmdW5jdGlvbihhKXt2YXIgYj0wLGM9ZC5jYWxsKGFyZ3VtZW50cyksZT1jLmxlbmd0aCxmPTEhPT1lfHxhJiZtLmlzRnVuY3Rpb24oYS5wcm9taXNlKT9lOjAsZz0xPT09Zj9hOm0uRGVmZXJyZWQoKSxoPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gZnVuY3Rpb24oZSl7YlthXT10aGlzLGNbYV09YXJndW1lbnRzLmxlbmd0aD4xP2QuY2FsbChhcmd1bWVudHMpOmUsYz09PWk/Zy5ub3RpZnlXaXRoKGIsYyk6LS1mfHxnLnJlc29sdmVXaXRoKGIsYyl9fSxpLGosaztpZihlPjEpZm9yKGk9bmV3IEFycmF5KGUpLGo9bmV3IEFycmF5KGUpLGs9bmV3IEFycmF5KGUpO2U+YjtiKyspY1tiXSYmbS5pc0Z1bmN0aW9uKGNbYl0ucHJvbWlzZSk/Y1tiXS5wcm9taXNlKCkuZG9uZShoKGIsayxjKSkuZmFpbChnLnJlamVjdCkucHJvZ3Jlc3MoaChiLGosaSkpOi0tZjtyZXR1cm4gZnx8Zy5yZXNvbHZlV2l0aChrLGMpLGcucHJvbWlzZSgpfX0pO3ZhciBIO20uZm4ucmVhZHk9ZnVuY3Rpb24oYSl7cmV0dXJuIG0ucmVhZHkucHJvbWlzZSgpLmRvbmUoYSksdGhpc30sbS5leHRlbmQoe2lzUmVhZHk6ITEscmVhZHlXYWl0OjEsaG9sZFJlYWR5OmZ1bmN0aW9uKGEpe2E/bS5yZWFkeVdhaXQrKzptLnJlYWR5KCEwKX0scmVhZHk6ZnVuY3Rpb24oYSl7aWYoYT09PSEwPyEtLW0ucmVhZHlXYWl0OiFtLmlzUmVhZHkpe2lmKCF5LmJvZHkpcmV0dXJuIHNldFRpbWVvdXQobS5yZWFkeSk7bS5pc1JlYWR5PSEwLGEhPT0hMCYmLS1tLnJlYWR5V2FpdD4wfHwoSC5yZXNvbHZlV2l0aCh5LFttXSksbS5mbi50cmlnZ2VySGFuZGxlciYmKG0oeSkudHJpZ2dlckhhbmRsZXIoXCJyZWFkeVwiKSxtKHkpLm9mZihcInJlYWR5XCIpKSl9fX0pO2Z1bmN0aW9uIEkoKXt5LmFkZEV2ZW50TGlzdGVuZXI/KHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixKLCExKSxhLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsSiwhMSkpOih5LmRldGFjaEV2ZW50KFwib25yZWFkeXN0YXRlY2hhbmdlXCIsSiksYS5kZXRhY2hFdmVudChcIm9ubG9hZFwiLEopKX1mdW5jdGlvbiBKKCl7KHkuYWRkRXZlbnRMaXN0ZW5lcnx8XCJsb2FkXCI9PT1ldmVudC50eXBlfHxcImNvbXBsZXRlXCI9PT15LnJlYWR5U3RhdGUpJiYoSSgpLG0ucmVhZHkoKSl9bS5yZWFkeS5wcm9taXNlPWZ1bmN0aW9uKGIpe2lmKCFIKWlmKEg9bS5EZWZlcnJlZCgpLFwiY29tcGxldGVcIj09PXkucmVhZHlTdGF0ZSlzZXRUaW1lb3V0KG0ucmVhZHkpO2Vsc2UgaWYoeS5hZGRFdmVudExpc3RlbmVyKXkuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixKLCExKSxhLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsSiwhMSk7ZWxzZXt5LmF0dGFjaEV2ZW50KFwib25yZWFkeXN0YXRlY2hhbmdlXCIsSiksYS5hdHRhY2hFdmVudChcIm9ubG9hZFwiLEopO3ZhciBjPSExO3RyeXtjPW51bGw9PWEuZnJhbWVFbGVtZW50JiZ5LmRvY3VtZW50RWxlbWVudH1jYXRjaChkKXt9YyYmYy5kb1Njcm9sbCYmIWZ1bmN0aW9uIGUoKXtpZighbS5pc1JlYWR5KXt0cnl7Yy5kb1Njcm9sbChcImxlZnRcIil9Y2F0Y2goYSl7cmV0dXJuIHNldFRpbWVvdXQoZSw1MCl9SSgpLG0ucmVhZHkoKX19KCl9cmV0dXJuIEgucHJvbWlzZShiKX07dmFyIEs9XCJ1bmRlZmluZWRcIixMO2ZvcihMIGluIG0oaykpYnJlYWs7ay5vd25MYXN0PVwiMFwiIT09TCxrLmlubGluZUJsb2NrTmVlZHNMYXlvdXQ9ITEsbShmdW5jdGlvbigpe3ZhciBhLGIsYyxkO2M9eS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0sYyYmYy5zdHlsZSYmKGI9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGQ9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGQuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOmFic29sdXRlO2JvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4XCIsYy5hcHBlbmRDaGlsZChkKS5hcHBlbmRDaGlsZChiKSx0eXBlb2YgYi5zdHlsZS56b29tIT09SyYmKGIuc3R5bGUuY3NzVGV4dD1cImRpc3BsYXk6aW5saW5lO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MXB4O3dpZHRoOjFweDt6b29tOjFcIixrLmlubGluZUJsb2NrTmVlZHNMYXlvdXQ9YT0zPT09Yi5vZmZzZXRXaWR0aCxhJiYoYy5zdHlsZS56b29tPTEpKSxjLnJlbW92ZUNoaWxkKGQpKX0pLGZ1bmN0aW9uKCl7dmFyIGE9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2lmKG51bGw9PWsuZGVsZXRlRXhwYW5kbyl7ay5kZWxldGVFeHBhbmRvPSEwO3RyeXtkZWxldGUgYS50ZXN0fWNhdGNoKGIpe2suZGVsZXRlRXhwYW5kbz0hMX19YT1udWxsfSgpLG0uYWNjZXB0RGF0YT1mdW5jdGlvbihhKXt2YXIgYj1tLm5vRGF0YVsoYS5ub2RlTmFtZStcIiBcIikudG9Mb3dlckNhc2UoKV0sYz0rYS5ub2RlVHlwZXx8MTtyZXR1cm4gMSE9PWMmJjkhPT1jPyExOiFifHxiIT09ITAmJmEuZ2V0QXR0cmlidXRlKFwiY2xhc3NpZFwiKT09PWJ9O3ZhciBNPS9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxOPS8oW0EtWl0pL2c7ZnVuY3Rpb24gTyhhLGIsYyl7aWYodm9pZCAwPT09YyYmMT09PWEubm9kZVR5cGUpe3ZhciBkPVwiZGF0YS1cIitiLnJlcGxhY2UoTixcIi0kMVwiKS50b0xvd2VyQ2FzZSgpO2lmKGM9YS5nZXRBdHRyaWJ1dGUoZCksXCJzdHJpbmdcIj09dHlwZW9mIGMpe3RyeXtjPVwidHJ1ZVwiPT09Yz8hMDpcImZhbHNlXCI9PT1jPyExOlwibnVsbFwiPT09Yz9udWxsOitjK1wiXCI9PT1jPytjOk0udGVzdChjKT9tLnBhcnNlSlNPTihjKTpjfWNhdGNoKGUpe31tLmRhdGEoYSxiLGMpfWVsc2UgYz12b2lkIDB9cmV0dXJuIGN9ZnVuY3Rpb24gUChhKXt2YXIgYjtmb3IoYiBpbiBhKWlmKChcImRhdGFcIiE9PWJ8fCFtLmlzRW1wdHlPYmplY3QoYVtiXSkpJiZcInRvSlNPTlwiIT09YilyZXR1cm4hMTtcblxucmV0dXJuITB9ZnVuY3Rpb24gUShhLGIsZCxlKXtpZihtLmFjY2VwdERhdGEoYSkpe3ZhciBmLGcsaD1tLmV4cGFuZG8saT1hLm5vZGVUeXBlLGo9aT9tLmNhY2hlOmEsaz1pP2FbaF06YVtoXSYmaDtpZihrJiZqW2tdJiYoZXx8altrXS5kYXRhKXx8dm9pZCAwIT09ZHx8XCJzdHJpbmdcIiE9dHlwZW9mIGIpcmV0dXJuIGt8fChrPWk/YVtoXT1jLnBvcCgpfHxtLmd1aWQrKzpoKSxqW2tdfHwoaltrXT1pP3t9Ont0b0pTT046bS5ub29wfSksKFwib2JqZWN0XCI9PXR5cGVvZiBifHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBiKSYmKGU/altrXT1tLmV4dGVuZChqW2tdLGIpOmpba10uZGF0YT1tLmV4dGVuZChqW2tdLmRhdGEsYikpLGc9altrXSxlfHwoZy5kYXRhfHwoZy5kYXRhPXt9KSxnPWcuZGF0YSksdm9pZCAwIT09ZCYmKGdbbS5jYW1lbENhc2UoYildPWQpLFwic3RyaW5nXCI9PXR5cGVvZiBiPyhmPWdbYl0sbnVsbD09ZiYmKGY9Z1ttLmNhbWVsQ2FzZShiKV0pKTpmPWcsZn19ZnVuY3Rpb24gUihhLGIsYyl7aWYobS5hY2NlcHREYXRhKGEpKXt2YXIgZCxlLGY9YS5ub2RlVHlwZSxnPWY/bS5jYWNoZTphLGg9Zj9hW20uZXhwYW5kb106bS5leHBhbmRvO2lmKGdbaF0pe2lmKGImJihkPWM/Z1toXTpnW2hdLmRhdGEpKXttLmlzQXJyYXkoYik/Yj1iLmNvbmNhdChtLm1hcChiLG0uY2FtZWxDYXNlKSk6YiBpbiBkP2I9W2JdOihiPW0uY2FtZWxDYXNlKGIpLGI9YiBpbiBkP1tiXTpiLnNwbGl0KFwiIFwiKSksZT1iLmxlbmd0aDt3aGlsZShlLS0pZGVsZXRlIGRbYltlXV07aWYoYz8hUChkKTohbS5pc0VtcHR5T2JqZWN0KGQpKXJldHVybn0oY3x8KGRlbGV0ZSBnW2hdLmRhdGEsUChnW2hdKSkpJiYoZj9tLmNsZWFuRGF0YShbYV0sITApOmsuZGVsZXRlRXhwYW5kb3x8ZyE9Zy53aW5kb3c/ZGVsZXRlIGdbaF06Z1toXT1udWxsKX19fW0uZXh0ZW5kKHtjYWNoZTp7fSxub0RhdGE6e1wiYXBwbGV0IFwiOiEwLFwiZW1iZWQgXCI6ITAsXCJvYmplY3QgXCI6XCJjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDBcIn0saGFzRGF0YTpmdW5jdGlvbihhKXtyZXR1cm4gYT1hLm5vZGVUeXBlP20uY2FjaGVbYVttLmV4cGFuZG9dXTphW20uZXhwYW5kb10sISFhJiYhUChhKX0sZGF0YTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFEoYSxiLGMpfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFIoYSxiKX0sX2RhdGE6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBRKGEsYixjLCEwKX0sX3JlbW92ZURhdGE6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUihhLGIsITApfX0pLG0uZm4uZXh0ZW5kKHtkYXRhOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGY9dGhpc1swXSxnPWYmJmYuYXR0cmlidXRlcztpZih2b2lkIDA9PT1hKXtpZih0aGlzLmxlbmd0aCYmKGU9bS5kYXRhKGYpLDE9PT1mLm5vZGVUeXBlJiYhbS5fZGF0YShmLFwicGFyc2VkQXR0cnNcIikpKXtjPWcubGVuZ3RoO3doaWxlKGMtLSlnW2NdJiYoZD1nW2NdLm5hbWUsMD09PWQuaW5kZXhPZihcImRhdGEtXCIpJiYoZD1tLmNhbWVsQ2FzZShkLnNsaWNlKDUpKSxPKGYsZCxlW2RdKSkpO20uX2RhdGEoZixcInBhcnNlZEF0dHJzXCIsITApfXJldHVybiBlfXJldHVyblwib2JqZWN0XCI9PXR5cGVvZiBhP3RoaXMuZWFjaChmdW5jdGlvbigpe20uZGF0YSh0aGlzLGEpfSk6YXJndW1lbnRzLmxlbmd0aD4xP3RoaXMuZWFjaChmdW5jdGlvbigpe20uZGF0YSh0aGlzLGEsYil9KTpmP08oZixhLG0uZGF0YShmLGEpKTp2b2lkIDB9LHJlbW92ZURhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe20ucmVtb3ZlRGF0YSh0aGlzLGEpfSl9fSksbS5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZDtyZXR1cm4gYT8oYj0oYnx8XCJmeFwiKStcInF1ZXVlXCIsZD1tLl9kYXRhKGEsYiksYyYmKCFkfHxtLmlzQXJyYXkoYyk/ZD1tLl9kYXRhKGEsYixtLm1ha2VBcnJheShjKSk6ZC5wdXNoKGMpKSxkfHxbXSk6dm9pZCAwfSxkZXF1ZXVlOmZ1bmN0aW9uKGEsYil7Yj1ifHxcImZ4XCI7dmFyIGM9bS5xdWV1ZShhLGIpLGQ9Yy5sZW5ndGgsZT1jLnNoaWZ0KCksZj1tLl9xdWV1ZUhvb2tzKGEsYiksZz1mdW5jdGlvbigpe20uZGVxdWV1ZShhLGIpfTtcImlucHJvZ3Jlc3NcIj09PWUmJihlPWMuc2hpZnQoKSxkLS0pLGUmJihcImZ4XCI9PT1iJiZjLnVuc2hpZnQoXCJpbnByb2dyZXNzXCIpLGRlbGV0ZSBmLnN0b3AsZS5jYWxsKGEsZyxmKSksIWQmJmYmJmYuZW1wdHkuZmlyZSgpfSxfcXVldWVIb29rczpmdW5jdGlvbihhLGIpe3ZhciBjPWIrXCJxdWV1ZUhvb2tzXCI7cmV0dXJuIG0uX2RhdGEoYSxjKXx8bS5fZGF0YShhLGMse2VtcHR5Om0uQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCl7bS5fcmVtb3ZlRGF0YShhLGIrXCJxdWV1ZVwiKSxtLl9yZW1vdmVEYXRhKGEsYyl9KX0pfX0pLG0uZm4uZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPTI7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGEmJihiPWEsYT1cImZ4XCIsYy0tKSxhcmd1bWVudHMubGVuZ3RoPGM/bS5xdWV1ZSh0aGlzWzBdLGEpOnZvaWQgMD09PWI/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1tLnF1ZXVlKHRoaXMsYSxiKTttLl9xdWV1ZUhvb2tzKHRoaXMsYSksXCJmeFwiPT09YSYmXCJpbnByb2dyZXNzXCIhPT1jWzBdJiZtLmRlcXVldWUodGhpcyxhKX0pfSxkZXF1ZXVlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXttLmRlcXVldWUodGhpcyxhKX0pfSxjbGVhclF1ZXVlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnF1ZXVlKGF8fFwiZnhcIixbXSl9LHByb21pc2U6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTEsZT1tLkRlZmVycmVkKCksZj10aGlzLGc9dGhpcy5sZW5ndGgsaD1mdW5jdGlvbigpey0tZHx8ZS5yZXNvbHZlV2l0aChmLFtmXSl9O1wic3RyaW5nXCIhPXR5cGVvZiBhJiYoYj1hLGE9dm9pZCAwKSxhPWF8fFwiZnhcIjt3aGlsZShnLS0pYz1tLl9kYXRhKGZbZ10sYStcInF1ZXVlSG9va3NcIiksYyYmYy5lbXB0eSYmKGQrKyxjLmVtcHR5LmFkZChoKSk7cmV0dXJuIGgoKSxlLnByb21pc2UoYil9fSk7dmFyIFM9L1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8uc291cmNlLFQ9W1wiVG9wXCIsXCJSaWdodFwiLFwiQm90dG9tXCIsXCJMZWZ0XCJdLFU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1ifHxhLFwibm9uZVwiPT09bS5jc3MoYSxcImRpc3BsYXlcIil8fCFtLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKX0sVj1tLmFjY2Vzcz1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXt2YXIgaD0wLGk9YS5sZW5ndGgsaj1udWxsPT1jO2lmKFwib2JqZWN0XCI9PT1tLnR5cGUoYykpe2U9ITA7Zm9yKGggaW4gYyltLmFjY2VzcyhhLGIsaCxjW2hdLCEwLGYsZyl9ZWxzZSBpZih2b2lkIDAhPT1kJiYoZT0hMCxtLmlzRnVuY3Rpb24oZCl8fChnPSEwKSxqJiYoZz8oYi5jYWxsKGEsZCksYj1udWxsKTooaj1iLGI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBqLmNhbGwobShhKSxjKX0pKSxiKSlmb3IoO2k+aDtoKyspYihhW2hdLGMsZz9kOmQuY2FsbChhW2hdLGgsYihhW2hdLGMpKSk7cmV0dXJuIGU/YTpqP2IuY2FsbChhKTppP2IoYVswXSxjKTpmfSxXPS9eKD86Y2hlY2tib3h8cmFkaW8pJC9pOyFmdW5jdGlvbigpe3ZhciBhPXkuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLGI9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGM9eS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7aWYoYi5pbm5lckhUTUw9XCIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz5cIixrLmxlYWRpbmdXaGl0ZXNwYWNlPTM9PT1iLmZpcnN0Q2hpbGQubm9kZVR5cGUsay50Ym9keT0hYi5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpLmxlbmd0aCxrLmh0bWxTZXJpYWxpemU9ISFiLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKS5sZW5ndGgsay5odG1sNUNsb25lPVwiPDpuYXY+PC86bmF2PlwiIT09eS5jcmVhdGVFbGVtZW50KFwibmF2XCIpLmNsb25lTm9kZSghMCkub3V0ZXJIVE1MLGEudHlwZT1cImNoZWNrYm94XCIsYS5jaGVja2VkPSEwLGMuYXBwZW5kQ2hpbGQoYSksay5hcHBlbmRDaGVja2VkPWEuY2hlY2tlZCxiLmlubmVySFRNTD1cIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIixrLm5vQ2xvbmVDaGVja2VkPSEhYi5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWUsYy5hcHBlbmRDaGlsZChiKSxiLmlubmVySFRNTD1cIjxpbnB1dCB0eXBlPSdyYWRpbycgY2hlY2tlZD0nY2hlY2tlZCcgbmFtZT0ndCcvPlwiLGsuY2hlY2tDbG9uZT1iLmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCxrLm5vQ2xvbmVFdmVudD0hMCxiLmF0dGFjaEV2ZW50JiYoYi5hdHRhY2hFdmVudChcIm9uY2xpY2tcIixmdW5jdGlvbigpe2subm9DbG9uZUV2ZW50PSExfSksYi5jbG9uZU5vZGUoITApLmNsaWNrKCkpLG51bGw9PWsuZGVsZXRlRXhwYW5kbyl7ay5kZWxldGVFeHBhbmRvPSEwO3RyeXtkZWxldGUgYi50ZXN0fWNhdGNoKGQpe2suZGVsZXRlRXhwYW5kbz0hMX19fSgpLGZ1bmN0aW9uKCl7dmFyIGIsYyxkPXkuY3JlYXRlRWxlbWVudChcImRpdlwiKTtmb3IoYiBpbntzdWJtaXQ6ITAsY2hhbmdlOiEwLGZvY3VzaW46ITB9KWM9XCJvblwiK2IsKGtbYitcIkJ1YmJsZXNcIl09YyBpbiBhKXx8KGQuc2V0QXR0cmlidXRlKGMsXCJ0XCIpLGtbYitcIkJ1YmJsZXNcIl09ZC5hdHRyaWJ1dGVzW2NdLmV4cGFuZG89PT0hMSk7ZD1udWxsfSgpO3ZhciBYPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhKSQvaSxZPS9ea2V5LyxaPS9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudSl8Y2xpY2svLCQ9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLF89L14oW14uXSopKD86XFwuKC4rKXwpJC87ZnVuY3Rpb24gYWEoKXtyZXR1cm4hMH1mdW5jdGlvbiBiYSgpe3JldHVybiExfWZ1bmN0aW9uIGNhKCl7dHJ5e3JldHVybiB5LmFjdGl2ZUVsZW1lbnR9Y2F0Y2goYSl7fX1tLmV2ZW50PXtnbG9iYWw6e30sYWRkOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZyxoLGksaixrLGwsbixvLHAscSxyPW0uX2RhdGEoYSk7aWYocil7Yy5oYW5kbGVyJiYoaT1jLGM9aS5oYW5kbGVyLGU9aS5zZWxlY3RvciksYy5ndWlkfHwoYy5ndWlkPW0uZ3VpZCsrKSwoZz1yLmV2ZW50cyl8fChnPXIuZXZlbnRzPXt9KSwoaz1yLmhhbmRsZSl8fChrPXIuaGFuZGxlPWZ1bmN0aW9uKGEpe3JldHVybiB0eXBlb2YgbT09PUt8fGEmJm0uZXZlbnQudHJpZ2dlcmVkPT09YS50eXBlP3ZvaWQgMDptLmV2ZW50LmRpc3BhdGNoLmFwcGx5KGsuZWxlbSxhcmd1bWVudHMpfSxrLmVsZW09YSksYj0oYnx8XCJcIikubWF0Y2goRSl8fFtcIlwiXSxoPWIubGVuZ3RoO3doaWxlKGgtLSlmPV8uZXhlYyhiW2hdKXx8W10sbz1xPWZbMV0scD0oZlsyXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxvJiYoaj1tLmV2ZW50LnNwZWNpYWxbb118fHt9LG89KGU/ai5kZWxlZ2F0ZVR5cGU6ai5iaW5kVHlwZSl8fG8saj1tLmV2ZW50LnNwZWNpYWxbb118fHt9LGw9bS5leHRlbmQoe3R5cGU6byxvcmlnVHlwZTpxLGRhdGE6ZCxoYW5kbGVyOmMsZ3VpZDpjLmd1aWQsc2VsZWN0b3I6ZSxuZWVkc0NvbnRleHQ6ZSYmbS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KGUpLG5hbWVzcGFjZTpwLmpvaW4oXCIuXCIpfSxpKSwobj1nW29dKXx8KG49Z1tvXT1bXSxuLmRlbGVnYXRlQ291bnQ9MCxqLnNldHVwJiZqLnNldHVwLmNhbGwoYSxkLHAsaykhPT0hMXx8KGEuYWRkRXZlbnRMaXN0ZW5lcj9hLmFkZEV2ZW50TGlzdGVuZXIobyxrLCExKTphLmF0dGFjaEV2ZW50JiZhLmF0dGFjaEV2ZW50KFwib25cIitvLGspKSksai5hZGQmJihqLmFkZC5jYWxsKGEsbCksbC5oYW5kbGVyLmd1aWR8fChsLmhhbmRsZXIuZ3VpZD1jLmd1aWQpKSxlP24uc3BsaWNlKG4uZGVsZWdhdGVDb3VudCsrLDAsbCk6bi5wdXNoKGwpLG0uZXZlbnQuZ2xvYmFsW29dPSEwKTthPW51bGx9fSxyZW1vdmU6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZixnLGgsaSxqLGssbCxuLG8scCxxLHI9bS5oYXNEYXRhKGEpJiZtLl9kYXRhKGEpO2lmKHImJihrPXIuZXZlbnRzKSl7Yj0oYnx8XCJcIikubWF0Y2goRSl8fFtcIlwiXSxqPWIubGVuZ3RoO3doaWxlKGotLSlpZihoPV8uZXhlYyhiW2pdKXx8W10sbz1xPWhbMV0scD0oaFsyXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxvKXtsPW0uZXZlbnQuc3BlY2lhbFtvXXx8e30sbz0oZD9sLmRlbGVnYXRlVHlwZTpsLmJpbmRUeXBlKXx8byxuPWtbb118fFtdLGg9aFsyXSYmbmV3IFJlZ0V4cChcIihefFxcXFwuKVwiK3Auam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpLGk9Zj1uLmxlbmd0aDt3aGlsZShmLS0pZz1uW2ZdLCFlJiZxIT09Zy5vcmlnVHlwZXx8YyYmYy5ndWlkIT09Zy5ndWlkfHxoJiYhaC50ZXN0KGcubmFtZXNwYWNlKXx8ZCYmZCE9PWcuc2VsZWN0b3ImJihcIioqXCIhPT1kfHwhZy5zZWxlY3Rvcil8fChuLnNwbGljZShmLDEpLGcuc2VsZWN0b3ImJm4uZGVsZWdhdGVDb3VudC0tLGwucmVtb3ZlJiZsLnJlbW92ZS5jYWxsKGEsZykpO2kmJiFuLmxlbmd0aCYmKGwudGVhcmRvd24mJmwudGVhcmRvd24uY2FsbChhLHAsci5oYW5kbGUpIT09ITF8fG0ucmVtb3ZlRXZlbnQoYSxvLHIuaGFuZGxlKSxkZWxldGUga1tvXSl9ZWxzZSBmb3IobyBpbiBrKW0uZXZlbnQucmVtb3ZlKGEsbytiW2pdLGMsZCwhMCk7bS5pc0VtcHR5T2JqZWN0KGspJiYoZGVsZXRlIHIuaGFuZGxlLG0uX3JlbW92ZURhdGEoYSxcImV2ZW50c1wiKSl9fSx0cmlnZ2VyOmZ1bmN0aW9uKGIsYyxkLGUpe3ZhciBmLGcsaCxpLGssbCxuLG89W2R8fHldLHA9ai5jYWxsKGIsXCJ0eXBlXCIpP2IudHlwZTpiLHE9ai5jYWxsKGIsXCJuYW1lc3BhY2VcIik/Yi5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpOltdO2lmKGg9bD1kPWR8fHksMyE9PWQubm9kZVR5cGUmJjghPT1kLm5vZGVUeXBlJiYhJC50ZXN0KHArbS5ldmVudC50cmlnZ2VyZWQpJiYocC5pbmRleE9mKFwiLlwiKT49MCYmKHE9cC5zcGxpdChcIi5cIikscD1xLnNoaWZ0KCkscS5zb3J0KCkpLGc9cC5pbmRleE9mKFwiOlwiKTwwJiZcIm9uXCIrcCxiPWJbbS5leHBhbmRvXT9iOm5ldyBtLkV2ZW50KHAsXCJvYmplY3RcIj09dHlwZW9mIGImJmIpLGIuaXNUcmlnZ2VyPWU/MjozLGIubmFtZXNwYWNlPXEuam9pbihcIi5cIiksYi5uYW1lc3BhY2VfcmU9Yi5uYW1lc3BhY2U/bmV3IFJlZ0V4cChcIihefFxcXFwuKVwiK3Euam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpOm51bGwsYi5yZXN1bHQ9dm9pZCAwLGIudGFyZ2V0fHwoYi50YXJnZXQ9ZCksYz1udWxsPT1jP1tiXTptLm1ha2VBcnJheShjLFtiXSksaz1tLmV2ZW50LnNwZWNpYWxbcF18fHt9LGV8fCFrLnRyaWdnZXJ8fGsudHJpZ2dlci5hcHBseShkLGMpIT09ITEpKXtpZighZSYmIWsubm9CdWJibGUmJiFtLmlzV2luZG93KGQpKXtmb3IoaT1rLmRlbGVnYXRlVHlwZXx8cCwkLnRlc3QoaStwKXx8KGg9aC5wYXJlbnROb2RlKTtoO2g9aC5wYXJlbnROb2RlKW8ucHVzaChoKSxsPWg7bD09PShkLm93bmVyRG9jdW1lbnR8fHkpJiZvLnB1c2gobC5kZWZhdWx0Vmlld3x8bC5wYXJlbnRXaW5kb3d8fGEpfW49MDt3aGlsZSgoaD1vW24rK10pJiYhYi5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWIudHlwZT1uPjE/aTprLmJpbmRUeXBlfHxwLGY9KG0uX2RhdGEoaCxcImV2ZW50c1wiKXx8e30pW2IudHlwZV0mJm0uX2RhdGEoaCxcImhhbmRsZVwiKSxmJiZmLmFwcGx5KGgsYyksZj1nJiZoW2ddLGYmJmYuYXBwbHkmJm0uYWNjZXB0RGF0YShoKSYmKGIucmVzdWx0PWYuYXBwbHkoaCxjKSxiLnJlc3VsdD09PSExJiZiLnByZXZlbnREZWZhdWx0KCkpO2lmKGIudHlwZT1wLCFlJiYhYi5pc0RlZmF1bHRQcmV2ZW50ZWQoKSYmKCFrLl9kZWZhdWx0fHxrLl9kZWZhdWx0LmFwcGx5KG8ucG9wKCksYyk9PT0hMSkmJm0uYWNjZXB0RGF0YShkKSYmZyYmZFtwXSYmIW0uaXNXaW5kb3coZCkpe2w9ZFtnXSxsJiYoZFtnXT1udWxsKSxtLmV2ZW50LnRyaWdnZXJlZD1wO3RyeXtkW3BdKCl9Y2F0Y2gocil7fW0uZXZlbnQudHJpZ2dlcmVkPXZvaWQgMCxsJiYoZFtnXT1sKX1yZXR1cm4gYi5yZXN1bHR9fSxkaXNwYXRjaDpmdW5jdGlvbihhKXthPW0uZXZlbnQuZml4KGEpO3ZhciBiLGMsZSxmLGcsaD1bXSxpPWQuY2FsbChhcmd1bWVudHMpLGo9KG0uX2RhdGEodGhpcyxcImV2ZW50c1wiKXx8e30pW2EudHlwZV18fFtdLGs9bS5ldmVudC5zcGVjaWFsW2EudHlwZV18fHt9O2lmKGlbMF09YSxhLmRlbGVnYXRlVGFyZ2V0PXRoaXMsIWsucHJlRGlzcGF0Y2h8fGsucHJlRGlzcGF0Y2guY2FsbCh0aGlzLGEpIT09ITEpe2g9bS5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsYSxqKSxiPTA7d2hpbGUoKGY9aFtiKytdKSYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSl7YS5jdXJyZW50VGFyZ2V0PWYuZWxlbSxnPTA7d2hpbGUoKGU9Zi5oYW5kbGVyc1tnKytdKSYmIWEuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkoIWEubmFtZXNwYWNlX3JlfHxhLm5hbWVzcGFjZV9yZS50ZXN0KGUubmFtZXNwYWNlKSkmJihhLmhhbmRsZU9iaj1lLGEuZGF0YT1lLmRhdGEsYz0oKG0uZXZlbnQuc3BlY2lhbFtlLm9yaWdUeXBlXXx8e30pLmhhbmRsZXx8ZS5oYW5kbGVyKS5hcHBseShmLmVsZW0saSksdm9pZCAwIT09YyYmKGEucmVzdWx0PWMpPT09ITEmJihhLnByZXZlbnREZWZhdWx0KCksYS5zdG9wUHJvcGFnYXRpb24oKSkpfXJldHVybiBrLnBvc3REaXNwYXRjaCYmay5wb3N0RGlzcGF0Y2guY2FsbCh0aGlzLGEpLGEucmVzdWx0fX0saGFuZGxlcnM6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZixnPVtdLGg9Yi5kZWxlZ2F0ZUNvdW50LGk9YS50YXJnZXQ7aWYoaCYmaS5ub2RlVHlwZSYmKCFhLmJ1dHRvbnx8XCJjbGlja1wiIT09YS50eXBlKSlmb3IoO2khPXRoaXM7aT1pLnBhcmVudE5vZGV8fHRoaXMpaWYoMT09PWkubm9kZVR5cGUmJihpLmRpc2FibGVkIT09ITB8fFwiY2xpY2tcIiE9PWEudHlwZSkpe2ZvcihlPVtdLGY9MDtoPmY7ZisrKWQ9YltmXSxjPWQuc2VsZWN0b3IrXCIgXCIsdm9pZCAwPT09ZVtjXSYmKGVbY109ZC5uZWVkc0NvbnRleHQ/bShjLHRoaXMpLmluZGV4KGkpPj0wOm0uZmluZChjLHRoaXMsbnVsbCxbaV0pLmxlbmd0aCksZVtjXSYmZS5wdXNoKGQpO2UubGVuZ3RoJiZnLnB1c2goe2VsZW06aSxoYW5kbGVyczplfSl9cmV0dXJuIGg8Yi5sZW5ndGgmJmcucHVzaCh7ZWxlbTp0aGlzLGhhbmRsZXJzOmIuc2xpY2UoaCl9KSxnfSxmaXg6ZnVuY3Rpb24oYSl7aWYoYVttLmV4cGFuZG9dKXJldHVybiBhO3ZhciBiLGMsZCxlPWEudHlwZSxmPWEsZz10aGlzLmZpeEhvb2tzW2VdO2d8fCh0aGlzLmZpeEhvb2tzW2VdPWc9Wi50ZXN0KGUpP3RoaXMubW91c2VIb29rczpZLnRlc3QoZSk/dGhpcy5rZXlIb29rczp7fSksZD1nLnByb3BzP3RoaXMucHJvcHMuY29uY2F0KGcucHJvcHMpOnRoaXMucHJvcHMsYT1uZXcgbS5FdmVudChmKSxiPWQubGVuZ3RoO3doaWxlKGItLSljPWRbYl0sYVtjXT1mW2NdO3JldHVybiBhLnRhcmdldHx8KGEudGFyZ2V0PWYuc3JjRWxlbWVudHx8eSksMz09PWEudGFyZ2V0Lm5vZGVUeXBlJiYoYS50YXJnZXQ9YS50YXJnZXQucGFyZW50Tm9kZSksYS5tZXRhS2V5PSEhYS5tZXRhS2V5LGcuZmlsdGVyP2cuZmlsdGVyKGEsZik6YX0scHJvcHM6XCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBldmVudFBoYXNlIG1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2hcIi5zcGxpdChcIiBcIiksZml4SG9va3M6e30sa2V5SG9va3M6e3Byb3BzOlwiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZVwiLnNwbGl0KFwiIFwiKSxmaWx0ZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbnVsbD09YS53aGljaCYmKGEud2hpY2g9bnVsbCE9Yi5jaGFyQ29kZT9iLmNoYXJDb2RlOmIua2V5Q29kZSksYX19LG1vdXNlSG9va3M6e3Byb3BzOlwiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIGZyb21FbGVtZW50IG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50XCIuc3BsaXQoXCIgXCIpLGZpbHRlcjpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmPWIuYnV0dG9uLGc9Yi5mcm9tRWxlbWVudDtyZXR1cm4gbnVsbD09YS5wYWdlWCYmbnVsbCE9Yi5jbGllbnRYJiYoZD1hLnRhcmdldC5vd25lckRvY3VtZW50fHx5LGU9ZC5kb2N1bWVudEVsZW1lbnQsYz1kLmJvZHksYS5wYWdlWD1iLmNsaWVudFgrKGUmJmUuc2Nyb2xsTGVmdHx8YyYmYy5zY3JvbGxMZWZ0fHwwKS0oZSYmZS5jbGllbnRMZWZ0fHxjJiZjLmNsaWVudExlZnR8fDApLGEucGFnZVk9Yi5jbGllbnRZKyhlJiZlLnNjcm9sbFRvcHx8YyYmYy5zY3JvbGxUb3B8fDApLShlJiZlLmNsaWVudFRvcHx8YyYmYy5jbGllbnRUb3B8fDApKSwhYS5yZWxhdGVkVGFyZ2V0JiZnJiYoYS5yZWxhdGVkVGFyZ2V0PWc9PT1hLnRhcmdldD9iLnRvRWxlbWVudDpnKSxhLndoaWNofHx2b2lkIDA9PT1mfHwoYS53aGljaD0xJmY/MToyJmY/Mzo0JmY/MjowKSxhfX0sc3BlY2lhbDp7bG9hZDp7bm9CdWJibGU6ITB9LGZvY3VzOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7aWYodGhpcyE9PWNhKCkmJnRoaXMuZm9jdXMpdHJ5e3JldHVybiB0aGlzLmZvY3VzKCksITF9Y2F0Y2goYSl7fX0sZGVsZWdhdGVUeXBlOlwiZm9jdXNpblwifSxibHVyOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM9PT1jYSgpJiZ0aGlzLmJsdXI/KHRoaXMuYmx1cigpLCExKTp2b2lkIDB9LGRlbGVnYXRlVHlwZTpcImZvY3Vzb3V0XCJ9LGNsaWNrOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7cmV0dXJuIG0ubm9kZU5hbWUodGhpcyxcImlucHV0XCIpJiZcImNoZWNrYm94XCI9PT10aGlzLnR5cGUmJnRoaXMuY2xpY2s/KHRoaXMuY2xpY2soKSwhMSk6dm9pZCAwfSxfZGVmYXVsdDpmdW5jdGlvbihhKXtyZXR1cm4gbS5ub2RlTmFtZShhLnRhcmdldCxcImFcIil9fSxiZWZvcmV1bmxvYWQ6e3Bvc3REaXNwYXRjaDpmdW5jdGlvbihhKXt2b2lkIDAhPT1hLnJlc3VsdCYmYS5vcmlnaW5hbEV2ZW50JiYoYS5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlPWEucmVzdWx0KX19fSxzaW11bGF0ZTpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1tLmV4dGVuZChuZXcgbS5FdmVudCxjLHt0eXBlOmEsaXNTaW11bGF0ZWQ6ITAsb3JpZ2luYWxFdmVudDp7fX0pO2Q/bS5ldmVudC50cmlnZ2VyKGUsbnVsbCxiKTptLmV2ZW50LmRpc3BhdGNoLmNhbGwoYixlKSxlLmlzRGVmYXVsdFByZXZlbnRlZCgpJiZjLnByZXZlbnREZWZhdWx0KCl9fSxtLnJlbW92ZUV2ZW50PXkucmVtb3ZlRXZlbnRMaXN0ZW5lcj9mdW5jdGlvbihhLGIsYyl7YS5yZW1vdmVFdmVudExpc3RlbmVyJiZhLnJlbW92ZUV2ZW50TGlzdGVuZXIoYixjLCExKX06ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVwib25cIitiO2EuZGV0YWNoRXZlbnQmJih0eXBlb2YgYVtkXT09PUsmJihhW2RdPW51bGwpLGEuZGV0YWNoRXZlbnQoZCxjKSl9LG0uRXZlbnQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIG0uRXZlbnQ/KGEmJmEudHlwZT8odGhpcy5vcmlnaW5hbEV2ZW50PWEsdGhpcy50eXBlPWEudHlwZSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1hLmRlZmF1bHRQcmV2ZW50ZWR8fHZvaWQgMD09PWEuZGVmYXVsdFByZXZlbnRlZCYmYS5yZXR1cm5WYWx1ZT09PSExP2FhOmJhKTp0aGlzLnR5cGU9YSxiJiZtLmV4dGVuZCh0aGlzLGIpLHRoaXMudGltZVN0YW1wPWEmJmEudGltZVN0YW1wfHxtLm5vdygpLHZvaWQodGhpc1ttLmV4cGFuZG9dPSEwKSk6bmV3IG0uRXZlbnQoYSxiKX0sbS5FdmVudC5wcm90b3R5cGU9e2lzRGVmYXVsdFByZXZlbnRlZDpiYSxpc1Byb3BhZ2F0aW9uU3RvcHBlZDpiYSxpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDpiYSxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1hYSxhJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6YS5yZXR1cm5WYWx1ZT0hMSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWFhLGEmJihhLnN0b3BQcm9wYWdhdGlvbiYmYS5zdG9wUHJvcGFnYXRpb24oKSxhLmNhbmNlbEJ1YmJsZT0hMCl9LHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPWFhLGEmJmEuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uJiZhLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHRoaXMuc3RvcFByb3BhZ2F0aW9uKCl9fSxtLmVhY2goe21vdXNlZW50ZXI6XCJtb3VzZW92ZXJcIixtb3VzZWxlYXZlOlwibW91c2VvdXRcIixwb2ludGVyZW50ZXI6XCJwb2ludGVyb3ZlclwiLHBvaW50ZXJsZWF2ZTpcInBvaW50ZXJvdXRcIn0sZnVuY3Rpb24oYSxiKXttLmV2ZW50LnNwZWNpYWxbYV09e2RlbGVnYXRlVHlwZTpiLGJpbmRUeXBlOmIsaGFuZGxlOmZ1bmN0aW9uKGEpe3ZhciBjLGQ9dGhpcyxlPWEucmVsYXRlZFRhcmdldCxmPWEuaGFuZGxlT2JqO3JldHVybighZXx8ZSE9PWQmJiFtLmNvbnRhaW5zKGQsZSkpJiYoYS50eXBlPWYub3JpZ1R5cGUsYz1mLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpLGEudHlwZT1iKSxjfX19KSxrLnN1Ym1pdEJ1YmJsZXN8fChtLmV2ZW50LnNwZWNpYWwuc3VibWl0PXtzZXR1cDpmdW5jdGlvbigpe3JldHVybiBtLm5vZGVOYW1lKHRoaXMsXCJmb3JtXCIpPyExOnZvaWQgbS5ldmVudC5hZGQodGhpcyxcImNsaWNrLl9zdWJtaXQga2V5cHJlc3MuX3N1Ym1pdFwiLGZ1bmN0aW9uKGEpe3ZhciBiPWEudGFyZ2V0LGM9bS5ub2RlTmFtZShiLFwiaW5wdXRcIil8fG0ubm9kZU5hbWUoYixcImJ1dHRvblwiKT9iLmZvcm06dm9pZCAwO2MmJiFtLl9kYXRhKGMsXCJzdWJtaXRCdWJibGVzXCIpJiYobS5ldmVudC5hZGQoYyxcInN1Ym1pdC5fc3VibWl0XCIsZnVuY3Rpb24oYSl7YS5fc3VibWl0X2J1YmJsZT0hMH0pLG0uX2RhdGEoYyxcInN1Ym1pdEJ1YmJsZXNcIiwhMCkpfSl9LHBvc3REaXNwYXRjaDpmdW5jdGlvbihhKXthLl9zdWJtaXRfYnViYmxlJiYoZGVsZXRlIGEuX3N1Ym1pdF9idWJibGUsdGhpcy5wYXJlbnROb2RlJiYhYS5pc1RyaWdnZXImJm0uZXZlbnQuc2ltdWxhdGUoXCJzdWJtaXRcIix0aGlzLnBhcmVudE5vZGUsYSwhMCkpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3JldHVybiBtLm5vZGVOYW1lKHRoaXMsXCJmb3JtXCIpPyExOnZvaWQgbS5ldmVudC5yZW1vdmUodGhpcyxcIi5fc3VibWl0XCIpfX0pLGsuY2hhbmdlQnViYmxlc3x8KG0uZXZlbnQuc3BlY2lhbC5jaGFuZ2U9e3NldHVwOmZ1bmN0aW9uKCl7cmV0dXJuIFgudGVzdCh0aGlzLm5vZGVOYW1lKT8oKFwiY2hlY2tib3hcIj09PXRoaXMudHlwZXx8XCJyYWRpb1wiPT09dGhpcy50eXBlKSYmKG0uZXZlbnQuYWRkKHRoaXMsXCJwcm9wZXJ0eWNoYW5nZS5fY2hhbmdlXCIsZnVuY3Rpb24oYSl7XCJjaGVja2VkXCI9PT1hLm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lJiYodGhpcy5fanVzdF9jaGFuZ2VkPSEwKX0pLG0uZXZlbnQuYWRkKHRoaXMsXCJjbGljay5fY2hhbmdlXCIsZnVuY3Rpb24oYSl7dGhpcy5fanVzdF9jaGFuZ2VkJiYhYS5pc1RyaWdnZXImJih0aGlzLl9qdXN0X2NoYW5nZWQ9ITEpLG0uZXZlbnQuc2ltdWxhdGUoXCJjaGFuZ2VcIix0aGlzLGEsITApfSkpLCExKTp2b2lkIG0uZXZlbnQuYWRkKHRoaXMsXCJiZWZvcmVhY3RpdmF0ZS5fY2hhbmdlXCIsZnVuY3Rpb24oYSl7dmFyIGI9YS50YXJnZXQ7WC50ZXN0KGIubm9kZU5hbWUpJiYhbS5fZGF0YShiLFwiY2hhbmdlQnViYmxlc1wiKSYmKG0uZXZlbnQuYWRkKGIsXCJjaGFuZ2UuX2NoYW5nZVwiLGZ1bmN0aW9uKGEpeyF0aGlzLnBhcmVudE5vZGV8fGEuaXNTaW11bGF0ZWR8fGEuaXNUcmlnZ2VyfHxtLmV2ZW50LnNpbXVsYXRlKFwiY2hhbmdlXCIsdGhpcy5wYXJlbnROb2RlLGEsITApfSksbS5fZGF0YShiLFwiY2hhbmdlQnViYmxlc1wiLCEwKSl9KX0saGFuZGxlOmZ1bmN0aW9uKGEpe3ZhciBiPWEudGFyZ2V0O3JldHVybiB0aGlzIT09Ynx8YS5pc1NpbXVsYXRlZHx8YS5pc1RyaWdnZXJ8fFwicmFkaW9cIiE9PWIudHlwZSYmXCJjaGVja2JveFwiIT09Yi50eXBlP2EuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOnZvaWQgMH0sdGVhcmRvd246ZnVuY3Rpb24oKXtyZXR1cm4gbS5ldmVudC5yZW1vdmUodGhpcyxcIi5fY2hhbmdlXCIpLCFYLnRlc3QodGhpcy5ub2RlTmFtZSl9fSksay5mb2N1c2luQnViYmxlc3x8bS5lYWNoKHtmb2N1czpcImZvY3VzaW5cIixibHVyOlwiZm9jdXNvdXRcIn0sZnVuY3Rpb24oYSxiKXt2YXIgYz1mdW5jdGlvbihhKXttLmV2ZW50LnNpbXVsYXRlKGIsYS50YXJnZXQsbS5ldmVudC5maXgoYSksITApfTttLmV2ZW50LnNwZWNpYWxbYl09e3NldHVwOmZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLGU9bS5fZGF0YShkLGIpO2V8fGQuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApLG0uX2RhdGEoZCxiLChlfHwwKSsxKX0sdGVhcmRvd246ZnVuY3Rpb24oKXt2YXIgZD10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsZT1tLl9kYXRhKGQsYiktMTtlP20uX2RhdGEoZCxiLGUpOihkLnJlbW92ZUV2ZW50TGlzdGVuZXIoYSxjLCEwKSxtLl9yZW1vdmVEYXRhKGQsYikpfX19KSxtLmZuLmV4dGVuZCh7b246ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZixnO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBhKXtcInN0cmluZ1wiIT10eXBlb2YgYiYmKGM9Y3x8YixiPXZvaWQgMCk7Zm9yKGYgaW4gYSl0aGlzLm9uKGYsYixjLGFbZl0sZSk7cmV0dXJuIHRoaXN9aWYobnVsbD09YyYmbnVsbD09ZD8oZD1iLGM9Yj12b2lkIDApOm51bGw9PWQmJihcInN0cmluZ1wiPT10eXBlb2YgYj8oZD1jLGM9dm9pZCAwKTooZD1jLGM9YixiPXZvaWQgMCkpLGQ9PT0hMSlkPWJhO2Vsc2UgaWYoIWQpcmV0dXJuIHRoaXM7cmV0dXJuIDE9PT1lJiYoZz1kLGQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG0oKS5vZmYoYSksZy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGQuZ3VpZD1nLmd1aWR8fChnLmd1aWQ9bS5ndWlkKyspKSx0aGlzLmVhY2goZnVuY3Rpb24oKXttLmV2ZW50LmFkZCh0aGlzLGEsZCxjLGIpfSl9LG9uZTpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5vbihhLGIsYyxkLDEpfSxvZmY6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGU7aWYoYSYmYS5wcmV2ZW50RGVmYXVsdCYmYS5oYW5kbGVPYmopcmV0dXJuIGQ9YS5oYW5kbGVPYmosbShhLmRlbGVnYXRlVGFyZ2V0KS5vZmYoZC5uYW1lc3BhY2U/ZC5vcmlnVHlwZStcIi5cIitkLm5hbWVzcGFjZTpkLm9yaWdUeXBlLGQuc2VsZWN0b3IsZC5oYW5kbGVyKSx0aGlzO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBhKXtmb3IoZSBpbiBhKXRoaXMub2ZmKGUsYixhW2VdKTtyZXR1cm4gdGhpc31yZXR1cm4oYj09PSExfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBiKSYmKGM9YixiPXZvaWQgMCksYz09PSExJiYoYz1iYSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7bS5ldmVudC5yZW1vdmUodGhpcyxhLGMsYil9KX0sdHJpZ2dlcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXttLmV2ZW50LnRyaWdnZXIoYSxiLHRoaXMpfSl9LHRyaWdnZXJIYW5kbGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpc1swXTtyZXR1cm4gYz9tLmV2ZW50LnRyaWdnZXIoYSxiLGMsITApOnZvaWQgMH19KTtmdW5jdGlvbiBkYShhKXt2YXIgYj1lYS5zcGxpdChcInxcIiksYz1hLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtpZihjLmNyZWF0ZUVsZW1lbnQpd2hpbGUoYi5sZW5ndGgpYy5jcmVhdGVFbGVtZW50KGIucG9wKCkpO3JldHVybiBjfXZhciBlYT1cImFiYnJ8YXJ0aWNsZXxhc2lkZXxhdWRpb3xiZGl8Y2FudmFzfGRhdGF8ZGF0YWxpc3R8ZGV0YWlsc3xmaWdjYXB0aW9ufGZpZ3VyZXxmb290ZXJ8aGVhZGVyfGhncm91cHxtYXJrfG1ldGVyfG5hdnxvdXRwdXR8cHJvZ3Jlc3N8c2VjdGlvbnxzdW1tYXJ5fHRpbWV8dmlkZW9cIixmYT0vIGpRdWVyeVxcZCs9XCIoPzpudWxsfFxcZCspXCIvZyxnYT1uZXcgUmVnRXhwKFwiPCg/OlwiK2VhK1wiKVtcXFxccy8+XVwiLFwiaVwiKSxoYT0vXlxccysvLGlhPS88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naSxqYT0vPChbXFx3Ol0rKS8sa2E9Lzx0Ym9keS9pLGxhPS88fCYjP1xcdys7LyxtYT0vPCg/OnNjcmlwdHxzdHlsZXxsaW5rKS9pLG5hPS9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksb2E9L14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSxwYT0vXnRydWVcXC8oLiopLyxxYT0vXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2cscmE9e29wdGlvbjpbMSxcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIixcIjwvc2VsZWN0PlwiXSxsZWdlbmQ6WzEsXCI8ZmllbGRzZXQ+XCIsXCI8L2ZpZWxkc2V0PlwiXSxhcmVhOlsxLFwiPG1hcD5cIixcIjwvbWFwPlwiXSxwYXJhbTpbMSxcIjxvYmplY3Q+XCIsXCI8L29iamVjdD5cIl0sdGhlYWQ6WzEsXCI8dGFibGU+XCIsXCI8L3RhYmxlPlwiXSx0cjpbMixcIjx0YWJsZT48dGJvZHk+XCIsXCI8L3Rib2R5PjwvdGFibGU+XCJdLGNvbDpbMixcIjx0YWJsZT48dGJvZHk+PC90Ym9keT48Y29sZ3JvdXA+XCIsXCI8L2NvbGdyb3VwPjwvdGFibGU+XCJdLHRkOlszLFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIl0sX2RlZmF1bHQ6ay5odG1sU2VyaWFsaXplP1swLFwiXCIsXCJcIl06WzEsXCJYPGRpdj5cIixcIjwvZGl2PlwiXX0sc2E9ZGEoeSksdGE9c2EuYXBwZW5kQ2hpbGQoeS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtyYS5vcHRncm91cD1yYS5vcHRpb24scmEudGJvZHk9cmEudGZvb3Q9cmEuY29sZ3JvdXA9cmEuY2FwdGlvbj1yYS50aGVhZCxyYS50aD1yYS50ZDtmdW5jdGlvbiB1YShhLGIpe3ZhciBjLGQsZT0wLGY9dHlwZW9mIGEuZ2V0RWxlbWVudHNCeVRhZ05hbWUhPT1LP2EuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYnx8XCIqXCIpOnR5cGVvZiBhLnF1ZXJ5U2VsZWN0b3JBbGwhPT1LP2EucXVlcnlTZWxlY3RvckFsbChifHxcIipcIik6dm9pZCAwO2lmKCFmKWZvcihmPVtdLGM9YS5jaGlsZE5vZGVzfHxhO251bGwhPShkPWNbZV0pO2UrKykhYnx8bS5ub2RlTmFtZShkLGIpP2YucHVzaChkKTptLm1lcmdlKGYsdWEoZCxiKSk7cmV0dXJuIHZvaWQgMD09PWJ8fGImJm0ubm9kZU5hbWUoYSxiKT9tLm1lcmdlKFthXSxmKTpmfWZ1bmN0aW9uIHZhKGEpe1cudGVzdChhLnR5cGUpJiYoYS5kZWZhdWx0Q2hlY2tlZD1hLmNoZWNrZWQpfWZ1bmN0aW9uIHdhKGEsYil7cmV0dXJuIG0ubm9kZU5hbWUoYSxcInRhYmxlXCIpJiZtLm5vZGVOYW1lKDExIT09Yi5ub2RlVHlwZT9iOmIuZmlyc3RDaGlsZCxcInRyXCIpP2EuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0Ym9keVwiKVswXXx8YS5hcHBlbmRDaGlsZChhLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRib2R5XCIpKTphfWZ1bmN0aW9uIHhhKGEpe3JldHVybiBhLnR5cGU9KG51bGwhPT1tLmZpbmQuYXR0cihhLFwidHlwZVwiKSkrXCIvXCIrYS50eXBlLGF9ZnVuY3Rpb24geWEoYSl7dmFyIGI9cGEuZXhlYyhhLnR5cGUpO3JldHVybiBiP2EudHlwZT1iWzFdOmEucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKSxhfWZ1bmN0aW9uIHphKGEsYil7Zm9yKHZhciBjLGQ9MDtudWxsIT0oYz1hW2RdKTtkKyspbS5fZGF0YShjLFwiZ2xvYmFsRXZhbFwiLCFifHxtLl9kYXRhKGJbZF0sXCJnbG9iYWxFdmFsXCIpKX1mdW5jdGlvbiBBYShhLGIpe2lmKDE9PT1iLm5vZGVUeXBlJiZtLmhhc0RhdGEoYSkpe3ZhciBjLGQsZSxmPW0uX2RhdGEoYSksZz1tLl9kYXRhKGIsZiksaD1mLmV2ZW50cztpZihoKXtkZWxldGUgZy5oYW5kbGUsZy5ldmVudHM9e307Zm9yKGMgaW4gaClmb3IoZD0wLGU9aFtjXS5sZW5ndGg7ZT5kO2QrKyltLmV2ZW50LmFkZChiLGMsaFtjXVtkXSl9Zy5kYXRhJiYoZy5kYXRhPW0uZXh0ZW5kKHt9LGcuZGF0YSkpfX1mdW5jdGlvbiBCYShhLGIpe3ZhciBjLGQsZTtpZigxPT09Yi5ub2RlVHlwZSl7aWYoYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksIWsubm9DbG9uZUV2ZW50JiZiW20uZXhwYW5kb10pe2U9bS5fZGF0YShiKTtmb3IoZCBpbiBlLmV2ZW50cyltLnJlbW92ZUV2ZW50KGIsZCxlLmhhbmRsZSk7Yi5yZW1vdmVBdHRyaWJ1dGUobS5leHBhbmRvKX1cInNjcmlwdFwiPT09YyYmYi50ZXh0IT09YS50ZXh0Pyh4YShiKS50ZXh0PWEudGV4dCx5YShiKSk6XCJvYmplY3RcIj09PWM/KGIucGFyZW50Tm9kZSYmKGIub3V0ZXJIVE1MPWEub3V0ZXJIVE1MKSxrLmh0bWw1Q2xvbmUmJmEuaW5uZXJIVE1MJiYhbS50cmltKGIuaW5uZXJIVE1MKSYmKGIuaW5uZXJIVE1MPWEuaW5uZXJIVE1MKSk6XCJpbnB1dFwiPT09YyYmVy50ZXN0KGEudHlwZSk/KGIuZGVmYXVsdENoZWNrZWQ9Yi5jaGVja2VkPWEuY2hlY2tlZCxiLnZhbHVlIT09YS52YWx1ZSYmKGIudmFsdWU9YS52YWx1ZSkpOlwib3B0aW9uXCI9PT1jP2IuZGVmYXVsdFNlbGVjdGVkPWIuc2VsZWN0ZWQ9YS5kZWZhdWx0U2VsZWN0ZWQ6KFwiaW5wdXRcIj09PWN8fFwidGV4dGFyZWFcIj09PWMpJiYoYi5kZWZhdWx0VmFsdWU9YS5kZWZhdWx0VmFsdWUpfX1tLmV4dGVuZCh7Y2xvbmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnLGgsaT1tLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKTtpZihrLmh0bWw1Q2xvbmV8fG0uaXNYTUxEb2MoYSl8fCFnYS50ZXN0KFwiPFwiK2Eubm9kZU5hbWUrXCI+XCIpP2Y9YS5jbG9uZU5vZGUoITApOih0YS5pbm5lckhUTUw9YS5vdXRlckhUTUwsdGEucmVtb3ZlQ2hpbGQoZj10YS5maXJzdENoaWxkKSksIShrLm5vQ2xvbmVFdmVudCYmay5ub0Nsb25lQ2hlY2tlZHx8MSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZXx8bS5pc1hNTERvYyhhKSkpZm9yKGQ9dWEoZiksaD11YShhKSxnPTA7bnVsbCE9KGU9aFtnXSk7KytnKWRbZ10mJkJhKGUsZFtnXSk7aWYoYilpZihjKWZvcihoPWh8fHVhKGEpLGQ9ZHx8dWEoZiksZz0wO251bGwhPShlPWhbZ10pO2crKylBYShlLGRbZ10pO2Vsc2UgQWEoYSxmKTtyZXR1cm4gZD11YShmLFwic2NyaXB0XCIpLGQubGVuZ3RoPjAmJnphKGQsIWkmJnVhKGEsXCJzY3JpcHRcIikpLGQ9aD1lPW51bGwsZn0sYnVpbGRGcmFnbWVudDpmdW5jdGlvbihhLGIsYyxkKXtmb3IodmFyIGUsZixnLGgsaSxqLGwsbj1hLmxlbmd0aCxvPWRhKGIpLHA9W10scT0wO24+cTtxKyspaWYoZj1hW3FdLGZ8fDA9PT1mKWlmKFwib2JqZWN0XCI9PT1tLnR5cGUoZikpbS5tZXJnZShwLGYubm9kZVR5cGU/W2ZdOmYpO2Vsc2UgaWYobGEudGVzdChmKSl7aD1ofHxvLmFwcGVuZENoaWxkKGIuY3JlYXRlRWxlbWVudChcImRpdlwiKSksaT0oamEuZXhlYyhmKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksbD1yYVtpXXx8cmEuX2RlZmF1bHQsaC5pbm5lckhUTUw9bFsxXStmLnJlcGxhY2UoaWEsXCI8JDE+PC8kMj5cIikrbFsyXSxlPWxbMF07d2hpbGUoZS0tKWg9aC5sYXN0Q2hpbGQ7aWYoIWsubGVhZGluZ1doaXRlc3BhY2UmJmhhLnRlc3QoZikmJnAucHVzaChiLmNyZWF0ZVRleHROb2RlKGhhLmV4ZWMoZilbMF0pKSwhay50Ym9keSl7Zj1cInRhYmxlXCIhPT1pfHxrYS50ZXN0KGYpP1wiPHRhYmxlPlwiIT09bFsxXXx8a2EudGVzdChmKT8wOmg6aC5maXJzdENoaWxkLGU9ZiYmZi5jaGlsZE5vZGVzLmxlbmd0aDt3aGlsZShlLS0pbS5ub2RlTmFtZShqPWYuY2hpbGROb2Rlc1tlXSxcInRib2R5XCIpJiYhai5jaGlsZE5vZGVzLmxlbmd0aCYmZi5yZW1vdmVDaGlsZChqKX1tLm1lcmdlKHAsaC5jaGlsZE5vZGVzKSxoLnRleHRDb250ZW50PVwiXCI7d2hpbGUoaC5maXJzdENoaWxkKWgucmVtb3ZlQ2hpbGQoaC5maXJzdENoaWxkKTtoPW8ubGFzdENoaWxkfWVsc2UgcC5wdXNoKGIuY3JlYXRlVGV4dE5vZGUoZikpO2gmJm8ucmVtb3ZlQ2hpbGQoaCksay5hcHBlbmRDaGVja2VkfHxtLmdyZXAodWEocCxcImlucHV0XCIpLHZhKSxxPTA7d2hpbGUoZj1wW3ErK10paWYoKCFkfHwtMT09PW0uaW5BcnJheShmLGQpKSYmKGc9bS5jb250YWlucyhmLm93bmVyRG9jdW1lbnQsZiksaD11YShvLmFwcGVuZENoaWxkKGYpLFwic2NyaXB0XCIpLGcmJnphKGgpLGMpKXtlPTA7d2hpbGUoZj1oW2UrK10pb2EudGVzdChmLnR5cGV8fFwiXCIpJiZjLnB1c2goZil9cmV0dXJuIGg9bnVsbCxvfSxjbGVhbkRhdGE6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGQsZSxmLGcsaD0wLGk9bS5leHBhbmRvLGo9bS5jYWNoZSxsPWsuZGVsZXRlRXhwYW5kbyxuPW0uZXZlbnQuc3BlY2lhbDtudWxsIT0oZD1hW2hdKTtoKyspaWYoKGJ8fG0uYWNjZXB0RGF0YShkKSkmJihmPWRbaV0sZz1mJiZqW2ZdKSl7aWYoZy5ldmVudHMpZm9yKGUgaW4gZy5ldmVudHMpbltlXT9tLmV2ZW50LnJlbW92ZShkLGUpOm0ucmVtb3ZlRXZlbnQoZCxlLGcuaGFuZGxlKTtqW2ZdJiYoZGVsZXRlIGpbZl0sbD9kZWxldGUgZFtpXTp0eXBlb2YgZC5yZW1vdmVBdHRyaWJ1dGUhPT1LP2QucmVtb3ZlQXR0cmlidXRlKGkpOmRbaV09bnVsbCxjLnB1c2goZikpfX19KSxtLmZuLmV4dGVuZCh7dGV4dDpmdW5jdGlvbihhKXtyZXR1cm4gVih0aGlzLGZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hP20udGV4dCh0aGlzKTp0aGlzLmVtcHR5KCkuYXBwZW5kKCh0aGlzWzBdJiZ0aGlzWzBdLm93bmVyRG9jdW1lbnR8fHkpLmNyZWF0ZVRleHROb2RlKGEpKX0sbnVsbCxhLGFyZ3VtZW50cy5sZW5ndGgpfSxhcHBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsZnVuY3Rpb24oYSl7aWYoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpe3ZhciBiPXdhKHRoaXMsYSk7Yi5hcHBlbmRDaGlsZChhKX19KX0scHJlcGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihhKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIGI9d2EodGhpcyxhKTtiLmluc2VydEJlZm9yZShhLGIuZmlyc3RDaGlsZCl9fSl9LGJlZm9yZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihhKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSx0aGlzKX0pfSxhZnRlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cyxmdW5jdGlvbihhKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSx0aGlzLm5leHRTaWJsaW5nKX0pfSxyZW1vdmU6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGMsZD1hP20uZmlsdGVyKGEsdGhpcyk6dGhpcyxlPTA7bnVsbCE9KGM9ZFtlXSk7ZSsrKWJ8fDEhPT1jLm5vZGVUeXBlfHxtLmNsZWFuRGF0YSh1YShjKSksYy5wYXJlbnROb2RlJiYoYiYmbS5jb250YWlucyhjLm93bmVyRG9jdW1lbnQsYykmJnphKHVhKGMsXCJzY3JpcHRcIikpLGMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKSk7cmV0dXJuIHRoaXN9LGVtcHR5OmZ1bmN0aW9uKCl7Zm9yKHZhciBhLGI9MDtudWxsIT0oYT10aGlzW2JdKTtiKyspezE9PT1hLm5vZGVUeXBlJiZtLmNsZWFuRGF0YSh1YShhLCExKSk7d2hpbGUoYS5maXJzdENoaWxkKWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTthLm9wdGlvbnMmJm0ubm9kZU5hbWUoYSxcInNlbGVjdFwiKSYmKGEub3B0aW9ucy5sZW5ndGg9MCl9cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9bnVsbD09YT8hMTphLGI9bnVsbD09Yj9hOmIsdGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gbS5jbG9uZSh0aGlzLGEsYil9KX0saHRtbDpmdW5jdGlvbihhKXtyZXR1cm4gVih0aGlzLGZ1bmN0aW9uKGEpe3ZhciBiPXRoaXNbMF18fHt9LGM9MCxkPXRoaXMubGVuZ3RoO2lmKHZvaWQgMD09PWEpcmV0dXJuIDE9PT1iLm5vZGVUeXBlP2IuaW5uZXJIVE1MLnJlcGxhY2UoZmEsXCJcIik6dm9pZCAwO2lmKCEoXCJzdHJpbmdcIiE9dHlwZW9mIGF8fG1hLnRlc3QoYSl8fCFrLmh0bWxTZXJpYWxpemUmJmdhLnRlc3QoYSl8fCFrLmxlYWRpbmdXaGl0ZXNwYWNlJiZoYS50ZXN0KGEpfHxyYVsoamEuZXhlYyhhKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCldKSl7YT1hLnJlcGxhY2UoaWEsXCI8JDE+PC8kMj5cIik7dHJ5e2Zvcig7ZD5jO2MrKyliPXRoaXNbY118fHt9LDE9PT1iLm5vZGVUeXBlJiYobS5jbGVhbkRhdGEodWEoYiwhMSkpLGIuaW5uZXJIVE1MPWEpO2I9MH1jYXRjaChlKXt9fWImJnRoaXMuZW1wdHkoKS5hcHBlbmQoYSl9LG51bGwsYSxhcmd1bWVudHMubGVuZ3RoKX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24oKXt2YXIgYT1hcmd1bWVudHNbMF07cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLGZ1bmN0aW9uKGIpe2E9dGhpcy5wYXJlbnROb2RlLG0uY2xlYW5EYXRhKHVhKHRoaXMpKSxhJiZhLnJlcGxhY2VDaGlsZChiLHRoaXMpfSksYSYmKGEubGVuZ3RofHxhLm5vZGVUeXBlKT90aGlzOnRoaXMucmVtb3ZlKCl9LGRldGFjaDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5yZW1vdmUoYSwhMCl9LGRvbU1hbmlwOmZ1bmN0aW9uKGEsYil7YT1lLmFwcGx5KFtdLGEpO3ZhciBjLGQsZixnLGgsaSxqPTAsbD10aGlzLmxlbmd0aCxuPXRoaXMsbz1sLTEscD1hWzBdLHE9bS5pc0Z1bmN0aW9uKHApO2lmKHF8fGw+MSYmXCJzdHJpbmdcIj09dHlwZW9mIHAmJiFrLmNoZWNrQ2xvbmUmJm5hLnRlc3QocCkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihjKXt2YXIgZD1uLmVxKGMpO3EmJihhWzBdPXAuY2FsbCh0aGlzLGMsZC5odG1sKCkpKSxkLmRvbU1hbmlwKGEsYil9KTtpZihsJiYoaT1tLmJ1aWxkRnJhZ21lbnQoYSx0aGlzWzBdLm93bmVyRG9jdW1lbnQsITEsdGhpcyksYz1pLmZpcnN0Q2hpbGQsMT09PWkuY2hpbGROb2Rlcy5sZW5ndGgmJihpPWMpLGMpKXtmb3IoZz1tLm1hcCh1YShpLFwic2NyaXB0XCIpLHhhKSxmPWcubGVuZ3RoO2w+ajtqKyspZD1pLGohPT1vJiYoZD1tLmNsb25lKGQsITAsITApLGYmJm0ubWVyZ2UoZyx1YShkLFwic2NyaXB0XCIpKSksYi5jYWxsKHRoaXNbal0sZCxqKTtpZihmKWZvcihoPWdbZy5sZW5ndGgtMV0ub3duZXJEb2N1bWVudCxtLm1hcChnLHlhKSxqPTA7Zj5qO2orKylkPWdbal0sb2EudGVzdChkLnR5cGV8fFwiXCIpJiYhbS5fZGF0YShkLFwiZ2xvYmFsRXZhbFwiKSYmbS5jb250YWlucyhoLGQpJiYoZC5zcmM/bS5fZXZhbFVybCYmbS5fZXZhbFVybChkLnNyYyk6bS5nbG9iYWxFdmFsKChkLnRleHR8fGQudGV4dENvbnRlbnR8fGQuaW5uZXJIVE1MfHxcIlwiKS5yZXBsYWNlKHFhLFwiXCIpKSk7aT1jPW51bGx9cmV0dXJuIHRoaXN9fSksbS5lYWNoKHthcHBlbmRUbzpcImFwcGVuZFwiLHByZXBlbmRUbzpcInByZXBlbmRcIixpbnNlcnRCZWZvcmU6XCJiZWZvcmVcIixpbnNlcnRBZnRlcjpcImFmdGVyXCIscmVwbGFjZUFsbDpcInJlcGxhY2VXaXRoXCJ9LGZ1bmN0aW9uKGEsYil7bS5mblthXT1mdW5jdGlvbihhKXtmb3IodmFyIGMsZD0wLGU9W10sZz1tKGEpLGg9Zy5sZW5ndGgtMTtoPj1kO2QrKyljPWQ9PT1oP3RoaXM6dGhpcy5jbG9uZSghMCksbShnW2RdKVtiXShjKSxmLmFwcGx5KGUsYy5nZXQoKSk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGUpfX0pO3ZhciBDYSxEYT17fTtmdW5jdGlvbiBFYShiLGMpe3ZhciBkLGU9bShjLmNyZWF0ZUVsZW1lbnQoYikpLmFwcGVuZFRvKGMuYm9keSksZj1hLmdldERlZmF1bHRDb21wdXRlZFN0eWxlJiYoZD1hLmdldERlZmF1bHRDb21wdXRlZFN0eWxlKGVbMF0pKT9kLmRpc3BsYXk6bS5jc3MoZVswXSxcImRpc3BsYXlcIik7cmV0dXJuIGUuZGV0YWNoKCksZn1mdW5jdGlvbiBGYShhKXt2YXIgYj15LGM9RGFbYV07cmV0dXJuIGN8fChjPUVhKGEsYiksXCJub25lXCIhPT1jJiZjfHwoQ2E9KENhfHxtKFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiKSkuYXBwZW5kVG8oYi5kb2N1bWVudEVsZW1lbnQpLGI9KENhWzBdLmNvbnRlbnRXaW5kb3d8fENhWzBdLmNvbnRlbnREb2N1bWVudCkuZG9jdW1lbnQsYi53cml0ZSgpLGIuY2xvc2UoKSxjPUVhKGEsYiksQ2EuZGV0YWNoKCkpLERhW2FdPWMpLGN9IWZ1bmN0aW9uKCl7dmFyIGE7ay5zaHJpbmtXcmFwQmxvY2tzPWZ1bmN0aW9uKCl7aWYobnVsbCE9YSlyZXR1cm4gYTthPSExO3ZhciBiLGMsZDtyZXR1cm4gYz15LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXSxjJiZjLnN0eWxlPyhiPXkuY3JlYXRlRWxlbWVudChcImRpdlwiKSxkPXkuY3JlYXRlRWxlbWVudChcImRpdlwiKSxkLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweFwiLGMuYXBwZW5kQ2hpbGQoZCkuYXBwZW5kQ2hpbGQoYiksdHlwZW9mIGIuc3R5bGUuem9vbSE9PUsmJihiLnN0eWxlLmNzc1RleHQ9XCItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjFweDt3aWR0aDoxcHg7em9vbToxXCIsYi5hcHBlbmRDaGlsZCh5LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLnN0eWxlLndpZHRoPVwiNXB4XCIsYT0zIT09Yi5vZmZzZXRXaWR0aCksYy5yZW1vdmVDaGlsZChkKSxhKTp2b2lkIDB9fSgpO3ZhciBHYT0vXm1hcmdpbi8sSGE9bmV3IFJlZ0V4cChcIl4oXCIrUytcIikoPyFweClbYS16JV0rJFwiLFwiaVwiKSxJYSxKYSxLYT0vXih0b3B8cmlnaHR8Ym90dG9tfGxlZnQpJC87YS5nZXRDb21wdXRlZFN0eWxlPyhJYT1mdW5jdGlvbihiKXtyZXR1cm4gYi5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lm9wZW5lcj9iLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShiLG51bGwpOmEuZ2V0Q29tcHV0ZWRTdHlsZShiLG51bGwpfSxKYT1mdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLnN0eWxlO3JldHVybiBjPWN8fElhKGEpLGc9Yz9jLmdldFByb3BlcnR5VmFsdWUoYil8fGNbYl06dm9pZCAwLGMmJihcIlwiIT09Z3x8bS5jb250YWlucyhhLm93bmVyRG9jdW1lbnQsYSl8fChnPW0uc3R5bGUoYSxiKSksSGEudGVzdChnKSYmR2EudGVzdChiKSYmKGQ9aC53aWR0aCxlPWgubWluV2lkdGgsZj1oLm1heFdpZHRoLGgubWluV2lkdGg9aC5tYXhXaWR0aD1oLndpZHRoPWcsZz1jLndpZHRoLGgud2lkdGg9ZCxoLm1pbldpZHRoPWUsaC5tYXhXaWR0aD1mKSksdm9pZCAwPT09Zz9nOmcrXCJcIn0pOnkuZG9jdW1lbnRFbGVtZW50LmN1cnJlbnRTdHlsZSYmKElhPWZ1bmN0aW9uKGEpe3JldHVybiBhLmN1cnJlbnRTdHlsZX0sSmE9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnLGg9YS5zdHlsZTtyZXR1cm4gYz1jfHxJYShhKSxnPWM/Y1tiXTp2b2lkIDAsbnVsbD09ZyYmaCYmaFtiXSYmKGc9aFtiXSksSGEudGVzdChnKSYmIUthLnRlc3QoYikmJihkPWgubGVmdCxlPWEucnVudGltZVN0eWxlLGY9ZSYmZS5sZWZ0LGYmJihlLmxlZnQ9YS5jdXJyZW50U3R5bGUubGVmdCksaC5sZWZ0PVwiZm9udFNpemVcIj09PWI/XCIxZW1cIjpnLGc9aC5waXhlbExlZnQrXCJweFwiLGgubGVmdD1kLGYmJihlLmxlZnQ9ZikpLHZvaWQgMD09PWc/ZzpnK1wiXCJ8fFwiYXV0b1wifSk7ZnVuY3Rpb24gTGEoYSxiKXtyZXR1cm57Z2V0OmZ1bmN0aW9uKCl7dmFyIGM9YSgpO2lmKG51bGwhPWMpcmV0dXJuIGM/dm9pZCBkZWxldGUgdGhpcy5nZXQ6KHRoaXMuZ2V0PWIpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19fSFmdW5jdGlvbigpe3ZhciBiLGMsZCxlLGYsZyxoO2lmKGI9eS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuaW5uZXJIVE1MPVwiICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+XCIsZD1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYVwiKVswXSxjPWQmJmQuc3R5bGUpe2MuY3NzVGV4dD1cImZsb2F0OmxlZnQ7b3BhY2l0eTouNVwiLGsub3BhY2l0eT1cIjAuNVwiPT09Yy5vcGFjaXR5LGsuY3NzRmxvYXQ9ISFjLmNzc0Zsb2F0LGIuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJjb250ZW50LWJveFwiLGIuY2xvbmVOb2RlKCEwKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD1cIlwiLGsuY2xlYXJDbG9uZVN0eWxlPVwiY29udGVudC1ib3hcIj09PWIuc3R5bGUuYmFja2dyb3VuZENsaXAsay5ib3hTaXppbmc9XCJcIj09PWMuYm94U2l6aW5nfHxcIlwiPT09Yy5Nb3pCb3hTaXppbmd8fFwiXCI9PT1jLldlYmtpdEJveFNpemluZyxtLmV4dGVuZChrLHtyZWxpYWJsZUhpZGRlbk9mZnNldHM6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09ZyYmaSgpLGd9LGJveFNpemluZ1JlbGlhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PWYmJmkoKSxmfSxwaXhlbFBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PWUmJmkoKSxlfSxyZWxpYWJsZU1hcmdpblJpZ2h0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PWgmJmkoKSxofX0pO2Z1bmN0aW9uIGkoKXt2YXIgYixjLGQsaTtjPXkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdLGMmJmMuc3R5bGUmJihiPXkuY3JlYXRlRWxlbWVudChcImRpdlwiKSxkPXkuY3JlYXRlRWxlbWVudChcImRpdlwiKSxkLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjphYnNvbHV0ZTtib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweFwiLGMuYXBwZW5kQ2hpbGQoZCkuYXBwZW5kQ2hpbGQoYiksYi5zdHlsZS5jc3NUZXh0PVwiLXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luLXRvcDoxJTt0b3A6MSU7Ym9yZGVyOjFweDtwYWRkaW5nOjFweDt3aWR0aDo0cHg7cG9zaXRpb246YWJzb2x1dGVcIixlPWY9ITEsaD0hMCxhLmdldENvbXB1dGVkU3R5bGUmJihlPVwiMSVcIiE9PShhLmdldENvbXB1dGVkU3R5bGUoYixudWxsKXx8e30pLnRvcCxmPVwiNHB4XCI9PT0oYS5nZXRDb21wdXRlZFN0eWxlKGIsbnVsbCl8fHt3aWR0aDpcIjRweFwifSkud2lkdGgsaT1iLmFwcGVuZENoaWxkKHkuY3JlYXRlRWxlbWVudChcImRpdlwiKSksaS5zdHlsZS5jc3NUZXh0PWIuc3R5bGUuY3NzVGV4dD1cIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiLGkuc3R5bGUubWFyZ2luUmlnaHQ9aS5zdHlsZS53aWR0aD1cIjBcIixiLnN0eWxlLndpZHRoPVwiMXB4XCIsaD0hcGFyc2VGbG9hdCgoYS5nZXRDb21wdXRlZFN0eWxlKGksbnVsbCl8fHt9KS5tYXJnaW5SaWdodCksYi5yZW1vdmVDaGlsZChpKSksYi5pbm5lckhUTUw9XCI8dGFibGU+PHRyPjx0ZD48L3RkPjx0ZD50PC90ZD48L3RyPjwvdGFibGU+XCIsaT1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGRcIiksaVswXS5zdHlsZS5jc3NUZXh0PVwibWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowO2Rpc3BsYXk6bm9uZVwiLGc9MD09PWlbMF0ub2Zmc2V0SGVpZ2h0LGcmJihpWzBdLnN0eWxlLmRpc3BsYXk9XCJcIixpWzFdLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsZz0wPT09aVswXS5vZmZzZXRIZWlnaHQpLGMucmVtb3ZlQ2hpbGQoZCkpfX19KCksbS5zd2FwPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlLGYsZz17fTtmb3IoZiBpbiBiKWdbZl09YS5zdHlsZVtmXSxhLnN0eWxlW2ZdPWJbZl07ZT1jLmFwcGx5KGEsZHx8W10pO2ZvcihmIGluIGIpYS5zdHlsZVtmXT1nW2ZdO3JldHVybiBlfTt2YXIgTWE9L2FscGhhXFwoW14pXSpcXCkvaSxOYT0vb3BhY2l0eVxccyo9XFxzKihbXildKikvLE9hPS9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxQYT1uZXcgUmVnRXhwKFwiXihcIitTK1wiKSguKikkXCIsXCJpXCIpLFFhPW5ldyBSZWdFeHAoXCJeKFsrLV0pPShcIitTK1wiKVwiLFwiaVwiKSxSYT17cG9zaXRpb246XCJhYnNvbHV0ZVwiLHZpc2liaWxpdHk6XCJoaWRkZW5cIixkaXNwbGF5OlwiYmxvY2tcIn0sU2E9e2xldHRlclNwYWNpbmc6XCIwXCIsZm9udFdlaWdodDpcIjQwMFwifSxUYT1bXCJXZWJraXRcIixcIk9cIixcIk1velwiLFwibXNcIl07ZnVuY3Rpb24gVWEoYSxiKXtpZihiIGluIGEpcmV0dXJuIGI7dmFyIGM9Yi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStiLnNsaWNlKDEpLGQ9YixlPVRhLmxlbmd0aDt3aGlsZShlLS0paWYoYj1UYVtlXStjLGIgaW4gYSlyZXR1cm4gYjtyZXR1cm4gZH1mdW5jdGlvbiBWYShhLGIpe2Zvcih2YXIgYyxkLGUsZj1bXSxnPTAsaD1hLmxlbmd0aDtoPmc7ZysrKWQ9YVtnXSxkLnN0eWxlJiYoZltnXT1tLl9kYXRhKGQsXCJvbGRkaXNwbGF5XCIpLGM9ZC5zdHlsZS5kaXNwbGF5LGI/KGZbZ118fFwibm9uZVwiIT09Y3x8KGQuc3R5bGUuZGlzcGxheT1cIlwiKSxcIlwiPT09ZC5zdHlsZS5kaXNwbGF5JiZVKGQpJiYoZltnXT1tLl9kYXRhKGQsXCJvbGRkaXNwbGF5XCIsRmEoZC5ub2RlTmFtZSkpKSk6KGU9VShkKSwoYyYmXCJub25lXCIhPT1jfHwhZSkmJm0uX2RhdGEoZCxcIm9sZGRpc3BsYXlcIixlP2M6bS5jc3MoZCxcImRpc3BsYXlcIikpKSk7Zm9yKGc9MDtoPmc7ZysrKWQ9YVtnXSxkLnN0eWxlJiYoYiYmXCJub25lXCIhPT1kLnN0eWxlLmRpc3BsYXkmJlwiXCIhPT1kLnN0eWxlLmRpc3BsYXl8fChkLnN0eWxlLmRpc3BsYXk9Yj9mW2ddfHxcIlwiOlwibm9uZVwiKSk7cmV0dXJuIGF9ZnVuY3Rpb24gV2EoYSxiLGMpe3ZhciBkPVBhLmV4ZWMoYik7cmV0dXJuIGQ/TWF0aC5tYXgoMCxkWzFdLShjfHwwKSkrKGRbMl18fFwicHhcIik6Yn1mdW5jdGlvbiBYYShhLGIsYyxkLGUpe2Zvcih2YXIgZj1jPT09KGQ/XCJib3JkZXJcIjpcImNvbnRlbnRcIik/NDpcIndpZHRoXCI9PT1iPzE6MCxnPTA7ND5mO2YrPTIpXCJtYXJnaW5cIj09PWMmJihnKz1tLmNzcyhhLGMrVFtmXSwhMCxlKSksZD8oXCJjb250ZW50XCI9PT1jJiYoZy09bS5jc3MoYSxcInBhZGRpbmdcIitUW2ZdLCEwLGUpKSxcIm1hcmdpblwiIT09YyYmKGctPW0uY3NzKGEsXCJib3JkZXJcIitUW2ZdK1wiV2lkdGhcIiwhMCxlKSkpOihnKz1tLmNzcyhhLFwicGFkZGluZ1wiK1RbZl0sITAsZSksXCJwYWRkaW5nXCIhPT1jJiYoZys9bS5jc3MoYSxcImJvcmRlclwiK1RbZl0rXCJXaWR0aFwiLCEwLGUpKSk7cmV0dXJuIGd9ZnVuY3Rpb24gWWEoYSxiLGMpe3ZhciBkPSEwLGU9XCJ3aWR0aFwiPT09Yj9hLm9mZnNldFdpZHRoOmEub2Zmc2V0SGVpZ2h0LGY9SWEoYSksZz1rLmJveFNpemluZyYmXCJib3JkZXItYm94XCI9PT1tLmNzcyhhLFwiYm94U2l6aW5nXCIsITEsZik7aWYoMD49ZXx8bnVsbD09ZSl7aWYoZT1KYShhLGIsZiksKDA+ZXx8bnVsbD09ZSkmJihlPWEuc3R5bGVbYl0pLEhhLnRlc3QoZSkpcmV0dXJuIGU7ZD1nJiYoay5ib3hTaXppbmdSZWxpYWJsZSgpfHxlPT09YS5zdHlsZVtiXSksZT1wYXJzZUZsb2F0KGUpfHwwfXJldHVybiBlK1hhKGEsYixjfHwoZz9cImJvcmRlclwiOlwiY29udGVudFwiKSxkLGYpK1wicHhcIn1tLmV4dGVuZCh7Y3NzSG9va3M6e29wYWNpdHk6e2dldDpmdW5jdGlvbihhLGIpe2lmKGIpe3ZhciBjPUphKGEsXCJvcGFjaXR5XCIpO3JldHVyblwiXCI9PT1jP1wiMVwiOmN9fX19LGNzc051bWJlcjp7Y29sdW1uQ291bnQ6ITAsZmlsbE9wYWNpdHk6ITAsZmxleEdyb3c6ITAsZmxleFNocmluazohMCxmb250V2VpZ2h0OiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMH0sY3NzUHJvcHM6e1wiZmxvYXRcIjprLmNzc0Zsb2F0P1wiY3NzRmxvYXRcIjpcInN0eWxlRmxvYXRcIn0sc3R5bGU6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoYSYmMyE9PWEubm9kZVR5cGUmJjghPT1hLm5vZGVUeXBlJiZhLnN0eWxlKXt2YXIgZSxmLGcsaD1tLmNhbWVsQ2FzZShiKSxpPWEuc3R5bGU7aWYoYj1tLmNzc1Byb3BzW2hdfHwobS5jc3NQcm9wc1toXT1VYShpLGgpKSxnPW0uY3NzSG9va3NbYl18fG0uY3NzSG9va3NbaF0sdm9pZCAwPT09YylyZXR1cm4gZyYmXCJnZXRcImluIGcmJnZvaWQgMCE9PShlPWcuZ2V0KGEsITEsZCkpP2U6aVtiXTtpZihmPXR5cGVvZiBjLFwic3RyaW5nXCI9PT1mJiYoZT1RYS5leGVjKGMpKSYmKGM9KGVbMV0rMSkqZVsyXStwYXJzZUZsb2F0KG0uY3NzKGEsYikpLGY9XCJudW1iZXJcIiksbnVsbCE9YyYmYz09PWMmJihcIm51bWJlclwiIT09Znx8bS5jc3NOdW1iZXJbaF18fChjKz1cInB4XCIpLGsuY2xlYXJDbG9uZVN0eWxlfHxcIlwiIT09Y3x8MCE9PWIuaW5kZXhPZihcImJhY2tncm91bmRcIil8fChpW2JdPVwiaW5oZXJpdFwiKSwhKGcmJlwic2V0XCJpbiBnJiZ2b2lkIDA9PT0oYz1nLnNldChhLGMsZCkpKSkpdHJ5e2lbYl09Y31jYXRjaChqKXt9fX0sY3NzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlLGYsZyxoPW0uY2FtZWxDYXNlKGIpO3JldHVybiBiPW0uY3NzUHJvcHNbaF18fChtLmNzc1Byb3BzW2hdPVVhKGEuc3R5bGUsaCkpLGc9bS5jc3NIb29rc1tiXXx8bS5jc3NIb29rc1toXSxnJiZcImdldFwiaW4gZyYmKGY9Zy5nZXQoYSwhMCxjKSksdm9pZCAwPT09ZiYmKGY9SmEoYSxiLGQpKSxcIm5vcm1hbFwiPT09ZiYmYiBpbiBTYSYmKGY9U2FbYl0pLFwiXCI9PT1jfHxjPyhlPXBhcnNlRmxvYXQoZiksYz09PSEwfHxtLmlzTnVtZXJpYyhlKT9lfHwwOmYpOmZ9fSksbS5lYWNoKFtcImhlaWdodFwiLFwid2lkdGhcIl0sZnVuY3Rpb24oYSxiKXttLmNzc0hvb2tzW2JdPXtnZXQ6ZnVuY3Rpb24oYSxjLGQpe3JldHVybiBjP09hLnRlc3QobS5jc3MoYSxcImRpc3BsYXlcIikpJiYwPT09YS5vZmZzZXRXaWR0aD9tLnN3YXAoYSxSYSxmdW5jdGlvbigpe3JldHVybiBZYShhLGIsZCl9KTpZYShhLGIsZCk6dm9pZCAwfSxzZXQ6ZnVuY3Rpb24oYSxjLGQpe3ZhciBlPWQmJklhKGEpO3JldHVybiBXYShhLGMsZD9YYShhLGIsZCxrLmJveFNpemluZyYmXCJib3JkZXItYm94XCI9PT1tLmNzcyhhLFwiYm94U2l6aW5nXCIsITEsZSksZSk6MCl9fX0pLGsub3BhY2l0eXx8KG0uY3NzSG9va3Mub3BhY2l0eT17Z2V0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIE5hLnRlc3QoKGImJmEuY3VycmVudFN0eWxlP2EuY3VycmVudFN0eWxlLmZpbHRlcjphLnN0eWxlLmZpbHRlcil8fFwiXCIpPy4wMSpwYXJzZUZsb2F0KFJlZ0V4cC4kMSkrXCJcIjpiP1wiMVwiOlwiXCJ9LHNldDpmdW5jdGlvbihhLGIpe3ZhciBjPWEuc3R5bGUsZD1hLmN1cnJlbnRTdHlsZSxlPW0uaXNOdW1lcmljKGIpP1wiYWxwaGEob3BhY2l0eT1cIisxMDAqYitcIilcIjpcIlwiLGY9ZCYmZC5maWx0ZXJ8fGMuZmlsdGVyfHxcIlwiO2Muem9vbT0xLChiPj0xfHxcIlwiPT09YikmJlwiXCI9PT1tLnRyaW0oZi5yZXBsYWNlKE1hLFwiXCIpKSYmYy5yZW1vdmVBdHRyaWJ1dGUmJihjLnJlbW92ZUF0dHJpYnV0ZShcImZpbHRlclwiKSxcIlwiPT09Ynx8ZCYmIWQuZmlsdGVyKXx8KGMuZmlsdGVyPU1hLnRlc3QoZik/Zi5yZXBsYWNlKE1hLGUpOmYrXCIgXCIrZSl9fSksbS5jc3NIb29rcy5tYXJnaW5SaWdodD1MYShrLnJlbGlhYmxlTWFyZ2luUmlnaHQsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYj9tLnN3YXAoYSx7ZGlzcGxheTpcImlubGluZS1ibG9ja1wifSxKYSxbYSxcIm1hcmdpblJpZ2h0XCJdKTp2b2lkIDB9KSxtLmVhY2goe21hcmdpbjpcIlwiLHBhZGRpbmc6XCJcIixib3JkZXI6XCJXaWR0aFwifSxmdW5jdGlvbihhLGIpe20uY3NzSG9va3NbYStiXT17ZXhwYW5kOmZ1bmN0aW9uKGMpe2Zvcih2YXIgZD0wLGU9e30sZj1cInN0cmluZ1wiPT10eXBlb2YgYz9jLnNwbGl0KFwiIFwiKTpbY107ND5kO2QrKyllW2ErVFtkXStiXT1mW2RdfHxmW2QtMl18fGZbMF07cmV0dXJuIGV9fSxHYS50ZXN0KGEpfHwobS5jc3NIb29rc1thK2JdLnNldD1XYSl9KSxtLmZuLmV4dGVuZCh7Y3NzOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFYodGhpcyxmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmPXt9LGc9MDtpZihtLmlzQXJyYXkoYikpe2ZvcihkPUlhKGEpLGU9Yi5sZW5ndGg7ZT5nO2crKylmW2JbZ11dPW0uY3NzKGEsYltnXSwhMSxkKTtyZXR1cm4gZn1yZXR1cm4gdm9pZCAwIT09Yz9tLnN0eWxlKGEsYixjKTptLmNzcyhhLGIpfSxhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX0sc2hvdzpmdW5jdGlvbigpe3JldHVybiBWYSh0aGlzLCEwKX0saGlkZTpmdW5jdGlvbigpe3JldHVybiBWYSh0aGlzKX0sdG9nZ2xlOmZ1bmN0aW9uKGEpe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgYT9hP3RoaXMuc2hvdygpOnRoaXMuaGlkZSgpOnRoaXMuZWFjaChmdW5jdGlvbigpe1UodGhpcyk/bSh0aGlzKS5zaG93KCk6bSh0aGlzKS5oaWRlKCl9KX19KTtmdW5jdGlvbiBaYShhLGIsYyxkLGUpe1xucmV0dXJuIG5ldyBaYS5wcm90b3R5cGUuaW5pdChhLGIsYyxkLGUpfW0uVHdlZW49WmEsWmEucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpaYSxpbml0OmZ1bmN0aW9uKGEsYixjLGQsZSxmKXt0aGlzLmVsZW09YSx0aGlzLnByb3A9Yyx0aGlzLmVhc2luZz1lfHxcInN3aW5nXCIsdGhpcy5vcHRpb25zPWIsdGhpcy5zdGFydD10aGlzLm5vdz10aGlzLmN1cigpLHRoaXMuZW5kPWQsdGhpcy51bml0PWZ8fChtLmNzc051bWJlcltjXT9cIlwiOlwicHhcIil9LGN1cjpmdW5jdGlvbigpe3ZhciBhPVphLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiBhJiZhLmdldD9hLmdldCh0aGlzKTpaYS5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KHRoaXMpfSxydW46ZnVuY3Rpb24oYSl7dmFyIGIsYz1aYS5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gdGhpcy5vcHRpb25zLmR1cmF0aW9uP3RoaXMucG9zPWI9bS5lYXNpbmdbdGhpcy5lYXNpbmddKGEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKmEsMCwxLHRoaXMub3B0aW9ucy5kdXJhdGlvbik6dGhpcy5wb3M9Yj1hLHRoaXMubm93PSh0aGlzLmVuZC10aGlzLnN0YXJ0KSpiK3RoaXMuc3RhcnQsdGhpcy5vcHRpb25zLnN0ZXAmJnRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLHRoaXMubm93LHRoaXMpLGMmJmMuc2V0P2Muc2V0KHRoaXMpOlphLnByb3BIb29rcy5fZGVmYXVsdC5zZXQodGhpcyksdGhpc319LFphLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZT1aYS5wcm90b3R5cGUsWmEucHJvcEhvb2tzPXtfZGVmYXVsdDp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiO3JldHVybiBudWxsPT1hLmVsZW1bYS5wcm9wXXx8YS5lbGVtLnN0eWxlJiZudWxsIT1hLmVsZW0uc3R5bGVbYS5wcm9wXT8oYj1tLmNzcyhhLmVsZW0sYS5wcm9wLFwiXCIpLGImJlwiYXV0b1wiIT09Yj9iOjApOmEuZWxlbVthLnByb3BdfSxzZXQ6ZnVuY3Rpb24oYSl7bS5meC5zdGVwW2EucHJvcF0/bS5meC5zdGVwW2EucHJvcF0oYSk6YS5lbGVtLnN0eWxlJiYobnVsbCE9YS5lbGVtLnN0eWxlW20uY3NzUHJvcHNbYS5wcm9wXV18fG0uY3NzSG9va3NbYS5wcm9wXSk/bS5zdHlsZShhLmVsZW0sYS5wcm9wLGEubm93K2EudW5pdCk6YS5lbGVtW2EucHJvcF09YS5ub3d9fX0sWmEucHJvcEhvb2tzLnNjcm9sbFRvcD1aYS5wcm9wSG9va3Muc2Nyb2xsTGVmdD17c2V0OmZ1bmN0aW9uKGEpe2EuZWxlbS5ub2RlVHlwZSYmYS5lbGVtLnBhcmVudE5vZGUmJihhLmVsZW1bYS5wcm9wXT1hLm5vdyl9fSxtLmVhc2luZz17bGluZWFyOmZ1bmN0aW9uKGEpe3JldHVybiBhfSxzd2luZzpmdW5jdGlvbihhKXtyZXR1cm4uNS1NYXRoLmNvcyhhKk1hdGguUEkpLzJ9fSxtLmZ4PVphLnByb3RvdHlwZS5pbml0LG0uZnguc3RlcD17fTt2YXIgJGEsX2EsYWI9L14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLGJiPW5ldyBSZWdFeHAoXCJeKD86KFsrLV0pPXwpKFwiK1MrXCIpKFthLXolXSopJFwiLFwiaVwiKSxjYj0vcXVldWVIb29rcyQvLGRiPVtpYl0sZWI9e1wiKlwiOltmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuY3JlYXRlVHdlZW4oYSxiKSxkPWMuY3VyKCksZT1iYi5leGVjKGIpLGY9ZSYmZVszXXx8KG0uY3NzTnVtYmVyW2FdP1wiXCI6XCJweFwiKSxnPShtLmNzc051bWJlclthXXx8XCJweFwiIT09ZiYmK2QpJiZiYi5leGVjKG0uY3NzKGMuZWxlbSxhKSksaD0xLGk9MjA7aWYoZyYmZ1szXSE9PWYpe2Y9Znx8Z1szXSxlPWV8fFtdLGc9K2R8fDE7ZG8gaD1ofHxcIi41XCIsZy89aCxtLnN0eWxlKGMuZWxlbSxhLGcrZik7d2hpbGUoaCE9PShoPWMuY3VyKCkvZCkmJjEhPT1oJiYtLWkpfXJldHVybiBlJiYoZz1jLnN0YXJ0PStnfHwrZHx8MCxjLnVuaXQ9ZixjLmVuZD1lWzFdP2crKGVbMV0rMSkqZVsyXTorZVsyXSksY31dfTtmdW5jdGlvbiBmYigpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7JGE9dm9pZCAwfSksJGE9bS5ub3coKX1mdW5jdGlvbiBnYihhLGIpe3ZhciBjLGQ9e2hlaWdodDphfSxlPTA7Zm9yKGI9Yj8xOjA7ND5lO2UrPTItYiljPVRbZV0sZFtcIm1hcmdpblwiK2NdPWRbXCJwYWRkaW5nXCIrY109YTtyZXR1cm4gYiYmKGQub3BhY2l0eT1kLndpZHRoPWEpLGR9ZnVuY3Rpb24gaGIoYSxiLGMpe2Zvcih2YXIgZCxlPShlYltiXXx8W10pLmNvbmNhdChlYltcIipcIl0pLGY9MCxnPWUubGVuZ3RoO2c+ZjtmKyspaWYoZD1lW2ZdLmNhbGwoYyxiLGEpKXJldHVybiBkfWZ1bmN0aW9uIGliKGEsYixjKXt2YXIgZCxlLGYsZyxoLGksaixsLG49dGhpcyxvPXt9LHA9YS5zdHlsZSxxPWEubm9kZVR5cGUmJlUoYSkscj1tLl9kYXRhKGEsXCJmeHNob3dcIik7Yy5xdWV1ZXx8KGg9bS5fcXVldWVIb29rcyhhLFwiZnhcIiksbnVsbD09aC51bnF1ZXVlZCYmKGgudW5xdWV1ZWQ9MCxpPWguZW1wdHkuZmlyZSxoLmVtcHR5LmZpcmU9ZnVuY3Rpb24oKXtoLnVucXVldWVkfHxpKCl9KSxoLnVucXVldWVkKyssbi5hbHdheXMoZnVuY3Rpb24oKXtuLmFsd2F5cyhmdW5jdGlvbigpe2gudW5xdWV1ZWQtLSxtLnF1ZXVlKGEsXCJmeFwiKS5sZW5ndGh8fGguZW1wdHkuZmlyZSgpfSl9KSksMT09PWEubm9kZVR5cGUmJihcImhlaWdodFwiaW4gYnx8XCJ3aWR0aFwiaW4gYikmJihjLm92ZXJmbG93PVtwLm92ZXJmbG93LHAub3ZlcmZsb3dYLHAub3ZlcmZsb3dZXSxqPW0uY3NzKGEsXCJkaXNwbGF5XCIpLGw9XCJub25lXCI9PT1qP20uX2RhdGEoYSxcIm9sZGRpc3BsYXlcIil8fEZhKGEubm9kZU5hbWUpOmosXCJpbmxpbmVcIj09PWwmJlwibm9uZVwiPT09bS5jc3MoYSxcImZsb2F0XCIpJiYoay5pbmxpbmVCbG9ja05lZWRzTGF5b3V0JiZcImlubGluZVwiIT09RmEoYS5ub2RlTmFtZSk/cC56b29tPTE6cC5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCIpKSxjLm92ZXJmbG93JiYocC5vdmVyZmxvdz1cImhpZGRlblwiLGsuc2hyaW5rV3JhcEJsb2NrcygpfHxuLmFsd2F5cyhmdW5jdGlvbigpe3Aub3ZlcmZsb3c9Yy5vdmVyZmxvd1swXSxwLm92ZXJmbG93WD1jLm92ZXJmbG93WzFdLHAub3ZlcmZsb3dZPWMub3ZlcmZsb3dbMl19KSk7Zm9yKGQgaW4gYilpZihlPWJbZF0sYWIuZXhlYyhlKSl7aWYoZGVsZXRlIGJbZF0sZj1mfHxcInRvZ2dsZVwiPT09ZSxlPT09KHE/XCJoaWRlXCI6XCJzaG93XCIpKXtpZihcInNob3dcIiE9PWV8fCFyfHx2b2lkIDA9PT1yW2RdKWNvbnRpbnVlO3E9ITB9b1tkXT1yJiZyW2RdfHxtLnN0eWxlKGEsZCl9ZWxzZSBqPXZvaWQgMDtpZihtLmlzRW1wdHlPYmplY3QobykpXCJpbmxpbmVcIj09PShcIm5vbmVcIj09PWo/RmEoYS5ub2RlTmFtZSk6aikmJihwLmRpc3BsYXk9aik7ZWxzZXtyP1wiaGlkZGVuXCJpbiByJiYocT1yLmhpZGRlbik6cj1tLl9kYXRhKGEsXCJmeHNob3dcIix7fSksZiYmKHIuaGlkZGVuPSFxKSxxP20oYSkuc2hvdygpOm4uZG9uZShmdW5jdGlvbigpe20oYSkuaGlkZSgpfSksbi5kb25lKGZ1bmN0aW9uKCl7dmFyIGI7bS5fcmVtb3ZlRGF0YShhLFwiZnhzaG93XCIpO2ZvcihiIGluIG8pbS5zdHlsZShhLGIsb1tiXSl9KTtmb3IoZCBpbiBvKWc9aGIocT9yW2RdOjAsZCxuKSxkIGluIHJ8fChyW2RdPWcuc3RhcnQscSYmKGcuZW5kPWcuc3RhcnQsZy5zdGFydD1cIndpZHRoXCI9PT1kfHxcImhlaWdodFwiPT09ZD8xOjApKX19ZnVuY3Rpb24gamIoYSxiKXt2YXIgYyxkLGUsZixnO2ZvcihjIGluIGEpaWYoZD1tLmNhbWVsQ2FzZShjKSxlPWJbZF0sZj1hW2NdLG0uaXNBcnJheShmKSYmKGU9ZlsxXSxmPWFbY109ZlswXSksYyE9PWQmJihhW2RdPWYsZGVsZXRlIGFbY10pLGc9bS5jc3NIb29rc1tkXSxnJiZcImV4cGFuZFwiaW4gZyl7Zj1nLmV4cGFuZChmKSxkZWxldGUgYVtkXTtmb3IoYyBpbiBmKWMgaW4gYXx8KGFbY109ZltjXSxiW2NdPWUpfWVsc2UgYltkXT1lfWZ1bmN0aW9uIGtiKGEsYixjKXt2YXIgZCxlLGY9MCxnPWRiLmxlbmd0aCxoPW0uRGVmZXJyZWQoKS5hbHdheXMoZnVuY3Rpb24oKXtkZWxldGUgaS5lbGVtfSksaT1mdW5jdGlvbigpe2lmKGUpcmV0dXJuITE7Zm9yKHZhciBiPSRhfHxmYigpLGM9TWF0aC5tYXgoMCxqLnN0YXJ0VGltZStqLmR1cmF0aW9uLWIpLGQ9Yy9qLmR1cmF0aW9ufHwwLGY9MS1kLGc9MCxpPWoudHdlZW5zLmxlbmd0aDtpPmc7ZysrKWoudHdlZW5zW2ddLnJ1bihmKTtyZXR1cm4gaC5ub3RpZnlXaXRoKGEsW2osZixjXSksMT5mJiZpP2M6KGgucmVzb2x2ZVdpdGgoYSxbal0pLCExKX0saj1oLnByb21pc2Uoe2VsZW06YSxwcm9wczptLmV4dGVuZCh7fSxiKSxvcHRzOm0uZXh0ZW5kKCEwLHtzcGVjaWFsRWFzaW5nOnt9fSxjKSxvcmlnaW5hbFByb3BlcnRpZXM6YixvcmlnaW5hbE9wdGlvbnM6YyxzdGFydFRpbWU6JGF8fGZiKCksZHVyYXRpb246Yy5kdXJhdGlvbix0d2VlbnM6W10sY3JlYXRlVHdlZW46ZnVuY3Rpb24oYixjKXt2YXIgZD1tLlR3ZWVuKGEsai5vcHRzLGIsYyxqLm9wdHMuc3BlY2lhbEVhc2luZ1tiXXx8ai5vcHRzLmVhc2luZyk7cmV0dXJuIGoudHdlZW5zLnB1c2goZCksZH0sc3RvcDpmdW5jdGlvbihiKXt2YXIgYz0wLGQ9Yj9qLnR3ZWVucy5sZW5ndGg6MDtpZihlKXJldHVybiB0aGlzO2ZvcihlPSEwO2Q+YztjKyspai50d2VlbnNbY10ucnVuKDEpO3JldHVybiBiP2gucmVzb2x2ZVdpdGgoYSxbaixiXSk6aC5yZWplY3RXaXRoKGEsW2osYl0pLHRoaXN9fSksaz1qLnByb3BzO2ZvcihqYihrLGoub3B0cy5zcGVjaWFsRWFzaW5nKTtnPmY7ZisrKWlmKGQ9ZGJbZl0uY2FsbChqLGEsayxqLm9wdHMpKXJldHVybiBkO3JldHVybiBtLm1hcChrLGhiLGopLG0uaXNGdW5jdGlvbihqLm9wdHMuc3RhcnQpJiZqLm9wdHMuc3RhcnQuY2FsbChhLGopLG0uZngudGltZXIobS5leHRlbmQoaSx7ZWxlbTphLGFuaW06aixxdWV1ZTpqLm9wdHMucXVldWV9KSksai5wcm9ncmVzcyhqLm9wdHMucHJvZ3Jlc3MpLmRvbmUoai5vcHRzLmRvbmUsai5vcHRzLmNvbXBsZXRlKS5mYWlsKGoub3B0cy5mYWlsKS5hbHdheXMoai5vcHRzLmFsd2F5cyl9bS5BbmltYXRpb249bS5leHRlbmQoa2Ise3R3ZWVuZXI6ZnVuY3Rpb24oYSxiKXttLmlzRnVuY3Rpb24oYSk/KGI9YSxhPVtcIipcIl0pOmE9YS5zcGxpdChcIiBcIik7Zm9yKHZhciBjLGQ9MCxlPWEubGVuZ3RoO2U+ZDtkKyspYz1hW2RdLGViW2NdPWViW2NdfHxbXSxlYltjXS51bnNoaWZ0KGIpfSxwcmVmaWx0ZXI6ZnVuY3Rpb24oYSxiKXtiP2RiLnVuc2hpZnQoYSk6ZGIucHVzaChhKX19KSxtLnNwZWVkPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hJiZcIm9iamVjdFwiPT10eXBlb2YgYT9tLmV4dGVuZCh7fSxhKTp7Y29tcGxldGU6Y3x8IWMmJmJ8fG0uaXNGdW5jdGlvbihhKSYmYSxkdXJhdGlvbjphLGVhc2luZzpjJiZifHxiJiYhbS5pc0Z1bmN0aW9uKGIpJiZifTtyZXR1cm4gZC5kdXJhdGlvbj1tLmZ4Lm9mZj8wOlwibnVtYmVyXCI9PXR5cGVvZiBkLmR1cmF0aW9uP2QuZHVyYXRpb246ZC5kdXJhdGlvbiBpbiBtLmZ4LnNwZWVkcz9tLmZ4LnNwZWVkc1tkLmR1cmF0aW9uXTptLmZ4LnNwZWVkcy5fZGVmYXVsdCwobnVsbD09ZC5xdWV1ZXx8ZC5xdWV1ZT09PSEwKSYmKGQucXVldWU9XCJmeFwiKSxkLm9sZD1kLmNvbXBsZXRlLGQuY29tcGxldGU9ZnVuY3Rpb24oKXttLmlzRnVuY3Rpb24oZC5vbGQpJiZkLm9sZC5jYWxsKHRoaXMpLGQucXVldWUmJm0uZGVxdWV1ZSh0aGlzLGQucXVldWUpfSxkfSxtLmZuLmV4dGVuZCh7ZmFkZVRvOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLmZpbHRlcihVKS5jc3MoXCJvcGFjaXR5XCIsMCkuc2hvdygpLmVuZCgpLmFuaW1hdGUoe29wYWNpdHk6Yn0sYSxjLGQpfSxhbmltYXRlOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPW0uaXNFbXB0eU9iamVjdChhKSxmPW0uc3BlZWQoYixjLGQpLGc9ZnVuY3Rpb24oKXt2YXIgYj1rYih0aGlzLG0uZXh0ZW5kKHt9LGEpLGYpOyhlfHxtLl9kYXRhKHRoaXMsXCJmaW5pc2hcIikpJiZiLnN0b3AoITApfTtyZXR1cm4gZy5maW5pc2g9ZyxlfHxmLnF1ZXVlPT09ITE/dGhpcy5lYWNoKGcpOnRoaXMucXVldWUoZi5xdWV1ZSxnKX0sc3RvcDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5zdG9wO2RlbGV0ZSBhLnN0b3AsYihjKX07cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGEmJihjPWIsYj1hLGE9dm9pZCAwKSxiJiZhIT09ITEmJnRoaXMucXVldWUoYXx8XCJmeFwiLFtdKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYj0hMCxlPW51bGwhPWEmJmErXCJxdWV1ZUhvb2tzXCIsZj1tLnRpbWVycyxnPW0uX2RhdGEodGhpcyk7aWYoZSlnW2VdJiZnW2VdLnN0b3AmJmQoZ1tlXSk7ZWxzZSBmb3IoZSBpbiBnKWdbZV0mJmdbZV0uc3RvcCYmY2IudGVzdChlKSYmZChnW2VdKTtmb3IoZT1mLmxlbmd0aDtlLS07KWZbZV0uZWxlbSE9PXRoaXN8fG51bGwhPWEmJmZbZV0ucXVldWUhPT1hfHwoZltlXS5hbmltLnN0b3AoYyksYj0hMSxmLnNwbGljZShlLDEpKTsoYnx8IWMpJiZtLmRlcXVldWUodGhpcyxhKX0pfSxmaW5pc2g6ZnVuY3Rpb24oYSl7cmV0dXJuIGEhPT0hMSYmKGE9YXx8XCJmeFwiKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYixjPW0uX2RhdGEodGhpcyksZD1jW2ErXCJxdWV1ZVwiXSxlPWNbYStcInF1ZXVlSG9va3NcIl0sZj1tLnRpbWVycyxnPWQ/ZC5sZW5ndGg6MDtmb3IoYy5maW5pc2g9ITAsbS5xdWV1ZSh0aGlzLGEsW10pLGUmJmUuc3RvcCYmZS5zdG9wLmNhbGwodGhpcywhMCksYj1mLmxlbmd0aDtiLS07KWZbYl0uZWxlbT09PXRoaXMmJmZbYl0ucXVldWU9PT1hJiYoZltiXS5hbmltLnN0b3AoITApLGYuc3BsaWNlKGIsMSkpO2ZvcihiPTA7Zz5iO2IrKylkW2JdJiZkW2JdLmZpbmlzaCYmZFtiXS5maW5pc2guY2FsbCh0aGlzKTtkZWxldGUgYy5maW5pc2h9KX19KSxtLmVhY2goW1widG9nZ2xlXCIsXCJzaG93XCIsXCJoaWRlXCJdLGZ1bmN0aW9uKGEsYil7dmFyIGM9bS5mbltiXTttLmZuW2JdPWZ1bmN0aW9uKGEsZCxlKXtyZXR1cm4gbnVsbD09YXx8XCJib29sZWFuXCI9PXR5cGVvZiBhP2MuYXBwbHkodGhpcyxhcmd1bWVudHMpOnRoaXMuYW5pbWF0ZShnYihiLCEwKSxhLGQsZSl9fSksbS5lYWNoKHtzbGlkZURvd246Z2IoXCJzaG93XCIpLHNsaWRlVXA6Z2IoXCJoaWRlXCIpLHNsaWRlVG9nZ2xlOmdiKFwidG9nZ2xlXCIpLGZhZGVJbjp7b3BhY2l0eTpcInNob3dcIn0sZmFkZU91dDp7b3BhY2l0eTpcImhpZGVcIn0sZmFkZVRvZ2dsZTp7b3BhY2l0eTpcInRvZ2dsZVwifX0sZnVuY3Rpb24oYSxiKXttLmZuW2FdPWZ1bmN0aW9uKGEsYyxkKXtyZXR1cm4gdGhpcy5hbmltYXRlKGIsYSxjLGQpfX0pLG0udGltZXJzPVtdLG0uZngudGljaz1mdW5jdGlvbigpe3ZhciBhLGI9bS50aW1lcnMsYz0wO2ZvcigkYT1tLm5vdygpO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhKCl8fGJbY10hPT1hfHxiLnNwbGljZShjLS0sMSk7Yi5sZW5ndGh8fG0uZnguc3RvcCgpLCRhPXZvaWQgMH0sbS5meC50aW1lcj1mdW5jdGlvbihhKXttLnRpbWVycy5wdXNoKGEpLGEoKT9tLmZ4LnN0YXJ0KCk6bS50aW1lcnMucG9wKCl9LG0uZnguaW50ZXJ2YWw9MTMsbS5meC5zdGFydD1mdW5jdGlvbigpe19hfHwoX2E9c2V0SW50ZXJ2YWwobS5meC50aWNrLG0uZnguaW50ZXJ2YWwpKX0sbS5meC5zdG9wPWZ1bmN0aW9uKCl7Y2xlYXJJbnRlcnZhbChfYSksX2E9bnVsbH0sbS5meC5zcGVlZHM9e3Nsb3c6NjAwLGZhc3Q6MjAwLF9kZWZhdWx0OjQwMH0sbS5mbi5kZWxheT1mdW5jdGlvbihhLGIpe3JldHVybiBhPW0uZng/bS5meC5zcGVlZHNbYV18fGE6YSxiPWJ8fFwiZnhcIix0aGlzLnF1ZXVlKGIsZnVuY3Rpb24oYixjKXt2YXIgZD1zZXRUaW1lb3V0KGIsYSk7Yy5zdG9wPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KGQpfX0pfSxmdW5jdGlvbigpe3ZhciBhLGIsYyxkLGU7Yj15LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIixcInRcIiksYi5pbm5lckhUTUw9XCIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz5cIixkPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJhXCIpWzBdLGM9eS5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpLGU9Yy5hcHBlbmRDaGlsZCh5LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIikpLGE9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpWzBdLGQuc3R5bGUuY3NzVGV4dD1cInRvcDoxcHhcIixrLmdldFNldEF0dHJpYnV0ZT1cInRcIiE9PWIuY2xhc3NOYW1lLGsuc3R5bGU9L3RvcC8udGVzdChkLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpKSxrLmhyZWZOb3JtYWxpemVkPVwiL2FcIj09PWQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSxrLmNoZWNrT249ISFhLnZhbHVlLGsub3B0U2VsZWN0ZWQ9ZS5zZWxlY3RlZCxrLmVuY3R5cGU9ISF5LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLmVuY3R5cGUsYy5kaXNhYmxlZD0hMCxrLm9wdERpc2FibGVkPSFlLmRpc2FibGVkLGE9eS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIpLGsuaW5wdXQ9XCJcIj09PWEuZ2V0QXR0cmlidXRlKFwidmFsdWVcIiksYS52YWx1ZT1cInRcIixhLnNldEF0dHJpYnV0ZShcInR5cGVcIixcInJhZGlvXCIpLGsucmFkaW9WYWx1ZT1cInRcIj09PWEudmFsdWV9KCk7dmFyIGxiPS9cXHIvZzttLmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlPXRoaXNbMF07e2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQ9bS5pc0Z1bmN0aW9uKGEpLHRoaXMuZWFjaChmdW5jdGlvbihjKXt2YXIgZTsxPT09dGhpcy5ub2RlVHlwZSYmKGU9ZD9hLmNhbGwodGhpcyxjLG0odGhpcykudmFsKCkpOmEsbnVsbD09ZT9lPVwiXCI6XCJudW1iZXJcIj09dHlwZW9mIGU/ZSs9XCJcIjptLmlzQXJyYXkoZSkmJihlPW0ubWFwKGUsZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/XCJcIjphK1wiXCJ9KSksYj1tLnZhbEhvb2tzW3RoaXMudHlwZV18fG0udmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxiJiZcInNldFwiaW4gYiYmdm9pZCAwIT09Yi5zZXQodGhpcyxlLFwidmFsdWVcIil8fCh0aGlzLnZhbHVlPWUpKX0pO2lmKGUpcmV0dXJuIGI9bS52YWxIb29rc1tlLnR5cGVdfHxtLnZhbEhvb2tzW2Uubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sYiYmXCJnZXRcImluIGImJnZvaWQgMCE9PShjPWIuZ2V0KGUsXCJ2YWx1ZVwiKSk/YzooYz1lLnZhbHVlLFwic3RyaW5nXCI9PXR5cGVvZiBjP2MucmVwbGFjZShsYixcIlwiKTpudWxsPT1jP1wiXCI6Yyl9fX0pLG0uZXh0ZW5kKHt2YWxIb29rczp7b3B0aW9uOntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9bS5maW5kLmF0dHIoYSxcInZhbHVlXCIpO3JldHVybiBudWxsIT1iP2I6bS50cmltKG0udGV4dChhKSl9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihhKXtmb3IodmFyIGIsYyxkPWEub3B0aW9ucyxlPWEuc2VsZWN0ZWRJbmRleCxmPVwic2VsZWN0LW9uZVwiPT09YS50eXBlfHwwPmUsZz1mP251bGw6W10saD1mP2UrMTpkLmxlbmd0aCxpPTA+ZT9oOmY/ZTowO2g+aTtpKyspaWYoYz1kW2ldLCEoIWMuc2VsZWN0ZWQmJmkhPT1lfHwoay5vcHREaXNhYmxlZD9jLmRpc2FibGVkOm51bGwhPT1jLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpKXx8Yy5wYXJlbnROb2RlLmRpc2FibGVkJiZtLm5vZGVOYW1lKGMucGFyZW50Tm9kZSxcIm9wdGdyb3VwXCIpKSl7aWYoYj1tKGMpLnZhbCgpLGYpcmV0dXJuIGI7Zy5wdXNoKGIpfXJldHVybiBnfSxzZXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGU9YS5vcHRpb25zLGY9bS5tYWtlQXJyYXkoYiksZz1lLmxlbmd0aDt3aGlsZShnLS0paWYoZD1lW2ddLG0uaW5BcnJheShtLnZhbEhvb2tzLm9wdGlvbi5nZXQoZCksZik+PTApdHJ5e2Quc2VsZWN0ZWQ9Yz0hMH1jYXRjaChoKXtkLnNjcm9sbEhlaWdodH1lbHNlIGQuc2VsZWN0ZWQ9ITE7cmV0dXJuIGN8fChhLnNlbGVjdGVkSW5kZXg9LTEpLGV9fX19KSxtLmVhY2goW1wicmFkaW9cIixcImNoZWNrYm94XCJdLGZ1bmN0aW9uKCl7bS52YWxIb29rc1t0aGlzXT17c2V0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG0uaXNBcnJheShiKT9hLmNoZWNrZWQ9bS5pbkFycmF5KG0oYSkudmFsKCksYik+PTA6dm9pZCAwfX0say5jaGVja09ufHwobS52YWxIb29rc1t0aGlzXS5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PT1hLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpP1wib25cIjphLnZhbHVlfSl9KTt2YXIgbWIsbmIsb2I9bS5leHByLmF0dHJIYW5kbGUscGI9L14oPzpjaGVja2VkfHNlbGVjdGVkKSQvaSxxYj1rLmdldFNldEF0dHJpYnV0ZSxyYj1rLmlucHV0O20uZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFYodGhpcyxtLmF0dHIsYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe20ucmVtb3ZlQXR0cih0aGlzLGEpfSl9fSksbS5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1hLm5vZGVUeXBlO2lmKGEmJjMhPT1mJiY4IT09ZiYmMiE9PWYpcmV0dXJuIHR5cGVvZiBhLmdldEF0dHJpYnV0ZT09PUs/bS5wcm9wKGEsYixjKTooMT09PWYmJm0uaXNYTUxEb2MoYSl8fChiPWIudG9Mb3dlckNhc2UoKSxkPW0uYXR0ckhvb2tzW2JdfHwobS5leHByLm1hdGNoLmJvb2wudGVzdChiKT9uYjptYikpLHZvaWQgMD09PWM/ZCYmXCJnZXRcImluIGQmJm51bGwhPT0oZT1kLmdldChhLGIpKT9lOihlPW0uZmluZC5hdHRyKGEsYiksbnVsbD09ZT92b2lkIDA6ZSk6bnVsbCE9PWM/ZCYmXCJzZXRcImluIGQmJnZvaWQgMCE9PShlPWQuc2V0KGEsYyxiKSk/ZTooYS5zZXRBdHRyaWJ1dGUoYixjK1wiXCIpLGMpOnZvaWQgbS5yZW1vdmVBdHRyKGEsYikpfSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlPTAsZj1iJiZiLm1hdGNoKEUpO2lmKGYmJjE9PT1hLm5vZGVUeXBlKXdoaWxlKGM9ZltlKytdKWQ9bS5wcm9wRml4W2NdfHxjLG0uZXhwci5tYXRjaC5ib29sLnRlc3QoYyk/cmImJnFifHwhcGIudGVzdChjKT9hW2RdPSExOmFbbS5jYW1lbENhc2UoXCJkZWZhdWx0LVwiK2MpXT1hW2RdPSExOm0uYXR0cihhLGMsXCJcIiksYS5yZW1vdmVBdHRyaWJ1dGUocWI/YzpkKX0sYXR0ckhvb2tzOnt0eXBlOntzZXQ6ZnVuY3Rpb24oYSxiKXtpZighay5yYWRpb1ZhbHVlJiZcInJhZGlvXCI9PT1iJiZtLm5vZGVOYW1lKGEsXCJpbnB1dFwiKSl7dmFyIGM9YS52YWx1ZTtyZXR1cm4gYS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsYiksYyYmKGEudmFsdWU9YyksYn19fX19KSxuYj17c2V0OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYj09PSExP20ucmVtb3ZlQXR0cihhLGMpOnJiJiZxYnx8IXBiLnRlc3QoYyk/YS5zZXRBdHRyaWJ1dGUoIXFiJiZtLnByb3BGaXhbY118fGMsYyk6YVttLmNhbWVsQ2FzZShcImRlZmF1bHQtXCIrYyldPWFbY109ITAsY319LG0uZWFjaChtLmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goL1xcdysvZyksZnVuY3Rpb24oYSxiKXt2YXIgYz1vYltiXXx8bS5maW5kLmF0dHI7b2JbYl09cmImJnFifHwhcGIudGVzdChiKT9mdW5jdGlvbihhLGIsZCl7dmFyIGUsZjtyZXR1cm4gZHx8KGY9b2JbYl0sb2JbYl09ZSxlPW51bGwhPWMoYSxiLGQpP2IudG9Mb3dlckNhc2UoKTpudWxsLG9iW2JdPWYpLGV9OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYz92b2lkIDA6YVttLmNhbWVsQ2FzZShcImRlZmF1bHQtXCIrYildP2IudG9Mb3dlckNhc2UoKTpudWxsfX0pLHJiJiZxYnx8KG0uYXR0ckhvb2tzLnZhbHVlPXtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBtLm5vZGVOYW1lKGEsXCJpbnB1dFwiKT92b2lkKGEuZGVmYXVsdFZhbHVlPWIpOm1iJiZtYi5zZXQoYSxiLGMpfX0pLHFifHwobWI9e3NldDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9YS5nZXRBdHRyaWJ1dGVOb2RlKGMpO3JldHVybiBkfHxhLnNldEF0dHJpYnV0ZU5vZGUoZD1hLm93bmVyRG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKGMpKSxkLnZhbHVlPWIrPVwiXCIsXCJ2YWx1ZVwiPT09Y3x8Yj09PWEuZ2V0QXR0cmlidXRlKGMpP2I6dm9pZCAwfX0sb2IuaWQ9b2IubmFtZT1vYi5jb29yZHM9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkO3JldHVybiBjP3ZvaWQgMDooZD1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiZcIlwiIT09ZC52YWx1ZT9kLnZhbHVlOm51bGx9LG0udmFsSG9va3MuYnV0dG9uPXtnZXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmdldEF0dHJpYnV0ZU5vZGUoYik7cmV0dXJuIGMmJmMuc3BlY2lmaWVkP2MudmFsdWU6dm9pZCAwfSxzZXQ6bWIuc2V0fSxtLmF0dHJIb29rcy5jb250ZW50ZWRpdGFibGU9e3NldDpmdW5jdGlvbihhLGIsYyl7bWIuc2V0KGEsXCJcIj09PWI/ITE6YixjKX19LG0uZWFjaChbXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdLGZ1bmN0aW9uKGEsYil7bS5hdHRySG9va3NbYl09e3NldDpmdW5jdGlvbihhLGMpe3JldHVyblwiXCI9PT1jPyhhLnNldEF0dHJpYnV0ZShiLFwiYXV0b1wiKSxjKTp2b2lkIDB9fX0pKSxrLnN0eWxlfHwobS5hdHRySG9va3Muc3R5bGU9e2dldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5zdHlsZS5jc3NUZXh0fHx2b2lkIDB9LHNldDpmdW5jdGlvbihhLGIpe3JldHVybiBhLnN0eWxlLmNzc1RleHQ9YitcIlwifX0pO3ZhciBzYj0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0KSQvaSx0Yj0vXig/OmF8YXJlYSkkL2k7bS5mbi5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVih0aGlzLG0ucHJvcCxhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlUHJvcDpmdW5jdGlvbihhKXtyZXR1cm4gYT1tLnByb3BGaXhbYV18fGEsdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dHJ5e3RoaXNbYV09dm9pZCAwLGRlbGV0ZSB0aGlzW2FdfWNhdGNoKGIpe319KX19KSxtLmV4dGVuZCh7cHJvcEZpeDp7XCJmb3JcIjpcImh0bWxGb3JcIixcImNsYXNzXCI6XCJjbGFzc05hbWVcIn0scHJvcDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGc9YS5ub2RlVHlwZTtpZihhJiYzIT09ZyYmOCE9PWcmJjIhPT1nKXJldHVybiBmPTEhPT1nfHwhbS5pc1hNTERvYyhhKSxmJiYoYj1tLnByb3BGaXhbYl18fGIsZT1tLnByb3BIb29rc1tiXSksdm9pZCAwIT09Yz9lJiZcInNldFwiaW4gZSYmdm9pZCAwIT09KGQ9ZS5zZXQoYSxjLGIpKT9kOmFbYl09YzplJiZcImdldFwiaW4gZSYmbnVsbCE9PShkPWUuZ2V0KGEsYikpP2Q6YVtiXX0scHJvcEhvb2tzOnt0YWJJbmRleDp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiPW0uZmluZC5hdHRyKGEsXCJ0YWJpbmRleFwiKTtyZXR1cm4gYj9wYXJzZUludChiLDEwKTpzYi50ZXN0KGEubm9kZU5hbWUpfHx0Yi50ZXN0KGEubm9kZU5hbWUpJiZhLmhyZWY/MDotMX19fX0pLGsuaHJlZk5vcm1hbGl6ZWR8fG0uZWFjaChbXCJocmVmXCIsXCJzcmNcIl0sZnVuY3Rpb24oYSxiKXttLnByb3BIb29rc1tiXT17Z2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZShiLDQpfX19KSxrLm9wdFNlbGVjdGVkfHwobS5wcm9wSG9va3Muc2VsZWN0ZWQ9e2dldDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7cmV0dXJuIGImJihiLnNlbGVjdGVkSW5kZXgsYi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCksbnVsbH19KSxtLmVhY2goW1widGFiSW5kZXhcIixcInJlYWRPbmx5XCIsXCJtYXhMZW5ndGhcIixcImNlbGxTcGFjaW5nXCIsXCJjZWxsUGFkZGluZ1wiLFwicm93U3BhblwiLFwiY29sU3BhblwiLFwidXNlTWFwXCIsXCJmcmFtZUJvcmRlclwiLFwiY29udGVudEVkaXRhYmxlXCJdLGZ1bmN0aW9uKCl7bS5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV09dGhpc30pLGsuZW5jdHlwZXx8KG0ucHJvcEZpeC5lbmN0eXBlPVwiZW5jb2RpbmdcIik7dmFyIHViPS9bXFx0XFxyXFxuXFxmXS9nO20uZm4uZXh0ZW5kKHthZGRDbGFzczpmdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaD0wLGk9dGhpcy5sZW5ndGgsaj1cInN0cmluZ1wiPT10eXBlb2YgYSYmYTtpZihtLmlzRnVuY3Rpb24oYSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKXttKHRoaXMpLmFkZENsYXNzKGEuY2FsbCh0aGlzLGIsdGhpcy5jbGFzc05hbWUpKX0pO2lmKGopZm9yKGI9KGF8fFwiXCIpLm1hdGNoKEUpfHxbXTtpPmg7aCsrKWlmKGM9dGhpc1toXSxkPTE9PT1jLm5vZGVUeXBlJiYoYy5jbGFzc05hbWU/KFwiIFwiK2MuY2xhc3NOYW1lK1wiIFwiKS5yZXBsYWNlKHViLFwiIFwiKTpcIiBcIikpe2Y9MDt3aGlsZShlPWJbZisrXSlkLmluZGV4T2YoXCIgXCIrZStcIiBcIik8MCYmKGQrPWUrXCIgXCIpO2c9bS50cmltKGQpLGMuY2xhc3NOYW1lIT09ZyYmKGMuY2xhc3NOYW1lPWcpfXJldHVybiB0aGlzfSxyZW1vdmVDbGFzczpmdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaD0wLGk9dGhpcy5sZW5ndGgsaj0wPT09YXJndW1lbnRzLmxlbmd0aHx8XCJzdHJpbmdcIj09dHlwZW9mIGEmJmE7aWYobS5pc0Z1bmN0aW9uKGEpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYil7bSh0aGlzKS5yZW1vdmVDbGFzcyhhLmNhbGwodGhpcyxiLHRoaXMuY2xhc3NOYW1lKSl9KTtpZihqKWZvcihiPShhfHxcIlwiKS5tYXRjaChFKXx8W107aT5oO2grKylpZihjPXRoaXNbaF0sZD0xPT09Yy5ub2RlVHlwZSYmKGMuY2xhc3NOYW1lPyhcIiBcIitjLmNsYXNzTmFtZStcIiBcIikucmVwbGFjZSh1YixcIiBcIik6XCJcIikpe2Y9MDt3aGlsZShlPWJbZisrXSl3aGlsZShkLmluZGV4T2YoXCIgXCIrZStcIiBcIik+PTApZD1kLnJlcGxhY2UoXCIgXCIrZStcIiBcIixcIiBcIik7Zz1hP20udHJpbShkKTpcIlwiLGMuY2xhc3NOYW1lIT09ZyYmKGMuY2xhc3NOYW1lPWcpfXJldHVybiB0aGlzfSx0b2dnbGVDbGFzczpmdW5jdGlvbihhLGIpe3ZhciBjPXR5cGVvZiBhO3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgYiYmXCJzdHJpbmdcIj09PWM/Yj90aGlzLmFkZENsYXNzKGEpOnRoaXMucmVtb3ZlQ2xhc3MoYSk6dGhpcy5lYWNoKG0uaXNGdW5jdGlvbihhKT9mdW5jdGlvbihjKXttKHRoaXMpLnRvZ2dsZUNsYXNzKGEuY2FsbCh0aGlzLGMsdGhpcy5jbGFzc05hbWUsYiksYil9OmZ1bmN0aW9uKCl7aWYoXCJzdHJpbmdcIj09PWMpe3ZhciBiLGQ9MCxlPW0odGhpcyksZj1hLm1hdGNoKEUpfHxbXTt3aGlsZShiPWZbZCsrXSllLmhhc0NsYXNzKGIpP2UucmVtb3ZlQ2xhc3MoYik6ZS5hZGRDbGFzcyhiKX1lbHNlKGM9PT1LfHxcImJvb2xlYW5cIj09PWMpJiYodGhpcy5jbGFzc05hbWUmJm0uX2RhdGEodGhpcyxcIl9fY2xhc3NOYW1lX19cIix0aGlzLmNsYXNzTmFtZSksdGhpcy5jbGFzc05hbWU9dGhpcy5jbGFzc05hbWV8fGE9PT0hMT9cIlwiOm0uX2RhdGEodGhpcyxcIl9fY2xhc3NOYW1lX19cIil8fFwiXCIpfSl9LGhhc0NsYXNzOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1cIiBcIithK1wiIFwiLGM9MCxkPXRoaXMubGVuZ3RoO2Q+YztjKyspaWYoMT09PXRoaXNbY10ubm9kZVR5cGUmJihcIiBcIit0aGlzW2NdLmNsYXNzTmFtZStcIiBcIikucmVwbGFjZSh1YixcIiBcIikuaW5kZXhPZihiKT49MClyZXR1cm4hMDtyZXR1cm4hMX19KSxtLmVhY2goXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEsYil7bS5mbltiXT1mdW5jdGlvbihhLGMpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjA/dGhpcy5vbihiLG51bGwsYSxjKTp0aGlzLnRyaWdnZXIoYil9fSksbS5mbi5leHRlbmQoe2hvdmVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMubW91c2VlbnRlcihhKS5tb3VzZWxlYXZlKGJ8fGEpfSxiaW5kOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdGhpcy5vbihhLG51bGwsYixjKX0sdW5iaW5kOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMub2ZmKGEsbnVsbCxiKX0sZGVsZWdhdGU6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMub24oYixhLGMsZCl9LHVuZGVsZWdhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLm9mZihhLFwiKipcIik6dGhpcy5vZmYoYixhfHxcIioqXCIsYyl9fSk7dmFyIHZiPW0ubm93KCksd2I9L1xcPy8seGI9LygsKXwoXFxbfHspfCh9fF0pfFwiKD86W15cIlxcXFxcXHJcXG5dfFxcXFxbXCJcXFxcXFwvYmZucnRdfFxcXFx1W1xcZGEtZkEtRl17NH0pKlwiXFxzKjo/fHRydWV8ZmFsc2V8bnVsbHwtPyg/ITBcXGQpXFxkKyg/OlxcLlxcZCt8KSg/OltlRV1bKy1dP1xcZCt8KS9nO20ucGFyc2VKU09OPWZ1bmN0aW9uKGIpe2lmKGEuSlNPTiYmYS5KU09OLnBhcnNlKXJldHVybiBhLkpTT04ucGFyc2UoYitcIlwiKTt2YXIgYyxkPW51bGwsZT1tLnRyaW0oYitcIlwiKTtyZXR1cm4gZSYmIW0udHJpbShlLnJlcGxhY2UoeGIsZnVuY3Rpb24oYSxiLGUsZil7cmV0dXJuIGMmJmImJihkPTApLDA9PT1kP2E6KGM9ZXx8YixkKz0hZi0hZSxcIlwiKX0pKT9GdW5jdGlvbihcInJldHVybiBcIitlKSgpOm0uZXJyb3IoXCJJbnZhbGlkIEpTT046IFwiK2IpfSxtLnBhcnNlWE1MPWZ1bmN0aW9uKGIpe3ZhciBjLGQ7aWYoIWJ8fFwic3RyaW5nXCIhPXR5cGVvZiBiKXJldHVybiBudWxsO3RyeXthLkRPTVBhcnNlcj8oZD1uZXcgRE9NUGFyc2VyLGM9ZC5wYXJzZUZyb21TdHJpbmcoYixcInRleHQveG1sXCIpKTooYz1uZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxET01cIiksYy5hc3luYz1cImZhbHNlXCIsYy5sb2FkWE1MKGIpKX1jYXRjaChlKXtjPXZvaWQgMH1yZXR1cm4gYyYmYy5kb2N1bWVudEVsZW1lbnQmJiFjLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIikubGVuZ3RofHxtLmVycm9yKFwiSW52YWxpZCBYTUw6IFwiK2IpLGN9O3ZhciB5Yix6YixBYj0vIy4qJC8sQmI9LyhbPyZdKV89W14mXSovLENiPS9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKVxccj8kL2dtLERiPS9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLEViPS9eKD86R0VUfEhFQUQpJC8sRmI9L15cXC9cXC8vLEdiPS9eKFtcXHcuKy1dKzopKD86XFwvXFwvKD86W15cXC8/I10qQHwpKFteXFwvPyM6XSopKD86OihcXGQrKXwpfCkvLEhiPXt9LEliPXt9LEpiPVwiKi9cIi5jb25jYXQoXCIqXCIpO3RyeXt6Yj1sb2NhdGlvbi5ocmVmfWNhdGNoKEtiKXt6Yj15LmNyZWF0ZUVsZW1lbnQoXCJhXCIpLHpiLmhyZWY9XCJcIix6Yj16Yi5ocmVmfXliPUdiLmV4ZWMoemIudG9Mb3dlckNhc2UoKSl8fFtdO2Z1bmN0aW9uIExiKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe1wic3RyaW5nXCIhPXR5cGVvZiBiJiYoYz1iLGI9XCIqXCIpO3ZhciBkLGU9MCxmPWIudG9Mb3dlckNhc2UoKS5tYXRjaChFKXx8W107aWYobS5pc0Z1bmN0aW9uKGMpKXdoaWxlKGQ9ZltlKytdKVwiK1wiPT09ZC5jaGFyQXQoMCk/KGQ9ZC5zbGljZSgxKXx8XCIqXCIsKGFbZF09YVtkXXx8W10pLnVuc2hpZnQoYykpOihhW2RdPWFbZF18fFtdKS5wdXNoKGMpfX1mdW5jdGlvbiBNYihhLGIsYyxkKXt2YXIgZT17fSxmPWE9PT1JYjtmdW5jdGlvbiBnKGgpe3ZhciBpO3JldHVybiBlW2hdPSEwLG0uZWFjaChhW2hdfHxbXSxmdW5jdGlvbihhLGgpe3ZhciBqPWgoYixjLGQpO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBqfHxmfHxlW2pdP2Y/IShpPWopOnZvaWQgMDooYi5kYXRhVHlwZXMudW5zaGlmdChqKSxnKGopLCExKX0pLGl9cmV0dXJuIGcoYi5kYXRhVHlwZXNbMF0pfHwhZVtcIipcIl0mJmcoXCIqXCIpfWZ1bmN0aW9uIE5iKGEsYil7dmFyIGMsZCxlPW0uYWpheFNldHRpbmdzLmZsYXRPcHRpb25zfHx7fTtmb3IoZCBpbiBiKXZvaWQgMCE9PWJbZF0mJigoZVtkXT9hOmN8fChjPXt9KSlbZF09YltkXSk7cmV0dXJuIGMmJm0uZXh0ZW5kKCEwLGEsYyksYX1mdW5jdGlvbiBPYihhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLmNvbnRlbnRzLGk9YS5kYXRhVHlwZXM7d2hpbGUoXCIqXCI9PT1pWzBdKWkuc2hpZnQoKSx2b2lkIDA9PT1lJiYoZT1hLm1pbWVUeXBlfHxiLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpKTtpZihlKWZvcihnIGluIGgpaWYoaFtnXSYmaFtnXS50ZXN0KGUpKXtpLnVuc2hpZnQoZyk7YnJlYWt9aWYoaVswXWluIGMpZj1pWzBdO2Vsc2V7Zm9yKGcgaW4gYyl7aWYoIWlbMF18fGEuY29udmVydGVyc1tnK1wiIFwiK2lbMF1dKXtmPWc7YnJlYWt9ZHx8KGQ9Zyl9Zj1mfHxkfXJldHVybiBmPyhmIT09aVswXSYmaS51bnNoaWZ0KGYpLGNbZl0pOnZvaWQgMH1mdW5jdGlvbiBQYihhLGIsYyxkKXt2YXIgZSxmLGcsaCxpLGo9e30saz1hLmRhdGFUeXBlcy5zbGljZSgpO2lmKGtbMV0pZm9yKGcgaW4gYS5jb252ZXJ0ZXJzKWpbZy50b0xvd2VyQ2FzZSgpXT1hLmNvbnZlcnRlcnNbZ107Zj1rLnNoaWZ0KCk7d2hpbGUoZilpZihhLnJlc3BvbnNlRmllbGRzW2ZdJiYoY1thLnJlc3BvbnNlRmllbGRzW2ZdXT1iKSwhaSYmZCYmYS5kYXRhRmlsdGVyJiYoYj1hLmRhdGFGaWx0ZXIoYixhLmRhdGFUeXBlKSksaT1mLGY9ay5zaGlmdCgpKWlmKFwiKlwiPT09ZilmPWk7ZWxzZSBpZihcIipcIiE9PWkmJmkhPT1mKXtpZihnPWpbaStcIiBcIitmXXx8altcIiogXCIrZl0sIWcpZm9yKGUgaW4gailpZihoPWUuc3BsaXQoXCIgXCIpLGhbMV09PT1mJiYoZz1qW2krXCIgXCIraFswXV18fGpbXCIqIFwiK2hbMF1dKSl7Zz09PSEwP2c9altlXTpqW2VdIT09ITAmJihmPWhbMF0say51bnNoaWZ0KGhbMV0pKTticmVha31pZihnIT09ITApaWYoZyYmYVtcInRocm93c1wiXSliPWcoYik7ZWxzZSB0cnl7Yj1nKGIpfWNhdGNoKGwpe3JldHVybntzdGF0ZTpcInBhcnNlcmVycm9yXCIsZXJyb3I6Zz9sOlwiTm8gY29udmVyc2lvbiBmcm9tIFwiK2krXCIgdG8gXCIrZn19fXJldHVybntzdGF0ZTpcInN1Y2Nlc3NcIixkYXRhOmJ9fW0uZXh0ZW5kKHthY3RpdmU6MCxsYXN0TW9kaWZpZWQ6e30sZXRhZzp7fSxhamF4U2V0dGluZ3M6e3VybDp6Yix0eXBlOlwiR0VUXCIsaXNMb2NhbDpEYi50ZXN0KHliWzFdKSxnbG9iYWw6ITAscHJvY2Vzc0RhdGE6ITAsYXN5bmM6ITAsY29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixhY2NlcHRzOntcIipcIjpKYix0ZXh0OlwidGV4dC9wbGFpblwiLGh0bWw6XCJ0ZXh0L2h0bWxcIix4bWw6XCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsanNvbjpcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwifSxjb250ZW50czp7eG1sOi94bWwvLGh0bWw6L2h0bWwvLGpzb246L2pzb24vfSxyZXNwb25zZUZpZWxkczp7eG1sOlwicmVzcG9uc2VYTUxcIix0ZXh0OlwicmVzcG9uc2VUZXh0XCIsanNvbjpcInJlc3BvbnNlSlNPTlwifSxjb252ZXJ0ZXJzOntcIiogdGV4dFwiOlN0cmluZyxcInRleHQgaHRtbFwiOiEwLFwidGV4dCBqc29uXCI6bS5wYXJzZUpTT04sXCJ0ZXh0IHhtbFwiOm0ucGFyc2VYTUx9LGZsYXRPcHRpb25zOnt1cmw6ITAsY29udGV4dDohMH19LGFqYXhTZXR1cDpmdW5jdGlvbihhLGIpe3JldHVybiBiP05iKE5iKGEsbS5hamF4U2V0dGluZ3MpLGIpOk5iKG0uYWpheFNldHRpbmdzLGEpfSxhamF4UHJlZmlsdGVyOkxiKEhiKSxhamF4VHJhbnNwb3J0OkxiKEliKSxhamF4OmZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIj09dHlwZW9mIGEmJihiPWEsYT12b2lkIDApLGI9Ynx8e307dmFyIGMsZCxlLGYsZyxoLGksaixrPW0uYWpheFNldHVwKHt9LGIpLGw9ay5jb250ZXh0fHxrLG49ay5jb250ZXh0JiYobC5ub2RlVHlwZXx8bC5qcXVlcnkpP20obCk6bS5ldmVudCxvPW0uRGVmZXJyZWQoKSxwPW0uQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikscT1rLnN0YXR1c0NvZGV8fHt9LHI9e30scz17fSx0PTAsdT1cImNhbmNlbGVkXCIsdj17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGEpe3ZhciBiO2lmKDI9PT10KXtpZighail7aj17fTt3aGlsZShiPUNiLmV4ZWMoZikpaltiWzFdLnRvTG93ZXJDYXNlKCldPWJbMl19Yj1qW2EudG9Mb3dlckNhc2UoKV19cmV0dXJuIG51bGw9PWI/bnVsbDpifSxnZXRBbGxSZXNwb25zZUhlYWRlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gMj09PXQ/ZjpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50b0xvd2VyQ2FzZSgpO3JldHVybiB0fHwoYT1zW2NdPXNbY118fGEsclthXT1iKSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGEpe3JldHVybiB0fHwoay5taW1lVHlwZT1hKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGEpe3ZhciBiO2lmKGEpaWYoMj50KWZvcihiIGluIGEpcVtiXT1bcVtiXSxhW2JdXTtlbHNlIHYuYWx3YXlzKGFbdi5zdGF0dXNdKTtyZXR1cm4gdGhpc30sYWJvcnQ6ZnVuY3Rpb24oYSl7dmFyIGI9YXx8dTtyZXR1cm4gaSYmaS5hYm9ydChiKSx4KDAsYiksdGhpc319O2lmKG8ucHJvbWlzZSh2KS5jb21wbGV0ZT1wLmFkZCx2LnN1Y2Nlc3M9di5kb25lLHYuZXJyb3I9di5mYWlsLGsudXJsPSgoYXx8ay51cmx8fHpiKStcIlwiKS5yZXBsYWNlKEFiLFwiXCIpLnJlcGxhY2UoRmIseWJbMV0rXCIvL1wiKSxrLnR5cGU9Yi5tZXRob2R8fGIudHlwZXx8ay5tZXRob2R8fGsudHlwZSxrLmRhdGFUeXBlcz1tLnRyaW0oay5kYXRhVHlwZXx8XCIqXCIpLnRvTG93ZXJDYXNlKCkubWF0Y2goRSl8fFtcIlwiXSxudWxsPT1rLmNyb3NzRG9tYWluJiYoYz1HYi5leGVjKGsudXJsLnRvTG93ZXJDYXNlKCkpLGsuY3Jvc3NEb21haW49ISghY3x8Y1sxXT09PXliWzFdJiZjWzJdPT09eWJbMl0mJihjWzNdfHwoXCJodHRwOlwiPT09Y1sxXT9cIjgwXCI6XCI0NDNcIikpPT09KHliWzNdfHwoXCJodHRwOlwiPT09eWJbMV0/XCI4MFwiOlwiNDQzXCIpKSkpLGsuZGF0YSYmay5wcm9jZXNzRGF0YSYmXCJzdHJpbmdcIiE9dHlwZW9mIGsuZGF0YSYmKGsuZGF0YT1tLnBhcmFtKGsuZGF0YSxrLnRyYWRpdGlvbmFsKSksTWIoSGIsayxiLHYpLDI9PT10KXJldHVybiB2O2g9bS5ldmVudCYmay5nbG9iYWwsaCYmMD09PW0uYWN0aXZlKysmJm0uZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKSxrLnR5cGU9ay50eXBlLnRvVXBwZXJDYXNlKCksay5oYXNDb250ZW50PSFFYi50ZXN0KGsudHlwZSksZT1rLnVybCxrLmhhc0NvbnRlbnR8fChrLmRhdGEmJihlPWsudXJsKz0od2IudGVzdChlKT9cIiZcIjpcIj9cIikray5kYXRhLGRlbGV0ZSBrLmRhdGEpLGsuY2FjaGU9PT0hMSYmKGsudXJsPUJiLnRlc3QoZSk/ZS5yZXBsYWNlKEJiLFwiJDFfPVwiK3ZiKyspOmUrKHdiLnRlc3QoZSk/XCImXCI6XCI/XCIpK1wiXz1cIit2YisrKSksay5pZk1vZGlmaWVkJiYobS5sYXN0TW9kaWZpZWRbZV0mJnYuc2V0UmVxdWVzdEhlYWRlcihcIklmLU1vZGlmaWVkLVNpbmNlXCIsbS5sYXN0TW9kaWZpZWRbZV0pLG0uZXRhZ1tlXSYmdi5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLG0uZXRhZ1tlXSkpLChrLmRhdGEmJmsuaGFzQ29udGVudCYmay5jb250ZW50VHlwZSE9PSExfHxiLmNvbnRlbnRUeXBlKSYmdi5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsay5jb250ZW50VHlwZSksdi5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsay5kYXRhVHlwZXNbMF0mJmsuYWNjZXB0c1trLmRhdGFUeXBlc1swXV0/ay5hY2NlcHRzW2suZGF0YVR5cGVzWzBdXSsoXCIqXCIhPT1rLmRhdGFUeXBlc1swXT9cIiwgXCIrSmIrXCI7IHE9MC4wMVwiOlwiXCIpOmsuYWNjZXB0c1tcIipcIl0pO2ZvcihkIGluIGsuaGVhZGVycyl2LnNldFJlcXVlc3RIZWFkZXIoZCxrLmhlYWRlcnNbZF0pO2lmKGsuYmVmb3JlU2VuZCYmKGsuYmVmb3JlU2VuZC5jYWxsKGwsdixrKT09PSExfHwyPT09dCkpcmV0dXJuIHYuYWJvcnQoKTt1PVwiYWJvcnRcIjtmb3IoZCBpbntzdWNjZXNzOjEsZXJyb3I6MSxjb21wbGV0ZToxfSl2W2RdKGtbZF0pO2lmKGk9TWIoSWIsayxiLHYpKXt2LnJlYWR5U3RhdGU9MSxoJiZuLnRyaWdnZXIoXCJhamF4U2VuZFwiLFt2LGtdKSxrLmFzeW5jJiZrLnRpbWVvdXQ+MCYmKGc9c2V0VGltZW91dChmdW5jdGlvbigpe3YuYWJvcnQoXCJ0aW1lb3V0XCIpfSxrLnRpbWVvdXQpKTt0cnl7dD0xLGkuc2VuZChyLHgpfWNhdGNoKHcpe2lmKCEoMj50KSl0aHJvdyB3O3goLTEsdyl9fWVsc2UgeCgtMSxcIk5vIFRyYW5zcG9ydFwiKTtmdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBqLHIscyx1LHcseD1iOzIhPT10JiYodD0yLGcmJmNsZWFyVGltZW91dChnKSxpPXZvaWQgMCxmPWR8fFwiXCIsdi5yZWFkeVN0YXRlPWE+MD80OjAsaj1hPj0yMDAmJjMwMD5hfHwzMDQ9PT1hLGMmJih1PU9iKGssdixjKSksdT1QYihrLHUsdixqKSxqPyhrLmlmTW9kaWZpZWQmJih3PXYuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpLHcmJihtLmxhc3RNb2RpZmllZFtlXT13KSx3PXYuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpLHcmJihtLmV0YWdbZV09dykpLDIwND09PWF8fFwiSEVBRFwiPT09ay50eXBlP3g9XCJub2NvbnRlbnRcIjozMDQ9PT1hP3g9XCJub3Rtb2RpZmllZFwiOih4PXUuc3RhdGUscj11LmRhdGEscz11LmVycm9yLGo9IXMpKToocz14LChhfHwheCkmJih4PVwiZXJyb3JcIiwwPmEmJihhPTApKSksdi5zdGF0dXM9YSx2LnN0YXR1c1RleHQ9KGJ8fHgpK1wiXCIsaj9vLnJlc29sdmVXaXRoKGwsW3IseCx2XSk6by5yZWplY3RXaXRoKGwsW3YseCxzXSksdi5zdGF0dXNDb2RlKHEpLHE9dm9pZCAwLGgmJm4udHJpZ2dlcihqP1wiYWpheFN1Y2Nlc3NcIjpcImFqYXhFcnJvclwiLFt2LGssaj9yOnNdKSxwLmZpcmVXaXRoKGwsW3YseF0pLGgmJihuLnRyaWdnZXIoXCJhamF4Q29tcGxldGVcIixbdixrXSksLS1tLmFjdGl2ZXx8bS5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIikpKX1yZXR1cm4gdn0sZ2V0SlNPTjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG0uZ2V0KGEsYixjLFwianNvblwiKX0sZ2V0U2NyaXB0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG0uZ2V0KGEsdm9pZCAwLGIsXCJzY3JpcHRcIil9fSksbS5lYWNoKFtcImdldFwiLFwicG9zdFwiXSxmdW5jdGlvbihhLGIpe21bYl09ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIG0uaXNGdW5jdGlvbihjKSYmKGU9ZXx8ZCxkPWMsYz12b2lkIDApLG0uYWpheCh7dXJsOmEsdHlwZTpiLGRhdGFUeXBlOmUsZGF0YTpjLHN1Y2Nlc3M6ZH0pfX0pLG0uX2V2YWxVcmw9ZnVuY3Rpb24oYSl7cmV0dXJuIG0uYWpheCh7dXJsOmEsdHlwZTpcIkdFVFwiLGRhdGFUeXBlOlwic2NyaXB0XCIsYXN5bmM6ITEsZ2xvYmFsOiExLFwidGhyb3dzXCI6ITB9KX0sbS5mbi5leHRlbmQoe3dyYXBBbGw6ZnVuY3Rpb24oYSl7aWYobS5pc0Z1bmN0aW9uKGEpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYil7bSh0aGlzKS53cmFwQWxsKGEuY2FsbCh0aGlzLGIpKX0pO2lmKHRoaXNbMF0pe3ZhciBiPW0oYSx0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKCEwKTt0aGlzWzBdLnBhcmVudE5vZGUmJmIuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLGIubWFwKGZ1bmN0aW9uKCl7dmFyIGE9dGhpczt3aGlsZShhLmZpcnN0Q2hpbGQmJjE9PT1hLmZpcnN0Q2hpbGQubm9kZVR5cGUpYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9KS5hcHBlbmQodGhpcyl9cmV0dXJuIHRoaXN9LHdyYXBJbm5lcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKG0uaXNGdW5jdGlvbihhKT9mdW5jdGlvbihiKXttKHRoaXMpLndyYXBJbm5lcihhLmNhbGwodGhpcyxiKSl9OmZ1bmN0aW9uKCl7dmFyIGI9bSh0aGlzKSxjPWIuY29udGVudHMoKTtjLmxlbmd0aD9jLndyYXBBbGwoYSk6Yi5hcHBlbmQoYSl9KX0sd3JhcDpmdW5jdGlvbihhKXt2YXIgYj1tLmlzRnVuY3Rpb24oYSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihjKXttKHRoaXMpLndyYXBBbGwoYj9hLmNhbGwodGhpcyxjKTphKX0pfSx1bndyYXA6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCl7bS5ub2RlTmFtZSh0aGlzLFwiYm9keVwiKXx8bSh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSkuZW5kKCl9fSksbS5leHByLmZpbHRlcnMuaGlkZGVuPWZ1bmN0aW9uKGEpe3JldHVybiBhLm9mZnNldFdpZHRoPD0wJiZhLm9mZnNldEhlaWdodDw9MHx8IWsucmVsaWFibGVIaWRkZW5PZmZzZXRzKCkmJlwibm9uZVwiPT09KGEuc3R5bGUmJmEuc3R5bGUuZGlzcGxheXx8bS5jc3MoYSxcImRpc3BsYXlcIikpfSxtLmV4cHIuZmlsdGVycy52aXNpYmxlPWZ1bmN0aW9uKGEpe3JldHVybiFtLmV4cHIuZmlsdGVycy5oaWRkZW4oYSl9O3ZhciBRYj0vJTIwL2csUmI9L1xcW1xcXSQvLFNiPS9cXHI/XFxuL2csVGI9L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFViPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtmdW5jdGlvbiBWYihhLGIsYyxkKXt2YXIgZTtpZihtLmlzQXJyYXkoYikpbS5lYWNoKGIsZnVuY3Rpb24oYixlKXtjfHxSYi50ZXN0KGEpP2QoYSxlKTpWYihhK1wiW1wiKyhcIm9iamVjdFwiPT10eXBlb2YgZT9iOlwiXCIpK1wiXVwiLGUsYyxkKX0pO2Vsc2UgaWYoY3x8XCJvYmplY3RcIiE9PW0udHlwZShiKSlkKGEsYik7ZWxzZSBmb3IoZSBpbiBiKVZiKGErXCJbXCIrZStcIl1cIixiW2VdLGMsZCl9bS5wYXJhbT1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT1mdW5jdGlvbihhLGIpe2I9bS5pc0Z1bmN0aW9uKGIpP2IoKTpudWxsPT1iP1wiXCI6YixkW2QubGVuZ3RoXT1lbmNvZGVVUklDb21wb25lbnQoYSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGIpfTtpZih2b2lkIDA9PT1iJiYoYj1tLmFqYXhTZXR0aW5ncyYmbS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWwpLG0uaXNBcnJheShhKXx8YS5qcXVlcnkmJiFtLmlzUGxhaW5PYmplY3QoYSkpbS5lYWNoKGEsZnVuY3Rpb24oKXtlKHRoaXMubmFtZSx0aGlzLnZhbHVlKX0pO2Vsc2UgZm9yKGMgaW4gYSlWYihjLGFbY10sYixlKTtyZXR1cm4gZC5qb2luKFwiJlwiKS5yZXBsYWNlKFFiLFwiK1wiKX0sbS5mbi5leHRlbmQoe3NlcmlhbGl6ZTpmdW5jdGlvbigpe3JldHVybiBtLnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSl9LHNlcmlhbGl6ZUFycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGE9bS5wcm9wKHRoaXMsXCJlbGVtZW50c1wiKTtyZXR1cm4gYT9tLm1ha2VBcnJheShhKTp0aGlzfSkuZmlsdGVyKGZ1bmN0aW9uKCl7dmFyIGE9dGhpcy50eXBlO3JldHVybiB0aGlzLm5hbWUmJiFtKHRoaXMpLmlzKFwiOmRpc2FibGVkXCIpJiZVYi50ZXN0KHRoaXMubm9kZU5hbWUpJiYhVGIudGVzdChhKSYmKHRoaXMuY2hlY2tlZHx8IVcudGVzdChhKSl9KS5tYXAoZnVuY3Rpb24oYSxiKXt2YXIgYz1tKHRoaXMpLnZhbCgpO3JldHVybiBudWxsPT1jP251bGw6bS5pc0FycmF5KGMpP20ubWFwKGMsZnVuY3Rpb24oYSl7cmV0dXJue25hbWU6Yi5uYW1lLHZhbHVlOmEucmVwbGFjZShTYixcIlxcclxcblwiKX19KTp7bmFtZTpiLm5hbWUsdmFsdWU6Yy5yZXBsYWNlKFNiLFwiXFxyXFxuXCIpfX0pLmdldCgpfX0pLG0uYWpheFNldHRpbmdzLnhocj12b2lkIDAhPT1hLkFjdGl2ZVhPYmplY3Q/ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5pc0xvY2FsJiYvXihnZXR8cG9zdHxoZWFkfHB1dHxkZWxldGV8b3B0aW9ucykkL2kudGVzdCh0aGlzLnR5cGUpJiZaYigpfHwkYigpfTpaYjt2YXIgV2I9MCxYYj17fSxZYj1tLmFqYXhTZXR0aW5ncy54aHIoKTthLmF0dGFjaEV2ZW50JiZhLmF0dGFjaEV2ZW50KFwib251bmxvYWRcIixmdW5jdGlvbigpe2Zvcih2YXIgYSBpbiBYYilYYlthXSh2b2lkIDAsITApfSksay5jb3JzPSEhWWImJlwid2l0aENyZWRlbnRpYWxzXCJpbiBZYixZYj1rLmFqYXg9ISFZYixZYiYmbS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKGEpe2lmKCFhLmNyb3NzRG9tYWlufHxrLmNvcnMpe3ZhciBiO3JldHVybntzZW5kOmZ1bmN0aW9uKGMsZCl7dmFyIGUsZj1hLnhocigpLGc9KytXYjtpZihmLm9wZW4oYS50eXBlLGEudXJsLGEuYXN5bmMsYS51c2VybmFtZSxhLnBhc3N3b3JkKSxhLnhockZpZWxkcylmb3IoZSBpbiBhLnhockZpZWxkcylmW2VdPWEueGhyRmllbGRzW2VdO2EubWltZVR5cGUmJmYub3ZlcnJpZGVNaW1lVHlwZSYmZi5vdmVycmlkZU1pbWVUeXBlKGEubWltZVR5cGUpLGEuY3Jvc3NEb21haW58fGNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdfHwoY1tcIlgtUmVxdWVzdGVkLVdpdGhcIl09XCJYTUxIdHRwUmVxdWVzdFwiKTtmb3IoZSBpbiBjKXZvaWQgMCE9PWNbZV0mJmYuc2V0UmVxdWVzdEhlYWRlcihlLGNbZV0rXCJcIik7Zi5zZW5kKGEuaGFzQ29udGVudCYmYS5kYXRhfHxudWxsKSxiPWZ1bmN0aW9uKGMsZSl7dmFyIGgsaSxqO2lmKGImJihlfHw0PT09Zi5yZWFkeVN0YXRlKSlpZihkZWxldGUgWGJbZ10sYj12b2lkIDAsZi5vbnJlYWR5c3RhdGVjaGFuZ2U9bS5ub29wLGUpNCE9PWYucmVhZHlTdGF0ZSYmZi5hYm9ydCgpO2Vsc2V7aj17fSxoPWYuc3RhdHVzLFwic3RyaW5nXCI9PXR5cGVvZiBmLnJlc3BvbnNlVGV4dCYmKGoudGV4dD1mLnJlc3BvbnNlVGV4dCk7dHJ5e2k9Zi5zdGF0dXNUZXh0fWNhdGNoKGspe2k9XCJcIn1ofHwhYS5pc0xvY2FsfHxhLmNyb3NzRG9tYWluPzEyMjM9PT1oJiYoaD0yMDQpOmg9ai50ZXh0PzIwMDo0MDR9aiYmZChoLGksaixmLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKX0sYS5hc3luYz80PT09Zi5yZWFkeVN0YXRlP3NldFRpbWVvdXQoYik6Zi5vbnJlYWR5c3RhdGVjaGFuZ2U9WGJbZ109YjpiKCl9LGFib3J0OmZ1bmN0aW9uKCl7YiYmYih2b2lkIDAsITApfX19fSk7ZnVuY3Rpb24gWmIoKXt0cnl7cmV0dXJuIG5ldyBhLlhNTEh0dHBSZXF1ZXN0fWNhdGNoKGIpe319ZnVuY3Rpb24gJGIoKXt0cnl7cmV0dXJuIG5ldyBhLkFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MSFRUUFwiKX1jYXRjaChiKXt9fW0uYWpheFNldHVwKHthY2NlcHRzOntzY3JpcHQ6XCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwifSxjb250ZW50czp7c2NyaXB0Oi8oPzpqYXZhfGVjbWEpc2NyaXB0L30sY29udmVydGVyczp7XCJ0ZXh0IHNjcmlwdFwiOmZ1bmN0aW9uKGEpe3JldHVybiBtLmdsb2JhbEV2YWwoYSksYX19fSksbS5hamF4UHJlZmlsdGVyKFwic2NyaXB0XCIsZnVuY3Rpb24oYSl7dm9pZCAwPT09YS5jYWNoZSYmKGEuY2FjaGU9ITEpLGEuY3Jvc3NEb21haW4mJihhLnR5cGU9XCJHRVRcIixhLmdsb2JhbD0hMSl9KSxtLmFqYXhUcmFuc3BvcnQoXCJzY3JpcHRcIixmdW5jdGlvbihhKXtpZihhLmNyb3NzRG9tYWluKXt2YXIgYixjPXkuaGVhZHx8bShcImhlYWRcIilbMF18fHkuZG9jdW1lbnRFbGVtZW50O3JldHVybntzZW5kOmZ1bmN0aW9uKGQsZSl7Yj15LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksYi5hc3luYz0hMCxhLnNjcmlwdENoYXJzZXQmJihiLmNoYXJzZXQ9YS5zY3JpcHRDaGFyc2V0KSxiLnNyYz1hLnVybCxiLm9ubG9hZD1iLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbihhLGMpeyhjfHwhYi5yZWFkeVN0YXRlfHwvbG9hZGVkfGNvbXBsZXRlLy50ZXN0KGIucmVhZHlTdGF0ZSkpJiYoYi5vbmxvYWQ9Yi5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKSxiPW51bGwsY3x8ZSgyMDAsXCJzdWNjZXNzXCIpKX0sYy5pbnNlcnRCZWZvcmUoYixjLmZpcnN0Q2hpbGQpfSxhYm9ydDpmdW5jdGlvbigpe2ImJmIub25sb2FkKHZvaWQgMCwhMCl9fX19KTt2YXIgX2I9W10sYWM9Lyg9KVxcPyg/PSZ8JCl8XFw/XFw/LzttLmFqYXhTZXR1cCh7anNvbnA6XCJjYWxsYmFja1wiLGpzb25wQ2FsbGJhY2s6ZnVuY3Rpb24oKXt2YXIgYT1fYi5wb3AoKXx8bS5leHBhbmRvK1wiX1wiK3ZiKys7cmV0dXJuIHRoaXNbYV09ITAsYX19KSxtLmFqYXhQcmVmaWx0ZXIoXCJqc29uIGpzb25wXCIsZnVuY3Rpb24oYixjLGQpe3ZhciBlLGYsZyxoPWIuanNvbnAhPT0hMSYmKGFjLnRlc3QoYi51cmwpP1widXJsXCI6XCJzdHJpbmdcIj09dHlwZW9mIGIuZGF0YSYmIShiLmNvbnRlbnRUeXBlfHxcIlwiKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpJiZhYy50ZXN0KGIuZGF0YSkmJlwiZGF0YVwiKTtyZXR1cm4gaHx8XCJqc29ucFwiPT09Yi5kYXRhVHlwZXNbMF0/KGU9Yi5qc29ucENhbGxiYWNrPW0uaXNGdW5jdGlvbihiLmpzb25wQ2FsbGJhY2spP2IuanNvbnBDYWxsYmFjaygpOmIuanNvbnBDYWxsYmFjayxoP2JbaF09YltoXS5yZXBsYWNlKGFjLFwiJDFcIitlKTpiLmpzb25wIT09ITEmJihiLnVybCs9KHdiLnRlc3QoYi51cmwpP1wiJlwiOlwiP1wiKStiLmpzb25wK1wiPVwiK2UpLGIuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdPWZ1bmN0aW9uKCl7cmV0dXJuIGd8fG0uZXJyb3IoZStcIiB3YXMgbm90IGNhbGxlZFwiKSxnWzBdfSxiLmRhdGFUeXBlc1swXT1cImpzb25cIixmPWFbZV0sYVtlXT1mdW5jdGlvbigpe2c9YXJndW1lbnRzfSxkLmFsd2F5cyhmdW5jdGlvbigpe2FbZV09ZixiW2VdJiYoYi5qc29ucENhbGxiYWNrPWMuanNvbnBDYWxsYmFjayxfYi5wdXNoKGUpKSxnJiZtLmlzRnVuY3Rpb24oZikmJmYoZ1swXSksZz1mPXZvaWQgMH0pLFwic2NyaXB0XCIpOnZvaWQgMH0pLG0ucGFyc2VIVE1MPWZ1bmN0aW9uKGEsYixjKXtpZighYXx8XCJzdHJpbmdcIiE9dHlwZW9mIGEpcmV0dXJuIG51bGw7XCJib29sZWFuXCI9PXR5cGVvZiBiJiYoYz1iLGI9ITEpLGI9Ynx8eTt2YXIgZD11LmV4ZWMoYSksZT0hYyYmW107cmV0dXJuIGQ/W2IuY3JlYXRlRWxlbWVudChkWzFdKV06KGQ9bS5idWlsZEZyYWdtZW50KFthXSxiLGUpLGUmJmUubGVuZ3RoJiZtKGUpLnJlbW92ZSgpLG0ubWVyZ2UoW10sZC5jaGlsZE5vZGVzKSl9O3ZhciBiYz1tLmZuLmxvYWQ7bS5mbi5sb2FkPWZ1bmN0aW9uKGEsYixjKXtpZihcInN0cmluZ1wiIT10eXBlb2YgYSYmYmMpcmV0dXJuIGJjLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgZCxlLGYsZz10aGlzLGg9YS5pbmRleE9mKFwiIFwiKTtyZXR1cm4gaD49MCYmKGQ9bS50cmltKGEuc2xpY2UoaCxhLmxlbmd0aCkpLGE9YS5zbGljZSgwLGgpKSxtLmlzRnVuY3Rpb24oYik/KGM9YixiPXZvaWQgMCk6YiYmXCJvYmplY3RcIj09dHlwZW9mIGImJihmPVwiUE9TVFwiKSxnLmxlbmd0aD4wJiZtLmFqYXgoe3VybDphLHR5cGU6ZixkYXRhVHlwZTpcImh0bWxcIixkYXRhOmJ9KS5kb25lKGZ1bmN0aW9uKGEpe2U9YXJndW1lbnRzLGcuaHRtbChkP20oXCI8ZGl2PlwiKS5hcHBlbmQobS5wYXJzZUhUTUwoYSkpLmZpbmQoZCk6YSl9KS5jb21wbGV0ZShjJiZmdW5jdGlvbihhLGIpe2cuZWFjaChjLGV8fFthLnJlc3BvbnNlVGV4dCxiLGFdKX0pLHRoaXN9LG0uZWFjaChbXCJhamF4U3RhcnRcIixcImFqYXhTdG9wXCIsXCJhamF4Q29tcGxldGVcIixcImFqYXhFcnJvclwiLFwiYWpheFN1Y2Nlc3NcIixcImFqYXhTZW5kXCJdLGZ1bmN0aW9uKGEsYil7bS5mbltiXT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5vbihiLGEpfX0pLG0uZXhwci5maWx0ZXJzLmFuaW1hdGVkPWZ1bmN0aW9uKGEpe3JldHVybiBtLmdyZXAobS50aW1lcnMsZnVuY3Rpb24oYil7cmV0dXJuIGE9PT1iLmVsZW19KS5sZW5ndGh9O3ZhciBjYz1hLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtmdW5jdGlvbiBkYyhhKXtyZXR1cm4gbS5pc1dpbmRvdyhhKT9hOjk9PT1hLm5vZGVUeXBlP2EuZGVmYXVsdFZpZXd8fGEucGFyZW50V2luZG93OiExfW0ub2Zmc2V0PXtzZXRPZmZzZXQ6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnLGgsaSxqLGs9bS5jc3MoYSxcInBvc2l0aW9uXCIpLGw9bShhKSxuPXt9O1wic3RhdGljXCI9PT1rJiYoYS5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIpLGg9bC5vZmZzZXQoKSxmPW0uY3NzKGEsXCJ0b3BcIiksaT1tLmNzcyhhLFwibGVmdFwiKSxqPShcImFic29sdXRlXCI9PT1rfHxcImZpeGVkXCI9PT1rKSYmbS5pbkFycmF5KFwiYXV0b1wiLFtmLGldKT4tMSxqPyhkPWwucG9zaXRpb24oKSxnPWQudG9wLGU9ZC5sZWZ0KTooZz1wYXJzZUZsb2F0KGYpfHwwLGU9cGFyc2VGbG9hdChpKXx8MCksbS5pc0Z1bmN0aW9uKGIpJiYoYj1iLmNhbGwoYSxjLGgpKSxudWxsIT1iLnRvcCYmKG4udG9wPWIudG9wLWgudG9wK2cpLG51bGwhPWIubGVmdCYmKG4ubGVmdD1iLmxlZnQtaC5sZWZ0K2UpLFwidXNpbmdcImluIGI/Yi51c2luZy5jYWxsKGEsbik6bC5jc3Mobil9fSxtLmZuLmV4dGVuZCh7b2Zmc2V0OmZ1bmN0aW9uKGEpe2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PWE/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oYil7bS5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsYSxiKX0pO3ZhciBiLGMsZD17dG9wOjAsbGVmdDowfSxlPXRoaXNbMF0sZj1lJiZlLm93bmVyRG9jdW1lbnQ7aWYoZilyZXR1cm4gYj1mLmRvY3VtZW50RWxlbWVudCxtLmNvbnRhaW5zKGIsZSk/KHR5cGVvZiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCE9PUsmJihkPWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLGM9ZGMoZikse3RvcDpkLnRvcCsoYy5wYWdlWU9mZnNldHx8Yi5zY3JvbGxUb3ApLShiLmNsaWVudFRvcHx8MCksbGVmdDpkLmxlZnQrKGMucGFnZVhPZmZzZXR8fGIuc2Nyb2xsTGVmdCktKGIuY2xpZW50TGVmdHx8MCl9KTpkfSxwb3NpdGlvbjpmdW5jdGlvbigpe2lmKHRoaXNbMF0pe3ZhciBhLGIsYz17dG9wOjAsbGVmdDowfSxkPXRoaXNbMF07cmV0dXJuXCJmaXhlZFwiPT09bS5jc3MoZCxcInBvc2l0aW9uXCIpP2I9ZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTooYT10aGlzLm9mZnNldFBhcmVudCgpLGI9dGhpcy5vZmZzZXQoKSxtLm5vZGVOYW1lKGFbMF0sXCJodG1sXCIpfHwoYz1hLm9mZnNldCgpKSxjLnRvcCs9bS5jc3MoYVswXSxcImJvcmRlclRvcFdpZHRoXCIsITApLGMubGVmdCs9bS5jc3MoYVswXSxcImJvcmRlckxlZnRXaWR0aFwiLCEwKSkse3RvcDpiLnRvcC1jLnRvcC1tLmNzcyhkLFwibWFyZ2luVG9wXCIsITApLGxlZnQ6Yi5sZWZ0LWMubGVmdC1tLmNzcyhkLFwibWFyZ2luTGVmdFwiLCEwKX19fSxvZmZzZXRQYXJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9mZnNldFBhcmVudHx8Y2M7d2hpbGUoYSYmIW0ubm9kZU5hbWUoYSxcImh0bWxcIikmJlwic3RhdGljXCI9PT1tLmNzcyhhLFwicG9zaXRpb25cIikpYT1hLm9mZnNldFBhcmVudDtyZXR1cm4gYXx8Y2N9KX19KSxtLmVhY2goe3Njcm9sbExlZnQ6XCJwYWdlWE9mZnNldFwiLHNjcm9sbFRvcDpcInBhZ2VZT2Zmc2V0XCJ9LGZ1bmN0aW9uKGEsYil7dmFyIGM9L1kvLnRlc3QoYik7bS5mblthXT1mdW5jdGlvbihkKXtyZXR1cm4gVih0aGlzLGZ1bmN0aW9uKGEsZCxlKXt2YXIgZj1kYyhhKTtyZXR1cm4gdm9pZCAwPT09ZT9mP2IgaW4gZj9mW2JdOmYuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W2RdOmFbZF06dm9pZChmP2Yuc2Nyb2xsVG8oYz9tKGYpLnNjcm9sbExlZnQoKTplLGM/ZTptKGYpLnNjcm9sbFRvcCgpKTphW2RdPWUpfSxhLGQsYXJndW1lbnRzLmxlbmd0aCxudWxsKX19KSxtLmVhY2goW1widG9wXCIsXCJsZWZ0XCJdLGZ1bmN0aW9uKGEsYil7bS5jc3NIb29rc1tiXT1MYShrLnBpeGVsUG9zaXRpb24sZnVuY3Rpb24oYSxjKXtyZXR1cm4gYz8oYz1KYShhLGIpLEhhLnRlc3QoYyk/bShhKS5wb3NpdGlvbigpW2JdK1wicHhcIjpjKTp2b2lkIDB9KX0pLG0uZWFjaCh7SGVpZ2h0OlwiaGVpZ2h0XCIsV2lkdGg6XCJ3aWR0aFwifSxmdW5jdGlvbihhLGIpe20uZWFjaCh7cGFkZGluZzpcImlubmVyXCIrYSxjb250ZW50OmIsXCJcIjpcIm91dGVyXCIrYX0sZnVuY3Rpb24oYyxkKXttLmZuW2RdPWZ1bmN0aW9uKGQsZSl7dmFyIGY9YXJndW1lbnRzLmxlbmd0aCYmKGN8fFwiYm9vbGVhblwiIT10eXBlb2YgZCksZz1jfHwoZD09PSEwfHxlPT09ITA/XCJtYXJnaW5cIjpcImJvcmRlclwiKTtyZXR1cm4gVih0aGlzLGZ1bmN0aW9uKGIsYyxkKXt2YXIgZTtyZXR1cm4gbS5pc1dpbmRvdyhiKT9iLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtcImNsaWVudFwiK2FdOjk9PT1iLm5vZGVUeXBlPyhlPWIuZG9jdW1lbnRFbGVtZW50LE1hdGgubWF4KGIuYm9keVtcInNjcm9sbFwiK2FdLGVbXCJzY3JvbGxcIithXSxiLmJvZHlbXCJvZmZzZXRcIithXSxlW1wib2Zmc2V0XCIrYV0sZVtcImNsaWVudFwiK2FdKSk6dm9pZCAwPT09ZD9tLmNzcyhiLGMsZyk6bS5zdHlsZShiLGMsZCxnKX0sYixmP2Q6dm9pZCAwLGYsbnVsbCl9fSl9KSxtLmZuLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZW5ndGh9LG0uZm4uYW5kU2VsZj1tLmZuLmFkZEJhY2ssXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoXCJqcXVlcnlcIixbXSxmdW5jdGlvbigpe3JldHVybiBtfSk7dmFyIGVjPWEualF1ZXJ5LGZjPWEuJDtyZXR1cm4gbS5ub0NvbmZsaWN0PWZ1bmN0aW9uKGIpe3JldHVybiBhLiQ9PT1tJiYoYS4kPWZjKSxiJiZhLmpRdWVyeT09PW0mJihhLmpRdWVyeT1lYyksbX0sdHlwZW9mIGI9PT1LJiYoYS5qUXVlcnk9YS4kPW0pLG19KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpxdWVyeS5taW4ubWFwIiwiLyogTW9kZXJuaXpyIDIuOC4zIChDdXN0b20gQnVpbGQpIHwgTUlUICYgQlNEXG4gKiBCdWlsZDogaHR0cDovL21vZGVybml6ci5jb20vZG93bmxvYWQvIy1mb250ZmFjZS1iYWNrZ3JvdW5kc2l6ZS1ib3JkZXJpbWFnZS1ib3JkZXJyYWRpdXMtYm94c2hhZG93LWZsZXhib3gtaHNsYS1tdWx0aXBsZWJncy1vcGFjaXR5LXJnYmEtdGV4dHNoYWRvdy1jc3NhbmltYXRpb25zLWNzc2NvbHVtbnMtZ2VuZXJhdGVkY29udGVudC1jc3NncmFkaWVudHMtY3NzcmVmbGVjdGlvbnMtY3NzdHJhbnNmb3Jtcy1jc3N0cmFuc2Zvcm1zM2QtY3NzdHJhbnNpdGlvbnMtYXBwbGljYXRpb25jYWNoZS1jYW52YXMtY2FudmFzdGV4dC1kcmFnYW5kZHJvcC1oYXNoY2hhbmdlLWhpc3RvcnktYXVkaW8tdmlkZW8taW5kZXhlZGRiLWlucHV0LWlucHV0dHlwZXMtbG9jYWxzdG9yYWdlLXBvc3RtZXNzYWdlLXNlc3Npb25zdG9yYWdlLXdlYnNvY2tldHMtd2Vic3FsZGF0YWJhc2Utd2Vid29ya2Vycy1nZW9sb2NhdGlvbi1pbmxpbmVzdmctc21pbC1zdmctc3ZnY2xpcHBhdGhzLXRvdWNoLXdlYmdsLXNoaXYtbXEtY3NzY2xhc3Nlcy1hZGR0ZXN0LXByZWZpeGVkLXRlc3RzdHlsZXMtdGVzdHByb3AtdGVzdGFsbHByb3BzLWhhc2V2ZW50LXByZWZpeGVzLWRvbXByZWZpeGVzLWxvYWRcbiAqL1xuO3dpbmRvdy5Nb2Rlcm5penI9ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIEQoYSl7ai5jc3NUZXh0PWF9ZnVuY3Rpb24gRShhLGIpe3JldHVybiBEKG4uam9pbihhK1wiO1wiKSsoYnx8XCJcIikpfWZ1bmN0aW9uIEYoYSxiKXtyZXR1cm4gdHlwZW9mIGE9PT1ifWZ1bmN0aW9uIEcoYSxiKXtyZXR1cm4hIX4oXCJcIithKS5pbmRleE9mKGIpfWZ1bmN0aW9uIEgoYSxiKXtmb3IodmFyIGQgaW4gYSl7dmFyIGU9YVtkXTtpZighRyhlLFwiLVwiKSYmaltlXSE9PWMpcmV0dXJuIGI9PVwicGZ4XCI/ZTohMH1yZXR1cm4hMX1mdW5jdGlvbiBJKGEsYixkKXtmb3IodmFyIGUgaW4gYSl7dmFyIGY9YlthW2VdXTtpZihmIT09YylyZXR1cm4gZD09PSExP2FbZV06RihmLFwiZnVuY3Rpb25cIik/Zi5iaW5kKGR8fGIpOmZ9cmV0dXJuITF9ZnVuY3Rpb24gSihhLGIsYyl7dmFyIGQ9YS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnNsaWNlKDEpLGU9KGErXCIgXCIrcC5qb2luKGQrXCIgXCIpK2QpLnNwbGl0KFwiIFwiKTtyZXR1cm4gRihiLFwic3RyaW5nXCIpfHxGKGIsXCJ1bmRlZmluZWRcIik/SChlLGIpOihlPShhK1wiIFwiK3Euam9pbihkK1wiIFwiKStkKS5zcGxpdChcIiBcIiksSShlLGIsYykpfWZ1bmN0aW9uIEsoKXtlLmlucHV0PWZ1bmN0aW9uKGMpe2Zvcih2YXIgZD0wLGU9Yy5sZW5ndGg7ZDxlO2QrKyl1W2NbZF1dPWNbZF1pbiBrO3JldHVybiB1Lmxpc3QmJih1Lmxpc3Q9ISFiLmNyZWF0ZUVsZW1lbnQoXCJkYXRhbGlzdFwiKSYmISFhLkhUTUxEYXRhTGlzdEVsZW1lbnQpLHV9KFwiYXV0b2NvbXBsZXRlIGF1dG9mb2N1cyBsaXN0IHBsYWNlaG9sZGVyIG1heCBtaW4gbXVsdGlwbGUgcGF0dGVybiByZXF1aXJlZCBzdGVwXCIuc3BsaXQoXCIgXCIpKSxlLmlucHV0dHlwZXM9ZnVuY3Rpb24oYSl7Zm9yKHZhciBkPTAsZSxmLGgsaT1hLmxlbmd0aDtkPGk7ZCsrKWsuc2V0QXR0cmlidXRlKFwidHlwZVwiLGY9YVtkXSksZT1rLnR5cGUhPT1cInRleHRcIixlJiYoay52YWx1ZT1sLGsuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOmFic29sdXRlO3Zpc2liaWxpdHk6aGlkZGVuO1wiLC9ecmFuZ2UkLy50ZXN0KGYpJiZrLnN0eWxlLldlYmtpdEFwcGVhcmFuY2UhPT1jPyhnLmFwcGVuZENoaWxkKGspLGg9Yi5kZWZhdWx0VmlldyxlPWguZ2V0Q29tcHV0ZWRTdHlsZSYmaC5nZXRDb21wdXRlZFN0eWxlKGssbnVsbCkuV2Via2l0QXBwZWFyYW5jZSE9PVwidGV4dGZpZWxkXCImJmsub2Zmc2V0SGVpZ2h0IT09MCxnLnJlbW92ZUNoaWxkKGspKTovXihzZWFyY2h8dGVsKSQvLnRlc3QoZil8fCgvXih1cmx8ZW1haWwpJC8udGVzdChmKT9lPWsuY2hlY2tWYWxpZGl0eSYmay5jaGVja1ZhbGlkaXR5KCk9PT0hMTplPWsudmFsdWUhPWwpKSx0W2FbZF1dPSEhZTtyZXR1cm4gdH0oXCJzZWFyY2ggdGVsIHVybCBlbWFpbCBkYXRldGltZSBkYXRlIG1vbnRoIHdlZWsgdGltZSBkYXRldGltZS1sb2NhbCBudW1iZXIgcmFuZ2UgY29sb3JcIi5zcGxpdChcIiBcIikpfXZhciBkPVwiMi44LjNcIixlPXt9LGY9ITAsZz1iLmRvY3VtZW50RWxlbWVudCxoPVwibW9kZXJuaXpyXCIsaT1iLmNyZWF0ZUVsZW1lbnQoaCksaj1pLnN0eWxlLGs9Yi5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksbD1cIjopXCIsbT17fS50b1N0cmluZyxuPVwiIC13ZWJraXQtIC1tb3otIC1vLSAtbXMtIFwiLnNwbGl0KFwiIFwiKSxvPVwiV2Via2l0IE1veiBPIG1zXCIscD1vLnNwbGl0KFwiIFwiKSxxPW8udG9Mb3dlckNhc2UoKS5zcGxpdChcIiBcIikscj17c3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn0scz17fSx0PXt9LHU9e30sdj1bXSx3PXYuc2xpY2UseCx5PWZ1bmN0aW9uKGEsYyxkLGUpe3ZhciBmLGksaixrLGw9Yi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLG09Yi5ib2R5LG49bXx8Yi5jcmVhdGVFbGVtZW50KFwiYm9keVwiKTtpZihwYXJzZUludChkLDEwKSl3aGlsZShkLS0paj1iLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksai5pZD1lP2VbZF06aCsoZCsxKSxsLmFwcGVuZENoaWxkKGopO3JldHVybiBmPVtcIiYjMTczO1wiLCc8c3R5bGUgaWQ9XCJzJyxoLCdcIj4nLGEsXCI8L3N0eWxlPlwiXS5qb2luKFwiXCIpLGwuaWQ9aCwobT9sOm4pLmlubmVySFRNTCs9ZixuLmFwcGVuZENoaWxkKGwpLG18fChuLnN0eWxlLmJhY2tncm91bmQ9XCJcIixuLnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCIsaz1nLnN0eWxlLm92ZXJmbG93LGcuc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIixnLmFwcGVuZENoaWxkKG4pKSxpPWMobCxhKSxtP2wucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsKToobi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pLGcuc3R5bGUub3ZlcmZsb3c9ayksISFpfSx6PWZ1bmN0aW9uKGIpe3ZhciBjPWEubWF0Y2hNZWRpYXx8YS5tc01hdGNoTWVkaWE7aWYoYylyZXR1cm4gYyhiKSYmYyhiKS5tYXRjaGVzfHwhMTt2YXIgZDtyZXR1cm4geShcIkBtZWRpYSBcIitiK1wiIHsgI1wiK2grXCIgeyBwb3NpdGlvbjogYWJzb2x1dGU7IH0gfVwiLGZ1bmN0aW9uKGIpe2Q9KGEuZ2V0Q29tcHV0ZWRTdHlsZT9nZXRDb21wdXRlZFN0eWxlKGIsbnVsbCk6Yi5jdXJyZW50U3R5bGUpW1wicG9zaXRpb25cIl09PVwiYWJzb2x1dGVcIn0pLGR9LEE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkKGQsZSl7ZT1lfHxiLmNyZWF0ZUVsZW1lbnQoYVtkXXx8XCJkaXZcIiksZD1cIm9uXCIrZDt2YXIgZj1kIGluIGU7cmV0dXJuIGZ8fChlLnNldEF0dHJpYnV0ZXx8KGU9Yi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxlLnNldEF0dHJpYnV0ZSYmZS5yZW1vdmVBdHRyaWJ1dGUmJihlLnNldEF0dHJpYnV0ZShkLFwiXCIpLGY9RihlW2RdLFwiZnVuY3Rpb25cIiksRihlW2RdLFwidW5kZWZpbmVkXCIpfHwoZVtkXT1jKSxlLnJlbW92ZUF0dHJpYnV0ZShkKSkpLGU9bnVsbCxmfXZhciBhPXtzZWxlY3Q6XCJpbnB1dFwiLGNoYW5nZTpcImlucHV0XCIsc3VibWl0OlwiZm9ybVwiLHJlc2V0OlwiZm9ybVwiLGVycm9yOlwiaW1nXCIsbG9hZDpcImltZ1wiLGFib3J0OlwiaW1nXCJ9O3JldHVybiBkfSgpLEI9e30uaGFzT3duUHJvcGVydHksQzshRihCLFwidW5kZWZpbmVkXCIpJiYhRihCLmNhbGwsXCJ1bmRlZmluZWRcIik/Qz1mdW5jdGlvbihhLGIpe3JldHVybiBCLmNhbGwoYSxiKX06Qz1mdW5jdGlvbihhLGIpe3JldHVybiBiIGluIGEmJkYoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbYl0sXCJ1bmRlZmluZWRcIil9LEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kfHwoRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcztpZih0eXBlb2YgYyE9XCJmdW5jdGlvblwiKXRocm93IG5ldyBUeXBlRXJyb3I7dmFyIGQ9dy5jYWxsKGFyZ3VtZW50cywxKSxlPWZ1bmN0aW9uKCl7aWYodGhpcyBpbnN0YW5jZW9mIGUpe3ZhciBhPWZ1bmN0aW9uKCl7fTthLnByb3RvdHlwZT1jLnByb3RvdHlwZTt2YXIgZj1uZXcgYSxnPWMuYXBwbHkoZixkLmNvbmNhdCh3LmNhbGwoYXJndW1lbnRzKSkpO3JldHVybiBPYmplY3QoZyk9PT1nP2c6Zn1yZXR1cm4gYy5hcHBseShiLGQuY29uY2F0KHcuY2FsbChhcmd1bWVudHMpKSl9O3JldHVybiBlfSkscy5mbGV4Ym94PWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJmbGV4V3JhcFwiKX0scy5jYW52YXM9ZnVuY3Rpb24oKXt2YXIgYT1iLmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7cmV0dXJuISFhLmdldENvbnRleHQmJiEhYS5nZXRDb250ZXh0KFwiMmRcIil9LHMuY2FudmFzdGV4dD1mdW5jdGlvbigpe3JldHVybiEhZS5jYW52YXMmJiEhRihiLmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dChcIjJkXCIpLmZpbGxUZXh0LFwiZnVuY3Rpb25cIil9LHMud2ViZ2w9ZnVuY3Rpb24oKXtyZXR1cm4hIWEuV2ViR0xSZW5kZXJpbmdDb250ZXh0fSxzLnRvdWNoPWZ1bmN0aW9uKCl7dmFyIGM7cmV0dXJuXCJvbnRvdWNoc3RhcnRcImluIGF8fGEuRG9jdW1lbnRUb3VjaCYmYiBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2g/Yz0hMDp5KFtcIkBtZWRpYSAoXCIsbi5qb2luKFwidG91Y2gtZW5hYmxlZCksKFwiKSxoLFwiKVwiLFwieyNtb2Rlcm5penJ7dG9wOjlweDtwb3NpdGlvbjphYnNvbHV0ZX19XCJdLmpvaW4oXCJcIiksZnVuY3Rpb24oYSl7Yz1hLm9mZnNldFRvcD09PTl9KSxjfSxzLmdlb2xvY2F0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuXCJnZW9sb2NhdGlvblwiaW4gbmF2aWdhdG9yfSxzLnBvc3RtZXNzYWdlPWZ1bmN0aW9uKCl7cmV0dXJuISFhLnBvc3RNZXNzYWdlfSxzLndlYnNxbGRhdGFiYXNlPWZ1bmN0aW9uKCl7cmV0dXJuISFhLm9wZW5EYXRhYmFzZX0scy5pbmRleGVkREI9ZnVuY3Rpb24oKXtyZXR1cm4hIUooXCJpbmRleGVkREJcIixhKX0scy5oYXNoY2hhbmdlPWZ1bmN0aW9uKCl7cmV0dXJuIEEoXCJoYXNoY2hhbmdlXCIsYSkmJihiLmRvY3VtZW50TW9kZT09PWN8fGIuZG9jdW1lbnRNb2RlPjcpfSxzLmhpc3Rvcnk9ZnVuY3Rpb24oKXtyZXR1cm4hIWEuaGlzdG9yeSYmISFoaXN0b3J5LnB1c2hTdGF0ZX0scy5kcmFnYW5kZHJvcD1mdW5jdGlvbigpe3ZhciBhPWIuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm5cImRyYWdnYWJsZVwiaW4gYXx8XCJvbmRyYWdzdGFydFwiaW4gYSYmXCJvbmRyb3BcImluIGF9LHMud2Vic29ja2V0cz1mdW5jdGlvbigpe3JldHVyblwiV2ViU29ja2V0XCJpbiBhfHxcIk1veldlYlNvY2tldFwiaW4gYX0scy5yZ2JhPWZ1bmN0aW9uKCl7cmV0dXJuIEQoXCJiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMTUwLDI1NSwxNTAsLjUpXCIpLEcoai5iYWNrZ3JvdW5kQ29sb3IsXCJyZ2JhXCIpfSxzLmhzbGE9ZnVuY3Rpb24oKXtyZXR1cm4gRChcImJhY2tncm91bmQtY29sb3I6aHNsYSgxMjAsNDAlLDEwMCUsLjUpXCIpLEcoai5iYWNrZ3JvdW5kQ29sb3IsXCJyZ2JhXCIpfHxHKGouYmFja2dyb3VuZENvbG9yLFwiaHNsYVwiKX0scy5tdWx0aXBsZWJncz1mdW5jdGlvbigpe3JldHVybiBEKFwiYmFja2dyb3VuZDp1cmwoaHR0cHM6Ly8pLHVybChodHRwczovLykscmVkIHVybChodHRwczovLylcIiksLyh1cmxcXHMqXFwoLio/KXszfS8udGVzdChqLmJhY2tncm91bmQpfSxzLmJhY2tncm91bmRzaXplPWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJiYWNrZ3JvdW5kU2l6ZVwiKX0scy5ib3JkZXJpbWFnZT1mdW5jdGlvbigpe3JldHVybiBKKFwiYm9yZGVySW1hZ2VcIil9LHMuYm9yZGVycmFkaXVzPWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJib3JkZXJSYWRpdXNcIil9LHMuYm94c2hhZG93PWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJib3hTaGFkb3dcIil9LHMudGV4dHNoYWRvdz1mdW5jdGlvbigpe3JldHVybiBiLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUudGV4dFNoYWRvdz09PVwiXCJ9LHMub3BhY2l0eT1mdW5jdGlvbigpe3JldHVybiBFKFwib3BhY2l0eTouNTVcIiksL14wLjU1JC8udGVzdChqLm9wYWNpdHkpfSxzLmNzc2FuaW1hdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gSihcImFuaW1hdGlvbk5hbWVcIil9LHMuY3NzY29sdW1ucz1mdW5jdGlvbigpe3JldHVybiBKKFwiY29sdW1uQ291bnRcIil9LHMuY3NzZ3JhZGllbnRzPWZ1bmN0aW9uKCl7dmFyIGE9XCJiYWNrZ3JvdW5kLWltYWdlOlwiLGI9XCJncmFkaWVudChsaW5lYXIsbGVmdCB0b3AscmlnaHQgYm90dG9tLGZyb20oIzlmOSksdG8od2hpdGUpKTtcIixjPVwibGluZWFyLWdyYWRpZW50KGxlZnQgdG9wLCM5ZjksIHdoaXRlKTtcIjtyZXR1cm4gRCgoYStcIi13ZWJraXQtIFwiLnNwbGl0KFwiIFwiKS5qb2luKGIrYSkrbi5qb2luKGMrYSkpLnNsaWNlKDAsLWEubGVuZ3RoKSksRyhqLmJhY2tncm91bmRJbWFnZSxcImdyYWRpZW50XCIpfSxzLmNzc3JlZmxlY3Rpb25zPWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJib3hSZWZsZWN0XCIpfSxzLmNzc3RyYW5zZm9ybXM9ZnVuY3Rpb24oKXtyZXR1cm4hIUooXCJ0cmFuc2Zvcm1cIil9LHMuY3NzdHJhbnNmb3JtczNkPWZ1bmN0aW9uKCl7dmFyIGE9ISFKKFwicGVyc3BlY3RpdmVcIik7cmV0dXJuIGEmJlwid2Via2l0UGVyc3BlY3RpdmVcImluIGcuc3R5bGUmJnkoXCJAbWVkaWEgKHRyYW5zZm9ybS0zZCksKC13ZWJraXQtdHJhbnNmb3JtLTNkKXsjbW9kZXJuaXpye2xlZnQ6OXB4O3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDozcHg7fX1cIixmdW5jdGlvbihiLGMpe2E9Yi5vZmZzZXRMZWZ0PT09OSYmYi5vZmZzZXRIZWlnaHQ9PT0zfSksYX0scy5jc3N0cmFuc2l0aW9ucz1mdW5jdGlvbigpe3JldHVybiBKKFwidHJhbnNpdGlvblwiKX0scy5mb250ZmFjZT1mdW5jdGlvbigpe3ZhciBhO3JldHVybiB5KCdAZm9udC1mYWNlIHtmb250LWZhbWlseTpcImZvbnRcIjtzcmM6dXJsKFwiaHR0cHM6Ly9cIil9JyxmdW5jdGlvbihjLGQpe3ZhciBlPWIuZ2V0RWxlbWVudEJ5SWQoXCJzbW9kZXJuaXpyXCIpLGY9ZS5zaGVldHx8ZS5zdHlsZVNoZWV0LGc9Zj9mLmNzc1J1bGVzJiZmLmNzc1J1bGVzWzBdP2YuY3NzUnVsZXNbMF0uY3NzVGV4dDpmLmNzc1RleHR8fFwiXCI6XCJcIjthPS9zcmMvaS50ZXN0KGcpJiZnLmluZGV4T2YoZC5zcGxpdChcIiBcIilbMF0pPT09MH0pLGF9LHMuZ2VuZXJhdGVkY29udGVudD1mdW5jdGlvbigpe3ZhciBhO3JldHVybiB5KFtcIiNcIixoLFwie2ZvbnQ6MC8wIGF9I1wiLGgsJzphZnRlcntjb250ZW50OlwiJyxsLCdcIjt2aXNpYmlsaXR5OmhpZGRlbjtmb250OjNweC8xIGF9J10uam9pbihcIlwiKSxmdW5jdGlvbihiKXthPWIub2Zmc2V0SGVpZ2h0Pj0zfSksYX0scy52aWRlbz1mdW5jdGlvbigpe3ZhciBhPWIuY3JlYXRlRWxlbWVudChcInZpZGVvXCIpLGM9ITE7dHJ5e2lmKGM9ISFhLmNhblBsYXlUeXBlKWM9bmV3IEJvb2xlYW4oYyksYy5vZ2c9YS5jYW5QbGF5VHlwZSgndmlkZW8vb2dnOyBjb2RlY3M9XCJ0aGVvcmFcIicpLnJlcGxhY2UoL15ubyQvLFwiXCIpLGMuaDI2ND1hLmNhblBsYXlUeXBlKCd2aWRlby9tcDQ7IGNvZGVjcz1cImF2YzEuNDJFMDFFXCInKS5yZXBsYWNlKC9ebm8kLyxcIlwiKSxjLndlYm09YS5jYW5QbGF5VHlwZSgndmlkZW8vd2VibTsgY29kZWNzPVwidnA4LCB2b3JiaXNcIicpLnJlcGxhY2UoL15ubyQvLFwiXCIpfWNhdGNoKGQpe31yZXR1cm4gY30scy5hdWRpbz1mdW5jdGlvbigpe3ZhciBhPWIuY3JlYXRlRWxlbWVudChcImF1ZGlvXCIpLGM9ITE7dHJ5e2lmKGM9ISFhLmNhblBsYXlUeXBlKWM9bmV3IEJvb2xlYW4oYyksYy5vZ2c9YS5jYW5QbGF5VHlwZSgnYXVkaW8vb2dnOyBjb2RlY3M9XCJ2b3JiaXNcIicpLnJlcGxhY2UoL15ubyQvLFwiXCIpLGMubXAzPWEuY2FuUGxheVR5cGUoXCJhdWRpby9tcGVnO1wiKS5yZXBsYWNlKC9ebm8kLyxcIlwiKSxjLndhdj1hLmNhblBsYXlUeXBlKCdhdWRpby93YXY7IGNvZGVjcz1cIjFcIicpLnJlcGxhY2UoL15ubyQvLFwiXCIpLGMubTRhPShhLmNhblBsYXlUeXBlKFwiYXVkaW8veC1tNGE7XCIpfHxhLmNhblBsYXlUeXBlKFwiYXVkaW8vYWFjO1wiKSkucmVwbGFjZSgvXm5vJC8sXCJcIil9Y2F0Y2goZCl7fXJldHVybiBjfSxzLmxvY2Fsc3RvcmFnZT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gbG9jYWxTdG9yYWdlLnNldEl0ZW0oaCxoKSxsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShoKSwhMH1jYXRjaChhKXtyZXR1cm4hMX19LHMuc2Vzc2lvbnN0b3JhZ2U9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oaCxoKSxzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGgpLCEwfWNhdGNoKGEpe3JldHVybiExfX0scy53ZWJ3b3JrZXJzPWZ1bmN0aW9uKCl7cmV0dXJuISFhLldvcmtlcn0scy5hcHBsaWNhdGlvbmNhY2hlPWZ1bmN0aW9uKCl7cmV0dXJuISFhLmFwcGxpY2F0aW9uQ2FjaGV9LHMuc3ZnPWZ1bmN0aW9uKCl7cmV0dXJuISFiLmNyZWF0ZUVsZW1lbnROUyYmISFiLmNyZWF0ZUVsZW1lbnROUyhyLnN2ZyxcInN2Z1wiKS5jcmVhdGVTVkdSZWN0fSxzLmlubGluZXN2Zz1mdW5jdGlvbigpe3ZhciBhPWIuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gYS5pbm5lckhUTUw9XCI8c3ZnLz5cIiwoYS5maXJzdENoaWxkJiZhLmZpcnN0Q2hpbGQubmFtZXNwYWNlVVJJKT09ci5zdmd9LHMuc21pbD1mdW5jdGlvbigpe3JldHVybiEhYi5jcmVhdGVFbGVtZW50TlMmJi9TVkdBbmltYXRlLy50ZXN0KG0uY2FsbChiLmNyZWF0ZUVsZW1lbnROUyhyLnN2ZyxcImFuaW1hdGVcIikpKX0scy5zdmdjbGlwcGF0aHM9ZnVuY3Rpb24oKXtyZXR1cm4hIWIuY3JlYXRlRWxlbWVudE5TJiYvU1ZHQ2xpcFBhdGgvLnRlc3QobS5jYWxsKGIuY3JlYXRlRWxlbWVudE5TKHIuc3ZnLFwiY2xpcFBhdGhcIikpKX07Zm9yKHZhciBMIGluIHMpQyhzLEwpJiYoeD1MLnRvTG93ZXJDYXNlKCksZVt4XT1zW0xdKCksdi5wdXNoKChlW3hdP1wiXCI6XCJuby1cIikreCkpO3JldHVybiBlLmlucHV0fHxLKCksZS5hZGRUZXN0PWZ1bmN0aW9uKGEsYil7aWYodHlwZW9mIGE9PVwib2JqZWN0XCIpZm9yKHZhciBkIGluIGEpQyhhLGQpJiZlLmFkZFRlc3QoZCxhW2RdKTtlbHNle2E9YS50b0xvd2VyQ2FzZSgpO2lmKGVbYV0hPT1jKXJldHVybiBlO2I9dHlwZW9mIGI9PVwiZnVuY3Rpb25cIj9iKCk6Yix0eXBlb2YgZiE9XCJ1bmRlZmluZWRcIiYmZiYmKGcuY2xhc3NOYW1lKz1cIiBcIisoYj9cIlwiOlwibm8tXCIpK2EpLGVbYV09Yn1yZXR1cm4gZX0sRChcIlwiKSxpPWs9bnVsbCxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGwoYSxiKXt2YXIgYz1hLmNyZWF0ZUVsZW1lbnQoXCJwXCIpLGQ9YS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF18fGEuZG9jdW1lbnRFbGVtZW50O3JldHVybiBjLmlubmVySFRNTD1cIng8c3R5bGU+XCIrYitcIjwvc3R5bGU+XCIsZC5pbnNlcnRCZWZvcmUoYy5sYXN0Q2hpbGQsZC5maXJzdENoaWxkKX1mdW5jdGlvbiBtKCl7dmFyIGE9cy5lbGVtZW50cztyZXR1cm4gdHlwZW9mIGE9PVwic3RyaW5nXCI/YS5zcGxpdChcIiBcIik6YX1mdW5jdGlvbiBuKGEpe3ZhciBiPWpbYVtoXV07cmV0dXJuIGJ8fChiPXt9LGkrKyxhW2hdPWksaltpXT1iKSxifWZ1bmN0aW9uIG8oYSxjLGQpe2N8fChjPWIpO2lmKGspcmV0dXJuIGMuY3JlYXRlRWxlbWVudChhKTtkfHwoZD1uKGMpKTt2YXIgZztyZXR1cm4gZC5jYWNoZVthXT9nPWQuY2FjaGVbYV0uY2xvbmVOb2RlKCk6Zi50ZXN0KGEpP2c9KGQuY2FjaGVbYV09ZC5jcmVhdGVFbGVtKGEpKS5jbG9uZU5vZGUoKTpnPWQuY3JlYXRlRWxlbShhKSxnLmNhbkhhdmVDaGlsZHJlbiYmIWUudGVzdChhKSYmIWcudGFnVXJuP2QuZnJhZy5hcHBlbmRDaGlsZChnKTpnfWZ1bmN0aW9uIHAoYSxjKXthfHwoYT1iKTtpZihrKXJldHVybiBhLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtjPWN8fG4oYSk7dmFyIGQ9Yy5mcmFnLmNsb25lTm9kZSgpLGU9MCxmPW0oKSxnPWYubGVuZ3RoO2Zvcig7ZTxnO2UrKylkLmNyZWF0ZUVsZW1lbnQoZltlXSk7cmV0dXJuIGR9ZnVuY3Rpb24gcShhLGIpe2IuY2FjaGV8fChiLmNhY2hlPXt9LGIuY3JlYXRlRWxlbT1hLmNyZWF0ZUVsZW1lbnQsYi5jcmVhdGVGcmFnPWEuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCxiLmZyYWc9Yi5jcmVhdGVGcmFnKCkpLGEuY3JlYXRlRWxlbWVudD1mdW5jdGlvbihjKXtyZXR1cm4gcy5zaGl2TWV0aG9kcz9vKGMsYSxiKTpiLmNyZWF0ZUVsZW0oYyl9LGEuY3JlYXRlRG9jdW1lbnRGcmFnbWVudD1GdW5jdGlvbihcImgsZlwiLFwicmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49Zi5jbG9uZU5vZGUoKSxjPW4uY3JlYXRlRWxlbWVudDtoLnNoaXZNZXRob2RzJiYoXCIrbSgpLmpvaW4oKS5yZXBsYWNlKC9bXFx3XFwtXSsvZyxmdW5jdGlvbihhKXtyZXR1cm4gYi5jcmVhdGVFbGVtKGEpLGIuZnJhZy5jcmVhdGVFbGVtZW50KGEpLCdjKFwiJythKydcIiknfSkrXCIpO3JldHVybiBufVwiKShzLGIuZnJhZyl9ZnVuY3Rpb24gcihhKXthfHwoYT1iKTt2YXIgYz1uKGEpO3JldHVybiBzLnNoaXZDU1MmJiFnJiYhYy5oYXNDU1MmJihjLmhhc0NTUz0hIWwoYSxcImFydGljbGUsYXNpZGUsZGlhbG9nLGZpZ2NhcHRpb24sZmlndXJlLGZvb3RlcixoZWFkZXIsaGdyb3VwLG1haW4sbmF2LHNlY3Rpb257ZGlzcGxheTpibG9ja31tYXJre2JhY2tncm91bmQ6I0ZGMDtjb2xvcjojMDAwfXRlbXBsYXRle2Rpc3BsYXk6bm9uZX1cIikpLGt8fHEoYSxjKSxhfXZhciBjPVwiMy43LjBcIixkPWEuaHRtbDV8fHt9LGU9L148fF4oPzpidXR0b258bWFwfHNlbGVjdHx0ZXh0YXJlYXxvYmplY3R8aWZyYW1lfG9wdGlvbnxvcHRncm91cCkkL2ksZj0vXig/OmF8Ynxjb2RlfGRpdnxmaWVsZHNldHxoMXxoMnxoM3xoNHxoNXxoNnxpfGxhYmVsfGxpfG9sfHB8cXxzcGFufHN0cm9uZ3xzdHlsZXx0YWJsZXx0Ym9keXx0ZHx0aHx0cnx1bCkkL2ksZyxoPVwiX2h0bWw1c2hpdlwiLGk9MCxqPXt9LGs7KGZ1bmN0aW9uKCl7dHJ5e3ZhciBhPWIuY3JlYXRlRWxlbWVudChcImFcIik7YS5pbm5lckhUTUw9XCI8eHl6PjwveHl6PlwiLGc9XCJoaWRkZW5cImluIGEsaz1hLmNoaWxkTm9kZXMubGVuZ3RoPT0xfHxmdW5jdGlvbigpe2IuY3JlYXRlRWxlbWVudChcImFcIik7dmFyIGE9Yi5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7cmV0dXJuIHR5cGVvZiBhLmNsb25lTm9kZT09XCJ1bmRlZmluZWRcInx8dHlwZW9mIGEuY3JlYXRlRG9jdW1lbnRGcmFnbWVudD09XCJ1bmRlZmluZWRcInx8dHlwZW9mIGEuY3JlYXRlRWxlbWVudD09XCJ1bmRlZmluZWRcIn0oKX1jYXRjaChjKXtnPSEwLGs9ITB9fSkoKTt2YXIgcz17ZWxlbWVudHM6ZC5lbGVtZW50c3x8XCJhYmJyIGFydGljbGUgYXNpZGUgYXVkaW8gYmRpIGNhbnZhcyBkYXRhIGRhdGFsaXN0IGRldGFpbHMgZGlhbG9nIGZpZ2NhcHRpb24gZmlndXJlIGZvb3RlciBoZWFkZXIgaGdyb3VwIG1haW4gbWFyayBtZXRlciBuYXYgb3V0cHV0IHByb2dyZXNzIHNlY3Rpb24gc3VtbWFyeSB0ZW1wbGF0ZSB0aW1lIHZpZGVvXCIsdmVyc2lvbjpjLHNoaXZDU1M6ZC5zaGl2Q1NTIT09ITEsc3VwcG9ydHNVbmtub3duRWxlbWVudHM6ayxzaGl2TWV0aG9kczpkLnNoaXZNZXRob2RzIT09ITEsdHlwZTpcImRlZmF1bHRcIixzaGl2RG9jdW1lbnQ6cixjcmVhdGVFbGVtZW50Om8sY3JlYXRlRG9jdW1lbnRGcmFnbWVudDpwfTthLmh0bWw1PXMscihiKX0odGhpcyxiKSxlLl92ZXJzaW9uPWQsZS5fcHJlZml4ZXM9bixlLl9kb21QcmVmaXhlcz1xLGUuX2Nzc29tUHJlZml4ZXM9cCxlLm1xPXosZS5oYXNFdmVudD1BLGUudGVzdFByb3A9ZnVuY3Rpb24oYSl7cmV0dXJuIEgoW2FdKX0sZS50ZXN0QWxsUHJvcHM9SixlLnRlc3RTdHlsZXM9eSxlLnByZWZpeGVkPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYj9KKGEsYixjKTpKKGEsXCJwZnhcIil9LGcuY2xhc3NOYW1lPWcuY2xhc3NOYW1lLnJlcGxhY2UoLyhefFxccyluby1qcyhcXHN8JCkvLFwiJDEkMlwiKSsoZj9cIiBqcyBcIit2LmpvaW4oXCIgXCIpOlwiXCIpLGV9KHRoaXMsdGhpcy5kb2N1bWVudCksZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoYSl7cmV0dXJuXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT1vLmNhbGwoYSl9ZnVuY3Rpb24gZShhKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYX1mdW5jdGlvbiBmKCl7fWZ1bmN0aW9uIGcoYSl7cmV0dXJuIWF8fFwibG9hZGVkXCI9PWF8fFwiY29tcGxldGVcIj09YXx8XCJ1bmluaXRpYWxpemVkXCI9PWF9ZnVuY3Rpb24gaCgpe3ZhciBhPXAuc2hpZnQoKTtxPTEsYT9hLnQ/bShmdW5jdGlvbigpeyhcImNcIj09YS50P0IuaW5qZWN0Q3NzOkIuaW5qZWN0SnMpKGEucywwLGEuYSxhLngsYS5lLDEpfSwwKTooYSgpLGgoKSk6cT0wfWZ1bmN0aW9uIGkoYSxjLGQsZSxmLGksail7ZnVuY3Rpb24gayhiKXtpZighbyYmZyhsLnJlYWR5U3RhdGUpJiYodS5yPW89MSwhcSYmaCgpLGwub25sb2FkPWwub25yZWFkeXN0YXRlY2hhbmdlPW51bGwsYikpe1wiaW1nXCIhPWEmJm0oZnVuY3Rpb24oKXt0LnJlbW92ZUNoaWxkKGwpfSw1MCk7Zm9yKHZhciBkIGluIHlbY10peVtjXS5oYXNPd25Qcm9wZXJ0eShkKSYmeVtjXVtkXS5vbmxvYWQoKX19dmFyIGo9anx8Qi5lcnJvclRpbWVvdXQsbD1iLmNyZWF0ZUVsZW1lbnQoYSksbz0wLHI9MCx1PXt0OmQsczpjLGU6ZixhOmkseDpqfTsxPT09eVtjXSYmKHI9MSx5W2NdPVtdKSxcIm9iamVjdFwiPT1hP2wuZGF0YT1jOihsLnNyYz1jLGwudHlwZT1hKSxsLndpZHRoPWwuaGVpZ2h0PVwiMFwiLGwub25lcnJvcj1sLm9ubG9hZD1sLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2suY2FsbCh0aGlzLHIpfSxwLnNwbGljZShlLDAsdSksXCJpbWdcIiE9YSYmKHJ8fDI9PT15W2NdPyh0Lmluc2VydEJlZm9yZShsLHM/bnVsbDpuKSxtKGssaikpOnlbY10ucHVzaChsKSl9ZnVuY3Rpb24gaihhLGIsYyxkLGYpe3JldHVybiBxPTAsYj1ifHxcImpcIixlKGEpP2koXCJjXCI9PWI/djp1LGEsYix0aGlzLmkrKyxjLGQsZik6KHAuc3BsaWNlKHRoaXMuaSsrLDAsYSksMT09cC5sZW5ndGgmJmgoKSksdGhpc31mdW5jdGlvbiBrKCl7dmFyIGE9QjtyZXR1cm4gYS5sb2FkZXI9e2xvYWQ6aixpOjB9LGF9dmFyIGw9Yi5kb2N1bWVudEVsZW1lbnQsbT1hLnNldFRpbWVvdXQsbj1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpWzBdLG89e30udG9TdHJpbmcscD1bXSxxPTAscj1cIk1vekFwcGVhcmFuY2VcImluIGwuc3R5bGUscz1yJiYhIWIuY3JlYXRlUmFuZ2UoKS5jb21wYXJlTm9kZSx0PXM/bDpuLnBhcmVudE5vZGUsbD1hLm9wZXJhJiZcIltvYmplY3QgT3BlcmFdXCI9PW8uY2FsbChhLm9wZXJhKSxsPSEhYi5hdHRhY2hFdmVudCYmIWwsdT1yP1wib2JqZWN0XCI6bD9cInNjcmlwdFwiOlwiaW1nXCIsdj1sP1wic2NyaXB0XCI6dSx3PUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGEpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09by5jYWxsKGEpfSx4PVtdLHk9e30sej17dGltZW91dDpmdW5jdGlvbihhLGIpe3JldHVybiBiLmxlbmd0aCYmKGEudGltZW91dD1iWzBdKSxhfX0sQSxCO0I9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhKXt2YXIgYT1hLnNwbGl0KFwiIVwiKSxiPXgubGVuZ3RoLGM9YS5wb3AoKSxkPWEubGVuZ3RoLGM9e3VybDpjLG9yaWdVcmw6YyxwcmVmaXhlczphfSxlLGYsZztmb3IoZj0wO2Y8ZDtmKyspZz1hW2ZdLnNwbGl0KFwiPVwiKSwoZT16W2cuc2hpZnQoKV0pJiYoYz1lKGMsZykpO2ZvcihmPTA7ZjxiO2YrKyljPXhbZl0oYyk7cmV0dXJuIGN9ZnVuY3Rpb24gZyhhLGUsZixnLGgpe3ZhciBpPWIoYSksaj1pLmF1dG9DYWxsYmFjaztpLnVybC5zcGxpdChcIi5cIikucG9wKCkuc3BsaXQoXCI/XCIpLnNoaWZ0KCksaS5ieXBhc3N8fChlJiYoZT1kKGUpP2U6ZVthXXx8ZVtnXXx8ZVthLnNwbGl0KFwiL1wiKS5wb3AoKS5zcGxpdChcIj9cIilbMF1dKSxpLmluc3RlYWQ/aS5pbnN0ZWFkKGEsZSxmLGcsaCk6KHlbaS51cmxdP2kubm9leGVjPSEwOnlbaS51cmxdPTEsZi5sb2FkKGkudXJsLGkuZm9yY2VDU1N8fCFpLmZvcmNlSlMmJlwiY3NzXCI9PWkudXJsLnNwbGl0KFwiLlwiKS5wb3AoKS5zcGxpdChcIj9cIikuc2hpZnQoKT9cImNcIjpjLGkubm9leGVjLGkuYXR0cnMsaS50aW1lb3V0KSwoZChlKXx8ZChqKSkmJmYubG9hZChmdW5jdGlvbigpe2soKSxlJiZlKGkub3JpZ1VybCxoLGcpLGomJmooaS5vcmlnVXJsLGgsZykseVtpLnVybF09Mn0pKSl9ZnVuY3Rpb24gaChhLGIpe2Z1bmN0aW9uIGMoYSxjKXtpZihhKXtpZihlKGEpKWN8fChqPWZ1bmN0aW9uKCl7dmFyIGE9W10uc2xpY2UuY2FsbChhcmd1bWVudHMpO2suYXBwbHkodGhpcyxhKSxsKCl9KSxnKGEsaixiLDAsaCk7ZWxzZSBpZihPYmplY3QoYSk9PT1hKWZvcihuIGluIG09ZnVuY3Rpb24oKXt2YXIgYj0wLGM7Zm9yKGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiZiKys7cmV0dXJuIGJ9KCksYSlhLmhhc093blByb3BlcnR5KG4pJiYoIWMmJiEtLW0mJihkKGopP2o9ZnVuY3Rpb24oKXt2YXIgYT1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7ay5hcHBseSh0aGlzLGEpLGwoKX06altuXT1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYj1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7YSYmYS5hcHBseSh0aGlzLGIpLGwoKX19KGtbbl0pKSxnKGFbbl0saixiLG4saCkpfWVsc2UhYyYmbCgpfXZhciBoPSEhYS50ZXN0LGk9YS5sb2FkfHxhLmJvdGgsaj1hLmNhbGxiYWNrfHxmLGs9aixsPWEuY29tcGxldGV8fGYsbSxuO2MoaD9hLnllcDphLm5vcGUsISFpKSxpJiZjKGkpfXZhciBpLGosbD10aGlzLnllcG5vcGUubG9hZGVyO2lmKGUoYSkpZyhhLDAsbCwwKTtlbHNlIGlmKHcoYSkpZm9yKGk9MDtpPGEubGVuZ3RoO2krKylqPWFbaV0sZShqKT9nKGosMCxsLDApOncoaik/QihqKTpPYmplY3Qoaik9PT1qJiZoKGosbCk7ZWxzZSBPYmplY3QoYSk9PT1hJiZoKGEsbCl9LEIuYWRkUHJlZml4PWZ1bmN0aW9uKGEsYil7elthXT1ifSxCLmFkZEZpbHRlcj1mdW5jdGlvbihhKXt4LnB1c2goYSl9LEIuZXJyb3JUaW1lb3V0PTFlNCxudWxsPT1iLnJlYWR5U3RhdGUmJmIuYWRkRXZlbnRMaXN0ZW5lciYmKGIucmVhZHlTdGF0ZT1cImxvYWRpbmdcIixiLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsQT1mdW5jdGlvbigpe2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixBLDApLGIucmVhZHlTdGF0ZT1cImNvbXBsZXRlXCJ9LDApKSxhLnllcG5vcGU9aygpLGEueWVwbm9wZS5leGVjdXRlU3RhY2s9aCxhLnllcG5vcGUuaW5qZWN0SnM9ZnVuY3Rpb24oYSxjLGQsZSxpLGope3ZhciBrPWIuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSxsLG8sZT1lfHxCLmVycm9yVGltZW91dDtrLnNyYz1hO2ZvcihvIGluIGQpay5zZXRBdHRyaWJ1dGUobyxkW29dKTtjPWo/aDpjfHxmLGsub25yZWFkeXN0YXRlY2hhbmdlPWsub25sb2FkPWZ1bmN0aW9uKCl7IWwmJmcoay5yZWFkeVN0YXRlKSYmKGw9MSxjKCksay5vbmxvYWQ9ay5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCl9LG0oZnVuY3Rpb24oKXtsfHwobD0xLGMoMSkpfSxlKSxpP2sub25sb2FkKCk6bi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShrLG4pfSxhLnllcG5vcGUuaW5qZWN0Q3NzPWZ1bmN0aW9uKGEsYyxkLGUsZyxpKXt2YXIgZT1iLmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpLGosYz1pP2g6Y3x8ZjtlLmhyZWY9YSxlLnJlbD1cInN0eWxlc2hlZXRcIixlLnR5cGU9XCJ0ZXh0L2Nzc1wiO2ZvcihqIGluIGQpZS5zZXRBdHRyaWJ1dGUoaixkW2pdKTtnfHwobi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLG4pLG0oYywwKSl9fSh0aGlzLGRvY3VtZW50KSxNb2Rlcm5penIubG9hZD1mdW5jdGlvbigpe3llcG5vcGUuYXBwbHkod2luZG93LFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApKX07XG4iLCIvKiBNb2Rlcm5penIgMi44LjMgKEN1c3RvbSBCdWlsZCkgfCBNSVQgJiBCU0RcbiAqIEJ1aWxkOiBodHRwOi8vbW9kZXJuaXpyLmNvbS9kb3dubG9hZC8jLWZvbnRmYWNlLWJhY2tncm91bmRzaXplLWJvcmRlcmltYWdlLWJvcmRlcnJhZGl1cy1ib3hzaGFkb3ctZmxleGJveC1oc2xhLW11bHRpcGxlYmdzLW9wYWNpdHktcmdiYS10ZXh0c2hhZG93LWNzc2FuaW1hdGlvbnMtY3NzY29sdW1ucy1nZW5lcmF0ZWRjb250ZW50LWNzc2dyYWRpZW50cy1jc3NyZWZsZWN0aW9ucy1jc3N0cmFuc2Zvcm1zLWNzc3RyYW5zZm9ybXMzZC1jc3N0cmFuc2l0aW9ucy1hcHBsaWNhdGlvbmNhY2hlLWNhbnZhcy1jYW52YXN0ZXh0LWRyYWdhbmRkcm9wLWhhc2hjaGFuZ2UtaGlzdG9yeS1hdWRpby12aWRlby1pbmRleGVkZGItaW5wdXQtaW5wdXR0eXBlcy1sb2NhbHN0b3JhZ2UtcG9zdG1lc3NhZ2Utc2Vzc2lvbnN0b3JhZ2Utd2Vic29ja2V0cy13ZWJzcWxkYXRhYmFzZS13ZWJ3b3JrZXJzLWdlb2xvY2F0aW9uLWlubGluZXN2Zy1zbWlsLXN2Zy1zdmdjbGlwcGF0aHMtdG91Y2gtd2ViZ2wtc2hpdi1tcS1jc3NjbGFzc2VzLWFkZHRlc3QtcHJlZml4ZWQtdGVzdHN0eWxlcy10ZXN0cHJvcC10ZXN0YWxscHJvcHMtaGFzZXZlbnQtcHJlZml4ZXMtZG9tcHJlZml4ZXMtbG9hZFxuICovXG47d2luZG93Lk1vZGVybml6cj1mdW5jdGlvbihhLGIsYyl7ZnVuY3Rpb24gRChhKXtqLmNzc1RleHQ9YX1mdW5jdGlvbiBFKGEsYil7cmV0dXJuIEQobi5qb2luKGErXCI7XCIpKyhifHxcIlwiKSl9ZnVuY3Rpb24gRihhLGIpe3JldHVybiB0eXBlb2YgYT09PWJ9ZnVuY3Rpb24gRyhhLGIpe3JldHVybiEhfihcIlwiK2EpLmluZGV4T2YoYil9ZnVuY3Rpb24gSChhLGIpe2Zvcih2YXIgZCBpbiBhKXt2YXIgZT1hW2RdO2lmKCFHKGUsXCItXCIpJiZqW2VdIT09YylyZXR1cm4gYj09XCJwZnhcIj9lOiEwfXJldHVybiExfWZ1bmN0aW9uIEkoYSxiLGQpe2Zvcih2YXIgZSBpbiBhKXt2YXIgZj1iW2FbZV1dO2lmKGYhPT1jKXJldHVybiBkPT09ITE/YVtlXTpGKGYsXCJmdW5jdGlvblwiKT9mLmJpbmQoZHx8Yik6Zn1yZXR1cm4hMX1mdW5jdGlvbiBKKGEsYixjKXt2YXIgZD1hLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSksZT0oYStcIiBcIitwLmpvaW4oZCtcIiBcIikrZCkuc3BsaXQoXCIgXCIpO3JldHVybiBGKGIsXCJzdHJpbmdcIil8fEYoYixcInVuZGVmaW5lZFwiKT9IKGUsYik6KGU9KGErXCIgXCIrcS5qb2luKGQrXCIgXCIpK2QpLnNwbGl0KFwiIFwiKSxJKGUsYixjKSl9ZnVuY3Rpb24gSygpe2UuaW5wdXQ9ZnVuY3Rpb24oYyl7Zm9yKHZhciBkPTAsZT1jLmxlbmd0aDtkPGU7ZCsrKXVbY1tkXV09Y1tkXWluIGs7cmV0dXJuIHUubGlzdCYmKHUubGlzdD0hIWIuY3JlYXRlRWxlbWVudChcImRhdGFsaXN0XCIpJiYhIWEuSFRNTERhdGFMaXN0RWxlbWVudCksdX0oXCJhdXRvY29tcGxldGUgYXV0b2ZvY3VzIGxpc3QgcGxhY2Vob2xkZXIgbWF4IG1pbiBtdWx0aXBsZSBwYXR0ZXJuIHJlcXVpcmVkIHN0ZXBcIi5zcGxpdChcIiBcIikpLGUuaW5wdXR0eXBlcz1mdW5jdGlvbihhKXtmb3IodmFyIGQ9MCxlLGYsaCxpPWEubGVuZ3RoO2Q8aTtkKyspay5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsZj1hW2RdKSxlPWsudHlwZSE9PVwidGV4dFwiLGUmJihrLnZhbHVlPWwsay5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246YWJzb2x1dGU7dmlzaWJpbGl0eTpoaWRkZW47XCIsL15yYW5nZSQvLnRlc3QoZikmJmsuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSE9PWM/KGcuYXBwZW5kQ2hpbGQoayksaD1iLmRlZmF1bHRWaWV3LGU9aC5nZXRDb21wdXRlZFN0eWxlJiZoLmdldENvbXB1dGVkU3R5bGUoayxudWxsKS5XZWJraXRBcHBlYXJhbmNlIT09XCJ0ZXh0ZmllbGRcIiYmay5vZmZzZXRIZWlnaHQhPT0wLGcucmVtb3ZlQ2hpbGQoaykpOi9eKHNlYXJjaHx0ZWwpJC8udGVzdChmKXx8KC9eKHVybHxlbWFpbCkkLy50ZXN0KGYpP2U9ay5jaGVja1ZhbGlkaXR5JiZrLmNoZWNrVmFsaWRpdHkoKT09PSExOmU9ay52YWx1ZSE9bCkpLHRbYVtkXV09ISFlO3JldHVybiB0fShcInNlYXJjaCB0ZWwgdXJsIGVtYWlsIGRhdGV0aW1lIGRhdGUgbW9udGggd2VlayB0aW1lIGRhdGV0aW1lLWxvY2FsIG51bWJlciByYW5nZSBjb2xvclwiLnNwbGl0KFwiIFwiKSl9dmFyIGQ9XCIyLjguM1wiLGU9e30sZj0hMCxnPWIuZG9jdW1lbnRFbGVtZW50LGg9XCJtb2Rlcm5penJcIixpPWIuY3JlYXRlRWxlbWVudChoKSxqPWkuc3R5bGUsaz1iLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxsPVwiOilcIixtPXt9LnRvU3RyaW5nLG49XCIgLXdlYmtpdC0gLW1vei0gLW8tIC1tcy0gXCIuc3BsaXQoXCIgXCIpLG89XCJXZWJraXQgTW96IE8gbXNcIixwPW8uc3BsaXQoXCIgXCIpLHE9by50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiIFwiKSxyPXtzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifSxzPXt9LHQ9e30sdT17fSx2PVtdLHc9di5zbGljZSx4LHk9ZnVuY3Rpb24oYSxjLGQsZSl7dmFyIGYsaSxqLGssbD1iLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksbT1iLmJvZHksbj1tfHxiLmNyZWF0ZUVsZW1lbnQoXCJib2R5XCIpO2lmKHBhcnNlSW50KGQsMTApKXdoaWxlKGQtLSlqPWIuY3JlYXRlRWxlbWVudChcImRpdlwiKSxqLmlkPWU/ZVtkXTpoKyhkKzEpLGwuYXBwZW5kQ2hpbGQoaik7cmV0dXJuIGY9W1wiJiMxNzM7XCIsJzxzdHlsZSBpZD1cInMnLGgsJ1wiPicsYSxcIjwvc3R5bGU+XCJdLmpvaW4oXCJcIiksbC5pZD1oLChtP2w6bikuaW5uZXJIVE1MKz1mLG4uYXBwZW5kQ2hpbGQobCksbXx8KG4uc3R5bGUuYmFja2dyb3VuZD1cIlwiLG4uc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIixrPWcuc3R5bGUub3ZlcmZsb3csZy5zdHlsZS5vdmVyZmxvdz1cImhpZGRlblwiLGcuYXBwZW5kQ2hpbGQobikpLGk9YyhsLGEpLG0/bC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGwpOihuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobiksZy5zdHlsZS5vdmVyZmxvdz1rKSwhIWl9LHo9ZnVuY3Rpb24oYil7dmFyIGM9YS5tYXRjaE1lZGlhfHxhLm1zTWF0Y2hNZWRpYTtpZihjKXJldHVybiBjKGIpJiZjKGIpLm1hdGNoZXN8fCExO3ZhciBkO3JldHVybiB5KFwiQG1lZGlhIFwiK2IrXCIgeyAjXCIraCtcIiB7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgfSB9XCIsZnVuY3Rpb24oYil7ZD0oYS5nZXRDb21wdXRlZFN0eWxlP2dldENvbXB1dGVkU3R5bGUoYixudWxsKTpiLmN1cnJlbnRTdHlsZSlbXCJwb3NpdGlvblwiXT09XCJhYnNvbHV0ZVwifSksZH0sQT1mdW5jdGlvbigpe2Z1bmN0aW9uIGQoZCxlKXtlPWV8fGIuY3JlYXRlRWxlbWVudChhW2RdfHxcImRpdlwiKSxkPVwib25cIitkO3ZhciBmPWQgaW4gZTtyZXR1cm4gZnx8KGUuc2V0QXR0cmlidXRlfHwoZT1iLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLGUuc2V0QXR0cmlidXRlJiZlLnJlbW92ZUF0dHJpYnV0ZSYmKGUuc2V0QXR0cmlidXRlKGQsXCJcIiksZj1GKGVbZF0sXCJmdW5jdGlvblwiKSxGKGVbZF0sXCJ1bmRlZmluZWRcIil8fChlW2RdPWMpLGUucmVtb3ZlQXR0cmlidXRlKGQpKSksZT1udWxsLGZ9dmFyIGE9e3NlbGVjdDpcImlucHV0XCIsY2hhbmdlOlwiaW5wdXRcIixzdWJtaXQ6XCJmb3JtXCIscmVzZXQ6XCJmb3JtXCIsZXJyb3I6XCJpbWdcIixsb2FkOlwiaW1nXCIsYWJvcnQ6XCJpbWdcIn07cmV0dXJuIGR9KCksQj17fS5oYXNPd25Qcm9wZXJ0eSxDOyFGKEIsXCJ1bmRlZmluZWRcIikmJiFGKEIuY2FsbCxcInVuZGVmaW5lZFwiKT9DPWZ1bmN0aW9uKGEsYil7cmV0dXJuIEIuY2FsbChhLGIpfTpDPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIgaW4gYSYmRihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZVtiXSxcInVuZGVmaW5lZFwiKX0sRnVuY3Rpb24ucHJvdG90eXBlLmJpbmR8fChGdW5jdGlvbi5wcm90b3R5cGUuYmluZD1mdW5jdGlvbihiKXt2YXIgYz10aGlzO2lmKHR5cGVvZiBjIT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IFR5cGVFcnJvcjt2YXIgZD13LmNhbGwoYXJndW1lbnRzLDEpLGU9ZnVuY3Rpb24oKXtpZih0aGlzIGluc3RhbmNlb2YgZSl7dmFyIGE9ZnVuY3Rpb24oKXt9O2EucHJvdG90eXBlPWMucHJvdG90eXBlO3ZhciBmPW5ldyBhLGc9Yy5hcHBseShmLGQuY29uY2F0KHcuY2FsbChhcmd1bWVudHMpKSk7cmV0dXJuIE9iamVjdChnKT09PWc/ZzpmfXJldHVybiBjLmFwcGx5KGIsZC5jb25jYXQody5jYWxsKGFyZ3VtZW50cykpKX07cmV0dXJuIGV9KSxzLmZsZXhib3g9ZnVuY3Rpb24oKXtyZXR1cm4gSihcImZsZXhXcmFwXCIpfSxzLmNhbnZhcz1mdW5jdGlvbigpe3ZhciBhPWIuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtyZXR1cm4hIWEuZ2V0Q29udGV4dCYmISFhLmdldENvbnRleHQoXCIyZFwiKX0scy5jYW52YXN0ZXh0PWZ1bmN0aW9uKCl7cmV0dXJuISFlLmNhbnZhcyYmISFGKGIuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0KFwiMmRcIikuZmlsbFRleHQsXCJmdW5jdGlvblwiKX0scy53ZWJnbD1mdW5jdGlvbigpe3JldHVybiEhYS5XZWJHTFJlbmRlcmluZ0NvbnRleHR9LHMudG91Y2g9ZnVuY3Rpb24oKXt2YXIgYztyZXR1cm5cIm9udG91Y2hzdGFydFwiaW4gYXx8YS5Eb2N1bWVudFRvdWNoJiZiIGluc3RhbmNlb2YgRG9jdW1lbnRUb3VjaD9jPSEwOnkoW1wiQG1lZGlhIChcIixuLmpvaW4oXCJ0b3VjaC1lbmFibGVkKSwoXCIpLGgsXCIpXCIsXCJ7I21vZGVybml6cnt0b3A6OXB4O3Bvc2l0aW9uOmFic29sdXRlfX1cIl0uam9pbihcIlwiKSxmdW5jdGlvbihhKXtjPWEub2Zmc2V0VG9wPT09OX0pLGN9LHMuZ2VvbG9jYXRpb249ZnVuY3Rpb24oKXtyZXR1cm5cImdlb2xvY2F0aW9uXCJpbiBuYXZpZ2F0b3J9LHMucG9zdG1lc3NhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4hIWEucG9zdE1lc3NhZ2V9LHMud2Vic3FsZGF0YWJhc2U9ZnVuY3Rpb24oKXtyZXR1cm4hIWEub3BlbkRhdGFiYXNlfSxzLmluZGV4ZWREQj1mdW5jdGlvbigpe3JldHVybiEhSihcImluZGV4ZWREQlwiLGEpfSxzLmhhc2hjaGFuZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gQShcImhhc2hjaGFuZ2VcIixhKSYmKGIuZG9jdW1lbnRNb2RlPT09Y3x8Yi5kb2N1bWVudE1vZGU+Nyl9LHMuaGlzdG9yeT1mdW5jdGlvbigpe3JldHVybiEhYS5oaXN0b3J5JiYhIWhpc3RvcnkucHVzaFN0YXRlfSxzLmRyYWdhbmRkcm9wPWZ1bmN0aW9uKCl7dmFyIGE9Yi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVyblwiZHJhZ2dhYmxlXCJpbiBhfHxcIm9uZHJhZ3N0YXJ0XCJpbiBhJiZcIm9uZHJvcFwiaW4gYX0scy53ZWJzb2NrZXRzPWZ1bmN0aW9uKCl7cmV0dXJuXCJXZWJTb2NrZXRcImluIGF8fFwiTW96V2ViU29ja2V0XCJpbiBhfSxzLnJnYmE9ZnVuY3Rpb24oKXtyZXR1cm4gRChcImJhY2tncm91bmQtY29sb3I6cmdiYSgxNTAsMjU1LDE1MCwuNSlcIiksRyhqLmJhY2tncm91bmRDb2xvcixcInJnYmFcIil9LHMuaHNsYT1mdW5jdGlvbigpe3JldHVybiBEKFwiYmFja2dyb3VuZC1jb2xvcjpoc2xhKDEyMCw0MCUsMTAwJSwuNSlcIiksRyhqLmJhY2tncm91bmRDb2xvcixcInJnYmFcIil8fEcoai5iYWNrZ3JvdW5kQ29sb3IsXCJoc2xhXCIpfSxzLm11bHRpcGxlYmdzPWZ1bmN0aW9uKCl7cmV0dXJuIEQoXCJiYWNrZ3JvdW5kOnVybChodHRwczovLyksdXJsKGh0dHBzOi8vKSxyZWQgdXJsKGh0dHBzOi8vKVwiKSwvKHVybFxccypcXCguKj8pezN9Ly50ZXN0KGouYmFja2dyb3VuZCl9LHMuYmFja2dyb3VuZHNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gSihcImJhY2tncm91bmRTaXplXCIpfSxzLmJvcmRlcmltYWdlPWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJib3JkZXJJbWFnZVwiKX0scy5ib3JkZXJyYWRpdXM9ZnVuY3Rpb24oKXtyZXR1cm4gSihcImJvcmRlclJhZGl1c1wiKX0scy5ib3hzaGFkb3c9ZnVuY3Rpb24oKXtyZXR1cm4gSihcImJveFNoYWRvd1wiKX0scy50ZXh0c2hhZG93PWZ1bmN0aW9uKCl7cmV0dXJuIGIuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZS50ZXh0U2hhZG93PT09XCJcIn0scy5vcGFjaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIEUoXCJvcGFjaXR5Oi41NVwiKSwvXjAuNTUkLy50ZXN0KGoub3BhY2l0eSl9LHMuY3NzYW5pbWF0aW9ucz1mdW5jdGlvbigpe3JldHVybiBKKFwiYW5pbWF0aW9uTmFtZVwiKX0scy5jc3Njb2x1bW5zPWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJjb2x1bW5Db3VudFwiKX0scy5jc3NncmFkaWVudHM9ZnVuY3Rpb24oKXt2YXIgYT1cImJhY2tncm91bmQtaW1hZ2U6XCIsYj1cImdyYWRpZW50KGxpbmVhcixsZWZ0IHRvcCxyaWdodCBib3R0b20sZnJvbSgjOWY5KSx0byh3aGl0ZSkpO1wiLGM9XCJsaW5lYXItZ3JhZGllbnQobGVmdCB0b3AsIzlmOSwgd2hpdGUpO1wiO3JldHVybiBEKChhK1wiLXdlYmtpdC0gXCIuc3BsaXQoXCIgXCIpLmpvaW4oYithKStuLmpvaW4oYythKSkuc2xpY2UoMCwtYS5sZW5ndGgpKSxHKGouYmFja2dyb3VuZEltYWdlLFwiZ3JhZGllbnRcIil9LHMuY3NzcmVmbGVjdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gSihcImJveFJlZmxlY3RcIil9LHMuY3NzdHJhbnNmb3Jtcz1mdW5jdGlvbigpe3JldHVybiEhSihcInRyYW5zZm9ybVwiKX0scy5jc3N0cmFuc2Zvcm1zM2Q9ZnVuY3Rpb24oKXt2YXIgYT0hIUooXCJwZXJzcGVjdGl2ZVwiKTtyZXR1cm4gYSYmXCJ3ZWJraXRQZXJzcGVjdGl2ZVwiaW4gZy5zdHlsZSYmeShcIkBtZWRpYSAodHJhbnNmb3JtLTNkKSwoLXdlYmtpdC10cmFuc2Zvcm0tM2QpeyNtb2Rlcm5penJ7bGVmdDo5cHg7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjNweDt9fVwiLGZ1bmN0aW9uKGIsYyl7YT1iLm9mZnNldExlZnQ9PT05JiZiLm9mZnNldEhlaWdodD09PTN9KSxhfSxzLmNzc3RyYW5zaXRpb25zPWZ1bmN0aW9uKCl7cmV0dXJuIEooXCJ0cmFuc2l0aW9uXCIpfSxzLmZvbnRmYWNlPWZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIHkoJ0Bmb250LWZhY2Uge2ZvbnQtZmFtaWx5OlwiZm9udFwiO3NyYzp1cmwoXCJodHRwczovL1wiKX0nLGZ1bmN0aW9uKGMsZCl7dmFyIGU9Yi5nZXRFbGVtZW50QnlJZChcInNtb2Rlcm5penJcIiksZj1lLnNoZWV0fHxlLnN0eWxlU2hlZXQsZz1mP2YuY3NzUnVsZXMmJmYuY3NzUnVsZXNbMF0/Zi5jc3NSdWxlc1swXS5jc3NUZXh0OmYuY3NzVGV4dHx8XCJcIjpcIlwiO2E9L3NyYy9pLnRlc3QoZykmJmcuaW5kZXhPZihkLnNwbGl0KFwiIFwiKVswXSk9PT0wfSksYX0scy5nZW5lcmF0ZWRjb250ZW50PWZ1bmN0aW9uKCl7dmFyIGE7cmV0dXJuIHkoW1wiI1wiLGgsXCJ7Zm9udDowLzAgYX0jXCIsaCwnOmFmdGVye2NvbnRlbnQ6XCInLGwsJ1wiO3Zpc2liaWxpdHk6aGlkZGVuO2ZvbnQ6M3B4LzEgYX0nXS5qb2luKFwiXCIpLGZ1bmN0aW9uKGIpe2E9Yi5vZmZzZXRIZWlnaHQ+PTN9KSxhfSxzLnZpZGVvPWZ1bmN0aW9uKCl7dmFyIGE9Yi5jcmVhdGVFbGVtZW50KFwidmlkZW9cIiksYz0hMTt0cnl7aWYoYz0hIWEuY2FuUGxheVR5cGUpYz1uZXcgQm9vbGVhbihjKSxjLm9nZz1hLmNhblBsYXlUeXBlKCd2aWRlby9vZ2c7IGNvZGVjcz1cInRoZW9yYVwiJykucmVwbGFjZSgvXm5vJC8sXCJcIiksYy5oMjY0PWEuY2FuUGxheVR5cGUoJ3ZpZGVvL21wNDsgY29kZWNzPVwiYXZjMS40MkUwMUVcIicpLnJlcGxhY2UoL15ubyQvLFwiXCIpLGMud2VibT1hLmNhblBsYXlUeXBlKCd2aWRlby93ZWJtOyBjb2RlY3M9XCJ2cDgsIHZvcmJpc1wiJykucmVwbGFjZSgvXm5vJC8sXCJcIil9Y2F0Y2goZCl7fXJldHVybiBjfSxzLmF1ZGlvPWZ1bmN0aW9uKCl7dmFyIGE9Yi5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIiksYz0hMTt0cnl7aWYoYz0hIWEuY2FuUGxheVR5cGUpYz1uZXcgQm9vbGVhbihjKSxjLm9nZz1hLmNhblBsYXlUeXBlKCdhdWRpby9vZ2c7IGNvZGVjcz1cInZvcmJpc1wiJykucmVwbGFjZSgvXm5vJC8sXCJcIiksYy5tcDM9YS5jYW5QbGF5VHlwZShcImF1ZGlvL21wZWc7XCIpLnJlcGxhY2UoL15ubyQvLFwiXCIpLGMud2F2PWEuY2FuUGxheVR5cGUoJ2F1ZGlvL3dhdjsgY29kZWNzPVwiMVwiJykucmVwbGFjZSgvXm5vJC8sXCJcIiksYy5tNGE9KGEuY2FuUGxheVR5cGUoXCJhdWRpby94LW00YTtcIil8fGEuY2FuUGxheVR5cGUoXCJhdWRpby9hYWM7XCIpKS5yZXBsYWNlKC9ebm8kLyxcIlwiKX1jYXRjaChkKXt9cmV0dXJuIGN9LHMubG9jYWxzdG9yYWdlPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShoLGgpLGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGgpLCEwfWNhdGNoKGEpe3JldHVybiExfX0scy5zZXNzaW9uc3RvcmFnZT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShoLGgpLHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oaCksITB9Y2F0Y2goYSl7cmV0dXJuITF9fSxzLndlYndvcmtlcnM9ZnVuY3Rpb24oKXtyZXR1cm4hIWEuV29ya2VyfSxzLmFwcGxpY2F0aW9uY2FjaGU9ZnVuY3Rpb24oKXtyZXR1cm4hIWEuYXBwbGljYXRpb25DYWNoZX0scy5zdmc9ZnVuY3Rpb24oKXtyZXR1cm4hIWIuY3JlYXRlRWxlbWVudE5TJiYhIWIuY3JlYXRlRWxlbWVudE5TKHIuc3ZnLFwic3ZnXCIpLmNyZWF0ZVNWR1JlY3R9LHMuaW5saW5lc3ZnPWZ1bmN0aW9uKCl7dmFyIGE9Yi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiBhLmlubmVySFRNTD1cIjxzdmcvPlwiLChhLmZpcnN0Q2hpbGQmJmEuZmlyc3RDaGlsZC5uYW1lc3BhY2VVUkkpPT1yLnN2Z30scy5zbWlsPWZ1bmN0aW9uKCl7cmV0dXJuISFiLmNyZWF0ZUVsZW1lbnROUyYmL1NWR0FuaW1hdGUvLnRlc3QobS5jYWxsKGIuY3JlYXRlRWxlbWVudE5TKHIuc3ZnLFwiYW5pbWF0ZVwiKSkpfSxzLnN2Z2NsaXBwYXRocz1mdW5jdGlvbigpe3JldHVybiEhYi5jcmVhdGVFbGVtZW50TlMmJi9TVkdDbGlwUGF0aC8udGVzdChtLmNhbGwoYi5jcmVhdGVFbGVtZW50TlMoci5zdmcsXCJjbGlwUGF0aFwiKSkpfTtmb3IodmFyIEwgaW4gcylDKHMsTCkmJih4PUwudG9Mb3dlckNhc2UoKSxlW3hdPXNbTF0oKSx2LnB1c2goKGVbeF0/XCJcIjpcIm5vLVwiKSt4KSk7cmV0dXJuIGUuaW5wdXR8fEsoKSxlLmFkZFRlc3Q9ZnVuY3Rpb24oYSxiKXtpZih0eXBlb2YgYT09XCJvYmplY3RcIilmb3IodmFyIGQgaW4gYSlDKGEsZCkmJmUuYWRkVGVzdChkLGFbZF0pO2Vsc2V7YT1hLnRvTG93ZXJDYXNlKCk7aWYoZVthXSE9PWMpcmV0dXJuIGU7Yj10eXBlb2YgYj09XCJmdW5jdGlvblwiP2IoKTpiLHR5cGVvZiBmIT1cInVuZGVmaW5lZFwiJiZmJiYoZy5jbGFzc05hbWUrPVwiIFwiKyhiP1wiXCI6XCJuby1cIikrYSksZVthXT1ifXJldHVybiBlfSxEKFwiXCIpLGk9az1udWxsLGZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gbChhLGIpe3ZhciBjPWEuY3JlYXRlRWxlbWVudChcInBcIiksZD1hLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXXx8YS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuIGMuaW5uZXJIVE1MPVwieDxzdHlsZT5cIitiK1wiPC9zdHlsZT5cIixkLmluc2VydEJlZm9yZShjLmxhc3RDaGlsZCxkLmZpcnN0Q2hpbGQpfWZ1bmN0aW9uIG0oKXt2YXIgYT1zLmVsZW1lbnRzO3JldHVybiB0eXBlb2YgYT09XCJzdHJpbmdcIj9hLnNwbGl0KFwiIFwiKTphfWZ1bmN0aW9uIG4oYSl7dmFyIGI9althW2hdXTtyZXR1cm4gYnx8KGI9e30saSsrLGFbaF09aSxqW2ldPWIpLGJ9ZnVuY3Rpb24gbyhhLGMsZCl7Y3x8KGM9Yik7aWYoaylyZXR1cm4gYy5jcmVhdGVFbGVtZW50KGEpO2R8fChkPW4oYykpO3ZhciBnO3JldHVybiBkLmNhY2hlW2FdP2c9ZC5jYWNoZVthXS5jbG9uZU5vZGUoKTpmLnRlc3QoYSk/Zz0oZC5jYWNoZVthXT1kLmNyZWF0ZUVsZW0oYSkpLmNsb25lTm9kZSgpOmc9ZC5jcmVhdGVFbGVtKGEpLGcuY2FuSGF2ZUNoaWxkcmVuJiYhZS50ZXN0KGEpJiYhZy50YWdVcm4/ZC5mcmFnLmFwcGVuZENoaWxkKGcpOmd9ZnVuY3Rpb24gcChhLGMpe2F8fChhPWIpO2lmKGspcmV0dXJuIGEuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO2M9Y3x8bihhKTt2YXIgZD1jLmZyYWcuY2xvbmVOb2RlKCksZT0wLGY9bSgpLGc9Zi5sZW5ndGg7Zm9yKDtlPGc7ZSsrKWQuY3JlYXRlRWxlbWVudChmW2VdKTtyZXR1cm4gZH1mdW5jdGlvbiBxKGEsYil7Yi5jYWNoZXx8KGIuY2FjaGU9e30sYi5jcmVhdGVFbGVtPWEuY3JlYXRlRWxlbWVudCxiLmNyZWF0ZUZyYWc9YS5jcmVhdGVEb2N1bWVudEZyYWdtZW50LGIuZnJhZz1iLmNyZWF0ZUZyYWcoKSksYS5jcmVhdGVFbGVtZW50PWZ1bmN0aW9uKGMpe3JldHVybiBzLnNoaXZNZXRob2RzP28oYyxhLGIpOmIuY3JlYXRlRWxlbShjKX0sYS5jcmVhdGVEb2N1bWVudEZyYWdtZW50PUZ1bmN0aW9uKFwiaCxmXCIsXCJyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbj1mLmNsb25lTm9kZSgpLGM9bi5jcmVhdGVFbGVtZW50O2guc2hpdk1ldGhvZHMmJihcIittKCkuam9pbigpLnJlcGxhY2UoL1tcXHdcXC1dKy9nLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNyZWF0ZUVsZW0oYSksYi5mcmFnLmNyZWF0ZUVsZW1lbnQoYSksJ2MoXCInK2ErJ1wiKSd9KStcIik7cmV0dXJuIG59XCIpKHMsYi5mcmFnKX1mdW5jdGlvbiByKGEpe2F8fChhPWIpO3ZhciBjPW4oYSk7cmV0dXJuIHMuc2hpdkNTUyYmIWcmJiFjLmhhc0NTUyYmKGMuaGFzQ1NTPSEhbChhLFwiYXJ0aWNsZSxhc2lkZSxkaWFsb2csZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGhlYWRlcixoZ3JvdXAsbWFpbixuYXYsc2VjdGlvbntkaXNwbGF5OmJsb2NrfW1hcmt7YmFja2dyb3VuZDojRkYwO2NvbG9yOiMwMDB9dGVtcGxhdGV7ZGlzcGxheTpub25lfVwiKSksa3x8cShhLGMpLGF9dmFyIGM9XCIzLjcuMFwiLGQ9YS5odG1sNXx8e30sZT0vXjx8Xig/OmJ1dHRvbnxtYXB8c2VsZWN0fHRleHRhcmVhfG9iamVjdHxpZnJhbWV8b3B0aW9ufG9wdGdyb3VwKSQvaSxmPS9eKD86YXxifGNvZGV8ZGl2fGZpZWxkc2V0fGgxfGgyfGgzfGg0fGg1fGg2fGl8bGFiZWx8bGl8b2x8cHxxfHNwYW58c3Ryb25nfHN0eWxlfHRhYmxlfHRib2R5fHRkfHRofHRyfHVsKSQvaSxnLGg9XCJfaHRtbDVzaGl2XCIsaT0wLGo9e30sazsoZnVuY3Rpb24oKXt0cnl7dmFyIGE9Yi5jcmVhdGVFbGVtZW50KFwiYVwiKTthLmlubmVySFRNTD1cIjx4eXo+PC94eXo+XCIsZz1cImhpZGRlblwiaW4gYSxrPWEuY2hpbGROb2Rlcy5sZW5ndGg9PTF8fGZ1bmN0aW9uKCl7Yi5jcmVhdGVFbGVtZW50KFwiYVwiKTt2YXIgYT1iLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtyZXR1cm4gdHlwZW9mIGEuY2xvbmVOb2RlPT1cInVuZGVmaW5lZFwifHx0eXBlb2YgYS5jcmVhdGVEb2N1bWVudEZyYWdtZW50PT1cInVuZGVmaW5lZFwifHx0eXBlb2YgYS5jcmVhdGVFbGVtZW50PT1cInVuZGVmaW5lZFwifSgpfWNhdGNoKGMpe2c9ITAsaz0hMH19KSgpO3ZhciBzPXtlbGVtZW50czpkLmVsZW1lbnRzfHxcImFiYnIgYXJ0aWNsZSBhc2lkZSBhdWRpbyBiZGkgY2FudmFzIGRhdGEgZGF0YWxpc3QgZGV0YWlscyBkaWFsb2cgZmlnY2FwdGlvbiBmaWd1cmUgZm9vdGVyIGhlYWRlciBoZ3JvdXAgbWFpbiBtYXJrIG1ldGVyIG5hdiBvdXRwdXQgcHJvZ3Jlc3Mgc2VjdGlvbiBzdW1tYXJ5IHRlbXBsYXRlIHRpbWUgdmlkZW9cIix2ZXJzaW9uOmMsc2hpdkNTUzpkLnNoaXZDU1MhPT0hMSxzdXBwb3J0c1Vua25vd25FbGVtZW50czprLHNoaXZNZXRob2RzOmQuc2hpdk1ldGhvZHMhPT0hMSx0eXBlOlwiZGVmYXVsdFwiLHNoaXZEb2N1bWVudDpyLGNyZWF0ZUVsZW1lbnQ6byxjcmVhdGVEb2N1bWVudEZyYWdtZW50OnB9O2EuaHRtbDU9cyxyKGIpfSh0aGlzLGIpLGUuX3ZlcnNpb249ZCxlLl9wcmVmaXhlcz1uLGUuX2RvbVByZWZpeGVzPXEsZS5fY3Nzb21QcmVmaXhlcz1wLGUubXE9eixlLmhhc0V2ZW50PUEsZS50ZXN0UHJvcD1mdW5jdGlvbihhKXtyZXR1cm4gSChbYV0pfSxlLnRlc3RBbGxQcm9wcz1KLGUudGVzdFN0eWxlcz15LGUucHJlZml4ZWQ9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBiP0ooYSxiLGMpOkooYSxcInBmeFwiKX0sZy5jbGFzc05hbWU9Zy5jbGFzc05hbWUucmVwbGFjZSgvKF58XFxzKW5vLWpzKFxcc3wkKS8sXCIkMSQyXCIpKyhmP1wiIGpzIFwiK3Yuam9pbihcIiBcIik6XCJcIiksZX0odGhpcyx0aGlzLmRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyl7ZnVuY3Rpb24gZChhKXtyZXR1cm5cIltvYmplY3QgRnVuY3Rpb25dXCI9PW8uY2FsbChhKX1mdW5jdGlvbiBlKGEpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBhfWZ1bmN0aW9uIGYoKXt9ZnVuY3Rpb24gZyhhKXtyZXR1cm4hYXx8XCJsb2FkZWRcIj09YXx8XCJjb21wbGV0ZVwiPT1hfHxcInVuaW5pdGlhbGl6ZWRcIj09YX1mdW5jdGlvbiBoKCl7dmFyIGE9cC5zaGlmdCgpO3E9MSxhP2EudD9tKGZ1bmN0aW9uKCl7KFwiY1wiPT1hLnQ/Qi5pbmplY3RDc3M6Qi5pbmplY3RKcykoYS5zLDAsYS5hLGEueCxhLmUsMSl9LDApOihhKCksaCgpKTpxPTB9ZnVuY3Rpb24gaShhLGMsZCxlLGYsaSxqKXtmdW5jdGlvbiBrKGIpe2lmKCFvJiZnKGwucmVhZHlTdGF0ZSkmJih1LnI9bz0xLCFxJiZoKCksbC5vbmxvYWQ9bC5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxiKSl7XCJpbWdcIiE9YSYmbShmdW5jdGlvbigpe3QucmVtb3ZlQ2hpbGQobCl9LDUwKTtmb3IodmFyIGQgaW4geVtjXSl5W2NdLmhhc093blByb3BlcnR5KGQpJiZ5W2NdW2RdLm9ubG9hZCgpfX12YXIgaj1qfHxCLmVycm9yVGltZW91dCxsPWIuY3JlYXRlRWxlbWVudChhKSxvPTAscj0wLHU9e3Q6ZCxzOmMsZTpmLGE6aSx4Omp9OzE9PT15W2NdJiYocj0xLHlbY109W10pLFwib2JqZWN0XCI9PWE/bC5kYXRhPWM6KGwuc3JjPWMsbC50eXBlPWEpLGwud2lkdGg9bC5oZWlnaHQ9XCIwXCIsbC5vbmVycm9yPWwub25sb2FkPWwub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7ay5jYWxsKHRoaXMscil9LHAuc3BsaWNlKGUsMCx1KSxcImltZ1wiIT1hJiYocnx8Mj09PXlbY10/KHQuaW5zZXJ0QmVmb3JlKGwscz9udWxsOm4pLG0oayxqKSk6eVtjXS5wdXNoKGwpKX1mdW5jdGlvbiBqKGEsYixjLGQsZil7cmV0dXJuIHE9MCxiPWJ8fFwialwiLGUoYSk/aShcImNcIj09Yj92OnUsYSxiLHRoaXMuaSsrLGMsZCxmKToocC5zcGxpY2UodGhpcy5pKyssMCxhKSwxPT1wLmxlbmd0aCYmaCgpKSx0aGlzfWZ1bmN0aW9uIGsoKXt2YXIgYT1CO3JldHVybiBhLmxvYWRlcj17bG9hZDpqLGk6MH0sYX12YXIgbD1iLmRvY3VtZW50RWxlbWVudCxtPWEuc2V0VGltZW91dCxuPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIilbMF0sbz17fS50b1N0cmluZyxwPVtdLHE9MCxyPVwiTW96QXBwZWFyYW5jZVwiaW4gbC5zdHlsZSxzPXImJiEhYi5jcmVhdGVSYW5nZSgpLmNvbXBhcmVOb2RlLHQ9cz9sOm4ucGFyZW50Tm9kZSxsPWEub3BlcmEmJlwiW29iamVjdCBPcGVyYV1cIj09by5jYWxsKGEub3BlcmEpLGw9ISFiLmF0dGFjaEV2ZW50JiYhbCx1PXI/XCJvYmplY3RcIjpsP1wic2NyaXB0XCI6XCJpbWdcIix2PWw/XCJzY3JpcHRcIjp1LHc9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oYSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT1vLmNhbGwoYSl9LHg9W10seT17fSx6PXt0aW1lb3V0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGIubGVuZ3RoJiYoYS50aW1lb3V0PWJbMF0pLGF9fSxBLEI7Qj1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGEpe3ZhciBhPWEuc3BsaXQoXCIhXCIpLGI9eC5sZW5ndGgsYz1hLnBvcCgpLGQ9YS5sZW5ndGgsYz17dXJsOmMsb3JpZ1VybDpjLHByZWZpeGVzOmF9LGUsZixnO2ZvcihmPTA7ZjxkO2YrKylnPWFbZl0uc3BsaXQoXCI9XCIpLChlPXpbZy5zaGlmdCgpXSkmJihjPWUoYyxnKSk7Zm9yKGY9MDtmPGI7ZisrKWM9eFtmXShjKTtyZXR1cm4gY31mdW5jdGlvbiBnKGEsZSxmLGcsaCl7dmFyIGk9YihhKSxqPWkuYXV0b0NhbGxiYWNrO2kudXJsLnNwbGl0KFwiLlwiKS5wb3AoKS5zcGxpdChcIj9cIikuc2hpZnQoKSxpLmJ5cGFzc3x8KGUmJihlPWQoZSk/ZTplW2FdfHxlW2ddfHxlW2Euc3BsaXQoXCIvXCIpLnBvcCgpLnNwbGl0KFwiP1wiKVswXV0pLGkuaW5zdGVhZD9pLmluc3RlYWQoYSxlLGYsZyxoKTooeVtpLnVybF0/aS5ub2V4ZWM9ITA6eVtpLnVybF09MSxmLmxvYWQoaS51cmwsaS5mb3JjZUNTU3x8IWkuZm9yY2VKUyYmXCJjc3NcIj09aS51cmwuc3BsaXQoXCIuXCIpLnBvcCgpLnNwbGl0KFwiP1wiKS5zaGlmdCgpP1wiY1wiOmMsaS5ub2V4ZWMsaS5hdHRycyxpLnRpbWVvdXQpLChkKGUpfHxkKGopKSYmZi5sb2FkKGZ1bmN0aW9uKCl7aygpLGUmJmUoaS5vcmlnVXJsLGgsZyksaiYmaihpLm9yaWdVcmwsaCxnKSx5W2kudXJsXT0yfSkpKX1mdW5jdGlvbiBoKGEsYil7ZnVuY3Rpb24gYyhhLGMpe2lmKGEpe2lmKGUoYSkpY3x8KGo9ZnVuY3Rpb24oKXt2YXIgYT1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7ay5hcHBseSh0aGlzLGEpLGwoKX0pLGcoYSxqLGIsMCxoKTtlbHNlIGlmKE9iamVjdChhKT09PWEpZm9yKG4gaW4gbT1mdW5jdGlvbigpe3ZhciBiPTAsYztmb3IoYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJmIrKztyZXR1cm4gYn0oKSxhKWEuaGFzT3duUHJvcGVydHkobikmJighYyYmIS0tbSYmKGQoaik/aj1mdW5jdGlvbigpe3ZhciBhPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtrLmFwcGx5KHRoaXMsYSksbCgpfTpqW25dPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3ZhciBiPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTthJiZhLmFwcGx5KHRoaXMsYiksbCgpfX0oa1tuXSkpLGcoYVtuXSxqLGIsbixoKSl9ZWxzZSFjJiZsKCl9dmFyIGg9ISFhLnRlc3QsaT1hLmxvYWR8fGEuYm90aCxqPWEuY2FsbGJhY2t8fGYsaz1qLGw9YS5jb21wbGV0ZXx8ZixtLG47YyhoP2EueWVwOmEubm9wZSwhIWkpLGkmJmMoaSl9dmFyIGksaixsPXRoaXMueWVwbm9wZS5sb2FkZXI7aWYoZShhKSlnKGEsMCxsLDApO2Vsc2UgaWYodyhhKSlmb3IoaT0wO2k8YS5sZW5ndGg7aSsrKWo9YVtpXSxlKGopP2coaiwwLGwsMCk6dyhqKT9CKGopOk9iamVjdChqKT09PWomJmgoaixsKTtlbHNlIE9iamVjdChhKT09PWEmJmgoYSxsKX0sQi5hZGRQcmVmaXg9ZnVuY3Rpb24oYSxiKXt6W2FdPWJ9LEIuYWRkRmlsdGVyPWZ1bmN0aW9uKGEpe3gucHVzaChhKX0sQi5lcnJvclRpbWVvdXQ9MWU0LG51bGw9PWIucmVhZHlTdGF0ZSYmYi5hZGRFdmVudExpc3RlbmVyJiYoYi5yZWFkeVN0YXRlPVwibG9hZGluZ1wiLGIuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixBPWZ1bmN0aW9uKCl7Yi5yZW1vdmVFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLEEsMCksYi5yZWFkeVN0YXRlPVwiY29tcGxldGVcIn0sMCkpLGEueWVwbm9wZT1rKCksYS55ZXBub3BlLmV4ZWN1dGVTdGFjaz1oLGEueWVwbm9wZS5pbmplY3RKcz1mdW5jdGlvbihhLGMsZCxlLGksail7dmFyIGs9Yi5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpLGwsbyxlPWV8fEIuZXJyb3JUaW1lb3V0O2suc3JjPWE7Zm9yKG8gaW4gZClrLnNldEF0dHJpYnV0ZShvLGRbb10pO2M9aj9oOmN8fGYsay5vbnJlYWR5c3RhdGVjaGFuZ2U9ay5vbmxvYWQ9ZnVuY3Rpb24oKXshbCYmZyhrLnJlYWR5U3RhdGUpJiYobD0xLGMoKSxrLm9ubG9hZD1rLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsKX0sbShmdW5jdGlvbigpe2x8fChsPTEsYygxKSl9LGUpLGk/ay5vbmxvYWQoKTpuLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGssbil9LGEueWVwbm9wZS5pbmplY3RDc3M9ZnVuY3Rpb24oYSxjLGQsZSxnLGkpe3ZhciBlPWIuY3JlYXRlRWxlbWVudChcImxpbmtcIiksaixjPWk/aDpjfHxmO2UuaHJlZj1hLGUucmVsPVwic3R5bGVzaGVldFwiLGUudHlwZT1cInRleHQvY3NzXCI7Zm9yKGogaW4gZCllLnNldEF0dHJpYnV0ZShqLGRbal0pO2d8fChuLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGUsbiksbShjLDApKX19KHRoaXMsZG9jdW1lbnQpLE1vZGVybml6ci5sb2FkPWZ1bmN0aW9uKCl7eWVwbm9wZS5hcHBseSh3aW5kb3csW10uc2xpY2UuY2FsbChhcmd1bWVudHMsMCkpfTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
